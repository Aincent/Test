// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Clan/ClanBattle.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Clan/ClanBattle.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ClanPackage {

namespace {

const ::google::protobuf::Descriptor* ReqBatterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBatterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBatterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBatterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BatterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BatterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBatterMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBatterMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqOccupyFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqOccupyFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckOccupyFlag_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckOccupyFlag_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseBatterInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseBatterInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlagInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlagInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ScoreChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ScoreChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlagStateChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlagStateChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* FlagProtectedTimeOut_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FlagProtectedTimeOut_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanBattleResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanBattleResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* OccupyFail_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OccupyFail_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGS2WSGetFactionName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGS2WSGetFactionName_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGS2WSGetFactionName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGS2WSGetFactionName_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToGameClanDelete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGameClanDelete_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqMMapPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqMMapPlayer_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Clan_2fClanBattle_2eproto() {
  protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Clan/ClanBattle.proto");
  GOOGLE_CHECK(file != NULL);
  ReqBatterInfo_descriptor_ = file->message_type(0);
  static const int ReqBatterInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBatterInfo, flag_),
  };
  ReqBatterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBatterInfo_descriptor_,
      ReqBatterInfo::default_instance_,
      ReqBatterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBatterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBatterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBatterInfo));
  AckBatterInfo_descriptor_ = file->message_type(1);
  static const int AckBatterInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBatterInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBatterInfo, info_),
  };
  AckBatterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBatterInfo_descriptor_,
      AckBatterInfo::default_instance_,
      AckBatterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBatterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBatterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBatterInfo));
  BatterInfo_descriptor_ = file->message_type(2);
  static const int BatterInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatterInfo, firstclanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatterInfo, secondclanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatterInfo, firstclanscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatterInfo, secondclanscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatterInfo, winid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatterInfo, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatterInfo, secondname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatterInfo, finish_),
  };
  BatterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BatterInfo_descriptor_,
      BatterInfo::default_instance_,
      BatterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BatterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BatterInfo));
  AckBatterMap_descriptor_ = file->message_type(3);
  static const int AckBatterMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBatterMap, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBatterMap, mapid_),
  };
  AckBatterMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBatterMap_descriptor_,
      AckBatterMap::default_instance_,
      AckBatterMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBatterMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBatterMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBatterMap));
  ReqOccupyFlag_descriptor_ = file->message_type(4);
  static const int ReqOccupyFlag_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOccupyFlag, key_),
  };
  ReqOccupyFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqOccupyFlag_descriptor_,
      ReqOccupyFlag::default_instance_,
      ReqOccupyFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOccupyFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqOccupyFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqOccupyFlag));
  AckOccupyFlag_descriptor_ = file->message_type(5);
  static const int AckOccupyFlag_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOccupyFlag, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOccupyFlag, ret_),
  };
  AckOccupyFlag_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckOccupyFlag_descriptor_,
      AckOccupyFlag::default_instance_,
      AckOccupyFlag_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOccupyFlag, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckOccupyFlag, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckOccupyFlag));
  BaseBatterInfo_descriptor_ = file->message_type(6);
  static const int BaseBatterInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseBatterInfo, selfflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseBatterInfo, targetflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseBatterInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseBatterInfo, targetclanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseBatterInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseBatterInfo, redscore_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseBatterInfo, bluescore_),
  };
  BaseBatterInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseBatterInfo_descriptor_,
      BaseBatterInfo::default_instance_,
      BaseBatterInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseBatterInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseBatterInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseBatterInfo));
  FlagInfo_descriptor_ = file->message_type(7);
  static const int FlagInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagInfo, ower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagInfo, time_),
  };
  FlagInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlagInfo_descriptor_,
      FlagInfo::default_instance_,
      FlagInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlagInfo));
  ScoreChange_descriptor_ = file->message_type(8);
  static const int ScoreChange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreChange, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreChange, score_),
  };
  ScoreChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ScoreChange_descriptor_,
      ScoreChange::default_instance_,
      ScoreChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ScoreChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ScoreChange));
  FlagStateChange_descriptor_ = file->message_type(9);
  static const int FlagStateChange_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagStateChange, playerkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagStateChange, flagkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagStateChange, owner_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagStateChange, clanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagStateChange, playername_),
  };
  FlagStateChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlagStateChange_descriptor_,
      FlagStateChange::default_instance_,
      FlagStateChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagStateChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagStateChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlagStateChange));
  FlagProtectedTimeOut_descriptor_ = file->message_type(10);
  static const int FlagProtectedTimeOut_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagProtectedTimeOut, key_),
  };
  FlagProtectedTimeOut_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FlagProtectedTimeOut_descriptor_,
      FlagProtectedTimeOut::default_instance_,
      FlagProtectedTimeOut_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagProtectedTimeOut, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FlagProtectedTimeOut, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FlagProtectedTimeOut));
  ClanBattleResult_descriptor_ = file->message_type(11);
  static const int ClanBattleResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanBattleResult, result_),
  };
  ClanBattleResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanBattleResult_descriptor_,
      ClanBattleResult::default_instance_,
      ClanBattleResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanBattleResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanBattleResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanBattleResult));
  OccupyFail_descriptor_ = file->message_type(12);
  static const int OccupyFail_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyFail, ret_),
  };
  OccupyFail_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OccupyFail_descriptor_,
      OccupyFail::default_instance_,
      OccupyFail_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyFail, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OccupyFail, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OccupyFail));
  ReqGS2WSGetFactionName_descriptor_ = file->message_type(13);
  static const int ReqGS2WSGetFactionName_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGS2WSGetFactionName, id_),
  };
  ReqGS2WSGetFactionName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGS2WSGetFactionName_descriptor_,
      ReqGS2WSGetFactionName::default_instance_,
      ReqGS2WSGetFactionName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGS2WSGetFactionName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGS2WSGetFactionName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGS2WSGetFactionName));
  AckGS2WSGetFactionName_descriptor_ = file->message_type(14);
  static const int AckGS2WSGetFactionName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGS2WSGetFactionName, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGS2WSGetFactionName, name_),
  };
  AckGS2WSGetFactionName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGS2WSGetFactionName_descriptor_,
      AckGS2WSGetFactionName::default_instance_,
      AckGS2WSGetFactionName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGS2WSGetFactionName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGS2WSGetFactionName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGS2WSGetFactionName));
  ToGameClanDelete_descriptor_ = file->message_type(15);
  static const int ToGameClanDelete_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGameClanDelete, cid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGameClanDelete, only_),
  };
  ToGameClanDelete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGameClanDelete_descriptor_,
      ToGameClanDelete::default_instance_,
      ToGameClanDelete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGameClanDelete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGameClanDelete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGameClanDelete));
  ClientReqMMapPlayer_descriptor_ = file->message_type(16);
  static const int ClientReqMMapPlayer_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMMapPlayer, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMMapPlayer, ismyself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMMapPlayer, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMMapPlayer, ypos_),
  };
  ClientReqMMapPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqMMapPlayer_descriptor_,
      ClientReqMMapPlayer::default_instance_,
      ClientReqMMapPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMMapPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMMapPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqMMapPlayer));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Clan_2fClanBattle_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBatterInfo_descriptor_, &ReqBatterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBatterInfo_descriptor_, &AckBatterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BatterInfo_descriptor_, &BatterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBatterMap_descriptor_, &AckBatterMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqOccupyFlag_descriptor_, &ReqOccupyFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckOccupyFlag_descriptor_, &AckOccupyFlag::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseBatterInfo_descriptor_, &BaseBatterInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlagInfo_descriptor_, &FlagInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ScoreChange_descriptor_, &ScoreChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlagStateChange_descriptor_, &FlagStateChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FlagProtectedTimeOut_descriptor_, &FlagProtectedTimeOut::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanBattleResult_descriptor_, &ClanBattleResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OccupyFail_descriptor_, &OccupyFail::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGS2WSGetFactionName_descriptor_, &ReqGS2WSGetFactionName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGS2WSGetFactionName_descriptor_, &AckGS2WSGetFactionName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGameClanDelete_descriptor_, &ToGameClanDelete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqMMapPlayer_descriptor_, &ClientReqMMapPlayer::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Clan_2fClanBattle_2eproto() {
  delete ReqBatterInfo::default_instance_;
  delete ReqBatterInfo_reflection_;
  delete AckBatterInfo::default_instance_;
  delete AckBatterInfo_reflection_;
  delete BatterInfo::default_instance_;
  delete BatterInfo_reflection_;
  delete AckBatterMap::default_instance_;
  delete AckBatterMap_reflection_;
  delete ReqOccupyFlag::default_instance_;
  delete ReqOccupyFlag_reflection_;
  delete AckOccupyFlag::default_instance_;
  delete AckOccupyFlag_reflection_;
  delete BaseBatterInfo::default_instance_;
  delete BaseBatterInfo_reflection_;
  delete FlagInfo::default_instance_;
  delete FlagInfo_reflection_;
  delete ScoreChange::default_instance_;
  delete ScoreChange_reflection_;
  delete FlagStateChange::default_instance_;
  delete FlagStateChange_reflection_;
  delete FlagProtectedTimeOut::default_instance_;
  delete FlagProtectedTimeOut_reflection_;
  delete ClanBattleResult::default_instance_;
  delete ClanBattleResult_reflection_;
  delete OccupyFail::default_instance_;
  delete OccupyFail_reflection_;
  delete ReqGS2WSGetFactionName::default_instance_;
  delete ReqGS2WSGetFactionName_reflection_;
  delete AckGS2WSGetFactionName::default_instance_;
  delete AckGS2WSGetFactionName_reflection_;
  delete ToGameClanDelete::default_instance_;
  delete ToGameClanDelete_reflection_;
  delete ClientReqMMapPlayer::default_instance_;
  delete ClientReqMMapPlayer_reflection_;
}

void protobuf_AddDesc_Clan_2fClanBattle_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025Clan/ClanBattle.proto\022\013ClanPackage\"\035\n\r"
    "ReqBatterInfo\022\014\n\004flag\030\001 \002(\005\"D\n\rAckBatter"
    "Info\022\014\n\004flag\030\001 \002(\005\022%\n\004info\030\002 \003(\0132\027.ClanP"
    "ackage.BatterInfo\"\256\001\n\nBatterInfo\022\023\n\013firs"
    "tclanid\030\001 \002(\005\022\024\n\014secondclanid\030\002 \001(\005\022\026\n\016f"
    "irstclanscore\030\003 \001(\005\022\027\n\017secondclanscore\030\004"
    " \001(\005\022\r\n\005winid\030\005 \001(\005\022\021\n\tfirstname\030\006 \001(\014\022\022"
    "\n\nsecondname\030\007 \001(\014\022\016\n\006finish\030\010 \001(\005\"*\n\014Ac"
    "kBatterMap\022\013\n\003ret\030\001 \002(\005\022\r\n\005mapid\030\002 \001(\003\"\034"
    "\n\rReqOccupyFlag\022\013\n\003key\030\001 \002(\005\")\n\rAckOccup"
    "yFlag\022\013\n\003key\030\001 \002(\005\022\013\n\003ret\030\002 \001(\005\"\246\001\n\016Base"
    "BatterInfo\022\020\n\010selfflag\030\001 \002(\005\022\022\n\ntargetfl"
    "ag\030\002 \001(\005\022\014\n\004time\030\003 \001(\003\022\026\n\016targetclanname"
    "\030\004 \001(\014\022#\n\004info\030\005 \003(\0132\025.ClanPackage.FlagI"
    "nfo\022\020\n\010redscore\030\006 \001(\005\022\021\n\tbluescore\030\007 \001(\005"
    "\"\?\n\010FlagInfo\022\013\n\003key\030\001 \002(\005\022\n\n\002id\030\002 \001(\005\022\014\n"
    "\004ower\030\003 \001(\005\022\014\n\004time\030\004 \001(\005\"+\n\013ScoreChange"
    "\022\r\n\005owner\030\001 \002(\005\022\r\n\005score\030\002 \001(\005\"j\n\017FlagSt"
    "ateChange\022\021\n\tplayerkey\030\001 \002(\005\022\017\n\007flagkey\030"
    "\002 \001(\005\022\r\n\005owner\030\003 \001(\005\022\020\n\010clanname\030\004 \001(\014\022\022"
    "\n\nplayername\030\005 \001(\014\"#\n\024FlagProtectedTimeO"
    "ut\022\013\n\003key\030\001 \002(\005\"\"\n\020ClanBattleResult\022\016\n\006r"
    "esult\030\001 \002(\005\"\031\n\nOccupyFail\022\013\n\003ret\030\001 \002(\005\"$"
    "\n\026ReqGS2WSGetFactionName\022\n\n\002id\030\001 \002(\005\"2\n\026"
    "AckGS2WSGetFactionName\022\n\n\002id\030\001 \002(\005\022\014\n\004na"
    "me\030\002 \001(\014\"-\n\020ToGameClanDelete\022\013\n\003cid\030\001 \002("
    "\003\022\014\n\004only\030\002 \001(\003\"P\n\023ClientReqMMapPlayer\022\013"
    "\n\003key\030\001 \003(\005\022\020\n\010ismyself\030\002 \003(\010\022\014\n\004xpos\030\003 "
    "\003(\005\022\014\n\004ypos\030\004 \003(\005", 1137);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Clan/ClanBattle.proto", &protobuf_RegisterTypes);
  ReqBatterInfo::default_instance_ = new ReqBatterInfo();
  AckBatterInfo::default_instance_ = new AckBatterInfo();
  BatterInfo::default_instance_ = new BatterInfo();
  AckBatterMap::default_instance_ = new AckBatterMap();
  ReqOccupyFlag::default_instance_ = new ReqOccupyFlag();
  AckOccupyFlag::default_instance_ = new AckOccupyFlag();
  BaseBatterInfo::default_instance_ = new BaseBatterInfo();
  FlagInfo::default_instance_ = new FlagInfo();
  ScoreChange::default_instance_ = new ScoreChange();
  FlagStateChange::default_instance_ = new FlagStateChange();
  FlagProtectedTimeOut::default_instance_ = new FlagProtectedTimeOut();
  ClanBattleResult::default_instance_ = new ClanBattleResult();
  OccupyFail::default_instance_ = new OccupyFail();
  ReqGS2WSGetFactionName::default_instance_ = new ReqGS2WSGetFactionName();
  AckGS2WSGetFactionName::default_instance_ = new AckGS2WSGetFactionName();
  ToGameClanDelete::default_instance_ = new ToGameClanDelete();
  ClientReqMMapPlayer::default_instance_ = new ClientReqMMapPlayer();
  ReqBatterInfo::default_instance_->InitAsDefaultInstance();
  AckBatterInfo::default_instance_->InitAsDefaultInstance();
  BatterInfo::default_instance_->InitAsDefaultInstance();
  AckBatterMap::default_instance_->InitAsDefaultInstance();
  ReqOccupyFlag::default_instance_->InitAsDefaultInstance();
  AckOccupyFlag::default_instance_->InitAsDefaultInstance();
  BaseBatterInfo::default_instance_->InitAsDefaultInstance();
  FlagInfo::default_instance_->InitAsDefaultInstance();
  ScoreChange::default_instance_->InitAsDefaultInstance();
  FlagStateChange::default_instance_->InitAsDefaultInstance();
  FlagProtectedTimeOut::default_instance_->InitAsDefaultInstance();
  ClanBattleResult::default_instance_->InitAsDefaultInstance();
  OccupyFail::default_instance_->InitAsDefaultInstance();
  ReqGS2WSGetFactionName::default_instance_->InitAsDefaultInstance();
  AckGS2WSGetFactionName::default_instance_->InitAsDefaultInstance();
  ToGameClanDelete::default_instance_->InitAsDefaultInstance();
  ClientReqMMapPlayer::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Clan_2fClanBattle_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Clan_2fClanBattle_2eproto {
  StaticDescriptorInitializer_Clan_2fClanBattle_2eproto() {
    protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  }
} static_descriptor_initializer_Clan_2fClanBattle_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqBatterInfo::kFlagFieldNumber;
#endif  // !_MSC_VER

ReqBatterInfo::ReqBatterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBatterInfo::InitAsDefaultInstance() {
}

ReqBatterInfo::ReqBatterInfo(const ReqBatterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBatterInfo::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBatterInfo::~ReqBatterInfo() {
  SharedDtor();
}

void ReqBatterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBatterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBatterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBatterInfo_descriptor_;
}

const ReqBatterInfo& ReqBatterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

ReqBatterInfo* ReqBatterInfo::default_instance_ = NULL;

ReqBatterInfo* ReqBatterInfo::New() const {
  return new ReqBatterInfo;
}

void ReqBatterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBatterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBatterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBatterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBatterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBatterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBatterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBatterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBatterInfo::MergeFrom(const ReqBatterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBatterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBatterInfo::CopyFrom(const ReqBatterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBatterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqBatterInfo::Swap(ReqBatterInfo* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBatterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBatterInfo_descriptor_;
  metadata.reflection = ReqBatterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBatterInfo::kFlagFieldNumber;
const int AckBatterInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

AckBatterInfo::AckBatterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBatterInfo::InitAsDefaultInstance() {
}

AckBatterInfo::AckBatterInfo(const AckBatterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBatterInfo::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBatterInfo::~AckBatterInfo() {
  SharedDtor();
}

void AckBatterInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBatterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBatterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBatterInfo_descriptor_;
}

const AckBatterInfo& AckBatterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

AckBatterInfo* AckBatterInfo::default_instance_ = NULL;

AckBatterInfo* AckBatterInfo::New() const {
  return new AckBatterInfo;
}

void AckBatterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBatterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // repeated .ClanPackage.BatterInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBatterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // repeated .ClanPackage.BatterInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBatterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // repeated .ClanPackage.BatterInfo info = 2;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBatterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  // repeated .ClanPackage.BatterInfo info = 2;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBatterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBatterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBatterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBatterInfo::MergeFrom(const AckBatterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBatterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBatterInfo::CopyFrom(const AckBatterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBatterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void AckBatterInfo::Swap(AckBatterInfo* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBatterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBatterInfo_descriptor_;
  metadata.reflection = AckBatterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BatterInfo::kFirstclanidFieldNumber;
const int BatterInfo::kSecondclanidFieldNumber;
const int BatterInfo::kFirstclanscoreFieldNumber;
const int BatterInfo::kSecondclanscoreFieldNumber;
const int BatterInfo::kWinidFieldNumber;
const int BatterInfo::kFirstnameFieldNumber;
const int BatterInfo::kSecondnameFieldNumber;
const int BatterInfo::kFinishFieldNumber;
#endif  // !_MSC_VER

BatterInfo::BatterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BatterInfo::InitAsDefaultInstance() {
}

BatterInfo::BatterInfo(const BatterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BatterInfo::SharedCtor() {
  _cached_size_ = 0;
  firstclanid_ = 0;
  secondclanid_ = 0;
  firstclanscore_ = 0;
  secondclanscore_ = 0;
  winid_ = 0;
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  secondname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  finish_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BatterInfo::~BatterInfo() {
  SharedDtor();
}

void BatterInfo::SharedDtor() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    delete firstname_;
  }
  if (secondname_ != &::google::protobuf::internal::kEmptyString) {
    delete secondname_;
  }
  if (this != default_instance_) {
  }
}

void BatterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BatterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BatterInfo_descriptor_;
}

const BatterInfo& BatterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

BatterInfo* BatterInfo::default_instance_ = NULL;

BatterInfo* BatterInfo::New() const {
  return new BatterInfo;
}

void BatterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    firstclanid_ = 0;
    secondclanid_ = 0;
    firstclanscore_ = 0;
    secondclanscore_ = 0;
    winid_ = 0;
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::kEmptyString) {
        firstname_->clear();
      }
    }
    if (has_secondname()) {
      if (secondname_ != &::google::protobuf::internal::kEmptyString) {
        secondname_->clear();
      }
    }
    finish_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BatterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 firstclanid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstclanid_)));
          set_has_firstclanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_secondclanid;
        break;
      }

      // optional int32 secondclanid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secondclanid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secondclanid_)));
          set_has_secondclanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_firstclanscore;
        break;
      }

      // optional int32 firstclanscore = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstclanscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstclanscore_)));
          set_has_firstclanscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_secondclanscore;
        break;
      }

      // optional int32 secondclanscore = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_secondclanscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &secondclanscore_)));
          set_has_secondclanscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_winid;
        break;
      }

      // optional int32 winid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_winid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &winid_)));
          set_has_winid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_firstname;
        break;
      }

      // optional bytes firstname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_firstname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_firstname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_secondname;
        break;
      }

      // optional bytes secondname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_secondname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_secondname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_finish;
        break;
      }

      // optional int32 finish = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_finish:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &finish_)));
          set_has_finish();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BatterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 firstclanid = 1;
  if (has_firstclanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->firstclanid(), output);
  }

  // optional int32 secondclanid = 2;
  if (has_secondclanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->secondclanid(), output);
  }

  // optional int32 firstclanscore = 3;
  if (has_firstclanscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->firstclanscore(), output);
  }

  // optional int32 secondclanscore = 4;
  if (has_secondclanscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->secondclanscore(), output);
  }

  // optional int32 winid = 5;
  if (has_winid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->winid(), output);
  }

  // optional bytes firstname = 6;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->firstname(), output);
  }

  // optional bytes secondname = 7;
  if (has_secondname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      7, this->secondname(), output);
  }

  // optional int32 finish = 8;
  if (has_finish()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->finish(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BatterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 firstclanid = 1;
  if (has_firstclanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->firstclanid(), target);
  }

  // optional int32 secondclanid = 2;
  if (has_secondclanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->secondclanid(), target);
  }

  // optional int32 firstclanscore = 3;
  if (has_firstclanscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->firstclanscore(), target);
  }

  // optional int32 secondclanscore = 4;
  if (has_secondclanscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->secondclanscore(), target);
  }

  // optional int32 winid = 5;
  if (has_winid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->winid(), target);
  }

  // optional bytes firstname = 6;
  if (has_firstname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->firstname(), target);
  }

  // optional bytes secondname = 7;
  if (has_secondname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        7, this->secondname(), target);
  }

  // optional int32 finish = 8;
  if (has_finish()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->finish(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BatterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 firstclanid = 1;
    if (has_firstclanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstclanid());
    }

    // optional int32 secondclanid = 2;
    if (has_secondclanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secondclanid());
    }

    // optional int32 firstclanscore = 3;
    if (has_firstclanscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstclanscore());
    }

    // optional int32 secondclanscore = 4;
    if (has_secondclanscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->secondclanscore());
    }

    // optional int32 winid = 5;
    if (has_winid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->winid());
    }

    // optional bytes firstname = 6;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->firstname());
    }

    // optional bytes secondname = 7;
    if (has_secondname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->secondname());
    }

    // optional int32 finish = 8;
    if (has_finish()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->finish());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BatterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BatterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BatterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BatterInfo::MergeFrom(const BatterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_firstclanid()) {
      set_firstclanid(from.firstclanid());
    }
    if (from.has_secondclanid()) {
      set_secondclanid(from.secondclanid());
    }
    if (from.has_firstclanscore()) {
      set_firstclanscore(from.firstclanscore());
    }
    if (from.has_secondclanscore()) {
      set_secondclanscore(from.secondclanscore());
    }
    if (from.has_winid()) {
      set_winid(from.winid());
    }
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_secondname()) {
      set_secondname(from.secondname());
    }
    if (from.has_finish()) {
      set_finish(from.finish());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BatterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BatterInfo::CopyFrom(const BatterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BatterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BatterInfo::Swap(BatterInfo* other) {
  if (other != this) {
    std::swap(firstclanid_, other->firstclanid_);
    std::swap(secondclanid_, other->secondclanid_);
    std::swap(firstclanscore_, other->firstclanscore_);
    std::swap(secondclanscore_, other->secondclanscore_);
    std::swap(winid_, other->winid_);
    std::swap(firstname_, other->firstname_);
    std::swap(secondname_, other->secondname_);
    std::swap(finish_, other->finish_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BatterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BatterInfo_descriptor_;
  metadata.reflection = BatterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBatterMap::kRetFieldNumber;
const int AckBatterMap::kMapidFieldNumber;
#endif  // !_MSC_VER

AckBatterMap::AckBatterMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBatterMap::InitAsDefaultInstance() {
}

AckBatterMap::AckBatterMap(const AckBatterMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBatterMap::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBatterMap::~AckBatterMap() {
  SharedDtor();
}

void AckBatterMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBatterMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBatterMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBatterMap_descriptor_;
}

const AckBatterMap& AckBatterMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

AckBatterMap* AckBatterMap::default_instance_ = NULL;

AckBatterMap* AckBatterMap::New() const {
  return new AckBatterMap;
}

void AckBatterMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    mapid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBatterMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int64 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBatterMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBatterMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBatterMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBatterMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBatterMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBatterMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBatterMap::MergeFrom(const AckBatterMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBatterMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBatterMap::CopyFrom(const AckBatterMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBatterMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckBatterMap::Swap(AckBatterMap* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBatterMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBatterMap_descriptor_;
  metadata.reflection = AckBatterMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqOccupyFlag::kKeyFieldNumber;
#endif  // !_MSC_VER

ReqOccupyFlag::ReqOccupyFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqOccupyFlag::InitAsDefaultInstance() {
}

ReqOccupyFlag::ReqOccupyFlag(const ReqOccupyFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqOccupyFlag::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqOccupyFlag::~ReqOccupyFlag() {
  SharedDtor();
}

void ReqOccupyFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqOccupyFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqOccupyFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqOccupyFlag_descriptor_;
}

const ReqOccupyFlag& ReqOccupyFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

ReqOccupyFlag* ReqOccupyFlag::default_instance_ = NULL;

ReqOccupyFlag* ReqOccupyFlag::New() const {
  return new ReqOccupyFlag;
}

void ReqOccupyFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqOccupyFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqOccupyFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqOccupyFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqOccupyFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqOccupyFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqOccupyFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqOccupyFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqOccupyFlag::MergeFrom(const ReqOccupyFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqOccupyFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqOccupyFlag::CopyFrom(const ReqOccupyFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqOccupyFlag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqOccupyFlag::Swap(ReqOccupyFlag* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqOccupyFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqOccupyFlag_descriptor_;
  metadata.reflection = ReqOccupyFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckOccupyFlag::kKeyFieldNumber;
const int AckOccupyFlag::kRetFieldNumber;
#endif  // !_MSC_VER

AckOccupyFlag::AckOccupyFlag()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckOccupyFlag::InitAsDefaultInstance() {
}

AckOccupyFlag::AckOccupyFlag(const AckOccupyFlag& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckOccupyFlag::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckOccupyFlag::~AckOccupyFlag() {
  SharedDtor();
}

void AckOccupyFlag::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckOccupyFlag::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckOccupyFlag::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckOccupyFlag_descriptor_;
}

const AckOccupyFlag& AckOccupyFlag::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

AckOccupyFlag* AckOccupyFlag::default_instance_ = NULL;

AckOccupyFlag* AckOccupyFlag::New() const {
  return new AckOccupyFlag;
}

void AckOccupyFlag::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckOccupyFlag::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ret;
        break;
      }

      // optional int32 ret = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckOccupyFlag::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckOccupyFlag::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional int32 ret = 2;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckOccupyFlag::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 ret = 2;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckOccupyFlag::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckOccupyFlag* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckOccupyFlag*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckOccupyFlag::MergeFrom(const AckOccupyFlag& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckOccupyFlag::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckOccupyFlag::CopyFrom(const AckOccupyFlag& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckOccupyFlag::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckOccupyFlag::Swap(AckOccupyFlag* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckOccupyFlag::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckOccupyFlag_descriptor_;
  metadata.reflection = AckOccupyFlag_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseBatterInfo::kSelfflagFieldNumber;
const int BaseBatterInfo::kTargetflagFieldNumber;
const int BaseBatterInfo::kTimeFieldNumber;
const int BaseBatterInfo::kTargetclannameFieldNumber;
const int BaseBatterInfo::kInfoFieldNumber;
const int BaseBatterInfo::kRedscoreFieldNumber;
const int BaseBatterInfo::kBluescoreFieldNumber;
#endif  // !_MSC_VER

BaseBatterInfo::BaseBatterInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseBatterInfo::InitAsDefaultInstance() {
}

BaseBatterInfo::BaseBatterInfo(const BaseBatterInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseBatterInfo::SharedCtor() {
  _cached_size_ = 0;
  selfflag_ = 0;
  targetflag_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  targetclanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  redscore_ = 0;
  bluescore_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseBatterInfo::~BaseBatterInfo() {
  SharedDtor();
}

void BaseBatterInfo::SharedDtor() {
  if (targetclanname_ != &::google::protobuf::internal::kEmptyString) {
    delete targetclanname_;
  }
  if (this != default_instance_) {
  }
}

void BaseBatterInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseBatterInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseBatterInfo_descriptor_;
}

const BaseBatterInfo& BaseBatterInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

BaseBatterInfo* BaseBatterInfo::default_instance_ = NULL;

BaseBatterInfo* BaseBatterInfo::New() const {
  return new BaseBatterInfo;
}

void BaseBatterInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    selfflag_ = 0;
    targetflag_ = 0;
    time_ = GOOGLE_LONGLONG(0);
    if (has_targetclanname()) {
      if (targetclanname_ != &::google::protobuf::internal::kEmptyString) {
        targetclanname_->clear();
      }
    }
    redscore_ = 0;
    bluescore_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseBatterInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 selfflag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfflag_)));
          set_has_selfflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetflag;
        break;
      }

      // optional int32 targetflag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetflag_)));
          set_has_targetflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_targetclanname;
        break;
      }

      // optional bytes targetclanname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_targetclanname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_targetclanname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        break;
      }

      // repeated .ClanPackage.FlagInfo info = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_info;
        if (input->ExpectTag(48)) goto parse_redscore;
        break;
      }

      // optional int32 redscore = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_redscore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &redscore_)));
          set_has_redscore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bluescore;
        break;
      }

      // optional int32 bluescore = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bluescore:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bluescore_)));
          set_has_bluescore();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseBatterInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 selfflag = 1;
  if (has_selfflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->selfflag(), output);
  }

  // optional int32 targetflag = 2;
  if (has_targetflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->targetflag(), output);
  }

  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  // optional bytes targetclanname = 4;
  if (has_targetclanname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->targetclanname(), output);
  }

  // repeated .ClanPackage.FlagInfo info = 5;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->info(i), output);
  }

  // optional int32 redscore = 6;
  if (has_redscore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->redscore(), output);
  }

  // optional int32 bluescore = 7;
  if (has_bluescore()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bluescore(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseBatterInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 selfflag = 1;
  if (has_selfflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->selfflag(), target);
  }

  // optional int32 targetflag = 2;
  if (has_targetflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->targetflag(), target);
  }

  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  // optional bytes targetclanname = 4;
  if (has_targetclanname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->targetclanname(), target);
  }

  // repeated .ClanPackage.FlagInfo info = 5;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->info(i), target);
  }

  // optional int32 redscore = 6;
  if (has_redscore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->redscore(), target);
  }

  // optional int32 bluescore = 7;
  if (has_bluescore()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bluescore(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseBatterInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 selfflag = 1;
    if (has_selfflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfflag());
    }

    // optional int32 targetflag = 2;
    if (has_targetflag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetflag());
    }

    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional bytes targetclanname = 4;
    if (has_targetclanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->targetclanname());
    }

    // optional int32 redscore = 6;
    if (has_redscore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->redscore());
    }

    // optional int32 bluescore = 7;
    if (has_bluescore()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bluescore());
    }

  }
  // repeated .ClanPackage.FlagInfo info = 5;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseBatterInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseBatterInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseBatterInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseBatterInfo::MergeFrom(const BaseBatterInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_selfflag()) {
      set_selfflag(from.selfflag());
    }
    if (from.has_targetflag()) {
      set_targetflag(from.targetflag());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_targetclanname()) {
      set_targetclanname(from.targetclanname());
    }
    if (from.has_redscore()) {
      set_redscore(from.redscore());
    }
    if (from.has_bluescore()) {
      set_bluescore(from.bluescore());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseBatterInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseBatterInfo::CopyFrom(const BaseBatterInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseBatterInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void BaseBatterInfo::Swap(BaseBatterInfo* other) {
  if (other != this) {
    std::swap(selfflag_, other->selfflag_);
    std::swap(targetflag_, other->targetflag_);
    std::swap(time_, other->time_);
    std::swap(targetclanname_, other->targetclanname_);
    info_.Swap(&other->info_);
    std::swap(redscore_, other->redscore_);
    std::swap(bluescore_, other->bluescore_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseBatterInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseBatterInfo_descriptor_;
  metadata.reflection = BaseBatterInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlagInfo::kKeyFieldNumber;
const int FlagInfo::kIdFieldNumber;
const int FlagInfo::kOwerFieldNumber;
const int FlagInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

FlagInfo::FlagInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlagInfo::InitAsDefaultInstance() {
}

FlagInfo::FlagInfo(const FlagInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlagInfo::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  id_ = 0;
  ower_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlagInfo::~FlagInfo() {
  SharedDtor();
}

void FlagInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlagInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlagInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlagInfo_descriptor_;
}

const FlagInfo& FlagInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

FlagInfo* FlagInfo::default_instance_ = NULL;

FlagInfo* FlagInfo::New() const {
  return new FlagInfo;
}

void FlagInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    id_ = 0;
    ower_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlagInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ower;
        break;
      }

      // optional int32 ower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ower_)));
          set_has_ower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlagInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 ower = 3;
  if (has_ower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ower(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlagInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 ower = 3;
  if (has_ower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ower(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlagInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 ower = 3;
    if (has_ower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ower());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlagInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlagInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlagInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlagInfo::MergeFrom(const FlagInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_ower()) {
      set_ower(from.ower());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlagInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlagInfo::CopyFrom(const FlagInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlagInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FlagInfo::Swap(FlagInfo* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(id_, other->id_);
    std::swap(ower_, other->ower_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlagInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlagInfo_descriptor_;
  metadata.reflection = FlagInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ScoreChange::kOwnerFieldNumber;
const int ScoreChange::kScoreFieldNumber;
#endif  // !_MSC_VER

ScoreChange::ScoreChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ScoreChange::InitAsDefaultInstance() {
}

ScoreChange::ScoreChange(const ScoreChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ScoreChange::SharedCtor() {
  _cached_size_ = 0;
  owner_ = 0;
  score_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ScoreChange::~ScoreChange() {
  SharedDtor();
}

void ScoreChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ScoreChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ScoreChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ScoreChange_descriptor_;
}

const ScoreChange& ScoreChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

ScoreChange* ScoreChange::default_instance_ = NULL;

ScoreChange* ScoreChange::New() const {
  return new ScoreChange;
}

void ScoreChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    owner_ = 0;
    score_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ScoreChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 owner = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_score;
        break;
      }

      // optional int32 score = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ScoreChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 owner = 1;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->owner(), output);
  }

  // optional int32 score = 2;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->score(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ScoreChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 owner = 1;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->owner(), target);
  }

  // optional int32 score = 2;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->score(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ScoreChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 owner = 1;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->owner());
    }

    // optional int32 score = 2;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ScoreChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ScoreChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ScoreChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ScoreChange::MergeFrom(const ScoreChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ScoreChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ScoreChange::CopyFrom(const ScoreChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ScoreChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ScoreChange::Swap(ScoreChange* other) {
  if (other != this) {
    std::swap(owner_, other->owner_);
    std::swap(score_, other->score_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ScoreChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ScoreChange_descriptor_;
  metadata.reflection = ScoreChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlagStateChange::kPlayerkeyFieldNumber;
const int FlagStateChange::kFlagkeyFieldNumber;
const int FlagStateChange::kOwnerFieldNumber;
const int FlagStateChange::kClannameFieldNumber;
const int FlagStateChange::kPlayernameFieldNumber;
#endif  // !_MSC_VER

FlagStateChange::FlagStateChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlagStateChange::InitAsDefaultInstance() {
}

FlagStateChange::FlagStateChange(const FlagStateChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlagStateChange::SharedCtor() {
  _cached_size_ = 0;
  playerkey_ = 0;
  flagkey_ = 0;
  owner_ = 0;
  clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  playername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlagStateChange::~FlagStateChange() {
  SharedDtor();
}

void FlagStateChange::SharedDtor() {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (playername_ != &::google::protobuf::internal::kEmptyString) {
    delete playername_;
  }
  if (this != default_instance_) {
  }
}

void FlagStateChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlagStateChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlagStateChange_descriptor_;
}

const FlagStateChange& FlagStateChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

FlagStateChange* FlagStateChange::default_instance_ = NULL;

FlagStateChange* FlagStateChange::New() const {
  return new FlagStateChange;
}

void FlagStateChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerkey_ = 0;
    flagkey_ = 0;
    owner_ = 0;
    if (has_clanname()) {
      if (clanname_ != &::google::protobuf::internal::kEmptyString) {
        clanname_->clear();
      }
    }
    if (has_playername()) {
      if (playername_ != &::google::protobuf::internal::kEmptyString) {
        playername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlagStateChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 playerkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playerkey_)));
          set_has_playerkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flagkey;
        break;
      }

      // optional int32 flagkey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flagkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flagkey_)));
          set_has_flagkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_owner;
        break;
      }

      // optional int32 owner = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_owner:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &owner_)));
          set_has_owner();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_clanname;
        break;
      }

      // optional bytes clanname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clanname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clanname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_playername;
        break;
      }

      // optional bytes playername = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_playername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlagStateChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 playerkey = 1;
  if (has_playerkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->playerkey(), output);
  }

  // optional int32 flagkey = 2;
  if (has_flagkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flagkey(), output);
  }

  // optional int32 owner = 3;
  if (has_owner()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->owner(), output);
  }

  // optional bytes clanname = 4;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->clanname(), output);
  }

  // optional bytes playername = 5;
  if (has_playername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->playername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlagStateChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 playerkey = 1;
  if (has_playerkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->playerkey(), target);
  }

  // optional int32 flagkey = 2;
  if (has_flagkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flagkey(), target);
  }

  // optional int32 owner = 3;
  if (has_owner()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->owner(), target);
  }

  // optional bytes clanname = 4;
  if (has_clanname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->clanname(), target);
  }

  // optional bytes playername = 5;
  if (has_playername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->playername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlagStateChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 playerkey = 1;
    if (has_playerkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playerkey());
    }

    // optional int32 flagkey = 2;
    if (has_flagkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flagkey());
    }

    // optional int32 owner = 3;
    if (has_owner()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->owner());
    }

    // optional bytes clanname = 4;
    if (has_clanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clanname());
    }

    // optional bytes playername = 5;
    if (has_playername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->playername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlagStateChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlagStateChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlagStateChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlagStateChange::MergeFrom(const FlagStateChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerkey()) {
      set_playerkey(from.playerkey());
    }
    if (from.has_flagkey()) {
      set_flagkey(from.flagkey());
    }
    if (from.has_owner()) {
      set_owner(from.owner());
    }
    if (from.has_clanname()) {
      set_clanname(from.clanname());
    }
    if (from.has_playername()) {
      set_playername(from.playername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlagStateChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlagStateChange::CopyFrom(const FlagStateChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlagStateChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FlagStateChange::Swap(FlagStateChange* other) {
  if (other != this) {
    std::swap(playerkey_, other->playerkey_);
    std::swap(flagkey_, other->flagkey_);
    std::swap(owner_, other->owner_);
    std::swap(clanname_, other->clanname_);
    std::swap(playername_, other->playername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlagStateChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlagStateChange_descriptor_;
  metadata.reflection = FlagStateChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FlagProtectedTimeOut::kKeyFieldNumber;
#endif  // !_MSC_VER

FlagProtectedTimeOut::FlagProtectedTimeOut()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FlagProtectedTimeOut::InitAsDefaultInstance() {
}

FlagProtectedTimeOut::FlagProtectedTimeOut(const FlagProtectedTimeOut& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FlagProtectedTimeOut::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FlagProtectedTimeOut::~FlagProtectedTimeOut() {
  SharedDtor();
}

void FlagProtectedTimeOut::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FlagProtectedTimeOut::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FlagProtectedTimeOut::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FlagProtectedTimeOut_descriptor_;
}

const FlagProtectedTimeOut& FlagProtectedTimeOut::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

FlagProtectedTimeOut* FlagProtectedTimeOut::default_instance_ = NULL;

FlagProtectedTimeOut* FlagProtectedTimeOut::New() const {
  return new FlagProtectedTimeOut;
}

void FlagProtectedTimeOut::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FlagProtectedTimeOut::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FlagProtectedTimeOut::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FlagProtectedTimeOut::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FlagProtectedTimeOut::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FlagProtectedTimeOut::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FlagProtectedTimeOut* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FlagProtectedTimeOut*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FlagProtectedTimeOut::MergeFrom(const FlagProtectedTimeOut& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FlagProtectedTimeOut::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FlagProtectedTimeOut::CopyFrom(const FlagProtectedTimeOut& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FlagProtectedTimeOut::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FlagProtectedTimeOut::Swap(FlagProtectedTimeOut* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FlagProtectedTimeOut::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FlagProtectedTimeOut_descriptor_;
  metadata.reflection = FlagProtectedTimeOut_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanBattleResult::kResultFieldNumber;
#endif  // !_MSC_VER

ClanBattleResult::ClanBattleResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanBattleResult::InitAsDefaultInstance() {
}

ClanBattleResult::ClanBattleResult(const ClanBattleResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanBattleResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanBattleResult::~ClanBattleResult() {
  SharedDtor();
}

void ClanBattleResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClanBattleResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanBattleResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanBattleResult_descriptor_;
}

const ClanBattleResult& ClanBattleResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

ClanBattleResult* ClanBattleResult::default_instance_ = NULL;

ClanBattleResult* ClanBattleResult::New() const {
  return new ClanBattleResult;
}

void ClanBattleResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanBattleResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanBattleResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanBattleResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanBattleResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanBattleResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanBattleResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanBattleResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanBattleResult::MergeFrom(const ClanBattleResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanBattleResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanBattleResult::CopyFrom(const ClanBattleResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanBattleResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClanBattleResult::Swap(ClanBattleResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanBattleResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanBattleResult_descriptor_;
  metadata.reflection = ClanBattleResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OccupyFail::kRetFieldNumber;
#endif  // !_MSC_VER

OccupyFail::OccupyFail()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OccupyFail::InitAsDefaultInstance() {
}

OccupyFail::OccupyFail(const OccupyFail& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OccupyFail::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OccupyFail::~OccupyFail() {
  SharedDtor();
}

void OccupyFail::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OccupyFail::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OccupyFail::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OccupyFail_descriptor_;
}

const OccupyFail& OccupyFail::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

OccupyFail* OccupyFail::default_instance_ = NULL;

OccupyFail* OccupyFail::New() const {
  return new OccupyFail;
}

void OccupyFail::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OccupyFail::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OccupyFail::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OccupyFail::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OccupyFail::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OccupyFail::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OccupyFail* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OccupyFail*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OccupyFail::MergeFrom(const OccupyFail& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OccupyFail::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OccupyFail::CopyFrom(const OccupyFail& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OccupyFail::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OccupyFail::Swap(OccupyFail* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OccupyFail::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OccupyFail_descriptor_;
  metadata.reflection = OccupyFail_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGS2WSGetFactionName::kIdFieldNumber;
#endif  // !_MSC_VER

ReqGS2WSGetFactionName::ReqGS2WSGetFactionName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGS2WSGetFactionName::InitAsDefaultInstance() {
}

ReqGS2WSGetFactionName::ReqGS2WSGetFactionName(const ReqGS2WSGetFactionName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGS2WSGetFactionName::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGS2WSGetFactionName::~ReqGS2WSGetFactionName() {
  SharedDtor();
}

void ReqGS2WSGetFactionName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGS2WSGetFactionName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGS2WSGetFactionName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGS2WSGetFactionName_descriptor_;
}

const ReqGS2WSGetFactionName& ReqGS2WSGetFactionName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

ReqGS2WSGetFactionName* ReqGS2WSGetFactionName::default_instance_ = NULL;

ReqGS2WSGetFactionName* ReqGS2WSGetFactionName::New() const {
  return new ReqGS2WSGetFactionName;
}

void ReqGS2WSGetFactionName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGS2WSGetFactionName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGS2WSGetFactionName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGS2WSGetFactionName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGS2WSGetFactionName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGS2WSGetFactionName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGS2WSGetFactionName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGS2WSGetFactionName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGS2WSGetFactionName::MergeFrom(const ReqGS2WSGetFactionName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGS2WSGetFactionName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGS2WSGetFactionName::CopyFrom(const ReqGS2WSGetFactionName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGS2WSGetFactionName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGS2WSGetFactionName::Swap(ReqGS2WSGetFactionName* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGS2WSGetFactionName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGS2WSGetFactionName_descriptor_;
  metadata.reflection = ReqGS2WSGetFactionName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGS2WSGetFactionName::kIdFieldNumber;
const int AckGS2WSGetFactionName::kNameFieldNumber;
#endif  // !_MSC_VER

AckGS2WSGetFactionName::AckGS2WSGetFactionName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGS2WSGetFactionName::InitAsDefaultInstance() {
}

AckGS2WSGetFactionName::AckGS2WSGetFactionName(const AckGS2WSGetFactionName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGS2WSGetFactionName::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGS2WSGetFactionName::~AckGS2WSGetFactionName() {
  SharedDtor();
}

void AckGS2WSGetFactionName::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void AckGS2WSGetFactionName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGS2WSGetFactionName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGS2WSGetFactionName_descriptor_;
}

const AckGS2WSGetFactionName& AckGS2WSGetFactionName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

AckGS2WSGetFactionName* AckGS2WSGetFactionName::default_instance_ = NULL;

AckGS2WSGetFactionName* AckGS2WSGetFactionName::New() const {
  return new AckGS2WSGetFactionName;
}

void AckGS2WSGetFactionName::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGS2WSGetFactionName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGS2WSGetFactionName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGS2WSGetFactionName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGS2WSGetFactionName::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGS2WSGetFactionName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGS2WSGetFactionName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGS2WSGetFactionName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGS2WSGetFactionName::MergeFrom(const AckGS2WSGetFactionName& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGS2WSGetFactionName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGS2WSGetFactionName::CopyFrom(const AckGS2WSGetFactionName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGS2WSGetFactionName::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGS2WSGetFactionName::Swap(AckGS2WSGetFactionName* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGS2WSGetFactionName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGS2WSGetFactionName_descriptor_;
  metadata.reflection = AckGS2WSGetFactionName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToGameClanDelete::kCidFieldNumber;
const int ToGameClanDelete::kOnlyFieldNumber;
#endif  // !_MSC_VER

ToGameClanDelete::ToGameClanDelete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGameClanDelete::InitAsDefaultInstance() {
}

ToGameClanDelete::ToGameClanDelete(const ToGameClanDelete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGameClanDelete::SharedCtor() {
  _cached_size_ = 0;
  cid_ = GOOGLE_LONGLONG(0);
  only_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGameClanDelete::~ToGameClanDelete() {
  SharedDtor();
}

void ToGameClanDelete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToGameClanDelete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGameClanDelete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGameClanDelete_descriptor_;
}

const ToGameClanDelete& ToGameClanDelete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

ToGameClanDelete* ToGameClanDelete::default_instance_ = NULL;

ToGameClanDelete* ToGameClanDelete::New() const {
  return new ToGameClanDelete;
}

void ToGameClanDelete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    cid_ = GOOGLE_LONGLONG(0);
    only_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGameClanDelete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 cid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &cid_)));
          set_has_cid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_only;
        break;
      }

      // optional int64 only = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_only:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &only_)));
          set_has_only();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToGameClanDelete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 cid = 1;
  if (has_cid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->cid(), output);
  }

  // optional int64 only = 2;
  if (has_only()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->only(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGameClanDelete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 cid = 1;
  if (has_cid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->cid(), target);
  }

  // optional int64 only = 2;
  if (has_only()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->only(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGameClanDelete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 cid = 1;
    if (has_cid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->cid());
    }

    // optional int64 only = 2;
    if (has_only()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->only());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGameClanDelete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGameClanDelete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGameClanDelete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGameClanDelete::MergeFrom(const ToGameClanDelete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cid()) {
      set_cid(from.cid());
    }
    if (from.has_only()) {
      set_only(from.only());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGameClanDelete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGameClanDelete::CopyFrom(const ToGameClanDelete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGameClanDelete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToGameClanDelete::Swap(ToGameClanDelete* other) {
  if (other != this) {
    std::swap(cid_, other->cid_);
    std::swap(only_, other->only_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGameClanDelete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGameClanDelete_descriptor_;
  metadata.reflection = ToGameClanDelete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqMMapPlayer::kKeyFieldNumber;
const int ClientReqMMapPlayer::kIsmyselfFieldNumber;
const int ClientReqMMapPlayer::kXposFieldNumber;
const int ClientReqMMapPlayer::kYposFieldNumber;
#endif  // !_MSC_VER

ClientReqMMapPlayer::ClientReqMMapPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqMMapPlayer::InitAsDefaultInstance() {
}

ClientReqMMapPlayer::ClientReqMMapPlayer(const ClientReqMMapPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqMMapPlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqMMapPlayer::~ClientReqMMapPlayer() {
  SharedDtor();
}

void ClientReqMMapPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqMMapPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqMMapPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqMMapPlayer_descriptor_;
}

const ClientReqMMapPlayer& ClientReqMMapPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanBattle_2eproto();
  return *default_instance_;
}

ClientReqMMapPlayer* ClientReqMMapPlayer::default_instance_ = NULL;

ClientReqMMapPlayer* ClientReqMMapPlayer::New() const {
  return new ClientReqMMapPlayer;
}

void ClientReqMMapPlayer::Clear() {
  key_.Clear();
  ismyself_.Clear();
  xpos_.Clear();
  ypos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqMMapPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_key())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_key())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_key;
        if (input->ExpectTag(16)) goto parse_ismyself;
        break;
      }

      // repeated bool ismyself = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ismyself:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 16, input, this->mutable_ismyself())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_ismyself())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ismyself;
        if (input->ExpectTag(24)) goto parse_xpos;
        break;
      }

      // repeated int32 xpos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_xpos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_xpos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_xpos;
        if (input->ExpectTag(32)) goto parse_ypos;
        break;
      }

      // repeated int32 ypos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_ypos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_ypos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ypos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqMMapPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->key(i), output);
  }

  // repeated bool ismyself = 2;
  for (int i = 0; i < this->ismyself_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      2, this->ismyself(i), output);
  }

  // repeated int32 xpos = 3;
  for (int i = 0; i < this->xpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->xpos(i), output);
  }

  // repeated int32 ypos = 4;
  for (int i = 0; i < this->ypos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->ypos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqMMapPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 key = 1;
  for (int i = 0; i < this->key_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->key(i), target);
  }

  // repeated bool ismyself = 2;
  for (int i = 0; i < this->ismyself_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(2, this->ismyself(i), target);
  }

  // repeated int32 xpos = 3;
  for (int i = 0; i < this->xpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->xpos(i), target);
  }

  // repeated int32 ypos = 4;
  for (int i = 0; i < this->ypos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->ypos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqMMapPlayer::ByteSize() const {
  int total_size = 0;

  // repeated int32 key = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->key_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->key(i));
    }
    total_size += 1 * this->key_size() + data_size;
  }

  // repeated bool ismyself = 2;
  {
    int data_size = 0;
    data_size = 1 * this->ismyself_size();
    total_size += 1 * this->ismyself_size() + data_size;
  }

  // repeated int32 xpos = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->xpos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->xpos(i));
    }
    total_size += 1 * this->xpos_size() + data_size;
  }

  // repeated int32 ypos = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->ypos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->ypos(i));
    }
    total_size += 1 * this->ypos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqMMapPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqMMapPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqMMapPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqMMapPlayer::MergeFrom(const ClientReqMMapPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  key_.MergeFrom(from.key_);
  ismyself_.MergeFrom(from.ismyself_);
  xpos_.MergeFrom(from.xpos_);
  ypos_.MergeFrom(from.ypos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqMMapPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqMMapPlayer::CopyFrom(const ClientReqMMapPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqMMapPlayer::IsInitialized() const {

  return true;
}

void ClientReqMMapPlayer::Swap(ClientReqMMapPlayer* other) {
  if (other != this) {
    key_.Swap(&other->key_);
    ismyself_.Swap(&other->ismyself_);
    xpos_.Swap(&other->xpos_);
    ypos_.Swap(&other->ypos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqMMapPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqMMapPlayer_descriptor_;
  metadata.reflection = ClientReqMMapPlayer_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ClanPackage

// @@protoc_insertion_point(global_scope)
