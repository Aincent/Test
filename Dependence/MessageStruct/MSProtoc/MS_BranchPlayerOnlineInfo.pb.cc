// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSProtoc/MS_BranchPlayerOnlineInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MSProtoc/MS_BranchPlayerOnlineInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace BranchPlayerInfo {

namespace {

const ::google::protobuf::Descriptor* BranchOnlineCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BranchOnlineCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnlineCountInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnlineCountInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_BranchPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_BranchPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckBranchPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckBranchPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BranchPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BranchPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WEB_ReqListPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WEB_ReqListPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WEB_AckListPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WEB_AckListPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPlayerLvCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPlayerLvCount_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetPlayerLvCount_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetPlayerLvCount_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto() {
  protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MSProtoc/MS_BranchPlayerOnlineInfo.proto");
  GOOGLE_CHECK(file != NULL);
  BranchOnlineCount_descriptor_ = file->message_type(0);
  static const int BranchOnlineCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchOnlineCount, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchOnlineCount, onlinecount_),
  };
  BranchOnlineCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BranchOnlineCount_descriptor_,
      BranchOnlineCount::default_instance_,
      BranchOnlineCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchOnlineCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchOnlineCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BranchOnlineCount));
  OnlineCountInfo_descriptor_ = file->message_type(1);
  static const int OnlineCountInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineCountInfo, brachid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineCountInfo, count_),
  };
  OnlineCountInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnlineCountInfo_descriptor_,
      OnlineCountInfo::default_instance_,
      OnlineCountInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineCountInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnlineCountInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnlineCountInfo));
  Admin_BranchPlayerInfo_descriptor_ = file->message_type(2);
  static const int Admin_BranchPlayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BranchPlayerInfo, brachid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BranchPlayerInfo, beginnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BranchPlayerInfo, endnum_),
  };
  Admin_BranchPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_BranchPlayerInfo_descriptor_,
      Admin_BranchPlayerInfo::default_instance_,
      Admin_BranchPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BranchPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BranchPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_BranchPlayerInfo));
  AckBranchPlayerInfo_descriptor_ = file->message_type(3);
  static const int AckBranchPlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBranchPlayerInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBranchPlayerInfo, branchinfo_),
  };
  AckBranchPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckBranchPlayerInfo_descriptor_,
      AckBranchPlayerInfo::default_instance_,
      AckBranchPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBranchPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckBranchPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckBranchPlayerInfo));
  BranchPlayerInfo_descriptor_ = file->message_type(4);
  static const int BranchPlayerInfo_offsets_[17] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, golden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, bindgolden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, rolecantalk_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, rolecanlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, createroletime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, lastlogintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, playeraddupgold_),
  };
  BranchPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BranchPlayerInfo_descriptor_,
      BranchPlayerInfo::default_instance_,
      BranchPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BranchPlayerInfo));
  WEB_ReqListPlayerInfo_descriptor_ = file->message_type(5);
  static const int WEB_ReqListPlayerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WEB_ReqListPlayerInfo, reqtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WEB_ReqListPlayerInfo, beginnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WEB_ReqListPlayerInfo, endnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WEB_ReqListPlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WEB_ReqListPlayerInfo, id_),
  };
  WEB_ReqListPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WEB_ReqListPlayerInfo_descriptor_,
      WEB_ReqListPlayerInfo::default_instance_,
      WEB_ReqListPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WEB_ReqListPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WEB_ReqListPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WEB_ReqListPlayerInfo));
  WEB_AckListPlayerInfo_descriptor_ = file->message_type(6);
  static const int WEB_AckListPlayerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WEB_AckListPlayerInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WEB_AckListPlayerInfo, sumcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WEB_AckListPlayerInfo, branchinfo_),
  };
  WEB_AckListPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WEB_AckListPlayerInfo_descriptor_,
      WEB_AckListPlayerInfo::default_instance_,
      WEB_AckListPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WEB_AckListPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WEB_AckListPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WEB_AckListPlayerInfo));
  ReqPlayerLvCount_descriptor_ = file->message_type(7);
  static const int ReqPlayerLvCount_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayerLvCount, lvbegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayerLvCount, lvend_),
  };
  ReqPlayerLvCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPlayerLvCount_descriptor_,
      ReqPlayerLvCount::default_instance_,
      ReqPlayerLvCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayerLvCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayerLvCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPlayerLvCount));
  RetPlayerLvCount_descriptor_ = file->message_type(8);
  static const int RetPlayerLvCount_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerLvCount, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerLvCount, lvbegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerLvCount, lvend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerLvCount, lvcountlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerLvCount, totalcount_),
  };
  RetPlayerLvCount_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetPlayerLvCount_descriptor_,
      RetPlayerLvCount::default_instance_,
      RetPlayerLvCount_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerLvCount, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerLvCount, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetPlayerLvCount));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BranchOnlineCount_descriptor_, &BranchOnlineCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnlineCountInfo_descriptor_, &OnlineCountInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_BranchPlayerInfo_descriptor_, &Admin_BranchPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckBranchPlayerInfo_descriptor_, &AckBranchPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BranchPlayerInfo_descriptor_, &BranchPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WEB_ReqListPlayerInfo_descriptor_, &WEB_ReqListPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WEB_AckListPlayerInfo_descriptor_, &WEB_AckListPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPlayerLvCount_descriptor_, &ReqPlayerLvCount::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetPlayerLvCount_descriptor_, &RetPlayerLvCount::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto() {
  delete BranchOnlineCount::default_instance_;
  delete BranchOnlineCount_reflection_;
  delete OnlineCountInfo::default_instance_;
  delete OnlineCountInfo_reflection_;
  delete Admin_BranchPlayerInfo::default_instance_;
  delete Admin_BranchPlayerInfo_reflection_;
  delete AckBranchPlayerInfo::default_instance_;
  delete AckBranchPlayerInfo_reflection_;
  delete BranchPlayerInfo::default_instance_;
  delete BranchPlayerInfo_reflection_;
  delete WEB_ReqListPlayerInfo::default_instance_;
  delete WEB_ReqListPlayerInfo_reflection_;
  delete WEB_AckListPlayerInfo::default_instance_;
  delete WEB_AckListPlayerInfo_reflection_;
  delete ReqPlayerLvCount::default_instance_;
  delete ReqPlayerLvCount_reflection_;
  delete RetPlayerLvCount::default_instance_;
  delete RetPlayerLvCount_reflection_;
}

void protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n(MSProtoc/MS_BranchPlayerOnlineInfo.pro"
    "to\022\020BranchPlayerInfo\"X\n\021BranchOnlineCoun"
    "t\022\013\n\003ret\030\001 \002(\005\0226\n\013onlineCount\030\002 \003(\0132!.Br"
    "anchPlayerInfo.OnlineCountInfo\"1\n\017Online"
    "CountInfo\022\017\n\007brachID\030\001 \002(\005\022\r\n\005count\030\002 \002("
    "\005\"K\n\026Admin_BranchPlayerInfo\022\017\n\007brachID\030\001"
    " \002(\005\022\020\n\010beginNum\030\002 \002(\005\022\016\n\006endNum\030\003 \002(\005\"Z"
    "\n\023AckBranchPlayerInfo\022\013\n\003ret\030\001 \002(\005\0226\n\nbr"
    "anchinfo\030\002 \003(\0132\".BranchPlayerInfo.Branch"
    "PlayerInfo\"\274\002\n\020BranchPlayerInfo\022\n\n\002id\030\001 "
    "\002(\003\022\014\n\004name\030\002 \002(\t\022\n\n\002ip\030\003 \002(\t\022\n\n\002lv\030\004 \002("
    "\005\022\022\n\nonlineTime\030\005 \001(\005\022\r\n\005money\030\006 \001(\005\022\016\n\006"
    "golden\030\007 \001(\005\022\022\n\nbindgolden\030\010 \001(\005\022\013\n\003vip\030"
    "\t \001(\005\022\022\n\nprofession\030\n \001(\005\022\023\n\013roleCanTalk"
    "\030\013 \001(\003\022\024\n\014roleCanLogin\030\014 \001(\003\022\026\n\016createRo"
    "leTime\030\r \001(\014\022\025\n\rlastLoginTime\030\016 \001(\003\022\016\n\006o"
    "penID\030\017 \001(\t\022\013\n\003sex\030\020 \001(\005\022\027\n\017playerAddUpG"
    "old\030\021 \001(\005\"d\n\025WEB_ReqListPlayerInfo\022\017\n\007re"
    "qType\030\001 \002(\005\022\020\n\010beginNum\030\002 \002(\005\022\016\n\006endNum\030"
    "\003 \002(\005\022\014\n\004name\030\004 \001(\t\022\n\n\002id\030\005 \001(\003\"n\n\025WEB_A"
    "ckListPlayerInfo\022\013\n\003ret\030\001 \002(\005\022\020\n\010sumCoun"
    "t\030\002 \001(\005\0226\n\nbranchinfo\030\003 \003(\0132\".BranchPlay"
    "erInfo.BranchPlayerInfo\"2\n\020ReqPlayerLvCo"
    "unt\022\017\n\007lvBegin\030\001 \002(\005\022\r\n\005lvEnd\030\002 \002(\005\"h\n\020R"
    "etPlayerLvCount\022\013\n\003ret\030\001 \002(\005\022\017\n\007lvBegin\030"
    "\002 \001(\005\022\r\n\005lvEnd\030\003 \001(\005\022\023\n\013lvCountList\030\004 \003("
    "\005\022\022\n\ntotalCount\030\005 \001(\005", 1061);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MSProtoc/MS_BranchPlayerOnlineInfo.proto", &protobuf_RegisterTypes);
  BranchOnlineCount::default_instance_ = new BranchOnlineCount();
  OnlineCountInfo::default_instance_ = new OnlineCountInfo();
  Admin_BranchPlayerInfo::default_instance_ = new Admin_BranchPlayerInfo();
  AckBranchPlayerInfo::default_instance_ = new AckBranchPlayerInfo();
  BranchPlayerInfo::default_instance_ = new BranchPlayerInfo();
  WEB_ReqListPlayerInfo::default_instance_ = new WEB_ReqListPlayerInfo();
  WEB_AckListPlayerInfo::default_instance_ = new WEB_AckListPlayerInfo();
  ReqPlayerLvCount::default_instance_ = new ReqPlayerLvCount();
  RetPlayerLvCount::default_instance_ = new RetPlayerLvCount();
  BranchOnlineCount::default_instance_->InitAsDefaultInstance();
  OnlineCountInfo::default_instance_->InitAsDefaultInstance();
  Admin_BranchPlayerInfo::default_instance_->InitAsDefaultInstance();
  AckBranchPlayerInfo::default_instance_->InitAsDefaultInstance();
  BranchPlayerInfo::default_instance_->InitAsDefaultInstance();
  WEB_ReqListPlayerInfo::default_instance_->InitAsDefaultInstance();
  WEB_AckListPlayerInfo::default_instance_->InitAsDefaultInstance();
  ReqPlayerLvCount::default_instance_->InitAsDefaultInstance();
  RetPlayerLvCount::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto {
  StaticDescriptorInitializer_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto() {
    protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  }
} static_descriptor_initializer_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int BranchOnlineCount::kRetFieldNumber;
const int BranchOnlineCount::kOnlineCountFieldNumber;
#endif  // !_MSC_VER

BranchOnlineCount::BranchOnlineCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BranchOnlineCount::InitAsDefaultInstance() {
}

BranchOnlineCount::BranchOnlineCount(const BranchOnlineCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BranchOnlineCount::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BranchOnlineCount::~BranchOnlineCount() {
  SharedDtor();
}

void BranchOnlineCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BranchOnlineCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BranchOnlineCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BranchOnlineCount_descriptor_;
}

const BranchOnlineCount& BranchOnlineCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  return *default_instance_;
}

BranchOnlineCount* BranchOnlineCount::default_instance_ = NULL;

BranchOnlineCount* BranchOnlineCount::New() const {
  return new BranchOnlineCount;
}

void BranchOnlineCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  onlinecount_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BranchOnlineCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_onlineCount;
        break;
      }

      // repeated .BranchPlayerInfo.OnlineCountInfo onlineCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onlineCount:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_onlinecount()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_onlineCount;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BranchOnlineCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .BranchPlayerInfo.OnlineCountInfo onlineCount = 2;
  for (int i = 0; i < this->onlinecount_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->onlinecount(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BranchOnlineCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .BranchPlayerInfo.OnlineCountInfo onlineCount = 2;
  for (int i = 0; i < this->onlinecount_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->onlinecount(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BranchOnlineCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .BranchPlayerInfo.OnlineCountInfo onlineCount = 2;
  total_size += 1 * this->onlinecount_size();
  for (int i = 0; i < this->onlinecount_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->onlinecount(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BranchOnlineCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BranchOnlineCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BranchOnlineCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BranchOnlineCount::MergeFrom(const BranchOnlineCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  onlinecount_.MergeFrom(from.onlinecount_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BranchOnlineCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BranchOnlineCount::CopyFrom(const BranchOnlineCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BranchOnlineCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < onlinecount_size(); i++) {
    if (!this->onlinecount(i).IsInitialized()) return false;
  }
  return true;
}

void BranchOnlineCount::Swap(BranchOnlineCount* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    onlinecount_.Swap(&other->onlinecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BranchOnlineCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BranchOnlineCount_descriptor_;
  metadata.reflection = BranchOnlineCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnlineCountInfo::kBrachIDFieldNumber;
const int OnlineCountInfo::kCountFieldNumber;
#endif  // !_MSC_VER

OnlineCountInfo::OnlineCountInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnlineCountInfo::InitAsDefaultInstance() {
}

OnlineCountInfo::OnlineCountInfo(const OnlineCountInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnlineCountInfo::SharedCtor() {
  _cached_size_ = 0;
  brachid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnlineCountInfo::~OnlineCountInfo() {
  SharedDtor();
}

void OnlineCountInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnlineCountInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnlineCountInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnlineCountInfo_descriptor_;
}

const OnlineCountInfo& OnlineCountInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  return *default_instance_;
}

OnlineCountInfo* OnlineCountInfo::default_instance_ = NULL;

OnlineCountInfo* OnlineCountInfo::New() const {
  return new OnlineCountInfo;
}

void OnlineCountInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    brachid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnlineCountInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 brachID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brachid_)));
          set_has_brachid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnlineCountInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 brachID = 1;
  if (has_brachid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->brachid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnlineCountInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 brachID = 1;
  if (has_brachid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->brachid(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnlineCountInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 brachID = 1;
    if (has_brachid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->brachid());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnlineCountInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnlineCountInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnlineCountInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnlineCountInfo::MergeFrom(const OnlineCountInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brachid()) {
      set_brachid(from.brachid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnlineCountInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnlineCountInfo::CopyFrom(const OnlineCountInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnlineCountInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void OnlineCountInfo::Swap(OnlineCountInfo* other) {
  if (other != this) {
    std::swap(brachid_, other->brachid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnlineCountInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnlineCountInfo_descriptor_;
  metadata.reflection = OnlineCountInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_BranchPlayerInfo::kBrachIDFieldNumber;
const int Admin_BranchPlayerInfo::kBeginNumFieldNumber;
const int Admin_BranchPlayerInfo::kEndNumFieldNumber;
#endif  // !_MSC_VER

Admin_BranchPlayerInfo::Admin_BranchPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_BranchPlayerInfo::InitAsDefaultInstance() {
}

Admin_BranchPlayerInfo::Admin_BranchPlayerInfo(const Admin_BranchPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_BranchPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  brachid_ = 0;
  beginnum_ = 0;
  endnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_BranchPlayerInfo::~Admin_BranchPlayerInfo() {
  SharedDtor();
}

void Admin_BranchPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_BranchPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_BranchPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_BranchPlayerInfo_descriptor_;
}

const Admin_BranchPlayerInfo& Admin_BranchPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  return *default_instance_;
}

Admin_BranchPlayerInfo* Admin_BranchPlayerInfo::default_instance_ = NULL;

Admin_BranchPlayerInfo* Admin_BranchPlayerInfo::New() const {
  return new Admin_BranchPlayerInfo;
}

void Admin_BranchPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    brachid_ = 0;
    beginnum_ = 0;
    endnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_BranchPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 brachID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &brachid_)));
          set_has_brachid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beginNum;
        break;
      }

      // required int32 beginNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beginnum_)));
          set_has_beginnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endNum;
        break;
      }

      // required int32 endNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endnum_)));
          set_has_endnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_BranchPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 brachID = 1;
  if (has_brachid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->brachid(), output);
  }

  // required int32 beginNum = 2;
  if (has_beginnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beginnum(), output);
  }

  // required int32 endNum = 3;
  if (has_endnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_BranchPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 brachID = 1;
  if (has_brachid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->brachid(), target);
  }

  // required int32 beginNum = 2;
  if (has_beginnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beginnum(), target);
  }

  // required int32 endNum = 3;
  if (has_endnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_BranchPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 brachID = 1;
    if (has_brachid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->brachid());
    }

    // required int32 beginNum = 2;
    if (has_beginnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beginnum());
    }

    // required int32 endNum = 3;
    if (has_endnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_BranchPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_BranchPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_BranchPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_BranchPlayerInfo::MergeFrom(const Admin_BranchPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_brachid()) {
      set_brachid(from.brachid());
    }
    if (from.has_beginnum()) {
      set_beginnum(from.beginnum());
    }
    if (from.has_endnum()) {
      set_endnum(from.endnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_BranchPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_BranchPlayerInfo::CopyFrom(const Admin_BranchPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_BranchPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Admin_BranchPlayerInfo::Swap(Admin_BranchPlayerInfo* other) {
  if (other != this) {
    std::swap(brachid_, other->brachid_);
    std::swap(beginnum_, other->beginnum_);
    std::swap(endnum_, other->endnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_BranchPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_BranchPlayerInfo_descriptor_;
  metadata.reflection = Admin_BranchPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckBranchPlayerInfo::kRetFieldNumber;
const int AckBranchPlayerInfo::kBranchinfoFieldNumber;
#endif  // !_MSC_VER

AckBranchPlayerInfo::AckBranchPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckBranchPlayerInfo::InitAsDefaultInstance() {
}

AckBranchPlayerInfo::AckBranchPlayerInfo(const AckBranchPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckBranchPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckBranchPlayerInfo::~AckBranchPlayerInfo() {
  SharedDtor();
}

void AckBranchPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckBranchPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckBranchPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckBranchPlayerInfo_descriptor_;
}

const AckBranchPlayerInfo& AckBranchPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  return *default_instance_;
}

AckBranchPlayerInfo* AckBranchPlayerInfo::default_instance_ = NULL;

AckBranchPlayerInfo* AckBranchPlayerInfo::New() const {
  return new AckBranchPlayerInfo;
}

void AckBranchPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  branchinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckBranchPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_branchinfo;
        break;
      }

      // repeated .BranchPlayerInfo.BranchPlayerInfo branchinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_branchinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_branchinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_branchinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckBranchPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .BranchPlayerInfo.BranchPlayerInfo branchinfo = 2;
  for (int i = 0; i < this->branchinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->branchinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckBranchPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .BranchPlayerInfo.BranchPlayerInfo branchinfo = 2;
  for (int i = 0; i < this->branchinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->branchinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckBranchPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .BranchPlayerInfo.BranchPlayerInfo branchinfo = 2;
  total_size += 1 * this->branchinfo_size();
  for (int i = 0; i < this->branchinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->branchinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckBranchPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckBranchPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckBranchPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckBranchPlayerInfo::MergeFrom(const AckBranchPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  branchinfo_.MergeFrom(from.branchinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckBranchPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckBranchPlayerInfo::CopyFrom(const AckBranchPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckBranchPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < branchinfo_size(); i++) {
    if (!this->branchinfo(i).IsInitialized()) return false;
  }
  return true;
}

void AckBranchPlayerInfo::Swap(AckBranchPlayerInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    branchinfo_.Swap(&other->branchinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckBranchPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckBranchPlayerInfo_descriptor_;
  metadata.reflection = AckBranchPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BranchPlayerInfo::kIdFieldNumber;
const int BranchPlayerInfo::kNameFieldNumber;
const int BranchPlayerInfo::kIpFieldNumber;
const int BranchPlayerInfo::kLvFieldNumber;
const int BranchPlayerInfo::kOnlineTimeFieldNumber;
const int BranchPlayerInfo::kMoneyFieldNumber;
const int BranchPlayerInfo::kGoldenFieldNumber;
const int BranchPlayerInfo::kBindgoldenFieldNumber;
const int BranchPlayerInfo::kVipFieldNumber;
const int BranchPlayerInfo::kProfessionFieldNumber;
const int BranchPlayerInfo::kRoleCanTalkFieldNumber;
const int BranchPlayerInfo::kRoleCanLoginFieldNumber;
const int BranchPlayerInfo::kCreateRoleTimeFieldNumber;
const int BranchPlayerInfo::kLastLoginTimeFieldNumber;
const int BranchPlayerInfo::kOpenIDFieldNumber;
const int BranchPlayerInfo::kSexFieldNumber;
const int BranchPlayerInfo::kPlayerAddUpGoldFieldNumber;
#endif  // !_MSC_VER

BranchPlayerInfo::BranchPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BranchPlayerInfo::InitAsDefaultInstance() {
}

BranchPlayerInfo::BranchPlayerInfo(const BranchPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BranchPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  onlinetime_ = 0;
  money_ = 0;
  golden_ = 0;
  bindgolden_ = 0;
  vip_ = 0;
  profession_ = 0;
  rolecantalk_ = GOOGLE_LONGLONG(0);
  rolecanlogin_ = GOOGLE_LONGLONG(0);
  createroletime_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastlogintime_ = GOOGLE_LONGLONG(0);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  playeraddupgold_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BranchPlayerInfo::~BranchPlayerInfo() {
  SharedDtor();
}

void BranchPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (createroletime_ != &::google::protobuf::internal::kEmptyString) {
    delete createroletime_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (this != default_instance_) {
  }
}

void BranchPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BranchPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BranchPlayerInfo_descriptor_;
}

const BranchPlayerInfo& BranchPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  return *default_instance_;
}

BranchPlayerInfo* BranchPlayerInfo::default_instance_ = NULL;

BranchPlayerInfo* BranchPlayerInfo::New() const {
  return new BranchPlayerInfo;
}

void BranchPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    lv_ = 0;
    onlinetime_ = 0;
    money_ = 0;
    golden_ = 0;
    bindgolden_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vip_ = 0;
    profession_ = 0;
    rolecantalk_ = GOOGLE_LONGLONG(0);
    rolecanlogin_ = GOOGLE_LONGLONG(0);
    if (has_createroletime()) {
      if (createroletime_ != &::google::protobuf::internal::kEmptyString) {
        createroletime_->clear();
      }
    }
    lastlogintime_ = GOOGLE_LONGLONG(0);
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    sex_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    playeraddupgold_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BranchPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ip;
        break;
      }

      // required string ip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // required int32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_onlineTime;
        break;
      }

      // optional int32 onlineTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_money;
        break;
      }

      // optional int32 money = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_golden;
        break;
      }

      // optional int32 golden = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &golden_)));
          set_has_golden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_bindgolden;
        break;
      }

      // optional int32 bindgolden = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindgolden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindgolden_)));
          set_has_bindgolden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vip;
        break;
      }

      // optional int32 vip = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_profession;
        break;
      }

      // optional int32 profession = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_roleCanTalk;
        break;
      }

      // optional int64 roleCanTalk = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleCanTalk:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rolecantalk_)));
          set_has_rolecantalk();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_roleCanLogin;
        break;
      }

      // optional int64 roleCanLogin = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_roleCanLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rolecanlogin_)));
          set_has_rolecanlogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_createRoleTime;
        break;
      }

      // optional bytes createRoleTime = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_createRoleTime:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_createroletime()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_lastLoginTime;
        break;
      }

      // optional int64 lastLoginTime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastLoginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastlogintime_)));
          set_has_lastlogintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_openID;
        break;
      }

      // optional string openID = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openID:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_sex;
        break;
      }

      // optional int32 sex = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_playerAddUpGold;
        break;
      }

      // optional int32 playerAddUpGold = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerAddUpGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playeraddupgold_)));
          set_has_playeraddupgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BranchPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ip(), output);
  }

  // required int32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lv(), output);
  }

  // optional int32 onlineTime = 5;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->onlinetime(), output);
  }

  // optional int32 money = 6;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->money(), output);
  }

  // optional int32 golden = 7;
  if (has_golden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->golden(), output);
  }

  // optional int32 bindgolden = 8;
  if (has_bindgolden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->bindgolden(), output);
  }

  // optional int32 vip = 9;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->vip(), output);
  }

  // optional int32 profession = 10;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->profession(), output);
  }

  // optional int64 roleCanTalk = 11;
  if (has_rolecantalk()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->rolecantalk(), output);
  }

  // optional int64 roleCanLogin = 12;
  if (has_rolecanlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->rolecanlogin(), output);
  }

  // optional bytes createRoleTime = 13;
  if (has_createroletime()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      13, this->createroletime(), output);
  }

  // optional int64 lastLoginTime = 14;
  if (has_lastlogintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->lastlogintime(), output);
  }

  // optional string openID = 15;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      15, this->openid(), output);
  }

  // optional int32 sex = 16;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->sex(), output);
  }

  // optional int32 playerAddUpGold = 17;
  if (has_playeraddupgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->playeraddupgold(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BranchPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // required string ip = 3;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ip(), target);
  }

  // required int32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lv(), target);
  }

  // optional int32 onlineTime = 5;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->onlinetime(), target);
  }

  // optional int32 money = 6;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->money(), target);
  }

  // optional int32 golden = 7;
  if (has_golden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->golden(), target);
  }

  // optional int32 bindgolden = 8;
  if (has_bindgolden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->bindgolden(), target);
  }

  // optional int32 vip = 9;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->vip(), target);
  }

  // optional int32 profession = 10;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->profession(), target);
  }

  // optional int64 roleCanTalk = 11;
  if (has_rolecantalk()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->rolecantalk(), target);
  }

  // optional int64 roleCanLogin = 12;
  if (has_rolecanlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->rolecanlogin(), target);
  }

  // optional bytes createRoleTime = 13;
  if (has_createroletime()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        13, this->createroletime(), target);
  }

  // optional int64 lastLoginTime = 14;
  if (has_lastlogintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->lastlogintime(), target);
  }

  // optional string openID = 15;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        15, this->openid(), target);
  }

  // optional int32 sex = 16;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->sex(), target);
  }

  // optional int32 playerAddUpGold = 17;
  if (has_playeraddupgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->playeraddupgold(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BranchPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string ip = 3;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // required int32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 onlineTime = 5;
    if (has_onlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinetime());
    }

    // optional int32 money = 6;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 golden = 7;
    if (has_golden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->golden());
    }

    // optional int32 bindgolden = 8;
    if (has_bindgolden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindgolden());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 vip = 9;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional int32 profession = 10;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int64 roleCanTalk = 11;
    if (has_rolecantalk()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rolecantalk());
    }

    // optional int64 roleCanLogin = 12;
    if (has_rolecanlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rolecanlogin());
    }

    // optional bytes createRoleTime = 13;
    if (has_createroletime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->createroletime());
    }

    // optional int64 lastLoginTime = 14;
    if (has_lastlogintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastlogintime());
    }

    // optional string openID = 15;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional int32 sex = 16;
    if (has_sex()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 playerAddUpGold = 17;
    if (has_playeraddupgold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playeraddupgold());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BranchPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BranchPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BranchPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BranchPlayerInfo::MergeFrom(const BranchPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_golden()) {
      set_golden(from.golden());
    }
    if (from.has_bindgolden()) {
      set_bindgolden(from.bindgolden());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_rolecantalk()) {
      set_rolecantalk(from.rolecantalk());
    }
    if (from.has_rolecanlogin()) {
      set_rolecanlogin(from.rolecanlogin());
    }
    if (from.has_createroletime()) {
      set_createroletime(from.createroletime());
    }
    if (from.has_lastlogintime()) {
      set_lastlogintime(from.lastlogintime());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_playeraddupgold()) {
      set_playeraddupgold(from.playeraddupgold());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BranchPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BranchPlayerInfo::CopyFrom(const BranchPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BranchPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void BranchPlayerInfo::Swap(BranchPlayerInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(ip_, other->ip_);
    std::swap(lv_, other->lv_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(money_, other->money_);
    std::swap(golden_, other->golden_);
    std::swap(bindgolden_, other->bindgolden_);
    std::swap(vip_, other->vip_);
    std::swap(profession_, other->profession_);
    std::swap(rolecantalk_, other->rolecantalk_);
    std::swap(rolecanlogin_, other->rolecanlogin_);
    std::swap(createroletime_, other->createroletime_);
    std::swap(lastlogintime_, other->lastlogintime_);
    std::swap(openid_, other->openid_);
    std::swap(sex_, other->sex_);
    std::swap(playeraddupgold_, other->playeraddupgold_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BranchPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BranchPlayerInfo_descriptor_;
  metadata.reflection = BranchPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WEB_ReqListPlayerInfo::kReqTypeFieldNumber;
const int WEB_ReqListPlayerInfo::kBeginNumFieldNumber;
const int WEB_ReqListPlayerInfo::kEndNumFieldNumber;
const int WEB_ReqListPlayerInfo::kNameFieldNumber;
const int WEB_ReqListPlayerInfo::kIdFieldNumber;
#endif  // !_MSC_VER

WEB_ReqListPlayerInfo::WEB_ReqListPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WEB_ReqListPlayerInfo::InitAsDefaultInstance() {
}

WEB_ReqListPlayerInfo::WEB_ReqListPlayerInfo(const WEB_ReqListPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WEB_ReqListPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  reqtype_ = 0;
  beginnum_ = 0;
  endnum_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WEB_ReqListPlayerInfo::~WEB_ReqListPlayerInfo() {
  SharedDtor();
}

void WEB_ReqListPlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void WEB_ReqListPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WEB_ReqListPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WEB_ReqListPlayerInfo_descriptor_;
}

const WEB_ReqListPlayerInfo& WEB_ReqListPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  return *default_instance_;
}

WEB_ReqListPlayerInfo* WEB_ReqListPlayerInfo::default_instance_ = NULL;

WEB_ReqListPlayerInfo* WEB_ReqListPlayerInfo::New() const {
  return new WEB_ReqListPlayerInfo;
}

void WEB_ReqListPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    reqtype_ = 0;
    beginnum_ = 0;
    endnum_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WEB_ReqListPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 reqType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqtype_)));
          set_has_reqtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beginNum;
        break;
      }

      // required int32 beginNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beginnum_)));
          set_has_beginnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endNum;
        break;
      }

      // required int32 endNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endnum_)));
          set_has_endnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // optional int64 id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WEB_ReqListPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 reqType = 1;
  if (has_reqtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->reqtype(), output);
  }

  // required int32 beginNum = 2;
  if (has_beginnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->beginnum(), output);
  }

  // required int32 endNum = 3;
  if (has_endnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endnum(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional int64 id = 5;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WEB_ReqListPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 reqType = 1;
  if (has_reqtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->reqtype(), target);
  }

  // required int32 beginNum = 2;
  if (has_beginnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->beginnum(), target);
  }

  // required int32 endNum = 3;
  if (has_endnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endnum(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int64 id = 5;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WEB_ReqListPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 reqType = 1;
    if (has_reqtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reqtype());
    }

    // required int32 beginNum = 2;
    if (has_beginnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beginnum());
    }

    // required int32 endNum = 3;
    if (has_endnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endnum());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int64 id = 5;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WEB_ReqListPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WEB_ReqListPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WEB_ReqListPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WEB_ReqListPlayerInfo::MergeFrom(const WEB_ReqListPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_reqtype()) {
      set_reqtype(from.reqtype());
    }
    if (from.has_beginnum()) {
      set_beginnum(from.beginnum());
    }
    if (from.has_endnum()) {
      set_endnum(from.endnum());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WEB_ReqListPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WEB_ReqListPlayerInfo::CopyFrom(const WEB_ReqListPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WEB_ReqListPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void WEB_ReqListPlayerInfo::Swap(WEB_ReqListPlayerInfo* other) {
  if (other != this) {
    std::swap(reqtype_, other->reqtype_);
    std::swap(beginnum_, other->beginnum_);
    std::swap(endnum_, other->endnum_);
    std::swap(name_, other->name_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WEB_ReqListPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WEB_ReqListPlayerInfo_descriptor_;
  metadata.reflection = WEB_ReqListPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WEB_AckListPlayerInfo::kRetFieldNumber;
const int WEB_AckListPlayerInfo::kSumCountFieldNumber;
const int WEB_AckListPlayerInfo::kBranchinfoFieldNumber;
#endif  // !_MSC_VER

WEB_AckListPlayerInfo::WEB_AckListPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WEB_AckListPlayerInfo::InitAsDefaultInstance() {
}

WEB_AckListPlayerInfo::WEB_AckListPlayerInfo(const WEB_AckListPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WEB_AckListPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  sumcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WEB_AckListPlayerInfo::~WEB_AckListPlayerInfo() {
  SharedDtor();
}

void WEB_AckListPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WEB_AckListPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WEB_AckListPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WEB_AckListPlayerInfo_descriptor_;
}

const WEB_AckListPlayerInfo& WEB_AckListPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  return *default_instance_;
}

WEB_AckListPlayerInfo* WEB_AckListPlayerInfo::default_instance_ = NULL;

WEB_AckListPlayerInfo* WEB_AckListPlayerInfo::New() const {
  return new WEB_AckListPlayerInfo;
}

void WEB_AckListPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    sumcount_ = 0;
  }
  branchinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WEB_AckListPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_sumCount;
        break;
      }

      // optional int32 sumCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sumCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sumcount_)));
          set_has_sumcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_branchinfo;
        break;
      }

      // repeated .BranchPlayerInfo.BranchPlayerInfo branchinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_branchinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_branchinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_branchinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WEB_AckListPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 sumCount = 2;
  if (has_sumcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sumcount(), output);
  }

  // repeated .BranchPlayerInfo.BranchPlayerInfo branchinfo = 3;
  for (int i = 0; i < this->branchinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->branchinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WEB_AckListPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 sumCount = 2;
  if (has_sumcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sumcount(), target);
  }

  // repeated .BranchPlayerInfo.BranchPlayerInfo branchinfo = 3;
  for (int i = 0; i < this->branchinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->branchinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WEB_AckListPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 sumCount = 2;
    if (has_sumcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sumcount());
    }

  }
  // repeated .BranchPlayerInfo.BranchPlayerInfo branchinfo = 3;
  total_size += 1 * this->branchinfo_size();
  for (int i = 0; i < this->branchinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->branchinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WEB_AckListPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WEB_AckListPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WEB_AckListPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WEB_AckListPlayerInfo::MergeFrom(const WEB_AckListPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  branchinfo_.MergeFrom(from.branchinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_sumcount()) {
      set_sumcount(from.sumcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WEB_AckListPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WEB_AckListPlayerInfo::CopyFrom(const WEB_AckListPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WEB_AckListPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < branchinfo_size(); i++) {
    if (!this->branchinfo(i).IsInitialized()) return false;
  }
  return true;
}

void WEB_AckListPlayerInfo::Swap(WEB_AckListPlayerInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(sumcount_, other->sumcount_);
    branchinfo_.Swap(&other->branchinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WEB_AckListPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WEB_AckListPlayerInfo_descriptor_;
  metadata.reflection = WEB_AckListPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPlayerLvCount::kLvBeginFieldNumber;
const int ReqPlayerLvCount::kLvEndFieldNumber;
#endif  // !_MSC_VER

ReqPlayerLvCount::ReqPlayerLvCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPlayerLvCount::InitAsDefaultInstance() {
}

ReqPlayerLvCount::ReqPlayerLvCount(const ReqPlayerLvCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPlayerLvCount::SharedCtor() {
  _cached_size_ = 0;
  lvbegin_ = 0;
  lvend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPlayerLvCount::~ReqPlayerLvCount() {
  SharedDtor();
}

void ReqPlayerLvCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqPlayerLvCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPlayerLvCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPlayerLvCount_descriptor_;
}

const ReqPlayerLvCount& ReqPlayerLvCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  return *default_instance_;
}

ReqPlayerLvCount* ReqPlayerLvCount::default_instance_ = NULL;

ReqPlayerLvCount* ReqPlayerLvCount::New() const {
  return new ReqPlayerLvCount;
}

void ReqPlayerLvCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    lvbegin_ = 0;
    lvend_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPlayerLvCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 lvBegin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvbegin_)));
          set_has_lvbegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lvEnd;
        break;
      }

      // required int32 lvEnd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvend_)));
          set_has_lvend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPlayerLvCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 lvBegin = 1;
  if (has_lvbegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->lvbegin(), output);
  }

  // required int32 lvEnd = 2;
  if (has_lvend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lvend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPlayerLvCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 lvBegin = 1;
  if (has_lvbegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->lvbegin(), target);
  }

  // required int32 lvEnd = 2;
  if (has_lvend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lvend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPlayerLvCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 lvBegin = 1;
    if (has_lvbegin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvbegin());
    }

    // required int32 lvEnd = 2;
    if (has_lvend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPlayerLvCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPlayerLvCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPlayerLvCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPlayerLvCount::MergeFrom(const ReqPlayerLvCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_lvbegin()) {
      set_lvbegin(from.lvbegin());
    }
    if (from.has_lvend()) {
      set_lvend(from.lvend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPlayerLvCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPlayerLvCount::CopyFrom(const ReqPlayerLvCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPlayerLvCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqPlayerLvCount::Swap(ReqPlayerLvCount* other) {
  if (other != this) {
    std::swap(lvbegin_, other->lvbegin_);
    std::swap(lvend_, other->lvend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPlayerLvCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPlayerLvCount_descriptor_;
  metadata.reflection = ReqPlayerLvCount_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetPlayerLvCount::kRetFieldNumber;
const int RetPlayerLvCount::kLvBeginFieldNumber;
const int RetPlayerLvCount::kLvEndFieldNumber;
const int RetPlayerLvCount::kLvCountListFieldNumber;
const int RetPlayerLvCount::kTotalCountFieldNumber;
#endif  // !_MSC_VER

RetPlayerLvCount::RetPlayerLvCount()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetPlayerLvCount::InitAsDefaultInstance() {
}

RetPlayerLvCount::RetPlayerLvCount(const RetPlayerLvCount& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetPlayerLvCount::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  lvbegin_ = 0;
  lvend_ = 0;
  totalcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetPlayerLvCount::~RetPlayerLvCount() {
  SharedDtor();
}

void RetPlayerLvCount::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetPlayerLvCount::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetPlayerLvCount::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetPlayerLvCount_descriptor_;
}

const RetPlayerLvCount& RetPlayerLvCount::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fBranchPlayerOnlineInfo_2eproto();
  return *default_instance_;
}

RetPlayerLvCount* RetPlayerLvCount::default_instance_ = NULL;

RetPlayerLvCount* RetPlayerLvCount::New() const {
  return new RetPlayerLvCount;
}

void RetPlayerLvCount::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    lvbegin_ = 0;
    lvend_ = 0;
    totalcount_ = 0;
  }
  lvcountlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetPlayerLvCount::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lvBegin;
        break;
      }

      // optional int32 lvBegin = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvBegin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvbegin_)));
          set_has_lvbegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lvEnd;
        break;
      }

      // optional int32 lvEnd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lvend_)));
          set_has_lvend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lvCountList;
        break;
      }

      // repeated int32 lvCountList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lvCountList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_lvcountlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lvcountlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lvCountList;
        if (input->ExpectTag(40)) goto parse_totalCount;
        break;
      }

      // optional int32 totalCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetPlayerLvCount::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 lvBegin = 2;
  if (has_lvbegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lvbegin(), output);
  }

  // optional int32 lvEnd = 3;
  if (has_lvend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lvend(), output);
  }

  // repeated int32 lvCountList = 4;
  for (int i = 0; i < this->lvcountlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->lvcountlist(i), output);
  }

  // optional int32 totalCount = 5;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetPlayerLvCount::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 lvBegin = 2;
  if (has_lvbegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lvbegin(), target);
  }

  // optional int32 lvEnd = 3;
  if (has_lvend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lvend(), target);
  }

  // repeated int32 lvCountList = 4;
  for (int i = 0; i < this->lvcountlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->lvcountlist(i), target);
  }

  // optional int32 totalCount = 5;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetPlayerLvCount::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 lvBegin = 2;
    if (has_lvbegin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvbegin());
    }

    // optional int32 lvEnd = 3;
    if (has_lvend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lvend());
    }

    // optional int32 totalCount = 5;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

  }
  // repeated int32 lvCountList = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->lvcountlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lvcountlist(i));
    }
    total_size += 1 * this->lvcountlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetPlayerLvCount::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetPlayerLvCount* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetPlayerLvCount*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetPlayerLvCount::MergeFrom(const RetPlayerLvCount& from) {
  GOOGLE_CHECK_NE(&from, this);
  lvcountlist_.MergeFrom(from.lvcountlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_lvbegin()) {
      set_lvbegin(from.lvbegin());
    }
    if (from.has_lvend()) {
      set_lvend(from.lvend());
    }
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetPlayerLvCount::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetPlayerLvCount::CopyFrom(const RetPlayerLvCount& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetPlayerLvCount::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetPlayerLvCount::Swap(RetPlayerLvCount* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(lvbegin_, other->lvbegin_);
    std::swap(lvend_, other->lvend_);
    lvcountlist_.Swap(&other->lvcountlist_);
    std::swap(totalcount_, other->totalcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetPlayerLvCount::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetPlayerLvCount_descriptor_;
  metadata.reflection = RetPlayerLvCount_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace BranchPlayerInfo

// @@protoc_insertion_point(global_scope)
