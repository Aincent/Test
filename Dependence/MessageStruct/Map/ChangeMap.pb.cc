// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map/ChangeMap.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Map/ChangeMap.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ChangeMap {

namespace {

const ::google::protobuf::Descriptor* ChangeMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChangeMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMForceClientChangeMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMForceClientChangeMap_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Map_2fChangeMap_2eproto() {
  protobuf_AddDesc_Map_2fChangeMap_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Map/ChangeMap.proto");
  GOOGLE_CHECK(file != NULL);
  ChangeMapInfo_descriptor_ = file->message_type(0);
  static const int ChangeMapInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapInfo, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapInfo, ip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapInfo, port_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapInfo, gateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapInfo, pktype_),
  };
  ChangeMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChangeMapInfo_descriptor_,
      ChangeMapInfo::default_instance_,
      ChangeMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChangeMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChangeMapInfo));
  GMForceClientChangeMap_descriptor_ = file->message_type(1);
  static const int GMForceClientChangeMap_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientChangeMap, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientChangeMap, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientChangeMap, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientChangeMap, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientChangeMap, pktype_),
  };
  GMForceClientChangeMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMForceClientChangeMap_descriptor_,
      GMForceClientChangeMap::default_instance_,
      GMForceClientChangeMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientChangeMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientChangeMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMForceClientChangeMap));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Map_2fChangeMap_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChangeMapInfo_descriptor_, &ChangeMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMForceClientChangeMap_descriptor_, &GMForceClientChangeMap::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Map_2fChangeMap_2eproto() {
  delete ChangeMapInfo::default_instance_;
  delete ChangeMapInfo_reflection_;
  delete GMForceClientChangeMap::default_instance_;
  delete GMForceClientChangeMap_reflection_;
}

void protobuf_AddDesc_Map_2fChangeMap_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023Map/ChangeMap.proto\022\tChangeMap\"\202\001\n\rCha"
    "ngeMapInfo\022\r\n\005mapid\030\001 \001(\003\022\013\n\003pos\030\002 \001(\005\022\016"
    "\n\006charid\030\003 \002(\003\022\n\n\002ip\030\004 \001(\t\022\014\n\004port\030\005 \001(\005"
    "\022\016\n\006gateid\030\006 \001(\005\022\013\n\003key\030\007 \001(\005\022\016\n\006pkType\030"
    "\010 \001(\005\"`\n\026GMForceClientChangeMap\022\r\n\005mapid"
    "\030\001 \001(\003\022\014\n\004xpos\030\002 \001(\005\022\014\n\004ypos\030\003 \001(\005\022\013\n\003ke"
    "y\030\004 \001(\005\022\016\n\006pkType\030\005 \001(\005", 263);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Map/ChangeMap.proto", &protobuf_RegisterTypes);
  ChangeMapInfo::default_instance_ = new ChangeMapInfo();
  GMForceClientChangeMap::default_instance_ = new GMForceClientChangeMap();
  ChangeMapInfo::default_instance_->InitAsDefaultInstance();
  GMForceClientChangeMap::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Map_2fChangeMap_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Map_2fChangeMap_2eproto {
  StaticDescriptorInitializer_Map_2fChangeMap_2eproto() {
    protobuf_AddDesc_Map_2fChangeMap_2eproto();
  }
} static_descriptor_initializer_Map_2fChangeMap_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ChangeMapInfo::kMapidFieldNumber;
const int ChangeMapInfo::kPosFieldNumber;
const int ChangeMapInfo::kCharidFieldNumber;
const int ChangeMapInfo::kIpFieldNumber;
const int ChangeMapInfo::kPortFieldNumber;
const int ChangeMapInfo::kGateidFieldNumber;
const int ChangeMapInfo::kKeyFieldNumber;
const int ChangeMapInfo::kPkTypeFieldNumber;
#endif  // !_MSC_VER

ChangeMapInfo::ChangeMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChangeMapInfo::InitAsDefaultInstance() {
}

ChangeMapInfo::ChangeMapInfo(const ChangeMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChangeMapInfo::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  pos_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  port_ = 0;
  gateid_ = 0;
  key_ = 0;
  pktype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChangeMapInfo::~ChangeMapInfo() {
  SharedDtor();
}

void ChangeMapInfo::SharedDtor() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (this != default_instance_) {
  }
}

void ChangeMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChangeMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChangeMapInfo_descriptor_;
}

const ChangeMapInfo& ChangeMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fChangeMap_2eproto();
  return *default_instance_;
}

ChangeMapInfo* ChangeMapInfo::default_instance_ = NULL;

ChangeMapInfo* ChangeMapInfo::New() const {
  return new ChangeMapInfo;
}

void ChangeMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = GOOGLE_LONGLONG(0);
    pos_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    if (has_ip()) {
      if (ip_ != &::google::protobuf::internal::kEmptyString) {
        ip_->clear();
      }
    }
    port_ = 0;
    gateid_ = 0;
    key_ = 0;
    pktype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChangeMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // required int64 charid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_ip;
        break;
      }

      // optional string ip = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ip()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ip().data(), this->ip().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_port;
        break;
      }

      // optional int32 port = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_port:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &port_)));
          set_has_port();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_gateid;
        break;
      }

      // optional int32 gateid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gateid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gateid_)));
          set_has_gateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_key;
        break;
      }

      // optional int32 key = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_pkType;
        break;
      }

      // optional int32 pkType = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pktype_)));
          set_has_pktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChangeMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mapid(), output);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pos(), output);
  }

  // required int64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->charid(), output);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->ip(), output);
  }

  // optional int32 port = 5;
  if (has_port()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->port(), output);
  }

  // optional int32 gateid = 6;
  if (has_gateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->gateid(), output);
  }

  // optional int32 key = 7;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->key(), output);
  }

  // optional int32 pkType = 8;
  if (has_pktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->pktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChangeMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mapid(), target);
  }

  // optional int32 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pos(), target);
  }

  // required int64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->charid(), target);
  }

  // optional string ip = 4;
  if (has_ip()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ip().data(), this->ip().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->ip(), target);
  }

  // optional int32 port = 5;
  if (has_port()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->port(), target);
  }

  // optional int32 gateid = 6;
  if (has_gateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->gateid(), target);
  }

  // optional int32 key = 7;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->key(), target);
  }

  // optional int32 pkType = 8;
  if (has_pktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->pktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChangeMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional int32 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

    // required int64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional string ip = 4;
    if (has_ip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ip());
    }

    // optional int32 port = 5;
    if (has_port()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->port());
    }

    // optional int32 gateid = 6;
    if (has_gateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gateid());
    }

    // optional int32 key = 7;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 pkType = 8;
    if (has_pktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChangeMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChangeMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChangeMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChangeMapInfo::MergeFrom(const ChangeMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_ip()) {
      set_ip(from.ip());
    }
    if (from.has_port()) {
      set_port(from.port());
    }
    if (from.has_gateid()) {
      set_gateid(from.gateid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_pktype()) {
      set_pktype(from.pktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChangeMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChangeMapInfo::CopyFrom(const ChangeMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChangeMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000004) != 0x00000004) return false;

  return true;
}

void ChangeMapInfo::Swap(ChangeMapInfo* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pos_, other->pos_);
    std::swap(charid_, other->charid_);
    std::swap(ip_, other->ip_);
    std::swap(port_, other->port_);
    std::swap(gateid_, other->gateid_);
    std::swap(key_, other->key_);
    std::swap(pktype_, other->pktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChangeMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChangeMapInfo_descriptor_;
  metadata.reflection = ChangeMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMForceClientChangeMap::kMapidFieldNumber;
const int GMForceClientChangeMap::kXposFieldNumber;
const int GMForceClientChangeMap::kYposFieldNumber;
const int GMForceClientChangeMap::kKeyFieldNumber;
const int GMForceClientChangeMap::kPkTypeFieldNumber;
#endif  // !_MSC_VER

GMForceClientChangeMap::GMForceClientChangeMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMForceClientChangeMap::InitAsDefaultInstance() {
}

GMForceClientChangeMap::GMForceClientChangeMap(const GMForceClientChangeMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMForceClientChangeMap::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  xpos_ = 0;
  ypos_ = 0;
  key_ = 0;
  pktype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMForceClientChangeMap::~GMForceClientChangeMap() {
  SharedDtor();
}

void GMForceClientChangeMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMForceClientChangeMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMForceClientChangeMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMForceClientChangeMap_descriptor_;
}

const GMForceClientChangeMap& GMForceClientChangeMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fChangeMap_2eproto();
  return *default_instance_;
}

GMForceClientChangeMap* GMForceClientChangeMap::default_instance_ = NULL;

GMForceClientChangeMap* GMForceClientChangeMap::New() const {
  return new GMForceClientChangeMap;
}

void GMForceClientChangeMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = GOOGLE_LONGLONG(0);
    xpos_ = 0;
    ypos_ = 0;
    key_ = 0;
    pktype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMForceClientChangeMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_xpos;
        break;
      }

      // optional int32 xpos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ypos;
        break;
      }

      // optional int32 ypos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_key;
        break;
      }

      // optional int32 key = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pkType;
        break;
      }

      // optional int32 pkType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pktype_)));
          set_has_pktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMForceClientChangeMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mapid(), output);
  }

  // optional int32 xpos = 2;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xpos(), output);
  }

  // optional int32 ypos = 3;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ypos(), output);
  }

  // optional int32 key = 4;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->key(), output);
  }

  // optional int32 pkType = 5;
  if (has_pktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pktype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMForceClientChangeMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mapid(), target);
  }

  // optional int32 xpos = 2;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xpos(), target);
  }

  // optional int32 ypos = 3;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ypos(), target);
  }

  // optional int32 key = 4;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->key(), target);
  }

  // optional int32 pkType = 5;
  if (has_pktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pktype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMForceClientChangeMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional int32 xpos = 2;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

    // optional int32 ypos = 3;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

    // optional int32 key = 4;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 pkType = 5;
    if (has_pktype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pktype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMForceClientChangeMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMForceClientChangeMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMForceClientChangeMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMForceClientChangeMap::MergeFrom(const GMForceClientChangeMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_pktype()) {
      set_pktype(from.pktype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMForceClientChangeMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMForceClientChangeMap::CopyFrom(const GMForceClientChangeMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMForceClientChangeMap::IsInitialized() const {

  return true;
}

void GMForceClientChangeMap::Swap(GMForceClientChangeMap* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(key_, other->key_);
    std::swap(pktype_, other->pktype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMForceClientChangeMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMForceClientChangeMap_descriptor_;
  metadata.reflection = GMForceClientChangeMap_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ChangeMap

// @@protoc_insertion_point(global_scope)
