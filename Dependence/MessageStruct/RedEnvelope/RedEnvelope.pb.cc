// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: RedEnvelope/RedEnvelope.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "RedEnvelope/RedEnvelope.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace RedEnvelopeProto {

namespace {

const ::google::protobuf::Descriptor* GetEnvelopeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEnvelopeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetEnvelopeInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetEnvelopeInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* Envelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Envelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqEnvelopeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEnvelopeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetEnvelopeList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetEnvelopeList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetGetEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetGetEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSendEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSendEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetSendEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetSendEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetEnvelopeRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetEnvelopeRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetGetEnvelopeRecord_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetGetEnvelopeRecord_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetEnvelopeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetEnvelopeReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetGetEnvelopeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetGetEnvelopeReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGMGetEnvelopeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGMGetEnvelopeReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetGMGetEnvelopeReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetGMGetEnvelopeReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToAllGMAddEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToAllGMAddEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToGMPlayerAddEnvelope_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToGMPlayerAddEnvelope_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToEnvSenderByGet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToEnvSenderByGet_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_RedEnvelope_2fRedEnvelope_2eproto() {
  protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "RedEnvelope/RedEnvelope.proto");
  GOOGLE_CHECK(file != NULL);
  GetEnvelopeInfo_descriptor_ = file->message_type(0);
  static const int GetEnvelopeInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnvelopeInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnvelopeInfo, gettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnvelopeInfo, getname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnvelopeInfo, getbindgolden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnvelopeInfo, sendername_),
  };
  GetEnvelopeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEnvelopeInfo_descriptor_,
      GetEnvelopeInfo::default_instance_,
      GetEnvelopeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnvelopeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnvelopeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEnvelopeInfo));
  GetEnvelopeInfoList_descriptor_ = file->message_type(1);
  static const int GetEnvelopeInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnvelopeInfoList, infolist_),
  };
  GetEnvelopeInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetEnvelopeInfoList_descriptor_,
      GetEnvelopeInfoList::default_instance_,
      GetEnvelopeInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnvelopeInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetEnvelopeInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetEnvelopeInfoList));
  Envelope_descriptor_ = file->message_type(2);
  static const int Envelope_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, sendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, sendtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, envelopeid_),
  };
  Envelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Envelope_descriptor_,
      Envelope::default_instance_,
      Envelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Envelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Envelope));
  ReqEnvelopeList_descriptor_ = file->message_type(3);
  static const int ReqEnvelopeList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnvelopeList, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnvelopeList, end_),
  };
  ReqEnvelopeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEnvelopeList_descriptor_,
      ReqEnvelopeList::default_instance_,
      ReqEnvelopeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnvelopeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnvelopeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEnvelopeList));
  RetEnvelopeList_descriptor_ = file->message_type(4);
  static const int RetEnvelopeList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetEnvelopeList, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetEnvelopeList, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetEnvelopeList, envelopelist_),
  };
  RetEnvelopeList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetEnvelopeList_descriptor_,
      RetEnvelopeList::default_instance_,
      RetEnvelopeList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetEnvelopeList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetEnvelopeList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetEnvelopeList));
  ReqGetEnvelope_descriptor_ = file->message_type(5);
  static const int ReqGetEnvelope_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetEnvelope, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetEnvelope, envelopeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetEnvelope, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetEnvelope, cangetcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetEnvelope, isonline_),
  };
  ReqGetEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetEnvelope_descriptor_,
      ReqGetEnvelope::default_instance_,
      ReqGetEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetEnvelope));
  RetGetEnvelope_descriptor_ = file->message_type(6);
  static const int RetGetEnvelope_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelope, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelope, envelopidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelope, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelope, getbindgolden_),
  };
  RetGetEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetGetEnvelope_descriptor_,
      RetGetEnvelope::default_instance_,
      RetGetEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetGetEnvelope));
  ReqSendEnvelope_descriptor_ = file->message_type(7);
  static const int ReqSendEnvelope_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendEnvelope, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendEnvelope, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendEnvelope, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendEnvelope, country_),
  };
  ReqSendEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSendEnvelope_descriptor_,
      ReqSendEnvelope::default_instance_,
      ReqSendEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSendEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSendEnvelope));
  RetSendEnvelope_descriptor_ = file->message_type(8);
  static const int RetSendEnvelope_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSendEnvelope, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSendEnvelope, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSendEnvelope, count_),
  };
  RetSendEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetSendEnvelope_descriptor_,
      RetSendEnvelope::default_instance_,
      RetSendEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSendEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSendEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetSendEnvelope));
  ReqGetEnvelopeRecord_descriptor_ = file->message_type(9);
  static const int ReqGetEnvelopeRecord_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetEnvelopeRecord, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetEnvelopeRecord, end_),
  };
  ReqGetEnvelopeRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetEnvelopeRecord_descriptor_,
      ReqGetEnvelopeRecord::default_instance_,
      ReqGetEnvelopeRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetEnvelopeRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetEnvelopeRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetEnvelopeRecord));
  RetGetEnvelopeRecord_descriptor_ = file->message_type(10);
  static const int RetGetEnvelopeRecord_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelopeRecord, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelopeRecord, totalcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelopeRecord, infolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelopeRecord, getcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelopeRecord, accumulatecount_),
  };
  RetGetEnvelopeRecord_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetGetEnvelopeRecord_descriptor_,
      RetGetEnvelopeRecord::default_instance_,
      RetGetEnvelopeRecord_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelopeRecord, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelopeRecord, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetGetEnvelopeRecord));
  ReqGetEnvelopeReward_descriptor_ = file->message_type(11);
  static const int ReqGetEnvelopeReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetEnvelopeReward, op_),
  };
  ReqGetEnvelopeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetEnvelopeReward_descriptor_,
      ReqGetEnvelopeReward::default_instance_,
      ReqGetEnvelopeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetEnvelopeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetEnvelopeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetEnvelopeReward));
  RetGetEnvelopeReward_descriptor_ = file->message_type(12);
  static const int RetGetEnvelopeReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelopeReward, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelopeReward, op_),
  };
  RetGetEnvelopeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetGetEnvelopeReward_descriptor_,
      RetGetEnvelopeReward::default_instance_,
      RetGetEnvelopeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelopeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetEnvelopeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetGetEnvelopeReward));
  ReqGMGetEnvelopeReward_descriptor_ = file->message_type(13);
  static const int ReqGMGetEnvelopeReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGMGetEnvelopeReward, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGMGetEnvelopeReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGMGetEnvelopeReward, num_),
  };
  ReqGMGetEnvelopeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGMGetEnvelopeReward_descriptor_,
      ReqGMGetEnvelopeReward::default_instance_,
      ReqGMGetEnvelopeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGMGetEnvelopeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGMGetEnvelopeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGMGetEnvelopeReward));
  RetGMGetEnvelopeReward_descriptor_ = file->message_type(14);
  static const int RetGMGetEnvelopeReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGMGetEnvelopeReward, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGMGetEnvelopeReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGMGetEnvelopeReward, getinfo_),
  };
  RetGMGetEnvelopeReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetGMGetEnvelopeReward_descriptor_,
      RetGMGetEnvelopeReward::default_instance_,
      RetGMGetEnvelopeReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGMGetEnvelopeReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGMGetEnvelopeReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetGMGetEnvelopeReward));
  WSToAllGMAddEnvelope_descriptor_ = file->message_type(15);
  static const int WSToAllGMAddEnvelope_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToAllGMAddEnvelope, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToAllGMAddEnvelope, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToAllGMAddEnvelope, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToAllGMAddEnvelope, charid_),
  };
  WSToAllGMAddEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToAllGMAddEnvelope_descriptor_,
      WSToAllGMAddEnvelope::default_instance_,
      WSToAllGMAddEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToAllGMAddEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToAllGMAddEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToAllGMAddEnvelope));
  WSToGMPlayerAddEnvelope_descriptor_ = file->message_type(16);
  static const int WSToGMPlayerAddEnvelope_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMPlayerAddEnvelope, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMPlayerAddEnvelope, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMPlayerAddEnvelope, count_),
  };
  WSToGMPlayerAddEnvelope_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToGMPlayerAddEnvelope_descriptor_,
      WSToGMPlayerAddEnvelope::default_instance_,
      WSToGMPlayerAddEnvelope_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMPlayerAddEnvelope, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMPlayerAddEnvelope, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToGMPlayerAddEnvelope));
  WSToEnvSenderByGet_descriptor_ = file->message_type(17);
  static const int WSToEnvSenderByGet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToEnvSenderByGet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToEnvSenderByGet, count_),
  };
  WSToEnvSenderByGet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToEnvSenderByGet_descriptor_,
      WSToEnvSenderByGet::default_instance_,
      WSToEnvSenderByGet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToEnvSenderByGet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToEnvSenderByGet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToEnvSenderByGet));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_RedEnvelope_2fRedEnvelope_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEnvelopeInfo_descriptor_, &GetEnvelopeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetEnvelopeInfoList_descriptor_, &GetEnvelopeInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Envelope_descriptor_, &Envelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEnvelopeList_descriptor_, &ReqEnvelopeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetEnvelopeList_descriptor_, &RetEnvelopeList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetEnvelope_descriptor_, &ReqGetEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetGetEnvelope_descriptor_, &RetGetEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSendEnvelope_descriptor_, &ReqSendEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetSendEnvelope_descriptor_, &RetSendEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetEnvelopeRecord_descriptor_, &ReqGetEnvelopeRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetGetEnvelopeRecord_descriptor_, &RetGetEnvelopeRecord::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetEnvelopeReward_descriptor_, &ReqGetEnvelopeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetGetEnvelopeReward_descriptor_, &RetGetEnvelopeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGMGetEnvelopeReward_descriptor_, &ReqGMGetEnvelopeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetGMGetEnvelopeReward_descriptor_, &RetGMGetEnvelopeReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToAllGMAddEnvelope_descriptor_, &WSToAllGMAddEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToGMPlayerAddEnvelope_descriptor_, &WSToGMPlayerAddEnvelope::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToEnvSenderByGet_descriptor_, &WSToEnvSenderByGet::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_RedEnvelope_2fRedEnvelope_2eproto() {
  delete GetEnvelopeInfo::default_instance_;
  delete GetEnvelopeInfo_reflection_;
  delete GetEnvelopeInfoList::default_instance_;
  delete GetEnvelopeInfoList_reflection_;
  delete Envelope::default_instance_;
  delete Envelope_reflection_;
  delete ReqEnvelopeList::default_instance_;
  delete ReqEnvelopeList_reflection_;
  delete RetEnvelopeList::default_instance_;
  delete RetEnvelopeList_reflection_;
  delete ReqGetEnvelope::default_instance_;
  delete ReqGetEnvelope_reflection_;
  delete RetGetEnvelope::default_instance_;
  delete RetGetEnvelope_reflection_;
  delete ReqSendEnvelope::default_instance_;
  delete ReqSendEnvelope_reflection_;
  delete RetSendEnvelope::default_instance_;
  delete RetSendEnvelope_reflection_;
  delete ReqGetEnvelopeRecord::default_instance_;
  delete ReqGetEnvelopeRecord_reflection_;
  delete RetGetEnvelopeRecord::default_instance_;
  delete RetGetEnvelopeRecord_reflection_;
  delete ReqGetEnvelopeReward::default_instance_;
  delete ReqGetEnvelopeReward_reflection_;
  delete RetGetEnvelopeReward::default_instance_;
  delete RetGetEnvelopeReward_reflection_;
  delete ReqGMGetEnvelopeReward::default_instance_;
  delete ReqGMGetEnvelopeReward_reflection_;
  delete RetGMGetEnvelopeReward::default_instance_;
  delete RetGMGetEnvelopeReward_reflection_;
  delete WSToAllGMAddEnvelope::default_instance_;
  delete WSToAllGMAddEnvelope_reflection_;
  delete WSToGMPlayerAddEnvelope::default_instance_;
  delete WSToGMPlayerAddEnvelope_reflection_;
  delete WSToEnvSenderByGet::default_instance_;
  delete WSToEnvSenderByGet_reflection_;
}

void protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035RedEnvelope/RedEnvelope.proto\022\020RedEnve"
    "lopeProto\"n\n\017GetEnvelopeInfo\022\016\n\006charID\030\001"
    " \002(\003\022\017\n\007getTime\030\002 \002(\001\022\017\n\007getName\030\003 \002(\t\022\025"
    "\n\rgetBindGolden\030\004 \002(\005\022\022\n\nsenderName\030\005 \001("
    "\t\"J\n\023GetEnvelopeInfoList\0223\n\010infoList\030\001 \003"
    "(\0132!.RedEnvelopeProto.GetEnvelopeInfo\"Q\n"
    "\010Envelope\022\020\n\010sendName\030\001 \002(\t\022\020\n\010sendTime\030"
    "\002 \002(\001\022\r\n\005state\030\003 \002(\005\022\022\n\nenvelopeID\030\004 \002(\005"
    "\"-\n\017ReqEnvelopeList\022\r\n\005begin\030\001 \002(\005\022\013\n\003en"
    "d\030\002 \002(\005\"d\n\017RetEnvelopeList\022\013\n\003ret\030\001 \002(\005\022"
    "\022\n\ntotalCount\030\002 \001(\005\0220\n\014envelopeList\030\003 \003("
    "\0132\032.RedEnvelopeProto.Envelope\"g\n\016ReqGetE"
    "nvelope\022\n\n\002op\030\001 \002(\005\022\022\n\nenvelopeID\030\002 \001(\005\022"
    "\016\n\006charID\030\003 \001(\003\022\023\n\013canGetCount\030\004 \001(\005\022\020\n\010"
    "isOnLine\030\005 \001(\005\"[\n\016RetGetEnvelope\022\013\n\003ret\030"
    "\001 \002(\005\022\025\n\renvelopIdList\030\002 \003(\005\022\016\n\006charID\030\003"
    " \001(\003\022\025\n\rgetBindGolden\030\004 \001(\005\"O\n\017ReqSendEn"
    "velope\022\r\n\005count\030\001 \002(\005\022\016\n\006charID\030\002 \001(\003\022\014\n"
    "\004name\030\003 \001(\t\022\017\n\007country\030\004 \001(\005\"=\n\017RetSendE"
    "nvelope\022\013\n\003ret\030\001 \002(\005\022\016\n\006charID\030\002 \001(\003\022\r\n\005"
    "count\030\003 \001(\005\"2\n\024ReqGetEnvelopeRecord\022\r\n\005b"
    "egin\030\001 \002(\005\022\013\n\003end\030\002 \002(\005\"\227\001\n\024RetGetEnvelo"
    "peRecord\022\013\n\003ret\030\001 \002(\005\022\022\n\ntotalCount\030\002 \001("
    "\005\0223\n\010infoList\030\003 \003(\0132!.RedEnvelopeProto.G"
    "etEnvelopeInfo\022\020\n\010getCount\030\004 \001(\005\022\027\n\017accu"
    "mulateCount\030\005 \001(\005\"\"\n\024ReqGetEnvelopeRewar"
    "d\022\n\n\002op\030\001 \002(\005\"/\n\024RetGetEnvelopeReward\022\013\n"
    "\003ret\030\001 \002(\005\022\n\n\002op\030\002 \001(\005\"A\n\026ReqGMGetEnvelo"
    "peReward\022\n\n\002op\030\001 \002(\005\022\016\n\006charID\030\002 \002(\003\022\013\n\003"
    "num\030\003 \002(\005\"p\n\026RetGMGetEnvelopeReward\022\013\n\003r"
    "et\030\001 \002(\005\022\016\n\006charID\030\002 \002(\003\0229\n\007getInfo\030\003 \001("
    "\0132(.RedEnvelopeProto.ReqGMGetEnvelopeRew"
    "ard\"T\n\024WSToAllGMAddEnvelope\022\017\n\007country\030\001"
    " \002(\005\022\r\n\005count\030\002 \002(\005\022\014\n\004flag\030\003 \002(\010\022\016\n\006cha"
    "rID\030\004 \003(\003\"I\n\027WSToGMPlayerAddEnvelope\022\016\n\006"
    "charID\030\001 \002(\003\022\017\n\007country\030\002 \002(\005\022\r\n\005count\030\003"
    " \002(\005\"3\n\022WSToEnvSenderByGet\022\016\n\006charID\030\001 \002"
    "(\003\022\r\n\005count\030\002 \002(\005", 1497);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "RedEnvelope/RedEnvelope.proto", &protobuf_RegisterTypes);
  GetEnvelopeInfo::default_instance_ = new GetEnvelopeInfo();
  GetEnvelopeInfoList::default_instance_ = new GetEnvelopeInfoList();
  Envelope::default_instance_ = new Envelope();
  ReqEnvelopeList::default_instance_ = new ReqEnvelopeList();
  RetEnvelopeList::default_instance_ = new RetEnvelopeList();
  ReqGetEnvelope::default_instance_ = new ReqGetEnvelope();
  RetGetEnvelope::default_instance_ = new RetGetEnvelope();
  ReqSendEnvelope::default_instance_ = new ReqSendEnvelope();
  RetSendEnvelope::default_instance_ = new RetSendEnvelope();
  ReqGetEnvelopeRecord::default_instance_ = new ReqGetEnvelopeRecord();
  RetGetEnvelopeRecord::default_instance_ = new RetGetEnvelopeRecord();
  ReqGetEnvelopeReward::default_instance_ = new ReqGetEnvelopeReward();
  RetGetEnvelopeReward::default_instance_ = new RetGetEnvelopeReward();
  ReqGMGetEnvelopeReward::default_instance_ = new ReqGMGetEnvelopeReward();
  RetGMGetEnvelopeReward::default_instance_ = new RetGMGetEnvelopeReward();
  WSToAllGMAddEnvelope::default_instance_ = new WSToAllGMAddEnvelope();
  WSToGMPlayerAddEnvelope::default_instance_ = new WSToGMPlayerAddEnvelope();
  WSToEnvSenderByGet::default_instance_ = new WSToEnvSenderByGet();
  GetEnvelopeInfo::default_instance_->InitAsDefaultInstance();
  GetEnvelopeInfoList::default_instance_->InitAsDefaultInstance();
  Envelope::default_instance_->InitAsDefaultInstance();
  ReqEnvelopeList::default_instance_->InitAsDefaultInstance();
  RetEnvelopeList::default_instance_->InitAsDefaultInstance();
  ReqGetEnvelope::default_instance_->InitAsDefaultInstance();
  RetGetEnvelope::default_instance_->InitAsDefaultInstance();
  ReqSendEnvelope::default_instance_->InitAsDefaultInstance();
  RetSendEnvelope::default_instance_->InitAsDefaultInstance();
  ReqGetEnvelopeRecord::default_instance_->InitAsDefaultInstance();
  RetGetEnvelopeRecord::default_instance_->InitAsDefaultInstance();
  ReqGetEnvelopeReward::default_instance_->InitAsDefaultInstance();
  RetGetEnvelopeReward::default_instance_->InitAsDefaultInstance();
  ReqGMGetEnvelopeReward::default_instance_->InitAsDefaultInstance();
  RetGMGetEnvelopeReward::default_instance_->InitAsDefaultInstance();
  WSToAllGMAddEnvelope::default_instance_->InitAsDefaultInstance();
  WSToGMPlayerAddEnvelope::default_instance_->InitAsDefaultInstance();
  WSToEnvSenderByGet::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_RedEnvelope_2fRedEnvelope_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_RedEnvelope_2fRedEnvelope_2eproto {
  StaticDescriptorInitializer_RedEnvelope_2fRedEnvelope_2eproto() {
    protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  }
} static_descriptor_initializer_RedEnvelope_2fRedEnvelope_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GetEnvelopeInfo::kCharIDFieldNumber;
const int GetEnvelopeInfo::kGetTimeFieldNumber;
const int GetEnvelopeInfo::kGetNameFieldNumber;
const int GetEnvelopeInfo::kGetBindGoldenFieldNumber;
const int GetEnvelopeInfo::kSenderNameFieldNumber;
#endif  // !_MSC_VER

GetEnvelopeInfo::GetEnvelopeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetEnvelopeInfo::InitAsDefaultInstance() {
}

GetEnvelopeInfo::GetEnvelopeInfo(const GetEnvelopeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetEnvelopeInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  gettime_ = 0;
  getname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  getbindgolden_ = 0;
  sendername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEnvelopeInfo::~GetEnvelopeInfo() {
  SharedDtor();
}

void GetEnvelopeInfo::SharedDtor() {
  if (getname_ != &::google::protobuf::internal::kEmptyString) {
    delete getname_;
  }
  if (sendername_ != &::google::protobuf::internal::kEmptyString) {
    delete sendername_;
  }
  if (this != default_instance_) {
  }
}

void GetEnvelopeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEnvelopeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEnvelopeInfo_descriptor_;
}

const GetEnvelopeInfo& GetEnvelopeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

GetEnvelopeInfo* GetEnvelopeInfo::default_instance_ = NULL;

GetEnvelopeInfo* GetEnvelopeInfo::New() const {
  return new GetEnvelopeInfo;
}

void GetEnvelopeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    gettime_ = 0;
    if (has_getname()) {
      if (getname_ != &::google::protobuf::internal::kEmptyString) {
        getname_->clear();
      }
    }
    getbindgolden_ = 0;
    if (has_sendername()) {
      if (sendername_ != &::google::protobuf::internal::kEmptyString) {
        sendername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEnvelopeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_getTime;
        break;
      }

      // required double getTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_getTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &gettime_)));
          set_has_gettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_getName;
        break;
      }

      // required string getName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_getname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->getname().data(), this->getname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_getBindGolden;
        break;
      }

      // required int32 getBindGolden = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getBindGolden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getbindgolden_)));
          set_has_getbindgolden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_senderName;
        break;
      }

      // optional string senderName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_senderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendername().data(), this->sendername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetEnvelopeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required double getTime = 2;
  if (has_gettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->gettime(), output);
  }

  // required string getName = 3;
  if (has_getname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->getname().data(), this->getname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->getname(), output);
  }

  // required int32 getBindGolden = 4;
  if (has_getbindgolden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->getbindgolden(), output);
  }

  // optional string senderName = 5;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->sendername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetEnvelopeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required double getTime = 2;
  if (has_gettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->gettime(), target);
  }

  // required string getName = 3;
  if (has_getname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->getname().data(), this->getname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->getname(), target);
  }

  // required int32 getBindGolden = 4;
  if (has_getbindgolden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->getbindgolden(), target);
  }

  // optional string senderName = 5;
  if (has_sendername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendername().data(), this->sendername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->sendername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetEnvelopeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required double getTime = 2;
    if (has_gettime()) {
      total_size += 1 + 8;
    }

    // required string getName = 3;
    if (has_getname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->getname());
    }

    // required int32 getBindGolden = 4;
    if (has_getbindgolden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getbindgolden());
    }

    // optional string senderName = 5;
    if (has_sendername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEnvelopeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEnvelopeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEnvelopeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEnvelopeInfo::MergeFrom(const GetEnvelopeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_gettime()) {
      set_gettime(from.gettime());
    }
    if (from.has_getname()) {
      set_getname(from.getname());
    }
    if (from.has_getbindgolden()) {
      set_getbindgolden(from.getbindgolden());
    }
    if (from.has_sendername()) {
      set_sendername(from.sendername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEnvelopeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEnvelopeInfo::CopyFrom(const GetEnvelopeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEnvelopeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GetEnvelopeInfo::Swap(GetEnvelopeInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(gettime_, other->gettime_);
    std::swap(getname_, other->getname_);
    std::swap(getbindgolden_, other->getbindgolden_);
    std::swap(sendername_, other->sendername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEnvelopeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEnvelopeInfo_descriptor_;
  metadata.reflection = GetEnvelopeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetEnvelopeInfoList::kInfoListFieldNumber;
#endif  // !_MSC_VER

GetEnvelopeInfoList::GetEnvelopeInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetEnvelopeInfoList::InitAsDefaultInstance() {
}

GetEnvelopeInfoList::GetEnvelopeInfoList(const GetEnvelopeInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetEnvelopeInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetEnvelopeInfoList::~GetEnvelopeInfoList() {
  SharedDtor();
}

void GetEnvelopeInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetEnvelopeInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetEnvelopeInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetEnvelopeInfoList_descriptor_;
}

const GetEnvelopeInfoList& GetEnvelopeInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

GetEnvelopeInfoList* GetEnvelopeInfoList::default_instance_ = NULL;

GetEnvelopeInfoList* GetEnvelopeInfoList::New() const {
  return new GetEnvelopeInfoList;
}

void GetEnvelopeInfoList::Clear() {
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetEnvelopeInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .RedEnvelopeProto.GetEnvelopeInfo infoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetEnvelopeInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .RedEnvelopeProto.GetEnvelopeInfo infoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetEnvelopeInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .RedEnvelopeProto.GetEnvelopeInfo infoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetEnvelopeInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .RedEnvelopeProto.GetEnvelopeInfo infoList = 1;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetEnvelopeInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetEnvelopeInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetEnvelopeInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetEnvelopeInfoList::MergeFrom(const GetEnvelopeInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetEnvelopeInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetEnvelopeInfoList::CopyFrom(const GetEnvelopeInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetEnvelopeInfoList::IsInitialized() const {

  for (int i = 0; i < infolist_size(); i++) {
    if (!this->infolist(i).IsInitialized()) return false;
  }
  return true;
}

void GetEnvelopeInfoList::Swap(GetEnvelopeInfoList* other) {
  if (other != this) {
    infolist_.Swap(&other->infolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetEnvelopeInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetEnvelopeInfoList_descriptor_;
  metadata.reflection = GetEnvelopeInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Envelope::kSendNameFieldNumber;
const int Envelope::kSendTimeFieldNumber;
const int Envelope::kStateFieldNumber;
const int Envelope::kEnvelopeIDFieldNumber;
#endif  // !_MSC_VER

Envelope::Envelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Envelope::InitAsDefaultInstance() {
}

Envelope::Envelope(const Envelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Envelope::SharedCtor() {
  _cached_size_ = 0;
  sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sendtime_ = 0;
  state_ = 0;
  envelopeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Envelope::~Envelope() {
  SharedDtor();
}

void Envelope::SharedDtor() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (this != default_instance_) {
  }
}

void Envelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Envelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Envelope_descriptor_;
}

const Envelope& Envelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

Envelope* Envelope::default_instance_ = NULL;

Envelope* Envelope::New() const {
  return new Envelope;
}

void Envelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_sendname()) {
      if (sendname_ != &::google::protobuf::internal::kEmptyString) {
        sendname_->clear();
      }
    }
    sendtime_ = 0;
    state_ = 0;
    envelopeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Envelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string sendName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sendname().data(), this->sendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_sendTime;
        break;
      }

      // required double sendTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_sendTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &sendtime_)));
          set_has_sendtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_envelopeID;
        break;
      }

      // required int32 envelopeID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_envelopeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &envelopeid_)));
          set_has_envelopeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Envelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string sendName = 1;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->sendname(), output);
  }

  // required double sendTime = 2;
  if (has_sendtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->sendtime(), output);
  }

  // required int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // required int32 envelopeID = 4;
  if (has_envelopeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->envelopeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Envelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string sendName = 1;
  if (has_sendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sendname().data(), this->sendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->sendname(), target);
  }

  // required double sendTime = 2;
  if (has_sendtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->sendtime(), target);
  }

  // required int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // required int32 envelopeID = 4;
  if (has_envelopeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->envelopeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Envelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string sendName = 1;
    if (has_sendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sendname());
    }

    // required double sendTime = 2;
    if (has_sendtime()) {
      total_size += 1 + 8;
    }

    // required int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 envelopeID = 4;
    if (has_envelopeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->envelopeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Envelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Envelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Envelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Envelope::MergeFrom(const Envelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sendname()) {
      set_sendname(from.sendname());
    }
    if (from.has_sendtime()) {
      set_sendtime(from.sendtime());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_envelopeid()) {
      set_envelopeid(from.envelopeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Envelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Envelope::CopyFrom(const Envelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Envelope::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void Envelope::Swap(Envelope* other) {
  if (other != this) {
    std::swap(sendname_, other->sendname_);
    std::swap(sendtime_, other->sendtime_);
    std::swap(state_, other->state_);
    std::swap(envelopeid_, other->envelopeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Envelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Envelope_descriptor_;
  metadata.reflection = Envelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqEnvelopeList::kBeginFieldNumber;
const int ReqEnvelopeList::kEndFieldNumber;
#endif  // !_MSC_VER

ReqEnvelopeList::ReqEnvelopeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqEnvelopeList::InitAsDefaultInstance() {
}

ReqEnvelopeList::ReqEnvelopeList(const ReqEnvelopeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqEnvelopeList::SharedCtor() {
  _cached_size_ = 0;
  begin_ = 0;
  end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEnvelopeList::~ReqEnvelopeList() {
  SharedDtor();
}

void ReqEnvelopeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqEnvelopeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnvelopeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnvelopeList_descriptor_;
}

const ReqEnvelopeList& ReqEnvelopeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

ReqEnvelopeList* ReqEnvelopeList::default_instance_ = NULL;

ReqEnvelopeList* ReqEnvelopeList::New() const {
  return new ReqEnvelopeList;
}

void ReqEnvelopeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_ = 0;
    end_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEnvelopeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // required int32 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqEnvelopeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->begin(), output);
  }

  // required int32 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqEnvelopeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->begin(), target);
  }

  // required int32 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqEnvelopeList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin());
    }

    // required int32 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnvelopeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEnvelopeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEnvelopeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEnvelopeList::MergeFrom(const ReqEnvelopeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEnvelopeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnvelopeList::CopyFrom(const ReqEnvelopeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnvelopeList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqEnvelopeList::Swap(ReqEnvelopeList* other) {
  if (other != this) {
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEnvelopeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEnvelopeList_descriptor_;
  metadata.reflection = ReqEnvelopeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetEnvelopeList::kRetFieldNumber;
const int RetEnvelopeList::kTotalCountFieldNumber;
const int RetEnvelopeList::kEnvelopeListFieldNumber;
#endif  // !_MSC_VER

RetEnvelopeList::RetEnvelopeList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetEnvelopeList::InitAsDefaultInstance() {
}

RetEnvelopeList::RetEnvelopeList(const RetEnvelopeList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetEnvelopeList::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  totalcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetEnvelopeList::~RetEnvelopeList() {
  SharedDtor();
}

void RetEnvelopeList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetEnvelopeList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetEnvelopeList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetEnvelopeList_descriptor_;
}

const RetEnvelopeList& RetEnvelopeList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

RetEnvelopeList* RetEnvelopeList::default_instance_ = NULL;

RetEnvelopeList* RetEnvelopeList::New() const {
  return new RetEnvelopeList;
}

void RetEnvelopeList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    totalcount_ = 0;
  }
  envelopelist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetEnvelopeList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totalCount;
        break;
      }

      // optional int32 totalCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_envelopeList;
        break;
      }

      // repeated .RedEnvelopeProto.Envelope envelopeList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_envelopeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_envelopelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_envelopeList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetEnvelopeList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 totalCount = 2;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalcount(), output);
  }

  // repeated .RedEnvelopeProto.Envelope envelopeList = 3;
  for (int i = 0; i < this->envelopelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->envelopelist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetEnvelopeList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 totalCount = 2;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalcount(), target);
  }

  // repeated .RedEnvelopeProto.Envelope envelopeList = 3;
  for (int i = 0; i < this->envelopelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->envelopelist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetEnvelopeList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 totalCount = 2;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

  }
  // repeated .RedEnvelopeProto.Envelope envelopeList = 3;
  total_size += 1 * this->envelopelist_size();
  for (int i = 0; i < this->envelopelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->envelopelist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetEnvelopeList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetEnvelopeList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetEnvelopeList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetEnvelopeList::MergeFrom(const RetEnvelopeList& from) {
  GOOGLE_CHECK_NE(&from, this);
  envelopelist_.MergeFrom(from.envelopelist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetEnvelopeList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetEnvelopeList::CopyFrom(const RetEnvelopeList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetEnvelopeList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < envelopelist_size(); i++) {
    if (!this->envelopelist(i).IsInitialized()) return false;
  }
  return true;
}

void RetEnvelopeList::Swap(RetEnvelopeList* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(totalcount_, other->totalcount_);
    envelopelist_.Swap(&other->envelopelist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetEnvelopeList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetEnvelopeList_descriptor_;
  metadata.reflection = RetEnvelopeList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetEnvelope::kOpFieldNumber;
const int ReqGetEnvelope::kEnvelopeIDFieldNumber;
const int ReqGetEnvelope::kCharIDFieldNumber;
const int ReqGetEnvelope::kCanGetCountFieldNumber;
const int ReqGetEnvelope::kIsOnLineFieldNumber;
#endif  // !_MSC_VER

ReqGetEnvelope::ReqGetEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetEnvelope::InitAsDefaultInstance() {
}

ReqGetEnvelope::ReqGetEnvelope(const ReqGetEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetEnvelope::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  envelopeid_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  cangetcount_ = 0;
  isonline_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetEnvelope::~ReqGetEnvelope() {
  SharedDtor();
}

void ReqGetEnvelope::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetEnvelope_descriptor_;
}

const ReqGetEnvelope& ReqGetEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

ReqGetEnvelope* ReqGetEnvelope::default_instance_ = NULL;

ReqGetEnvelope* ReqGetEnvelope::New() const {
  return new ReqGetEnvelope;
}

void ReqGetEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
    envelopeid_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    cangetcount_ = 0;
    isonline_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_envelopeID;
        break;
      }

      // optional int32 envelopeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_envelopeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &envelopeid_)));
          set_has_envelopeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // optional int64 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_canGetCount;
        break;
      }

      // optional int32 canGetCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canGetCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cangetcount_)));
          set_has_cangetcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isOnLine;
        break;
      }

      // optional int32 isOnLine = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOnLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }

  // optional int32 envelopeID = 2;
  if (has_envelopeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->envelopeid(), output);
  }

  // optional int64 charID = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->charid(), output);
  }

  // optional int32 canGetCount = 4;
  if (has_cangetcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->cangetcount(), output);
  }

  // optional int32 isOnLine = 5;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->isonline(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }

  // optional int32 envelopeID = 2;
  if (has_envelopeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->envelopeid(), target);
  }

  // optional int64 charID = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->charid(), target);
  }

  // optional int32 canGetCount = 4;
  if (has_cangetcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->cangetcount(), target);
  }

  // optional int32 isOnLine = 5;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->isonline(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // optional int32 envelopeID = 2;
    if (has_envelopeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->envelopeid());
    }

    // optional int64 charID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 canGetCount = 4;
    if (has_cangetcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cangetcount());
    }

    // optional int32 isOnLine = 5;
    if (has_isonline()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isonline());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetEnvelope::MergeFrom(const ReqGetEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_envelopeid()) {
      set_envelopeid(from.envelopeid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_cangetcount()) {
      set_cangetcount(from.cangetcount());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetEnvelope::CopyFrom(const ReqGetEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetEnvelope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGetEnvelope::Swap(ReqGetEnvelope* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(envelopeid_, other->envelopeid_);
    std::swap(charid_, other->charid_);
    std::swap(cangetcount_, other->cangetcount_);
    std::swap(isonline_, other->isonline_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetEnvelope_descriptor_;
  metadata.reflection = ReqGetEnvelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetGetEnvelope::kRetFieldNumber;
const int RetGetEnvelope::kEnvelopIdListFieldNumber;
const int RetGetEnvelope::kCharIDFieldNumber;
const int RetGetEnvelope::kGetBindGoldenFieldNumber;
#endif  // !_MSC_VER

RetGetEnvelope::RetGetEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetGetEnvelope::InitAsDefaultInstance() {
}

RetGetEnvelope::RetGetEnvelope(const RetGetEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetGetEnvelope::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  getbindgolden_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetGetEnvelope::~RetGetEnvelope() {
  SharedDtor();
}

void RetGetEnvelope::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetGetEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetGetEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetGetEnvelope_descriptor_;
}

const RetGetEnvelope& RetGetEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

RetGetEnvelope* RetGetEnvelope::default_instance_ = NULL;

RetGetEnvelope* RetGetEnvelope::New() const {
  return new RetGetEnvelope;
}

void RetGetEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    getbindgolden_ = 0;
  }
  envelopidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetGetEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_envelopIdList;
        break;
      }

      // repeated int32 envelopIdList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_envelopIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_envelopidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_envelopidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_envelopIdList;
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // optional int64 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_getBindGolden;
        break;
      }

      // optional int32 getBindGolden = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getBindGolden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getbindgolden_)));
          set_has_getbindgolden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetGetEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated int32 envelopIdList = 2;
  for (int i = 0; i < this->envelopidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->envelopidlist(i), output);
  }

  // optional int64 charID = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->charid(), output);
  }

  // optional int32 getBindGolden = 4;
  if (has_getbindgolden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->getbindgolden(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetGetEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated int32 envelopIdList = 2;
  for (int i = 0; i < this->envelopidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->envelopidlist(i), target);
  }

  // optional int64 charID = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->charid(), target);
  }

  // optional int32 getBindGolden = 4;
  if (has_getbindgolden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->getbindgolden(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetGetEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 charID = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 getBindGolden = 4;
    if (has_getbindgolden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getbindgolden());
    }

  }
  // repeated int32 envelopIdList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->envelopidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->envelopidlist(i));
    }
    total_size += 1 * this->envelopidlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetGetEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetGetEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetGetEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetGetEnvelope::MergeFrom(const RetGetEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  envelopidlist_.MergeFrom(from.envelopidlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_getbindgolden()) {
      set_getbindgolden(from.getbindgolden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetGetEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGetEnvelope::CopyFrom(const RetGetEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGetEnvelope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetGetEnvelope::Swap(RetGetEnvelope* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    envelopidlist_.Swap(&other->envelopidlist_);
    std::swap(charid_, other->charid_);
    std::swap(getbindgolden_, other->getbindgolden_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetGetEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetGetEnvelope_descriptor_;
  metadata.reflection = RetGetEnvelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSendEnvelope::kCountFieldNumber;
const int ReqSendEnvelope::kCharIDFieldNumber;
const int ReqSendEnvelope::kNameFieldNumber;
const int ReqSendEnvelope::kCountryFieldNumber;
#endif  // !_MSC_VER

ReqSendEnvelope::ReqSendEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSendEnvelope::InitAsDefaultInstance() {
}

ReqSendEnvelope::ReqSendEnvelope(const ReqSendEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSendEnvelope::SharedCtor() {
  _cached_size_ = 0;
  count_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSendEnvelope::~ReqSendEnvelope() {
  SharedDtor();
}

void ReqSendEnvelope::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ReqSendEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSendEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSendEnvelope_descriptor_;
}

const ReqSendEnvelope& ReqSendEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

ReqSendEnvelope* ReqSendEnvelope::default_instance_ = NULL;

ReqSendEnvelope* ReqSendEnvelope::New() const {
  return new ReqSendEnvelope;
}

void ReqSendEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    count_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    country_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSendEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 count = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional int64 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_country;
        break;
      }

      // optional int32 country = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSendEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 count = 1;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->count(), output);
  }

  // optional int64 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional int32 country = 4;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->country(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSendEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 count = 1;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->count(), target);
  }

  // optional int64 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional int32 country = 4;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->country(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSendEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 count = 1;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int64 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 country = 4;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSendEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSendEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSendEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSendEnvelope::MergeFrom(const ReqSendEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSendEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSendEnvelope::CopyFrom(const ReqSendEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSendEnvelope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqSendEnvelope::Swap(ReqSendEnvelope* other) {
  if (other != this) {
    std::swap(count_, other->count_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(country_, other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSendEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSendEnvelope_descriptor_;
  metadata.reflection = ReqSendEnvelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetSendEnvelope::kRetFieldNumber;
const int RetSendEnvelope::kCharIDFieldNumber;
const int RetSendEnvelope::kCountFieldNumber;
#endif  // !_MSC_VER

RetSendEnvelope::RetSendEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetSendEnvelope::InitAsDefaultInstance() {
}

RetSendEnvelope::RetSendEnvelope(const RetSendEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetSendEnvelope::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetSendEnvelope::~RetSendEnvelope() {
  SharedDtor();
}

void RetSendEnvelope::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetSendEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetSendEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetSendEnvelope_descriptor_;
}

const RetSendEnvelope& RetSendEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

RetSendEnvelope* RetSendEnvelope::default_instance_ = NULL;

RetSendEnvelope* RetSendEnvelope::New() const {
  return new RetSendEnvelope;
}

void RetSendEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetSendEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional int64 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetSendEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetSendEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetSendEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetSendEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetSendEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetSendEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetSendEnvelope::MergeFrom(const RetSendEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetSendEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetSendEnvelope::CopyFrom(const RetSendEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetSendEnvelope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetSendEnvelope::Swap(RetSendEnvelope* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetSendEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetSendEnvelope_descriptor_;
  metadata.reflection = RetSendEnvelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetEnvelopeRecord::kBeginFieldNumber;
const int ReqGetEnvelopeRecord::kEndFieldNumber;
#endif  // !_MSC_VER

ReqGetEnvelopeRecord::ReqGetEnvelopeRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetEnvelopeRecord::InitAsDefaultInstance() {
}

ReqGetEnvelopeRecord::ReqGetEnvelopeRecord(const ReqGetEnvelopeRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetEnvelopeRecord::SharedCtor() {
  _cached_size_ = 0;
  begin_ = 0;
  end_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetEnvelopeRecord::~ReqGetEnvelopeRecord() {
  SharedDtor();
}

void ReqGetEnvelopeRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetEnvelopeRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetEnvelopeRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetEnvelopeRecord_descriptor_;
}

const ReqGetEnvelopeRecord& ReqGetEnvelopeRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

ReqGetEnvelopeRecord* ReqGetEnvelopeRecord::default_instance_ = NULL;

ReqGetEnvelopeRecord* ReqGetEnvelopeRecord::New() const {
  return new ReqGetEnvelopeRecord;
}

void ReqGetEnvelopeRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_ = 0;
    end_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetEnvelopeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // required int32 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetEnvelopeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->begin(), output);
  }

  // required int32 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetEnvelopeRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->begin(), target);
  }

  // required int32 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetEnvelopeRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin());
    }

    // required int32 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetEnvelopeRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetEnvelopeRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetEnvelopeRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetEnvelopeRecord::MergeFrom(const ReqGetEnvelopeRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetEnvelopeRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetEnvelopeRecord::CopyFrom(const ReqGetEnvelopeRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetEnvelopeRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqGetEnvelopeRecord::Swap(ReqGetEnvelopeRecord* other) {
  if (other != this) {
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetEnvelopeRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetEnvelopeRecord_descriptor_;
  metadata.reflection = ReqGetEnvelopeRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetGetEnvelopeRecord::kRetFieldNumber;
const int RetGetEnvelopeRecord::kTotalCountFieldNumber;
const int RetGetEnvelopeRecord::kInfoListFieldNumber;
const int RetGetEnvelopeRecord::kGetCountFieldNumber;
const int RetGetEnvelopeRecord::kAccumulateCountFieldNumber;
#endif  // !_MSC_VER

RetGetEnvelopeRecord::RetGetEnvelopeRecord()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetGetEnvelopeRecord::InitAsDefaultInstance() {
}

RetGetEnvelopeRecord::RetGetEnvelopeRecord(const RetGetEnvelopeRecord& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetGetEnvelopeRecord::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  totalcount_ = 0;
  getcount_ = 0;
  accumulatecount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetGetEnvelopeRecord::~RetGetEnvelopeRecord() {
  SharedDtor();
}

void RetGetEnvelopeRecord::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetGetEnvelopeRecord::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetGetEnvelopeRecord::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetGetEnvelopeRecord_descriptor_;
}

const RetGetEnvelopeRecord& RetGetEnvelopeRecord::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

RetGetEnvelopeRecord* RetGetEnvelopeRecord::default_instance_ = NULL;

RetGetEnvelopeRecord* RetGetEnvelopeRecord::New() const {
  return new RetGetEnvelopeRecord;
}

void RetGetEnvelopeRecord::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    totalcount_ = 0;
    getcount_ = 0;
    accumulatecount_ = 0;
  }
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetGetEnvelopeRecord::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_totalCount;
        break;
      }

      // optional int32 totalCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infoList;
        break;
      }

      // repeated .RedEnvelopeProto.GetEnvelopeInfo infoList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_infoList;
        if (input->ExpectTag(32)) goto parse_getCount;
        break;
      }

      // optional int32 getCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getcount_)));
          set_has_getcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_accumulateCount;
        break;
      }

      // optional int32 accumulateCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accumulateCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accumulatecount_)));
          set_has_accumulatecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetGetEnvelopeRecord::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 totalCount = 2;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->totalcount(), output);
  }

  // repeated .RedEnvelopeProto.GetEnvelopeInfo infoList = 3;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->infolist(i), output);
  }

  // optional int32 getCount = 4;
  if (has_getcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->getcount(), output);
  }

  // optional int32 accumulateCount = 5;
  if (has_accumulatecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->accumulatecount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetGetEnvelopeRecord::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 totalCount = 2;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->totalcount(), target);
  }

  // repeated .RedEnvelopeProto.GetEnvelopeInfo infoList = 3;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->infolist(i), target);
  }

  // optional int32 getCount = 4;
  if (has_getcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->getcount(), target);
  }

  // optional int32 accumulateCount = 5;
  if (has_accumulatecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->accumulatecount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetGetEnvelopeRecord::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 totalCount = 2;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

    // optional int32 getCount = 4;
    if (has_getcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getcount());
    }

    // optional int32 accumulateCount = 5;
    if (has_accumulatecount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accumulatecount());
    }

  }
  // repeated .RedEnvelopeProto.GetEnvelopeInfo infoList = 3;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetGetEnvelopeRecord::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetGetEnvelopeRecord* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetGetEnvelopeRecord*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetGetEnvelopeRecord::MergeFrom(const RetGetEnvelopeRecord& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
    if (from.has_getcount()) {
      set_getcount(from.getcount());
    }
    if (from.has_accumulatecount()) {
      set_accumulatecount(from.accumulatecount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetGetEnvelopeRecord::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGetEnvelopeRecord::CopyFrom(const RetGetEnvelopeRecord& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGetEnvelopeRecord::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < infolist_size(); i++) {
    if (!this->infolist(i).IsInitialized()) return false;
  }
  return true;
}

void RetGetEnvelopeRecord::Swap(RetGetEnvelopeRecord* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(totalcount_, other->totalcount_);
    infolist_.Swap(&other->infolist_);
    std::swap(getcount_, other->getcount_);
    std::swap(accumulatecount_, other->accumulatecount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetGetEnvelopeRecord::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetGetEnvelopeRecord_descriptor_;
  metadata.reflection = RetGetEnvelopeRecord_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetEnvelopeReward::kOpFieldNumber;
#endif  // !_MSC_VER

ReqGetEnvelopeReward::ReqGetEnvelopeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetEnvelopeReward::InitAsDefaultInstance() {
}

ReqGetEnvelopeReward::ReqGetEnvelopeReward(const ReqGetEnvelopeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetEnvelopeReward::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetEnvelopeReward::~ReqGetEnvelopeReward() {
  SharedDtor();
}

void ReqGetEnvelopeReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetEnvelopeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetEnvelopeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetEnvelopeReward_descriptor_;
}

const ReqGetEnvelopeReward& ReqGetEnvelopeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

ReqGetEnvelopeReward* ReqGetEnvelopeReward::default_instance_ = NULL;

ReqGetEnvelopeReward* ReqGetEnvelopeReward::New() const {
  return new ReqGetEnvelopeReward;
}

void ReqGetEnvelopeReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetEnvelopeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetEnvelopeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetEnvelopeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetEnvelopeReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetEnvelopeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetEnvelopeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetEnvelopeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetEnvelopeReward::MergeFrom(const ReqGetEnvelopeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetEnvelopeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetEnvelopeReward::CopyFrom(const ReqGetEnvelopeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetEnvelopeReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGetEnvelopeReward::Swap(ReqGetEnvelopeReward* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetEnvelopeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetEnvelopeReward_descriptor_;
  metadata.reflection = ReqGetEnvelopeReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetGetEnvelopeReward::kRetFieldNumber;
const int RetGetEnvelopeReward::kOpFieldNumber;
#endif  // !_MSC_VER

RetGetEnvelopeReward::RetGetEnvelopeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetGetEnvelopeReward::InitAsDefaultInstance() {
}

RetGetEnvelopeReward::RetGetEnvelopeReward(const RetGetEnvelopeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetGetEnvelopeReward::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  op_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetGetEnvelopeReward::~RetGetEnvelopeReward() {
  SharedDtor();
}

void RetGetEnvelopeReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetGetEnvelopeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetGetEnvelopeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetGetEnvelopeReward_descriptor_;
}

const RetGetEnvelopeReward& RetGetEnvelopeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

RetGetEnvelopeReward* RetGetEnvelopeReward::default_instance_ = NULL;

RetGetEnvelopeReward* RetGetEnvelopeReward::New() const {
  return new RetGetEnvelopeReward;
}

void RetGetEnvelopeReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    op_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetGetEnvelopeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_op;
        break;
      }

      // optional int32 op = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetGetEnvelopeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 op = 2;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->op(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetGetEnvelopeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 op = 2;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->op(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetGetEnvelopeReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 op = 2;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetGetEnvelopeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetGetEnvelopeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetGetEnvelopeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetGetEnvelopeReward::MergeFrom(const RetGetEnvelopeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetGetEnvelopeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGetEnvelopeReward::CopyFrom(const RetGetEnvelopeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGetEnvelopeReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetGetEnvelopeReward::Swap(RetGetEnvelopeReward* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(op_, other->op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetGetEnvelopeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetGetEnvelopeReward_descriptor_;
  metadata.reflection = RetGetEnvelopeReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGMGetEnvelopeReward::kOpFieldNumber;
const int ReqGMGetEnvelopeReward::kCharIDFieldNumber;
const int ReqGMGetEnvelopeReward::kNumFieldNumber;
#endif  // !_MSC_VER

ReqGMGetEnvelopeReward::ReqGMGetEnvelopeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGMGetEnvelopeReward::InitAsDefaultInstance() {
}

ReqGMGetEnvelopeReward::ReqGMGetEnvelopeReward(const ReqGMGetEnvelopeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGMGetEnvelopeReward::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGMGetEnvelopeReward::~ReqGMGetEnvelopeReward() {
  SharedDtor();
}

void ReqGMGetEnvelopeReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGMGetEnvelopeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGMGetEnvelopeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGMGetEnvelopeReward_descriptor_;
}

const ReqGMGetEnvelopeReward& ReqGMGetEnvelopeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

ReqGMGetEnvelopeReward* ReqGMGetEnvelopeReward::default_instance_ = NULL;

ReqGMGetEnvelopeReward* ReqGMGetEnvelopeReward::New() const {
  return new ReqGMGetEnvelopeReward;
}

void ReqGMGetEnvelopeReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGMGetEnvelopeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // required int64 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGMGetEnvelopeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }

  // required int64 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGMGetEnvelopeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }

  // required int64 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGMGetEnvelopeReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // required int64 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGMGetEnvelopeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGMGetEnvelopeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGMGetEnvelopeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGMGetEnvelopeReward::MergeFrom(const ReqGMGetEnvelopeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGMGetEnvelopeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGMGetEnvelopeReward::CopyFrom(const ReqGMGetEnvelopeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGMGetEnvelopeReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqGMGetEnvelopeReward::Swap(ReqGMGetEnvelopeReward* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(charid_, other->charid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGMGetEnvelopeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGMGetEnvelopeReward_descriptor_;
  metadata.reflection = ReqGMGetEnvelopeReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetGMGetEnvelopeReward::kRetFieldNumber;
const int RetGMGetEnvelopeReward::kCharIDFieldNumber;
const int RetGMGetEnvelopeReward::kGetInfoFieldNumber;
#endif  // !_MSC_VER

RetGMGetEnvelopeReward::RetGMGetEnvelopeReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetGMGetEnvelopeReward::InitAsDefaultInstance() {
  getinfo_ = const_cast< ::RedEnvelopeProto::ReqGMGetEnvelopeReward*>(&::RedEnvelopeProto::ReqGMGetEnvelopeReward::default_instance());
}

RetGMGetEnvelopeReward::RetGMGetEnvelopeReward(const RetGMGetEnvelopeReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetGMGetEnvelopeReward::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  getinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetGMGetEnvelopeReward::~RetGMGetEnvelopeReward() {
  SharedDtor();
}

void RetGMGetEnvelopeReward::SharedDtor() {
  if (this != default_instance_) {
    delete getinfo_;
  }
}

void RetGMGetEnvelopeReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetGMGetEnvelopeReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetGMGetEnvelopeReward_descriptor_;
}

const RetGMGetEnvelopeReward& RetGMGetEnvelopeReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

RetGMGetEnvelopeReward* RetGMGetEnvelopeReward::default_instance_ = NULL;

RetGMGetEnvelopeReward* RetGMGetEnvelopeReward::New() const {
  return new RetGMGetEnvelopeReward;
}

void RetGMGetEnvelopeReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    if (has_getinfo()) {
      if (getinfo_ != NULL) getinfo_->::RedEnvelopeProto::ReqGMGetEnvelopeReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetGMGetEnvelopeReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // required int64 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_getInfo;
        break;
      }

      // optional .RedEnvelopeProto.ReqGMGetEnvelopeReward getInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_getInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_getinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetGMGetEnvelopeReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int64 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  // optional .RedEnvelopeProto.ReqGMGetEnvelopeReward getInfo = 3;
  if (has_getinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->getinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetGMGetEnvelopeReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int64 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  // optional .RedEnvelopeProto.ReqGMGetEnvelopeReward getInfo = 3;
  if (has_getinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->getinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetGMGetEnvelopeReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int64 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional .RedEnvelopeProto.ReqGMGetEnvelopeReward getInfo = 3;
    if (has_getinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->getinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetGMGetEnvelopeReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetGMGetEnvelopeReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetGMGetEnvelopeReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetGMGetEnvelopeReward::MergeFrom(const RetGMGetEnvelopeReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_getinfo()) {
      mutable_getinfo()->::RedEnvelopeProto::ReqGMGetEnvelopeReward::MergeFrom(from.getinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetGMGetEnvelopeReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGMGetEnvelopeReward::CopyFrom(const RetGMGetEnvelopeReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGMGetEnvelopeReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_getinfo()) {
    if (!this->getinfo().IsInitialized()) return false;
  }
  return true;
}

void RetGMGetEnvelopeReward::Swap(RetGMGetEnvelopeReward* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(getinfo_, other->getinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetGMGetEnvelopeReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetGMGetEnvelopeReward_descriptor_;
  metadata.reflection = RetGMGetEnvelopeReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToAllGMAddEnvelope::kCountryFieldNumber;
const int WSToAllGMAddEnvelope::kCountFieldNumber;
const int WSToAllGMAddEnvelope::kFlagFieldNumber;
const int WSToAllGMAddEnvelope::kCharIDFieldNumber;
#endif  // !_MSC_VER

WSToAllGMAddEnvelope::WSToAllGMAddEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToAllGMAddEnvelope::InitAsDefaultInstance() {
}

WSToAllGMAddEnvelope::WSToAllGMAddEnvelope(const WSToAllGMAddEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToAllGMAddEnvelope::SharedCtor() {
  _cached_size_ = 0;
  country_ = 0;
  count_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToAllGMAddEnvelope::~WSToAllGMAddEnvelope() {
  SharedDtor();
}

void WSToAllGMAddEnvelope::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToAllGMAddEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToAllGMAddEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToAllGMAddEnvelope_descriptor_;
}

const WSToAllGMAddEnvelope& WSToAllGMAddEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

WSToAllGMAddEnvelope* WSToAllGMAddEnvelope::default_instance_ = NULL;

WSToAllGMAddEnvelope* WSToAllGMAddEnvelope::New() const {
  return new WSToAllGMAddEnvelope;
}

void WSToAllGMAddEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_ = 0;
    count_ = 0;
    flag_ = false;
  }
  charid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToAllGMAddEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_flag;
        break;
      }

      // required bool flag = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charID;
        break;
      }

      // repeated int64 charID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_charid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_charid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToAllGMAddEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->country(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required bool flag = 3;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->flag(), output);
  }

  // repeated int64 charID = 4;
  for (int i = 0; i < this->charid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->charid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToAllGMAddEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 country = 1;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->country(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required bool flag = 3;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->flag(), target);
  }

  // repeated int64 charID = 4;
  for (int i = 0; i < this->charid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->charid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToAllGMAddEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required bool flag = 3;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  // repeated int64 charID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->charid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->charid(i));
    }
    total_size += 1 * this->charid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToAllGMAddEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToAllGMAddEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToAllGMAddEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToAllGMAddEnvelope::MergeFrom(const WSToAllGMAddEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  charid_.MergeFrom(from.charid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToAllGMAddEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToAllGMAddEnvelope::CopyFrom(const WSToAllGMAddEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToAllGMAddEnvelope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void WSToAllGMAddEnvelope::Swap(WSToAllGMAddEnvelope* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    std::swap(count_, other->count_);
    std::swap(flag_, other->flag_);
    charid_.Swap(&other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToAllGMAddEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToAllGMAddEnvelope_descriptor_;
  metadata.reflection = WSToAllGMAddEnvelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToGMPlayerAddEnvelope::kCharIDFieldNumber;
const int WSToGMPlayerAddEnvelope::kCountryFieldNumber;
const int WSToGMPlayerAddEnvelope::kCountFieldNumber;
#endif  // !_MSC_VER

WSToGMPlayerAddEnvelope::WSToGMPlayerAddEnvelope()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToGMPlayerAddEnvelope::InitAsDefaultInstance() {
}

WSToGMPlayerAddEnvelope::WSToGMPlayerAddEnvelope(const WSToGMPlayerAddEnvelope& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToGMPlayerAddEnvelope::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  country_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToGMPlayerAddEnvelope::~WSToGMPlayerAddEnvelope() {
  SharedDtor();
}

void WSToGMPlayerAddEnvelope::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToGMPlayerAddEnvelope::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToGMPlayerAddEnvelope::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToGMPlayerAddEnvelope_descriptor_;
}

const WSToGMPlayerAddEnvelope& WSToGMPlayerAddEnvelope::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

WSToGMPlayerAddEnvelope* WSToGMPlayerAddEnvelope::default_instance_ = NULL;

WSToGMPlayerAddEnvelope* WSToGMPlayerAddEnvelope::New() const {
  return new WSToGMPlayerAddEnvelope;
}

void WSToGMPlayerAddEnvelope::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    country_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToGMPlayerAddEnvelope::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_country;
        break;
      }

      // required int32 country = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // required int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToGMPlayerAddEnvelope::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 country = 2;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->country(), output);
  }

  // required int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToGMPlayerAddEnvelope::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 country = 2;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->country(), target);
  }

  // required int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToGMPlayerAddEnvelope::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 country = 2;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // required int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToGMPlayerAddEnvelope::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToGMPlayerAddEnvelope* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToGMPlayerAddEnvelope*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToGMPlayerAddEnvelope::MergeFrom(const WSToGMPlayerAddEnvelope& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToGMPlayerAddEnvelope::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToGMPlayerAddEnvelope::CopyFrom(const WSToGMPlayerAddEnvelope& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToGMPlayerAddEnvelope::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void WSToGMPlayerAddEnvelope::Swap(WSToGMPlayerAddEnvelope* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(country_, other->country_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToGMPlayerAddEnvelope::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToGMPlayerAddEnvelope_descriptor_;
  metadata.reflection = WSToGMPlayerAddEnvelope_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToEnvSenderByGet::kCharIDFieldNumber;
const int WSToEnvSenderByGet::kCountFieldNumber;
#endif  // !_MSC_VER

WSToEnvSenderByGet::WSToEnvSenderByGet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToEnvSenderByGet::InitAsDefaultInstance() {
}

WSToEnvSenderByGet::WSToEnvSenderByGet(const WSToEnvSenderByGet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToEnvSenderByGet::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToEnvSenderByGet::~WSToEnvSenderByGet() {
  SharedDtor();
}

void WSToEnvSenderByGet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToEnvSenderByGet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToEnvSenderByGet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToEnvSenderByGet_descriptor_;
}

const WSToEnvSenderByGet& WSToEnvSenderByGet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_RedEnvelope_2fRedEnvelope_2eproto();
  return *default_instance_;
}

WSToEnvSenderByGet* WSToEnvSenderByGet::default_instance_ = NULL;

WSToEnvSenderByGet* WSToEnvSenderByGet::New() const {
  return new WSToEnvSenderByGet;
}

void WSToEnvSenderByGet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToEnvSenderByGet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToEnvSenderByGet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToEnvSenderByGet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToEnvSenderByGet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToEnvSenderByGet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToEnvSenderByGet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToEnvSenderByGet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToEnvSenderByGet::MergeFrom(const WSToEnvSenderByGet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToEnvSenderByGet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToEnvSenderByGet::CopyFrom(const WSToEnvSenderByGet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToEnvSenderByGet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WSToEnvSenderByGet::Swap(WSToEnvSenderByGet* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToEnvSenderByGet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToEnvSenderByGet_descriptor_;
  metadata.reflection = WSToEnvSenderByGet_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace RedEnvelopeProto

// @@protoc_insertion_point(global_scope)
