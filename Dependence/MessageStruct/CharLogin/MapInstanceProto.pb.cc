// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/MapInstanceProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharLogin/MapInstanceProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MapInstanceProto {

namespace {

const ::google::protobuf::Descriptor* ReqCreateInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCreateInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetCreateInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetCreateInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqInstanceQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqInstanceQuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetInstanceQuit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetInstanceQuit_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimInstanceUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimInstanceUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimInstanceEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimInstanceEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimInstanceAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimInstanceAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqInstanceSweep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqInstanceSweep_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetInstanceSweep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetInstanceSweep_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqInstanceSweepSpeedUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqInstanceSweepSpeedUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetInstanceSweepSpeedUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetInstanceSweepSpeedUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* OpenInstanceSweep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OpenInstanceSweep_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimInstanceSweepEnd_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimInstanceSweepEnd_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqInstanceReset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqInstanceReset_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetInstanceReset_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetInstanceReset_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqResetAllInstances_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqResetAllInstances_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetResetAllInstances_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetResetAllInstances_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWSCreateInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWSCreateInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDeleteInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDeleteInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGroupInstanceReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGroupInstanceReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetGroupInstanceReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetGroupInstanceReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGroupEnterInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGroupEnterInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetGroupEnterInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetGroupEnterInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMemberFlop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMemberFlop_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMToClientMemberFlop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMToClientMemberFlop_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetMemberFlop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetMemberFlop_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetInstanceAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetInstanceAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqEnterInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqEnterInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToGTGetInstanceTeamID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGTGetInstanceTeamID_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetGetInstanceTeamID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetGetInstanceTeamID_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClientLeaveInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClientLeaveInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToGTAwardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGTAwardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqCreateInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqCreateInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMReqWSCreateInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMReqWSCreateInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckToGMCreateInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckToGMCreateInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqWorldArenaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqWorldArenaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqWarReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqWarReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqToWorldGetArenaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqToWorldGetArenaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OtherPlayerArenaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OtherPlayerArenaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqToWordGetWarReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqToWordGetWarReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqToGameGetArenaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqToGameGetArenaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaHistoryReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaHistoryReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqArenaHistoryReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqArenaHistoryReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RspArenaHistoryReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RspArenaHistoryReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarReport_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarReport_reflection_ = NULL;
const ::google::protobuf::Descriptor* CancelAreanCDTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CancelAreanCDTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnCancelAreanCDTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnCancelAreanCDTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddChallengeTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddChallengeTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnAddChallengeTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnAddChallengeTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqAreanReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqAreanReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMToClientCompeteOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMToClientCompeteOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysRankingReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysRankingReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientRegRankingName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientRegRankingName_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientRankingName_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientRankingName_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqGroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqGroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMToClentGroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMToClentGroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqAllTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqAllTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClentAllTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClentAllTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AllTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AllTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqJoinTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqJoinTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClentReqJoinTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClentReqJoinTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeammemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeammemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqQuickJoinTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqQuickJoinTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqCreateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqCreateTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClentReqCreateTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClentReqCreateTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqTeamReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqTeamReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientReqTeamReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientReqTeamReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientSimReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientSimReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientSimFindTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientSimFindTeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientFindTeamMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientFindTeamMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqKickMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqKickMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientKickMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientKickMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientSimKick_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientSimKick_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqEnterTeamMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqEnterTeamMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientEnterTeamMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientEnterTeamMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientSimInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientSimInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMToClientSimHarmRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMToClientSimHarmRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* HarmRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HarmRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientSimOnline_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientSimOnline_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqExitTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqExitTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientExitTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientExitTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientSimExitTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientSimExitTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMToWSDelTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMToWSDelTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMToClientLottery_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMToClientLottery_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimSweepInstanceAward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimSweepInstanceAward_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysInstanceRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysInstanceRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckInstanceRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckInstanceRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetInstanceRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetInstanceRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetInstanceRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetInstanceRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnInstanceRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnInstanceRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceGroupList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceGroupList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCostByGroupInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCostByGroupInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetCostByGroupInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetCostByGroupInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqArenaRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqArenaRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetArenaRefresh_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetArenaRefresh_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWSArenaChallPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWSArenaChallPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetWSArenaChallPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetWSArenaChallPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqWSArenaChallRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqWSArenaChallRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMToClientSweepAllInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMToClientSweepAllInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* EliteInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EliteInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceEliteList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceEliteList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CauchemarInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CauchemarInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceCauchemarList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceCauchemarList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqInviteMemberList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqInviteMemberList_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetInviteMemberList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetInviteMemberList_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteMemberList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteMemberList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqInviteMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqInviteMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetInviteMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetInviteMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetInvitedMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetInvitedMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckChallengeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckChallengeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqLayerRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLayerRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckLayerRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckLayerRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckSweep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckSweep_reflection_ = NULL;
const ::google::protobuf::Descriptor* ACkEndSweep_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ACkEndSweep_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrizeItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrizeItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* GatherBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GatherBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGatherBox_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGatherBox_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvancedInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvancedInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceAdvancedList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceAdvancedList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqTeamChanceReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqTeamChanceReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientReqTeamChanceReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientReqTeamChanceReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientSimChanceReady_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientSimChanceReady_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonInstanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonInstanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CommonInstanceInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CommonInstanceInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* VipInstanceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  VipInstanceList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpInstanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpInstanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ExpInstanceInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ExpInstanceInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyInstanceInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyInstanceInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyInstanceInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyInstanceInfoList_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharLogin_2fMapInstanceProto_2eproto() {
  protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharLogin/MapInstanceProto.proto");
  GOOGLE_CHECK(file != NULL);
  ReqCreateInstance_descriptor_ = file->message_type(0);
  static const int ReqCreateInstance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateInstance, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateInstance, instancetype_),
  };
  ReqCreateInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCreateInstance_descriptor_,
      ReqCreateInstance::default_instance_,
      ReqCreateInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCreateInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCreateInstance));
  RetCreateInstance_descriptor_ = file->message_type(1);
  static const int RetCreateInstance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCreateInstance, dwerrorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCreateInstance, newinstanceid_),
  };
  RetCreateInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetCreateInstance_descriptor_,
      RetCreateInstance::default_instance_,
      RetCreateInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCreateInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCreateInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetCreateInstance));
  ReqInstanceQuit_descriptor_ = file->message_type(2);
  static const int ReqInstanceQuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceQuit, instanceid_),
  };
  ReqInstanceQuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqInstanceQuit_descriptor_,
      ReqInstanceQuit::default_instance_,
      ReqInstanceQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceQuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceQuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqInstanceQuit));
  RetInstanceQuit_descriptor_ = file->message_type(3);
  static const int RetInstanceQuit_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceQuit, mapid_),
  };
  RetInstanceQuit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetInstanceQuit_descriptor_,
      RetInstanceQuit::default_instance_,
      RetInstanceQuit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceQuit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceQuit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetInstanceQuit));
  SimInstanceUpdate_descriptor_ = file->message_type(4);
  static const int SimInstanceUpdate_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceUpdate, remainmonsterid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceUpdate, remainmonsternum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceUpdate, remaintime_),
  };
  SimInstanceUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimInstanceUpdate_descriptor_,
      SimInstanceUpdate::default_instance_,
      SimInstanceUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimInstanceUpdate));
  SimInstanceEnd_descriptor_ = file->message_type(5);
  static const int SimInstanceEnd_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceEnd, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceEnd, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceEnd, awards_),
  };
  SimInstanceEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimInstanceEnd_descriptor_,
      SimInstanceEnd::default_instance_,
      SimInstanceEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimInstanceEnd));
  SimInstanceAward_descriptor_ = file->message_type(6);
  static const int SimInstanceAward_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceAward, rewardstar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceAward, elapsedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceAward, barrierpoints_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceAward, personalpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceAward, grouppower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceAward, awardmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceAward, awardexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceAward, awardinfuriate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceAward, items_),
  };
  SimInstanceAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimInstanceAward_descriptor_,
      SimInstanceAward::default_instance_,
      SimInstanceAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimInstanceAward));
  ReqInstanceSweep_descriptor_ = file->message_type(7);
  static const int ReqInstanceSweep_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceSweep, instanceid_),
  };
  ReqInstanceSweep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqInstanceSweep_descriptor_,
      ReqInstanceSweep::default_instance_,
      ReqInstanceSweep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceSweep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceSweep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqInstanceSweep));
  RetInstanceSweep_descriptor_ = file->message_type(8);
  static const int RetInstanceSweep_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceSweep, dwerrorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceSweep, dwremaintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceSweep, instanceid_),
  };
  RetInstanceSweep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetInstanceSweep_descriptor_,
      RetInstanceSweep::default_instance_,
      RetInstanceSweep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceSweep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceSweep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetInstanceSweep));
  ReqInstanceSweepSpeedUp_descriptor_ = file->message_type(9);
  static const int ReqInstanceSweepSpeedUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceSweepSpeedUp, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceSweepSpeedUp, moneytype_),
  };
  ReqInstanceSweepSpeedUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqInstanceSweepSpeedUp_descriptor_,
      ReqInstanceSweepSpeedUp::default_instance_,
      ReqInstanceSweepSpeedUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceSweepSpeedUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceSweepSpeedUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqInstanceSweepSpeedUp));
  RetInstanceSweepSpeedUp_descriptor_ = file->message_type(10);
  static const int RetInstanceSweepSpeedUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceSweepSpeedUp, dwerrorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceSweepSpeedUp, instanceid_),
  };
  RetInstanceSweepSpeedUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetInstanceSweepSpeedUp_descriptor_,
      RetInstanceSweepSpeedUp::default_instance_,
      RetInstanceSweepSpeedUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceSweepSpeedUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceSweepSpeedUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetInstanceSweepSpeedUp));
  OpenInstanceSweep_descriptor_ = file->message_type(11);
  static const int OpenInstanceSweep_offsets_[1] = {
  };
  OpenInstanceSweep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OpenInstanceSweep_descriptor_,
      OpenInstanceSweep::default_instance_,
      OpenInstanceSweep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenInstanceSweep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OpenInstanceSweep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OpenInstanceSweep));
  SimInstanceSweepEnd_descriptor_ = file->message_type(12);
  static const int SimInstanceSweepEnd_offsets_[1] = {
  };
  SimInstanceSweepEnd_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimInstanceSweepEnd_descriptor_,
      SimInstanceSweepEnd::default_instance_,
      SimInstanceSweepEnd_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceSweepEnd, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimInstanceSweepEnd, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimInstanceSweepEnd));
  ReqInstanceReset_descriptor_ = file->message_type(13);
  static const int ReqInstanceReset_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceReset, instanceid_),
  };
  ReqInstanceReset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqInstanceReset_descriptor_,
      ReqInstanceReset::default_instance_,
      ReqInstanceReset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceReset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceReset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqInstanceReset));
  RetInstanceReset_descriptor_ = file->message_type(14);
  static const int RetInstanceReset_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceReset, dwerrorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceReset, instanceid_),
  };
  RetInstanceReset_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetInstanceReset_descriptor_,
      RetInstanceReset::default_instance_,
      RetInstanceReset_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceReset, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceReset, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetInstanceReset));
  ReqResetAllInstances_descriptor_ = file->message_type(15);
  static const int ReqResetAllInstances_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqResetAllInstances, instanceidlist_),
  };
  ReqResetAllInstances_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqResetAllInstances_descriptor_,
      ReqResetAllInstances::default_instance_,
      ReqResetAllInstances_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqResetAllInstances, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqResetAllInstances, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqResetAllInstances));
  RetResetAllInstances_descriptor_ = file->message_type(16);
  static const int RetResetAllInstances_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetResetAllInstances, dwerrorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetResetAllInstances, instanceidlist_),
  };
  RetResetAllInstances_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetResetAllInstances_descriptor_,
      RetResetAllInstances::default_instance_,
      RetResetAllInstances_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetResetAllInstances, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetResetAllInstances, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetResetAllInstances));
  ReqWSCreateInstance_descriptor_ = file->message_type(17);
  static const int ReqWSCreateInstance_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWSCreateInstance, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWSCreateInstance, instancetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWSCreateInstance, localid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWSCreateInstance, romateid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWSCreateInstance, charid_),
  };
  ReqWSCreateInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqWSCreateInstance_descriptor_,
      ReqWSCreateInstance::default_instance_,
      ReqWSCreateInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWSCreateInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWSCreateInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqWSCreateInstance));
  ReqDeleteInstance_descriptor_ = file->message_type(18);
  static const int ReqDeleteInstance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeleteInstance, instanceid_),
  };
  ReqDeleteInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDeleteInstance_descriptor_,
      ReqDeleteInstance::default_instance_,
      ReqDeleteInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeleteInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDeleteInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDeleteInstance));
  ReqGroupInstanceReady_descriptor_ = file->message_type(19);
  static const int ReqGroupInstanceReady_offsets_[1] = {
  };
  ReqGroupInstanceReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGroupInstanceReady_descriptor_,
      ReqGroupInstanceReady::default_instance_,
      ReqGroupInstanceReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGroupInstanceReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGroupInstanceReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGroupInstanceReady));
  RetGroupInstanceReady_descriptor_ = file->message_type(20);
  static const int RetGroupInstanceReady_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGroupInstanceReady, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGroupInstanceReady, memberid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGroupInstanceReady, isready_),
  };
  RetGroupInstanceReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetGroupInstanceReady_descriptor_,
      RetGroupInstanceReady::default_instance_,
      RetGroupInstanceReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGroupInstanceReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGroupInstanceReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetGroupInstanceReady));
  ReqGroupEnterInstance_descriptor_ = file->message_type(21);
  static const int ReqGroupEnterInstance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGroupEnterInstance, instanceid_),
  };
  ReqGroupEnterInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGroupEnterInstance_descriptor_,
      ReqGroupEnterInstance::default_instance_,
      ReqGroupEnterInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGroupEnterInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGroupEnterInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGroupEnterInstance));
  RetGroupEnterInstance_descriptor_ = file->message_type(22);
  static const int RetGroupEnterInstance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGroupEnterInstance, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGroupEnterInstance, instanceid_),
  };
  RetGroupEnterInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetGroupEnterInstance_descriptor_,
      RetGroupEnterInstance::default_instance_,
      RetGroupEnterInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGroupEnterInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGroupEnterInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetGroupEnterInstance));
  ReqMemberFlop_descriptor_ = file->message_type(23);
  static const int ReqMemberFlop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMemberFlop, flopid_),
  };
  ReqMemberFlop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMemberFlop_descriptor_,
      ReqMemberFlop::default_instance_,
      ReqMemberFlop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMemberFlop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMemberFlop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMemberFlop));
  GMToClientMemberFlop_descriptor_ = file->message_type(24);
  static const int GMToClientMemberFlop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientMemberFlop, ret_),
  };
  GMToClientMemberFlop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMToClientMemberFlop_descriptor_,
      GMToClientMemberFlop::default_instance_,
      GMToClientMemberFlop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientMemberFlop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientMemberFlop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMToClientMemberFlop));
  RetMemberFlop_descriptor_ = file->message_type(25);
  static const int RetMemberFlop_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMemberFlop, flopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMemberFlop, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMemberFlop, flopname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMemberFlop, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMemberFlop, bindtype_),
  };
  RetMemberFlop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetMemberFlop_descriptor_,
      RetMemberFlop::default_instance_,
      RetMemberFlop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMemberFlop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMemberFlop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetMemberFlop));
  ReqGetInstanceAward_descriptor_ = file->message_type(26);
  static const int ReqGetInstanceAward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetInstanceAward, instanceid_),
  };
  ReqGetInstanceAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetInstanceAward_descriptor_,
      ReqGetInstanceAward::default_instance_,
      ReqGetInstanceAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetInstanceAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetInstanceAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetInstanceAward));
  ReqEnterInstance_descriptor_ = file->message_type(27);
  static const int ReqEnterInstance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterInstance, instanceid_),
  };
  ReqEnterInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqEnterInstance_descriptor_,
      ReqEnterInstance::default_instance_,
      ReqEnterInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqEnterInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqEnterInstance));
  ToGTGetInstanceTeamID_descriptor_ = file->message_type(28);
  static const int ToGTGetInstanceTeamID_offsets_[1] = {
  };
  ToGTGetInstanceTeamID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGTGetInstanceTeamID_descriptor_,
      ToGTGetInstanceTeamID::default_instance_,
      ToGTGetInstanceTeamID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTGetInstanceTeamID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTGetInstanceTeamID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGTGetInstanceTeamID));
  RetGetInstanceTeamID_descriptor_ = file->message_type(29);
  static const int RetGetInstanceTeamID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetInstanceTeamID, teaminfo_),
  };
  RetGetInstanceTeamID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetGetInstanceTeamID_descriptor_,
      RetGetInstanceTeamID::default_instance_,
      RetGetInstanceTeamID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetInstanceTeamID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetInstanceTeamID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetGetInstanceTeamID));
  InstanceTeamInfo_descriptor_ = file->message_type(30);
  static const int InstanceTeamInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceTeamInfo, dwteamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceTeamInfo, dwinstanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceTeamInfo, dwteampower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceTeamInfo, dwteammembers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceTeamInfo, dwleadername_),
  };
  InstanceTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceTeamInfo_descriptor_,
      InstanceTeamInfo::default_instance_,
      InstanceTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceTeamInfo));
  ToClientLeaveInstance_descriptor_ = file->message_type(31);
  static const int ToClientLeaveInstance_offsets_[1] = {
  };
  ToClientLeaveInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClientLeaveInstance_descriptor_,
      ToClientLeaveInstance::default_instance_,
      ToClientLeaveInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientLeaveInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientLeaveInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClientLeaveInstance));
  ToGTAwardInfo_descriptor_ = file->message_type(32);
  static const int ToGTAwardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTAwardInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTAwardInfo, awardinfo_),
  };
  ToGTAwardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGTAwardInfo_descriptor_,
      ToGTAwardInfo::default_instance_,
      ToGTAwardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTAwardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTAwardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGTAwardInfo));
  ClientReqCreateInstance_descriptor_ = file->message_type(33);
  static const int ClientReqCreateInstance_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCreateInstance, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCreateInstance, instancetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCreateInstance, paramf_),
  };
  ClientReqCreateInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqCreateInstance_descriptor_,
      ClientReqCreateInstance::default_instance_,
      ClientReqCreateInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCreateInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCreateInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqCreateInstance));
  GMReqWSCreateInstance_descriptor_ = file->message_type(34);
  static const int GMReqWSCreateInstance_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMReqWSCreateInstance, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMReqWSCreateInstance, instancetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMReqWSCreateInstance, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMReqWSCreateInstance, paramf_),
  };
  GMReqWSCreateInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMReqWSCreateInstance_descriptor_,
      GMReqWSCreateInstance::default_instance_,
      GMReqWSCreateInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMReqWSCreateInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMReqWSCreateInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMReqWSCreateInstance));
  AckToGMCreateInstance_descriptor_ = file->message_type(35);
  static const int AckToGMCreateInstance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckToGMCreateInstance, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckToGMCreateInstance, instanceid_),
  };
  AckToGMCreateInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckToGMCreateInstance_descriptor_,
      AckToGMCreateInstance::default_instance_,
      AckToGMCreateInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckToGMCreateInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckToGMCreateInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckToGMCreateInstance));
  ClientReqWorldArenaInfo_descriptor_ = file->message_type(36);
  static const int ClientReqWorldArenaInfo_offsets_[1] = {
  };
  ClientReqWorldArenaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqWorldArenaInfo_descriptor_,
      ClientReqWorldArenaInfo::default_instance_,
      ClientReqWorldArenaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqWorldArenaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqWorldArenaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqWorldArenaInfo));
  ClientReqWarReport_descriptor_ = file->message_type(37);
  static const int ClientReqWarReport_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqWarReport, page_),
  };
  ClientReqWarReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqWarReport_descriptor_,
      ClientReqWarReport::default_instance_,
      ClientReqWarReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqWarReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqWarReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqWarReport));
  ReqToWorldGetArenaInfo_descriptor_ = file->message_type(38);
  static const int ReqToWorldGetArenaInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToWorldGetArenaInfo, otherinfo_),
  };
  ReqToWorldGetArenaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqToWorldGetArenaInfo_descriptor_,
      ReqToWorldGetArenaInfo::default_instance_,
      ReqToWorldGetArenaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToWorldGetArenaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToWorldGetArenaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqToWorldGetArenaInfo));
  OtherPlayerArenaInfo_descriptor_ = file->message_type(39);
  static const int OtherPlayerArenaInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerArenaInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerArenaInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerArenaInfo, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerArenaInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerArenaInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerArenaInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerArenaInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerArenaInfo, lv_),
  };
  OtherPlayerArenaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OtherPlayerArenaInfo_descriptor_,
      OtherPlayerArenaInfo::default_instance_,
      OtherPlayerArenaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerArenaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OtherPlayerArenaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OtherPlayerArenaInfo));
  ReqToWordGetWarReport_descriptor_ = file->message_type(40);
  static const int ReqToWordGetWarReport_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToWordGetWarReport, isend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToWordGetWarReport, report_),
  };
  ReqToWordGetWarReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqToWordGetWarReport_descriptor_,
      ReqToWordGetWarReport::default_instance_,
      ReqToWordGetWarReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToWordGetWarReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToWordGetWarReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqToWordGetWarReport));
  ReqToGameGetArenaInfo_descriptor_ = file->message_type(41);
  static const int ReqToGameGetArenaInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToGameGetArenaInfo, challengetimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToGameGetArenaInfo, alreadyrefresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToGameGetArenaInfo, alreadyaddchall_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToGameGetArenaInfo, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToGameGetArenaInfo, historyrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToGameGetArenaInfo, historyreward_),
  };
  ReqToGameGetArenaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqToGameGetArenaInfo_descriptor_,
      ReqToGameGetArenaInfo::default_instance_,
      ReqToGameGetArenaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToGameGetArenaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqToGameGetArenaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqToGameGetArenaInfo));
  ArenaHistoryReward_descriptor_ = file->message_type(42);
  static const int ArenaHistoryReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaHistoryReward, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaHistoryReward, havareward_),
  };
  ArenaHistoryReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaHistoryReward_descriptor_,
      ArenaHistoryReward::default_instance_,
      ArenaHistoryReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaHistoryReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaHistoryReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaHistoryReward));
  ReqArenaHistoryReward_descriptor_ = file->message_type(43);
  static const int ReqArenaHistoryReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqArenaHistoryReward, id_),
  };
  ReqArenaHistoryReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqArenaHistoryReward_descriptor_,
      ReqArenaHistoryReward::default_instance_,
      ReqArenaHistoryReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqArenaHistoryReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqArenaHistoryReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqArenaHistoryReward));
  RspArenaHistoryReward_descriptor_ = file->message_type(44);
  static const int RspArenaHistoryReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspArenaHistoryReward, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspArenaHistoryReward, id_),
  };
  RspArenaHistoryReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RspArenaHistoryReward_descriptor_,
      RspArenaHistoryReward::default_instance_,
      RspArenaHistoryReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspArenaHistoryReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RspArenaHistoryReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RspArenaHistoryReward));
  WarReport_descriptor_ = file->message_type(45);
  static const int WarReport_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarReport, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarReport, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarReport, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarReport, ischallenger_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarReport, times_),
  };
  WarReport_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarReport_descriptor_,
      WarReport::default_instance_,
      WarReport_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarReport, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarReport, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarReport));
  CancelAreanCDTime_descriptor_ = file->message_type(46);
  static const int CancelAreanCDTime_offsets_[1] = {
  };
  CancelAreanCDTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CancelAreanCDTime_descriptor_,
      CancelAreanCDTime::default_instance_,
      CancelAreanCDTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelAreanCDTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CancelAreanCDTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CancelAreanCDTime));
  ReturnCancelAreanCDTime_descriptor_ = file->message_type(47);
  static const int ReturnCancelAreanCDTime_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnCancelAreanCDTime, ret_),
  };
  ReturnCancelAreanCDTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnCancelAreanCDTime_descriptor_,
      ReturnCancelAreanCDTime::default_instance_,
      ReturnCancelAreanCDTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnCancelAreanCDTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnCancelAreanCDTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnCancelAreanCDTime));
  AddChallengeTimes_descriptor_ = file->message_type(48);
  static const int AddChallengeTimes_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChallengeTimes, times_),
  };
  AddChallengeTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddChallengeTimes_descriptor_,
      AddChallengeTimes::default_instance_,
      AddChallengeTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChallengeTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddChallengeTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddChallengeTimes));
  ReturnAddChallengeTimes_descriptor_ = file->message_type(49);
  static const int ReturnAddChallengeTimes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnAddChallengeTimes, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnAddChallengeTimes, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnAddChallengeTimes, alreadyaddchall_),
  };
  ReturnAddChallengeTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnAddChallengeTimes_descriptor_,
      ReturnAddChallengeTimes::default_instance_,
      ReturnAddChallengeTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnAddChallengeTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnAddChallengeTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnAddChallengeTimes));
  ClientReqAreanReward_descriptor_ = file->message_type(50);
  static const int ClientReqAreanReward_offsets_[1] = {
  };
  ClientReqAreanReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqAreanReward_descriptor_,
      ClientReqAreanReward::default_instance_,
      ClientReqAreanReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqAreanReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqAreanReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqAreanReward));
  GMToClientCompeteOver_descriptor_ = file->message_type(51);
  static const int GMToClientCompeteOver_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCompeteOver, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCompeteOver, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCompeteOver, credit_),
  };
  GMToClientCompeteOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMToClientCompeteOver_descriptor_,
      GMToClientCompeteOver::default_instance_,
      GMToClientCompeteOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCompeteOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCompeteOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMToClientCompeteOver));
  SysRankingReward_descriptor_ = file->message_type(52);
  static const int SysRankingReward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysRankingReward, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysRankingReward, retf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysRankingReward, rets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysRankingReward, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysRankingReward, historyrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysRankingReward, historyreward_),
  };
  SysRankingReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysRankingReward_descriptor_,
      SysRankingReward::default_instance_,
      SysRankingReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysRankingReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysRankingReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysRankingReward));
  ClientRegRankingName_descriptor_ = file->message_type(53);
  static const int ClientRegRankingName_offsets_[1] = {
  };
  ClientRegRankingName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientRegRankingName_descriptor_,
      ClientRegRankingName::default_instance_,
      ClientRegRankingName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRegRankingName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientRegRankingName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientRegRankingName));
  WSToClientRankingName_descriptor_ = file->message_type(54);
  static const int WSToClientRankingName_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientRankingName, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientRankingName, viplv_),
  };
  WSToClientRankingName_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientRankingName_descriptor_,
      WSToClientRankingName::default_instance_,
      WSToClientRankingName_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientRankingName, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientRankingName, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientRankingName));
  ClientReqGroupInfo_descriptor_ = file->message_type(55);
  static const int ClientReqGroupInfo_offsets_[1] = {
  };
  ClientReqGroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqGroupInfo_descriptor_,
      ClientReqGroupInfo::default_instance_,
      ClientReqGroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqGroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqGroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqGroupInfo));
  GMToClentGroupInfo_descriptor_ = file->message_type(56);
  static const int GMToClentGroupInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClentGroupInfo, info_),
  };
  GMToClentGroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMToClentGroupInfo_descriptor_,
      GMToClentGroupInfo::default_instance_,
      GMToClentGroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClentGroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClentGroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMToClentGroupInfo));
  GroupInfo_descriptor_ = file->message_type(57);
  static const int GroupInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, num_),
  };
  GroupInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupInfo_descriptor_,
      GroupInfo::default_instance_,
      GroupInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupInfo));
  ClientReqAllTeamInfo_descriptor_ = file->message_type(58);
  static const int ClientReqAllTeamInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqAllTeamInfo, mapid_),
  };
  ClientReqAllTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqAllTeamInfo_descriptor_,
      ClientReqAllTeamInfo::default_instance_,
      ClientReqAllTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqAllTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqAllTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqAllTeamInfo));
  WSToClentAllTeamInfo_descriptor_ = file->message_type(59);
  static const int WSToClentAllTeamInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentAllTeamInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentAllTeamInfo, page_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentAllTeamInfo, allteaminfo_),
  };
  WSToClentAllTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClentAllTeamInfo_descriptor_,
      WSToClentAllTeamInfo::default_instance_,
      WSToClentAllTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentAllTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentAllTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClentAllTeamInfo));
  AllTeamInfo_descriptor_ = file->message_type(60);
  static const int AllTeamInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTeamInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTeamInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTeamInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTeamInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTeamInfo, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTeamInfo, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTeamInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTeamInfo, job_),
  };
  AllTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AllTeamInfo_descriptor_,
      AllTeamInfo::default_instance_,
      AllTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AllTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AllTeamInfo));
  ClientReqJoinTeam_descriptor_ = file->message_type(61);
  static const int ClientReqJoinTeam_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqJoinTeam, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqJoinTeam, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqJoinTeam, mapid_),
  };
  ClientReqJoinTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqJoinTeam_descriptor_,
      ClientReqJoinTeam::default_instance_,
      ClientReqJoinTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqJoinTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqJoinTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqJoinTeam));
  WSToClentReqJoinTeam_descriptor_ = file->message_type(62);
  static const int WSToClentReqJoinTeam_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqJoinTeam, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqJoinTeam, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqJoinTeam, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqJoinTeam, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqJoinTeam, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqJoinTeam, memberifno_),
  };
  WSToClentReqJoinTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClentReqJoinTeam_descriptor_,
      WSToClentReqJoinTeam::default_instance_,
      WSToClentReqJoinTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqJoinTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqJoinTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClentReqJoinTeam));
  TeammemberInfo_descriptor_ = file->message_type(63);
  static const int TeammemberInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, captain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, ready_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, vip_),
  };
  TeammemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeammemberInfo_descriptor_,
      TeammemberInfo::default_instance_,
      TeammemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeammemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeammemberInfo));
  ClientReqQuickJoinTeam_descriptor_ = file->message_type(64);
  static const int ClientReqQuickJoinTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqQuickJoinTeam, mapid_),
  };
  ClientReqQuickJoinTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqQuickJoinTeam_descriptor_,
      ClientReqQuickJoinTeam::default_instance_,
      ClientReqQuickJoinTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqQuickJoinTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqQuickJoinTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqQuickJoinTeam));
  ClientReqCreateTeam_descriptor_ = file->message_type(65);
  static const int ClientReqCreateTeam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCreateTeam, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCreateTeam, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCreateTeam, password_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCreateTeam, flag_),
  };
  ClientReqCreateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqCreateTeam_descriptor_,
      ClientReqCreateTeam::default_instance_,
      ClientReqCreateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCreateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCreateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqCreateTeam));
  WSToClentReqCreateTeam_descriptor_ = file->message_type(66);
  static const int WSToClentReqCreateTeam_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqCreateTeam, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqCreateTeam, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqCreateTeam, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqCreateTeam, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqCreateTeam, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqCreateTeam, fight_),
  };
  WSToClentReqCreateTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClentReqCreateTeam_descriptor_,
      WSToClentReqCreateTeam::default_instance_,
      WSToClentReqCreateTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqCreateTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClentReqCreateTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClentReqCreateTeam));
  ClientReqTeamReady_descriptor_ = file->message_type(67);
  static const int ClientReqTeamReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqTeamReady, mapid_),
  };
  ClientReqTeamReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqTeamReady_descriptor_,
      ClientReqTeamReady::default_instance_,
      ClientReqTeamReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqTeamReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqTeamReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqTeamReady));
  WSToClientReqTeamReady_descriptor_ = file->message_type(68);
  static const int WSToClientReqTeamReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientReqTeamReady, ret_),
  };
  WSToClientReqTeamReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientReqTeamReady_descriptor_,
      WSToClientReqTeamReady::default_instance_,
      WSToClientReqTeamReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientReqTeamReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientReqTeamReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientReqTeamReady));
  WSToClientSimReady_descriptor_ = file->message_type(69);
  static const int WSToClientSimReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimReady, charid_),
  };
  WSToClientSimReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientSimReady_descriptor_,
      WSToClientSimReady::default_instance_,
      WSToClientSimReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientSimReady));
  ClientSimFindTeamMember_descriptor_ = file->message_type(70);
  static const int ClientSimFindTeamMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSimFindTeamMember, mapid_),
  };
  ClientSimFindTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientSimFindTeamMember_descriptor_,
      ClientSimFindTeamMember::default_instance_,
      ClientSimFindTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSimFindTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSimFindTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientSimFindTeamMember));
  WSToClientFindTeamMember_descriptor_ = file->message_type(71);
  static const int WSToClientFindTeamMember_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientFindTeamMember, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientFindTeamMember, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientFindTeamMember, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientFindTeamMember, name_),
  };
  WSToClientFindTeamMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientFindTeamMember_descriptor_,
      WSToClientFindTeamMember::default_instance_,
      WSToClientFindTeamMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientFindTeamMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientFindTeamMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientFindTeamMember));
  ClientReqKickMember_descriptor_ = file->message_type(72);
  static const int ClientReqKickMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqKickMember, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqKickMember, charid_),
  };
  ClientReqKickMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqKickMember_descriptor_,
      ClientReqKickMember::default_instance_,
      ClientReqKickMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqKickMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqKickMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqKickMember));
  WSToClientKickMember_descriptor_ = file->message_type(73);
  static const int WSToClientKickMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientKickMember, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientKickMember, charid_),
  };
  WSToClientKickMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientKickMember_descriptor_,
      WSToClientKickMember::default_instance_,
      WSToClientKickMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientKickMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientKickMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientKickMember));
  WSToClientSimKick_descriptor_ = file->message_type(74);
  static const int WSToClientSimKick_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimKick, charid_),
  };
  WSToClientSimKick_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientSimKick_descriptor_,
      WSToClientSimKick::default_instance_,
      WSToClientSimKick_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimKick, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimKick, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientSimKick));
  ClientReqEnterTeamMap_descriptor_ = file->message_type(75);
  static const int ClientReqEnterTeamMap_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqEnterTeamMap, mapid_),
  };
  ClientReqEnterTeamMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqEnterTeamMap_descriptor_,
      ClientReqEnterTeamMap::default_instance_,
      ClientReqEnterTeamMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqEnterTeamMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqEnterTeamMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqEnterTeamMap));
  WSToClientEnterTeamMap_descriptor_ = file->message_type(76);
  static const int WSToClientEnterTeamMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientEnterTeamMap, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientEnterTeamMap, instance_),
  };
  WSToClientEnterTeamMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientEnterTeamMap_descriptor_,
      WSToClientEnterTeamMap::default_instance_,
      WSToClientEnterTeamMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientEnterTeamMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientEnterTeamMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientEnterTeamMap));
  WSToClientSimInstance_descriptor_ = file->message_type(77);
  static const int WSToClientSimInstance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimInstance, instance_),
  };
  WSToClientSimInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientSimInstance_descriptor_,
      WSToClientSimInstance::default_instance_,
      WSToClientSimInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientSimInstance));
  GMToClientSimHarmRank_descriptor_ = file->message_type(78);
  static const int GMToClientSimHarmRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientSimHarmRank, harminfo_),
  };
  GMToClientSimHarmRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMToClientSimHarmRank_descriptor_,
      GMToClientSimHarmRank::default_instance_,
      GMToClientSimHarmRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientSimHarmRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientSimHarmRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMToClientSimHarmRank));
  HarmRank_descriptor_ = file->message_type(79);
  static const int HarmRank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarmRank, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarmRank, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarmRank, harm_),
  };
  HarmRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HarmRank_descriptor_,
      HarmRank::default_instance_,
      HarmRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarmRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HarmRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HarmRank));
  WSToClientSimOnline_descriptor_ = file->message_type(80);
  static const int WSToClientSimOnline_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimOnline, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimOnline, online_),
  };
  WSToClientSimOnline_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientSimOnline_descriptor_,
      WSToClientSimOnline::default_instance_,
      WSToClientSimOnline_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimOnline, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimOnline, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientSimOnline));
  ClientReqExitTeam_descriptor_ = file->message_type(81);
  static const int ClientReqExitTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqExitTeam, mapid_),
  };
  ClientReqExitTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqExitTeam_descriptor_,
      ClientReqExitTeam::default_instance_,
      ClientReqExitTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqExitTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqExitTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqExitTeam));
  WSToClientExitTeam_descriptor_ = file->message_type(82);
  static const int WSToClientExitTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientExitTeam, ret_),
  };
  WSToClientExitTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientExitTeam_descriptor_,
      WSToClientExitTeam::default_instance_,
      WSToClientExitTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientExitTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientExitTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientExitTeam));
  WSToClientSimExitTeam_descriptor_ = file->message_type(83);
  static const int WSToClientSimExitTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimExitTeam, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimExitTeam, captain_),
  };
  WSToClientSimExitTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientSimExitTeam_descriptor_,
      WSToClientSimExitTeam::default_instance_,
      WSToClientSimExitTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimExitTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimExitTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientSimExitTeam));
  GMToWSDelTeam_descriptor_ = file->message_type(84);
  static const int GMToWSDelTeam_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToWSDelTeam, teamid_),
  };
  GMToWSDelTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMToWSDelTeam_descriptor_,
      GMToWSDelTeam::default_instance_,
      GMToWSDelTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToWSDelTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToWSDelTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMToWSDelTeam));
  GMToClientLottery_descriptor_ = file->message_type(85);
  static const int GMToClientLottery_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientLottery, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientLottery, flopid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientLottery, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientLottery, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientLottery, bindtype_),
  };
  GMToClientLottery_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMToClientLottery_descriptor_,
      GMToClientLottery::default_instance_,
      GMToClientLottery_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientLottery, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientLottery, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMToClientLottery));
  SimSweepInstanceAward_descriptor_ = file->message_type(86);
  static const int SimSweepInstanceAward_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSweepInstanceAward, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSweepInstanceAward, elapsedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSweepInstanceAward, awardmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSweepInstanceAward, awardexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSweepInstanceAward, awardinfuriate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSweepInstanceAward, items_),
  };
  SimSweepInstanceAward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimSweepInstanceAward_descriptor_,
      SimSweepInstanceAward::default_instance_,
      SimSweepInstanceAward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSweepInstanceAward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimSweepInstanceAward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimSweepInstanceAward));
  SysInstanceRanking_descriptor_ = file->message_type(87);
  static const int SysInstanceRanking_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysInstanceRanking, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysInstanceRanking, elapsedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysInstanceRanking, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysInstanceRanking, charid_),
  };
  SysInstanceRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysInstanceRanking_descriptor_,
      SysInstanceRanking::default_instance_,
      SysInstanceRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysInstanceRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysInstanceRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysInstanceRanking));
  AckInstanceRanking_descriptor_ = file->message_type(88);
  static const int AckInstanceRanking_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInstanceRanking, mapid_),
  };
  AckInstanceRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckInstanceRanking_descriptor_,
      AckInstanceRanking::default_instance_,
      AckInstanceRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInstanceRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckInstanceRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckInstanceRanking));
  RetInstanceRanking_descriptor_ = file->message_type(89);
  static const int RetInstanceRanking_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceRanking, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceRanking, elapsedtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceRanking, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceRanking, mapid_),
  };
  RetInstanceRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetInstanceRanking_descriptor_,
      RetInstanceRanking::default_instance_,
      RetInstanceRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetInstanceRanking));
  GetInstanceRanking_descriptor_ = file->message_type(90);
  static const int GetInstanceRanking_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceRanking, mapid_),
  };
  GetInstanceRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetInstanceRanking_descriptor_,
      GetInstanceRanking::default_instance_,
      GetInstanceRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetInstanceRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetInstanceRanking));
  ReturnInstanceRanking_descriptor_ = file->message_type(91);
  static const int ReturnInstanceRanking_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnInstanceRanking, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnInstanceRanking, elapsedtime_),
  };
  ReturnInstanceRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnInstanceRanking_descriptor_,
      ReturnInstanceRanking::default_instance_,
      ReturnInstanceRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnInstanceRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnInstanceRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnInstanceRanking));
  GroupInstance_descriptor_ = file->message_type(92);
  static const int GroupInstance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInstance, grouplist_),
  };
  GroupInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupInstance_descriptor_,
      GroupInstance::default_instance_,
      GroupInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupInstance));
  InstanceGroupList_descriptor_ = file->message_type(93);
  static const int InstanceGroupList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupList, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupList, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupList, buynum_),
  };
  InstanceGroupList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceGroupList_descriptor_,
      InstanceGroupList::default_instance_,
      InstanceGroupList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceGroupList));
  ReqCostByGroupInstance_descriptor_ = file->message_type(94);
  static const int ReqCostByGroupInstance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCostByGroupInstance, mapid_),
  };
  ReqCostByGroupInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCostByGroupInstance_descriptor_,
      ReqCostByGroupInstance::default_instance_,
      ReqCostByGroupInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCostByGroupInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCostByGroupInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCostByGroupInstance));
  RetCostByGroupInstance_descriptor_ = file->message_type(95);
  static const int RetCostByGroupInstance_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCostByGroupInstance, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCostByGroupInstance, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCostByGroupInstance, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCostByGroupInstance, buynum_),
  };
  RetCostByGroupInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetCostByGroupInstance_descriptor_,
      RetCostByGroupInstance::default_instance_,
      RetCostByGroupInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCostByGroupInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetCostByGroupInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetCostByGroupInstance));
  ReqArenaRefresh_descriptor_ = file->message_type(96);
  static const int ReqArenaRefresh_offsets_[1] = {
  };
  ReqArenaRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqArenaRefresh_descriptor_,
      ReqArenaRefresh::default_instance_,
      ReqArenaRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqArenaRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqArenaRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqArenaRefresh));
  RetArenaRefresh_descriptor_ = file->message_type(97);
  static const int RetArenaRefresh_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetArenaRefresh, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetArenaRefresh, alreadyrefresh_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetArenaRefresh, otherinfo_),
  };
  RetArenaRefresh_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetArenaRefresh_descriptor_,
      RetArenaRefresh::default_instance_,
      RetArenaRefresh_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetArenaRefresh, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetArenaRefresh, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetArenaRefresh));
  ReqWSArenaChallPlayer_descriptor_ = file->message_type(98);
  static const int ReqWSArenaChallPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWSArenaChallPlayer, rankings_),
  };
  ReqWSArenaChallPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqWSArenaChallPlayer_descriptor_,
      ReqWSArenaChallPlayer::default_instance_,
      ReqWSArenaChallPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWSArenaChallPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWSArenaChallPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqWSArenaChallPlayer));
  RetWSArenaChallPlayer_descriptor_ = file->message_type(99);
  static const int RetWSArenaChallPlayer_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetWSArenaChallPlayer, playerinfo_),
  };
  RetWSArenaChallPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetWSArenaChallPlayer_descriptor_,
      RetWSArenaChallPlayer::default_instance_,
      RetWSArenaChallPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetWSArenaChallPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetWSArenaChallPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetWSArenaChallPlayer));
  ReqWSArenaChallRank_descriptor_ = file->message_type(100);
  static const int ReqWSArenaChallRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWSArenaChallRank, rankings_),
  };
  ReqWSArenaChallRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqWSArenaChallRank_descriptor_,
      ReqWSArenaChallRank::default_instance_,
      ReqWSArenaChallRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWSArenaChallRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqWSArenaChallRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqWSArenaChallRank));
  GMToClientSweepAllInstance_descriptor_ = file->message_type(101);
  static const int GMToClientSweepAllInstance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientSweepAllInstance, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientSweepAllInstance, ssia_),
  };
  GMToClientSweepAllInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMToClientSweepAllInstance_descriptor_,
      GMToClientSweepAllInstance::default_instance_,
      GMToClientSweepAllInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientSweepAllInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientSweepAllInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMToClientSweepAllInstance));
  EliteInstance_descriptor_ = file->message_type(102);
  static const int EliteInstance_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteInstance, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteInstance, reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteInstance, list_),
  };
  EliteInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EliteInstance_descriptor_,
      EliteInstance::default_instance_,
      EliteInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EliteInstance));
  InstanceEliteList_descriptor_ = file->message_type(103);
  static const int InstanceEliteList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceEliteList, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceEliteList, pass_),
  };
  InstanceEliteList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceEliteList_descriptor_,
      InstanceEliteList::default_instance_,
      InstanceEliteList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceEliteList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceEliteList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceEliteList));
  CauchemarInstance_descriptor_ = file->message_type(104);
  static const int CauchemarInstance_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CauchemarInstance, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CauchemarInstance, reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CauchemarInstance, list_),
  };
  CauchemarInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CauchemarInstance_descriptor_,
      CauchemarInstance::default_instance_,
      CauchemarInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CauchemarInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CauchemarInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CauchemarInstance));
  InstanceCauchemarList_descriptor_ = file->message_type(105);
  static const int InstanceCauchemarList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCauchemarList, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCauchemarList, pass_),
  };
  InstanceCauchemarList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceCauchemarList_descriptor_,
      InstanceCauchemarList::default_instance_,
      InstanceCauchemarList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCauchemarList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCauchemarList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceCauchemarList));
  ReqInviteMemberList_descriptor_ = file->message_type(106);
  static const int ReqInviteMemberList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInviteMemberList, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInviteMemberList, ntype_),
  };
  ReqInviteMemberList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqInviteMemberList_descriptor_,
      ReqInviteMemberList::default_instance_,
      ReqInviteMemberList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInviteMemberList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInviteMemberList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqInviteMemberList));
  RetInviteMemberList_descriptor_ = file->message_type(107);
  static const int RetInviteMemberList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteMemberList, ntype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteMemberList, memberlist_),
  };
  RetInviteMemberList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetInviteMemberList_descriptor_,
      RetInviteMemberList::default_instance_,
      RetInviteMemberList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteMemberList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteMemberList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetInviteMemberList));
  InviteMemberList_descriptor_ = file->message_type(108);
  static const int InviteMemberList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMemberList, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMemberList, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMemberList, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMemberList, fight_),
  };
  InviteMemberList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteMemberList_descriptor_,
      InviteMemberList::default_instance_,
      InviteMemberList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMemberList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteMemberList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteMemberList));
  ReqInviteMember_descriptor_ = file->message_type(109);
  static const int ReqInviteMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInviteMember, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInviteMember, mapid_),
  };
  ReqInviteMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqInviteMember_descriptor_,
      ReqInviteMember::default_instance_,
      ReqInviteMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInviteMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInviteMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqInviteMember));
  RetInviteMember_descriptor_ = file->message_type(110);
  static const int RetInviteMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteMember, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteMember, charid_),
  };
  RetInviteMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetInviteMember_descriptor_,
      RetInviteMember::default_instance_,
      RetInviteMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetInviteMember));
  RetInvitedMember_descriptor_ = file->message_type(111);
  static const int RetInvitedMember_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInvitedMember, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInvitedMember, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInvitedMember, name_),
  };
  RetInvitedMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetInvitedMember_descriptor_,
      RetInvitedMember::default_instance_,
      RetInvitedMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInvitedMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInvitedMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetInvitedMember));
  AckChallengeInfo_descriptor_ = file->message_type(112);
  static const int AckChallengeInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChallengeInfo, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChallengeInfo, maxlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChallengeInfo, issweep_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChallengeInfo, sweeptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChallengeInfo, totaltime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChallengeInfo, reset_),
  };
  AckChallengeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckChallengeInfo_descriptor_,
      AckChallengeInfo::default_instance_,
      AckChallengeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChallengeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckChallengeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckChallengeInfo));
  ReqLayerRank_descriptor_ = file->message_type(113);
  static const int ReqLayerRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLayerRank, layer_),
  };
  ReqLayerRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLayerRank_descriptor_,
      ReqLayerRank::default_instance_,
      ReqLayerRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLayerRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLayerRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLayerRank));
  AckLayerRank_descriptor_ = file->message_type(114);
  static const int AckLayerRank_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLayerRank, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLayerRank, firstname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLayerRank, firstlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLayerRank, firstfight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLayerRank, lastname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLayerRank, lastlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLayerRank, lastfight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLayerRank, famousname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLayerRank, famouslevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLayerRank, famousfight_),
  };
  AckLayerRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckLayerRank_descriptor_,
      AckLayerRank::default_instance_,
      AckLayerRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLayerRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckLayerRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckLayerRank));
  AckSweep_descriptor_ = file->message_type(115);
  static const int AckSweep_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSweep, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSweep, elapsedtime_),
  };
  AckSweep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckSweep_descriptor_,
      AckSweep::default_instance_,
      AckSweep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSweep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckSweep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckSweep));
  ACkEndSweep_descriptor_ = file->message_type(116);
  static const int ACkEndSweep_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACkEndSweep, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACkEndSweep, startlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACkEndSweep, endlayer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACkEndSweep, prize_),
  };
  ACkEndSweep_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ACkEndSweep_descriptor_,
      ACkEndSweep::default_instance_,
      ACkEndSweep_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACkEndSweep, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ACkEndSweep, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ACkEndSweep));
  ReqExchange_descriptor_ = file->message_type(117);
  static const int ReqExchange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExchange, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExchange, num_),
  };
  ReqExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqExchange_descriptor_,
      ReqExchange::default_instance_,
      ReqExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqExchange));
  AckExchange_descriptor_ = file->message_type(118);
  static const int AckExchange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckExchange, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckExchange, code_),
  };
  AckExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckExchange_descriptor_,
      AckExchange::default_instance_,
      AckExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckExchange));
  PrizeItem_descriptor_ = file->message_type(119);
  static const int PrizeItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeItem, num_),
  };
  PrizeItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrizeItem_descriptor_,
      PrizeItem::default_instance_,
      PrizeItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrizeItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrizeItem));
  PassChallenge_descriptor_ = file->message_type(120);
  static const int PassChallenge_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassChallenge, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassChallenge, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassChallenge, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassChallenge, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassChallenge, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassChallenge, vip_),
  };
  PassChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassChallenge_descriptor_,
      PassChallenge::default_instance_,
      PassChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassChallenge));
  GatherBox_descriptor_ = file->message_type(121);
  static const int GatherBox_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherBox, key_),
  };
  GatherBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GatherBox_descriptor_,
      GatherBox::default_instance_,
      GatherBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GatherBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GatherBox));
  AckGatherBox_descriptor_ = file->message_type(122);
  static const int AckGatherBox_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGatherBox, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGatherBox, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGatherBox, items_),
  };
  AckGatherBox_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGatherBox_descriptor_,
      AckGatherBox::default_instance_,
      AckGatherBox_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGatherBox, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGatherBox, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGatherBox));
  AdvancedInstance_descriptor_ = file->message_type(123);
  static const int AdvancedInstance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedInstance, list_),
  };
  AdvancedInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdvancedInstance_descriptor_,
      AdvancedInstance::default_instance_,
      AdvancedInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdvancedInstance));
  InstanceAdvancedList_descriptor_ = file->message_type(124);
  static const int InstanceAdvancedList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceAdvancedList, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceAdvancedList, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceAdvancedList, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceAdvancedList, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceAdvancedList, reset_),
  };
  InstanceAdvancedList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceAdvancedList_descriptor_,
      InstanceAdvancedList::default_instance_,
      InstanceAdvancedList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceAdvancedList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceAdvancedList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceAdvancedList));
  ClientReqTeamChanceReady_descriptor_ = file->message_type(125);
  static const int ClientReqTeamChanceReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqTeamChanceReady, mapid_),
  };
  ClientReqTeamChanceReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqTeamChanceReady_descriptor_,
      ClientReqTeamChanceReady::default_instance_,
      ClientReqTeamChanceReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqTeamChanceReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqTeamChanceReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqTeamChanceReady));
  WSToClientReqTeamChanceReady_descriptor_ = file->message_type(126);
  static const int WSToClientReqTeamChanceReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientReqTeamChanceReady, ret_),
  };
  WSToClientReqTeamChanceReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientReqTeamChanceReady_descriptor_,
      WSToClientReqTeamChanceReady::default_instance_,
      WSToClientReqTeamChanceReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientReqTeamChanceReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientReqTeamChanceReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientReqTeamChanceReady));
  WSToClientSimChanceReady_descriptor_ = file->message_type(127);
  static const int WSToClientSimChanceReady_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimChanceReady, charid_),
  };
  WSToClientSimChanceReady_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientSimChanceReady_descriptor_,
      WSToClientSimChanceReady::default_instance_,
      WSToClientSimChanceReady_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimChanceReady, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientSimChanceReady, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientSimChanceReady));
  CommonInstanceInfo_descriptor_ = file->message_type(128);
  static const int CommonInstanceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonInstanceInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonInstanceInfo, reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonInstanceInfo, info_),
  };
  CommonInstanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonInstanceInfo_descriptor_,
      CommonInstanceInfo::default_instance_,
      CommonInstanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonInstanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonInstanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonInstanceInfo));
  CommonInstanceInfoList_descriptor_ = file->message_type(129);
  static const int CommonInstanceInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonInstanceInfoList, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonInstanceInfoList, pass_),
  };
  CommonInstanceInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CommonInstanceInfoList_descriptor_,
      CommonInstanceInfoList::default_instance_,
      CommonInstanceInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonInstanceInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CommonInstanceInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CommonInstanceInfoList));
  VipInstance_descriptor_ = file->message_type(130);
  static const int VipInstance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInstance, info_),
  };
  VipInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipInstance_descriptor_,
      VipInstance::default_instance_,
      VipInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipInstance));
  VipInstanceList_descriptor_ = file->message_type(131);
  static const int VipInstanceList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInstanceList, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInstanceList, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInstanceList, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInstanceList, time_),
  };
  VipInstanceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      VipInstanceList_descriptor_,
      VipInstanceList::default_instance_,
      VipInstanceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInstanceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(VipInstanceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(VipInstanceList));
  ExpInstanceInfo_descriptor_ = file->message_type(132);
  static const int ExpInstanceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpInstanceInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpInstanceInfo, reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpInstanceInfo, info_),
  };
  ExpInstanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpInstanceInfo_descriptor_,
      ExpInstanceInfo::default_instance_,
      ExpInstanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpInstanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpInstanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpInstanceInfo));
  ExpInstanceInfoList_descriptor_ = file->message_type(133);
  static const int ExpInstanceInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpInstanceInfoList, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpInstanceInfoList, pass_),
  };
  ExpInstanceInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ExpInstanceInfoList_descriptor_,
      ExpInstanceInfoList::default_instance_,
      ExpInstanceInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpInstanceInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ExpInstanceInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ExpInstanceInfoList));
  MoneyInstanceInfo_descriptor_ = file->message_type(134);
  static const int MoneyInstanceInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstanceInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstanceInfo, reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstanceInfo, info_),
  };
  MoneyInstanceInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyInstanceInfo_descriptor_,
      MoneyInstanceInfo::default_instance_,
      MoneyInstanceInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstanceInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstanceInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyInstanceInfo));
  MoneyInstanceInfoList_descriptor_ = file->message_type(135);
  static const int MoneyInstanceInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstanceInfoList, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstanceInfoList, pass_),
  };
  MoneyInstanceInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyInstanceInfoList_descriptor_,
      MoneyInstanceInfoList::default_instance_,
      MoneyInstanceInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstanceInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstanceInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyInstanceInfoList));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharLogin_2fMapInstanceProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCreateInstance_descriptor_, &ReqCreateInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetCreateInstance_descriptor_, &RetCreateInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqInstanceQuit_descriptor_, &ReqInstanceQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetInstanceQuit_descriptor_, &RetInstanceQuit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimInstanceUpdate_descriptor_, &SimInstanceUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimInstanceEnd_descriptor_, &SimInstanceEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimInstanceAward_descriptor_, &SimInstanceAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqInstanceSweep_descriptor_, &ReqInstanceSweep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetInstanceSweep_descriptor_, &RetInstanceSweep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqInstanceSweepSpeedUp_descriptor_, &ReqInstanceSweepSpeedUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetInstanceSweepSpeedUp_descriptor_, &RetInstanceSweepSpeedUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OpenInstanceSweep_descriptor_, &OpenInstanceSweep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimInstanceSweepEnd_descriptor_, &SimInstanceSweepEnd::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqInstanceReset_descriptor_, &ReqInstanceReset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetInstanceReset_descriptor_, &RetInstanceReset::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqResetAllInstances_descriptor_, &ReqResetAllInstances::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetResetAllInstances_descriptor_, &RetResetAllInstances::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqWSCreateInstance_descriptor_, &ReqWSCreateInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDeleteInstance_descriptor_, &ReqDeleteInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGroupInstanceReady_descriptor_, &ReqGroupInstanceReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetGroupInstanceReady_descriptor_, &RetGroupInstanceReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGroupEnterInstance_descriptor_, &ReqGroupEnterInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetGroupEnterInstance_descriptor_, &RetGroupEnterInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMemberFlop_descriptor_, &ReqMemberFlop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMToClientMemberFlop_descriptor_, &GMToClientMemberFlop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetMemberFlop_descriptor_, &RetMemberFlop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetInstanceAward_descriptor_, &ReqGetInstanceAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqEnterInstance_descriptor_, &ReqEnterInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGTGetInstanceTeamID_descriptor_, &ToGTGetInstanceTeamID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetGetInstanceTeamID_descriptor_, &RetGetInstanceTeamID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceTeamInfo_descriptor_, &InstanceTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClientLeaveInstance_descriptor_, &ToClientLeaveInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGTAwardInfo_descriptor_, &ToGTAwardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqCreateInstance_descriptor_, &ClientReqCreateInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMReqWSCreateInstance_descriptor_, &GMReqWSCreateInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckToGMCreateInstance_descriptor_, &AckToGMCreateInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqWorldArenaInfo_descriptor_, &ClientReqWorldArenaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqWarReport_descriptor_, &ClientReqWarReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqToWorldGetArenaInfo_descriptor_, &ReqToWorldGetArenaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OtherPlayerArenaInfo_descriptor_, &OtherPlayerArenaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqToWordGetWarReport_descriptor_, &ReqToWordGetWarReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqToGameGetArenaInfo_descriptor_, &ReqToGameGetArenaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaHistoryReward_descriptor_, &ArenaHistoryReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqArenaHistoryReward_descriptor_, &ReqArenaHistoryReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RspArenaHistoryReward_descriptor_, &RspArenaHistoryReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarReport_descriptor_, &WarReport::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CancelAreanCDTime_descriptor_, &CancelAreanCDTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnCancelAreanCDTime_descriptor_, &ReturnCancelAreanCDTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddChallengeTimes_descriptor_, &AddChallengeTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnAddChallengeTimes_descriptor_, &ReturnAddChallengeTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqAreanReward_descriptor_, &ClientReqAreanReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMToClientCompeteOver_descriptor_, &GMToClientCompeteOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysRankingReward_descriptor_, &SysRankingReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientRegRankingName_descriptor_, &ClientRegRankingName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientRankingName_descriptor_, &WSToClientRankingName::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqGroupInfo_descriptor_, &ClientReqGroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMToClentGroupInfo_descriptor_, &GMToClentGroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupInfo_descriptor_, &GroupInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqAllTeamInfo_descriptor_, &ClientReqAllTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClentAllTeamInfo_descriptor_, &WSToClentAllTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AllTeamInfo_descriptor_, &AllTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqJoinTeam_descriptor_, &ClientReqJoinTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClentReqJoinTeam_descriptor_, &WSToClentReqJoinTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeammemberInfo_descriptor_, &TeammemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqQuickJoinTeam_descriptor_, &ClientReqQuickJoinTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqCreateTeam_descriptor_, &ClientReqCreateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClentReqCreateTeam_descriptor_, &WSToClentReqCreateTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqTeamReady_descriptor_, &ClientReqTeamReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientReqTeamReady_descriptor_, &WSToClientReqTeamReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientSimReady_descriptor_, &WSToClientSimReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientSimFindTeamMember_descriptor_, &ClientSimFindTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientFindTeamMember_descriptor_, &WSToClientFindTeamMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqKickMember_descriptor_, &ClientReqKickMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientKickMember_descriptor_, &WSToClientKickMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientSimKick_descriptor_, &WSToClientSimKick::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqEnterTeamMap_descriptor_, &ClientReqEnterTeamMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientEnterTeamMap_descriptor_, &WSToClientEnterTeamMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientSimInstance_descriptor_, &WSToClientSimInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMToClientSimHarmRank_descriptor_, &GMToClientSimHarmRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HarmRank_descriptor_, &HarmRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientSimOnline_descriptor_, &WSToClientSimOnline::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqExitTeam_descriptor_, &ClientReqExitTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientExitTeam_descriptor_, &WSToClientExitTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientSimExitTeam_descriptor_, &WSToClientSimExitTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMToWSDelTeam_descriptor_, &GMToWSDelTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMToClientLottery_descriptor_, &GMToClientLottery::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimSweepInstanceAward_descriptor_, &SimSweepInstanceAward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysInstanceRanking_descriptor_, &SysInstanceRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckInstanceRanking_descriptor_, &AckInstanceRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetInstanceRanking_descriptor_, &RetInstanceRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetInstanceRanking_descriptor_, &GetInstanceRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnInstanceRanking_descriptor_, &ReturnInstanceRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupInstance_descriptor_, &GroupInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceGroupList_descriptor_, &InstanceGroupList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCostByGroupInstance_descriptor_, &ReqCostByGroupInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetCostByGroupInstance_descriptor_, &RetCostByGroupInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqArenaRefresh_descriptor_, &ReqArenaRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetArenaRefresh_descriptor_, &RetArenaRefresh::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqWSArenaChallPlayer_descriptor_, &ReqWSArenaChallPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetWSArenaChallPlayer_descriptor_, &RetWSArenaChallPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqWSArenaChallRank_descriptor_, &ReqWSArenaChallRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMToClientSweepAllInstance_descriptor_, &GMToClientSweepAllInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EliteInstance_descriptor_, &EliteInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceEliteList_descriptor_, &InstanceEliteList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CauchemarInstance_descriptor_, &CauchemarInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceCauchemarList_descriptor_, &InstanceCauchemarList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqInviteMemberList_descriptor_, &ReqInviteMemberList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetInviteMemberList_descriptor_, &RetInviteMemberList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteMemberList_descriptor_, &InviteMemberList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqInviteMember_descriptor_, &ReqInviteMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetInviteMember_descriptor_, &RetInviteMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetInvitedMember_descriptor_, &RetInvitedMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckChallengeInfo_descriptor_, &AckChallengeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLayerRank_descriptor_, &ReqLayerRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckLayerRank_descriptor_, &AckLayerRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckSweep_descriptor_, &AckSweep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ACkEndSweep_descriptor_, &ACkEndSweep::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqExchange_descriptor_, &ReqExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckExchange_descriptor_, &AckExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrizeItem_descriptor_, &PrizeItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassChallenge_descriptor_, &PassChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GatherBox_descriptor_, &GatherBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGatherBox_descriptor_, &AckGatherBox::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdvancedInstance_descriptor_, &AdvancedInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceAdvancedList_descriptor_, &InstanceAdvancedList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqTeamChanceReady_descriptor_, &ClientReqTeamChanceReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientReqTeamChanceReady_descriptor_, &WSToClientReqTeamChanceReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientSimChanceReady_descriptor_, &WSToClientSimChanceReady::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonInstanceInfo_descriptor_, &CommonInstanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CommonInstanceInfoList_descriptor_, &CommonInstanceInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipInstance_descriptor_, &VipInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    VipInstanceList_descriptor_, &VipInstanceList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpInstanceInfo_descriptor_, &ExpInstanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ExpInstanceInfoList_descriptor_, &ExpInstanceInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyInstanceInfo_descriptor_, &MoneyInstanceInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyInstanceInfoList_descriptor_, &MoneyInstanceInfoList::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharLogin_2fMapInstanceProto_2eproto() {
  delete ReqCreateInstance::default_instance_;
  delete ReqCreateInstance_reflection_;
  delete RetCreateInstance::default_instance_;
  delete RetCreateInstance_reflection_;
  delete ReqInstanceQuit::default_instance_;
  delete ReqInstanceQuit_reflection_;
  delete RetInstanceQuit::default_instance_;
  delete RetInstanceQuit_reflection_;
  delete SimInstanceUpdate::default_instance_;
  delete SimInstanceUpdate_reflection_;
  delete SimInstanceEnd::default_instance_;
  delete SimInstanceEnd_reflection_;
  delete SimInstanceAward::default_instance_;
  delete SimInstanceAward_reflection_;
  delete ReqInstanceSweep::default_instance_;
  delete ReqInstanceSweep_reflection_;
  delete RetInstanceSweep::default_instance_;
  delete RetInstanceSweep_reflection_;
  delete ReqInstanceSweepSpeedUp::default_instance_;
  delete ReqInstanceSweepSpeedUp_reflection_;
  delete RetInstanceSweepSpeedUp::default_instance_;
  delete RetInstanceSweepSpeedUp_reflection_;
  delete OpenInstanceSweep::default_instance_;
  delete OpenInstanceSweep_reflection_;
  delete SimInstanceSweepEnd::default_instance_;
  delete SimInstanceSweepEnd_reflection_;
  delete ReqInstanceReset::default_instance_;
  delete ReqInstanceReset_reflection_;
  delete RetInstanceReset::default_instance_;
  delete RetInstanceReset_reflection_;
  delete ReqResetAllInstances::default_instance_;
  delete ReqResetAllInstances_reflection_;
  delete RetResetAllInstances::default_instance_;
  delete RetResetAllInstances_reflection_;
  delete ReqWSCreateInstance::default_instance_;
  delete ReqWSCreateInstance_reflection_;
  delete ReqDeleteInstance::default_instance_;
  delete ReqDeleteInstance_reflection_;
  delete ReqGroupInstanceReady::default_instance_;
  delete ReqGroupInstanceReady_reflection_;
  delete RetGroupInstanceReady::default_instance_;
  delete RetGroupInstanceReady_reflection_;
  delete ReqGroupEnterInstance::default_instance_;
  delete ReqGroupEnterInstance_reflection_;
  delete RetGroupEnterInstance::default_instance_;
  delete RetGroupEnterInstance_reflection_;
  delete ReqMemberFlop::default_instance_;
  delete ReqMemberFlop_reflection_;
  delete GMToClientMemberFlop::default_instance_;
  delete GMToClientMemberFlop_reflection_;
  delete RetMemberFlop::default_instance_;
  delete RetMemberFlop_reflection_;
  delete ReqGetInstanceAward::default_instance_;
  delete ReqGetInstanceAward_reflection_;
  delete ReqEnterInstance::default_instance_;
  delete ReqEnterInstance_reflection_;
  delete ToGTGetInstanceTeamID::default_instance_;
  delete ToGTGetInstanceTeamID_reflection_;
  delete RetGetInstanceTeamID::default_instance_;
  delete RetGetInstanceTeamID_reflection_;
  delete InstanceTeamInfo::default_instance_;
  delete InstanceTeamInfo_reflection_;
  delete ToClientLeaveInstance::default_instance_;
  delete ToClientLeaveInstance_reflection_;
  delete ToGTAwardInfo::default_instance_;
  delete ToGTAwardInfo_reflection_;
  delete ClientReqCreateInstance::default_instance_;
  delete ClientReqCreateInstance_reflection_;
  delete GMReqWSCreateInstance::default_instance_;
  delete GMReqWSCreateInstance_reflection_;
  delete AckToGMCreateInstance::default_instance_;
  delete AckToGMCreateInstance_reflection_;
  delete ClientReqWorldArenaInfo::default_instance_;
  delete ClientReqWorldArenaInfo_reflection_;
  delete ClientReqWarReport::default_instance_;
  delete ClientReqWarReport_reflection_;
  delete ReqToWorldGetArenaInfo::default_instance_;
  delete ReqToWorldGetArenaInfo_reflection_;
  delete OtherPlayerArenaInfo::default_instance_;
  delete OtherPlayerArenaInfo_reflection_;
  delete ReqToWordGetWarReport::default_instance_;
  delete ReqToWordGetWarReport_reflection_;
  delete ReqToGameGetArenaInfo::default_instance_;
  delete ReqToGameGetArenaInfo_reflection_;
  delete ArenaHistoryReward::default_instance_;
  delete ArenaHistoryReward_reflection_;
  delete ReqArenaHistoryReward::default_instance_;
  delete ReqArenaHistoryReward_reflection_;
  delete RspArenaHistoryReward::default_instance_;
  delete RspArenaHistoryReward_reflection_;
  delete WarReport::default_instance_;
  delete WarReport_reflection_;
  delete CancelAreanCDTime::default_instance_;
  delete CancelAreanCDTime_reflection_;
  delete ReturnCancelAreanCDTime::default_instance_;
  delete ReturnCancelAreanCDTime_reflection_;
  delete AddChallengeTimes::default_instance_;
  delete AddChallengeTimes_reflection_;
  delete ReturnAddChallengeTimes::default_instance_;
  delete ReturnAddChallengeTimes_reflection_;
  delete ClientReqAreanReward::default_instance_;
  delete ClientReqAreanReward_reflection_;
  delete GMToClientCompeteOver::default_instance_;
  delete GMToClientCompeteOver_reflection_;
  delete SysRankingReward::default_instance_;
  delete SysRankingReward_reflection_;
  delete ClientRegRankingName::default_instance_;
  delete ClientRegRankingName_reflection_;
  delete WSToClientRankingName::default_instance_;
  delete WSToClientRankingName_reflection_;
  delete ClientReqGroupInfo::default_instance_;
  delete ClientReqGroupInfo_reflection_;
  delete GMToClentGroupInfo::default_instance_;
  delete GMToClentGroupInfo_reflection_;
  delete GroupInfo::default_instance_;
  delete GroupInfo_reflection_;
  delete ClientReqAllTeamInfo::default_instance_;
  delete ClientReqAllTeamInfo_reflection_;
  delete WSToClentAllTeamInfo::default_instance_;
  delete WSToClentAllTeamInfo_reflection_;
  delete AllTeamInfo::default_instance_;
  delete AllTeamInfo_reflection_;
  delete ClientReqJoinTeam::default_instance_;
  delete ClientReqJoinTeam_reflection_;
  delete WSToClentReqJoinTeam::default_instance_;
  delete WSToClentReqJoinTeam_reflection_;
  delete TeammemberInfo::default_instance_;
  delete TeammemberInfo_reflection_;
  delete ClientReqQuickJoinTeam::default_instance_;
  delete ClientReqQuickJoinTeam_reflection_;
  delete ClientReqCreateTeam::default_instance_;
  delete ClientReqCreateTeam_reflection_;
  delete WSToClentReqCreateTeam::default_instance_;
  delete WSToClentReqCreateTeam_reflection_;
  delete ClientReqTeamReady::default_instance_;
  delete ClientReqTeamReady_reflection_;
  delete WSToClientReqTeamReady::default_instance_;
  delete WSToClientReqTeamReady_reflection_;
  delete WSToClientSimReady::default_instance_;
  delete WSToClientSimReady_reflection_;
  delete ClientSimFindTeamMember::default_instance_;
  delete ClientSimFindTeamMember_reflection_;
  delete WSToClientFindTeamMember::default_instance_;
  delete WSToClientFindTeamMember_reflection_;
  delete ClientReqKickMember::default_instance_;
  delete ClientReqKickMember_reflection_;
  delete WSToClientKickMember::default_instance_;
  delete WSToClientKickMember_reflection_;
  delete WSToClientSimKick::default_instance_;
  delete WSToClientSimKick_reflection_;
  delete ClientReqEnterTeamMap::default_instance_;
  delete ClientReqEnterTeamMap_reflection_;
  delete WSToClientEnterTeamMap::default_instance_;
  delete WSToClientEnterTeamMap_reflection_;
  delete WSToClientSimInstance::default_instance_;
  delete WSToClientSimInstance_reflection_;
  delete GMToClientSimHarmRank::default_instance_;
  delete GMToClientSimHarmRank_reflection_;
  delete HarmRank::default_instance_;
  delete HarmRank_reflection_;
  delete WSToClientSimOnline::default_instance_;
  delete WSToClientSimOnline_reflection_;
  delete ClientReqExitTeam::default_instance_;
  delete ClientReqExitTeam_reflection_;
  delete WSToClientExitTeam::default_instance_;
  delete WSToClientExitTeam_reflection_;
  delete WSToClientSimExitTeam::default_instance_;
  delete WSToClientSimExitTeam_reflection_;
  delete GMToWSDelTeam::default_instance_;
  delete GMToWSDelTeam_reflection_;
  delete GMToClientLottery::default_instance_;
  delete GMToClientLottery_reflection_;
  delete SimSweepInstanceAward::default_instance_;
  delete SimSweepInstanceAward_reflection_;
  delete SysInstanceRanking::default_instance_;
  delete SysInstanceRanking_reflection_;
  delete AckInstanceRanking::default_instance_;
  delete AckInstanceRanking_reflection_;
  delete RetInstanceRanking::default_instance_;
  delete RetInstanceRanking_reflection_;
  delete GetInstanceRanking::default_instance_;
  delete GetInstanceRanking_reflection_;
  delete ReturnInstanceRanking::default_instance_;
  delete ReturnInstanceRanking_reflection_;
  delete GroupInstance::default_instance_;
  delete GroupInstance_reflection_;
  delete InstanceGroupList::default_instance_;
  delete InstanceGroupList_reflection_;
  delete ReqCostByGroupInstance::default_instance_;
  delete ReqCostByGroupInstance_reflection_;
  delete RetCostByGroupInstance::default_instance_;
  delete RetCostByGroupInstance_reflection_;
  delete ReqArenaRefresh::default_instance_;
  delete ReqArenaRefresh_reflection_;
  delete RetArenaRefresh::default_instance_;
  delete RetArenaRefresh_reflection_;
  delete ReqWSArenaChallPlayer::default_instance_;
  delete ReqWSArenaChallPlayer_reflection_;
  delete RetWSArenaChallPlayer::default_instance_;
  delete RetWSArenaChallPlayer_reflection_;
  delete ReqWSArenaChallRank::default_instance_;
  delete ReqWSArenaChallRank_reflection_;
  delete GMToClientSweepAllInstance::default_instance_;
  delete GMToClientSweepAllInstance_reflection_;
  delete EliteInstance::default_instance_;
  delete EliteInstance_reflection_;
  delete InstanceEliteList::default_instance_;
  delete InstanceEliteList_reflection_;
  delete CauchemarInstance::default_instance_;
  delete CauchemarInstance_reflection_;
  delete InstanceCauchemarList::default_instance_;
  delete InstanceCauchemarList_reflection_;
  delete ReqInviteMemberList::default_instance_;
  delete ReqInviteMemberList_reflection_;
  delete RetInviteMemberList::default_instance_;
  delete RetInviteMemberList_reflection_;
  delete InviteMemberList::default_instance_;
  delete InviteMemberList_reflection_;
  delete ReqInviteMember::default_instance_;
  delete ReqInviteMember_reflection_;
  delete RetInviteMember::default_instance_;
  delete RetInviteMember_reflection_;
  delete RetInvitedMember::default_instance_;
  delete RetInvitedMember_reflection_;
  delete AckChallengeInfo::default_instance_;
  delete AckChallengeInfo_reflection_;
  delete ReqLayerRank::default_instance_;
  delete ReqLayerRank_reflection_;
  delete AckLayerRank::default_instance_;
  delete AckLayerRank_reflection_;
  delete AckSweep::default_instance_;
  delete AckSweep_reflection_;
  delete ACkEndSweep::default_instance_;
  delete ACkEndSweep_reflection_;
  delete ReqExchange::default_instance_;
  delete ReqExchange_reflection_;
  delete AckExchange::default_instance_;
  delete AckExchange_reflection_;
  delete PrizeItem::default_instance_;
  delete PrizeItem_reflection_;
  delete PassChallenge::default_instance_;
  delete PassChallenge_reflection_;
  delete GatherBox::default_instance_;
  delete GatherBox_reflection_;
  delete AckGatherBox::default_instance_;
  delete AckGatherBox_reflection_;
  delete AdvancedInstance::default_instance_;
  delete AdvancedInstance_reflection_;
  delete InstanceAdvancedList::default_instance_;
  delete InstanceAdvancedList_reflection_;
  delete ClientReqTeamChanceReady::default_instance_;
  delete ClientReqTeamChanceReady_reflection_;
  delete WSToClientReqTeamChanceReady::default_instance_;
  delete WSToClientReqTeamChanceReady_reflection_;
  delete WSToClientSimChanceReady::default_instance_;
  delete WSToClientSimChanceReady_reflection_;
  delete CommonInstanceInfo::default_instance_;
  delete CommonInstanceInfo_reflection_;
  delete CommonInstanceInfoList::default_instance_;
  delete CommonInstanceInfoList_reflection_;
  delete VipInstance::default_instance_;
  delete VipInstance_reflection_;
  delete VipInstanceList::default_instance_;
  delete VipInstanceList_reflection_;
  delete ExpInstanceInfo::default_instance_;
  delete ExpInstanceInfo_reflection_;
  delete ExpInstanceInfoList::default_instance_;
  delete ExpInstanceInfoList_reflection_;
  delete MoneyInstanceInfo::default_instance_;
  delete MoneyInstanceInfo_reflection_;
  delete MoneyInstanceInfoList::default_instance_;
  delete MoneyInstanceInfoList_reflection_;
}

void protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CharLogin::protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  ::PlayerSynch::protobuf_AddDesc_Map_2fSynchPath_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n CharLogin/MapInstanceProto.proto\022\020MapI"
    "nstanceProto\032\034CharLogin/CharBaseInfo.pro"
    "to\032\023Map/SynchPath.proto\"=\n\021ReqCreateInst"
    "ance\022\022\n\nInstanceId\030\001 \002(\005\022\024\n\014InstanceType"
    "\030\002 \002(\005\"\?\n\021RetCreateInstance\022\023\n\013dwErrorCo"
    "de\030\001 \002(\005\022\025\n\rNewInstanceId\030\002 \001(\003\"%\n\017ReqIn"
    "stanceQuit\022\022\n\nInstanceId\030\001 \002(\003\" \n\017RetIns"
    "tanceQuit\022\r\n\005MapID\030\001 \002(\005\"Z\n\021SimInstanceU"
    "pdate\022\027\n\017remainMonsterID\030\001 \003(\005\022\030\n\020remain"
    "MonsterNum\030\002 \003(\005\022\022\n\nremaintime\030\003 \001(\001\"f\n\016"
    "SimInstanceEnd\022\r\n\005mapid\030\001 \002(\005\022\021\n\tIsSucce"
    "ss\030\002 \001(\005\0222\n\006Awards\030\003 \001(\0132\".MapInstancePr"
    "oto.SimInstanceAward\"\345\001\n\020SimInstanceAwar"
    "d\022\022\n\nrewardStar\030\001 \001(\005\022\023\n\013elapsedTime\030\002 \001"
    "(\005\022\025\n\rbarrierPoints\030\003 \001(\005\022\025\n\rpersonalPow"
    "er\030\004 \001(\005\022\022\n\ngroupPower\030\005 \001(\005\022\022\n\nawardMon"
    "ey\030\006 \001(\005\022\020\n\010awardExp\030\007 \001(\005\022\026\n\016awardInfur"
    "iate\030\010 \001(\005\022(\n\005items\030\t \003(\0132\031.CharLogin.Cl"
    "ientItemInfo\"&\n\020ReqInstanceSweep\022\022\n\nInst"
    "anceId\030\001 \002(\005\"Q\n\020RetInstanceSweep\022\023\n\013dwEr"
    "rorCode\030\001 \002(\005\022\024\n\014dwRemainTime\030\002 \002(\005\022\022\n\nI"
    "nstanceId\030\003 \002(\005\"@\n\027ReqInstanceSweepSpeed"
    "Up\022\022\n\nInstanceId\030\001 \002(\005\022\021\n\tmoneytype\030\002 \001("
    "\005\"B\n\027RetInstanceSweepSpeedUp\022\023\n\013dwErrorC"
    "ode\030\001 \002(\005\022\022\n\nInstanceId\030\002 \002(\005\"\023\n\021OpenIns"
    "tanceSweep\"\025\n\023SimInstanceSweepEnd\"&\n\020Req"
    "InstanceReset\022\022\n\nInstanceId\030\001 \002(\005\";\n\020Ret"
    "InstanceReset\022\023\n\013dwErrorCode\030\001 \002(\005\022\022\n\nIn"
    "stanceId\030\002 \002(\005\".\n\024ReqResetAllInstances\022\026"
    "\n\016InstanceIdList\030\001 \003(\005\"C\n\024RetResetAllIns"
    "tances\022\023\n\013dwErrorCode\030\001 \002(\005\022\026\n\016InstanceI"
    "dList\030\002 \003(\005\"r\n\023ReqWSCreateInstance\022\022\n\nIn"
    "stanceId\030\001 \002(\005\022\024\n\014InstanceType\030\002 \002(\005\022\017\n\007"
    "localId\030\003 \002(\005\022\020\n\010romateId\030\004 \002(\005\022\016\n\006chari"
    "d\030\005 \002(\003\"\'\n\021ReqDeleteInstance\022\022\n\nInstance"
    "Id\030\001 \002(\003\"\027\n\025ReqGroupInstanceReady\"G\n\025Ret"
    "GroupInstanceReady\022\013\n\003ret\030\001 \002(\005\022\020\n\010Membe"
    "rID\030\002 \003(\003\022\017\n\007IsReady\030\003 \003(\005\"+\n\025ReqGroupEn"
    "terInstance\022\022\n\nInstanceID\030\001 \002(\003\"8\n\025RetGr"
    "oupEnterInstance\022\013\n\003ret\030\001 \002(\005\022\022\n\nInstanc"
    "eID\030\002 \001(\003\"\037\n\rReqMemberFlop\022\016\n\006FlopID\030\001 \002"
    "(\005\"#\n\024GMToClientMemberFlop\022\013\n\003ret\030\001 \002(\005\""
    "d\n\rRetMemberFlop\022\016\n\006FlopID\030\001 \002(\005\022\016\n\006Item"
    "ID\030\002 \002(\005\022\020\n\010FlopName\030\003 \002(\t\022\017\n\007ItemNum\030\004 "
    "\001(\005\022\020\n\010BindType\030\005 \001(\005\")\n\023ReqGetInstanceA"
    "ward\022\022\n\ninstanceID\030\001 \002(\003\"&\n\020ReqEnterInst"
    "ance\022\022\n\ninstanceID\030\001 \002(\003\"\027\n\025ToGTGetInsta"
    "nceTeamID\"L\n\024RetGetInstanceTeamID\0224\n\010tea"
    "mInfo\030\001 \003(\0132\".MapInstanceProto.InstanceT"
    "eamInfo\"|\n\020InstanceTeamInfo\022\020\n\010dwTeamID\030"
    "\001 \002(\005\022\024\n\014dwInstanceID\030\002 \001(\005\022\023\n\013dwTeamPow"
    "er\030\003 \001(\005\022\025\n\rdwTeamMembers\030\004 \001(\005\022\024\n\014dwLea"
    "derName\030\005 \001(\t\"\027\n\025ToClientLeaveInstance\"T"
    "\n\rToGTAwardInfo\022\016\n\006charid\030\001 \002(\003\0223\n\taward"
    "Info\030\002 \001(\0132 .MapInstanceProto.SimInstanc"
    "eEnd\"S\n\027ClientReqCreateInstance\022\022\n\nInsta"
    "nceId\030\001 \002(\005\022\024\n\014InstanceType\030\002 \002(\005\022\016\n\006par"
    "amf\030\003 \001(\005\"a\n\025GMReqWSCreateInstance\022\022\n\nIn"
    "stanceId\030\001 \002(\005\022\024\n\014InstanceType\030\002 \001(\005\022\016\n\006"
    "charid\030\003 \001(\003\022\016\n\006paramf\030\004 \001(\005\"8\n\025AckToGMC"
    "reateInstance\022\013\n\003ret\030\001 \002(\005\022\022\n\ninstanceid"
    "\030\002 \001(\003\"\031\n\027ClientReqWorldArenaInfo\"\"\n\022Cli"
    "entReqWarReport\022\014\n\004page\030\001 \001(\005\"S\n\026ReqToWo"
    "rldGetArenaInfo\0229\n\totherinfo\030\005 \003(\0132&.Map"
    "InstanceProto.OtherPlayerArenaInfo\"\224\001\n\024O"
    "therPlayerArenaInfo\022\016\n\006charid\030\001 \002(\003\022\020\n\010c"
    "harname\030\002 \001(\t\022\017\n\007Ranking\030\003 \001(\005\022\022\n\nprofes"
    "sion\030\004 \001(\005\022\r\n\005fight\030\005 \001(\005\022\013\n\003sex\030\006 \001(\010\022\r"
    "\n\005viplv\030\007 \001(\005\022\n\n\002lv\030\010 \001(\005\"S\n\025ReqToWordGe"
    "tWarReport\022\r\n\005IsEnd\030\001 \001(\010\022+\n\006report\030\002 \003("
    "\0132\033.MapInstanceProto.WarReport\"\303\001\n\025ReqTo"
    "GameGetArenaInfo\022\026\n\016challengeTimes\030\001 \001(\005"
    "\022\026\n\016alreadyRefresh\030\002 \001(\005\022\027\n\017alreadyAddCh"
    "all\030\003 \001(\005\022\017\n\007Ranking\030\004 \001(\005\022\023\n\013historyRan"
    "k\030\005 \001(\005\022;\n\rhistoryReward\030\006 \001(\0132$.MapInst"
    "anceProto.ArenaHistoryReward\"8\n\022ArenaHis"
    "toryReward\022\016\n\006reward\030\001 \003(\005\022\022\n\nhavaReward"
    "\030\002 \003(\005\"#\n\025ReqArenaHistoryReward\022\n\n\002id\030\001 "
    "\002(\005\"0\n\025RspArenaHistoryReward\022\013\n\003ret\030\001 \002("
    "\005\022\n\n\002id\030\002 \001(\005\"b\n\tWarReport\022\020\n\010charname\030\001"
    " \001(\t\022\017\n\007ranking\030\002 \001(\005\022\r\n\005iswin\030\003 \001(\010\022\024\n\014"
    "ischallenger\030\004 \001(\010\022\r\n\005times\030\005 \001(\003\"\023\n\021Can"
    "celAreanCDTime\"&\n\027ReturnCancelAreanCDTim"
    "e\022\013\n\003ret\030\001 \001(\005\"\"\n\021AddChallengeTimes\022\r\n\005t"
    "imes\030\001 \002(\005\"N\n\027ReturnAddChallengeTimes\022\013\n"
    "\003ret\030\001 \001(\005\022\r\n\005count\030\002 \001(\005\022\027\n\017alreadyAddC"
    "hall\030\003 \001(\005\"\026\n\024ClientReqAreanReward\"G\n\025GM"
    "ToClientCompeteOver\022\021\n\tissuccess\030\001 \002(\010\022\013"
    "\n\003exp\030\002 \001(\005\022\016\n\006credit\030\003 \001(\005\"\236\001\n\020SysRanki"
    "ngReward\022\013\n\003ret\030\001 \002(\003\022\014\n\004retf\030\002 \001(\005\022\014\n\004r"
    "ets\030\003 \001(\005\022\017\n\007Ranking\030\004 \001(\005\022\023\n\013historyRan"
    "k\030\005 \001(\005\022;\n\rhistoryReward\030\006 \001(\0132$.MapInst"
    "anceProto.ArenaHistoryReward\"\026\n\024ClientRe"
    "gRankingName\"8\n\025WSToClientRankingName\022\020\n"
    "\010charname\030\001 \003(\t\022\r\n\005viplv\030\002 \003(\005\"\024\n\022Client"
    "ReqGroupInfo\"\?\n\022GMToClentGroupInfo\022)\n\004in"
    "fo\030\001 \003(\0132\033.MapInstanceProto.GroupInfo\"\'\n"
    "\tGroupInfo\022\r\n\005mapid\030\001 \002(\005\022\013\n\003num\030\002 \001(\005\"%"
    "\n\024ClientReqAllTeamInfo\022\r\n\005mapid\030\001 \002(\005\"g\n"
    "\024WSToClentAllTeamInfo\022\r\n\005mapid\030\001 \002(\005\022\014\n\004"
    "page\030\002 \001(\005\0222\n\013allteaminfo\030\003 \003(\0132\035.MapIns"
    "tanceProto.AllTeamInfo\"\200\001\n\013AllTeamInfo\022\016"
    "\n\006teamid\030\001 \002(\003\022\020\n\010charname\030\002 \001(\t\022\013\n\003num\030"
    "\003 \001(\005\022\r\n\005fight\030\004 \001(\005\022\014\n\004code\030\005 \001(\010\022\013\n\003vi"
    "p\030\006 \001(\005\022\013\n\003sex\030\007 \001(\005\022\013\n\003job\030\010 \001(\005\"D\n\021Cli"
    "entReqJoinTeam\022\016\n\006teamid\030\001 \002(\003\022\020\n\010passwo"
    "rd\030\002 \001(\t\022\r\n\005mapid\030\003 \001(\005\"\225\001\n\024WSToClentReq"
    "JoinTeam\022\013\n\003ret\030\001 \002(\005\022\r\n\005mapid\030\002 \001(\005\022\016\n\006"
    "teamid\030\003 \001(\003\022\r\n\005fight\030\004 \001(\005\022\014\n\004flag\030\005 \001("
    "\010\0224\n\nmemberifno\030\006 \003(\0132 .MapInstanceProto"
    ".TeammemberInfo\"\210\001\n\016TeammemberInfo\022\016\n\006ch"
    "arid\030\001 \001(\003\022\020\n\010charname\030\002 \001(\t\022\r\n\005fight\030\003 "
    "\001(\005\022\017\n\007captain\030\004 \001(\010\022\r\n\005ready\030\005 \001(\010\022\013\n\003j"
    "ob\030\006 \001(\005\022\013\n\003sex\030\007 \001(\010\022\013\n\003vip\030\010 \001(\005\"\'\n\026Cl"
    "ientReqQuickJoinTeam\022\r\n\005mapid\030\001 \002(\005\"S\n\023C"
    "lientReqCreateTeam\022\r\n\005mapid\030\001 \002(\005\022\r\n\005fig"
    "ht\030\002 \001(\005\022\020\n\010password\030\003 \001(\t\022\014\n\004flag\030\004 \001(\010"
    "\"o\n\026WSToClentReqCreateTeam\022\013\n\003ret\030\001 \002(\005\022"
    "\r\n\005mapid\030\002 \001(\005\022\016\n\006teamid\030\003 \001(\003\022\014\n\004flag\030\004"
    " \001(\010\022\014\n\004code\030\005 \001(\010\022\r\n\005fight\030\006 \001(\005\"#\n\022Cli"
    "entReqTeamReady\022\r\n\005mapid\030\001 \002(\005\"%\n\026WSToCl"
    "ientReqTeamReady\022\013\n\003ret\030\001 \002(\005\"$\n\022WSToCli"
    "entSimReady\022\016\n\006charid\030\001 \002(\003\"(\n\027ClientSim"
    "FindTeamMember\022\r\n\005mapid\030\001 \002(\005\"U\n\030WSToCli"
    "entFindTeamMember\022\016\n\006teamid\030\001 \002(\003\022\r\n\005map"
    "id\030\002 \001(\005\022\014\n\004code\030\003 \001(\010\022\014\n\004name\030\004 \001(\t\"4\n\023"
    "ClientReqKickMember\022\r\n\005mapid\030\001 \002(\005\022\016\n\006ch"
    "arid\030\002 \001(\003\"3\n\024WSToClientKickMember\022\013\n\003re"
    "t\030\001 \002(\005\022\016\n\006charid\030\002 \001(\003\"#\n\021WSToClientSim"
    "Kick\022\016\n\006charid\030\001 \001(\003\"&\n\025ClientReqEnterTe"
    "amMap\022\r\n\005mapid\030\001 \002(\005\"7\n\026WSToClientEnterT"
    "eamMap\022\013\n\003ret\030\001 \002(\005\022\020\n\010instance\030\002 \001(\003\")\n"
    "\025WSToClientSimInstance\022\020\n\010instance\030\001 \001(\003"
    "\"E\n\025GMToClientSimHarmRank\022,\n\010harminfo\030\001 "
    "\003(\0132\032.MapInstanceProto.HarmRank\":\n\010HarmR"
    "ank\022\016\n\006charid\030\001 \002(\003\022\020\n\010charname\030\002 \001(\t\022\014\n"
    "\004harm\030\003 \001(\002\"5\n\023WSToClientSimOnline\022\016\n\006ch"
    "arid\030\001 \002(\003\022\016\n\006online\030\002 \001(\010\"\"\n\021ClientReqE"
    "xitTeam\022\r\n\005mapid\030\001 \002(\005\"!\n\022WSToClientExit"
    "Team\022\013\n\003ret\030\001 \002(\005\"8\n\025WSToClientSimExitTe"
    "am\022\016\n\006charid\030\001 \002(\003\022\017\n\007captain\030\002 \001(\003\"\037\n\rG"
    "MToWSDelTeam\022\016\n\006teamid\030\001 \002(\003\"c\n\021GMToClie"
    "ntLottery\022\013\n\003ret\030\001 \002(\005\022\016\n\006FlopID\030\002 \001(\005\022\016"
    "\n\006ItemID\030\003 \001(\005\022\017\n\007ItemNum\030\004 \001(\005\022\020\n\010BindT"
    "ype\030\005 \001(\005\"\243\001\n\025SimSweepInstanceAward\022\r\n\005m"
    "apid\030\001 \002(\005\022\023\n\013elapsedTime\030\002 \002(\005\022\022\n\naward"
    "Money\030\003 \002(\005\022\020\n\010awardExp\030\004 \002(\005\022\026\n\016awardIn"
    "furiate\030\005 \002(\005\022(\n\005items\030\006 \003(\0132\031.CharLogin"
    ".ClientItemInfo\"V\n\022SysInstanceRanking\022\r\n"
    "\005mapid\030\001 \002(\005\022\023\n\013elapsedTime\030\002 \001(\005\022\014\n\004typ"
    "e\030\003 \001(\005\022\016\n\006charId\030\004 \001(\003\"#\n\022AckInstanceRa"
    "nking\022\r\n\005mapid\030\001 \002(\005\"W\n\022RetInstanceRanki"
    "ng\022\013\n\003ret\030\001 \002(\005\022\023\n\013elapsedTime\030\002 \001(\005\022\020\n\010"
    "charname\030\003 \001(\t\022\r\n\005mapid\030\004 \001(\005\"#\n\022GetInst"
    "anceRanking\022\r\n\005mapid\030\001 \002(\005\";\n\025ReturnInst"
    "anceRanking\022\r\n\005mapid\030\001 \002(\005\022\023\n\013elapsedTim"
    "e\030\002 \001(\005\"G\n\rGroupInstance\0226\n\tgroupList\030\001 "
    "\003(\0132#.MapInstanceProto.InstanceGroupList"
    "\"\?\n\021InstanceGroupList\022\r\n\005mapId\030\001 \002(\005\022\013\n\003"
    "num\030\002 \001(\005\022\016\n\006buynum\030\003 \001(\005\"\'\n\026ReqCostByGr"
    "oupInstance\022\r\n\005mapId\030\001 \002(\005\"Q\n\026RetCostByG"
    "roupInstance\022\013\n\003ret\030\001 \002(\005\022\r\n\005mapId\030\002 \001(\005"
    "\022\013\n\003num\030\003 \001(\005\022\016\n\006buynum\030\004 \001(\005\"\021\n\017ReqAren"
    "aRefresh\"q\n\017RetArenaRefresh\022\013\n\003err\030\001 \002(\005"
    "\022\026\n\016alreadyRefresh\030\002 \002(\005\0229\n\totherInfo\030\003 "
    "\003(\0132&.MapInstanceProto.OtherPlayerArenaI"
    "nfo\")\n\025ReqWSArenaChallPlayer\022\020\n\010rankings"
    "\030\001 \003(\005\"S\n\025RetWSArenaChallPlayer\022:\n\nplaye"
    "rInfo\030\001 \003(\0132&.MapInstanceProto.OtherPlay"
    "erArenaInfo\"\'\n\023ReqWSArenaChallRank\022\020\n\010ra"
    "nkings\030\001 \003(\005\"`\n\032GMToClientSweepAllInstan"
    "ce\022\013\n\003ret\030\001 \002(\005\0225\n\004ssia\030\002 \003(\0132\'.MapInsta"
    "nceProto.SimSweepInstanceAward\"^\n\rEliteI"
    "nstance\022\013\n\003num\030\001 \001(\005\022\r\n\005reset\030\002 \001(\005\0221\n\004l"
    "ist\030\003 \003(\0132#.MapInstanceProto.InstanceEli"
    "teList\"0\n\021InstanceEliteList\022\r\n\005mapId\030\001 \002"
    "(\005\022\014\n\004pass\030\002 \001(\005\"f\n\021CauchemarInstance\022\013\n"
    "\003num\030\001 \001(\005\022\r\n\005reset\030\002 \001(\005\0225\n\004list\030\003 \003(\0132"
    "\'.MapInstanceProto.InstanceCauchemarList"
    "\"4\n\025InstanceCauchemarList\022\r\n\005mapId\030\001 \002(\005"
    "\022\014\n\004pass\030\002 \001(\005\"3\n\023ReqInviteMemberList\022\r\n"
    "\005mapId\030\001 \002(\005\022\r\n\005ntype\030\002 \001(\005\"\\\n\023RetInvite"
    "MemberList\022\r\n\005ntype\030\001 \002(\005\0226\n\nmemberlist\030"
    "\002 \003(\0132\".MapInstanceProto.InviteMemberLis"
    "t\"K\n\020InviteMemberList\022\016\n\006charId\030\001 \002(\003\022\014\n"
    "\004name\030\002 \001(\t\022\n\n\002lv\030\003 \001(\005\022\r\n\005fight\030\004 \001(\005\"0"
    "\n\017ReqInviteMember\022\016\n\006charId\030\001 \002(\003\022\r\n\005map"
    "Id\030\002 \001(\005\".\n\017RetInviteMember\022\013\n\003ret\030\001 \002(\005"
    "\022\016\n\006charId\030\002 \001(\003\"\?\n\020RetInvitedMember\022\016\n\006"
    "teamid\030\001 \002(\003\022\r\n\005mapid\030\002 \001(\005\022\014\n\004name\030\003 \001("
    "\t\"y\n\020AckChallengeInfo\022\r\n\005layer\030\001 \002(\005\022\020\n\010"
    "maxlayer\030\002 \001(\005\022\017\n\007issweep\030\003 \001(\010\022\021\n\tsweep"
    "time\030\004 \001(\005\022\021\n\ttotaltime\030\005 \001(\005\022\r\n\005reset\030\006"
    " \001(\005\"\035\n\014ReqLayerRank\022\r\n\005layer\030\001 \002(\005\"\316\001\n\014"
    "AckLayerRank\022\r\n\005layer\030\001 \002(\005\022\021\n\tfirstname"
    "\030\002 \001(\014\022\022\n\nfirstlevel\030\003 \001(\005\022\022\n\nfirstfight"
    "\030\004 \001(\005\022\020\n\010lastname\030\005 \001(\014\022\021\n\tlastlevel\030\006 "
    "\001(\005\022\021\n\tlastfight\030\007 \001(\005\022\022\n\nfamousname\030\010 \001"
    "(\014\022\023\n\013famouslevel\030\t \001(\005\022\023\n\013famousfight\030\n"
    " \001(\005\"-\n\010AckSweep\022\014\n\004code\030\001 \002(\005\022\023\n\013elapse"
    "dTime\030\002 \001(\005\"m\n\013ACkEndSweep\022\014\n\004code\030\001 \002(\005"
    "\022\022\n\nstartlayer\030\002 \001(\005\022\020\n\010endlayer\030\003 \001(\005\022*"
    "\n\005prize\030\004 \003(\0132\033.MapInstanceProto.PrizeIt"
    "em\"&\n\013ReqExchange\022\n\n\002id\030\001 \002(\005\022\013\n\003num\030\002 \001"
    "(\005\"\'\n\013AckExchange\022\n\n\002id\030\001 \002(\005\022\014\n\004code\030\002 "
    "\001(\005\"$\n\tPrizeItem\022\n\n\002id\030\001 \002(\005\022\013\n\003num\030\002 \001("
    "\005\"g\n\rPassChallenge\022\016\n\006charid\030\001 \002(\003\022\014\n\004na"
    "me\030\002 \001(\014\022\r\n\005layer\030\003 \001(\005\022\r\n\005fight\030\004 \001(\005\022\r"
    "\n\005level\030\005 \001(\005\022\013\n\003vip\030\006 \001(\005\"\030\n\tGatherBox\022"
    "\013\n\003key\030\001 \002(\005\"U\n\014AckGatherBox\022\013\n\003key\030\001 \002("
    "\005\022\014\n\004code\030\002 \001(\005\022*\n\005items\030\003 \003(\0132\033.MapInst"
    "anceProto.PrizeItem\"H\n\020AdvancedInstance\022"
    "4\n\004list\030\001 \003(\0132&.MapInstanceProto.Instanc"
    "eAdvancedList\"]\n\024InstanceAdvancedList\022\r\n"
    "\005mapId\030\001 \002(\005\022\014\n\004pass\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022"
    "\014\n\004time\030\004 \001(\005\022\r\n\005reset\030\005 \001(\005\")\n\030ClientRe"
    "qTeamChanceReady\022\r\n\005mapid\030\001 \002(\005\"+\n\034WSToC"
    "lientReqTeamChanceReady\022\013\n\003ret\030\001 \002(\005\"*\n\030"
    "WSToClientSimChanceReady\022\016\n\006charid\030\001 \002(\003"
    "\"h\n\022CommonInstanceInfo\022\013\n\003num\030\001 \001(\005\022\r\n\005r"
    "eset\030\002 \001(\005\0226\n\004info\030\003 \003(\0132(.MapInstancePr"
    "oto.CommonInstanceInfoList\"5\n\026CommonInst"
    "anceInfoList\022\r\n\005mapId\030\001 \002(\005\022\014\n\004pass\030\002 \001("
    "\005\">\n\013VipInstance\022/\n\004info\030\001 \003(\0132!.MapInst"
    "anceProto.VipInstanceList\"I\n\017VipInstance"
    "List\022\r\n\005mapId\030\001 \002(\005\022\014\n\004pass\030\002 \001(\005\022\013\n\003num"
    "\030\003 \001(\005\022\014\n\004time\030\004 \001(\003\"b\n\017ExpInstanceInfo\022"
    "\013\n\003num\030\001 \001(\005\022\r\n\005reset\030\002 \001(\005\0223\n\004info\030\003 \003("
    "\0132%.MapInstanceProto.ExpInstanceInfoList"
    "\"2\n\023ExpInstanceInfoList\022\r\n\005mapId\030\001 \002(\005\022\014"
    "\n\004pass\030\002 \001(\005\"f\n\021MoneyInstanceInfo\022\013\n\003num"
    "\030\001 \001(\005\022\r\n\005reset\030\002 \001(\005\0225\n\004info\030\003 \003(\0132\'.Ma"
    "pInstanceProto.MoneyInstanceInfoList\"4\n\025"
    "MoneyInstanceInfoList\022\r\n\005mapId\030\001 \002(\005\022\014\n\004"
    "pass\030\002 \001(\005", 9370);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharLogin/MapInstanceProto.proto", &protobuf_RegisterTypes);
  ReqCreateInstance::default_instance_ = new ReqCreateInstance();
  RetCreateInstance::default_instance_ = new RetCreateInstance();
  ReqInstanceQuit::default_instance_ = new ReqInstanceQuit();
  RetInstanceQuit::default_instance_ = new RetInstanceQuit();
  SimInstanceUpdate::default_instance_ = new SimInstanceUpdate();
  SimInstanceEnd::default_instance_ = new SimInstanceEnd();
  SimInstanceAward::default_instance_ = new SimInstanceAward();
  ReqInstanceSweep::default_instance_ = new ReqInstanceSweep();
  RetInstanceSweep::default_instance_ = new RetInstanceSweep();
  ReqInstanceSweepSpeedUp::default_instance_ = new ReqInstanceSweepSpeedUp();
  RetInstanceSweepSpeedUp::default_instance_ = new RetInstanceSweepSpeedUp();
  OpenInstanceSweep::default_instance_ = new OpenInstanceSweep();
  SimInstanceSweepEnd::default_instance_ = new SimInstanceSweepEnd();
  ReqInstanceReset::default_instance_ = new ReqInstanceReset();
  RetInstanceReset::default_instance_ = new RetInstanceReset();
  ReqResetAllInstances::default_instance_ = new ReqResetAllInstances();
  RetResetAllInstances::default_instance_ = new RetResetAllInstances();
  ReqWSCreateInstance::default_instance_ = new ReqWSCreateInstance();
  ReqDeleteInstance::default_instance_ = new ReqDeleteInstance();
  ReqGroupInstanceReady::default_instance_ = new ReqGroupInstanceReady();
  RetGroupInstanceReady::default_instance_ = new RetGroupInstanceReady();
  ReqGroupEnterInstance::default_instance_ = new ReqGroupEnterInstance();
  RetGroupEnterInstance::default_instance_ = new RetGroupEnterInstance();
  ReqMemberFlop::default_instance_ = new ReqMemberFlop();
  GMToClientMemberFlop::default_instance_ = new GMToClientMemberFlop();
  RetMemberFlop::default_instance_ = new RetMemberFlop();
  ReqGetInstanceAward::default_instance_ = new ReqGetInstanceAward();
  ReqEnterInstance::default_instance_ = new ReqEnterInstance();
  ToGTGetInstanceTeamID::default_instance_ = new ToGTGetInstanceTeamID();
  RetGetInstanceTeamID::default_instance_ = new RetGetInstanceTeamID();
  InstanceTeamInfo::default_instance_ = new InstanceTeamInfo();
  ToClientLeaveInstance::default_instance_ = new ToClientLeaveInstance();
  ToGTAwardInfo::default_instance_ = new ToGTAwardInfo();
  ClientReqCreateInstance::default_instance_ = new ClientReqCreateInstance();
  GMReqWSCreateInstance::default_instance_ = new GMReqWSCreateInstance();
  AckToGMCreateInstance::default_instance_ = new AckToGMCreateInstance();
  ClientReqWorldArenaInfo::default_instance_ = new ClientReqWorldArenaInfo();
  ClientReqWarReport::default_instance_ = new ClientReqWarReport();
  ReqToWorldGetArenaInfo::default_instance_ = new ReqToWorldGetArenaInfo();
  OtherPlayerArenaInfo::default_instance_ = new OtherPlayerArenaInfo();
  ReqToWordGetWarReport::default_instance_ = new ReqToWordGetWarReport();
  ReqToGameGetArenaInfo::default_instance_ = new ReqToGameGetArenaInfo();
  ArenaHistoryReward::default_instance_ = new ArenaHistoryReward();
  ReqArenaHistoryReward::default_instance_ = new ReqArenaHistoryReward();
  RspArenaHistoryReward::default_instance_ = new RspArenaHistoryReward();
  WarReport::default_instance_ = new WarReport();
  CancelAreanCDTime::default_instance_ = new CancelAreanCDTime();
  ReturnCancelAreanCDTime::default_instance_ = new ReturnCancelAreanCDTime();
  AddChallengeTimes::default_instance_ = new AddChallengeTimes();
  ReturnAddChallengeTimes::default_instance_ = new ReturnAddChallengeTimes();
  ClientReqAreanReward::default_instance_ = new ClientReqAreanReward();
  GMToClientCompeteOver::default_instance_ = new GMToClientCompeteOver();
  SysRankingReward::default_instance_ = new SysRankingReward();
  ClientRegRankingName::default_instance_ = new ClientRegRankingName();
  WSToClientRankingName::default_instance_ = new WSToClientRankingName();
  ClientReqGroupInfo::default_instance_ = new ClientReqGroupInfo();
  GMToClentGroupInfo::default_instance_ = new GMToClentGroupInfo();
  GroupInfo::default_instance_ = new GroupInfo();
  ClientReqAllTeamInfo::default_instance_ = new ClientReqAllTeamInfo();
  WSToClentAllTeamInfo::default_instance_ = new WSToClentAllTeamInfo();
  AllTeamInfo::default_instance_ = new AllTeamInfo();
  ClientReqJoinTeam::default_instance_ = new ClientReqJoinTeam();
  WSToClentReqJoinTeam::default_instance_ = new WSToClentReqJoinTeam();
  TeammemberInfo::default_instance_ = new TeammemberInfo();
  ClientReqQuickJoinTeam::default_instance_ = new ClientReqQuickJoinTeam();
  ClientReqCreateTeam::default_instance_ = new ClientReqCreateTeam();
  WSToClentReqCreateTeam::default_instance_ = new WSToClentReqCreateTeam();
  ClientReqTeamReady::default_instance_ = new ClientReqTeamReady();
  WSToClientReqTeamReady::default_instance_ = new WSToClientReqTeamReady();
  WSToClientSimReady::default_instance_ = new WSToClientSimReady();
  ClientSimFindTeamMember::default_instance_ = new ClientSimFindTeamMember();
  WSToClientFindTeamMember::default_instance_ = new WSToClientFindTeamMember();
  ClientReqKickMember::default_instance_ = new ClientReqKickMember();
  WSToClientKickMember::default_instance_ = new WSToClientKickMember();
  WSToClientSimKick::default_instance_ = new WSToClientSimKick();
  ClientReqEnterTeamMap::default_instance_ = new ClientReqEnterTeamMap();
  WSToClientEnterTeamMap::default_instance_ = new WSToClientEnterTeamMap();
  WSToClientSimInstance::default_instance_ = new WSToClientSimInstance();
  GMToClientSimHarmRank::default_instance_ = new GMToClientSimHarmRank();
  HarmRank::default_instance_ = new HarmRank();
  WSToClientSimOnline::default_instance_ = new WSToClientSimOnline();
  ClientReqExitTeam::default_instance_ = new ClientReqExitTeam();
  WSToClientExitTeam::default_instance_ = new WSToClientExitTeam();
  WSToClientSimExitTeam::default_instance_ = new WSToClientSimExitTeam();
  GMToWSDelTeam::default_instance_ = new GMToWSDelTeam();
  GMToClientLottery::default_instance_ = new GMToClientLottery();
  SimSweepInstanceAward::default_instance_ = new SimSweepInstanceAward();
  SysInstanceRanking::default_instance_ = new SysInstanceRanking();
  AckInstanceRanking::default_instance_ = new AckInstanceRanking();
  RetInstanceRanking::default_instance_ = new RetInstanceRanking();
  GetInstanceRanking::default_instance_ = new GetInstanceRanking();
  ReturnInstanceRanking::default_instance_ = new ReturnInstanceRanking();
  GroupInstance::default_instance_ = new GroupInstance();
  InstanceGroupList::default_instance_ = new InstanceGroupList();
  ReqCostByGroupInstance::default_instance_ = new ReqCostByGroupInstance();
  RetCostByGroupInstance::default_instance_ = new RetCostByGroupInstance();
  ReqArenaRefresh::default_instance_ = new ReqArenaRefresh();
  RetArenaRefresh::default_instance_ = new RetArenaRefresh();
  ReqWSArenaChallPlayer::default_instance_ = new ReqWSArenaChallPlayer();
  RetWSArenaChallPlayer::default_instance_ = new RetWSArenaChallPlayer();
  ReqWSArenaChallRank::default_instance_ = new ReqWSArenaChallRank();
  GMToClientSweepAllInstance::default_instance_ = new GMToClientSweepAllInstance();
  EliteInstance::default_instance_ = new EliteInstance();
  InstanceEliteList::default_instance_ = new InstanceEliteList();
  CauchemarInstance::default_instance_ = new CauchemarInstance();
  InstanceCauchemarList::default_instance_ = new InstanceCauchemarList();
  ReqInviteMemberList::default_instance_ = new ReqInviteMemberList();
  RetInviteMemberList::default_instance_ = new RetInviteMemberList();
  InviteMemberList::default_instance_ = new InviteMemberList();
  ReqInviteMember::default_instance_ = new ReqInviteMember();
  RetInviteMember::default_instance_ = new RetInviteMember();
  RetInvitedMember::default_instance_ = new RetInvitedMember();
  AckChallengeInfo::default_instance_ = new AckChallengeInfo();
  ReqLayerRank::default_instance_ = new ReqLayerRank();
  AckLayerRank::default_instance_ = new AckLayerRank();
  AckSweep::default_instance_ = new AckSweep();
  ACkEndSweep::default_instance_ = new ACkEndSweep();
  ReqExchange::default_instance_ = new ReqExchange();
  AckExchange::default_instance_ = new AckExchange();
  PrizeItem::default_instance_ = new PrizeItem();
  PassChallenge::default_instance_ = new PassChallenge();
  GatherBox::default_instance_ = new GatherBox();
  AckGatherBox::default_instance_ = new AckGatherBox();
  AdvancedInstance::default_instance_ = new AdvancedInstance();
  InstanceAdvancedList::default_instance_ = new InstanceAdvancedList();
  ClientReqTeamChanceReady::default_instance_ = new ClientReqTeamChanceReady();
  WSToClientReqTeamChanceReady::default_instance_ = new WSToClientReqTeamChanceReady();
  WSToClientSimChanceReady::default_instance_ = new WSToClientSimChanceReady();
  CommonInstanceInfo::default_instance_ = new CommonInstanceInfo();
  CommonInstanceInfoList::default_instance_ = new CommonInstanceInfoList();
  VipInstance::default_instance_ = new VipInstance();
  VipInstanceList::default_instance_ = new VipInstanceList();
  ExpInstanceInfo::default_instance_ = new ExpInstanceInfo();
  ExpInstanceInfoList::default_instance_ = new ExpInstanceInfoList();
  MoneyInstanceInfo::default_instance_ = new MoneyInstanceInfo();
  MoneyInstanceInfoList::default_instance_ = new MoneyInstanceInfoList();
  ReqCreateInstance::default_instance_->InitAsDefaultInstance();
  RetCreateInstance::default_instance_->InitAsDefaultInstance();
  ReqInstanceQuit::default_instance_->InitAsDefaultInstance();
  RetInstanceQuit::default_instance_->InitAsDefaultInstance();
  SimInstanceUpdate::default_instance_->InitAsDefaultInstance();
  SimInstanceEnd::default_instance_->InitAsDefaultInstance();
  SimInstanceAward::default_instance_->InitAsDefaultInstance();
  ReqInstanceSweep::default_instance_->InitAsDefaultInstance();
  RetInstanceSweep::default_instance_->InitAsDefaultInstance();
  ReqInstanceSweepSpeedUp::default_instance_->InitAsDefaultInstance();
  RetInstanceSweepSpeedUp::default_instance_->InitAsDefaultInstance();
  OpenInstanceSweep::default_instance_->InitAsDefaultInstance();
  SimInstanceSweepEnd::default_instance_->InitAsDefaultInstance();
  ReqInstanceReset::default_instance_->InitAsDefaultInstance();
  RetInstanceReset::default_instance_->InitAsDefaultInstance();
  ReqResetAllInstances::default_instance_->InitAsDefaultInstance();
  RetResetAllInstances::default_instance_->InitAsDefaultInstance();
  ReqWSCreateInstance::default_instance_->InitAsDefaultInstance();
  ReqDeleteInstance::default_instance_->InitAsDefaultInstance();
  ReqGroupInstanceReady::default_instance_->InitAsDefaultInstance();
  RetGroupInstanceReady::default_instance_->InitAsDefaultInstance();
  ReqGroupEnterInstance::default_instance_->InitAsDefaultInstance();
  RetGroupEnterInstance::default_instance_->InitAsDefaultInstance();
  ReqMemberFlop::default_instance_->InitAsDefaultInstance();
  GMToClientMemberFlop::default_instance_->InitAsDefaultInstance();
  RetMemberFlop::default_instance_->InitAsDefaultInstance();
  ReqGetInstanceAward::default_instance_->InitAsDefaultInstance();
  ReqEnterInstance::default_instance_->InitAsDefaultInstance();
  ToGTGetInstanceTeamID::default_instance_->InitAsDefaultInstance();
  RetGetInstanceTeamID::default_instance_->InitAsDefaultInstance();
  InstanceTeamInfo::default_instance_->InitAsDefaultInstance();
  ToClientLeaveInstance::default_instance_->InitAsDefaultInstance();
  ToGTAwardInfo::default_instance_->InitAsDefaultInstance();
  ClientReqCreateInstance::default_instance_->InitAsDefaultInstance();
  GMReqWSCreateInstance::default_instance_->InitAsDefaultInstance();
  AckToGMCreateInstance::default_instance_->InitAsDefaultInstance();
  ClientReqWorldArenaInfo::default_instance_->InitAsDefaultInstance();
  ClientReqWarReport::default_instance_->InitAsDefaultInstance();
  ReqToWorldGetArenaInfo::default_instance_->InitAsDefaultInstance();
  OtherPlayerArenaInfo::default_instance_->InitAsDefaultInstance();
  ReqToWordGetWarReport::default_instance_->InitAsDefaultInstance();
  ReqToGameGetArenaInfo::default_instance_->InitAsDefaultInstance();
  ArenaHistoryReward::default_instance_->InitAsDefaultInstance();
  ReqArenaHistoryReward::default_instance_->InitAsDefaultInstance();
  RspArenaHistoryReward::default_instance_->InitAsDefaultInstance();
  WarReport::default_instance_->InitAsDefaultInstance();
  CancelAreanCDTime::default_instance_->InitAsDefaultInstance();
  ReturnCancelAreanCDTime::default_instance_->InitAsDefaultInstance();
  AddChallengeTimes::default_instance_->InitAsDefaultInstance();
  ReturnAddChallengeTimes::default_instance_->InitAsDefaultInstance();
  ClientReqAreanReward::default_instance_->InitAsDefaultInstance();
  GMToClientCompeteOver::default_instance_->InitAsDefaultInstance();
  SysRankingReward::default_instance_->InitAsDefaultInstance();
  ClientRegRankingName::default_instance_->InitAsDefaultInstance();
  WSToClientRankingName::default_instance_->InitAsDefaultInstance();
  ClientReqGroupInfo::default_instance_->InitAsDefaultInstance();
  GMToClentGroupInfo::default_instance_->InitAsDefaultInstance();
  GroupInfo::default_instance_->InitAsDefaultInstance();
  ClientReqAllTeamInfo::default_instance_->InitAsDefaultInstance();
  WSToClentAllTeamInfo::default_instance_->InitAsDefaultInstance();
  AllTeamInfo::default_instance_->InitAsDefaultInstance();
  ClientReqJoinTeam::default_instance_->InitAsDefaultInstance();
  WSToClentReqJoinTeam::default_instance_->InitAsDefaultInstance();
  TeammemberInfo::default_instance_->InitAsDefaultInstance();
  ClientReqQuickJoinTeam::default_instance_->InitAsDefaultInstance();
  ClientReqCreateTeam::default_instance_->InitAsDefaultInstance();
  WSToClentReqCreateTeam::default_instance_->InitAsDefaultInstance();
  ClientReqTeamReady::default_instance_->InitAsDefaultInstance();
  WSToClientReqTeamReady::default_instance_->InitAsDefaultInstance();
  WSToClientSimReady::default_instance_->InitAsDefaultInstance();
  ClientSimFindTeamMember::default_instance_->InitAsDefaultInstance();
  WSToClientFindTeamMember::default_instance_->InitAsDefaultInstance();
  ClientReqKickMember::default_instance_->InitAsDefaultInstance();
  WSToClientKickMember::default_instance_->InitAsDefaultInstance();
  WSToClientSimKick::default_instance_->InitAsDefaultInstance();
  ClientReqEnterTeamMap::default_instance_->InitAsDefaultInstance();
  WSToClientEnterTeamMap::default_instance_->InitAsDefaultInstance();
  WSToClientSimInstance::default_instance_->InitAsDefaultInstance();
  GMToClientSimHarmRank::default_instance_->InitAsDefaultInstance();
  HarmRank::default_instance_->InitAsDefaultInstance();
  WSToClientSimOnline::default_instance_->InitAsDefaultInstance();
  ClientReqExitTeam::default_instance_->InitAsDefaultInstance();
  WSToClientExitTeam::default_instance_->InitAsDefaultInstance();
  WSToClientSimExitTeam::default_instance_->InitAsDefaultInstance();
  GMToWSDelTeam::default_instance_->InitAsDefaultInstance();
  GMToClientLottery::default_instance_->InitAsDefaultInstance();
  SimSweepInstanceAward::default_instance_->InitAsDefaultInstance();
  SysInstanceRanking::default_instance_->InitAsDefaultInstance();
  AckInstanceRanking::default_instance_->InitAsDefaultInstance();
  RetInstanceRanking::default_instance_->InitAsDefaultInstance();
  GetInstanceRanking::default_instance_->InitAsDefaultInstance();
  ReturnInstanceRanking::default_instance_->InitAsDefaultInstance();
  GroupInstance::default_instance_->InitAsDefaultInstance();
  InstanceGroupList::default_instance_->InitAsDefaultInstance();
  ReqCostByGroupInstance::default_instance_->InitAsDefaultInstance();
  RetCostByGroupInstance::default_instance_->InitAsDefaultInstance();
  ReqArenaRefresh::default_instance_->InitAsDefaultInstance();
  RetArenaRefresh::default_instance_->InitAsDefaultInstance();
  ReqWSArenaChallPlayer::default_instance_->InitAsDefaultInstance();
  RetWSArenaChallPlayer::default_instance_->InitAsDefaultInstance();
  ReqWSArenaChallRank::default_instance_->InitAsDefaultInstance();
  GMToClientSweepAllInstance::default_instance_->InitAsDefaultInstance();
  EliteInstance::default_instance_->InitAsDefaultInstance();
  InstanceEliteList::default_instance_->InitAsDefaultInstance();
  CauchemarInstance::default_instance_->InitAsDefaultInstance();
  InstanceCauchemarList::default_instance_->InitAsDefaultInstance();
  ReqInviteMemberList::default_instance_->InitAsDefaultInstance();
  RetInviteMemberList::default_instance_->InitAsDefaultInstance();
  InviteMemberList::default_instance_->InitAsDefaultInstance();
  ReqInviteMember::default_instance_->InitAsDefaultInstance();
  RetInviteMember::default_instance_->InitAsDefaultInstance();
  RetInvitedMember::default_instance_->InitAsDefaultInstance();
  AckChallengeInfo::default_instance_->InitAsDefaultInstance();
  ReqLayerRank::default_instance_->InitAsDefaultInstance();
  AckLayerRank::default_instance_->InitAsDefaultInstance();
  AckSweep::default_instance_->InitAsDefaultInstance();
  ACkEndSweep::default_instance_->InitAsDefaultInstance();
  ReqExchange::default_instance_->InitAsDefaultInstance();
  AckExchange::default_instance_->InitAsDefaultInstance();
  PrizeItem::default_instance_->InitAsDefaultInstance();
  PassChallenge::default_instance_->InitAsDefaultInstance();
  GatherBox::default_instance_->InitAsDefaultInstance();
  AckGatherBox::default_instance_->InitAsDefaultInstance();
  AdvancedInstance::default_instance_->InitAsDefaultInstance();
  InstanceAdvancedList::default_instance_->InitAsDefaultInstance();
  ClientReqTeamChanceReady::default_instance_->InitAsDefaultInstance();
  WSToClientReqTeamChanceReady::default_instance_->InitAsDefaultInstance();
  WSToClientSimChanceReady::default_instance_->InitAsDefaultInstance();
  CommonInstanceInfo::default_instance_->InitAsDefaultInstance();
  CommonInstanceInfoList::default_instance_->InitAsDefaultInstance();
  VipInstance::default_instance_->InitAsDefaultInstance();
  VipInstanceList::default_instance_->InitAsDefaultInstance();
  ExpInstanceInfo::default_instance_->InitAsDefaultInstance();
  ExpInstanceInfoList::default_instance_->InitAsDefaultInstance();
  MoneyInstanceInfo::default_instance_->InitAsDefaultInstance();
  MoneyInstanceInfoList::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharLogin_2fMapInstanceProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharLogin_2fMapInstanceProto_2eproto {
  StaticDescriptorInitializer_CharLogin_2fMapInstanceProto_2eproto() {
    protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  }
} static_descriptor_initializer_CharLogin_2fMapInstanceProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqCreateInstance::kInstanceIdFieldNumber;
const int ReqCreateInstance::kInstanceTypeFieldNumber;
#endif  // !_MSC_VER

ReqCreateInstance::ReqCreateInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCreateInstance::InitAsDefaultInstance() {
}

ReqCreateInstance::ReqCreateInstance(const ReqCreateInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCreateInstance::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = 0;
  instancetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCreateInstance::~ReqCreateInstance() {
  SharedDtor();
}

void ReqCreateInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCreateInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCreateInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCreateInstance_descriptor_;
}

const ReqCreateInstance& ReqCreateInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqCreateInstance* ReqCreateInstance::default_instance_ = NULL;

ReqCreateInstance* ReqCreateInstance::New() const {
  return new ReqCreateInstance;
}

void ReqCreateInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = 0;
    instancetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCreateInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 InstanceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_InstanceType;
        break;
      }

      // required int32 InstanceType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstanceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instancetype_)));
          set_has_instancetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCreateInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 InstanceId = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instanceid(), output);
  }

  // required int32 InstanceType = 2;
  if (has_instancetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instancetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCreateInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 InstanceId = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instanceid(), target);
  }

  // required int32 InstanceType = 2;
  if (has_instancetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instancetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCreateInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 InstanceId = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // required int32 InstanceType = 2;
    if (has_instancetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instancetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCreateInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCreateInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCreateInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCreateInstance::MergeFrom(const ReqCreateInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_instancetype()) {
      set_instancetype(from.instancetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCreateInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCreateInstance::CopyFrom(const ReqCreateInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCreateInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqCreateInstance::Swap(ReqCreateInstance* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(instancetype_, other->instancetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCreateInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCreateInstance_descriptor_;
  metadata.reflection = ReqCreateInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetCreateInstance::kDwErrorCodeFieldNumber;
const int RetCreateInstance::kNewInstanceIdFieldNumber;
#endif  // !_MSC_VER

RetCreateInstance::RetCreateInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetCreateInstance::InitAsDefaultInstance() {
}

RetCreateInstance::RetCreateInstance(const RetCreateInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetCreateInstance::SharedCtor() {
  _cached_size_ = 0;
  dwerrorcode_ = 0;
  newinstanceid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetCreateInstance::~RetCreateInstance() {
  SharedDtor();
}

void RetCreateInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetCreateInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetCreateInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetCreateInstance_descriptor_;
}

const RetCreateInstance& RetCreateInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetCreateInstance* RetCreateInstance::default_instance_ = NULL;

RetCreateInstance* RetCreateInstance::New() const {
  return new RetCreateInstance;
}

void RetCreateInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwerrorcode_ = 0;
    newinstanceid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetCreateInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwErrorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwerrorcode_)));
          set_has_dwerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NewInstanceId;
        break;
      }

      // optional int64 NewInstanceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NewInstanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &newinstanceid_)));
          set_has_newinstanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetCreateInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwerrorcode(), output);
  }

  // optional int64 NewInstanceId = 2;
  if (has_newinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->newinstanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetCreateInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwerrorcode(), target);
  }

  // optional int64 NewInstanceId = 2;
  if (has_newinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->newinstanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetCreateInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwErrorCode = 1;
    if (has_dwerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwerrorcode());
    }

    // optional int64 NewInstanceId = 2;
    if (has_newinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->newinstanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetCreateInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetCreateInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetCreateInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetCreateInstance::MergeFrom(const RetCreateInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwerrorcode()) {
      set_dwerrorcode(from.dwerrorcode());
    }
    if (from.has_newinstanceid()) {
      set_newinstanceid(from.newinstanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetCreateInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetCreateInstance::CopyFrom(const RetCreateInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetCreateInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetCreateInstance::Swap(RetCreateInstance* other) {
  if (other != this) {
    std::swap(dwerrorcode_, other->dwerrorcode_);
    std::swap(newinstanceid_, other->newinstanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetCreateInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetCreateInstance_descriptor_;
  metadata.reflection = RetCreateInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqInstanceQuit::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

ReqInstanceQuit::ReqInstanceQuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqInstanceQuit::InitAsDefaultInstance() {
}

ReqInstanceQuit::ReqInstanceQuit(const ReqInstanceQuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqInstanceQuit::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqInstanceQuit::~ReqInstanceQuit() {
  SharedDtor();
}

void ReqInstanceQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqInstanceQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqInstanceQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqInstanceQuit_descriptor_;
}

const ReqInstanceQuit& ReqInstanceQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqInstanceQuit* ReqInstanceQuit::default_instance_ = NULL;

ReqInstanceQuit* ReqInstanceQuit::New() const {
  return new ReqInstanceQuit;
}

void ReqInstanceQuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqInstanceQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 InstanceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqInstanceQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 InstanceId = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqInstanceQuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 InstanceId = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqInstanceQuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 InstanceId = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInstanceQuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqInstanceQuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqInstanceQuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqInstanceQuit::MergeFrom(const ReqInstanceQuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqInstanceQuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInstanceQuit::CopyFrom(const ReqInstanceQuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInstanceQuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqInstanceQuit::Swap(ReqInstanceQuit* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqInstanceQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqInstanceQuit_descriptor_;
  metadata.reflection = ReqInstanceQuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetInstanceQuit::kMapIDFieldNumber;
#endif  // !_MSC_VER

RetInstanceQuit::RetInstanceQuit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetInstanceQuit::InitAsDefaultInstance() {
}

RetInstanceQuit::RetInstanceQuit(const RetInstanceQuit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetInstanceQuit::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetInstanceQuit::~RetInstanceQuit() {
  SharedDtor();
}

void RetInstanceQuit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetInstanceQuit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetInstanceQuit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetInstanceQuit_descriptor_;
}

const RetInstanceQuit& RetInstanceQuit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetInstanceQuit* RetInstanceQuit::default_instance_ = NULL;

RetInstanceQuit* RetInstanceQuit::New() const {
  return new RetInstanceQuit;
}

void RetInstanceQuit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetInstanceQuit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 MapID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetInstanceQuit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 MapID = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetInstanceQuit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 MapID = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetInstanceQuit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 MapID = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetInstanceQuit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetInstanceQuit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetInstanceQuit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetInstanceQuit::MergeFrom(const RetInstanceQuit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetInstanceQuit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetInstanceQuit::CopyFrom(const RetInstanceQuit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetInstanceQuit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetInstanceQuit::Swap(RetInstanceQuit* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetInstanceQuit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetInstanceQuit_descriptor_;
  metadata.reflection = RetInstanceQuit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimInstanceUpdate::kRemainMonsterIDFieldNumber;
const int SimInstanceUpdate::kRemainMonsterNumFieldNumber;
const int SimInstanceUpdate::kRemaintimeFieldNumber;
#endif  // !_MSC_VER

SimInstanceUpdate::SimInstanceUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimInstanceUpdate::InitAsDefaultInstance() {
}

SimInstanceUpdate::SimInstanceUpdate(const SimInstanceUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimInstanceUpdate::SharedCtor() {
  _cached_size_ = 0;
  remaintime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimInstanceUpdate::~SimInstanceUpdate() {
  SharedDtor();
}

void SimInstanceUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimInstanceUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimInstanceUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimInstanceUpdate_descriptor_;
}

const SimInstanceUpdate& SimInstanceUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

SimInstanceUpdate* SimInstanceUpdate::default_instance_ = NULL;

SimInstanceUpdate* SimInstanceUpdate::New() const {
  return new SimInstanceUpdate;
}

void SimInstanceUpdate::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    remaintime_ = 0;
  }
  remainmonsterid_.Clear();
  remainmonsternum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimInstanceUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 remainMonsterID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainMonsterID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_remainmonsterid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_remainmonsterid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_remainMonsterID;
        if (input->ExpectTag(16)) goto parse_remainMonsterNum;
        break;
      }

      // repeated int32 remainMonsterNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_remainMonsterNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_remainmonsternum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_remainmonsternum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_remainMonsterNum;
        if (input->ExpectTag(25)) goto parse_remaintime;
        break;
      }

      // optional double remaintime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_remaintime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &remaintime_)));
          set_has_remaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimInstanceUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 remainMonsterID = 1;
  for (int i = 0; i < this->remainmonsterid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->remainmonsterid(i), output);
  }

  // repeated int32 remainMonsterNum = 2;
  for (int i = 0; i < this->remainmonsternum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->remainmonsternum(i), output);
  }

  // optional double remaintime = 3;
  if (has_remaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->remaintime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimInstanceUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 remainMonsterID = 1;
  for (int i = 0; i < this->remainmonsterid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->remainmonsterid(i), target);
  }

  // repeated int32 remainMonsterNum = 2;
  for (int i = 0; i < this->remainmonsternum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->remainmonsternum(i), target);
  }

  // optional double remaintime = 3;
  if (has_remaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->remaintime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimInstanceUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional double remaintime = 3;
    if (has_remaintime()) {
      total_size += 1 + 8;
    }

  }
  // repeated int32 remainMonsterID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->remainmonsterid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->remainmonsterid(i));
    }
    total_size += 1 * this->remainmonsterid_size() + data_size;
  }

  // repeated int32 remainMonsterNum = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->remainmonsternum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->remainmonsternum(i));
    }
    total_size += 1 * this->remainmonsternum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimInstanceUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimInstanceUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimInstanceUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimInstanceUpdate::MergeFrom(const SimInstanceUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  remainmonsterid_.MergeFrom(from.remainmonsterid_);
  remainmonsternum_.MergeFrom(from.remainmonsternum_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_remaintime()) {
      set_remaintime(from.remaintime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimInstanceUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimInstanceUpdate::CopyFrom(const SimInstanceUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimInstanceUpdate::IsInitialized() const {

  return true;
}

void SimInstanceUpdate::Swap(SimInstanceUpdate* other) {
  if (other != this) {
    remainmonsterid_.Swap(&other->remainmonsterid_);
    remainmonsternum_.Swap(&other->remainmonsternum_);
    std::swap(remaintime_, other->remaintime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimInstanceUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimInstanceUpdate_descriptor_;
  metadata.reflection = SimInstanceUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimInstanceEnd::kMapidFieldNumber;
const int SimInstanceEnd::kIsSuccessFieldNumber;
const int SimInstanceEnd::kAwardsFieldNumber;
#endif  // !_MSC_VER

SimInstanceEnd::SimInstanceEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimInstanceEnd::InitAsDefaultInstance() {
  awards_ = const_cast< ::MapInstanceProto::SimInstanceAward*>(&::MapInstanceProto::SimInstanceAward::default_instance());
}

SimInstanceEnd::SimInstanceEnd(const SimInstanceEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimInstanceEnd::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  issuccess_ = 0;
  awards_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimInstanceEnd::~SimInstanceEnd() {
  SharedDtor();
}

void SimInstanceEnd::SharedDtor() {
  if (this != default_instance_) {
    delete awards_;
  }
}

void SimInstanceEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimInstanceEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimInstanceEnd_descriptor_;
}

const SimInstanceEnd& SimInstanceEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

SimInstanceEnd* SimInstanceEnd::default_instance_ = NULL;

SimInstanceEnd* SimInstanceEnd::New() const {
  return new SimInstanceEnd;
}

void SimInstanceEnd::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    issuccess_ = 0;
    if (has_awards()) {
      if (awards_ != NULL) awards_->::MapInstanceProto::SimInstanceAward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimInstanceEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_IsSuccess;
        break;
      }

      // optional int32 IsSuccess = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSuccess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_Awards;
        break;
      }

      // optional .MapInstanceProto.SimInstanceAward Awards = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_Awards:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_awards()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimInstanceEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 IsSuccess = 2;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->issuccess(), output);
  }

  // optional .MapInstanceProto.SimInstanceAward Awards = 3;
  if (has_awards()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->awards(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimInstanceEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 IsSuccess = 2;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->issuccess(), target);
  }

  // optional .MapInstanceProto.SimInstanceAward Awards = 3;
  if (has_awards()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->awards(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimInstanceEnd::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 IsSuccess = 2;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issuccess());
    }

    // optional .MapInstanceProto.SimInstanceAward Awards = 3;
    if (has_awards()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->awards());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimInstanceEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimInstanceEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimInstanceEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimInstanceEnd::MergeFrom(const SimInstanceEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_awards()) {
      mutable_awards()->::MapInstanceProto::SimInstanceAward::MergeFrom(from.awards());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimInstanceEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimInstanceEnd::CopyFrom(const SimInstanceEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimInstanceEnd::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_awards()) {
    if (!this->awards().IsInitialized()) return false;
  }
  return true;
}

void SimInstanceEnd::Swap(SimInstanceEnd* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(issuccess_, other->issuccess_);
    std::swap(awards_, other->awards_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimInstanceEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimInstanceEnd_descriptor_;
  metadata.reflection = SimInstanceEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimInstanceAward::kRewardStarFieldNumber;
const int SimInstanceAward::kElapsedTimeFieldNumber;
const int SimInstanceAward::kBarrierPointsFieldNumber;
const int SimInstanceAward::kPersonalPowerFieldNumber;
const int SimInstanceAward::kGroupPowerFieldNumber;
const int SimInstanceAward::kAwardMoneyFieldNumber;
const int SimInstanceAward::kAwardExpFieldNumber;
const int SimInstanceAward::kAwardInfuriateFieldNumber;
const int SimInstanceAward::kItemsFieldNumber;
#endif  // !_MSC_VER

SimInstanceAward::SimInstanceAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimInstanceAward::InitAsDefaultInstance() {
}

SimInstanceAward::SimInstanceAward(const SimInstanceAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimInstanceAward::SharedCtor() {
  _cached_size_ = 0;
  rewardstar_ = 0;
  elapsedtime_ = 0;
  barrierpoints_ = 0;
  personalpower_ = 0;
  grouppower_ = 0;
  awardmoney_ = 0;
  awardexp_ = 0;
  awardinfuriate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimInstanceAward::~SimInstanceAward() {
  SharedDtor();
}

void SimInstanceAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimInstanceAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimInstanceAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimInstanceAward_descriptor_;
}

const SimInstanceAward& SimInstanceAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

SimInstanceAward* SimInstanceAward::default_instance_ = NULL;

SimInstanceAward* SimInstanceAward::New() const {
  return new SimInstanceAward;
}

void SimInstanceAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rewardstar_ = 0;
    elapsedtime_ = 0;
    barrierpoints_ = 0;
    personalpower_ = 0;
    grouppower_ = 0;
    awardmoney_ = 0;
    awardexp_ = 0;
    awardinfuriate_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimInstanceAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 rewardStar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardstar_)));
          set_has_rewardstar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_elapsedTime;
        break;
      }

      // optional int32 elapsedTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elapsedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elapsedtime_)));
          set_has_elapsedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_barrierPoints;
        break;
      }

      // optional int32 barrierPoints = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_barrierPoints:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &barrierpoints_)));
          set_has_barrierpoints();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_personalPower;
        break;
      }

      // optional int32 personalPower = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_personalPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &personalpower_)));
          set_has_personalpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_groupPower;
        break;
      }

      // optional int32 groupPower = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_groupPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &grouppower_)));
          set_has_grouppower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_awardMoney;
        break;
      }

      // optional int32 awardMoney = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardmoney_)));
          set_has_awardmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_awardExp;
        break;
      }

      // optional int32 awardExp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardexp_)));
          set_has_awardexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_awardInfuriate;
        break;
      }

      // optional int32 awardInfuriate = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardInfuriate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardinfuriate_)));
          set_has_awardinfuriate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_items;
        break;
      }

      // repeated .CharLogin.ClientItemInfo items = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimInstanceAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 rewardStar = 1;
  if (has_rewardstar()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rewardstar(), output);
  }

  // optional int32 elapsedTime = 2;
  if (has_elapsedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->elapsedtime(), output);
  }

  // optional int32 barrierPoints = 3;
  if (has_barrierpoints()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->barrierpoints(), output);
  }

  // optional int32 personalPower = 4;
  if (has_personalpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->personalpower(), output);
  }

  // optional int32 groupPower = 5;
  if (has_grouppower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->grouppower(), output);
  }

  // optional int32 awardMoney = 6;
  if (has_awardmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->awardmoney(), output);
  }

  // optional int32 awardExp = 7;
  if (has_awardexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->awardexp(), output);
  }

  // optional int32 awardInfuriate = 8;
  if (has_awardinfuriate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->awardinfuriate(), output);
  }

  // repeated .CharLogin.ClientItemInfo items = 9;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimInstanceAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 rewardStar = 1;
  if (has_rewardstar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rewardstar(), target);
  }

  // optional int32 elapsedTime = 2;
  if (has_elapsedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->elapsedtime(), target);
  }

  // optional int32 barrierPoints = 3;
  if (has_barrierpoints()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->barrierpoints(), target);
  }

  // optional int32 personalPower = 4;
  if (has_personalpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->personalpower(), target);
  }

  // optional int32 groupPower = 5;
  if (has_grouppower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->grouppower(), target);
  }

  // optional int32 awardMoney = 6;
  if (has_awardmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->awardmoney(), target);
  }

  // optional int32 awardExp = 7;
  if (has_awardexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->awardexp(), target);
  }

  // optional int32 awardInfuriate = 8;
  if (has_awardinfuriate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->awardinfuriate(), target);
  }

  // repeated .CharLogin.ClientItemInfo items = 9;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimInstanceAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 rewardStar = 1;
    if (has_rewardstar()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardstar());
    }

    // optional int32 elapsedTime = 2;
    if (has_elapsedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elapsedtime());
    }

    // optional int32 barrierPoints = 3;
    if (has_barrierpoints()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->barrierpoints());
    }

    // optional int32 personalPower = 4;
    if (has_personalpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->personalpower());
    }

    // optional int32 groupPower = 5;
    if (has_grouppower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->grouppower());
    }

    // optional int32 awardMoney = 6;
    if (has_awardmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardmoney());
    }

    // optional int32 awardExp = 7;
    if (has_awardexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardexp());
    }

    // optional int32 awardInfuriate = 8;
    if (has_awardinfuriate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardinfuriate());
    }

  }
  // repeated .CharLogin.ClientItemInfo items = 9;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimInstanceAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimInstanceAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimInstanceAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimInstanceAward::MergeFrom(const SimInstanceAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rewardstar()) {
      set_rewardstar(from.rewardstar());
    }
    if (from.has_elapsedtime()) {
      set_elapsedtime(from.elapsedtime());
    }
    if (from.has_barrierpoints()) {
      set_barrierpoints(from.barrierpoints());
    }
    if (from.has_personalpower()) {
      set_personalpower(from.personalpower());
    }
    if (from.has_grouppower()) {
      set_grouppower(from.grouppower());
    }
    if (from.has_awardmoney()) {
      set_awardmoney(from.awardmoney());
    }
    if (from.has_awardexp()) {
      set_awardexp(from.awardexp());
    }
    if (from.has_awardinfuriate()) {
      set_awardinfuriate(from.awardinfuriate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimInstanceAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimInstanceAward::CopyFrom(const SimInstanceAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimInstanceAward::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void SimInstanceAward::Swap(SimInstanceAward* other) {
  if (other != this) {
    std::swap(rewardstar_, other->rewardstar_);
    std::swap(elapsedtime_, other->elapsedtime_);
    std::swap(barrierpoints_, other->barrierpoints_);
    std::swap(personalpower_, other->personalpower_);
    std::swap(grouppower_, other->grouppower_);
    std::swap(awardmoney_, other->awardmoney_);
    std::swap(awardexp_, other->awardexp_);
    std::swap(awardinfuriate_, other->awardinfuriate_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimInstanceAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimInstanceAward_descriptor_;
  metadata.reflection = SimInstanceAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqInstanceSweep::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

ReqInstanceSweep::ReqInstanceSweep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqInstanceSweep::InitAsDefaultInstance() {
}

ReqInstanceSweep::ReqInstanceSweep(const ReqInstanceSweep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqInstanceSweep::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqInstanceSweep::~ReqInstanceSweep() {
  SharedDtor();
}

void ReqInstanceSweep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqInstanceSweep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqInstanceSweep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqInstanceSweep_descriptor_;
}

const ReqInstanceSweep& ReqInstanceSweep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqInstanceSweep* ReqInstanceSweep::default_instance_ = NULL;

ReqInstanceSweep* ReqInstanceSweep::New() const {
  return new ReqInstanceSweep;
}

void ReqInstanceSweep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqInstanceSweep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 InstanceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqInstanceSweep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 InstanceId = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqInstanceSweep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 InstanceId = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqInstanceSweep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 InstanceId = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInstanceSweep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqInstanceSweep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqInstanceSweep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqInstanceSweep::MergeFrom(const ReqInstanceSweep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqInstanceSweep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInstanceSweep::CopyFrom(const ReqInstanceSweep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInstanceSweep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqInstanceSweep::Swap(ReqInstanceSweep* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqInstanceSweep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqInstanceSweep_descriptor_;
  metadata.reflection = ReqInstanceSweep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetInstanceSweep::kDwErrorCodeFieldNumber;
const int RetInstanceSweep::kDwRemainTimeFieldNumber;
const int RetInstanceSweep::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

RetInstanceSweep::RetInstanceSweep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetInstanceSweep::InitAsDefaultInstance() {
}

RetInstanceSweep::RetInstanceSweep(const RetInstanceSweep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetInstanceSweep::SharedCtor() {
  _cached_size_ = 0;
  dwerrorcode_ = 0;
  dwremaintime_ = 0;
  instanceid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetInstanceSweep::~RetInstanceSweep() {
  SharedDtor();
}

void RetInstanceSweep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetInstanceSweep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetInstanceSweep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetInstanceSweep_descriptor_;
}

const RetInstanceSweep& RetInstanceSweep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetInstanceSweep* RetInstanceSweep::default_instance_ = NULL;

RetInstanceSweep* RetInstanceSweep::New() const {
  return new RetInstanceSweep;
}

void RetInstanceSweep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwerrorcode_ = 0;
    dwremaintime_ = 0;
    instanceid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetInstanceSweep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwErrorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwerrorcode_)));
          set_has_dwerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwRemainTime;
        break;
      }

      // required int32 dwRemainTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwRemainTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwremaintime_)));
          set_has_dwremaintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_InstanceId;
        break;
      }

      // required int32 InstanceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetInstanceSweep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwerrorcode(), output);
  }

  // required int32 dwRemainTime = 2;
  if (has_dwremaintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwremaintime(), output);
  }

  // required int32 InstanceId = 3;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetInstanceSweep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwerrorcode(), target);
  }

  // required int32 dwRemainTime = 2;
  if (has_dwremaintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwremaintime(), target);
  }

  // required int32 InstanceId = 3;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetInstanceSweep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwErrorCode = 1;
    if (has_dwerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwerrorcode());
    }

    // required int32 dwRemainTime = 2;
    if (has_dwremaintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwremaintime());
    }

    // required int32 InstanceId = 3;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetInstanceSweep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetInstanceSweep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetInstanceSweep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetInstanceSweep::MergeFrom(const RetInstanceSweep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwerrorcode()) {
      set_dwerrorcode(from.dwerrorcode());
    }
    if (from.has_dwremaintime()) {
      set_dwremaintime(from.dwremaintime());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetInstanceSweep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetInstanceSweep::CopyFrom(const RetInstanceSweep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetInstanceSweep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RetInstanceSweep::Swap(RetInstanceSweep* other) {
  if (other != this) {
    std::swap(dwerrorcode_, other->dwerrorcode_);
    std::swap(dwremaintime_, other->dwremaintime_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetInstanceSweep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetInstanceSweep_descriptor_;
  metadata.reflection = RetInstanceSweep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqInstanceSweepSpeedUp::kInstanceIdFieldNumber;
const int ReqInstanceSweepSpeedUp::kMoneytypeFieldNumber;
#endif  // !_MSC_VER

ReqInstanceSweepSpeedUp::ReqInstanceSweepSpeedUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqInstanceSweepSpeedUp::InitAsDefaultInstance() {
}

ReqInstanceSweepSpeedUp::ReqInstanceSweepSpeedUp(const ReqInstanceSweepSpeedUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqInstanceSweepSpeedUp::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = 0;
  moneytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqInstanceSweepSpeedUp::~ReqInstanceSweepSpeedUp() {
  SharedDtor();
}

void ReqInstanceSweepSpeedUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqInstanceSweepSpeedUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqInstanceSweepSpeedUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqInstanceSweepSpeedUp_descriptor_;
}

const ReqInstanceSweepSpeedUp& ReqInstanceSweepSpeedUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqInstanceSweepSpeedUp* ReqInstanceSweepSpeedUp::default_instance_ = NULL;

ReqInstanceSweepSpeedUp* ReqInstanceSweepSpeedUp::New() const {
  return new ReqInstanceSweepSpeedUp;
}

void ReqInstanceSweepSpeedUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = 0;
    moneytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqInstanceSweepSpeedUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 InstanceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_moneytype;
        break;
      }

      // optional int32 moneytype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqInstanceSweepSpeedUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 InstanceId = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instanceid(), output);
  }

  // optional int32 moneytype = 2;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->moneytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqInstanceSweepSpeedUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 InstanceId = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instanceid(), target);
  }

  // optional int32 moneytype = 2;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->moneytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqInstanceSweepSpeedUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 InstanceId = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // optional int32 moneytype = 2;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInstanceSweepSpeedUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqInstanceSweepSpeedUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqInstanceSweepSpeedUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqInstanceSweepSpeedUp::MergeFrom(const ReqInstanceSweepSpeedUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqInstanceSweepSpeedUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInstanceSweepSpeedUp::CopyFrom(const ReqInstanceSweepSpeedUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInstanceSweepSpeedUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqInstanceSweepSpeedUp::Swap(ReqInstanceSweepSpeedUp* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqInstanceSweepSpeedUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqInstanceSweepSpeedUp_descriptor_;
  metadata.reflection = ReqInstanceSweepSpeedUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetInstanceSweepSpeedUp::kDwErrorCodeFieldNumber;
const int RetInstanceSweepSpeedUp::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

RetInstanceSweepSpeedUp::RetInstanceSweepSpeedUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetInstanceSweepSpeedUp::InitAsDefaultInstance() {
}

RetInstanceSweepSpeedUp::RetInstanceSweepSpeedUp(const RetInstanceSweepSpeedUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetInstanceSweepSpeedUp::SharedCtor() {
  _cached_size_ = 0;
  dwerrorcode_ = 0;
  instanceid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetInstanceSweepSpeedUp::~RetInstanceSweepSpeedUp() {
  SharedDtor();
}

void RetInstanceSweepSpeedUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetInstanceSweepSpeedUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetInstanceSweepSpeedUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetInstanceSweepSpeedUp_descriptor_;
}

const RetInstanceSweepSpeedUp& RetInstanceSweepSpeedUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetInstanceSweepSpeedUp* RetInstanceSweepSpeedUp::default_instance_ = NULL;

RetInstanceSweepSpeedUp* RetInstanceSweepSpeedUp::New() const {
  return new RetInstanceSweepSpeedUp;
}

void RetInstanceSweepSpeedUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwerrorcode_ = 0;
    instanceid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetInstanceSweepSpeedUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwErrorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwerrorcode_)));
          set_has_dwerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_InstanceId;
        break;
      }

      // required int32 InstanceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetInstanceSweepSpeedUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwerrorcode(), output);
  }

  // required int32 InstanceId = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetInstanceSweepSpeedUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwerrorcode(), target);
  }

  // required int32 InstanceId = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetInstanceSweepSpeedUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwErrorCode = 1;
    if (has_dwerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwerrorcode());
    }

    // required int32 InstanceId = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetInstanceSweepSpeedUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetInstanceSweepSpeedUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetInstanceSweepSpeedUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetInstanceSweepSpeedUp::MergeFrom(const RetInstanceSweepSpeedUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwerrorcode()) {
      set_dwerrorcode(from.dwerrorcode());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetInstanceSweepSpeedUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetInstanceSweepSpeedUp::CopyFrom(const RetInstanceSweepSpeedUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetInstanceSweepSpeedUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RetInstanceSweepSpeedUp::Swap(RetInstanceSweepSpeedUp* other) {
  if (other != this) {
    std::swap(dwerrorcode_, other->dwerrorcode_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetInstanceSweepSpeedUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetInstanceSweepSpeedUp_descriptor_;
  metadata.reflection = RetInstanceSweepSpeedUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

OpenInstanceSweep::OpenInstanceSweep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OpenInstanceSweep::InitAsDefaultInstance() {
}

OpenInstanceSweep::OpenInstanceSweep(const OpenInstanceSweep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OpenInstanceSweep::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OpenInstanceSweep::~OpenInstanceSweep() {
  SharedDtor();
}

void OpenInstanceSweep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OpenInstanceSweep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OpenInstanceSweep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OpenInstanceSweep_descriptor_;
}

const OpenInstanceSweep& OpenInstanceSweep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

OpenInstanceSweep* OpenInstanceSweep::default_instance_ = NULL;

OpenInstanceSweep* OpenInstanceSweep::New() const {
  return new OpenInstanceSweep;
}

void OpenInstanceSweep::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OpenInstanceSweep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void OpenInstanceSweep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OpenInstanceSweep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OpenInstanceSweep::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OpenInstanceSweep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OpenInstanceSweep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OpenInstanceSweep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OpenInstanceSweep::MergeFrom(const OpenInstanceSweep& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OpenInstanceSweep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OpenInstanceSweep::CopyFrom(const OpenInstanceSweep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OpenInstanceSweep::IsInitialized() const {

  return true;
}

void OpenInstanceSweep::Swap(OpenInstanceSweep* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OpenInstanceSweep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OpenInstanceSweep_descriptor_;
  metadata.reflection = OpenInstanceSweep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

SimInstanceSweepEnd::SimInstanceSweepEnd()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimInstanceSweepEnd::InitAsDefaultInstance() {
}

SimInstanceSweepEnd::SimInstanceSweepEnd(const SimInstanceSweepEnd& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimInstanceSweepEnd::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimInstanceSweepEnd::~SimInstanceSweepEnd() {
  SharedDtor();
}

void SimInstanceSweepEnd::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimInstanceSweepEnd::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimInstanceSweepEnd::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimInstanceSweepEnd_descriptor_;
}

const SimInstanceSweepEnd& SimInstanceSweepEnd::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

SimInstanceSweepEnd* SimInstanceSweepEnd::default_instance_ = NULL;

SimInstanceSweepEnd* SimInstanceSweepEnd::New() const {
  return new SimInstanceSweepEnd;
}

void SimInstanceSweepEnd::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimInstanceSweepEnd::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void SimInstanceSweepEnd::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimInstanceSweepEnd::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimInstanceSweepEnd::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimInstanceSweepEnd::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimInstanceSweepEnd* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimInstanceSweepEnd*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimInstanceSweepEnd::MergeFrom(const SimInstanceSweepEnd& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimInstanceSweepEnd::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimInstanceSweepEnd::CopyFrom(const SimInstanceSweepEnd& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimInstanceSweepEnd::IsInitialized() const {

  return true;
}

void SimInstanceSweepEnd::Swap(SimInstanceSweepEnd* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimInstanceSweepEnd::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimInstanceSweepEnd_descriptor_;
  metadata.reflection = SimInstanceSweepEnd_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqInstanceReset::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

ReqInstanceReset::ReqInstanceReset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqInstanceReset::InitAsDefaultInstance() {
}

ReqInstanceReset::ReqInstanceReset(const ReqInstanceReset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqInstanceReset::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqInstanceReset::~ReqInstanceReset() {
  SharedDtor();
}

void ReqInstanceReset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqInstanceReset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqInstanceReset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqInstanceReset_descriptor_;
}

const ReqInstanceReset& ReqInstanceReset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqInstanceReset* ReqInstanceReset::default_instance_ = NULL;

ReqInstanceReset* ReqInstanceReset::New() const {
  return new ReqInstanceReset;
}

void ReqInstanceReset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqInstanceReset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 InstanceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqInstanceReset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 InstanceId = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqInstanceReset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 InstanceId = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqInstanceReset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 InstanceId = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInstanceReset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqInstanceReset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqInstanceReset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqInstanceReset::MergeFrom(const ReqInstanceReset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqInstanceReset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInstanceReset::CopyFrom(const ReqInstanceReset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInstanceReset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqInstanceReset::Swap(ReqInstanceReset* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqInstanceReset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqInstanceReset_descriptor_;
  metadata.reflection = ReqInstanceReset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetInstanceReset::kDwErrorCodeFieldNumber;
const int RetInstanceReset::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

RetInstanceReset::RetInstanceReset()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetInstanceReset::InitAsDefaultInstance() {
}

RetInstanceReset::RetInstanceReset(const RetInstanceReset& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetInstanceReset::SharedCtor() {
  _cached_size_ = 0;
  dwerrorcode_ = 0;
  instanceid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetInstanceReset::~RetInstanceReset() {
  SharedDtor();
}

void RetInstanceReset::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetInstanceReset::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetInstanceReset::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetInstanceReset_descriptor_;
}

const RetInstanceReset& RetInstanceReset::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetInstanceReset* RetInstanceReset::default_instance_ = NULL;

RetInstanceReset* RetInstanceReset::New() const {
  return new RetInstanceReset;
}

void RetInstanceReset::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwerrorcode_ = 0;
    instanceid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetInstanceReset::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwErrorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwerrorcode_)));
          set_has_dwerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_InstanceId;
        break;
      }

      // required int32 InstanceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetInstanceReset::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwerrorcode(), output);
  }

  // required int32 InstanceId = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetInstanceReset::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwerrorcode(), target);
  }

  // required int32 InstanceId = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetInstanceReset::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwErrorCode = 1;
    if (has_dwerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwerrorcode());
    }

    // required int32 InstanceId = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetInstanceReset::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetInstanceReset* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetInstanceReset*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetInstanceReset::MergeFrom(const RetInstanceReset& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwerrorcode()) {
      set_dwerrorcode(from.dwerrorcode());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetInstanceReset::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetInstanceReset::CopyFrom(const RetInstanceReset& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetInstanceReset::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RetInstanceReset::Swap(RetInstanceReset* other) {
  if (other != this) {
    std::swap(dwerrorcode_, other->dwerrorcode_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetInstanceReset::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetInstanceReset_descriptor_;
  metadata.reflection = RetInstanceReset_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqResetAllInstances::kInstanceIdListFieldNumber;
#endif  // !_MSC_VER

ReqResetAllInstances::ReqResetAllInstances()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqResetAllInstances::InitAsDefaultInstance() {
}

ReqResetAllInstances::ReqResetAllInstances(const ReqResetAllInstances& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqResetAllInstances::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqResetAllInstances::~ReqResetAllInstances() {
  SharedDtor();
}

void ReqResetAllInstances::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqResetAllInstances::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqResetAllInstances::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqResetAllInstances_descriptor_;
}

const ReqResetAllInstances& ReqResetAllInstances::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqResetAllInstances* ReqResetAllInstances::default_instance_ = NULL;

ReqResetAllInstances* ReqResetAllInstances::New() const {
  return new ReqResetAllInstances;
}

void ReqResetAllInstances::Clear() {
  instanceidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqResetAllInstances::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 InstanceIdList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstanceIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_instanceidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_instanceidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_InstanceIdList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqResetAllInstances::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 InstanceIdList = 1;
  for (int i = 0; i < this->instanceidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->instanceidlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqResetAllInstances::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 InstanceIdList = 1;
  for (int i = 0; i < this->instanceidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->instanceidlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqResetAllInstances::ByteSize() const {
  int total_size = 0;

  // repeated int32 InstanceIdList = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->instanceidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->instanceidlist(i));
    }
    total_size += 1 * this->instanceidlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqResetAllInstances::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqResetAllInstances* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqResetAllInstances*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqResetAllInstances::MergeFrom(const ReqResetAllInstances& from) {
  GOOGLE_CHECK_NE(&from, this);
  instanceidlist_.MergeFrom(from.instanceidlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqResetAllInstances::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqResetAllInstances::CopyFrom(const ReqResetAllInstances& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqResetAllInstances::IsInitialized() const {

  return true;
}

void ReqResetAllInstances::Swap(ReqResetAllInstances* other) {
  if (other != this) {
    instanceidlist_.Swap(&other->instanceidlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqResetAllInstances::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqResetAllInstances_descriptor_;
  metadata.reflection = ReqResetAllInstances_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetResetAllInstances::kDwErrorCodeFieldNumber;
const int RetResetAllInstances::kInstanceIdListFieldNumber;
#endif  // !_MSC_VER

RetResetAllInstances::RetResetAllInstances()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetResetAllInstances::InitAsDefaultInstance() {
}

RetResetAllInstances::RetResetAllInstances(const RetResetAllInstances& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetResetAllInstances::SharedCtor() {
  _cached_size_ = 0;
  dwerrorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetResetAllInstances::~RetResetAllInstances() {
  SharedDtor();
}

void RetResetAllInstances::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetResetAllInstances::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetResetAllInstances::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetResetAllInstances_descriptor_;
}

const RetResetAllInstances& RetResetAllInstances::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetResetAllInstances* RetResetAllInstances::default_instance_ = NULL;

RetResetAllInstances* RetResetAllInstances::New() const {
  return new RetResetAllInstances;
}

void RetResetAllInstances::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwerrorcode_ = 0;
  }
  instanceidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetResetAllInstances::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwErrorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwerrorcode_)));
          set_has_dwerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_InstanceIdList;
        break;
      }

      // repeated int32 InstanceIdList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstanceIdList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_instanceidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_instanceidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_InstanceIdList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetResetAllInstances::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwerrorcode(), output);
  }

  // repeated int32 InstanceIdList = 2;
  for (int i = 0; i < this->instanceidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->instanceidlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetResetAllInstances::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwerrorcode(), target);
  }

  // repeated int32 InstanceIdList = 2;
  for (int i = 0; i < this->instanceidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->instanceidlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetResetAllInstances::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwErrorCode = 1;
    if (has_dwerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwerrorcode());
    }

  }
  // repeated int32 InstanceIdList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->instanceidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->instanceidlist(i));
    }
    total_size += 1 * this->instanceidlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetResetAllInstances::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetResetAllInstances* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetResetAllInstances*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetResetAllInstances::MergeFrom(const RetResetAllInstances& from) {
  GOOGLE_CHECK_NE(&from, this);
  instanceidlist_.MergeFrom(from.instanceidlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwerrorcode()) {
      set_dwerrorcode(from.dwerrorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetResetAllInstances::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetResetAllInstances::CopyFrom(const RetResetAllInstances& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetResetAllInstances::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetResetAllInstances::Swap(RetResetAllInstances* other) {
  if (other != this) {
    std::swap(dwerrorcode_, other->dwerrorcode_);
    instanceidlist_.Swap(&other->instanceidlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetResetAllInstances::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetResetAllInstances_descriptor_;
  metadata.reflection = RetResetAllInstances_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqWSCreateInstance::kInstanceIdFieldNumber;
const int ReqWSCreateInstance::kInstanceTypeFieldNumber;
const int ReqWSCreateInstance::kLocalIdFieldNumber;
const int ReqWSCreateInstance::kRomateIdFieldNumber;
const int ReqWSCreateInstance::kCharidFieldNumber;
#endif  // !_MSC_VER

ReqWSCreateInstance::ReqWSCreateInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqWSCreateInstance::InitAsDefaultInstance() {
}

ReqWSCreateInstance::ReqWSCreateInstance(const ReqWSCreateInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqWSCreateInstance::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = 0;
  instancetype_ = 0;
  localid_ = 0;
  romateid_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqWSCreateInstance::~ReqWSCreateInstance() {
  SharedDtor();
}

void ReqWSCreateInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqWSCreateInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWSCreateInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWSCreateInstance_descriptor_;
}

const ReqWSCreateInstance& ReqWSCreateInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqWSCreateInstance* ReqWSCreateInstance::default_instance_ = NULL;

ReqWSCreateInstance* ReqWSCreateInstance::New() const {
  return new ReqWSCreateInstance;
}

void ReqWSCreateInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = 0;
    instancetype_ = 0;
    localid_ = 0;
    romateid_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqWSCreateInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 InstanceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_InstanceType;
        break;
      }

      // required int32 InstanceType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstanceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instancetype_)));
          set_has_instancetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_localId;
        break;
      }

      // required int32 localId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_localId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &localid_)));
          set_has_localid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_romateId;
        break;
      }

      // required int32 romateId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_romateId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &romateid_)));
          set_has_romateid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_charid;
        break;
      }

      // required int64 charid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqWSCreateInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 InstanceId = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instanceid(), output);
  }

  // required int32 InstanceType = 2;
  if (has_instancetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instancetype(), output);
  }

  // required int32 localId = 3;
  if (has_localid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->localid(), output);
  }

  // required int32 romateId = 4;
  if (has_romateid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->romateid(), output);
  }

  // required int64 charid = 5;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqWSCreateInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 InstanceId = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instanceid(), target);
  }

  // required int32 InstanceType = 2;
  if (has_instancetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instancetype(), target);
  }

  // required int32 localId = 3;
  if (has_localid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->localid(), target);
  }

  // required int32 romateId = 4;
  if (has_romateid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->romateid(), target);
  }

  // required int64 charid = 5;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqWSCreateInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 InstanceId = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // required int32 InstanceType = 2;
    if (has_instancetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instancetype());
    }

    // required int32 localId = 3;
    if (has_localid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->localid());
    }

    // required int32 romateId = 4;
    if (has_romateid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->romateid());
    }

    // required int64 charid = 5;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWSCreateInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqWSCreateInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqWSCreateInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqWSCreateInstance::MergeFrom(const ReqWSCreateInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_instancetype()) {
      set_instancetype(from.instancetype());
    }
    if (from.has_localid()) {
      set_localid(from.localid());
    }
    if (from.has_romateid()) {
      set_romateid(from.romateid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqWSCreateInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWSCreateInstance::CopyFrom(const ReqWSCreateInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWSCreateInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void ReqWSCreateInstance::Swap(ReqWSCreateInstance* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(instancetype_, other->instancetype_);
    std::swap(localid_, other->localid_);
    std::swap(romateid_, other->romateid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqWSCreateInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWSCreateInstance_descriptor_;
  metadata.reflection = ReqWSCreateInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDeleteInstance::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

ReqDeleteInstance::ReqDeleteInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDeleteInstance::InitAsDefaultInstance() {
}

ReqDeleteInstance::ReqDeleteInstance(const ReqDeleteInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDeleteInstance::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDeleteInstance::~ReqDeleteInstance() {
  SharedDtor();
}

void ReqDeleteInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqDeleteInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDeleteInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDeleteInstance_descriptor_;
}

const ReqDeleteInstance& ReqDeleteInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqDeleteInstance* ReqDeleteInstance::default_instance_ = NULL;

ReqDeleteInstance* ReqDeleteInstance::New() const {
  return new ReqDeleteInstance;
}

void ReqDeleteInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDeleteInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 InstanceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqDeleteInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 InstanceId = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDeleteInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 InstanceId = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDeleteInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 InstanceId = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDeleteInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDeleteInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDeleteInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDeleteInstance::MergeFrom(const ReqDeleteInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDeleteInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDeleteInstance::CopyFrom(const ReqDeleteInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDeleteInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqDeleteInstance::Swap(ReqDeleteInstance* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDeleteInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDeleteInstance_descriptor_;
  metadata.reflection = ReqDeleteInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqGroupInstanceReady::ReqGroupInstanceReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGroupInstanceReady::InitAsDefaultInstance() {
}

ReqGroupInstanceReady::ReqGroupInstanceReady(const ReqGroupInstanceReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGroupInstanceReady::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGroupInstanceReady::~ReqGroupInstanceReady() {
  SharedDtor();
}

void ReqGroupInstanceReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGroupInstanceReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGroupInstanceReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGroupInstanceReady_descriptor_;
}

const ReqGroupInstanceReady& ReqGroupInstanceReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqGroupInstanceReady* ReqGroupInstanceReady::default_instance_ = NULL;

ReqGroupInstanceReady* ReqGroupInstanceReady::New() const {
  return new ReqGroupInstanceReady;
}

void ReqGroupInstanceReady::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGroupInstanceReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqGroupInstanceReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGroupInstanceReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGroupInstanceReady::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGroupInstanceReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGroupInstanceReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGroupInstanceReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGroupInstanceReady::MergeFrom(const ReqGroupInstanceReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGroupInstanceReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGroupInstanceReady::CopyFrom(const ReqGroupInstanceReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGroupInstanceReady::IsInitialized() const {

  return true;
}

void ReqGroupInstanceReady::Swap(ReqGroupInstanceReady* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGroupInstanceReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGroupInstanceReady_descriptor_;
  metadata.reflection = ReqGroupInstanceReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetGroupInstanceReady::kRetFieldNumber;
const int RetGroupInstanceReady::kMemberIDFieldNumber;
const int RetGroupInstanceReady::kIsReadyFieldNumber;
#endif  // !_MSC_VER

RetGroupInstanceReady::RetGroupInstanceReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetGroupInstanceReady::InitAsDefaultInstance() {
}

RetGroupInstanceReady::RetGroupInstanceReady(const RetGroupInstanceReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetGroupInstanceReady::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetGroupInstanceReady::~RetGroupInstanceReady() {
  SharedDtor();
}

void RetGroupInstanceReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetGroupInstanceReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetGroupInstanceReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetGroupInstanceReady_descriptor_;
}

const RetGroupInstanceReady& RetGroupInstanceReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetGroupInstanceReady* RetGroupInstanceReady::default_instance_ = NULL;

RetGroupInstanceReady* RetGroupInstanceReady::New() const {
  return new RetGroupInstanceReady;
}

void RetGroupInstanceReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  memberid_.Clear();
  isready_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetGroupInstanceReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MemberID;
        break;
      }

      // repeated int64 MemberID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_MemberID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_memberid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_memberid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_MemberID;
        if (input->ExpectTag(24)) goto parse_IsReady;
        break;
      }

      // repeated int32 IsReady = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsReady:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_isready())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_isready())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_IsReady;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetGroupInstanceReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated int64 MemberID = 2;
  for (int i = 0; i < this->memberid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->memberid(i), output);
  }

  // repeated int32 IsReady = 3;
  for (int i = 0; i < this->isready_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->isready(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetGroupInstanceReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated int64 MemberID = 2;
  for (int i = 0; i < this->memberid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->memberid(i), target);
  }

  // repeated int32 IsReady = 3;
  for (int i = 0; i < this->isready_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->isready(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetGroupInstanceReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated int64 MemberID = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->memberid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->memberid(i));
    }
    total_size += 1 * this->memberid_size() + data_size;
  }

  // repeated int32 IsReady = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->isready_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->isready(i));
    }
    total_size += 1 * this->isready_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetGroupInstanceReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetGroupInstanceReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetGroupInstanceReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetGroupInstanceReady::MergeFrom(const RetGroupInstanceReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberid_.MergeFrom(from.memberid_);
  isready_.MergeFrom(from.isready_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetGroupInstanceReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGroupInstanceReady::CopyFrom(const RetGroupInstanceReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGroupInstanceReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetGroupInstanceReady::Swap(RetGroupInstanceReady* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    memberid_.Swap(&other->memberid_);
    isready_.Swap(&other->isready_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetGroupInstanceReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetGroupInstanceReady_descriptor_;
  metadata.reflection = RetGroupInstanceReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGroupEnterInstance::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

ReqGroupEnterInstance::ReqGroupEnterInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGroupEnterInstance::InitAsDefaultInstance() {
}

ReqGroupEnterInstance::ReqGroupEnterInstance(const ReqGroupEnterInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGroupEnterInstance::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGroupEnterInstance::~ReqGroupEnterInstance() {
  SharedDtor();
}

void ReqGroupEnterInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGroupEnterInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGroupEnterInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGroupEnterInstance_descriptor_;
}

const ReqGroupEnterInstance& ReqGroupEnterInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqGroupEnterInstance* ReqGroupEnterInstance::default_instance_ = NULL;

ReqGroupEnterInstance* ReqGroupEnterInstance::New() const {
  return new ReqGroupEnterInstance;
}

void ReqGroupEnterInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGroupEnterInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 InstanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGroupEnterInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 InstanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGroupEnterInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 InstanceID = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGroupEnterInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 InstanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGroupEnterInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGroupEnterInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGroupEnterInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGroupEnterInstance::MergeFrom(const ReqGroupEnterInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGroupEnterInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGroupEnterInstance::CopyFrom(const ReqGroupEnterInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGroupEnterInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGroupEnterInstance::Swap(ReqGroupEnterInstance* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGroupEnterInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGroupEnterInstance_descriptor_;
  metadata.reflection = ReqGroupEnterInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetGroupEnterInstance::kRetFieldNumber;
const int RetGroupEnterInstance::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

RetGroupEnterInstance::RetGroupEnterInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetGroupEnterInstance::InitAsDefaultInstance() {
}

RetGroupEnterInstance::RetGroupEnterInstance(const RetGroupEnterInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetGroupEnterInstance::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  instanceid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetGroupEnterInstance::~RetGroupEnterInstance() {
  SharedDtor();
}

void RetGroupEnterInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetGroupEnterInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetGroupEnterInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetGroupEnterInstance_descriptor_;
}

const RetGroupEnterInstance& RetGroupEnterInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetGroupEnterInstance* RetGroupEnterInstance::default_instance_ = NULL;

RetGroupEnterInstance* RetGroupEnterInstance::New() const {
  return new RetGroupEnterInstance;
}

void RetGroupEnterInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    instanceid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetGroupEnterInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_InstanceID;
        break;
      }

      // optional int64 InstanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetGroupEnterInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 InstanceID = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetGroupEnterInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 InstanceID = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetGroupEnterInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 InstanceID = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetGroupEnterInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetGroupEnterInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetGroupEnterInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetGroupEnterInstance::MergeFrom(const RetGroupEnterInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetGroupEnterInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGroupEnterInstance::CopyFrom(const RetGroupEnterInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGroupEnterInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetGroupEnterInstance::Swap(RetGroupEnterInstance* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetGroupEnterInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetGroupEnterInstance_descriptor_;
  metadata.reflection = RetGroupEnterInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMemberFlop::kFlopIDFieldNumber;
#endif  // !_MSC_VER

ReqMemberFlop::ReqMemberFlop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqMemberFlop::InitAsDefaultInstance() {
}

ReqMemberFlop::ReqMemberFlop(const ReqMemberFlop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqMemberFlop::SharedCtor() {
  _cached_size_ = 0;
  flopid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMemberFlop::~ReqMemberFlop() {
  SharedDtor();
}

void ReqMemberFlop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqMemberFlop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMemberFlop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMemberFlop_descriptor_;
}

const ReqMemberFlop& ReqMemberFlop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqMemberFlop* ReqMemberFlop::default_instance_ = NULL;

ReqMemberFlop* ReqMemberFlop::New() const {
  return new ReqMemberFlop;
}

void ReqMemberFlop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flopid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMemberFlop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FlopID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flopid_)));
          set_has_flopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqMemberFlop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FlopID = 1;
  if (has_flopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flopid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqMemberFlop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FlopID = 1;
  if (has_flopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flopid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqMemberFlop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FlopID = 1;
    if (has_flopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flopid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMemberFlop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMemberFlop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMemberFlop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMemberFlop::MergeFrom(const ReqMemberFlop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flopid()) {
      set_flopid(from.flopid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMemberFlop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMemberFlop::CopyFrom(const ReqMemberFlop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMemberFlop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqMemberFlop::Swap(ReqMemberFlop* other) {
  if (other != this) {
    std::swap(flopid_, other->flopid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMemberFlop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMemberFlop_descriptor_;
  metadata.reflection = ReqMemberFlop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMToClientMemberFlop::kRetFieldNumber;
#endif  // !_MSC_VER

GMToClientMemberFlop::GMToClientMemberFlop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMToClientMemberFlop::InitAsDefaultInstance() {
}

GMToClientMemberFlop::GMToClientMemberFlop(const GMToClientMemberFlop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMToClientMemberFlop::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMToClientMemberFlop::~GMToClientMemberFlop() {
  SharedDtor();
}

void GMToClientMemberFlop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMToClientMemberFlop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMToClientMemberFlop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMToClientMemberFlop_descriptor_;
}

const GMToClientMemberFlop& GMToClientMemberFlop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

GMToClientMemberFlop* GMToClientMemberFlop::default_instance_ = NULL;

GMToClientMemberFlop* GMToClientMemberFlop::New() const {
  return new GMToClientMemberFlop;
}

void GMToClientMemberFlop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMToClientMemberFlop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMToClientMemberFlop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMToClientMemberFlop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMToClientMemberFlop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMToClientMemberFlop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMToClientMemberFlop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMToClientMemberFlop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMToClientMemberFlop::MergeFrom(const GMToClientMemberFlop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMToClientMemberFlop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMToClientMemberFlop::CopyFrom(const GMToClientMemberFlop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMToClientMemberFlop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMToClientMemberFlop::Swap(GMToClientMemberFlop* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMToClientMemberFlop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMToClientMemberFlop_descriptor_;
  metadata.reflection = GMToClientMemberFlop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetMemberFlop::kFlopIDFieldNumber;
const int RetMemberFlop::kItemIDFieldNumber;
const int RetMemberFlop::kFlopNameFieldNumber;
const int RetMemberFlop::kItemNumFieldNumber;
const int RetMemberFlop::kBindTypeFieldNumber;
#endif  // !_MSC_VER

RetMemberFlop::RetMemberFlop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetMemberFlop::InitAsDefaultInstance() {
}

RetMemberFlop::RetMemberFlop(const RetMemberFlop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetMemberFlop::SharedCtor() {
  _cached_size_ = 0;
  flopid_ = 0;
  itemid_ = 0;
  flopname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemnum_ = 0;
  bindtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetMemberFlop::~RetMemberFlop() {
  SharedDtor();
}

void RetMemberFlop::SharedDtor() {
  if (flopname_ != &::google::protobuf::internal::kEmptyString) {
    delete flopname_;
  }
  if (this != default_instance_) {
  }
}

void RetMemberFlop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetMemberFlop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetMemberFlop_descriptor_;
}

const RetMemberFlop& RetMemberFlop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetMemberFlop* RetMemberFlop::default_instance_ = NULL;

RetMemberFlop* RetMemberFlop::New() const {
  return new RetMemberFlop;
}

void RetMemberFlop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flopid_ = 0;
    itemid_ = 0;
    if (has_flopname()) {
      if (flopname_ != &::google::protobuf::internal::kEmptyString) {
        flopname_->clear();
      }
    }
    itemnum_ = 0;
    bindtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetMemberFlop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 FlopID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flopid_)));
          set_has_flopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ItemID;
        break;
      }

      // required int32 ItemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_FlopName;
        break;
      }

      // required string FlopName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_FlopName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_flopname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->flopname().data(), this->flopname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ItemNum;
        break;
      }

      // optional int32 ItemNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_BindType;
        break;
      }

      // optional int32 BindType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BindType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindtype_)));
          set_has_bindtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetMemberFlop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 FlopID = 1;
  if (has_flopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flopid(), output);
  }

  // required int32 ItemID = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // required string FlopName = 3;
  if (has_flopname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flopname().data(), this->flopname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->flopname(), output);
  }

  // optional int32 ItemNum = 4;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemnum(), output);
  }

  // optional int32 BindType = 5;
  if (has_bindtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bindtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetMemberFlop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 FlopID = 1;
  if (has_flopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flopid(), target);
  }

  // required int32 ItemID = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // required string FlopName = 3;
  if (has_flopname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->flopname().data(), this->flopname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->flopname(), target);
  }

  // optional int32 ItemNum = 4;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemnum(), target);
  }

  // optional int32 BindType = 5;
  if (has_bindtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bindtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetMemberFlop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 FlopID = 1;
    if (has_flopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flopid());
    }

    // required int32 ItemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required string FlopName = 3;
    if (has_flopname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->flopname());
    }

    // optional int32 ItemNum = 4;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

    // optional int32 BindType = 5;
    if (has_bindtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetMemberFlop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetMemberFlop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetMemberFlop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetMemberFlop::MergeFrom(const RetMemberFlop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flopid()) {
      set_flopid(from.flopid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_flopname()) {
      set_flopname(from.flopname());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_bindtype()) {
      set_bindtype(from.bindtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetMemberFlop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetMemberFlop::CopyFrom(const RetMemberFlop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetMemberFlop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void RetMemberFlop::Swap(RetMemberFlop* other) {
  if (other != this) {
    std::swap(flopid_, other->flopid_);
    std::swap(itemid_, other->itemid_);
    std::swap(flopname_, other->flopname_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(bindtype_, other->bindtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetMemberFlop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetMemberFlop_descriptor_;
  metadata.reflection = RetMemberFlop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetInstanceAward::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

ReqGetInstanceAward::ReqGetInstanceAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetInstanceAward::InitAsDefaultInstance() {
}

ReqGetInstanceAward::ReqGetInstanceAward(const ReqGetInstanceAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetInstanceAward::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetInstanceAward::~ReqGetInstanceAward() {
  SharedDtor();
}

void ReqGetInstanceAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetInstanceAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetInstanceAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetInstanceAward_descriptor_;
}

const ReqGetInstanceAward& ReqGetInstanceAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqGetInstanceAward* ReqGetInstanceAward::default_instance_ = NULL;

ReqGetInstanceAward* ReqGetInstanceAward::New() const {
  return new ReqGetInstanceAward;
}

void ReqGetInstanceAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetInstanceAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 instanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetInstanceAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 instanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetInstanceAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 instanceID = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetInstanceAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 instanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetInstanceAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetInstanceAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetInstanceAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetInstanceAward::MergeFrom(const ReqGetInstanceAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetInstanceAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetInstanceAward::CopyFrom(const ReqGetInstanceAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetInstanceAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGetInstanceAward::Swap(ReqGetInstanceAward* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetInstanceAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetInstanceAward_descriptor_;
  metadata.reflection = ReqGetInstanceAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqEnterInstance::kInstanceIDFieldNumber;
#endif  // !_MSC_VER

ReqEnterInstance::ReqEnterInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqEnterInstance::InitAsDefaultInstance() {
}

ReqEnterInstance::ReqEnterInstance(const ReqEnterInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqEnterInstance::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqEnterInstance::~ReqEnterInstance() {
  SharedDtor();
}

void ReqEnterInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqEnterInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqEnterInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqEnterInstance_descriptor_;
}

const ReqEnterInstance& ReqEnterInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqEnterInstance* ReqEnterInstance::default_instance_ = NULL;

ReqEnterInstance* ReqEnterInstance::New() const {
  return new ReqEnterInstance;
}

void ReqEnterInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqEnterInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 instanceID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqEnterInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 instanceID = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqEnterInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 instanceID = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqEnterInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 instanceID = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqEnterInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqEnterInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqEnterInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqEnterInstance::MergeFrom(const ReqEnterInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqEnterInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqEnterInstance::CopyFrom(const ReqEnterInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqEnterInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqEnterInstance::Swap(ReqEnterInstance* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqEnterInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqEnterInstance_descriptor_;
  metadata.reflection = ReqEnterInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ToGTGetInstanceTeamID::ToGTGetInstanceTeamID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGTGetInstanceTeamID::InitAsDefaultInstance() {
}

ToGTGetInstanceTeamID::ToGTGetInstanceTeamID(const ToGTGetInstanceTeamID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGTGetInstanceTeamID::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGTGetInstanceTeamID::~ToGTGetInstanceTeamID() {
  SharedDtor();
}

void ToGTGetInstanceTeamID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToGTGetInstanceTeamID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGTGetInstanceTeamID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGTGetInstanceTeamID_descriptor_;
}

const ToGTGetInstanceTeamID& ToGTGetInstanceTeamID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ToGTGetInstanceTeamID* ToGTGetInstanceTeamID::default_instance_ = NULL;

ToGTGetInstanceTeamID* ToGTGetInstanceTeamID::New() const {
  return new ToGTGetInstanceTeamID;
}

void ToGTGetInstanceTeamID::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGTGetInstanceTeamID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ToGTGetInstanceTeamID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGTGetInstanceTeamID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGTGetInstanceTeamID::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGTGetInstanceTeamID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGTGetInstanceTeamID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGTGetInstanceTeamID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGTGetInstanceTeamID::MergeFrom(const ToGTGetInstanceTeamID& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGTGetInstanceTeamID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGTGetInstanceTeamID::CopyFrom(const ToGTGetInstanceTeamID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGTGetInstanceTeamID::IsInitialized() const {

  return true;
}

void ToGTGetInstanceTeamID::Swap(ToGTGetInstanceTeamID* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGTGetInstanceTeamID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGTGetInstanceTeamID_descriptor_;
  metadata.reflection = ToGTGetInstanceTeamID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetGetInstanceTeamID::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

RetGetInstanceTeamID::RetGetInstanceTeamID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetGetInstanceTeamID::InitAsDefaultInstance() {
}

RetGetInstanceTeamID::RetGetInstanceTeamID(const RetGetInstanceTeamID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetGetInstanceTeamID::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetGetInstanceTeamID::~RetGetInstanceTeamID() {
  SharedDtor();
}

void RetGetInstanceTeamID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetGetInstanceTeamID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetGetInstanceTeamID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetGetInstanceTeamID_descriptor_;
}

const RetGetInstanceTeamID& RetGetInstanceTeamID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetGetInstanceTeamID* RetGetInstanceTeamID::default_instance_ = NULL;

RetGetInstanceTeamID* RetGetInstanceTeamID::New() const {
  return new RetGetInstanceTeamID;
}

void RetGetInstanceTeamID::Clear() {
  teaminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetGetInstanceTeamID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MapInstanceProto.InstanceTeamInfo teamInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teaminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_teamInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetGetInstanceTeamID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MapInstanceProto.InstanceTeamInfo teamInfo = 1;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->teaminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetGetInstanceTeamID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MapInstanceProto.InstanceTeamInfo teamInfo = 1;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->teaminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetGetInstanceTeamID::ByteSize() const {
  int total_size = 0;

  // repeated .MapInstanceProto.InstanceTeamInfo teamInfo = 1;
  total_size += 1 * this->teaminfo_size();
  for (int i = 0; i < this->teaminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teaminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetGetInstanceTeamID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetGetInstanceTeamID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetGetInstanceTeamID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetGetInstanceTeamID::MergeFrom(const RetGetInstanceTeamID& from) {
  GOOGLE_CHECK_NE(&from, this);
  teaminfo_.MergeFrom(from.teaminfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetGetInstanceTeamID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGetInstanceTeamID::CopyFrom(const RetGetInstanceTeamID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGetInstanceTeamID::IsInitialized() const {

  for (int i = 0; i < teaminfo_size(); i++) {
    if (!this->teaminfo(i).IsInitialized()) return false;
  }
  return true;
}

void RetGetInstanceTeamID::Swap(RetGetInstanceTeamID* other) {
  if (other != this) {
    teaminfo_.Swap(&other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetGetInstanceTeamID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetGetInstanceTeamID_descriptor_;
  metadata.reflection = RetGetInstanceTeamID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceTeamInfo::kDwTeamIDFieldNumber;
const int InstanceTeamInfo::kDwInstanceIDFieldNumber;
const int InstanceTeamInfo::kDwTeamPowerFieldNumber;
const int InstanceTeamInfo::kDwTeamMembersFieldNumber;
const int InstanceTeamInfo::kDwLeaderNameFieldNumber;
#endif  // !_MSC_VER

InstanceTeamInfo::InstanceTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceTeamInfo::InitAsDefaultInstance() {
}

InstanceTeamInfo::InstanceTeamInfo(const InstanceTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  dwteamid_ = 0;
  dwinstanceid_ = 0;
  dwteampower_ = 0;
  dwteammembers_ = 0;
  dwleadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceTeamInfo::~InstanceTeamInfo() {
  SharedDtor();
}

void InstanceTeamInfo::SharedDtor() {
  if (dwleadername_ != &::google::protobuf::internal::kEmptyString) {
    delete dwleadername_;
  }
  if (this != default_instance_) {
  }
}

void InstanceTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceTeamInfo_descriptor_;
}

const InstanceTeamInfo& InstanceTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

InstanceTeamInfo* InstanceTeamInfo::default_instance_ = NULL;

InstanceTeamInfo* InstanceTeamInfo::New() const {
  return new InstanceTeamInfo;
}

void InstanceTeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwteamid_ = 0;
    dwinstanceid_ = 0;
    dwteampower_ = 0;
    dwteammembers_ = 0;
    if (has_dwleadername()) {
      if (dwleadername_ != &::google::protobuf::internal::kEmptyString) {
        dwleadername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwTeamID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwteamid_)));
          set_has_dwteamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwInstanceID;
        break;
      }

      // optional int32 dwInstanceID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwInstanceID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwinstanceid_)));
          set_has_dwinstanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dwTeamPower;
        break;
      }

      // optional int32 dwTeamPower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwTeamPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwteampower_)));
          set_has_dwteampower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dwTeamMembers;
        break;
      }

      // optional int32 dwTeamMembers = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwTeamMembers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwteammembers_)));
          set_has_dwteammembers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_dwLeaderName;
        break;
      }

      // optional string dwLeaderName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_dwLeaderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_dwleadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->dwleadername().data(), this->dwleadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwTeamID = 1;
  if (has_dwteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwteamid(), output);
  }

  // optional int32 dwInstanceID = 2;
  if (has_dwinstanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwinstanceid(), output);
  }

  // optional int32 dwTeamPower = 3;
  if (has_dwteampower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dwteampower(), output);
  }

  // optional int32 dwTeamMembers = 4;
  if (has_dwteammembers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dwteammembers(), output);
  }

  // optional string dwLeaderName = 5;
  if (has_dwleadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dwleadername().data(), this->dwleadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->dwleadername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwTeamID = 1;
  if (has_dwteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwteamid(), target);
  }

  // optional int32 dwInstanceID = 2;
  if (has_dwinstanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwinstanceid(), target);
  }

  // optional int32 dwTeamPower = 3;
  if (has_dwteampower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dwteampower(), target);
  }

  // optional int32 dwTeamMembers = 4;
  if (has_dwteammembers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dwteammembers(), target);
  }

  // optional string dwLeaderName = 5;
  if (has_dwleadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->dwleadername().data(), this->dwleadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->dwleadername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwTeamID = 1;
    if (has_dwteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwteamid());
    }

    // optional int32 dwInstanceID = 2;
    if (has_dwinstanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwinstanceid());
    }

    // optional int32 dwTeamPower = 3;
    if (has_dwteampower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwteampower());
    }

    // optional int32 dwTeamMembers = 4;
    if (has_dwteammembers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwteammembers());
    }

    // optional string dwLeaderName = 5;
    if (has_dwleadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->dwleadername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceTeamInfo::MergeFrom(const InstanceTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwteamid()) {
      set_dwteamid(from.dwteamid());
    }
    if (from.has_dwinstanceid()) {
      set_dwinstanceid(from.dwinstanceid());
    }
    if (from.has_dwteampower()) {
      set_dwteampower(from.dwteampower());
    }
    if (from.has_dwteammembers()) {
      set_dwteammembers(from.dwteammembers());
    }
    if (from.has_dwleadername()) {
      set_dwleadername(from.dwleadername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceTeamInfo::CopyFrom(const InstanceTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceTeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstanceTeamInfo::Swap(InstanceTeamInfo* other) {
  if (other != this) {
    std::swap(dwteamid_, other->dwteamid_);
    std::swap(dwinstanceid_, other->dwinstanceid_);
    std::swap(dwteampower_, other->dwteampower_);
    std::swap(dwteammembers_, other->dwteammembers_);
    std::swap(dwleadername_, other->dwleadername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceTeamInfo_descriptor_;
  metadata.reflection = InstanceTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ToClientLeaveInstance::ToClientLeaveInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClientLeaveInstance::InitAsDefaultInstance() {
}

ToClientLeaveInstance::ToClientLeaveInstance(const ToClientLeaveInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClientLeaveInstance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClientLeaveInstance::~ToClientLeaveInstance() {
  SharedDtor();
}

void ToClientLeaveInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClientLeaveInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClientLeaveInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClientLeaveInstance_descriptor_;
}

const ToClientLeaveInstance& ToClientLeaveInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ToClientLeaveInstance* ToClientLeaveInstance::default_instance_ = NULL;

ToClientLeaveInstance* ToClientLeaveInstance::New() const {
  return new ToClientLeaveInstance;
}

void ToClientLeaveInstance::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClientLeaveInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ToClientLeaveInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClientLeaveInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClientLeaveInstance::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClientLeaveInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClientLeaveInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClientLeaveInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClientLeaveInstance::MergeFrom(const ToClientLeaveInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClientLeaveInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClientLeaveInstance::CopyFrom(const ToClientLeaveInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClientLeaveInstance::IsInitialized() const {

  return true;
}

void ToClientLeaveInstance::Swap(ToClientLeaveInstance* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClientLeaveInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClientLeaveInstance_descriptor_;
  metadata.reflection = ToClientLeaveInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToGTAwardInfo::kCharidFieldNumber;
const int ToGTAwardInfo::kAwardInfoFieldNumber;
#endif  // !_MSC_VER

ToGTAwardInfo::ToGTAwardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGTAwardInfo::InitAsDefaultInstance() {
  awardinfo_ = const_cast< ::MapInstanceProto::SimInstanceEnd*>(&::MapInstanceProto::SimInstanceEnd::default_instance());
}

ToGTAwardInfo::ToGTAwardInfo(const ToGTAwardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGTAwardInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  awardinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGTAwardInfo::~ToGTAwardInfo() {
  SharedDtor();
}

void ToGTAwardInfo::SharedDtor() {
  if (this != default_instance_) {
    delete awardinfo_;
  }
}

void ToGTAwardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGTAwardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGTAwardInfo_descriptor_;
}

const ToGTAwardInfo& ToGTAwardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ToGTAwardInfo* ToGTAwardInfo::default_instance_ = NULL;

ToGTAwardInfo* ToGTAwardInfo::New() const {
  return new ToGTAwardInfo;
}

void ToGTAwardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_awardinfo()) {
      if (awardinfo_ != NULL) awardinfo_->::MapInstanceProto::SimInstanceEnd::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGTAwardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_awardInfo;
        break;
      }

      // optional .MapInstanceProto.SimInstanceEnd awardInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_awardInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_awardinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToGTAwardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional .MapInstanceProto.SimInstanceEnd awardInfo = 2;
  if (has_awardinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->awardinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGTAwardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional .MapInstanceProto.SimInstanceEnd awardInfo = 2;
  if (has_awardinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->awardinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGTAwardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional .MapInstanceProto.SimInstanceEnd awardInfo = 2;
    if (has_awardinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->awardinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGTAwardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGTAwardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGTAwardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGTAwardInfo::MergeFrom(const ToGTAwardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_awardinfo()) {
      mutable_awardinfo()->::MapInstanceProto::SimInstanceEnd::MergeFrom(from.awardinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGTAwardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGTAwardInfo::CopyFrom(const ToGTAwardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGTAwardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_awardinfo()) {
    if (!this->awardinfo().IsInitialized()) return false;
  }
  return true;
}

void ToGTAwardInfo::Swap(ToGTAwardInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(awardinfo_, other->awardinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGTAwardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGTAwardInfo_descriptor_;
  metadata.reflection = ToGTAwardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqCreateInstance::kInstanceIdFieldNumber;
const int ClientReqCreateInstance::kInstanceTypeFieldNumber;
const int ClientReqCreateInstance::kParamfFieldNumber;
#endif  // !_MSC_VER

ClientReqCreateInstance::ClientReqCreateInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqCreateInstance::InitAsDefaultInstance() {
}

ClientReqCreateInstance::ClientReqCreateInstance(const ClientReqCreateInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqCreateInstance::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = 0;
  instancetype_ = 0;
  paramf_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqCreateInstance::~ClientReqCreateInstance() {
  SharedDtor();
}

void ClientReqCreateInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqCreateInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqCreateInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqCreateInstance_descriptor_;
}

const ClientReqCreateInstance& ClientReqCreateInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientReqCreateInstance* ClientReqCreateInstance::default_instance_ = NULL;

ClientReqCreateInstance* ClientReqCreateInstance::New() const {
  return new ClientReqCreateInstance;
}

void ClientReqCreateInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = 0;
    instancetype_ = 0;
    paramf_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqCreateInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 InstanceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_InstanceType;
        break;
      }

      // required int32 InstanceType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstanceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instancetype_)));
          set_has_instancetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_paramf;
        break;
      }

      // optional int32 paramf = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paramf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paramf_)));
          set_has_paramf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqCreateInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 InstanceId = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instanceid(), output);
  }

  // required int32 InstanceType = 2;
  if (has_instancetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instancetype(), output);
  }

  // optional int32 paramf = 3;
  if (has_paramf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->paramf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqCreateInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 InstanceId = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instanceid(), target);
  }

  // required int32 InstanceType = 2;
  if (has_instancetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instancetype(), target);
  }

  // optional int32 paramf = 3;
  if (has_paramf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->paramf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqCreateInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 InstanceId = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // required int32 InstanceType = 2;
    if (has_instancetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instancetype());
    }

    // optional int32 paramf = 3;
    if (has_paramf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paramf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqCreateInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqCreateInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqCreateInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqCreateInstance::MergeFrom(const ClientReqCreateInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_instancetype()) {
      set_instancetype(from.instancetype());
    }
    if (from.has_paramf()) {
      set_paramf(from.paramf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqCreateInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqCreateInstance::CopyFrom(const ClientReqCreateInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqCreateInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientReqCreateInstance::Swap(ClientReqCreateInstance* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(instancetype_, other->instancetype_);
    std::swap(paramf_, other->paramf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqCreateInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqCreateInstance_descriptor_;
  metadata.reflection = ClientReqCreateInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMReqWSCreateInstance::kInstanceIdFieldNumber;
const int GMReqWSCreateInstance::kInstanceTypeFieldNumber;
const int GMReqWSCreateInstance::kCharidFieldNumber;
const int GMReqWSCreateInstance::kParamfFieldNumber;
#endif  // !_MSC_VER

GMReqWSCreateInstance::GMReqWSCreateInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMReqWSCreateInstance::InitAsDefaultInstance() {
}

GMReqWSCreateInstance::GMReqWSCreateInstance(const GMReqWSCreateInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMReqWSCreateInstance::SharedCtor() {
  _cached_size_ = 0;
  instanceid_ = 0;
  instancetype_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  paramf_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMReqWSCreateInstance::~GMReqWSCreateInstance() {
  SharedDtor();
}

void GMReqWSCreateInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMReqWSCreateInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMReqWSCreateInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMReqWSCreateInstance_descriptor_;
}

const GMReqWSCreateInstance& GMReqWSCreateInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

GMReqWSCreateInstance* GMReqWSCreateInstance::default_instance_ = NULL;

GMReqWSCreateInstance* GMReqWSCreateInstance::New() const {
  return new GMReqWSCreateInstance;
}

void GMReqWSCreateInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instanceid_ = 0;
    instancetype_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    paramf_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMReqWSCreateInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 InstanceId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_InstanceType;
        break;
      }

      // optional int32 InstanceType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_InstanceType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instancetype_)));
          set_has_instancetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional int64 charid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_paramf;
        break;
      }

      // optional int32 paramf = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_paramf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &paramf_)));
          set_has_paramf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMReqWSCreateInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 InstanceId = 1;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->instanceid(), output);
  }

  // optional int32 InstanceType = 2;
  if (has_instancetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instancetype(), output);
  }

  // optional int64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->charid(), output);
  }

  // optional int32 paramf = 4;
  if (has_paramf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->paramf(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMReqWSCreateInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 InstanceId = 1;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->instanceid(), target);
  }

  // optional int32 InstanceType = 2;
  if (has_instancetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instancetype(), target);
  }

  // optional int64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->charid(), target);
  }

  // optional int32 paramf = 4;
  if (has_paramf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->paramf(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMReqWSCreateInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 InstanceId = 1;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // optional int32 InstanceType = 2;
    if (has_instancetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instancetype());
    }

    // optional int64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 paramf = 4;
    if (has_paramf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->paramf());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMReqWSCreateInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMReqWSCreateInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMReqWSCreateInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMReqWSCreateInstance::MergeFrom(const GMReqWSCreateInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_instancetype()) {
      set_instancetype(from.instancetype());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_paramf()) {
      set_paramf(from.paramf());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMReqWSCreateInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMReqWSCreateInstance::CopyFrom(const GMReqWSCreateInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMReqWSCreateInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMReqWSCreateInstance::Swap(GMReqWSCreateInstance* other) {
  if (other != this) {
    std::swap(instanceid_, other->instanceid_);
    std::swap(instancetype_, other->instancetype_);
    std::swap(charid_, other->charid_);
    std::swap(paramf_, other->paramf_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMReqWSCreateInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMReqWSCreateInstance_descriptor_;
  metadata.reflection = GMReqWSCreateInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckToGMCreateInstance::kRetFieldNumber;
const int AckToGMCreateInstance::kInstanceidFieldNumber;
#endif  // !_MSC_VER

AckToGMCreateInstance::AckToGMCreateInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckToGMCreateInstance::InitAsDefaultInstance() {
}

AckToGMCreateInstance::AckToGMCreateInstance(const AckToGMCreateInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckToGMCreateInstance::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  instanceid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckToGMCreateInstance::~AckToGMCreateInstance() {
  SharedDtor();
}

void AckToGMCreateInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckToGMCreateInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckToGMCreateInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckToGMCreateInstance_descriptor_;
}

const AckToGMCreateInstance& AckToGMCreateInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

AckToGMCreateInstance* AckToGMCreateInstance::default_instance_ = NULL;

AckToGMCreateInstance* AckToGMCreateInstance::New() const {
  return new AckToGMCreateInstance;
}

void AckToGMCreateInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    instanceid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckToGMCreateInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceid;
        break;
      }

      // optional int64 instanceid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckToGMCreateInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 instanceid = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckToGMCreateInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 instanceid = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckToGMCreateInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 instanceid = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckToGMCreateInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckToGMCreateInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckToGMCreateInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckToGMCreateInstance::MergeFrom(const AckToGMCreateInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckToGMCreateInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckToGMCreateInstance::CopyFrom(const AckToGMCreateInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckToGMCreateInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckToGMCreateInstance::Swap(AckToGMCreateInstance* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckToGMCreateInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckToGMCreateInstance_descriptor_;
  metadata.reflection = AckToGMCreateInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClientReqWorldArenaInfo::ClientReqWorldArenaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqWorldArenaInfo::InitAsDefaultInstance() {
}

ClientReqWorldArenaInfo::ClientReqWorldArenaInfo(const ClientReqWorldArenaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqWorldArenaInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqWorldArenaInfo::~ClientReqWorldArenaInfo() {
  SharedDtor();
}

void ClientReqWorldArenaInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqWorldArenaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqWorldArenaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqWorldArenaInfo_descriptor_;
}

const ClientReqWorldArenaInfo& ClientReqWorldArenaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientReqWorldArenaInfo* ClientReqWorldArenaInfo::default_instance_ = NULL;

ClientReqWorldArenaInfo* ClientReqWorldArenaInfo::New() const {
  return new ClientReqWorldArenaInfo;
}

void ClientReqWorldArenaInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqWorldArenaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClientReqWorldArenaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqWorldArenaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqWorldArenaInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqWorldArenaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqWorldArenaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqWorldArenaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqWorldArenaInfo::MergeFrom(const ClientReqWorldArenaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqWorldArenaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqWorldArenaInfo::CopyFrom(const ClientReqWorldArenaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqWorldArenaInfo::IsInitialized() const {

  return true;
}

void ClientReqWorldArenaInfo::Swap(ClientReqWorldArenaInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqWorldArenaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqWorldArenaInfo_descriptor_;
  metadata.reflection = ClientReqWorldArenaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqWarReport::kPageFieldNumber;
#endif  // !_MSC_VER

ClientReqWarReport::ClientReqWarReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqWarReport::InitAsDefaultInstance() {
}

ClientReqWarReport::ClientReqWarReport(const ClientReqWarReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqWarReport::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqWarReport::~ClientReqWarReport() {
  SharedDtor();
}

void ClientReqWarReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqWarReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqWarReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqWarReport_descriptor_;
}

const ClientReqWarReport& ClientReqWarReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientReqWarReport* ClientReqWarReport::default_instance_ = NULL;

ClientReqWarReport* ClientReqWarReport::New() const {
  return new ClientReqWarReport;
}

void ClientReqWarReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqWarReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqWarReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 page = 1;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqWarReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 page = 1;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqWarReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqWarReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqWarReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqWarReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqWarReport::MergeFrom(const ClientReqWarReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqWarReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqWarReport::CopyFrom(const ClientReqWarReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqWarReport::IsInitialized() const {

  return true;
}

void ClientReqWarReport::Swap(ClientReqWarReport* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqWarReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqWarReport_descriptor_;
  metadata.reflection = ClientReqWarReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqToWorldGetArenaInfo::kOtherinfoFieldNumber;
#endif  // !_MSC_VER

ReqToWorldGetArenaInfo::ReqToWorldGetArenaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqToWorldGetArenaInfo::InitAsDefaultInstance() {
}

ReqToWorldGetArenaInfo::ReqToWorldGetArenaInfo(const ReqToWorldGetArenaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqToWorldGetArenaInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqToWorldGetArenaInfo::~ReqToWorldGetArenaInfo() {
  SharedDtor();
}

void ReqToWorldGetArenaInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqToWorldGetArenaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqToWorldGetArenaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqToWorldGetArenaInfo_descriptor_;
}

const ReqToWorldGetArenaInfo& ReqToWorldGetArenaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqToWorldGetArenaInfo* ReqToWorldGetArenaInfo::default_instance_ = NULL;

ReqToWorldGetArenaInfo* ReqToWorldGetArenaInfo::New() const {
  return new ReqToWorldGetArenaInfo;
}

void ReqToWorldGetArenaInfo::Clear() {
  otherinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqToWorldGetArenaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MapInstanceProto.OtherPlayerArenaInfo otherinfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otherinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_otherinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_otherinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqToWorldGetArenaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MapInstanceProto.OtherPlayerArenaInfo otherinfo = 5;
  for (int i = 0; i < this->otherinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->otherinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqToWorldGetArenaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MapInstanceProto.OtherPlayerArenaInfo otherinfo = 5;
  for (int i = 0; i < this->otherinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->otherinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqToWorldGetArenaInfo::ByteSize() const {
  int total_size = 0;

  // repeated .MapInstanceProto.OtherPlayerArenaInfo otherinfo = 5;
  total_size += 1 * this->otherinfo_size();
  for (int i = 0; i < this->otherinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->otherinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqToWorldGetArenaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqToWorldGetArenaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqToWorldGetArenaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqToWorldGetArenaInfo::MergeFrom(const ReqToWorldGetArenaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  otherinfo_.MergeFrom(from.otherinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqToWorldGetArenaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqToWorldGetArenaInfo::CopyFrom(const ReqToWorldGetArenaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqToWorldGetArenaInfo::IsInitialized() const {

  for (int i = 0; i < otherinfo_size(); i++) {
    if (!this->otherinfo(i).IsInitialized()) return false;
  }
  return true;
}

void ReqToWorldGetArenaInfo::Swap(ReqToWorldGetArenaInfo* other) {
  if (other != this) {
    otherinfo_.Swap(&other->otherinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqToWorldGetArenaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqToWorldGetArenaInfo_descriptor_;
  metadata.reflection = ReqToWorldGetArenaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OtherPlayerArenaInfo::kCharidFieldNumber;
const int OtherPlayerArenaInfo::kCharnameFieldNumber;
const int OtherPlayerArenaInfo::kRankingFieldNumber;
const int OtherPlayerArenaInfo::kProfessionFieldNumber;
const int OtherPlayerArenaInfo::kFightFieldNumber;
const int OtherPlayerArenaInfo::kSexFieldNumber;
const int OtherPlayerArenaInfo::kViplvFieldNumber;
const int OtherPlayerArenaInfo::kLvFieldNumber;
#endif  // !_MSC_VER

OtherPlayerArenaInfo::OtherPlayerArenaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OtherPlayerArenaInfo::InitAsDefaultInstance() {
}

OtherPlayerArenaInfo::OtherPlayerArenaInfo(const OtherPlayerArenaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OtherPlayerArenaInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ranking_ = 0;
  profession_ = 0;
  fight_ = 0;
  sex_ = false;
  viplv_ = 0;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OtherPlayerArenaInfo::~OtherPlayerArenaInfo() {
  SharedDtor();
}

void OtherPlayerArenaInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void OtherPlayerArenaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OtherPlayerArenaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OtherPlayerArenaInfo_descriptor_;
}

const OtherPlayerArenaInfo& OtherPlayerArenaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

OtherPlayerArenaInfo* OtherPlayerArenaInfo::default_instance_ = NULL;

OtherPlayerArenaInfo* OtherPlayerArenaInfo::New() const {
  return new OtherPlayerArenaInfo;
}

void OtherPlayerArenaInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    ranking_ = 0;
    profession_ = 0;
    fight_ = 0;
    sex_ = false;
    viplv_ = 0;
    lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OtherPlayerArenaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Ranking;
        break;
      }

      // optional int32 Ranking = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // optional int32 profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_fight;
        break;
      }

      // optional int32 fight = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional bool sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_viplv;
        break;
      }

      // optional int32 viplv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_lv;
        break;
      }

      // optional int32 lv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OtherPlayerArenaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  // optional int32 Ranking = 3;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranking(), output);
  }

  // optional int32 profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->profession(), output);
  }

  // optional int32 fight = 5;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->fight(), output);
  }

  // optional bool sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->sex(), output);
  }

  // optional int32 viplv = 7;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->viplv(), output);
  }

  // optional int32 lv = 8;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OtherPlayerArenaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // optional int32 Ranking = 3;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ranking(), target);
  }

  // optional int32 profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->profession(), target);
  }

  // optional int32 fight = 5;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->fight(), target);
  }

  // optional bool sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->sex(), target);
  }

  // optional int32 viplv = 7;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->viplv(), target);
  }

  // optional int32 lv = 8;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OtherPlayerArenaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 Ranking = 3;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // optional int32 profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 fight = 5;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional bool sex = 6;
    if (has_sex()) {
      total_size += 1 + 1;
    }

    // optional int32 viplv = 7;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

    // optional int32 lv = 8;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OtherPlayerArenaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OtherPlayerArenaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OtherPlayerArenaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OtherPlayerArenaInfo::MergeFrom(const OtherPlayerArenaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OtherPlayerArenaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OtherPlayerArenaInfo::CopyFrom(const OtherPlayerArenaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OtherPlayerArenaInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void OtherPlayerArenaInfo::Swap(OtherPlayerArenaInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(ranking_, other->ranking_);
    std::swap(profession_, other->profession_);
    std::swap(fight_, other->fight_);
    std::swap(sex_, other->sex_);
    std::swap(viplv_, other->viplv_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OtherPlayerArenaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OtherPlayerArenaInfo_descriptor_;
  metadata.reflection = OtherPlayerArenaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqToWordGetWarReport::kIsEndFieldNumber;
const int ReqToWordGetWarReport::kReportFieldNumber;
#endif  // !_MSC_VER

ReqToWordGetWarReport::ReqToWordGetWarReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqToWordGetWarReport::InitAsDefaultInstance() {
}

ReqToWordGetWarReport::ReqToWordGetWarReport(const ReqToWordGetWarReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqToWordGetWarReport::SharedCtor() {
  _cached_size_ = 0;
  isend_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqToWordGetWarReport::~ReqToWordGetWarReport() {
  SharedDtor();
}

void ReqToWordGetWarReport::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqToWordGetWarReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqToWordGetWarReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqToWordGetWarReport_descriptor_;
}

const ReqToWordGetWarReport& ReqToWordGetWarReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqToWordGetWarReport* ReqToWordGetWarReport::default_instance_ = NULL;

ReqToWordGetWarReport* ReqToWordGetWarReport::New() const {
  return new ReqToWordGetWarReport;
}

void ReqToWordGetWarReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isend_ = false;
  }
  report_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqToWordGetWarReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool IsEnd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isend_)));
          set_has_isend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_report;
        break;
      }

      // repeated .MapInstanceProto.WarReport report = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_report:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_report()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_report;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqToWordGetWarReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool IsEnd = 1;
  if (has_isend()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->isend(), output);
  }

  // repeated .MapInstanceProto.WarReport report = 2;
  for (int i = 0; i < this->report_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->report(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqToWordGetWarReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool IsEnd = 1;
  if (has_isend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->isend(), target);
  }

  // repeated .MapInstanceProto.WarReport report = 2;
  for (int i = 0; i < this->report_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->report(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqToWordGetWarReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool IsEnd = 1;
    if (has_isend()) {
      total_size += 1 + 1;
    }

  }
  // repeated .MapInstanceProto.WarReport report = 2;
  total_size += 1 * this->report_size();
  for (int i = 0; i < this->report_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->report(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqToWordGetWarReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqToWordGetWarReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqToWordGetWarReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqToWordGetWarReport::MergeFrom(const ReqToWordGetWarReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  report_.MergeFrom(from.report_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isend()) {
      set_isend(from.isend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqToWordGetWarReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqToWordGetWarReport::CopyFrom(const ReqToWordGetWarReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqToWordGetWarReport::IsInitialized() const {

  return true;
}

void ReqToWordGetWarReport::Swap(ReqToWordGetWarReport* other) {
  if (other != this) {
    std::swap(isend_, other->isend_);
    report_.Swap(&other->report_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqToWordGetWarReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqToWordGetWarReport_descriptor_;
  metadata.reflection = ReqToWordGetWarReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqToGameGetArenaInfo::kChallengeTimesFieldNumber;
const int ReqToGameGetArenaInfo::kAlreadyRefreshFieldNumber;
const int ReqToGameGetArenaInfo::kAlreadyAddChallFieldNumber;
const int ReqToGameGetArenaInfo::kRankingFieldNumber;
const int ReqToGameGetArenaInfo::kHistoryRankFieldNumber;
const int ReqToGameGetArenaInfo::kHistoryRewardFieldNumber;
#endif  // !_MSC_VER

ReqToGameGetArenaInfo::ReqToGameGetArenaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqToGameGetArenaInfo::InitAsDefaultInstance() {
  historyreward_ = const_cast< ::MapInstanceProto::ArenaHistoryReward*>(&::MapInstanceProto::ArenaHistoryReward::default_instance());
}

ReqToGameGetArenaInfo::ReqToGameGetArenaInfo(const ReqToGameGetArenaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqToGameGetArenaInfo::SharedCtor() {
  _cached_size_ = 0;
  challengetimes_ = 0;
  alreadyrefresh_ = 0;
  alreadyaddchall_ = 0;
  ranking_ = 0;
  historyrank_ = 0;
  historyreward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqToGameGetArenaInfo::~ReqToGameGetArenaInfo() {
  SharedDtor();
}

void ReqToGameGetArenaInfo::SharedDtor() {
  if (this != default_instance_) {
    delete historyreward_;
  }
}

void ReqToGameGetArenaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqToGameGetArenaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqToGameGetArenaInfo_descriptor_;
}

const ReqToGameGetArenaInfo& ReqToGameGetArenaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqToGameGetArenaInfo* ReqToGameGetArenaInfo::default_instance_ = NULL;

ReqToGameGetArenaInfo* ReqToGameGetArenaInfo::New() const {
  return new ReqToGameGetArenaInfo;
}

void ReqToGameGetArenaInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    challengetimes_ = 0;
    alreadyrefresh_ = 0;
    alreadyaddchall_ = 0;
    ranking_ = 0;
    historyrank_ = 0;
    if (has_historyreward()) {
      if (historyreward_ != NULL) historyreward_->::MapInstanceProto::ArenaHistoryReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqToGameGetArenaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 challengeTimes = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengetimes_)));
          set_has_challengetimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_alreadyRefresh;
        break;
      }

      // optional int32 alreadyRefresh = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alreadyRefresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alreadyrefresh_)));
          set_has_alreadyrefresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_alreadyAddChall;
        break;
      }

      // optional int32 alreadyAddChall = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alreadyAddChall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alreadyaddchall_)));
          set_has_alreadyaddchall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Ranking;
        break;
      }

      // optional int32 Ranking = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_historyRank;
        break;
      }

      // optional int32 historyRank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_historyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &historyrank_)));
          set_has_historyrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_historyReward;
        break;
      }

      // optional .MapInstanceProto.ArenaHistoryReward historyReward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_historyReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_historyreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqToGameGetArenaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 challengeTimes = 1;
  if (has_challengetimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->challengetimes(), output);
  }

  // optional int32 alreadyRefresh = 2;
  if (has_alreadyrefresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->alreadyrefresh(), output);
  }

  // optional int32 alreadyAddChall = 3;
  if (has_alreadyaddchall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->alreadyaddchall(), output);
  }

  // optional int32 Ranking = 4;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ranking(), output);
  }

  // optional int32 historyRank = 5;
  if (has_historyrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->historyrank(), output);
  }

  // optional .MapInstanceProto.ArenaHistoryReward historyReward = 6;
  if (has_historyreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->historyreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqToGameGetArenaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 challengeTimes = 1;
  if (has_challengetimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->challengetimes(), target);
  }

  // optional int32 alreadyRefresh = 2;
  if (has_alreadyrefresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->alreadyrefresh(), target);
  }

  // optional int32 alreadyAddChall = 3;
  if (has_alreadyaddchall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->alreadyaddchall(), target);
  }

  // optional int32 Ranking = 4;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ranking(), target);
  }

  // optional int32 historyRank = 5;
  if (has_historyrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->historyrank(), target);
  }

  // optional .MapInstanceProto.ArenaHistoryReward historyReward = 6;
  if (has_historyreward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->historyreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqToGameGetArenaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 challengeTimes = 1;
    if (has_challengetimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengetimes());
    }

    // optional int32 alreadyRefresh = 2;
    if (has_alreadyrefresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alreadyrefresh());
    }

    // optional int32 alreadyAddChall = 3;
    if (has_alreadyaddchall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alreadyaddchall());
    }

    // optional int32 Ranking = 4;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // optional int32 historyRank = 5;
    if (has_historyrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->historyrank());
    }

    // optional .MapInstanceProto.ArenaHistoryReward historyReward = 6;
    if (has_historyreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->historyreward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqToGameGetArenaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqToGameGetArenaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqToGameGetArenaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqToGameGetArenaInfo::MergeFrom(const ReqToGameGetArenaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_challengetimes()) {
      set_challengetimes(from.challengetimes());
    }
    if (from.has_alreadyrefresh()) {
      set_alreadyrefresh(from.alreadyrefresh());
    }
    if (from.has_alreadyaddchall()) {
      set_alreadyaddchall(from.alreadyaddchall());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_historyrank()) {
      set_historyrank(from.historyrank());
    }
    if (from.has_historyreward()) {
      mutable_historyreward()->::MapInstanceProto::ArenaHistoryReward::MergeFrom(from.historyreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqToGameGetArenaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqToGameGetArenaInfo::CopyFrom(const ReqToGameGetArenaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqToGameGetArenaInfo::IsInitialized() const {

  return true;
}

void ReqToGameGetArenaInfo::Swap(ReqToGameGetArenaInfo* other) {
  if (other != this) {
    std::swap(challengetimes_, other->challengetimes_);
    std::swap(alreadyrefresh_, other->alreadyrefresh_);
    std::swap(alreadyaddchall_, other->alreadyaddchall_);
    std::swap(ranking_, other->ranking_);
    std::swap(historyrank_, other->historyrank_);
    std::swap(historyreward_, other->historyreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqToGameGetArenaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqToGameGetArenaInfo_descriptor_;
  metadata.reflection = ReqToGameGetArenaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaHistoryReward::kRewardFieldNumber;
const int ArenaHistoryReward::kHavaRewardFieldNumber;
#endif  // !_MSC_VER

ArenaHistoryReward::ArenaHistoryReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaHistoryReward::InitAsDefaultInstance() {
}

ArenaHistoryReward::ArenaHistoryReward(const ArenaHistoryReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaHistoryReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaHistoryReward::~ArenaHistoryReward() {
  SharedDtor();
}

void ArenaHistoryReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaHistoryReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaHistoryReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaHistoryReward_descriptor_;
}

const ArenaHistoryReward& ArenaHistoryReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ArenaHistoryReward* ArenaHistoryReward::default_instance_ = NULL;

ArenaHistoryReward* ArenaHistoryReward::New() const {
  return new ArenaHistoryReward;
}

void ArenaHistoryReward::Clear() {
  reward_.Clear();
  havareward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaHistoryReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_reward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_reward;
        if (input->ExpectTag(16)) goto parse_havaReward;
        break;
      }

      // repeated int32 havaReward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_havaReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_havareward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_havareward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_havaReward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaHistoryReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->reward(i), output);
  }

  // repeated int32 havaReward = 2;
  for (int i = 0; i < this->havareward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->havareward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaHistoryReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->reward(i), target);
  }

  // repeated int32 havaReward = 2;
  for (int i = 0; i < this->havareward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->havareward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaHistoryReward::ByteSize() const {
  int total_size = 0;

  // repeated int32 reward = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->reward(i));
    }
    total_size += 1 * this->reward_size() + data_size;
  }

  // repeated int32 havaReward = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->havareward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->havareward(i));
    }
    total_size += 1 * this->havareward_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaHistoryReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaHistoryReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaHistoryReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaHistoryReward::MergeFrom(const ArenaHistoryReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  havareward_.MergeFrom(from.havareward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaHistoryReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaHistoryReward::CopyFrom(const ArenaHistoryReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaHistoryReward::IsInitialized() const {

  return true;
}

void ArenaHistoryReward::Swap(ArenaHistoryReward* other) {
  if (other != this) {
    reward_.Swap(&other->reward_);
    havareward_.Swap(&other->havareward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaHistoryReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaHistoryReward_descriptor_;
  metadata.reflection = ArenaHistoryReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqArenaHistoryReward::kIdFieldNumber;
#endif  // !_MSC_VER

ReqArenaHistoryReward::ReqArenaHistoryReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqArenaHistoryReward::InitAsDefaultInstance() {
}

ReqArenaHistoryReward::ReqArenaHistoryReward(const ReqArenaHistoryReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqArenaHistoryReward::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqArenaHistoryReward::~ReqArenaHistoryReward() {
  SharedDtor();
}

void ReqArenaHistoryReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqArenaHistoryReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqArenaHistoryReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqArenaHistoryReward_descriptor_;
}

const ReqArenaHistoryReward& ReqArenaHistoryReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqArenaHistoryReward* ReqArenaHistoryReward::default_instance_ = NULL;

ReqArenaHistoryReward* ReqArenaHistoryReward::New() const {
  return new ReqArenaHistoryReward;
}

void ReqArenaHistoryReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqArenaHistoryReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqArenaHistoryReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqArenaHistoryReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqArenaHistoryReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqArenaHistoryReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqArenaHistoryReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqArenaHistoryReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqArenaHistoryReward::MergeFrom(const ReqArenaHistoryReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqArenaHistoryReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqArenaHistoryReward::CopyFrom(const ReqArenaHistoryReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqArenaHistoryReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqArenaHistoryReward::Swap(ReqArenaHistoryReward* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqArenaHistoryReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqArenaHistoryReward_descriptor_;
  metadata.reflection = ReqArenaHistoryReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RspArenaHistoryReward::kRetFieldNumber;
const int RspArenaHistoryReward::kIdFieldNumber;
#endif  // !_MSC_VER

RspArenaHistoryReward::RspArenaHistoryReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RspArenaHistoryReward::InitAsDefaultInstance() {
}

RspArenaHistoryReward::RspArenaHistoryReward(const RspArenaHistoryReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RspArenaHistoryReward::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RspArenaHistoryReward::~RspArenaHistoryReward() {
  SharedDtor();
}

void RspArenaHistoryReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RspArenaHistoryReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RspArenaHistoryReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RspArenaHistoryReward_descriptor_;
}

const RspArenaHistoryReward& RspArenaHistoryReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RspArenaHistoryReward* RspArenaHistoryReward::default_instance_ = NULL;

RspArenaHistoryReward* RspArenaHistoryReward::New() const {
  return new RspArenaHistoryReward;
}

void RspArenaHistoryReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RspArenaHistoryReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RspArenaHistoryReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RspArenaHistoryReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RspArenaHistoryReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RspArenaHistoryReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RspArenaHistoryReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RspArenaHistoryReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RspArenaHistoryReward::MergeFrom(const RspArenaHistoryReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RspArenaHistoryReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RspArenaHistoryReward::CopyFrom(const RspArenaHistoryReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RspArenaHistoryReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RspArenaHistoryReward::Swap(RspArenaHistoryReward* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RspArenaHistoryReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RspArenaHistoryReward_descriptor_;
  metadata.reflection = RspArenaHistoryReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarReport::kCharnameFieldNumber;
const int WarReport::kRankingFieldNumber;
const int WarReport::kIswinFieldNumber;
const int WarReport::kIschallengerFieldNumber;
const int WarReport::kTimesFieldNumber;
#endif  // !_MSC_VER

WarReport::WarReport()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarReport::InitAsDefaultInstance() {
}

WarReport::WarReport(const WarReport& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarReport::SharedCtor() {
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ranking_ = 0;
  iswin_ = false;
  ischallenger_ = false;
  times_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarReport::~WarReport() {
  SharedDtor();
}

void WarReport::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void WarReport::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarReport::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarReport_descriptor_;
}

const WarReport& WarReport::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WarReport* WarReport::default_instance_ = NULL;

WarReport* WarReport::New() const {
  return new WarReport;
}

void WarReport::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    ranking_ = 0;
    iswin_ = false;
    ischallenger_ = false;
    times_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarReport::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string charname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ranking;
        break;
      }

      // optional int32 ranking = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_iswin;
        break;
      }

      // optional bool iswin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iswin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ischallenger;
        break;
      }

      // optional bool ischallenger = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ischallenger:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ischallenger_)));
          set_has_ischallenger();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_times;
        break;
      }

      // optional int64 times = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarReport::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->charname(), output);
  }

  // optional int32 ranking = 2;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ranking(), output);
  }

  // optional bool iswin = 3;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->iswin(), output);
  }

  // optional bool ischallenger = 4;
  if (has_ischallenger()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->ischallenger(), output);
  }

  // optional int64 times = 5;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarReport::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->charname(), target);
  }

  // optional int32 ranking = 2;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ranking(), target);
  }

  // optional bool iswin = 3;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->iswin(), target);
  }

  // optional bool ischallenger = 4;
  if (has_ischallenger()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->ischallenger(), target);
  }

  // optional int64 times = 5;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarReport::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string charname = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 ranking = 2;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // optional bool iswin = 3;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

    // optional bool ischallenger = 4;
    if (has_ischallenger()) {
      total_size += 1 + 1;
    }

    // optional int64 times = 5;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarReport::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarReport* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarReport*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarReport::MergeFrom(const WarReport& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_ischallenger()) {
      set_ischallenger(from.ischallenger());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarReport::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarReport::CopyFrom(const WarReport& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarReport::IsInitialized() const {

  return true;
}

void WarReport::Swap(WarReport* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(ranking_, other->ranking_);
    std::swap(iswin_, other->iswin_);
    std::swap(ischallenger_, other->ischallenger_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarReport::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarReport_descriptor_;
  metadata.reflection = WarReport_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

CancelAreanCDTime::CancelAreanCDTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CancelAreanCDTime::InitAsDefaultInstance() {
}

CancelAreanCDTime::CancelAreanCDTime(const CancelAreanCDTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CancelAreanCDTime::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CancelAreanCDTime::~CancelAreanCDTime() {
  SharedDtor();
}

void CancelAreanCDTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CancelAreanCDTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CancelAreanCDTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CancelAreanCDTime_descriptor_;
}

const CancelAreanCDTime& CancelAreanCDTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

CancelAreanCDTime* CancelAreanCDTime::default_instance_ = NULL;

CancelAreanCDTime* CancelAreanCDTime::New() const {
  return new CancelAreanCDTime;
}

void CancelAreanCDTime::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CancelAreanCDTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void CancelAreanCDTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CancelAreanCDTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CancelAreanCDTime::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CancelAreanCDTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CancelAreanCDTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CancelAreanCDTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CancelAreanCDTime::MergeFrom(const CancelAreanCDTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CancelAreanCDTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CancelAreanCDTime::CopyFrom(const CancelAreanCDTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CancelAreanCDTime::IsInitialized() const {

  return true;
}

void CancelAreanCDTime::Swap(CancelAreanCDTime* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CancelAreanCDTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CancelAreanCDTime_descriptor_;
  metadata.reflection = CancelAreanCDTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnCancelAreanCDTime::kRetFieldNumber;
#endif  // !_MSC_VER

ReturnCancelAreanCDTime::ReturnCancelAreanCDTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnCancelAreanCDTime::InitAsDefaultInstance() {
}

ReturnCancelAreanCDTime::ReturnCancelAreanCDTime(const ReturnCancelAreanCDTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnCancelAreanCDTime::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnCancelAreanCDTime::~ReturnCancelAreanCDTime() {
  SharedDtor();
}

void ReturnCancelAreanCDTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnCancelAreanCDTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnCancelAreanCDTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnCancelAreanCDTime_descriptor_;
}

const ReturnCancelAreanCDTime& ReturnCancelAreanCDTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReturnCancelAreanCDTime* ReturnCancelAreanCDTime::default_instance_ = NULL;

ReturnCancelAreanCDTime* ReturnCancelAreanCDTime::New() const {
  return new ReturnCancelAreanCDTime;
}

void ReturnCancelAreanCDTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnCancelAreanCDTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnCancelAreanCDTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnCancelAreanCDTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnCancelAreanCDTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnCancelAreanCDTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnCancelAreanCDTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnCancelAreanCDTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnCancelAreanCDTime::MergeFrom(const ReturnCancelAreanCDTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnCancelAreanCDTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnCancelAreanCDTime::CopyFrom(const ReturnCancelAreanCDTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnCancelAreanCDTime::IsInitialized() const {

  return true;
}

void ReturnCancelAreanCDTime::Swap(ReturnCancelAreanCDTime* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnCancelAreanCDTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnCancelAreanCDTime_descriptor_;
  metadata.reflection = ReturnCancelAreanCDTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddChallengeTimes::kTimesFieldNumber;
#endif  // !_MSC_VER

AddChallengeTimes::AddChallengeTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddChallengeTimes::InitAsDefaultInstance() {
}

AddChallengeTimes::AddChallengeTimes(const AddChallengeTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddChallengeTimes::SharedCtor() {
  _cached_size_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddChallengeTimes::~AddChallengeTimes() {
  SharedDtor();
}

void AddChallengeTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddChallengeTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddChallengeTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddChallengeTimes_descriptor_;
}

const AddChallengeTimes& AddChallengeTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

AddChallengeTimes* AddChallengeTimes::default_instance_ = NULL;

AddChallengeTimes* AddChallengeTimes::New() const {
  return new AddChallengeTimes;
}

void AddChallengeTimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddChallengeTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 times = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddChallengeTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 times = 1;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddChallengeTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 times = 1;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddChallengeTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 times = 1;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddChallengeTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddChallengeTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddChallengeTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddChallengeTimes::MergeFrom(const AddChallengeTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddChallengeTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddChallengeTimes::CopyFrom(const AddChallengeTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddChallengeTimes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AddChallengeTimes::Swap(AddChallengeTimes* other) {
  if (other != this) {
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddChallengeTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddChallengeTimes_descriptor_;
  metadata.reflection = AddChallengeTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnAddChallengeTimes::kRetFieldNumber;
const int ReturnAddChallengeTimes::kCountFieldNumber;
const int ReturnAddChallengeTimes::kAlreadyAddChallFieldNumber;
#endif  // !_MSC_VER

ReturnAddChallengeTimes::ReturnAddChallengeTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnAddChallengeTimes::InitAsDefaultInstance() {
}

ReturnAddChallengeTimes::ReturnAddChallengeTimes(const ReturnAddChallengeTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnAddChallengeTimes::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  count_ = 0;
  alreadyaddchall_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnAddChallengeTimes::~ReturnAddChallengeTimes() {
  SharedDtor();
}

void ReturnAddChallengeTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnAddChallengeTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnAddChallengeTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnAddChallengeTimes_descriptor_;
}

const ReturnAddChallengeTimes& ReturnAddChallengeTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReturnAddChallengeTimes* ReturnAddChallengeTimes::default_instance_ = NULL;

ReturnAddChallengeTimes* ReturnAddChallengeTimes::New() const {
  return new ReturnAddChallengeTimes;
}

void ReturnAddChallengeTimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    count_ = 0;
    alreadyaddchall_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnAddChallengeTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_alreadyAddChall;
        break;
      }

      // optional int32 alreadyAddChall = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alreadyAddChall:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alreadyaddchall_)));
          set_has_alreadyaddchall();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnAddChallengeTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // optional int32 alreadyAddChall = 3;
  if (has_alreadyaddchall()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->alreadyaddchall(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnAddChallengeTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // optional int32 alreadyAddChall = 3;
  if (has_alreadyaddchall()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->alreadyaddchall(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnAddChallengeTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 alreadyAddChall = 3;
    if (has_alreadyaddchall()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alreadyaddchall());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnAddChallengeTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnAddChallengeTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnAddChallengeTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnAddChallengeTimes::MergeFrom(const ReturnAddChallengeTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_alreadyaddchall()) {
      set_alreadyaddchall(from.alreadyaddchall());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnAddChallengeTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnAddChallengeTimes::CopyFrom(const ReturnAddChallengeTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnAddChallengeTimes::IsInitialized() const {

  return true;
}

void ReturnAddChallengeTimes::Swap(ReturnAddChallengeTimes* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(count_, other->count_);
    std::swap(alreadyaddchall_, other->alreadyaddchall_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnAddChallengeTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnAddChallengeTimes_descriptor_;
  metadata.reflection = ReturnAddChallengeTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClientReqAreanReward::ClientReqAreanReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqAreanReward::InitAsDefaultInstance() {
}

ClientReqAreanReward::ClientReqAreanReward(const ClientReqAreanReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqAreanReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqAreanReward::~ClientReqAreanReward() {
  SharedDtor();
}

void ClientReqAreanReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqAreanReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqAreanReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqAreanReward_descriptor_;
}

const ClientReqAreanReward& ClientReqAreanReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientReqAreanReward* ClientReqAreanReward::default_instance_ = NULL;

ClientReqAreanReward* ClientReqAreanReward::New() const {
  return new ClientReqAreanReward;
}

void ClientReqAreanReward::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqAreanReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClientReqAreanReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqAreanReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqAreanReward::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqAreanReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqAreanReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqAreanReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqAreanReward::MergeFrom(const ClientReqAreanReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqAreanReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqAreanReward::CopyFrom(const ClientReqAreanReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqAreanReward::IsInitialized() const {

  return true;
}

void ClientReqAreanReward::Swap(ClientReqAreanReward* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqAreanReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqAreanReward_descriptor_;
  metadata.reflection = ClientReqAreanReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMToClientCompeteOver::kIssuccessFieldNumber;
const int GMToClientCompeteOver::kExpFieldNumber;
const int GMToClientCompeteOver::kCreditFieldNumber;
#endif  // !_MSC_VER

GMToClientCompeteOver::GMToClientCompeteOver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMToClientCompeteOver::InitAsDefaultInstance() {
}

GMToClientCompeteOver::GMToClientCompeteOver(const GMToClientCompeteOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMToClientCompeteOver::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = false;
  exp_ = 0;
  credit_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMToClientCompeteOver::~GMToClientCompeteOver() {
  SharedDtor();
}

void GMToClientCompeteOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMToClientCompeteOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMToClientCompeteOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMToClientCompeteOver_descriptor_;
}

const GMToClientCompeteOver& GMToClientCompeteOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

GMToClientCompeteOver* GMToClientCompeteOver::default_instance_ = NULL;

GMToClientCompeteOver* GMToClientCompeteOver::New() const {
  return new GMToClientCompeteOver;
}

void GMToClientCompeteOver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issuccess_ = false;
    exp_ = 0;
    credit_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMToClientCompeteOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool issuccess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_credit;
        break;
      }

      // optional int32 credit = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMToClientCompeteOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool issuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->issuccess(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // optional int32 credit = 3;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->credit(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMToClientCompeteOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool issuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->issuccess(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // optional int32 credit = 3;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->credit(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMToClientCompeteOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool issuccess = 1;
    if (has_issuccess()) {
      total_size += 1 + 1;
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 credit = 3;
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMToClientCompeteOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMToClientCompeteOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMToClientCompeteOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMToClientCompeteOver::MergeFrom(const GMToClientCompeteOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMToClientCompeteOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMToClientCompeteOver::CopyFrom(const GMToClientCompeteOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMToClientCompeteOver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMToClientCompeteOver::Swap(GMToClientCompeteOver* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(exp_, other->exp_);
    std::swap(credit_, other->credit_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMToClientCompeteOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMToClientCompeteOver_descriptor_;
  metadata.reflection = GMToClientCompeteOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysRankingReward::kRetFieldNumber;
const int SysRankingReward::kRetfFieldNumber;
const int SysRankingReward::kRetsFieldNumber;
const int SysRankingReward::kRankingFieldNumber;
const int SysRankingReward::kHistoryRankFieldNumber;
const int SysRankingReward::kHistoryRewardFieldNumber;
#endif  // !_MSC_VER

SysRankingReward::SysRankingReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysRankingReward::InitAsDefaultInstance() {
  historyreward_ = const_cast< ::MapInstanceProto::ArenaHistoryReward*>(&::MapInstanceProto::ArenaHistoryReward::default_instance());
}

SysRankingReward::SysRankingReward(const SysRankingReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysRankingReward::SharedCtor() {
  _cached_size_ = 0;
  ret_ = GOOGLE_LONGLONG(0);
  retf_ = 0;
  rets_ = 0;
  ranking_ = 0;
  historyrank_ = 0;
  historyreward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysRankingReward::~SysRankingReward() {
  SharedDtor();
}

void SysRankingReward::SharedDtor() {
  if (this != default_instance_) {
    delete historyreward_;
  }
}

void SysRankingReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysRankingReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysRankingReward_descriptor_;
}

const SysRankingReward& SysRankingReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

SysRankingReward* SysRankingReward::default_instance_ = NULL;

SysRankingReward* SysRankingReward::New() const {
  return new SysRankingReward;
}

void SysRankingReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = GOOGLE_LONGLONG(0);
    retf_ = 0;
    rets_ = 0;
    ranking_ = 0;
    historyrank_ = 0;
    if (has_historyreward()) {
      if (historyreward_ != NULL) historyreward_->::MapInstanceProto::ArenaHistoryReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysRankingReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_retf;
        break;
      }

      // optional int32 retf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_retf:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retf_)));
          set_has_retf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rets;
        break;
      }

      // optional int32 rets = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rets_)));
          set_has_rets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Ranking;
        break;
      }

      // optional int32 Ranking = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_historyRank;
        break;
      }

      // optional int32 historyRank = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_historyRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &historyrank_)));
          set_has_historyrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_historyReward;
        break;
      }

      // optional .MapInstanceProto.ArenaHistoryReward historyReward = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_historyReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_historyreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysRankingReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->ret(), output);
  }

  // optional int32 retf = 2;
  if (has_retf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retf(), output);
  }

  // optional int32 rets = 3;
  if (has_rets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rets(), output);
  }

  // optional int32 Ranking = 4;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ranking(), output);
  }

  // optional int32 historyRank = 5;
  if (has_historyrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->historyrank(), output);
  }

  // optional .MapInstanceProto.ArenaHistoryReward historyReward = 6;
  if (has_historyreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->historyreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysRankingReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->ret(), target);
  }

  // optional int32 retf = 2;
  if (has_retf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retf(), target);
  }

  // optional int32 rets = 3;
  if (has_rets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rets(), target);
  }

  // optional int32 Ranking = 4;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ranking(), target);
  }

  // optional int32 historyRank = 5;
  if (has_historyrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->historyrank(), target);
  }

  // optional .MapInstanceProto.ArenaHistoryReward historyReward = 6;
  if (has_historyreward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->historyreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysRankingReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ret());
    }

    // optional int32 retf = 2;
    if (has_retf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retf());
    }

    // optional int32 rets = 3;
    if (has_rets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rets());
    }

    // optional int32 Ranking = 4;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // optional int32 historyRank = 5;
    if (has_historyrank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->historyrank());
    }

    // optional .MapInstanceProto.ArenaHistoryReward historyReward = 6;
    if (has_historyreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->historyreward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysRankingReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysRankingReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysRankingReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysRankingReward::MergeFrom(const SysRankingReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_retf()) {
      set_retf(from.retf());
    }
    if (from.has_rets()) {
      set_rets(from.rets());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_historyrank()) {
      set_historyrank(from.historyrank());
    }
    if (from.has_historyreward()) {
      mutable_historyreward()->::MapInstanceProto::ArenaHistoryReward::MergeFrom(from.historyreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysRankingReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysRankingReward::CopyFrom(const SysRankingReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysRankingReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SysRankingReward::Swap(SysRankingReward* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(retf_, other->retf_);
    std::swap(rets_, other->rets_);
    std::swap(ranking_, other->ranking_);
    std::swap(historyrank_, other->historyrank_);
    std::swap(historyreward_, other->historyreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysRankingReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysRankingReward_descriptor_;
  metadata.reflection = SysRankingReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClientRegRankingName::ClientRegRankingName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientRegRankingName::InitAsDefaultInstance() {
}

ClientRegRankingName::ClientRegRankingName(const ClientRegRankingName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientRegRankingName::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientRegRankingName::~ClientRegRankingName() {
  SharedDtor();
}

void ClientRegRankingName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientRegRankingName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientRegRankingName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientRegRankingName_descriptor_;
}

const ClientRegRankingName& ClientRegRankingName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientRegRankingName* ClientRegRankingName::default_instance_ = NULL;

ClientRegRankingName* ClientRegRankingName::New() const {
  return new ClientRegRankingName;
}

void ClientRegRankingName::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientRegRankingName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClientRegRankingName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientRegRankingName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientRegRankingName::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientRegRankingName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientRegRankingName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientRegRankingName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientRegRankingName::MergeFrom(const ClientRegRankingName& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientRegRankingName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientRegRankingName::CopyFrom(const ClientRegRankingName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientRegRankingName::IsInitialized() const {

  return true;
}

void ClientRegRankingName::Swap(ClientRegRankingName* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientRegRankingName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientRegRankingName_descriptor_;
  metadata.reflection = ClientRegRankingName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientRankingName::kCharnameFieldNumber;
const int WSToClientRankingName::kViplvFieldNumber;
#endif  // !_MSC_VER

WSToClientRankingName::WSToClientRankingName()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientRankingName::InitAsDefaultInstance() {
}

WSToClientRankingName::WSToClientRankingName(const WSToClientRankingName& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientRankingName::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientRankingName::~WSToClientRankingName() {
  SharedDtor();
}

void WSToClientRankingName::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientRankingName::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientRankingName::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientRankingName_descriptor_;
}

const WSToClientRankingName& WSToClientRankingName::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClientRankingName* WSToClientRankingName::default_instance_ = NULL;

WSToClientRankingName* WSToClientRankingName::New() const {
  return new WSToClientRankingName;
}

void WSToClientRankingName::Clear() {
  charname_.Clear();
  viplv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientRankingName::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated string charname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname(this->charname_size() - 1).data(),
            this->charname(this->charname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_charname;
        if (input->ExpectTag(16)) goto parse_viplv;
        break;
      }

      // repeated int32 viplv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_viplv())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_viplv())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_viplv;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientRankingName::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated string charname = 1;
  for (int i = 0; i < this->charname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->charname(i).data(), this->charname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->charname(i), output);
  }

  // repeated int32 viplv = 2;
  for (int i = 0; i < this->viplv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->viplv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientRankingName::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated string charname = 1;
  for (int i = 0; i < this->charname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname(i).data(), this->charname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(1, this->charname(i), target);
  }

  // repeated int32 viplv = 2;
  for (int i = 0; i < this->viplv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->viplv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientRankingName::ByteSize() const {
  int total_size = 0;

  // repeated string charname = 1;
  total_size += 1 * this->charname_size();
  for (int i = 0; i < this->charname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->charname(i));
  }

  // repeated int32 viplv = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->viplv_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->viplv(i));
    }
    total_size += 1 * this->viplv_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientRankingName::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientRankingName* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientRankingName*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientRankingName::MergeFrom(const WSToClientRankingName& from) {
  GOOGLE_CHECK_NE(&from, this);
  charname_.MergeFrom(from.charname_);
  viplv_.MergeFrom(from.viplv_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientRankingName::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientRankingName::CopyFrom(const WSToClientRankingName& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientRankingName::IsInitialized() const {

  return true;
}

void WSToClientRankingName::Swap(WSToClientRankingName* other) {
  if (other != this) {
    charname_.Swap(&other->charname_);
    viplv_.Swap(&other->viplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientRankingName::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientRankingName_descriptor_;
  metadata.reflection = WSToClientRankingName_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ClientReqGroupInfo::ClientReqGroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqGroupInfo::InitAsDefaultInstance() {
}

ClientReqGroupInfo::ClientReqGroupInfo(const ClientReqGroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqGroupInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqGroupInfo::~ClientReqGroupInfo() {
  SharedDtor();
}

void ClientReqGroupInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqGroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqGroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqGroupInfo_descriptor_;
}

const ClientReqGroupInfo& ClientReqGroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientReqGroupInfo* ClientReqGroupInfo::default_instance_ = NULL;

ClientReqGroupInfo* ClientReqGroupInfo::New() const {
  return new ClientReqGroupInfo;
}

void ClientReqGroupInfo::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ClientReqGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqGroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqGroupInfo::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqGroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqGroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqGroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqGroupInfo::MergeFrom(const ClientReqGroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqGroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqGroupInfo::CopyFrom(const ClientReqGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqGroupInfo::IsInitialized() const {

  return true;
}

void ClientReqGroupInfo::Swap(ClientReqGroupInfo* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqGroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqGroupInfo_descriptor_;
  metadata.reflection = ClientReqGroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMToClentGroupInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

GMToClentGroupInfo::GMToClentGroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMToClentGroupInfo::InitAsDefaultInstance() {
}

GMToClentGroupInfo::GMToClentGroupInfo(const GMToClentGroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMToClentGroupInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMToClentGroupInfo::~GMToClentGroupInfo() {
  SharedDtor();
}

void GMToClentGroupInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMToClentGroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMToClentGroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMToClentGroupInfo_descriptor_;
}

const GMToClentGroupInfo& GMToClentGroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

GMToClentGroupInfo* GMToClentGroupInfo::default_instance_ = NULL;

GMToClentGroupInfo* GMToClentGroupInfo::New() const {
  return new GMToClentGroupInfo;
}

void GMToClentGroupInfo::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMToClentGroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MapInstanceProto.GroupInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMToClentGroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MapInstanceProto.GroupInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMToClentGroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MapInstanceProto.GroupInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMToClentGroupInfo::ByteSize() const {
  int total_size = 0;

  // repeated .MapInstanceProto.GroupInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMToClentGroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMToClentGroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMToClentGroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMToClentGroupInfo::MergeFrom(const GMToClentGroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMToClentGroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMToClentGroupInfo::CopyFrom(const GMToClentGroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMToClentGroupInfo::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void GMToClentGroupInfo::Swap(GMToClentGroupInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMToClentGroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMToClentGroupInfo_descriptor_;
  metadata.reflection = GMToClentGroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupInfo::kMapidFieldNumber;
const int GroupInfo::kNumFieldNumber;
#endif  // !_MSC_VER

GroupInfo::GroupInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupInfo::InitAsDefaultInstance() {
}

GroupInfo::GroupInfo(const GroupInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupInfo::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupInfo::~GroupInfo() {
  SharedDtor();
}

void GroupInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupInfo_descriptor_;
}

const GroupInfo& GroupInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

GroupInfo* GroupInfo::default_instance_ = NULL;

GroupInfo* GroupInfo::New() const {
  return new GroupInfo;
}

void GroupInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupInfo::MergeFrom(const GroupInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInfo::CopyFrom(const GroupInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GroupInfo::Swap(GroupInfo* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupInfo_descriptor_;
  metadata.reflection = GroupInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqAllTeamInfo::kMapidFieldNumber;
#endif  // !_MSC_VER

ClientReqAllTeamInfo::ClientReqAllTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqAllTeamInfo::InitAsDefaultInstance() {
}

ClientReqAllTeamInfo::ClientReqAllTeamInfo(const ClientReqAllTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqAllTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqAllTeamInfo::~ClientReqAllTeamInfo() {
  SharedDtor();
}

void ClientReqAllTeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqAllTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqAllTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqAllTeamInfo_descriptor_;
}

const ClientReqAllTeamInfo& ClientReqAllTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientReqAllTeamInfo* ClientReqAllTeamInfo::default_instance_ = NULL;

ClientReqAllTeamInfo* ClientReqAllTeamInfo::New() const {
  return new ClientReqAllTeamInfo;
}

void ClientReqAllTeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqAllTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqAllTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqAllTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqAllTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqAllTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqAllTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqAllTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqAllTeamInfo::MergeFrom(const ClientReqAllTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqAllTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqAllTeamInfo::CopyFrom(const ClientReqAllTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqAllTeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqAllTeamInfo::Swap(ClientReqAllTeamInfo* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqAllTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqAllTeamInfo_descriptor_;
  metadata.reflection = ClientReqAllTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClentAllTeamInfo::kMapidFieldNumber;
const int WSToClentAllTeamInfo::kPageFieldNumber;
const int WSToClentAllTeamInfo::kAllteaminfoFieldNumber;
#endif  // !_MSC_VER

WSToClentAllTeamInfo::WSToClentAllTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClentAllTeamInfo::InitAsDefaultInstance() {
}

WSToClentAllTeamInfo::WSToClentAllTeamInfo(const WSToClentAllTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClentAllTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClentAllTeamInfo::~WSToClentAllTeamInfo() {
  SharedDtor();
}

void WSToClentAllTeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClentAllTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClentAllTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClentAllTeamInfo_descriptor_;
}

const WSToClentAllTeamInfo& WSToClentAllTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClentAllTeamInfo* WSToClentAllTeamInfo::default_instance_ = NULL;

WSToClentAllTeamInfo* WSToClentAllTeamInfo::New() const {
  return new WSToClentAllTeamInfo;
}

void WSToClentAllTeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    page_ = 0;
  }
  allteaminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClentAllTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_page;
        break;
      }

      // optional int32 page = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_page:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_allteaminfo;
        break;
      }

      // repeated .MapInstanceProto.AllTeamInfo allteaminfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_allteaminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_allteaminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_allteaminfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClentAllTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 page = 2;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->page(), output);
  }

  // repeated .MapInstanceProto.AllTeamInfo allteaminfo = 3;
  for (int i = 0; i < this->allteaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->allteaminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClentAllTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 page = 2;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->page(), target);
  }

  // repeated .MapInstanceProto.AllTeamInfo allteaminfo = 3;
  for (int i = 0; i < this->allteaminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->allteaminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClentAllTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 page = 2;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

  }
  // repeated .MapInstanceProto.AllTeamInfo allteaminfo = 3;
  total_size += 1 * this->allteaminfo_size();
  for (int i = 0; i < this->allteaminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->allteaminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClentAllTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClentAllTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClentAllTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClentAllTeamInfo::MergeFrom(const WSToClentAllTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  allteaminfo_.MergeFrom(from.allteaminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClentAllTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClentAllTeamInfo::CopyFrom(const WSToClentAllTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClentAllTeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < allteaminfo_size(); i++) {
    if (!this->allteaminfo(i).IsInitialized()) return false;
  }
  return true;
}

void WSToClentAllTeamInfo::Swap(WSToClentAllTeamInfo* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(page_, other->page_);
    allteaminfo_.Swap(&other->allteaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClentAllTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClentAllTeamInfo_descriptor_;
  metadata.reflection = WSToClentAllTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AllTeamInfo::kTeamidFieldNumber;
const int AllTeamInfo::kCharnameFieldNumber;
const int AllTeamInfo::kNumFieldNumber;
const int AllTeamInfo::kFightFieldNumber;
const int AllTeamInfo::kCodeFieldNumber;
const int AllTeamInfo::kVipFieldNumber;
const int AllTeamInfo::kSexFieldNumber;
const int AllTeamInfo::kJobFieldNumber;
#endif  // !_MSC_VER

AllTeamInfo::AllTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AllTeamInfo::InitAsDefaultInstance() {
}

AllTeamInfo::AllTeamInfo(const AllTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AllTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_LONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  num_ = 0;
  fight_ = 0;
  code_ = false;
  vip_ = 0;
  sex_ = 0;
  job_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AllTeamInfo::~AllTeamInfo() {
  SharedDtor();
}

void AllTeamInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void AllTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AllTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AllTeamInfo_descriptor_;
}

const AllTeamInfo& AllTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

AllTeamInfo* AllTeamInfo::default_instance_ = NULL;

AllTeamInfo* AllTeamInfo::New() const {
  return new AllTeamInfo;
}

void AllTeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_LONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    num_ = 0;
    fight_ = 0;
    code_ = false;
    vip_ = 0;
    sex_ = 0;
    job_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AllTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight;
        break;
      }

      // optional int32 fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_code;
        break;
      }

      // optional bool code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip;
        break;
      }

      // optional int32 vip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }

      // optional int32 sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_job;
        break;
      }

      // optional int32 job = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AllTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->teamid(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 fight = 4;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fight(), output);
  }

  // optional bool code = 5;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->code(), output);
  }

  // optional int32 vip = 6;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vip(), output);
  }

  // optional int32 sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sex(), output);
  }

  // optional int32 job = 8;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->job(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AllTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->teamid(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 fight = 4;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fight(), target);
  }

  // optional bool code = 5;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->code(), target);
  }

  // optional int32 vip = 6;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vip(), target);
  }

  // optional int32 sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sex(), target);
  }

  // optional int32 job = 8;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->job(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AllTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 fight = 4;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional bool code = 5;
    if (has_code()) {
      total_size += 1 + 1;
    }

    // optional int32 vip = 6;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

    // optional int32 sex = 7;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 job = 8;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AllTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AllTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AllTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AllTeamInfo::MergeFrom(const AllTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AllTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AllTeamInfo::CopyFrom(const AllTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AllTeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AllTeamInfo::Swap(AllTeamInfo* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(charname_, other->charname_);
    std::swap(num_, other->num_);
    std::swap(fight_, other->fight_);
    std::swap(code_, other->code_);
    std::swap(vip_, other->vip_);
    std::swap(sex_, other->sex_);
    std::swap(job_, other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AllTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AllTeamInfo_descriptor_;
  metadata.reflection = AllTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqJoinTeam::kTeamidFieldNumber;
const int ClientReqJoinTeam::kPasswordFieldNumber;
const int ClientReqJoinTeam::kMapidFieldNumber;
#endif  // !_MSC_VER

ClientReqJoinTeam::ClientReqJoinTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqJoinTeam::InitAsDefaultInstance() {
}

ClientReqJoinTeam::ClientReqJoinTeam(const ClientReqJoinTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqJoinTeam::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_LONGLONG(0);
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqJoinTeam::~ClientReqJoinTeam() {
  SharedDtor();
}

void ClientReqJoinTeam::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void ClientReqJoinTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqJoinTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqJoinTeam_descriptor_;
}

const ClientReqJoinTeam& ClientReqJoinTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientReqJoinTeam* ClientReqJoinTeam::default_instance_ = NULL;

ClientReqJoinTeam* ClientReqJoinTeam::New() const {
  return new ClientReqJoinTeam;
}

void ClientReqJoinTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_LONGLONG(0);
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqJoinTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_password;
        break;
      }

      // optional string password = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqJoinTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->teamid(), output);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->password(), output);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqJoinTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->teamid(), target);
  }

  // optional string password = 2;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->password(), target);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqJoinTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

    // optional string password = 2;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional int32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqJoinTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqJoinTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqJoinTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqJoinTeam::MergeFrom(const ClientReqJoinTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqJoinTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqJoinTeam::CopyFrom(const ClientReqJoinTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqJoinTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqJoinTeam::Swap(ClientReqJoinTeam* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(password_, other->password_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqJoinTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqJoinTeam_descriptor_;
  metadata.reflection = ClientReqJoinTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClentReqJoinTeam::kRetFieldNumber;
const int WSToClentReqJoinTeam::kMapidFieldNumber;
const int WSToClentReqJoinTeam::kTeamidFieldNumber;
const int WSToClentReqJoinTeam::kFightFieldNumber;
const int WSToClentReqJoinTeam::kFlagFieldNumber;
const int WSToClentReqJoinTeam::kMemberifnoFieldNumber;
#endif  // !_MSC_VER

WSToClentReqJoinTeam::WSToClentReqJoinTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClentReqJoinTeam::InitAsDefaultInstance() {
}

WSToClentReqJoinTeam::WSToClentReqJoinTeam(const WSToClentReqJoinTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClentReqJoinTeam::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  mapid_ = 0;
  teamid_ = GOOGLE_LONGLONG(0);
  fight_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClentReqJoinTeam::~WSToClentReqJoinTeam() {
  SharedDtor();
}

void WSToClentReqJoinTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClentReqJoinTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClentReqJoinTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClentReqJoinTeam_descriptor_;
}

const WSToClentReqJoinTeam& WSToClentReqJoinTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClentReqJoinTeam* WSToClentReqJoinTeam::default_instance_ = NULL;

WSToClentReqJoinTeam* WSToClentReqJoinTeam::New() const {
  return new WSToClentReqJoinTeam;
}

void WSToClentReqJoinTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    mapid_ = 0;
    teamid_ = GOOGLE_LONGLONG(0);
    fight_ = 0;
    flag_ = false;
  }
  memberifno_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClentReqJoinTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional int64 teamid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight;
        break;
      }

      // optional int32 fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_flag;
        break;
      }

      // optional bool flag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_memberifno;
        break;
      }

      // repeated .MapInstanceProto.TeammemberInfo memberifno = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberifno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberifno()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_memberifno;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClentReqJoinTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  // optional int64 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->teamid(), output);
  }

  // optional int32 fight = 4;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fight(), output);
  }

  // optional bool flag = 5;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->flag(), output);
  }

  // repeated .MapInstanceProto.TeammemberInfo memberifno = 6;
  for (int i = 0; i < this->memberifno_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->memberifno(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClentReqJoinTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  // optional int64 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->teamid(), target);
  }

  // optional int32 fight = 4;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fight(), target);
  }

  // optional bool flag = 5;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->flag(), target);
  }

  // repeated .MapInstanceProto.TeammemberInfo memberifno = 6;
  for (int i = 0; i < this->memberifno_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->memberifno(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClentReqJoinTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int64 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

    // optional int32 fight = 4;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional bool flag = 5;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  // repeated .MapInstanceProto.TeammemberInfo memberifno = 6;
  total_size += 1 * this->memberifno_size();
  for (int i = 0; i < this->memberifno_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberifno(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClentReqJoinTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClentReqJoinTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClentReqJoinTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClentReqJoinTeam::MergeFrom(const WSToClentReqJoinTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberifno_.MergeFrom(from.memberifno_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClentReqJoinTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClentReqJoinTeam::CopyFrom(const WSToClentReqJoinTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClentReqJoinTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClentReqJoinTeam::Swap(WSToClentReqJoinTeam* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(mapid_, other->mapid_);
    std::swap(teamid_, other->teamid_);
    std::swap(fight_, other->fight_);
    std::swap(flag_, other->flag_);
    memberifno_.Swap(&other->memberifno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClentReqJoinTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClentReqJoinTeam_descriptor_;
  metadata.reflection = WSToClentReqJoinTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeammemberInfo::kCharidFieldNumber;
const int TeammemberInfo::kCharnameFieldNumber;
const int TeammemberInfo::kFightFieldNumber;
const int TeammemberInfo::kCaptainFieldNumber;
const int TeammemberInfo::kReadyFieldNumber;
const int TeammemberInfo::kJobFieldNumber;
const int TeammemberInfo::kSexFieldNumber;
const int TeammemberInfo::kVipFieldNumber;
#endif  // !_MSC_VER

TeammemberInfo::TeammemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeammemberInfo::InitAsDefaultInstance() {
}

TeammemberInfo::TeammemberInfo(const TeammemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeammemberInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fight_ = 0;
  captain_ = false;
  ready_ = false;
  job_ = 0;
  sex_ = false;
  vip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeammemberInfo::~TeammemberInfo() {
  SharedDtor();
}

void TeammemberInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void TeammemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeammemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeammemberInfo_descriptor_;
}

const TeammemberInfo& TeammemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

TeammemberInfo* TeammemberInfo::default_instance_ = NULL;

TeammemberInfo* TeammemberInfo::New() const {
  return new TeammemberInfo;
}

void TeammemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    fight_ = 0;
    captain_ = false;
    ready_ = false;
    job_ = 0;
    sex_ = false;
    vip_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeammemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight;
        break;
      }

      // optional int32 fight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_captain;
        break;
      }

      // optional bool captain = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_captain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &captain_)));
          set_has_captain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_ready;
        break;
      }

      // optional bool ready = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ready:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ready_)));
          set_has_ready();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_job;
        break;
      }

      // optional int32 job = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }

      // optional bool sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vip;
        break;
      }

      // optional int32 vip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeammemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  // optional int32 fight = 3;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fight(), output);
  }

  // optional bool captain = 4;
  if (has_captain()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->captain(), output);
  }

  // optional bool ready = 5;
  if (has_ready()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->ready(), output);
  }

  // optional int32 job = 6;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->job(), output);
  }

  // optional bool sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->sex(), output);
  }

  // optional int32 vip = 8;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeammemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // optional int32 fight = 3;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fight(), target);
  }

  // optional bool captain = 4;
  if (has_captain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->captain(), target);
  }

  // optional bool ready = 5;
  if (has_ready()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->ready(), target);
  }

  // optional int32 job = 6;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->job(), target);
  }

  // optional bool sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->sex(), target);
  }

  // optional int32 vip = 8;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeammemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 fight = 3;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional bool captain = 4;
    if (has_captain()) {
      total_size += 1 + 1;
    }

    // optional bool ready = 5;
    if (has_ready()) {
      total_size += 1 + 1;
    }

    // optional int32 job = 6;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // optional bool sex = 7;
    if (has_sex()) {
      total_size += 1 + 1;
    }

    // optional int32 vip = 8;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeammemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeammemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeammemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeammemberInfo::MergeFrom(const TeammemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_captain()) {
      set_captain(from.captain());
    }
    if (from.has_ready()) {
      set_ready(from.ready());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeammemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeammemberInfo::CopyFrom(const TeammemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeammemberInfo::IsInitialized() const {

  return true;
}

void TeammemberInfo::Swap(TeammemberInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(fight_, other->fight_);
    std::swap(captain_, other->captain_);
    std::swap(ready_, other->ready_);
    std::swap(job_, other->job_);
    std::swap(sex_, other->sex_);
    std::swap(vip_, other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeammemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeammemberInfo_descriptor_;
  metadata.reflection = TeammemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqQuickJoinTeam::kMapidFieldNumber;
#endif  // !_MSC_VER

ClientReqQuickJoinTeam::ClientReqQuickJoinTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqQuickJoinTeam::InitAsDefaultInstance() {
}

ClientReqQuickJoinTeam::ClientReqQuickJoinTeam(const ClientReqQuickJoinTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqQuickJoinTeam::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqQuickJoinTeam::~ClientReqQuickJoinTeam() {
  SharedDtor();
}

void ClientReqQuickJoinTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqQuickJoinTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqQuickJoinTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqQuickJoinTeam_descriptor_;
}

const ClientReqQuickJoinTeam& ClientReqQuickJoinTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientReqQuickJoinTeam* ClientReqQuickJoinTeam::default_instance_ = NULL;

ClientReqQuickJoinTeam* ClientReqQuickJoinTeam::New() const {
  return new ClientReqQuickJoinTeam;
}

void ClientReqQuickJoinTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqQuickJoinTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqQuickJoinTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqQuickJoinTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqQuickJoinTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqQuickJoinTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqQuickJoinTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqQuickJoinTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqQuickJoinTeam::MergeFrom(const ClientReqQuickJoinTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqQuickJoinTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqQuickJoinTeam::CopyFrom(const ClientReqQuickJoinTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqQuickJoinTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqQuickJoinTeam::Swap(ClientReqQuickJoinTeam* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqQuickJoinTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqQuickJoinTeam_descriptor_;
  metadata.reflection = ClientReqQuickJoinTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqCreateTeam::kMapidFieldNumber;
const int ClientReqCreateTeam::kFightFieldNumber;
const int ClientReqCreateTeam::kPasswordFieldNumber;
const int ClientReqCreateTeam::kFlagFieldNumber;
#endif  // !_MSC_VER

ClientReqCreateTeam::ClientReqCreateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqCreateTeam::InitAsDefaultInstance() {
}

ClientReqCreateTeam::ClientReqCreateTeam(const ClientReqCreateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqCreateTeam::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  fight_ = 0;
  password_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqCreateTeam::~ClientReqCreateTeam() {
  SharedDtor();
}

void ClientReqCreateTeam::SharedDtor() {
  if (password_ != &::google::protobuf::internal::kEmptyString) {
    delete password_;
  }
  if (this != default_instance_) {
  }
}

void ClientReqCreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqCreateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqCreateTeam_descriptor_;
}

const ClientReqCreateTeam& ClientReqCreateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientReqCreateTeam* ClientReqCreateTeam::default_instance_ = NULL;

ClientReqCreateTeam* ClientReqCreateTeam::New() const {
  return new ClientReqCreateTeam;
}

void ClientReqCreateTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    fight_ = 0;
    if (has_password()) {
      if (password_ != &::google::protobuf::internal::kEmptyString) {
        password_->clear();
      }
    }
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqCreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight;
        break;
      }

      // optional int32 fight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_password;
        break;
      }

      // optional string password = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_password:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_password()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->password().data(), this->password().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional bool flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqCreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 fight = 2;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fight(), output);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->password(), output);
  }

  // optional bool flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqCreateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 fight = 2;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fight(), target);
  }

  // optional string password = 3;
  if (has_password()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->password().data(), this->password().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->password(), target);
  }

  // optional bool flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqCreateTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 fight = 2;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional string password = 3;
    if (has_password()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->password());
    }

    // optional bool flag = 4;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqCreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqCreateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqCreateTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqCreateTeam::MergeFrom(const ClientReqCreateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_password()) {
      set_password(from.password());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqCreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqCreateTeam::CopyFrom(const ClientReqCreateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqCreateTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqCreateTeam::Swap(ClientReqCreateTeam* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(fight_, other->fight_);
    std::swap(password_, other->password_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqCreateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqCreateTeam_descriptor_;
  metadata.reflection = ClientReqCreateTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClentReqCreateTeam::kRetFieldNumber;
const int WSToClentReqCreateTeam::kMapidFieldNumber;
const int WSToClentReqCreateTeam::kTeamidFieldNumber;
const int WSToClentReqCreateTeam::kFlagFieldNumber;
const int WSToClentReqCreateTeam::kCodeFieldNumber;
const int WSToClentReqCreateTeam::kFightFieldNumber;
#endif  // !_MSC_VER

WSToClentReqCreateTeam::WSToClentReqCreateTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClentReqCreateTeam::InitAsDefaultInstance() {
}

WSToClentReqCreateTeam::WSToClentReqCreateTeam(const WSToClentReqCreateTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClentReqCreateTeam::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  mapid_ = 0;
  teamid_ = GOOGLE_LONGLONG(0);
  flag_ = false;
  code_ = false;
  fight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClentReqCreateTeam::~WSToClentReqCreateTeam() {
  SharedDtor();
}

void WSToClentReqCreateTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClentReqCreateTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClentReqCreateTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClentReqCreateTeam_descriptor_;
}

const WSToClentReqCreateTeam& WSToClentReqCreateTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClentReqCreateTeam* WSToClentReqCreateTeam::default_instance_ = NULL;

WSToClentReqCreateTeam* WSToClentReqCreateTeam::New() const {
  return new WSToClentReqCreateTeam;
}

void WSToClentReqCreateTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    mapid_ = 0;
    teamid_ = GOOGLE_LONGLONG(0);
    flag_ = false;
    code_ = false;
    fight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClentReqCreateTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamid;
        break;
      }

      // optional int64 teamid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_flag;
        break;
      }

      // optional bool flag = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_code;
        break;
      }

      // optional bool code = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_fight;
        break;
      }

      // optional int32 fight = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClentReqCreateTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  // optional int64 teamid = 3;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->teamid(), output);
  }

  // optional bool flag = 4;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->flag(), output);
  }

  // optional bool code = 5;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->code(), output);
  }

  // optional int32 fight = 6;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClentReqCreateTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  // optional int64 teamid = 3;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->teamid(), target);
  }

  // optional bool flag = 4;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->flag(), target);
  }

  // optional bool code = 5;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->code(), target);
  }

  // optional int32 fight = 6;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClentReqCreateTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int64 teamid = 3;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

    // optional bool flag = 4;
    if (has_flag()) {
      total_size += 1 + 1;
    }

    // optional bool code = 5;
    if (has_code()) {
      total_size += 1 + 1;
    }

    // optional int32 fight = 6;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClentReqCreateTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClentReqCreateTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClentReqCreateTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClentReqCreateTeam::MergeFrom(const WSToClentReqCreateTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClentReqCreateTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClentReqCreateTeam::CopyFrom(const WSToClentReqCreateTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClentReqCreateTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClentReqCreateTeam::Swap(WSToClentReqCreateTeam* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(mapid_, other->mapid_);
    std::swap(teamid_, other->teamid_);
    std::swap(flag_, other->flag_);
    std::swap(code_, other->code_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClentReqCreateTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClentReqCreateTeam_descriptor_;
  metadata.reflection = WSToClentReqCreateTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqTeamReady::kMapidFieldNumber;
#endif  // !_MSC_VER

ClientReqTeamReady::ClientReqTeamReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqTeamReady::InitAsDefaultInstance() {
}

ClientReqTeamReady::ClientReqTeamReady(const ClientReqTeamReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqTeamReady::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqTeamReady::~ClientReqTeamReady() {
  SharedDtor();
}

void ClientReqTeamReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqTeamReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqTeamReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqTeamReady_descriptor_;
}

const ClientReqTeamReady& ClientReqTeamReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientReqTeamReady* ClientReqTeamReady::default_instance_ = NULL;

ClientReqTeamReady* ClientReqTeamReady::New() const {
  return new ClientReqTeamReady;
}

void ClientReqTeamReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqTeamReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqTeamReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqTeamReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqTeamReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqTeamReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqTeamReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqTeamReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqTeamReady::MergeFrom(const ClientReqTeamReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqTeamReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqTeamReady::CopyFrom(const ClientReqTeamReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqTeamReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqTeamReady::Swap(ClientReqTeamReady* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqTeamReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqTeamReady_descriptor_;
  metadata.reflection = ClientReqTeamReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientReqTeamReady::kRetFieldNumber;
#endif  // !_MSC_VER

WSToClientReqTeamReady::WSToClientReqTeamReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientReqTeamReady::InitAsDefaultInstance() {
}

WSToClientReqTeamReady::WSToClientReqTeamReady(const WSToClientReqTeamReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientReqTeamReady::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientReqTeamReady::~WSToClientReqTeamReady() {
  SharedDtor();
}

void WSToClientReqTeamReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientReqTeamReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientReqTeamReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientReqTeamReady_descriptor_;
}

const WSToClientReqTeamReady& WSToClientReqTeamReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClientReqTeamReady* WSToClientReqTeamReady::default_instance_ = NULL;

WSToClientReqTeamReady* WSToClientReqTeamReady::New() const {
  return new WSToClientReqTeamReady;
}

void WSToClientReqTeamReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientReqTeamReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientReqTeamReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientReqTeamReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientReqTeamReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientReqTeamReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientReqTeamReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientReqTeamReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientReqTeamReady::MergeFrom(const WSToClientReqTeamReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientReqTeamReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientReqTeamReady::CopyFrom(const WSToClientReqTeamReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientReqTeamReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientReqTeamReady::Swap(WSToClientReqTeamReady* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientReqTeamReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientReqTeamReady_descriptor_;
  metadata.reflection = WSToClientReqTeamReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientSimReady::kCharidFieldNumber;
#endif  // !_MSC_VER

WSToClientSimReady::WSToClientSimReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientSimReady::InitAsDefaultInstance() {
}

WSToClientSimReady::WSToClientSimReady(const WSToClientSimReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientSimReady::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientSimReady::~WSToClientSimReady() {
  SharedDtor();
}

void WSToClientSimReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientSimReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientSimReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientSimReady_descriptor_;
}

const WSToClientSimReady& WSToClientSimReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClientSimReady* WSToClientSimReady::default_instance_ = NULL;

WSToClientSimReady* WSToClientSimReady::New() const {
  return new WSToClientSimReady;
}

void WSToClientSimReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientSimReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientSimReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientSimReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientSimReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientSimReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientSimReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientSimReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientSimReady::MergeFrom(const WSToClientSimReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientSimReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientSimReady::CopyFrom(const WSToClientSimReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientSimReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientSimReady::Swap(WSToClientSimReady* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientSimReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientSimReady_descriptor_;
  metadata.reflection = WSToClientSimReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientSimFindTeamMember::kMapidFieldNumber;
#endif  // !_MSC_VER

ClientSimFindTeamMember::ClientSimFindTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientSimFindTeamMember::InitAsDefaultInstance() {
}

ClientSimFindTeamMember::ClientSimFindTeamMember(const ClientSimFindTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientSimFindTeamMember::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientSimFindTeamMember::~ClientSimFindTeamMember() {
  SharedDtor();
}

void ClientSimFindTeamMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientSimFindTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientSimFindTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientSimFindTeamMember_descriptor_;
}

const ClientSimFindTeamMember& ClientSimFindTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientSimFindTeamMember* ClientSimFindTeamMember::default_instance_ = NULL;

ClientSimFindTeamMember* ClientSimFindTeamMember::New() const {
  return new ClientSimFindTeamMember;
}

void ClientSimFindTeamMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientSimFindTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientSimFindTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientSimFindTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientSimFindTeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientSimFindTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientSimFindTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientSimFindTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientSimFindTeamMember::MergeFrom(const ClientSimFindTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientSimFindTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientSimFindTeamMember::CopyFrom(const ClientSimFindTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSimFindTeamMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientSimFindTeamMember::Swap(ClientSimFindTeamMember* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientSimFindTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientSimFindTeamMember_descriptor_;
  metadata.reflection = ClientSimFindTeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientFindTeamMember::kTeamidFieldNumber;
const int WSToClientFindTeamMember::kMapidFieldNumber;
const int WSToClientFindTeamMember::kCodeFieldNumber;
const int WSToClientFindTeamMember::kNameFieldNumber;
#endif  // !_MSC_VER

WSToClientFindTeamMember::WSToClientFindTeamMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientFindTeamMember::InitAsDefaultInstance() {
}

WSToClientFindTeamMember::WSToClientFindTeamMember(const WSToClientFindTeamMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientFindTeamMember::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  code_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientFindTeamMember::~WSToClientFindTeamMember() {
  SharedDtor();
}

void WSToClientFindTeamMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void WSToClientFindTeamMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientFindTeamMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientFindTeamMember_descriptor_;
}

const WSToClientFindTeamMember& WSToClientFindTeamMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClientFindTeamMember* WSToClientFindTeamMember::default_instance_ = NULL;

WSToClientFindTeamMember* WSToClientFindTeamMember::New() const {
  return new WSToClientFindTeamMember;
}

void WSToClientFindTeamMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_LONGLONG(0);
    mapid_ = 0;
    code_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientFindTeamMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_code;
        break;
      }

      // optional bool code = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientFindTeamMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->teamid(), output);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  // optional bool code = 3;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->code(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientFindTeamMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->teamid(), target);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  // optional bool code = 3;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->code(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientFindTeamMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

    // optional int32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional bool code = 3;
    if (has_code()) {
      total_size += 1 + 1;
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientFindTeamMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientFindTeamMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientFindTeamMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientFindTeamMember::MergeFrom(const WSToClientFindTeamMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientFindTeamMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientFindTeamMember::CopyFrom(const WSToClientFindTeamMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientFindTeamMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientFindTeamMember::Swap(WSToClientFindTeamMember* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(mapid_, other->mapid_);
    std::swap(code_, other->code_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientFindTeamMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientFindTeamMember_descriptor_;
  metadata.reflection = WSToClientFindTeamMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqKickMember::kMapidFieldNumber;
const int ClientReqKickMember::kCharidFieldNumber;
#endif  // !_MSC_VER

ClientReqKickMember::ClientReqKickMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqKickMember::InitAsDefaultInstance() {
}

ClientReqKickMember::ClientReqKickMember(const ClientReqKickMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqKickMember::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqKickMember::~ClientReqKickMember() {
  SharedDtor();
}

void ClientReqKickMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqKickMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqKickMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqKickMember_descriptor_;
}

const ClientReqKickMember& ClientReqKickMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientReqKickMember* ClientReqKickMember::default_instance_ = NULL;

ClientReqKickMember* ClientReqKickMember::New() const {
  return new ClientReqKickMember;
}

void ClientReqKickMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqKickMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional int64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqKickMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqKickMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqKickMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqKickMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqKickMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqKickMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqKickMember::MergeFrom(const ClientReqKickMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqKickMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqKickMember::CopyFrom(const ClientReqKickMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqKickMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqKickMember::Swap(ClientReqKickMember* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqKickMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqKickMember_descriptor_;
  metadata.reflection = ClientReqKickMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientKickMember::kRetFieldNumber;
const int WSToClientKickMember::kCharidFieldNumber;
#endif  // !_MSC_VER

WSToClientKickMember::WSToClientKickMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientKickMember::InitAsDefaultInstance() {
}

WSToClientKickMember::WSToClientKickMember(const WSToClientKickMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientKickMember::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientKickMember::~WSToClientKickMember() {
  SharedDtor();
}

void WSToClientKickMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientKickMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientKickMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientKickMember_descriptor_;
}

const WSToClientKickMember& WSToClientKickMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClientKickMember* WSToClientKickMember::default_instance_ = NULL;

WSToClientKickMember* WSToClientKickMember::New() const {
  return new WSToClientKickMember;
}

void WSToClientKickMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientKickMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional int64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientKickMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientKickMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientKickMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientKickMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientKickMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientKickMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientKickMember::MergeFrom(const WSToClientKickMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientKickMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientKickMember::CopyFrom(const WSToClientKickMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientKickMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientKickMember::Swap(WSToClientKickMember* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientKickMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientKickMember_descriptor_;
  metadata.reflection = WSToClientKickMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientSimKick::kCharidFieldNumber;
#endif  // !_MSC_VER

WSToClientSimKick::WSToClientSimKick()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientSimKick::InitAsDefaultInstance() {
}

WSToClientSimKick::WSToClientSimKick(const WSToClientSimKick& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientSimKick::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientSimKick::~WSToClientSimKick() {
  SharedDtor();
}

void WSToClientSimKick::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientSimKick::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientSimKick::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientSimKick_descriptor_;
}

const WSToClientSimKick& WSToClientSimKick::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClientSimKick* WSToClientSimKick::default_instance_ = NULL;

WSToClientSimKick* WSToClientSimKick::New() const {
  return new WSToClientSimKick;
}

void WSToClientSimKick::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientSimKick::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientSimKick::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientSimKick::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientSimKick::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientSimKick::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientSimKick* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientSimKick*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientSimKick::MergeFrom(const WSToClientSimKick& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientSimKick::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientSimKick::CopyFrom(const WSToClientSimKick& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientSimKick::IsInitialized() const {

  return true;
}

void WSToClientSimKick::Swap(WSToClientSimKick* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientSimKick::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientSimKick_descriptor_;
  metadata.reflection = WSToClientSimKick_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqEnterTeamMap::kMapidFieldNumber;
#endif  // !_MSC_VER

ClientReqEnterTeamMap::ClientReqEnterTeamMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqEnterTeamMap::InitAsDefaultInstance() {
}

ClientReqEnterTeamMap::ClientReqEnterTeamMap(const ClientReqEnterTeamMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqEnterTeamMap::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqEnterTeamMap::~ClientReqEnterTeamMap() {
  SharedDtor();
}

void ClientReqEnterTeamMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqEnterTeamMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqEnterTeamMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqEnterTeamMap_descriptor_;
}

const ClientReqEnterTeamMap& ClientReqEnterTeamMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientReqEnterTeamMap* ClientReqEnterTeamMap::default_instance_ = NULL;

ClientReqEnterTeamMap* ClientReqEnterTeamMap::New() const {
  return new ClientReqEnterTeamMap;
}

void ClientReqEnterTeamMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqEnterTeamMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqEnterTeamMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqEnterTeamMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqEnterTeamMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqEnterTeamMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqEnterTeamMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqEnterTeamMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqEnterTeamMap::MergeFrom(const ClientReqEnterTeamMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqEnterTeamMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqEnterTeamMap::CopyFrom(const ClientReqEnterTeamMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqEnterTeamMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqEnterTeamMap::Swap(ClientReqEnterTeamMap* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqEnterTeamMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqEnterTeamMap_descriptor_;
  metadata.reflection = ClientReqEnterTeamMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientEnterTeamMap::kRetFieldNumber;
const int WSToClientEnterTeamMap::kInstanceFieldNumber;
#endif  // !_MSC_VER

WSToClientEnterTeamMap::WSToClientEnterTeamMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientEnterTeamMap::InitAsDefaultInstance() {
}

WSToClientEnterTeamMap::WSToClientEnterTeamMap(const WSToClientEnterTeamMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientEnterTeamMap::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  instance_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientEnterTeamMap::~WSToClientEnterTeamMap() {
  SharedDtor();
}

void WSToClientEnterTeamMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientEnterTeamMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientEnterTeamMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientEnterTeamMap_descriptor_;
}

const WSToClientEnterTeamMap& WSToClientEnterTeamMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClientEnterTeamMap* WSToClientEnterTeamMap::default_instance_ = NULL;

WSToClientEnterTeamMap* WSToClientEnterTeamMap::New() const {
  return new WSToClientEnterTeamMap;
}

void WSToClientEnterTeamMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    instance_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientEnterTeamMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instance;
        break;
      }

      // optional int64 instance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instance_)));
          set_has_instance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientEnterTeamMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 instance = 2;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->instance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientEnterTeamMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 instance = 2;
  if (has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->instance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientEnterTeamMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 instance = 2;
    if (has_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientEnterTeamMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientEnterTeamMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientEnterTeamMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientEnterTeamMap::MergeFrom(const WSToClientEnterTeamMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_instance()) {
      set_instance(from.instance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientEnterTeamMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientEnterTeamMap::CopyFrom(const WSToClientEnterTeamMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientEnterTeamMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientEnterTeamMap::Swap(WSToClientEnterTeamMap* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(instance_, other->instance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientEnterTeamMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientEnterTeamMap_descriptor_;
  metadata.reflection = WSToClientEnterTeamMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientSimInstance::kInstanceFieldNumber;
#endif  // !_MSC_VER

WSToClientSimInstance::WSToClientSimInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientSimInstance::InitAsDefaultInstance() {
}

WSToClientSimInstance::WSToClientSimInstance(const WSToClientSimInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientSimInstance::SharedCtor() {
  _cached_size_ = 0;
  instance_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientSimInstance::~WSToClientSimInstance() {
  SharedDtor();
}

void WSToClientSimInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientSimInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientSimInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientSimInstance_descriptor_;
}

const WSToClientSimInstance& WSToClientSimInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClientSimInstance* WSToClientSimInstance::default_instance_ = NULL;

WSToClientSimInstance* WSToClientSimInstance::New() const {
  return new WSToClientSimInstance;
}

void WSToClientSimInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    instance_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientSimInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 instance = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instance_)));
          set_has_instance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientSimInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 instance = 1;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->instance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientSimInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 instance = 1;
  if (has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->instance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientSimInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 instance = 1;
    if (has_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientSimInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientSimInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientSimInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientSimInstance::MergeFrom(const WSToClientSimInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_instance()) {
      set_instance(from.instance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientSimInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientSimInstance::CopyFrom(const WSToClientSimInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientSimInstance::IsInitialized() const {

  return true;
}

void WSToClientSimInstance::Swap(WSToClientSimInstance* other) {
  if (other != this) {
    std::swap(instance_, other->instance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientSimInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientSimInstance_descriptor_;
  metadata.reflection = WSToClientSimInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMToClientSimHarmRank::kHarminfoFieldNumber;
#endif  // !_MSC_VER

GMToClientSimHarmRank::GMToClientSimHarmRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMToClientSimHarmRank::InitAsDefaultInstance() {
}

GMToClientSimHarmRank::GMToClientSimHarmRank(const GMToClientSimHarmRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMToClientSimHarmRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMToClientSimHarmRank::~GMToClientSimHarmRank() {
  SharedDtor();
}

void GMToClientSimHarmRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMToClientSimHarmRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMToClientSimHarmRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMToClientSimHarmRank_descriptor_;
}

const GMToClientSimHarmRank& GMToClientSimHarmRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

GMToClientSimHarmRank* GMToClientSimHarmRank::default_instance_ = NULL;

GMToClientSimHarmRank* GMToClientSimHarmRank::New() const {
  return new GMToClientSimHarmRank;
}

void GMToClientSimHarmRank::Clear() {
  harminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMToClientSimHarmRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MapInstanceProto.HarmRank harminfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_harminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_harminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_harminfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMToClientSimHarmRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MapInstanceProto.HarmRank harminfo = 1;
  for (int i = 0; i < this->harminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->harminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMToClientSimHarmRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MapInstanceProto.HarmRank harminfo = 1;
  for (int i = 0; i < this->harminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->harminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMToClientSimHarmRank::ByteSize() const {
  int total_size = 0;

  // repeated .MapInstanceProto.HarmRank harminfo = 1;
  total_size += 1 * this->harminfo_size();
  for (int i = 0; i < this->harminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->harminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMToClientSimHarmRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMToClientSimHarmRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMToClientSimHarmRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMToClientSimHarmRank::MergeFrom(const GMToClientSimHarmRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  harminfo_.MergeFrom(from.harminfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMToClientSimHarmRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMToClientSimHarmRank::CopyFrom(const GMToClientSimHarmRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMToClientSimHarmRank::IsInitialized() const {

  for (int i = 0; i < harminfo_size(); i++) {
    if (!this->harminfo(i).IsInitialized()) return false;
  }
  return true;
}

void GMToClientSimHarmRank::Swap(GMToClientSimHarmRank* other) {
  if (other != this) {
    harminfo_.Swap(&other->harminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMToClientSimHarmRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMToClientSimHarmRank_descriptor_;
  metadata.reflection = GMToClientSimHarmRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HarmRank::kCharidFieldNumber;
const int HarmRank::kCharnameFieldNumber;
const int HarmRank::kHarmFieldNumber;
#endif  // !_MSC_VER

HarmRank::HarmRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HarmRank::InitAsDefaultInstance() {
}

HarmRank::HarmRank(const HarmRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HarmRank::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  harm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HarmRank::~HarmRank() {
  SharedDtor();
}

void HarmRank::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void HarmRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HarmRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HarmRank_descriptor_;
}

const HarmRank& HarmRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

HarmRank* HarmRank::default_instance_ = NULL;

HarmRank* HarmRank::New() const {
  return new HarmRank;
}

void HarmRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    harm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HarmRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_harm;
        break;
      }

      // optional float harm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HarmRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  // optional float harm = 3;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->harm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HarmRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // optional float harm = 3;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->harm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HarmRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional float harm = 3;
    if (has_harm()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HarmRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HarmRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HarmRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HarmRank::MergeFrom(const HarmRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HarmRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HarmRank::CopyFrom(const HarmRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HarmRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void HarmRank::Swap(HarmRank* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(harm_, other->harm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HarmRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HarmRank_descriptor_;
  metadata.reflection = HarmRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientSimOnline::kCharidFieldNumber;
const int WSToClientSimOnline::kOnlineFieldNumber;
#endif  // !_MSC_VER

WSToClientSimOnline::WSToClientSimOnline()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientSimOnline::InitAsDefaultInstance() {
}

WSToClientSimOnline::WSToClientSimOnline(const WSToClientSimOnline& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientSimOnline::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientSimOnline::~WSToClientSimOnline() {
  SharedDtor();
}

void WSToClientSimOnline::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientSimOnline::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientSimOnline::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientSimOnline_descriptor_;
}

const WSToClientSimOnline& WSToClientSimOnline::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClientSimOnline* WSToClientSimOnline::default_instance_ = NULL;

WSToClientSimOnline* WSToClientSimOnline::New() const {
  return new WSToClientSimOnline;
}

void WSToClientSimOnline::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientSimOnline::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_online;
        break;
      }

      // optional bool online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientSimOnline::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional bool online = 2;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientSimOnline::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional bool online = 2;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientSimOnline::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional bool online = 2;
    if (has_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientSimOnline::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientSimOnline* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientSimOnline*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientSimOnline::MergeFrom(const WSToClientSimOnline& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientSimOnline::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientSimOnline::CopyFrom(const WSToClientSimOnline& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientSimOnline::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientSimOnline::Swap(WSToClientSimOnline* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientSimOnline::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientSimOnline_descriptor_;
  metadata.reflection = WSToClientSimOnline_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqExitTeam::kMapidFieldNumber;
#endif  // !_MSC_VER

ClientReqExitTeam::ClientReqExitTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqExitTeam::InitAsDefaultInstance() {
}

ClientReqExitTeam::ClientReqExitTeam(const ClientReqExitTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqExitTeam::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqExitTeam::~ClientReqExitTeam() {
  SharedDtor();
}

void ClientReqExitTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqExitTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqExitTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqExitTeam_descriptor_;
}

const ClientReqExitTeam& ClientReqExitTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientReqExitTeam* ClientReqExitTeam::default_instance_ = NULL;

ClientReqExitTeam* ClientReqExitTeam::New() const {
  return new ClientReqExitTeam;
}

void ClientReqExitTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqExitTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqExitTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqExitTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqExitTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqExitTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqExitTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqExitTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqExitTeam::MergeFrom(const ClientReqExitTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqExitTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqExitTeam::CopyFrom(const ClientReqExitTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqExitTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqExitTeam::Swap(ClientReqExitTeam* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqExitTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqExitTeam_descriptor_;
  metadata.reflection = ClientReqExitTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientExitTeam::kRetFieldNumber;
#endif  // !_MSC_VER

WSToClientExitTeam::WSToClientExitTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientExitTeam::InitAsDefaultInstance() {
}

WSToClientExitTeam::WSToClientExitTeam(const WSToClientExitTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientExitTeam::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientExitTeam::~WSToClientExitTeam() {
  SharedDtor();
}

void WSToClientExitTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientExitTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientExitTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientExitTeam_descriptor_;
}

const WSToClientExitTeam& WSToClientExitTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClientExitTeam* WSToClientExitTeam::default_instance_ = NULL;

WSToClientExitTeam* WSToClientExitTeam::New() const {
  return new WSToClientExitTeam;
}

void WSToClientExitTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientExitTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientExitTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientExitTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientExitTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientExitTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientExitTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientExitTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientExitTeam::MergeFrom(const WSToClientExitTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientExitTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientExitTeam::CopyFrom(const WSToClientExitTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientExitTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientExitTeam::Swap(WSToClientExitTeam* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientExitTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientExitTeam_descriptor_;
  metadata.reflection = WSToClientExitTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientSimExitTeam::kCharidFieldNumber;
const int WSToClientSimExitTeam::kCaptainFieldNumber;
#endif  // !_MSC_VER

WSToClientSimExitTeam::WSToClientSimExitTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientSimExitTeam::InitAsDefaultInstance() {
}

WSToClientSimExitTeam::WSToClientSimExitTeam(const WSToClientSimExitTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientSimExitTeam::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  captain_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientSimExitTeam::~WSToClientSimExitTeam() {
  SharedDtor();
}

void WSToClientSimExitTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientSimExitTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientSimExitTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientSimExitTeam_descriptor_;
}

const WSToClientSimExitTeam& WSToClientSimExitTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClientSimExitTeam* WSToClientSimExitTeam::default_instance_ = NULL;

WSToClientSimExitTeam* WSToClientSimExitTeam::New() const {
  return new WSToClientSimExitTeam;
}

void WSToClientSimExitTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    captain_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientSimExitTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_captain;
        break;
      }

      // optional int64 captain = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_captain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &captain_)));
          set_has_captain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientSimExitTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int64 captain = 2;
  if (has_captain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->captain(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientSimExitTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int64 captain = 2;
  if (has_captain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->captain(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientSimExitTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int64 captain = 2;
    if (has_captain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->captain());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientSimExitTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientSimExitTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientSimExitTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientSimExitTeam::MergeFrom(const WSToClientSimExitTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_captain()) {
      set_captain(from.captain());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientSimExitTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientSimExitTeam::CopyFrom(const WSToClientSimExitTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientSimExitTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientSimExitTeam::Swap(WSToClientSimExitTeam* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(captain_, other->captain_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientSimExitTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientSimExitTeam_descriptor_;
  metadata.reflection = WSToClientSimExitTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMToWSDelTeam::kTeamidFieldNumber;
#endif  // !_MSC_VER

GMToWSDelTeam::GMToWSDelTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMToWSDelTeam::InitAsDefaultInstance() {
}

GMToWSDelTeam::GMToWSDelTeam(const GMToWSDelTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMToWSDelTeam::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMToWSDelTeam::~GMToWSDelTeam() {
  SharedDtor();
}

void GMToWSDelTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMToWSDelTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMToWSDelTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMToWSDelTeam_descriptor_;
}

const GMToWSDelTeam& GMToWSDelTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

GMToWSDelTeam* GMToWSDelTeam::default_instance_ = NULL;

GMToWSDelTeam* GMToWSDelTeam::New() const {
  return new GMToWSDelTeam;
}

void GMToWSDelTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMToWSDelTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMToWSDelTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->teamid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMToWSDelTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->teamid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMToWSDelTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMToWSDelTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMToWSDelTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMToWSDelTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMToWSDelTeam::MergeFrom(const GMToWSDelTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMToWSDelTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMToWSDelTeam::CopyFrom(const GMToWSDelTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMToWSDelTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMToWSDelTeam::Swap(GMToWSDelTeam* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMToWSDelTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMToWSDelTeam_descriptor_;
  metadata.reflection = GMToWSDelTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMToClientLottery::kRetFieldNumber;
const int GMToClientLottery::kFlopIDFieldNumber;
const int GMToClientLottery::kItemIDFieldNumber;
const int GMToClientLottery::kItemNumFieldNumber;
const int GMToClientLottery::kBindTypeFieldNumber;
#endif  // !_MSC_VER

GMToClientLottery::GMToClientLottery()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMToClientLottery::InitAsDefaultInstance() {
}

GMToClientLottery::GMToClientLottery(const GMToClientLottery& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMToClientLottery::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  flopid_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  bindtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMToClientLottery::~GMToClientLottery() {
  SharedDtor();
}

void GMToClientLottery::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMToClientLottery::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMToClientLottery::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMToClientLottery_descriptor_;
}

const GMToClientLottery& GMToClientLottery::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

GMToClientLottery* GMToClientLottery::default_instance_ = NULL;

GMToClientLottery* GMToClientLottery::New() const {
  return new GMToClientLottery;
}

void GMToClientLottery::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    flopid_ = 0;
    itemid_ = 0;
    itemnum_ = 0;
    bindtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMToClientLottery::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_FlopID;
        break;
      }

      // optional int32 FlopID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_FlopID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flopid_)));
          set_has_flopid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ItemID;
        break;
      }

      // optional int32 ItemID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ItemNum;
        break;
      }

      // optional int32 ItemNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ItemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_BindType;
        break;
      }

      // optional int32 BindType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BindType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindtype_)));
          set_has_bindtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMToClientLottery::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 FlopID = 2;
  if (has_flopid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flopid(), output);
  }

  // optional int32 ItemID = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // optional int32 ItemNum = 4;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemnum(), output);
  }

  // optional int32 BindType = 5;
  if (has_bindtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bindtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMToClientLottery::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 FlopID = 2;
  if (has_flopid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flopid(), target);
  }

  // optional int32 ItemID = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // optional int32 ItemNum = 4;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemnum(), target);
  }

  // optional int32 BindType = 5;
  if (has_bindtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bindtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMToClientLottery::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 FlopID = 2;
    if (has_flopid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flopid());
    }

    // optional int32 ItemID = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 ItemNum = 4;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

    // optional int32 BindType = 5;
    if (has_bindtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMToClientLottery::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMToClientLottery* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMToClientLottery*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMToClientLottery::MergeFrom(const GMToClientLottery& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_flopid()) {
      set_flopid(from.flopid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_bindtype()) {
      set_bindtype(from.bindtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMToClientLottery::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMToClientLottery::CopyFrom(const GMToClientLottery& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMToClientLottery::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMToClientLottery::Swap(GMToClientLottery* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(flopid_, other->flopid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(bindtype_, other->bindtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMToClientLottery::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMToClientLottery_descriptor_;
  metadata.reflection = GMToClientLottery_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimSweepInstanceAward::kMapidFieldNumber;
const int SimSweepInstanceAward::kElapsedTimeFieldNumber;
const int SimSweepInstanceAward::kAwardMoneyFieldNumber;
const int SimSweepInstanceAward::kAwardExpFieldNumber;
const int SimSweepInstanceAward::kAwardInfuriateFieldNumber;
const int SimSweepInstanceAward::kItemsFieldNumber;
#endif  // !_MSC_VER

SimSweepInstanceAward::SimSweepInstanceAward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimSweepInstanceAward::InitAsDefaultInstance() {
}

SimSweepInstanceAward::SimSweepInstanceAward(const SimSweepInstanceAward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimSweepInstanceAward::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  elapsedtime_ = 0;
  awardmoney_ = 0;
  awardexp_ = 0;
  awardinfuriate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimSweepInstanceAward::~SimSweepInstanceAward() {
  SharedDtor();
}

void SimSweepInstanceAward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimSweepInstanceAward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimSweepInstanceAward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimSweepInstanceAward_descriptor_;
}

const SimSweepInstanceAward& SimSweepInstanceAward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

SimSweepInstanceAward* SimSweepInstanceAward::default_instance_ = NULL;

SimSweepInstanceAward* SimSweepInstanceAward::New() const {
  return new SimSweepInstanceAward;
}

void SimSweepInstanceAward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    elapsedtime_ = 0;
    awardmoney_ = 0;
    awardexp_ = 0;
    awardinfuriate_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimSweepInstanceAward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_elapsedTime;
        break;
      }

      // required int32 elapsedTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elapsedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elapsedtime_)));
          set_has_elapsedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_awardMoney;
        break;
      }

      // required int32 awardMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardmoney_)));
          set_has_awardmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_awardExp;
        break;
      }

      // required int32 awardExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardexp_)));
          set_has_awardexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_awardInfuriate;
        break;
      }

      // required int32 awardInfuriate = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardInfuriate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardinfuriate_)));
          set_has_awardinfuriate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_items;
        break;
      }

      // repeated .CharLogin.ClientItemInfo items = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimSweepInstanceAward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // required int32 elapsedTime = 2;
  if (has_elapsedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->elapsedtime(), output);
  }

  // required int32 awardMoney = 3;
  if (has_awardmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->awardmoney(), output);
  }

  // required int32 awardExp = 4;
  if (has_awardexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->awardexp(), output);
  }

  // required int32 awardInfuriate = 5;
  if (has_awardinfuriate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->awardinfuriate(), output);
  }

  // repeated .CharLogin.ClientItemInfo items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimSweepInstanceAward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // required int32 elapsedTime = 2;
  if (has_elapsedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->elapsedtime(), target);
  }

  // required int32 awardMoney = 3;
  if (has_awardmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->awardmoney(), target);
  }

  // required int32 awardExp = 4;
  if (has_awardexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->awardexp(), target);
  }

  // required int32 awardInfuriate = 5;
  if (has_awardinfuriate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->awardinfuriate(), target);
  }

  // repeated .CharLogin.ClientItemInfo items = 6;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimSweepInstanceAward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // required int32 elapsedTime = 2;
    if (has_elapsedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elapsedtime());
    }

    // required int32 awardMoney = 3;
    if (has_awardmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardmoney());
    }

    // required int32 awardExp = 4;
    if (has_awardexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardexp());
    }

    // required int32 awardInfuriate = 5;
    if (has_awardinfuriate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardinfuriate());
    }

  }
  // repeated .CharLogin.ClientItemInfo items = 6;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimSweepInstanceAward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimSweepInstanceAward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimSweepInstanceAward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimSweepInstanceAward::MergeFrom(const SimSweepInstanceAward& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_elapsedtime()) {
      set_elapsedtime(from.elapsedtime());
    }
    if (from.has_awardmoney()) {
      set_awardmoney(from.awardmoney());
    }
    if (from.has_awardexp()) {
      set_awardexp(from.awardexp());
    }
    if (from.has_awardinfuriate()) {
      set_awardinfuriate(from.awardinfuriate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimSweepInstanceAward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimSweepInstanceAward::CopyFrom(const SimSweepInstanceAward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimSweepInstanceAward::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void SimSweepInstanceAward::Swap(SimSweepInstanceAward* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(elapsedtime_, other->elapsedtime_);
    std::swap(awardmoney_, other->awardmoney_);
    std::swap(awardexp_, other->awardexp_);
    std::swap(awardinfuriate_, other->awardinfuriate_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimSweepInstanceAward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimSweepInstanceAward_descriptor_;
  metadata.reflection = SimSweepInstanceAward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysInstanceRanking::kMapidFieldNumber;
const int SysInstanceRanking::kElapsedTimeFieldNumber;
const int SysInstanceRanking::kTypeFieldNumber;
const int SysInstanceRanking::kCharIdFieldNumber;
#endif  // !_MSC_VER

SysInstanceRanking::SysInstanceRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysInstanceRanking::InitAsDefaultInstance() {
}

SysInstanceRanking::SysInstanceRanking(const SysInstanceRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysInstanceRanking::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  elapsedtime_ = 0;
  type_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysInstanceRanking::~SysInstanceRanking() {
  SharedDtor();
}

void SysInstanceRanking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysInstanceRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysInstanceRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysInstanceRanking_descriptor_;
}

const SysInstanceRanking& SysInstanceRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

SysInstanceRanking* SysInstanceRanking::default_instance_ = NULL;

SysInstanceRanking* SysInstanceRanking::New() const {
  return new SysInstanceRanking;
}

void SysInstanceRanking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    elapsedtime_ = 0;
    type_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysInstanceRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_elapsedTime;
        break;
      }

      // optional int32 elapsedTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elapsedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elapsedtime_)));
          set_has_elapsedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charId;
        break;
      }

      // optional int64 charId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysInstanceRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 elapsedTime = 2;
  if (has_elapsedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->elapsedtime(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional int64 charId = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysInstanceRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 elapsedTime = 2;
  if (has_elapsedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->elapsedtime(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional int64 charId = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysInstanceRanking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 elapsedTime = 2;
    if (has_elapsedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elapsedtime());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 charId = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysInstanceRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysInstanceRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysInstanceRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysInstanceRanking::MergeFrom(const SysInstanceRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_elapsedtime()) {
      set_elapsedtime(from.elapsedtime());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysInstanceRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysInstanceRanking::CopyFrom(const SysInstanceRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysInstanceRanking::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SysInstanceRanking::Swap(SysInstanceRanking* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(elapsedtime_, other->elapsedtime_);
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysInstanceRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysInstanceRanking_descriptor_;
  metadata.reflection = SysInstanceRanking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckInstanceRanking::kMapidFieldNumber;
#endif  // !_MSC_VER

AckInstanceRanking::AckInstanceRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckInstanceRanking::InitAsDefaultInstance() {
}

AckInstanceRanking::AckInstanceRanking(const AckInstanceRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckInstanceRanking::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckInstanceRanking::~AckInstanceRanking() {
  SharedDtor();
}

void AckInstanceRanking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckInstanceRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckInstanceRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckInstanceRanking_descriptor_;
}

const AckInstanceRanking& AckInstanceRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

AckInstanceRanking* AckInstanceRanking::default_instance_ = NULL;

AckInstanceRanking* AckInstanceRanking::New() const {
  return new AckInstanceRanking;
}

void AckInstanceRanking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckInstanceRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckInstanceRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckInstanceRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckInstanceRanking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckInstanceRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckInstanceRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckInstanceRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckInstanceRanking::MergeFrom(const AckInstanceRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckInstanceRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckInstanceRanking::CopyFrom(const AckInstanceRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckInstanceRanking::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckInstanceRanking::Swap(AckInstanceRanking* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckInstanceRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckInstanceRanking_descriptor_;
  metadata.reflection = AckInstanceRanking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetInstanceRanking::kRetFieldNumber;
const int RetInstanceRanking::kElapsedTimeFieldNumber;
const int RetInstanceRanking::kCharnameFieldNumber;
const int RetInstanceRanking::kMapidFieldNumber;
#endif  // !_MSC_VER

RetInstanceRanking::RetInstanceRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetInstanceRanking::InitAsDefaultInstance() {
}

RetInstanceRanking::RetInstanceRanking(const RetInstanceRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetInstanceRanking::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  elapsedtime_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetInstanceRanking::~RetInstanceRanking() {
  SharedDtor();
}

void RetInstanceRanking::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void RetInstanceRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetInstanceRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetInstanceRanking_descriptor_;
}

const RetInstanceRanking& RetInstanceRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetInstanceRanking* RetInstanceRanking::default_instance_ = NULL;

RetInstanceRanking* RetInstanceRanking::New() const {
  return new RetInstanceRanking;
}

void RetInstanceRanking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    elapsedtime_ = 0;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetInstanceRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_elapsedTime;
        break;
      }

      // optional int32 elapsedTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elapsedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elapsedtime_)));
          set_has_elapsedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charname;
        break;
      }

      // optional string charname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetInstanceRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 elapsedTime = 2;
  if (has_elapsedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->elapsedtime(), output);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->charname(), output);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetInstanceRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 elapsedTime = 2;
  if (has_elapsedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->elapsedtime(), target);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  // optional int32 mapid = 4;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetInstanceRanking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 elapsedTime = 2;
    if (has_elapsedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elapsedtime());
    }

    // optional string charname = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 mapid = 4;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetInstanceRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetInstanceRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetInstanceRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetInstanceRanking::MergeFrom(const RetInstanceRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_elapsedtime()) {
      set_elapsedtime(from.elapsedtime());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetInstanceRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetInstanceRanking::CopyFrom(const RetInstanceRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetInstanceRanking::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetInstanceRanking::Swap(RetInstanceRanking* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(elapsedtime_, other->elapsedtime_);
    std::swap(charname_, other->charname_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetInstanceRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetInstanceRanking_descriptor_;
  metadata.reflection = RetInstanceRanking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetInstanceRanking::kMapidFieldNumber;
#endif  // !_MSC_VER

GetInstanceRanking::GetInstanceRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetInstanceRanking::InitAsDefaultInstance() {
}

GetInstanceRanking::GetInstanceRanking(const GetInstanceRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetInstanceRanking::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetInstanceRanking::~GetInstanceRanking() {
  SharedDtor();
}

void GetInstanceRanking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetInstanceRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetInstanceRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetInstanceRanking_descriptor_;
}

const GetInstanceRanking& GetInstanceRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

GetInstanceRanking* GetInstanceRanking::default_instance_ = NULL;

GetInstanceRanking* GetInstanceRanking::New() const {
  return new GetInstanceRanking;
}

void GetInstanceRanking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetInstanceRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetInstanceRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetInstanceRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetInstanceRanking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetInstanceRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetInstanceRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetInstanceRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetInstanceRanking::MergeFrom(const GetInstanceRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetInstanceRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetInstanceRanking::CopyFrom(const GetInstanceRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetInstanceRanking::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetInstanceRanking::Swap(GetInstanceRanking* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetInstanceRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetInstanceRanking_descriptor_;
  metadata.reflection = GetInstanceRanking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnInstanceRanking::kMapidFieldNumber;
const int ReturnInstanceRanking::kElapsedTimeFieldNumber;
#endif  // !_MSC_VER

ReturnInstanceRanking::ReturnInstanceRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnInstanceRanking::InitAsDefaultInstance() {
}

ReturnInstanceRanking::ReturnInstanceRanking(const ReturnInstanceRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnInstanceRanking::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  elapsedtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnInstanceRanking::~ReturnInstanceRanking() {
  SharedDtor();
}

void ReturnInstanceRanking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnInstanceRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnInstanceRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnInstanceRanking_descriptor_;
}

const ReturnInstanceRanking& ReturnInstanceRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReturnInstanceRanking* ReturnInstanceRanking::default_instance_ = NULL;

ReturnInstanceRanking* ReturnInstanceRanking::New() const {
  return new ReturnInstanceRanking;
}

void ReturnInstanceRanking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    elapsedtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnInstanceRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_elapsedTime;
        break;
      }

      // optional int32 elapsedTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elapsedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elapsedtime_)));
          set_has_elapsedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnInstanceRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 elapsedTime = 2;
  if (has_elapsedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->elapsedtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnInstanceRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 elapsedTime = 2;
  if (has_elapsedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->elapsedtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnInstanceRanking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 elapsedTime = 2;
    if (has_elapsedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elapsedtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnInstanceRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnInstanceRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnInstanceRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnInstanceRanking::MergeFrom(const ReturnInstanceRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_elapsedtime()) {
      set_elapsedtime(from.elapsedtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnInstanceRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnInstanceRanking::CopyFrom(const ReturnInstanceRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnInstanceRanking::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReturnInstanceRanking::Swap(ReturnInstanceRanking* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(elapsedtime_, other->elapsedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnInstanceRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnInstanceRanking_descriptor_;
  metadata.reflection = ReturnInstanceRanking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupInstance::kGroupListFieldNumber;
#endif  // !_MSC_VER

GroupInstance::GroupInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupInstance::InitAsDefaultInstance() {
}

GroupInstance::GroupInstance(const GroupInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupInstance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupInstance::~GroupInstance() {
  SharedDtor();
}

void GroupInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupInstance_descriptor_;
}

const GroupInstance& GroupInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

GroupInstance* GroupInstance::default_instance_ = NULL;

GroupInstance* GroupInstance::New() const {
  return new GroupInstance;
}

void GroupInstance::Clear() {
  grouplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MapInstanceProto.InstanceGroupList groupList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grouplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_groupList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MapInstanceProto.InstanceGroupList groupList = 1;
  for (int i = 0; i < this->grouplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->grouplist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MapInstanceProto.InstanceGroupList groupList = 1;
  for (int i = 0; i < this->grouplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->grouplist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupInstance::ByteSize() const {
  int total_size = 0;

  // repeated .MapInstanceProto.InstanceGroupList groupList = 1;
  total_size += 1 * this->grouplist_size();
  for (int i = 0; i < this->grouplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grouplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupInstance::MergeFrom(const GroupInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  grouplist_.MergeFrom(from.grouplist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInstance::CopyFrom(const GroupInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInstance::IsInitialized() const {

  for (int i = 0; i < grouplist_size(); i++) {
    if (!this->grouplist(i).IsInitialized()) return false;
  }
  return true;
}

void GroupInstance::Swap(GroupInstance* other) {
  if (other != this) {
    grouplist_.Swap(&other->grouplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupInstance_descriptor_;
  metadata.reflection = GroupInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceGroupList::kMapIdFieldNumber;
const int InstanceGroupList::kNumFieldNumber;
const int InstanceGroupList::kBuynumFieldNumber;
#endif  // !_MSC_VER

InstanceGroupList::InstanceGroupList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceGroupList::InitAsDefaultInstance() {
}

InstanceGroupList::InstanceGroupList(const InstanceGroupList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceGroupList::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  num_ = 0;
  buynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceGroupList::~InstanceGroupList() {
  SharedDtor();
}

void InstanceGroupList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceGroupList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceGroupList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceGroupList_descriptor_;
}

const InstanceGroupList& InstanceGroupList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

InstanceGroupList* InstanceGroupList::default_instance_ = NULL;

InstanceGroupList* InstanceGroupList::New() const {
  return new InstanceGroupList;
}

void InstanceGroupList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    num_ = 0;
    buynum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceGroupList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buynum;
        break;
      }

      // optional int32 buynum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceGroupList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 buynum = 3;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceGroupList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 buynum = 3;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceGroupList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 buynum = 3;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceGroupList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceGroupList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceGroupList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceGroupList::MergeFrom(const InstanceGroupList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceGroupList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceGroupList::CopyFrom(const InstanceGroupList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceGroupList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstanceGroupList::Swap(InstanceGroupList* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(num_, other->num_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceGroupList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceGroupList_descriptor_;
  metadata.reflection = InstanceGroupList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCostByGroupInstance::kMapIdFieldNumber;
#endif  // !_MSC_VER

ReqCostByGroupInstance::ReqCostByGroupInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCostByGroupInstance::InitAsDefaultInstance() {
}

ReqCostByGroupInstance::ReqCostByGroupInstance(const ReqCostByGroupInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCostByGroupInstance::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCostByGroupInstance::~ReqCostByGroupInstance() {
  SharedDtor();
}

void ReqCostByGroupInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCostByGroupInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCostByGroupInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCostByGroupInstance_descriptor_;
}

const ReqCostByGroupInstance& ReqCostByGroupInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqCostByGroupInstance* ReqCostByGroupInstance::default_instance_ = NULL;

ReqCostByGroupInstance* ReqCostByGroupInstance::New() const {
  return new ReqCostByGroupInstance;
}

void ReqCostByGroupInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCostByGroupInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCostByGroupInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCostByGroupInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCostByGroupInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCostByGroupInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCostByGroupInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCostByGroupInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCostByGroupInstance::MergeFrom(const ReqCostByGroupInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCostByGroupInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCostByGroupInstance::CopyFrom(const ReqCostByGroupInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCostByGroupInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqCostByGroupInstance::Swap(ReqCostByGroupInstance* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCostByGroupInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCostByGroupInstance_descriptor_;
  metadata.reflection = ReqCostByGroupInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetCostByGroupInstance::kRetFieldNumber;
const int RetCostByGroupInstance::kMapIdFieldNumber;
const int RetCostByGroupInstance::kNumFieldNumber;
const int RetCostByGroupInstance::kBuynumFieldNumber;
#endif  // !_MSC_VER

RetCostByGroupInstance::RetCostByGroupInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetCostByGroupInstance::InitAsDefaultInstance() {
}

RetCostByGroupInstance::RetCostByGroupInstance(const RetCostByGroupInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetCostByGroupInstance::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  mapid_ = 0;
  num_ = 0;
  buynum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetCostByGroupInstance::~RetCostByGroupInstance() {
  SharedDtor();
}

void RetCostByGroupInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetCostByGroupInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetCostByGroupInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetCostByGroupInstance_descriptor_;
}

const RetCostByGroupInstance& RetCostByGroupInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetCostByGroupInstance* RetCostByGroupInstance::default_instance_ = NULL;

RetCostByGroupInstance* RetCostByGroupInstance::New() const {
  return new RetCostByGroupInstance;
}

void RetCostByGroupInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    mapid_ = 0;
    num_ = 0;
    buynum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetCostByGroupInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapId;
        break;
      }

      // optional int32 mapId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buynum;
        break;
      }

      // optional int32 buynum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetCostByGroupInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 mapId = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 buynum = 4;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buynum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetCostByGroupInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 mapId = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 buynum = 4;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buynum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetCostByGroupInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 mapId = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 buynum = 4;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buynum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetCostByGroupInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetCostByGroupInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetCostByGroupInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetCostByGroupInstance::MergeFrom(const RetCostByGroupInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetCostByGroupInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetCostByGroupInstance::CopyFrom(const RetCostByGroupInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetCostByGroupInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetCostByGroupInstance::Swap(RetCostByGroupInstance* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(mapid_, other->mapid_);
    std::swap(num_, other->num_);
    std::swap(buynum_, other->buynum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetCostByGroupInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetCostByGroupInstance_descriptor_;
  metadata.reflection = RetCostByGroupInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqArenaRefresh::ReqArenaRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqArenaRefresh::InitAsDefaultInstance() {
}

ReqArenaRefresh::ReqArenaRefresh(const ReqArenaRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqArenaRefresh::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqArenaRefresh::~ReqArenaRefresh() {
  SharedDtor();
}

void ReqArenaRefresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqArenaRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqArenaRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqArenaRefresh_descriptor_;
}

const ReqArenaRefresh& ReqArenaRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqArenaRefresh* ReqArenaRefresh::default_instance_ = NULL;

ReqArenaRefresh* ReqArenaRefresh::New() const {
  return new ReqArenaRefresh;
}

void ReqArenaRefresh::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqArenaRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqArenaRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqArenaRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqArenaRefresh::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqArenaRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqArenaRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqArenaRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqArenaRefresh::MergeFrom(const ReqArenaRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqArenaRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqArenaRefresh::CopyFrom(const ReqArenaRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqArenaRefresh::IsInitialized() const {

  return true;
}

void ReqArenaRefresh::Swap(ReqArenaRefresh* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqArenaRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqArenaRefresh_descriptor_;
  metadata.reflection = ReqArenaRefresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetArenaRefresh::kErrFieldNumber;
const int RetArenaRefresh::kAlreadyRefreshFieldNumber;
const int RetArenaRefresh::kOtherInfoFieldNumber;
#endif  // !_MSC_VER

RetArenaRefresh::RetArenaRefresh()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetArenaRefresh::InitAsDefaultInstance() {
}

RetArenaRefresh::RetArenaRefresh(const RetArenaRefresh& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetArenaRefresh::SharedCtor() {
  _cached_size_ = 0;
  err_ = 0;
  alreadyrefresh_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetArenaRefresh::~RetArenaRefresh() {
  SharedDtor();
}

void RetArenaRefresh::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetArenaRefresh::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetArenaRefresh::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetArenaRefresh_descriptor_;
}

const RetArenaRefresh& RetArenaRefresh::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetArenaRefresh* RetArenaRefresh::default_instance_ = NULL;

RetArenaRefresh* RetArenaRefresh::New() const {
  return new RetArenaRefresh;
}

void RetArenaRefresh::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    err_ = 0;
    alreadyrefresh_ = 0;
  }
  otherinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetArenaRefresh::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 err = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_alreadyRefresh;
        break;
      }

      // required int32 alreadyRefresh = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_alreadyRefresh:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &alreadyrefresh_)));
          set_has_alreadyrefresh();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_otherInfo;
        break;
      }

      // repeated .MapInstanceProto.OtherPlayerArenaInfo otherInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otherInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_otherinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_otherInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetArenaRefresh::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 err = 1;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->err(), output);
  }

  // required int32 alreadyRefresh = 2;
  if (has_alreadyrefresh()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->alreadyrefresh(), output);
  }

  // repeated .MapInstanceProto.OtherPlayerArenaInfo otherInfo = 3;
  for (int i = 0; i < this->otherinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->otherinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetArenaRefresh::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 err = 1;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->err(), target);
  }

  // required int32 alreadyRefresh = 2;
  if (has_alreadyrefresh()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->alreadyrefresh(), target);
  }

  // repeated .MapInstanceProto.OtherPlayerArenaInfo otherInfo = 3;
  for (int i = 0; i < this->otherinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->otherinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetArenaRefresh::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 err = 1;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // required int32 alreadyRefresh = 2;
    if (has_alreadyrefresh()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->alreadyrefresh());
    }

  }
  // repeated .MapInstanceProto.OtherPlayerArenaInfo otherInfo = 3;
  total_size += 1 * this->otherinfo_size();
  for (int i = 0; i < this->otherinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->otherinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetArenaRefresh::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetArenaRefresh* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetArenaRefresh*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetArenaRefresh::MergeFrom(const RetArenaRefresh& from) {
  GOOGLE_CHECK_NE(&from, this);
  otherinfo_.MergeFrom(from.otherinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_alreadyrefresh()) {
      set_alreadyrefresh(from.alreadyrefresh());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetArenaRefresh::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetArenaRefresh::CopyFrom(const RetArenaRefresh& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetArenaRefresh::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < otherinfo_size(); i++) {
    if (!this->otherinfo(i).IsInitialized()) return false;
  }
  return true;
}

void RetArenaRefresh::Swap(RetArenaRefresh* other) {
  if (other != this) {
    std::swap(err_, other->err_);
    std::swap(alreadyrefresh_, other->alreadyrefresh_);
    otherinfo_.Swap(&other->otherinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetArenaRefresh::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetArenaRefresh_descriptor_;
  metadata.reflection = RetArenaRefresh_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqWSArenaChallPlayer::kRankingsFieldNumber;
#endif  // !_MSC_VER

ReqWSArenaChallPlayer::ReqWSArenaChallPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqWSArenaChallPlayer::InitAsDefaultInstance() {
}

ReqWSArenaChallPlayer::ReqWSArenaChallPlayer(const ReqWSArenaChallPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqWSArenaChallPlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqWSArenaChallPlayer::~ReqWSArenaChallPlayer() {
  SharedDtor();
}

void ReqWSArenaChallPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqWSArenaChallPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWSArenaChallPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWSArenaChallPlayer_descriptor_;
}

const ReqWSArenaChallPlayer& ReqWSArenaChallPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqWSArenaChallPlayer* ReqWSArenaChallPlayer::default_instance_ = NULL;

ReqWSArenaChallPlayer* ReqWSArenaChallPlayer::New() const {
  return new ReqWSArenaChallPlayer;
}

void ReqWSArenaChallPlayer::Clear() {
  rankings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqWSArenaChallPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 rankings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_rankings())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rankings())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_rankings;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqWSArenaChallPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 rankings = 1;
  for (int i = 0; i < this->rankings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->rankings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqWSArenaChallPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 rankings = 1;
  for (int i = 0; i < this->rankings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->rankings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqWSArenaChallPlayer::ByteSize() const {
  int total_size = 0;

  // repeated int32 rankings = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rankings_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rankings(i));
    }
    total_size += 1 * this->rankings_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWSArenaChallPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqWSArenaChallPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqWSArenaChallPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqWSArenaChallPlayer::MergeFrom(const ReqWSArenaChallPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankings_.MergeFrom(from.rankings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqWSArenaChallPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWSArenaChallPlayer::CopyFrom(const ReqWSArenaChallPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWSArenaChallPlayer::IsInitialized() const {

  return true;
}

void ReqWSArenaChallPlayer::Swap(ReqWSArenaChallPlayer* other) {
  if (other != this) {
    rankings_.Swap(&other->rankings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqWSArenaChallPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWSArenaChallPlayer_descriptor_;
  metadata.reflection = ReqWSArenaChallPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetWSArenaChallPlayer::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

RetWSArenaChallPlayer::RetWSArenaChallPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetWSArenaChallPlayer::InitAsDefaultInstance() {
}

RetWSArenaChallPlayer::RetWSArenaChallPlayer(const RetWSArenaChallPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetWSArenaChallPlayer::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetWSArenaChallPlayer::~RetWSArenaChallPlayer() {
  SharedDtor();
}

void RetWSArenaChallPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetWSArenaChallPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetWSArenaChallPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetWSArenaChallPlayer_descriptor_;
}

const RetWSArenaChallPlayer& RetWSArenaChallPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetWSArenaChallPlayer* RetWSArenaChallPlayer::default_instance_ = NULL;

RetWSArenaChallPlayer* RetWSArenaChallPlayer::New() const {
  return new RetWSArenaChallPlayer;
}

void RetWSArenaChallPlayer::Clear() {
  playerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetWSArenaChallPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MapInstanceProto.OtherPlayerArenaInfo playerInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_playerInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetWSArenaChallPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MapInstanceProto.OtherPlayerArenaInfo playerInfo = 1;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->playerinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetWSArenaChallPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MapInstanceProto.OtherPlayerArenaInfo playerInfo = 1;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->playerinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetWSArenaChallPlayer::ByteSize() const {
  int total_size = 0;

  // repeated .MapInstanceProto.OtherPlayerArenaInfo playerInfo = 1;
  total_size += 1 * this->playerinfo_size();
  for (int i = 0; i < this->playerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetWSArenaChallPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetWSArenaChallPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetWSArenaChallPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetWSArenaChallPlayer::MergeFrom(const RetWSArenaChallPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerinfo_.MergeFrom(from.playerinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetWSArenaChallPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetWSArenaChallPlayer::CopyFrom(const RetWSArenaChallPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetWSArenaChallPlayer::IsInitialized() const {

  for (int i = 0; i < playerinfo_size(); i++) {
    if (!this->playerinfo(i).IsInitialized()) return false;
  }
  return true;
}

void RetWSArenaChallPlayer::Swap(RetWSArenaChallPlayer* other) {
  if (other != this) {
    playerinfo_.Swap(&other->playerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetWSArenaChallPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetWSArenaChallPlayer_descriptor_;
  metadata.reflection = RetWSArenaChallPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqWSArenaChallRank::kRankingsFieldNumber;
#endif  // !_MSC_VER

ReqWSArenaChallRank::ReqWSArenaChallRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqWSArenaChallRank::InitAsDefaultInstance() {
}

ReqWSArenaChallRank::ReqWSArenaChallRank(const ReqWSArenaChallRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqWSArenaChallRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqWSArenaChallRank::~ReqWSArenaChallRank() {
  SharedDtor();
}

void ReqWSArenaChallRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqWSArenaChallRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqWSArenaChallRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqWSArenaChallRank_descriptor_;
}

const ReqWSArenaChallRank& ReqWSArenaChallRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqWSArenaChallRank* ReqWSArenaChallRank::default_instance_ = NULL;

ReqWSArenaChallRank* ReqWSArenaChallRank::New() const {
  return new ReqWSArenaChallRank;
}

void ReqWSArenaChallRank::Clear() {
  rankings_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqWSArenaChallRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 rankings = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_rankings())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rankings())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_rankings;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqWSArenaChallRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 rankings = 1;
  for (int i = 0; i < this->rankings_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->rankings(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqWSArenaChallRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 rankings = 1;
  for (int i = 0; i < this->rankings_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->rankings(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqWSArenaChallRank::ByteSize() const {
  int total_size = 0;

  // repeated int32 rankings = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->rankings_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rankings(i));
    }
    total_size += 1 * this->rankings_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqWSArenaChallRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqWSArenaChallRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqWSArenaChallRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqWSArenaChallRank::MergeFrom(const ReqWSArenaChallRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankings_.MergeFrom(from.rankings_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqWSArenaChallRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqWSArenaChallRank::CopyFrom(const ReqWSArenaChallRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqWSArenaChallRank::IsInitialized() const {

  return true;
}

void ReqWSArenaChallRank::Swap(ReqWSArenaChallRank* other) {
  if (other != this) {
    rankings_.Swap(&other->rankings_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqWSArenaChallRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqWSArenaChallRank_descriptor_;
  metadata.reflection = ReqWSArenaChallRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMToClientSweepAllInstance::kRetFieldNumber;
const int GMToClientSweepAllInstance::kSsiaFieldNumber;
#endif  // !_MSC_VER

GMToClientSweepAllInstance::GMToClientSweepAllInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMToClientSweepAllInstance::InitAsDefaultInstance() {
}

GMToClientSweepAllInstance::GMToClientSweepAllInstance(const GMToClientSweepAllInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMToClientSweepAllInstance::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMToClientSweepAllInstance::~GMToClientSweepAllInstance() {
  SharedDtor();
}

void GMToClientSweepAllInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMToClientSweepAllInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMToClientSweepAllInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMToClientSweepAllInstance_descriptor_;
}

const GMToClientSweepAllInstance& GMToClientSweepAllInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

GMToClientSweepAllInstance* GMToClientSweepAllInstance::default_instance_ = NULL;

GMToClientSweepAllInstance* GMToClientSweepAllInstance::New() const {
  return new GMToClientSweepAllInstance;
}

void GMToClientSweepAllInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ssia_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMToClientSweepAllInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ssia;
        break;
      }

      // repeated .MapInstanceProto.SimSweepInstanceAward ssia = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ssia:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ssia()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_ssia;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMToClientSweepAllInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .MapInstanceProto.SimSweepInstanceAward ssia = 2;
  for (int i = 0; i < this->ssia_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->ssia(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMToClientSweepAllInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .MapInstanceProto.SimSweepInstanceAward ssia = 2;
  for (int i = 0; i < this->ssia_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->ssia(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMToClientSweepAllInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .MapInstanceProto.SimSweepInstanceAward ssia = 2;
  total_size += 1 * this->ssia_size();
  for (int i = 0; i < this->ssia_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ssia(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMToClientSweepAllInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMToClientSweepAllInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMToClientSweepAllInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMToClientSweepAllInstance::MergeFrom(const GMToClientSweepAllInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  ssia_.MergeFrom(from.ssia_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMToClientSweepAllInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMToClientSweepAllInstance::CopyFrom(const GMToClientSweepAllInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMToClientSweepAllInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < ssia_size(); i++) {
    if (!this->ssia(i).IsInitialized()) return false;
  }
  return true;
}

void GMToClientSweepAllInstance::Swap(GMToClientSweepAllInstance* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    ssia_.Swap(&other->ssia_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMToClientSweepAllInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMToClientSweepAllInstance_descriptor_;
  metadata.reflection = GMToClientSweepAllInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EliteInstance::kNumFieldNumber;
const int EliteInstance::kResetFieldNumber;
const int EliteInstance::kListFieldNumber;
#endif  // !_MSC_VER

EliteInstance::EliteInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EliteInstance::InitAsDefaultInstance() {
}

EliteInstance::EliteInstance(const EliteInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EliteInstance::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  reset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EliteInstance::~EliteInstance() {
  SharedDtor();
}

void EliteInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EliteInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EliteInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EliteInstance_descriptor_;
}

const EliteInstance& EliteInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

EliteInstance* EliteInstance::default_instance_ = NULL;

EliteInstance* EliteInstance::New() const {
  return new EliteInstance;
}

void EliteInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    reset_ = 0;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EliteInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reset;
        break;
      }

      // optional int32 reset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }

      // repeated .MapInstanceProto.InstanceEliteList list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EliteInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 reset = 2;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reset(), output);
  }

  // repeated .MapInstanceProto.InstanceEliteList list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EliteInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 reset = 2;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reset(), target);
  }

  // repeated .MapInstanceProto.InstanceEliteList list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EliteInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 reset = 2;
    if (has_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset());
    }

  }
  // repeated .MapInstanceProto.InstanceEliteList list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EliteInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EliteInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EliteInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EliteInstance::MergeFrom(const EliteInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EliteInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EliteInstance::CopyFrom(const EliteInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EliteInstance::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void EliteInstance::Swap(EliteInstance* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(reset_, other->reset_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EliteInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EliteInstance_descriptor_;
  metadata.reflection = EliteInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceEliteList::kMapIdFieldNumber;
const int InstanceEliteList::kPassFieldNumber;
#endif  // !_MSC_VER

InstanceEliteList::InstanceEliteList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceEliteList::InitAsDefaultInstance() {
}

InstanceEliteList::InstanceEliteList(const InstanceEliteList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceEliteList::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceEliteList::~InstanceEliteList() {
  SharedDtor();
}

void InstanceEliteList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceEliteList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceEliteList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceEliteList_descriptor_;
}

const InstanceEliteList& InstanceEliteList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

InstanceEliteList* InstanceEliteList::default_instance_ = NULL;

InstanceEliteList* InstanceEliteList::New() const {
  return new InstanceEliteList;
}

void InstanceEliteList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    pass_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceEliteList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }

      // optional int32 pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceEliteList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceEliteList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceEliteList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceEliteList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceEliteList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceEliteList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceEliteList::MergeFrom(const InstanceEliteList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceEliteList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceEliteList::CopyFrom(const InstanceEliteList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceEliteList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstanceEliteList::Swap(InstanceEliteList* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pass_, other->pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceEliteList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceEliteList_descriptor_;
  metadata.reflection = InstanceEliteList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CauchemarInstance::kNumFieldNumber;
const int CauchemarInstance::kResetFieldNumber;
const int CauchemarInstance::kListFieldNumber;
#endif  // !_MSC_VER

CauchemarInstance::CauchemarInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CauchemarInstance::InitAsDefaultInstance() {
}

CauchemarInstance::CauchemarInstance(const CauchemarInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CauchemarInstance::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  reset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CauchemarInstance::~CauchemarInstance() {
  SharedDtor();
}

void CauchemarInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CauchemarInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CauchemarInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CauchemarInstance_descriptor_;
}

const CauchemarInstance& CauchemarInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

CauchemarInstance* CauchemarInstance::default_instance_ = NULL;

CauchemarInstance* CauchemarInstance::New() const {
  return new CauchemarInstance;
}

void CauchemarInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    reset_ = 0;
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CauchemarInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reset;
        break;
      }

      // optional int32 reset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        break;
      }

      // repeated .MapInstanceProto.InstanceCauchemarList list = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CauchemarInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 reset = 2;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reset(), output);
  }

  // repeated .MapInstanceProto.InstanceCauchemarList list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CauchemarInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 reset = 2;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reset(), target);
  }

  // repeated .MapInstanceProto.InstanceCauchemarList list = 3;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CauchemarInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 reset = 2;
    if (has_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset());
    }

  }
  // repeated .MapInstanceProto.InstanceCauchemarList list = 3;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CauchemarInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CauchemarInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CauchemarInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CauchemarInstance::MergeFrom(const CauchemarInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CauchemarInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CauchemarInstance::CopyFrom(const CauchemarInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CauchemarInstance::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void CauchemarInstance::Swap(CauchemarInstance* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(reset_, other->reset_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CauchemarInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CauchemarInstance_descriptor_;
  metadata.reflection = CauchemarInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceCauchemarList::kMapIdFieldNumber;
const int InstanceCauchemarList::kPassFieldNumber;
#endif  // !_MSC_VER

InstanceCauchemarList::InstanceCauchemarList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceCauchemarList::InitAsDefaultInstance() {
}

InstanceCauchemarList::InstanceCauchemarList(const InstanceCauchemarList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceCauchemarList::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceCauchemarList::~InstanceCauchemarList() {
  SharedDtor();
}

void InstanceCauchemarList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceCauchemarList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceCauchemarList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceCauchemarList_descriptor_;
}

const InstanceCauchemarList& InstanceCauchemarList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

InstanceCauchemarList* InstanceCauchemarList::default_instance_ = NULL;

InstanceCauchemarList* InstanceCauchemarList::New() const {
  return new InstanceCauchemarList;
}

void InstanceCauchemarList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    pass_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceCauchemarList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }

      // optional int32 pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceCauchemarList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceCauchemarList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceCauchemarList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceCauchemarList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceCauchemarList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceCauchemarList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceCauchemarList::MergeFrom(const InstanceCauchemarList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceCauchemarList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceCauchemarList::CopyFrom(const InstanceCauchemarList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceCauchemarList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstanceCauchemarList::Swap(InstanceCauchemarList* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pass_, other->pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceCauchemarList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceCauchemarList_descriptor_;
  metadata.reflection = InstanceCauchemarList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqInviteMemberList::kMapIdFieldNumber;
const int ReqInviteMemberList::kNtypeFieldNumber;
#endif  // !_MSC_VER

ReqInviteMemberList::ReqInviteMemberList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqInviteMemberList::InitAsDefaultInstance() {
}

ReqInviteMemberList::ReqInviteMemberList(const ReqInviteMemberList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqInviteMemberList::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqInviteMemberList::~ReqInviteMemberList() {
  SharedDtor();
}

void ReqInviteMemberList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqInviteMemberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqInviteMemberList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqInviteMemberList_descriptor_;
}

const ReqInviteMemberList& ReqInviteMemberList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqInviteMemberList* ReqInviteMemberList::default_instance_ = NULL;

ReqInviteMemberList* ReqInviteMemberList::New() const {
  return new ReqInviteMemberList;
}

void ReqInviteMemberList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    ntype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqInviteMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ntype;
        break;
      }

      // optional int32 ntype = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ntype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntype_)));
          set_has_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqInviteMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 ntype = 2;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ntype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqInviteMemberList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 ntype = 2;
  if (has_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ntype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqInviteMemberList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 ntype = 2;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInviteMemberList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqInviteMemberList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqInviteMemberList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqInviteMemberList::MergeFrom(const ReqInviteMemberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqInviteMemberList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInviteMemberList::CopyFrom(const ReqInviteMemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInviteMemberList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqInviteMemberList::Swap(ReqInviteMemberList* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(ntype_, other->ntype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqInviteMemberList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqInviteMemberList_descriptor_;
  metadata.reflection = ReqInviteMemberList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetInviteMemberList::kNtypeFieldNumber;
const int RetInviteMemberList::kMemberlistFieldNumber;
#endif  // !_MSC_VER

RetInviteMemberList::RetInviteMemberList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetInviteMemberList::InitAsDefaultInstance() {
}

RetInviteMemberList::RetInviteMemberList(const RetInviteMemberList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetInviteMemberList::SharedCtor() {
  _cached_size_ = 0;
  ntype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetInviteMemberList::~RetInviteMemberList() {
  SharedDtor();
}

void RetInviteMemberList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetInviteMemberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetInviteMemberList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetInviteMemberList_descriptor_;
}

const RetInviteMemberList& RetInviteMemberList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetInviteMemberList* RetInviteMemberList::default_instance_ = NULL;

RetInviteMemberList* RetInviteMemberList::New() const {
  return new RetInviteMemberList;
}

void RetInviteMemberList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ntype_ = 0;
  }
  memberlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetInviteMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ntype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ntype_)));
          set_has_ntype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memberlist;
        break;
      }

      // repeated .MapInstanceProto.InviteMemberList memberlist = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_memberlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memberlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetInviteMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ntype = 1;
  if (has_ntype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ntype(), output);
  }

  // repeated .MapInstanceProto.InviteMemberList memberlist = 2;
  for (int i = 0; i < this->memberlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->memberlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetInviteMemberList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ntype = 1;
  if (has_ntype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ntype(), target);
  }

  // repeated .MapInstanceProto.InviteMemberList memberlist = 2;
  for (int i = 0; i < this->memberlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->memberlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetInviteMemberList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ntype = 1;
    if (has_ntype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ntype());
    }

  }
  // repeated .MapInstanceProto.InviteMemberList memberlist = 2;
  total_size += 1 * this->memberlist_size();
  for (int i = 0; i < this->memberlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->memberlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetInviteMemberList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetInviteMemberList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetInviteMemberList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetInviteMemberList::MergeFrom(const RetInviteMemberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  memberlist_.MergeFrom(from.memberlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ntype()) {
      set_ntype(from.ntype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetInviteMemberList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetInviteMemberList::CopyFrom(const RetInviteMemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetInviteMemberList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < memberlist_size(); i++) {
    if (!this->memberlist(i).IsInitialized()) return false;
  }
  return true;
}

void RetInviteMemberList::Swap(RetInviteMemberList* other) {
  if (other != this) {
    std::swap(ntype_, other->ntype_);
    memberlist_.Swap(&other->memberlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetInviteMemberList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetInviteMemberList_descriptor_;
  metadata.reflection = RetInviteMemberList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteMemberList::kCharIdFieldNumber;
const int InviteMemberList::kNameFieldNumber;
const int InviteMemberList::kLvFieldNumber;
const int InviteMemberList::kFightFieldNumber;
#endif  // !_MSC_VER

InviteMemberList::InviteMemberList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteMemberList::InitAsDefaultInstance() {
}

InviteMemberList::InviteMemberList(const InviteMemberList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteMemberList::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  fight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteMemberList::~InviteMemberList() {
  SharedDtor();
}

void InviteMemberList::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void InviteMemberList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteMemberList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteMemberList_descriptor_;
}

const InviteMemberList& InviteMemberList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

InviteMemberList* InviteMemberList::default_instance_ = NULL;

InviteMemberList* InviteMemberList::New() const {
  return new InviteMemberList;
}

void InviteMemberList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 0;
    fight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteMemberList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight;
        break;
      }

      // optional int32 fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteMemberList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // optional int32 fight = 4;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteMemberList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // optional int32 fight = 4;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteMemberList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 fight = 4;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteMemberList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteMemberList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteMemberList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteMemberList::MergeFrom(const InviteMemberList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteMemberList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteMemberList::CopyFrom(const InviteMemberList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteMemberList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteMemberList::Swap(InviteMemberList* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteMemberList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteMemberList_descriptor_;
  metadata.reflection = InviteMemberList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqInviteMember::kCharIdFieldNumber;
const int ReqInviteMember::kMapIdFieldNumber;
#endif  // !_MSC_VER

ReqInviteMember::ReqInviteMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqInviteMember::InitAsDefaultInstance() {
}

ReqInviteMember::ReqInviteMember(const ReqInviteMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqInviteMember::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqInviteMember::~ReqInviteMember() {
  SharedDtor();
}

void ReqInviteMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqInviteMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqInviteMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqInviteMember_descriptor_;
}

const ReqInviteMember& ReqInviteMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqInviteMember* ReqInviteMember::default_instance_ = NULL;

ReqInviteMember* ReqInviteMember::New() const {
  return new ReqInviteMember;
}

void ReqInviteMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqInviteMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapId;
        break;
      }

      // optional int32 mapId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqInviteMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int32 mapId = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqInviteMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int32 mapId = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqInviteMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 mapId = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInviteMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqInviteMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqInviteMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqInviteMember::MergeFrom(const ReqInviteMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqInviteMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInviteMember::CopyFrom(const ReqInviteMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInviteMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqInviteMember::Swap(ReqInviteMember* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqInviteMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqInviteMember_descriptor_;
  metadata.reflection = ReqInviteMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetInviteMember::kRetFieldNumber;
const int RetInviteMember::kCharIdFieldNumber;
#endif  // !_MSC_VER

RetInviteMember::RetInviteMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetInviteMember::InitAsDefaultInstance() {
}

RetInviteMember::RetInviteMember(const RetInviteMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetInviteMember::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetInviteMember::~RetInviteMember() {
  SharedDtor();
}

void RetInviteMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetInviteMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetInviteMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetInviteMember_descriptor_;
}

const RetInviteMember& RetInviteMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetInviteMember* RetInviteMember::default_instance_ = NULL;

RetInviteMember* RetInviteMember::New() const {
  return new RetInviteMember;
}

void RetInviteMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetInviteMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charId;
        break;
      }

      // optional int64 charId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetInviteMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 charId = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetInviteMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 charId = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetInviteMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 charId = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetInviteMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetInviteMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetInviteMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetInviteMember::MergeFrom(const RetInviteMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetInviteMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetInviteMember::CopyFrom(const RetInviteMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetInviteMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetInviteMember::Swap(RetInviteMember* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetInviteMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetInviteMember_descriptor_;
  metadata.reflection = RetInviteMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetInvitedMember::kTeamidFieldNumber;
const int RetInvitedMember::kMapidFieldNumber;
const int RetInvitedMember::kNameFieldNumber;
#endif  // !_MSC_VER

RetInvitedMember::RetInvitedMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetInvitedMember::InitAsDefaultInstance() {
}

RetInvitedMember::RetInvitedMember(const RetInvitedMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetInvitedMember::SharedCtor() {
  _cached_size_ = 0;
  teamid_ = GOOGLE_LONGLONG(0);
  mapid_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetInvitedMember::~RetInvitedMember() {
  SharedDtor();
}

void RetInvitedMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void RetInvitedMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetInvitedMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetInvitedMember_descriptor_;
}

const RetInvitedMember& RetInvitedMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

RetInvitedMember* RetInvitedMember::default_instance_ = NULL;

RetInvitedMember* RetInvitedMember::New() const {
  return new RetInvitedMember;
}

void RetInvitedMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamid_ = GOOGLE_LONGLONG(0);
    mapid_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetInvitedMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 teamid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetInvitedMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 teamid = 1;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->teamid(), output);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mapid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetInvitedMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 teamid = 1;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->teamid(), target);
  }

  // optional int32 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mapid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetInvitedMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 teamid = 1;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

    // optional int32 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetInvitedMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetInvitedMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetInvitedMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetInvitedMember::MergeFrom(const RetInvitedMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetInvitedMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetInvitedMember::CopyFrom(const RetInvitedMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetInvitedMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetInvitedMember::Swap(RetInvitedMember* other) {
  if (other != this) {
    std::swap(teamid_, other->teamid_);
    std::swap(mapid_, other->mapid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetInvitedMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetInvitedMember_descriptor_;
  metadata.reflection = RetInvitedMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckChallengeInfo::kLayerFieldNumber;
const int AckChallengeInfo::kMaxlayerFieldNumber;
const int AckChallengeInfo::kIssweepFieldNumber;
const int AckChallengeInfo::kSweeptimeFieldNumber;
const int AckChallengeInfo::kTotaltimeFieldNumber;
const int AckChallengeInfo::kResetFieldNumber;
#endif  // !_MSC_VER

AckChallengeInfo::AckChallengeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckChallengeInfo::InitAsDefaultInstance() {
}

AckChallengeInfo::AckChallengeInfo(const AckChallengeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckChallengeInfo::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0;
  maxlayer_ = 0;
  issweep_ = false;
  sweeptime_ = 0;
  totaltime_ = 0;
  reset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckChallengeInfo::~AckChallengeInfo() {
  SharedDtor();
}

void AckChallengeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckChallengeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckChallengeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckChallengeInfo_descriptor_;
}

const AckChallengeInfo& AckChallengeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

AckChallengeInfo* AckChallengeInfo::default_instance_ = NULL;

AckChallengeInfo* AckChallengeInfo::New() const {
  return new AckChallengeInfo;
}

void AckChallengeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layer_ = 0;
    maxlayer_ = 0;
    issweep_ = false;
    sweeptime_ = 0;
    totaltime_ = 0;
    reset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckChallengeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxlayer;
        break;
      }

      // optional int32 maxlayer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlayer_)));
          set_has_maxlayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_issweep;
        break;
      }

      // optional bool issweep = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_issweep:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &issweep_)));
          set_has_issweep();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sweeptime;
        break;
      }

      // optional int32 sweeptime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sweeptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sweeptime_)));
          set_has_sweeptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_totaltime;
        break;
      }

      // optional int32 totaltime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totaltime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totaltime_)));
          set_has_totaltime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reset;
        break;
      }

      // optional int32 reset = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckChallengeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layer(), output);
  }

  // optional int32 maxlayer = 2;
  if (has_maxlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxlayer(), output);
  }

  // optional bool issweep = 3;
  if (has_issweep()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->issweep(), output);
  }

  // optional int32 sweeptime = 4;
  if (has_sweeptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sweeptime(), output);
  }

  // optional int32 totaltime = 5;
  if (has_totaltime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totaltime(), output);
  }

  // optional int32 reset = 6;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckChallengeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layer(), target);
  }

  // optional int32 maxlayer = 2;
  if (has_maxlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxlayer(), target);
  }

  // optional bool issweep = 3;
  if (has_issweep()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->issweep(), target);
  }

  // optional int32 sweeptime = 4;
  if (has_sweeptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sweeptime(), target);
  }

  // optional int32 totaltime = 5;
  if (has_totaltime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totaltime(), target);
  }

  // optional int32 reset = 6;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckChallengeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional int32 maxlayer = 2;
    if (has_maxlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlayer());
    }

    // optional bool issweep = 3;
    if (has_issweep()) {
      total_size += 1 + 1;
    }

    // optional int32 sweeptime = 4;
    if (has_sweeptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sweeptime());
    }

    // optional int32 totaltime = 5;
    if (has_totaltime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totaltime());
    }

    // optional int32 reset = 6;
    if (has_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckChallengeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckChallengeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckChallengeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckChallengeInfo::MergeFrom(const AckChallengeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_maxlayer()) {
      set_maxlayer(from.maxlayer());
    }
    if (from.has_issweep()) {
      set_issweep(from.issweep());
    }
    if (from.has_sweeptime()) {
      set_sweeptime(from.sweeptime());
    }
    if (from.has_totaltime()) {
      set_totaltime(from.totaltime());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckChallengeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckChallengeInfo::CopyFrom(const AckChallengeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckChallengeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckChallengeInfo::Swap(AckChallengeInfo* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(maxlayer_, other->maxlayer_);
    std::swap(issweep_, other->issweep_);
    std::swap(sweeptime_, other->sweeptime_);
    std::swap(totaltime_, other->totaltime_);
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckChallengeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckChallengeInfo_descriptor_;
  metadata.reflection = AckChallengeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqLayerRank::kLayerFieldNumber;
#endif  // !_MSC_VER

ReqLayerRank::ReqLayerRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLayerRank::InitAsDefaultInstance() {
}

ReqLayerRank::ReqLayerRank(const ReqLayerRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLayerRank::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLayerRank::~ReqLayerRank() {
  SharedDtor();
}

void ReqLayerRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLayerRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLayerRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLayerRank_descriptor_;
}

const ReqLayerRank& ReqLayerRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqLayerRank* ReqLayerRank::default_instance_ = NULL;

ReqLayerRank* ReqLayerRank::New() const {
  return new ReqLayerRank;
}

void ReqLayerRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLayerRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLayerRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLayerRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLayerRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLayerRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLayerRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLayerRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLayerRank::MergeFrom(const ReqLayerRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLayerRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLayerRank::CopyFrom(const ReqLayerRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLayerRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqLayerRank::Swap(ReqLayerRank* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLayerRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLayerRank_descriptor_;
  metadata.reflection = ReqLayerRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckLayerRank::kLayerFieldNumber;
const int AckLayerRank::kFirstnameFieldNumber;
const int AckLayerRank::kFirstlevelFieldNumber;
const int AckLayerRank::kFirstfightFieldNumber;
const int AckLayerRank::kLastnameFieldNumber;
const int AckLayerRank::kLastlevelFieldNumber;
const int AckLayerRank::kLastfightFieldNumber;
const int AckLayerRank::kFamousnameFieldNumber;
const int AckLayerRank::kFamouslevelFieldNumber;
const int AckLayerRank::kFamousfightFieldNumber;
#endif  // !_MSC_VER

AckLayerRank::AckLayerRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckLayerRank::InitAsDefaultInstance() {
}

AckLayerRank::AckLayerRank(const AckLayerRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckLayerRank::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0;
  firstname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  firstlevel_ = 0;
  firstfight_ = 0;
  lastname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lastlevel_ = 0;
  lastfight_ = 0;
  famousname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  famouslevel_ = 0;
  famousfight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckLayerRank::~AckLayerRank() {
  SharedDtor();
}

void AckLayerRank::SharedDtor() {
  if (firstname_ != &::google::protobuf::internal::kEmptyString) {
    delete firstname_;
  }
  if (lastname_ != &::google::protobuf::internal::kEmptyString) {
    delete lastname_;
  }
  if (famousname_ != &::google::protobuf::internal::kEmptyString) {
    delete famousname_;
  }
  if (this != default_instance_) {
  }
}

void AckLayerRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckLayerRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckLayerRank_descriptor_;
}

const AckLayerRank& AckLayerRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

AckLayerRank* AckLayerRank::default_instance_ = NULL;

AckLayerRank* AckLayerRank::New() const {
  return new AckLayerRank;
}

void AckLayerRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layer_ = 0;
    if (has_firstname()) {
      if (firstname_ != &::google::protobuf::internal::kEmptyString) {
        firstname_->clear();
      }
    }
    firstlevel_ = 0;
    firstfight_ = 0;
    if (has_lastname()) {
      if (lastname_ != &::google::protobuf::internal::kEmptyString) {
        lastname_->clear();
      }
    }
    lastlevel_ = 0;
    lastfight_ = 0;
    if (has_famousname()) {
      if (famousname_ != &::google::protobuf::internal::kEmptyString) {
        famousname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    famouslevel_ = 0;
    famousfight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckLayerRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_firstname;
        break;
      }

      // optional bytes firstname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_firstname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_firstname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_firstlevel;
        break;
      }

      // optional int32 firstlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstlevel_)));
          set_has_firstlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_firstfight;
        break;
      }

      // optional int32 firstfight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstfight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firstfight_)));
          set_has_firstfight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_lastname;
        break;
      }

      // optional bytes lastname = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_lastname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastlevel;
        break;
      }

      // optional int32 lastlevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastlevel_)));
          set_has_lastlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastfight;
        break;
      }

      // optional int32 lastfight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastfight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lastfight_)));
          set_has_lastfight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_famousname;
        break;
      }

      // optional bytes famousname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_famousname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_famousname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_famouslevel;
        break;
      }

      // optional int32 famouslevel = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_famouslevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &famouslevel_)));
          set_has_famouslevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_famousfight;
        break;
      }

      // optional int32 famousfight = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_famousfight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &famousfight_)));
          set_has_famousfight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckLayerRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layer(), output);
  }

  // optional bytes firstname = 2;
  if (has_firstname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->firstname(), output);
  }

  // optional int32 firstlevel = 3;
  if (has_firstlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->firstlevel(), output);
  }

  // optional int32 firstfight = 4;
  if (has_firstfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->firstfight(), output);
  }

  // optional bytes lastname = 5;
  if (has_lastname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->lastname(), output);
  }

  // optional int32 lastlevel = 6;
  if (has_lastlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->lastlevel(), output);
  }

  // optional int32 lastfight = 7;
  if (has_lastfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lastfight(), output);
  }

  // optional bytes famousname = 8;
  if (has_famousname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      8, this->famousname(), output);
  }

  // optional int32 famouslevel = 9;
  if (has_famouslevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->famouslevel(), output);
  }

  // optional int32 famousfight = 10;
  if (has_famousfight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->famousfight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckLayerRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layer(), target);
  }

  // optional bytes firstname = 2;
  if (has_firstname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->firstname(), target);
  }

  // optional int32 firstlevel = 3;
  if (has_firstlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->firstlevel(), target);
  }

  // optional int32 firstfight = 4;
  if (has_firstfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->firstfight(), target);
  }

  // optional bytes lastname = 5;
  if (has_lastname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->lastname(), target);
  }

  // optional int32 lastlevel = 6;
  if (has_lastlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->lastlevel(), target);
  }

  // optional int32 lastfight = 7;
  if (has_lastfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lastfight(), target);
  }

  // optional bytes famousname = 8;
  if (has_famousname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        8, this->famousname(), target);
  }

  // optional int32 famouslevel = 9;
  if (has_famouslevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->famouslevel(), target);
  }

  // optional int32 famousfight = 10;
  if (has_famousfight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->famousfight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckLayerRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional bytes firstname = 2;
    if (has_firstname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->firstname());
    }

    // optional int32 firstlevel = 3;
    if (has_firstlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstlevel());
    }

    // optional int32 firstfight = 4;
    if (has_firstfight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firstfight());
    }

    // optional bytes lastname = 5;
    if (has_lastname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->lastname());
    }

    // optional int32 lastlevel = 6;
    if (has_lastlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastlevel());
    }

    // optional int32 lastfight = 7;
    if (has_lastfight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lastfight());
    }

    // optional bytes famousname = 8;
    if (has_famousname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->famousname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 famouslevel = 9;
    if (has_famouslevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->famouslevel());
    }

    // optional int32 famousfight = 10;
    if (has_famousfight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->famousfight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckLayerRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckLayerRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckLayerRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckLayerRank::MergeFrom(const AckLayerRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_firstname()) {
      set_firstname(from.firstname());
    }
    if (from.has_firstlevel()) {
      set_firstlevel(from.firstlevel());
    }
    if (from.has_firstfight()) {
      set_firstfight(from.firstfight());
    }
    if (from.has_lastname()) {
      set_lastname(from.lastname());
    }
    if (from.has_lastlevel()) {
      set_lastlevel(from.lastlevel());
    }
    if (from.has_lastfight()) {
      set_lastfight(from.lastfight());
    }
    if (from.has_famousname()) {
      set_famousname(from.famousname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_famouslevel()) {
      set_famouslevel(from.famouslevel());
    }
    if (from.has_famousfight()) {
      set_famousfight(from.famousfight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckLayerRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckLayerRank::CopyFrom(const AckLayerRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckLayerRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckLayerRank::Swap(AckLayerRank* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(firstname_, other->firstname_);
    std::swap(firstlevel_, other->firstlevel_);
    std::swap(firstfight_, other->firstfight_);
    std::swap(lastname_, other->lastname_);
    std::swap(lastlevel_, other->lastlevel_);
    std::swap(lastfight_, other->lastfight_);
    std::swap(famousname_, other->famousname_);
    std::swap(famouslevel_, other->famouslevel_);
    std::swap(famousfight_, other->famousfight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckLayerRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckLayerRank_descriptor_;
  metadata.reflection = AckLayerRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckSweep::kCodeFieldNumber;
const int AckSweep::kElapsedTimeFieldNumber;
#endif  // !_MSC_VER

AckSweep::AckSweep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckSweep::InitAsDefaultInstance() {
}

AckSweep::AckSweep(const AckSweep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckSweep::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  elapsedtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckSweep::~AckSweep() {
  SharedDtor();
}

void AckSweep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckSweep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckSweep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckSweep_descriptor_;
}

const AckSweep& AckSweep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

AckSweep* AckSweep::default_instance_ = NULL;

AckSweep* AckSweep::New() const {
  return new AckSweep;
}

void AckSweep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    elapsedtime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckSweep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_elapsedTime;
        break;
      }

      // optional int32 elapsedTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_elapsedTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &elapsedtime_)));
          set_has_elapsedtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckSweep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional int32 elapsedTime = 2;
  if (has_elapsedtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->elapsedtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckSweep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional int32 elapsedTime = 2;
  if (has_elapsedtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->elapsedtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckSweep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int32 elapsedTime = 2;
    if (has_elapsedtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->elapsedtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckSweep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckSweep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckSweep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckSweep::MergeFrom(const AckSweep& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_elapsedtime()) {
      set_elapsedtime(from.elapsedtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckSweep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckSweep::CopyFrom(const AckSweep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckSweep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckSweep::Swap(AckSweep* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(elapsedtime_, other->elapsedtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckSweep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckSweep_descriptor_;
  metadata.reflection = AckSweep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ACkEndSweep::kCodeFieldNumber;
const int ACkEndSweep::kStartlayerFieldNumber;
const int ACkEndSweep::kEndlayerFieldNumber;
const int ACkEndSweep::kPrizeFieldNumber;
#endif  // !_MSC_VER

ACkEndSweep::ACkEndSweep()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ACkEndSweep::InitAsDefaultInstance() {
}

ACkEndSweep::ACkEndSweep(const ACkEndSweep& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ACkEndSweep::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  startlayer_ = 0;
  endlayer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ACkEndSweep::~ACkEndSweep() {
  SharedDtor();
}

void ACkEndSweep::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ACkEndSweep::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ACkEndSweep::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ACkEndSweep_descriptor_;
}

const ACkEndSweep& ACkEndSweep::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ACkEndSweep* ACkEndSweep::default_instance_ = NULL;

ACkEndSweep* ACkEndSweep::New() const {
  return new ACkEndSweep;
}

void ACkEndSweep::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    startlayer_ = 0;
    endlayer_ = 0;
  }
  prize_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ACkEndSweep::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_startlayer;
        break;
      }

      // optional int32 startlayer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_startlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &startlayer_)));
          set_has_startlayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endlayer;
        break;
      }

      // optional int32 endlayer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endlayer_)));
          set_has_endlayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prize;
        break;
      }

      // repeated .MapInstanceProto.PrizeItem prize = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prize:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prize()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_prize;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ACkEndSweep::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional int32 startlayer = 2;
  if (has_startlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->startlayer(), output);
  }

  // optional int32 endlayer = 3;
  if (has_endlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->endlayer(), output);
  }

  // repeated .MapInstanceProto.PrizeItem prize = 4;
  for (int i = 0; i < this->prize_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->prize(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ACkEndSweep::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional int32 startlayer = 2;
  if (has_startlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->startlayer(), target);
  }

  // optional int32 endlayer = 3;
  if (has_endlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->endlayer(), target);
  }

  // repeated .MapInstanceProto.PrizeItem prize = 4;
  for (int i = 0; i < this->prize_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->prize(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ACkEndSweep::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int32 startlayer = 2;
    if (has_startlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->startlayer());
    }

    // optional int32 endlayer = 3;
    if (has_endlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endlayer());
    }

  }
  // repeated .MapInstanceProto.PrizeItem prize = 4;
  total_size += 1 * this->prize_size();
  for (int i = 0; i < this->prize_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prize(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ACkEndSweep::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ACkEndSweep* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ACkEndSweep*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ACkEndSweep::MergeFrom(const ACkEndSweep& from) {
  GOOGLE_CHECK_NE(&from, this);
  prize_.MergeFrom(from.prize_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_startlayer()) {
      set_startlayer(from.startlayer());
    }
    if (from.has_endlayer()) {
      set_endlayer(from.endlayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ACkEndSweep::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ACkEndSweep::CopyFrom(const ACkEndSweep& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ACkEndSweep::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < prize_size(); i++) {
    if (!this->prize(i).IsInitialized()) return false;
  }
  return true;
}

void ACkEndSweep::Swap(ACkEndSweep* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(startlayer_, other->startlayer_);
    std::swap(endlayer_, other->endlayer_);
    prize_.Swap(&other->prize_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ACkEndSweep::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ACkEndSweep_descriptor_;
  metadata.reflection = ACkEndSweep_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqExchange::kIdFieldNumber;
const int ReqExchange::kNumFieldNumber;
#endif  // !_MSC_VER

ReqExchange::ReqExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqExchange::InitAsDefaultInstance() {
}

ReqExchange::ReqExchange(const ReqExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqExchange::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqExchange::~ReqExchange() {
  SharedDtor();
}

void ReqExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqExchange_descriptor_;
}

const ReqExchange& ReqExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ReqExchange* ReqExchange::default_instance_ = NULL;

ReqExchange* ReqExchange::New() const {
  return new ReqExchange;
}

void ReqExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqExchange::MergeFrom(const ReqExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqExchange::CopyFrom(const ReqExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqExchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqExchange::Swap(ReqExchange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqExchange_descriptor_;
  metadata.reflection = ReqExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckExchange::kIdFieldNumber;
const int AckExchange::kCodeFieldNumber;
#endif  // !_MSC_VER

AckExchange::AckExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckExchange::InitAsDefaultInstance() {
}

AckExchange::AckExchange(const AckExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckExchange::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckExchange::~AckExchange() {
  SharedDtor();
}

void AckExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckExchange_descriptor_;
}

const AckExchange& AckExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

AckExchange* AckExchange::default_instance_ = NULL;

AckExchange* AckExchange::New() const {
  return new AckExchange;
}

void AckExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    code_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckExchange::MergeFrom(const AckExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckExchange::CopyFrom(const AckExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckExchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckExchange::Swap(AckExchange* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(code_, other->code_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckExchange_descriptor_;
  metadata.reflection = AckExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrizeItem::kIdFieldNumber;
const int PrizeItem::kNumFieldNumber;
#endif  // !_MSC_VER

PrizeItem::PrizeItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrizeItem::InitAsDefaultInstance() {
}

PrizeItem::PrizeItem(const PrizeItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrizeItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrizeItem::~PrizeItem() {
  SharedDtor();
}

void PrizeItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrizeItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrizeItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrizeItem_descriptor_;
}

const PrizeItem& PrizeItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

PrizeItem* PrizeItem::default_instance_ = NULL;

PrizeItem* PrizeItem::New() const {
  return new PrizeItem;
}

void PrizeItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrizeItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrizeItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrizeItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrizeItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrizeItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrizeItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrizeItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrizeItem::MergeFrom(const PrizeItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrizeItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrizeItem::CopyFrom(const PrizeItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrizeItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PrizeItem::Swap(PrizeItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrizeItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrizeItem_descriptor_;
  metadata.reflection = PrizeItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassChallenge::kCharidFieldNumber;
const int PassChallenge::kNameFieldNumber;
const int PassChallenge::kLayerFieldNumber;
const int PassChallenge::kFightFieldNumber;
const int PassChallenge::kLevelFieldNumber;
const int PassChallenge::kVipFieldNumber;
#endif  // !_MSC_VER

PassChallenge::PassChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassChallenge::InitAsDefaultInstance() {
}

PassChallenge::PassChallenge(const PassChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassChallenge::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  layer_ = 0;
  fight_ = 0;
  level_ = 0;
  vip_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassChallenge::~PassChallenge() {
  SharedDtor();
}

void PassChallenge::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PassChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassChallenge_descriptor_;
}

const PassChallenge& PassChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

PassChallenge* PassChallenge::default_instance_ = NULL;

PassChallenge* PassChallenge::New() const {
  return new PassChallenge;
}

void PassChallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    layer_ = 0;
    fight_ = 0;
    level_ = 0;
    vip_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_layer;
        break;
      }

      // optional int32 layer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fight;
        break;
      }

      // optional int32 fight = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_vip;
        break;
      }

      // optional int32 vip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 layer = 3;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->layer(), output);
  }

  // optional int32 fight = 4;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fight(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 vip = 6;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->vip(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 layer = 3;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->layer(), target);
  }

  // optional int32 fight = 4;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fight(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int32 vip = 6;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->vip(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 layer = 3;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional int32 fight = 4;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 vip = 6;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassChallenge::MergeFrom(const PassChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassChallenge::CopyFrom(const PassChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassChallenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PassChallenge::Swap(PassChallenge* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(layer_, other->layer_);
    std::swap(fight_, other->fight_);
    std::swap(level_, other->level_);
    std::swap(vip_, other->vip_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassChallenge_descriptor_;
  metadata.reflection = PassChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GatherBox::kKeyFieldNumber;
#endif  // !_MSC_VER

GatherBox::GatherBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GatherBox::InitAsDefaultInstance() {
}

GatherBox::GatherBox(const GatherBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GatherBox::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GatherBox::~GatherBox() {
  SharedDtor();
}

void GatherBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GatherBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GatherBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GatherBox_descriptor_;
}

const GatherBox& GatherBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

GatherBox* GatherBox::default_instance_ = NULL;

GatherBox* GatherBox::New() const {
  return new GatherBox;
}

void GatherBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GatherBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GatherBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GatherBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GatherBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GatherBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GatherBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GatherBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GatherBox::MergeFrom(const GatherBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GatherBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GatherBox::CopyFrom(const GatherBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GatherBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GatherBox::Swap(GatherBox* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GatherBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GatherBox_descriptor_;
  metadata.reflection = GatherBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGatherBox::kKeyFieldNumber;
const int AckGatherBox::kCodeFieldNumber;
const int AckGatherBox::kItemsFieldNumber;
#endif  // !_MSC_VER

AckGatherBox::AckGatherBox()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGatherBox::InitAsDefaultInstance() {
}

AckGatherBox::AckGatherBox(const AckGatherBox& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGatherBox::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  code_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGatherBox::~AckGatherBox() {
  SharedDtor();
}

void AckGatherBox::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGatherBox::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGatherBox::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGatherBox_descriptor_;
}

const AckGatherBox& AckGatherBox::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

AckGatherBox* AckGatherBox::default_instance_ = NULL;

AckGatherBox* AckGatherBox::New() const {
  return new AckGatherBox;
}

void AckGatherBox::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    code_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGatherBox::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_code;
        break;
      }

      // optional int32 code = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_code:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .MapInstanceProto.PrizeItem items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGatherBox::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional int32 code = 2;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->code(), output);
  }

  // repeated .MapInstanceProto.PrizeItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGatherBox::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional int32 code = 2;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->code(), target);
  }

  // repeated .MapInstanceProto.PrizeItem items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGatherBox::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 code = 2;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

  }
  // repeated .MapInstanceProto.PrizeItem items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGatherBox::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGatherBox* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGatherBox*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGatherBox::MergeFrom(const AckGatherBox& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_code()) {
      set_code(from.code());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGatherBox::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGatherBox::CopyFrom(const AckGatherBox& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGatherBox::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void AckGatherBox::Swap(AckGatherBox* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(code_, other->code_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGatherBox::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGatherBox_descriptor_;
  metadata.reflection = AckGatherBox_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdvancedInstance::kListFieldNumber;
#endif  // !_MSC_VER

AdvancedInstance::AdvancedInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdvancedInstance::InitAsDefaultInstance() {
}

AdvancedInstance::AdvancedInstance(const AdvancedInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdvancedInstance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdvancedInstance::~AdvancedInstance() {
  SharedDtor();
}

void AdvancedInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdvancedInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvancedInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvancedInstance_descriptor_;
}

const AdvancedInstance& AdvancedInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

AdvancedInstance* AdvancedInstance::default_instance_ = NULL;

AdvancedInstance* AdvancedInstance::New() const {
  return new AdvancedInstance;
}

void AdvancedInstance::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdvancedInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MapInstanceProto.InstanceAdvancedList list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdvancedInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MapInstanceProto.InstanceAdvancedList list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdvancedInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MapInstanceProto.InstanceAdvancedList list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdvancedInstance::ByteSize() const {
  int total_size = 0;

  // repeated .MapInstanceProto.InstanceAdvancedList list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvancedInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdvancedInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdvancedInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdvancedInstance::MergeFrom(const AdvancedInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdvancedInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvancedInstance::CopyFrom(const AdvancedInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvancedInstance::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void AdvancedInstance::Swap(AdvancedInstance* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdvancedInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvancedInstance_descriptor_;
  metadata.reflection = AdvancedInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceAdvancedList::kMapIdFieldNumber;
const int InstanceAdvancedList::kPassFieldNumber;
const int InstanceAdvancedList::kNumFieldNumber;
const int InstanceAdvancedList::kTimeFieldNumber;
const int InstanceAdvancedList::kResetFieldNumber;
#endif  // !_MSC_VER

InstanceAdvancedList::InstanceAdvancedList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceAdvancedList::InitAsDefaultInstance() {
}

InstanceAdvancedList::InstanceAdvancedList(const InstanceAdvancedList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceAdvancedList::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pass_ = 0;
  num_ = 0;
  time_ = 0;
  reset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceAdvancedList::~InstanceAdvancedList() {
  SharedDtor();
}

void InstanceAdvancedList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceAdvancedList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceAdvancedList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceAdvancedList_descriptor_;
}

const InstanceAdvancedList& InstanceAdvancedList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

InstanceAdvancedList* InstanceAdvancedList::default_instance_ = NULL;

InstanceAdvancedList* InstanceAdvancedList::New() const {
  return new InstanceAdvancedList;
}

void InstanceAdvancedList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    pass_ = 0;
    num_ = 0;
    time_ = 0;
    reset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceAdvancedList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }

      // optional int32 pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reset;
        break;
      }

      // optional int32 reset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceAdvancedList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  // optional int32 reset = 5;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceAdvancedList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  // optional int32 reset = 5;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceAdvancedList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 reset = 5;
    if (has_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceAdvancedList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceAdvancedList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceAdvancedList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceAdvancedList::MergeFrom(const InstanceAdvancedList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceAdvancedList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceAdvancedList::CopyFrom(const InstanceAdvancedList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceAdvancedList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstanceAdvancedList::Swap(InstanceAdvancedList* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pass_, other->pass_);
    std::swap(num_, other->num_);
    std::swap(time_, other->time_);
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceAdvancedList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceAdvancedList_descriptor_;
  metadata.reflection = InstanceAdvancedList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqTeamChanceReady::kMapidFieldNumber;
#endif  // !_MSC_VER

ClientReqTeamChanceReady::ClientReqTeamChanceReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqTeamChanceReady::InitAsDefaultInstance() {
}

ClientReqTeamChanceReady::ClientReqTeamChanceReady(const ClientReqTeamChanceReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqTeamChanceReady::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqTeamChanceReady::~ClientReqTeamChanceReady() {
  SharedDtor();
}

void ClientReqTeamChanceReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqTeamChanceReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqTeamChanceReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqTeamChanceReady_descriptor_;
}

const ClientReqTeamChanceReady& ClientReqTeamChanceReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ClientReqTeamChanceReady* ClientReqTeamChanceReady::default_instance_ = NULL;

ClientReqTeamChanceReady* ClientReqTeamChanceReady::New() const {
  return new ClientReqTeamChanceReady;
}

void ClientReqTeamChanceReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqTeamChanceReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqTeamChanceReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqTeamChanceReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqTeamChanceReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqTeamChanceReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqTeamChanceReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqTeamChanceReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqTeamChanceReady::MergeFrom(const ClientReqTeamChanceReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqTeamChanceReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqTeamChanceReady::CopyFrom(const ClientReqTeamChanceReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqTeamChanceReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqTeamChanceReady::Swap(ClientReqTeamChanceReady* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqTeamChanceReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqTeamChanceReady_descriptor_;
  metadata.reflection = ClientReqTeamChanceReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientReqTeamChanceReady::kRetFieldNumber;
#endif  // !_MSC_VER

WSToClientReqTeamChanceReady::WSToClientReqTeamChanceReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientReqTeamChanceReady::InitAsDefaultInstance() {
}

WSToClientReqTeamChanceReady::WSToClientReqTeamChanceReady(const WSToClientReqTeamChanceReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientReqTeamChanceReady::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientReqTeamChanceReady::~WSToClientReqTeamChanceReady() {
  SharedDtor();
}

void WSToClientReqTeamChanceReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientReqTeamChanceReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientReqTeamChanceReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientReqTeamChanceReady_descriptor_;
}

const WSToClientReqTeamChanceReady& WSToClientReqTeamChanceReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClientReqTeamChanceReady* WSToClientReqTeamChanceReady::default_instance_ = NULL;

WSToClientReqTeamChanceReady* WSToClientReqTeamChanceReady::New() const {
  return new WSToClientReqTeamChanceReady;
}

void WSToClientReqTeamChanceReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientReqTeamChanceReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientReqTeamChanceReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientReqTeamChanceReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientReqTeamChanceReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientReqTeamChanceReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientReqTeamChanceReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientReqTeamChanceReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientReqTeamChanceReady::MergeFrom(const WSToClientReqTeamChanceReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientReqTeamChanceReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientReqTeamChanceReady::CopyFrom(const WSToClientReqTeamChanceReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientReqTeamChanceReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientReqTeamChanceReady::Swap(WSToClientReqTeamChanceReady* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientReqTeamChanceReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientReqTeamChanceReady_descriptor_;
  metadata.reflection = WSToClientReqTeamChanceReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientSimChanceReady::kCharidFieldNumber;
#endif  // !_MSC_VER

WSToClientSimChanceReady::WSToClientSimChanceReady()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientSimChanceReady::InitAsDefaultInstance() {
}

WSToClientSimChanceReady::WSToClientSimChanceReady(const WSToClientSimChanceReady& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientSimChanceReady::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientSimChanceReady::~WSToClientSimChanceReady() {
  SharedDtor();
}

void WSToClientSimChanceReady::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientSimChanceReady::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientSimChanceReady::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientSimChanceReady_descriptor_;
}

const WSToClientSimChanceReady& WSToClientSimChanceReady::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

WSToClientSimChanceReady* WSToClientSimChanceReady::default_instance_ = NULL;

WSToClientSimChanceReady* WSToClientSimChanceReady::New() const {
  return new WSToClientSimChanceReady;
}

void WSToClientSimChanceReady::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientSimChanceReady::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientSimChanceReady::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientSimChanceReady::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientSimChanceReady::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientSimChanceReady::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientSimChanceReady* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientSimChanceReady*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientSimChanceReady::MergeFrom(const WSToClientSimChanceReady& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientSimChanceReady::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientSimChanceReady::CopyFrom(const WSToClientSimChanceReady& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientSimChanceReady::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientSimChanceReady::Swap(WSToClientSimChanceReady* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientSimChanceReady::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientSimChanceReady_descriptor_;
  metadata.reflection = WSToClientSimChanceReady_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonInstanceInfo::kNumFieldNumber;
const int CommonInstanceInfo::kResetFieldNumber;
const int CommonInstanceInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

CommonInstanceInfo::CommonInstanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonInstanceInfo::InitAsDefaultInstance() {
}

CommonInstanceInfo::CommonInstanceInfo(const CommonInstanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonInstanceInfo::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  reset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonInstanceInfo::~CommonInstanceInfo() {
  SharedDtor();
}

void CommonInstanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonInstanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonInstanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonInstanceInfo_descriptor_;
}

const CommonInstanceInfo& CommonInstanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

CommonInstanceInfo* CommonInstanceInfo::default_instance_ = NULL;

CommonInstanceInfo* CommonInstanceInfo::New() const {
  return new CommonInstanceInfo;
}

void CommonInstanceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    reset_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonInstanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reset;
        break;
      }

      // optional int32 reset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .MapInstanceProto.CommonInstanceInfoList info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonInstanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 reset = 2;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reset(), output);
  }

  // repeated .MapInstanceProto.CommonInstanceInfoList info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonInstanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 reset = 2;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reset(), target);
  }

  // repeated .MapInstanceProto.CommonInstanceInfoList info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonInstanceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 reset = 2;
    if (has_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset());
    }

  }
  // repeated .MapInstanceProto.CommonInstanceInfoList info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonInstanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonInstanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonInstanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonInstanceInfo::MergeFrom(const CommonInstanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonInstanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonInstanceInfo::CopyFrom(const CommonInstanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonInstanceInfo::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void CommonInstanceInfo::Swap(CommonInstanceInfo* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(reset_, other->reset_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonInstanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonInstanceInfo_descriptor_;
  metadata.reflection = CommonInstanceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CommonInstanceInfoList::kMapIdFieldNumber;
const int CommonInstanceInfoList::kPassFieldNumber;
#endif  // !_MSC_VER

CommonInstanceInfoList::CommonInstanceInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CommonInstanceInfoList::InitAsDefaultInstance() {
}

CommonInstanceInfoList::CommonInstanceInfoList(const CommonInstanceInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CommonInstanceInfoList::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CommonInstanceInfoList::~CommonInstanceInfoList() {
  SharedDtor();
}

void CommonInstanceInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CommonInstanceInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CommonInstanceInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CommonInstanceInfoList_descriptor_;
}

const CommonInstanceInfoList& CommonInstanceInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

CommonInstanceInfoList* CommonInstanceInfoList::default_instance_ = NULL;

CommonInstanceInfoList* CommonInstanceInfoList::New() const {
  return new CommonInstanceInfoList;
}

void CommonInstanceInfoList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    pass_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CommonInstanceInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }

      // optional int32 pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CommonInstanceInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CommonInstanceInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CommonInstanceInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CommonInstanceInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CommonInstanceInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CommonInstanceInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CommonInstanceInfoList::MergeFrom(const CommonInstanceInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CommonInstanceInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CommonInstanceInfoList::CopyFrom(const CommonInstanceInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CommonInstanceInfoList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CommonInstanceInfoList::Swap(CommonInstanceInfoList* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pass_, other->pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CommonInstanceInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CommonInstanceInfoList_descriptor_;
  metadata.reflection = CommonInstanceInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipInstance::kInfoFieldNumber;
#endif  // !_MSC_VER

VipInstance::VipInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipInstance::InitAsDefaultInstance() {
}

VipInstance::VipInstance(const VipInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipInstance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipInstance::~VipInstance() {
  SharedDtor();
}

void VipInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipInstance_descriptor_;
}

const VipInstance& VipInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

VipInstance* VipInstance::default_instance_ = NULL;

VipInstance* VipInstance::New() const {
  return new VipInstance;
}

void VipInstance::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MapInstanceProto.VipInstanceList info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MapInstanceProto.VipInstanceList info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MapInstanceProto.VipInstanceList info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipInstance::ByteSize() const {
  int total_size = 0;

  // repeated .MapInstanceProto.VipInstanceList info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipInstance::MergeFrom(const VipInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipInstance::CopyFrom(const VipInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipInstance::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void VipInstance::Swap(VipInstance* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipInstance_descriptor_;
  metadata.reflection = VipInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int VipInstanceList::kMapIdFieldNumber;
const int VipInstanceList::kPassFieldNumber;
const int VipInstanceList::kNumFieldNumber;
const int VipInstanceList::kTimeFieldNumber;
#endif  // !_MSC_VER

VipInstanceList::VipInstanceList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void VipInstanceList::InitAsDefaultInstance() {
}

VipInstanceList::VipInstanceList(const VipInstanceList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void VipInstanceList::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pass_ = 0;
  num_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

VipInstanceList::~VipInstanceList() {
  SharedDtor();
}

void VipInstanceList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void VipInstanceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* VipInstanceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return VipInstanceList_descriptor_;
}

const VipInstanceList& VipInstanceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

VipInstanceList* VipInstanceList::default_instance_ = NULL;

VipInstanceList* VipInstanceList::New() const {
  return new VipInstanceList;
}

void VipInstanceList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    pass_ = 0;
    num_ = 0;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool VipInstanceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }

      // optional int32 pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void VipInstanceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* VipInstanceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int VipInstanceList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void VipInstanceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const VipInstanceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const VipInstanceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void VipInstanceList::MergeFrom(const VipInstanceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void VipInstanceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void VipInstanceList::CopyFrom(const VipInstanceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool VipInstanceList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void VipInstanceList::Swap(VipInstanceList* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pass_, other->pass_);
    std::swap(num_, other->num_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata VipInstanceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = VipInstanceList_descriptor_;
  metadata.reflection = VipInstanceList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpInstanceInfo::kNumFieldNumber;
const int ExpInstanceInfo::kResetFieldNumber;
const int ExpInstanceInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

ExpInstanceInfo::ExpInstanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpInstanceInfo::InitAsDefaultInstance() {
}

ExpInstanceInfo::ExpInstanceInfo(const ExpInstanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpInstanceInfo::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  reset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpInstanceInfo::~ExpInstanceInfo() {
  SharedDtor();
}

void ExpInstanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpInstanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpInstanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpInstanceInfo_descriptor_;
}

const ExpInstanceInfo& ExpInstanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ExpInstanceInfo* ExpInstanceInfo::default_instance_ = NULL;

ExpInstanceInfo* ExpInstanceInfo::New() const {
  return new ExpInstanceInfo;
}

void ExpInstanceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    reset_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpInstanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reset;
        break;
      }

      // optional int32 reset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .MapInstanceProto.ExpInstanceInfoList info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpInstanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 reset = 2;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reset(), output);
  }

  // repeated .MapInstanceProto.ExpInstanceInfoList info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpInstanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 reset = 2;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reset(), target);
  }

  // repeated .MapInstanceProto.ExpInstanceInfoList info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpInstanceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 reset = 2;
    if (has_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset());
    }

  }
  // repeated .MapInstanceProto.ExpInstanceInfoList info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpInstanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpInstanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpInstanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpInstanceInfo::MergeFrom(const ExpInstanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpInstanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpInstanceInfo::CopyFrom(const ExpInstanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpInstanceInfo::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void ExpInstanceInfo::Swap(ExpInstanceInfo* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(reset_, other->reset_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpInstanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpInstanceInfo_descriptor_;
  metadata.reflection = ExpInstanceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ExpInstanceInfoList::kMapIdFieldNumber;
const int ExpInstanceInfoList::kPassFieldNumber;
#endif  // !_MSC_VER

ExpInstanceInfoList::ExpInstanceInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ExpInstanceInfoList::InitAsDefaultInstance() {
}

ExpInstanceInfoList::ExpInstanceInfoList(const ExpInstanceInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ExpInstanceInfoList::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ExpInstanceInfoList::~ExpInstanceInfoList() {
  SharedDtor();
}

void ExpInstanceInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ExpInstanceInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ExpInstanceInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ExpInstanceInfoList_descriptor_;
}

const ExpInstanceInfoList& ExpInstanceInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

ExpInstanceInfoList* ExpInstanceInfoList::default_instance_ = NULL;

ExpInstanceInfoList* ExpInstanceInfoList::New() const {
  return new ExpInstanceInfoList;
}

void ExpInstanceInfoList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    pass_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ExpInstanceInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }

      // optional int32 pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ExpInstanceInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ExpInstanceInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ExpInstanceInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ExpInstanceInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ExpInstanceInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ExpInstanceInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ExpInstanceInfoList::MergeFrom(const ExpInstanceInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ExpInstanceInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ExpInstanceInfoList::CopyFrom(const ExpInstanceInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ExpInstanceInfoList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ExpInstanceInfoList::Swap(ExpInstanceInfoList* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pass_, other->pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ExpInstanceInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ExpInstanceInfoList_descriptor_;
  metadata.reflection = ExpInstanceInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyInstanceInfo::kNumFieldNumber;
const int MoneyInstanceInfo::kResetFieldNumber;
const int MoneyInstanceInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

MoneyInstanceInfo::MoneyInstanceInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyInstanceInfo::InitAsDefaultInstance() {
}

MoneyInstanceInfo::MoneyInstanceInfo(const MoneyInstanceInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyInstanceInfo::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0;
  reset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyInstanceInfo::~MoneyInstanceInfo() {
  SharedDtor();
}

void MoneyInstanceInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneyInstanceInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyInstanceInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyInstanceInfo_descriptor_;
}

const MoneyInstanceInfo& MoneyInstanceInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

MoneyInstanceInfo* MoneyInstanceInfo::default_instance_ = NULL;

MoneyInstanceInfo* MoneyInstanceInfo::New() const {
  return new MoneyInstanceInfo;
}

void MoneyInstanceInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0;
    reset_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyInstanceInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reset;
        break;
      }

      // optional int32 reset = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .MapInstanceProto.MoneyInstanceInfoList info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyInstanceInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->num(), output);
  }

  // optional int32 reset = 2;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reset(), output);
  }

  // repeated .MapInstanceProto.MoneyInstanceInfoList info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyInstanceInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->num(), target);
  }

  // optional int32 reset = 2;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reset(), target);
  }

  // repeated .MapInstanceProto.MoneyInstanceInfoList info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyInstanceInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 reset = 2;
    if (has_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset());
    }

  }
  // repeated .MapInstanceProto.MoneyInstanceInfoList info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyInstanceInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyInstanceInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyInstanceInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyInstanceInfo::MergeFrom(const MoneyInstanceInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyInstanceInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyInstanceInfo::CopyFrom(const MoneyInstanceInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyInstanceInfo::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void MoneyInstanceInfo::Swap(MoneyInstanceInfo* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(reset_, other->reset_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyInstanceInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyInstanceInfo_descriptor_;
  metadata.reflection = MoneyInstanceInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyInstanceInfoList::kMapIdFieldNumber;
const int MoneyInstanceInfoList::kPassFieldNumber;
#endif  // !_MSC_VER

MoneyInstanceInfoList::MoneyInstanceInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyInstanceInfoList::InitAsDefaultInstance() {
}

MoneyInstanceInfoList::MoneyInstanceInfoList(const MoneyInstanceInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyInstanceInfoList::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyInstanceInfoList::~MoneyInstanceInfoList() {
  SharedDtor();
}

void MoneyInstanceInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneyInstanceInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyInstanceInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyInstanceInfoList_descriptor_;
}

const MoneyInstanceInfoList& MoneyInstanceInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMapInstanceProto_2eproto();
  return *default_instance_;
}

MoneyInstanceInfoList* MoneyInstanceInfoList::default_instance_ = NULL;

MoneyInstanceInfoList* MoneyInstanceInfoList::New() const {
  return new MoneyInstanceInfoList;
}

void MoneyInstanceInfoList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    pass_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyInstanceInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }

      // optional int32 pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyInstanceInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyInstanceInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyInstanceInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyInstanceInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyInstanceInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyInstanceInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyInstanceInfoList::MergeFrom(const MoneyInstanceInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyInstanceInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyInstanceInfoList::CopyFrom(const MoneyInstanceInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyInstanceInfoList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MoneyInstanceInfoList::Swap(MoneyInstanceInfoList* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pass_, other->pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyInstanceInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyInstanceInfoList_descriptor_;
  metadata.reflection = MoneyInstanceInfoList_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MapInstanceProto

// @@protoc_insertion_point(global_scope)
