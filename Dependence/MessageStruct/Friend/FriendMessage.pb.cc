// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Friend/FriendMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Friend/FriendMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Friend {

namespace {

const ::google::protobuf::Descriptor* ClientReqFindFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqFindFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* DeleteFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DeleteFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateDeleteFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateDeleteFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* BlessFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BlessFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqBlessFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqBlessFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynOnlineFrined_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynOnlineFrined_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskBlessFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskBlessFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTReqWSOpenFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTReqWSOpenFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTReqWSFindFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTReqWSFindFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTReqWSAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTReqWSAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTReqWSDeleteFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTReqWSDeleteFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSTOGTSynOnlineFrined_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSTOGTSynOnlineFrined_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSTOGTFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSTOGTFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSTOGTBlessFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSTOGTBlessFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTReqWSBlessFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTReqWSBlessFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSTOGTAskBlessFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSTOGTAskBlessFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddPlayerHarted_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddPlayerHarted_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskAttacked_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskAttacked_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqRecommendFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqRecommendFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSsendGMGainExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSsendGMGainExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* AddFriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AddFriendList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskAddFriendList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskAddFriendList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendRecommendation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendRecommendation_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerReturnInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerReturnInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendReturnError_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendReturnError_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqReplyAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqReplyAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckReqReplyAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqReplyAddFriend_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoticeAddFriend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoticeAddFriend_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Friend_2fFriendMessage_2eproto() {
  protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Friend/FriendMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ClientReqFindFriend_descriptor_ = file->message_type(0);
  static const int ClientReqFindFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqFindFriend, friendname_),
  };
  ClientReqFindFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqFindFriend_descriptor_,
      ClientReqFindFriend::default_instance_,
      ClientReqFindFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqFindFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqFindFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqFindFriend));
  FriendList_descriptor_ = file->message_type(1);
  static const int FriendList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList, friendinfo_),
  };
  FriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendList_descriptor_,
      FriendList::default_instance_,
      FriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendList));
  AddFriend_descriptor_ = file->message_type(2);
  static const int AddFriend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriend, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriend, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriend, attack_),
  };
  AddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriend_descriptor_,
      AddFriend::default_instance_,
      AddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriend));
  AskAddFriend_descriptor_ = file->message_type(3);
  static const int AskAddFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddFriend, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddFriend, friendinfo_),
  };
  AskAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskAddFriend_descriptor_,
      AskAddFriend::default_instance_,
      AskAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskAddFriend));
  DeleteFriend_descriptor_ = file->message_type(4);
  static const int DeleteFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriend, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriend, charid_),
  };
  DeleteFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DeleteFriend_descriptor_,
      DeleteFriend::default_instance_,
      DeleteFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DeleteFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DeleteFriend));
  UpdateDeleteFriend_descriptor_ = file->message_type(5);
  static const int UpdateDeleteFriend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeleteFriend, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeleteFriend, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeleteFriend, charid_),
  };
  UpdateDeleteFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateDeleteFriend_descriptor_,
      UpdateDeleteFriend::default_instance_,
      UpdateDeleteFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeleteFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateDeleteFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateDeleteFriend));
  BlessFriend_descriptor_ = file->message_type(6);
  static const int BlessFriend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessFriend, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessFriend, friendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessFriend, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessFriend, surplussendcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessFriend, exp_),
  };
  BlessFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BlessFriend_descriptor_,
      BlessFriend::default_instance_,
      BlessFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BlessFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BlessFriend));
  ClientReqBlessFriend_descriptor_ = file->message_type(7);
  static const int ClientReqBlessFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBlessFriend, charid_),
  };
  ClientReqBlessFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqBlessFriend_descriptor_,
      ClientReqBlessFriend::default_instance_,
      ClientReqBlessFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBlessFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBlessFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqBlessFriend));
  FriendInfo_descriptor_ = file->message_type(8);
  static const int FriendInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, friendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, hatred_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, viplv_),
  };
  FriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendInfo_descriptor_,
      FriendInfo::default_instance_,
      FriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendInfo));
  SynOnlineFrined_descriptor_ = file->message_type(9);
  static const int SynOnlineFrined_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynOnlineFrined, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynOnlineFrined, online_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynOnlineFrined, type_),
  };
  SynOnlineFrined_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynOnlineFrined_descriptor_,
      SynOnlineFrined::default_instance_,
      SynOnlineFrined_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynOnlineFrined, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynOnlineFrined, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynOnlineFrined));
  AskBlessFriend_descriptor_ = file->message_type(10);
  static const int AskBlessFriend_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBlessFriend, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBlessFriend, friendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBlessFriend, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBlessFriend, surplusreceivecounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBlessFriend, exp_),
  };
  AskBlessFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskBlessFriend_descriptor_,
      AskBlessFriend::default_instance_,
      AskBlessFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBlessFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskBlessFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskBlessFriend));
  GTReqWSOpenFriend_descriptor_ = file->message_type(11);
  static const int GTReqWSOpenFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSOpenFriend, charid_),
  };
  GTReqWSOpenFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTReqWSOpenFriend_descriptor_,
      GTReqWSOpenFriend::default_instance_,
      GTReqWSOpenFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSOpenFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSOpenFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTReqWSOpenFriend));
  GTReqWSFindFriend_descriptor_ = file->message_type(12);
  static const int GTReqWSFindFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSFindFriend, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSFindFriend, friendname_),
  };
  GTReqWSFindFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTReqWSFindFriend_descriptor_,
      GTReqWSFindFriend::default_instance_,
      GTReqWSFindFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSFindFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSFindFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTReqWSFindFriend));
  GTReqWSAddFriend_descriptor_ = file->message_type(13);
  static const int GTReqWSAddFriend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSAddFriend, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSAddFriend, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSAddFriend, otherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSAddFriend, attack_),
  };
  GTReqWSAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTReqWSAddFriend_descriptor_,
      GTReqWSAddFriend::default_instance_,
      GTReqWSAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTReqWSAddFriend));
  GTReqWSDeleteFriend_descriptor_ = file->message_type(14);
  static const int GTReqWSDeleteFriend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSDeleteFriend, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSDeleteFriend, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSDeleteFriend, otherid_),
  };
  GTReqWSDeleteFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTReqWSDeleteFriend_descriptor_,
      GTReqWSDeleteFriend::default_instance_,
      GTReqWSDeleteFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSDeleteFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSDeleteFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTReqWSDeleteFriend));
  WSTOGTSynOnlineFrined_descriptor_ = file->message_type(15);
  static const int WSTOGTSynOnlineFrined_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTSynOnlineFrined, mycharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTSynOnlineFrined, friend__),
  };
  WSTOGTSynOnlineFrined_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSTOGTSynOnlineFrined_descriptor_,
      WSTOGTSynOnlineFrined::default_instance_,
      WSTOGTSynOnlineFrined_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTSynOnlineFrined, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTSynOnlineFrined, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSTOGTSynOnlineFrined));
  WSTOGTFriendInfo_descriptor_ = file->message_type(16);
  static const int WSTOGTFriendInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTFriendInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTFriendInfo, friendinfo_),
  };
  WSTOGTFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSTOGTFriendInfo_descriptor_,
      WSTOGTFriendInfo::default_instance_,
      WSTOGTFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSTOGTFriendInfo));
  WSTOGTBlessFriend_descriptor_ = file->message_type(17);
  static const int WSTOGTBlessFriend_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTBlessFriend, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTBlessFriend, othercharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTBlessFriend, friendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTBlessFriend, lv_),
  };
  WSTOGTBlessFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSTOGTBlessFriend_descriptor_,
      WSTOGTBlessFriend::default_instance_,
      WSTOGTBlessFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTBlessFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTBlessFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSTOGTBlessFriend));
  GTReqWSBlessFriend_descriptor_ = file->message_type(18);
  static const int GTReqWSBlessFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSBlessFriend, mycharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSBlessFriend, bressfriend_),
  };
  GTReqWSBlessFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTReqWSBlessFriend_descriptor_,
      GTReqWSBlessFriend::default_instance_,
      GTReqWSBlessFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSBlessFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTReqWSBlessFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTReqWSBlessFriend));
  WSTOGTAskBlessFriend_descriptor_ = file->message_type(19);
  static const int WSTOGTAskBlessFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTAskBlessFriend, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTAskBlessFriend, blessfriend_),
  };
  WSTOGTAskBlessFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSTOGTAskBlessFriend_descriptor_,
      WSTOGTAskBlessFriend::default_instance_,
      WSTOGTAskBlessFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTAskBlessFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSTOGTAskBlessFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSTOGTAskBlessFriend));
  AddPlayerHarted_descriptor_ = file->message_type(20);
  static const int AddPlayerHarted_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerHarted, myself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerHarted, other_),
  };
  AddPlayerHarted_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddPlayerHarted_descriptor_,
      AddPlayerHarted::default_instance_,
      AddPlayerHarted_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerHarted, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddPlayerHarted, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddPlayerHarted));
  AskAttacked_descriptor_ = file->message_type(21);
  static const int AskAttacked_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAttacked, charid_),
  };
  AskAttacked_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskAttacked_descriptor_,
      AskAttacked::default_instance_,
      AskAttacked_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAttacked, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAttacked, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskAttacked));
  AckReqRecommendFriend_descriptor_ = file->message_type(22);
  static const int AckReqRecommendFriend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqRecommendFriend, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqRecommendFriend, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqRecommendFriend, lv_),
  };
  AckReqRecommendFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqRecommendFriend_descriptor_,
      AckReqRecommendFriend::default_instance_,
      AckReqRecommendFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqRecommendFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqRecommendFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqRecommendFriend));
  WSsendGMGainExp_descriptor_ = file->message_type(23);
  static const int WSsendGMGainExp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSsendGMGainExp, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSsendGMGainExp, level_),
  };
  WSsendGMGainExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSsendGMGainExp_descriptor_,
      WSsendGMGainExp::default_instance_,
      WSsendGMGainExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSsendGMGainExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSsendGMGainExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSsendGMGainExp));
  AddFriendList_descriptor_ = file->message_type(24);
  static const int AddFriendList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendList, friendlist_),
  };
  AddFriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AddFriendList_descriptor_,
      AddFriendList::default_instance_,
      AddFriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AddFriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AddFriendList));
  AskAddFriendList_descriptor_ = file->message_type(25);
  static const int AskAddFriendList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddFriendList, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddFriendList, askfriendlist_),
  };
  AskAddFriendList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskAddFriendList_descriptor_,
      AskAddFriendList::default_instance_,
      AskAddFriendList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddFriendList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskAddFriendList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskAddFriendList));
  FriendRecommendation_descriptor_ = file->message_type(26);
  static const int FriendRecommendation_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecommendation, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecommendation, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecommendation, gender_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecommendation, name_),
  };
  FriendRecommendation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendRecommendation_descriptor_,
      FriendRecommendation::default_instance_,
      FriendRecommendation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecommendation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendRecommendation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendRecommendation));
  PlayerReturnInfo_descriptor_ = file->message_type(27);
  static const int PlayerReturnInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReturnInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReturnInfo, error_),
  };
  PlayerReturnInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerReturnInfo_descriptor_,
      PlayerReturnInfo::default_instance_,
      PlayerReturnInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReturnInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerReturnInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerReturnInfo));
  FriendReturnError_descriptor_ = file->message_type(28);
  static const int FriendReturnError_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendReturnError, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendReturnError, playerinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendReturnError, surpluscounts_),
  };
  FriendReturnError_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendReturnError_descriptor_,
      FriendReturnError::default_instance_,
      FriendReturnError_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendReturnError, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendReturnError, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendReturnError));
  ReqReplyAddFriend_descriptor_ = file->message_type(29);
  static const int ReqReplyAddFriend_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReplyAddFriend, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReplyAddFriend, targetid_),
  };
  ReqReplyAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqReplyAddFriend_descriptor_,
      ReqReplyAddFriend::default_instance_,
      ReqReplyAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReplyAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqReplyAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqReplyAddFriend));
  AckReqReplyAddFriend_descriptor_ = file->message_type(30);
  static const int AckReqReplyAddFriend_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqReplyAddFriend, code_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqReplyAddFriend, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqReplyAddFriend, targetid_),
  };
  AckReqReplyAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqReplyAddFriend_descriptor_,
      AckReqReplyAddFriend::default_instance_,
      AckReqReplyAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqReplyAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqReplyAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqReplyAddFriend));
  NoticeAddFriend_descriptor_ = file->message_type(31);
  static const int NoticeAddFriend_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeAddFriend, info_),
  };
  NoticeAddFriend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoticeAddFriend_descriptor_,
      NoticeAddFriend::default_instance_,
      NoticeAddFriend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeAddFriend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeAddFriend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoticeAddFriend));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Friend_2fFriendMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqFindFriend_descriptor_, &ClientReqFindFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendList_descriptor_, &FriendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriend_descriptor_, &AddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskAddFriend_descriptor_, &AskAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DeleteFriend_descriptor_, &DeleteFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateDeleteFriend_descriptor_, &UpdateDeleteFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BlessFriend_descriptor_, &BlessFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqBlessFriend_descriptor_, &ClientReqBlessFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendInfo_descriptor_, &FriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynOnlineFrined_descriptor_, &SynOnlineFrined::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskBlessFriend_descriptor_, &AskBlessFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTReqWSOpenFriend_descriptor_, &GTReqWSOpenFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTReqWSFindFriend_descriptor_, &GTReqWSFindFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTReqWSAddFriend_descriptor_, &GTReqWSAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTReqWSDeleteFriend_descriptor_, &GTReqWSDeleteFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSTOGTSynOnlineFrined_descriptor_, &WSTOGTSynOnlineFrined::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSTOGTFriendInfo_descriptor_, &WSTOGTFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSTOGTBlessFriend_descriptor_, &WSTOGTBlessFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTReqWSBlessFriend_descriptor_, &GTReqWSBlessFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSTOGTAskBlessFriend_descriptor_, &WSTOGTAskBlessFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddPlayerHarted_descriptor_, &AddPlayerHarted::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskAttacked_descriptor_, &AskAttacked::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqRecommendFriend_descriptor_, &AckReqRecommendFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSsendGMGainExp_descriptor_, &WSsendGMGainExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AddFriendList_descriptor_, &AddFriendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskAddFriendList_descriptor_, &AskAddFriendList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendRecommendation_descriptor_, &FriendRecommendation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerReturnInfo_descriptor_, &PlayerReturnInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendReturnError_descriptor_, &FriendReturnError::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqReplyAddFriend_descriptor_, &ReqReplyAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqReplyAddFriend_descriptor_, &AckReqReplyAddFriend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoticeAddFriend_descriptor_, &NoticeAddFriend::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Friend_2fFriendMessage_2eproto() {
  delete ClientReqFindFriend::default_instance_;
  delete ClientReqFindFriend_reflection_;
  delete FriendList::default_instance_;
  delete FriendList_reflection_;
  delete AddFriend::default_instance_;
  delete AddFriend_reflection_;
  delete AskAddFriend::default_instance_;
  delete AskAddFriend_reflection_;
  delete DeleteFriend::default_instance_;
  delete DeleteFriend_reflection_;
  delete UpdateDeleteFriend::default_instance_;
  delete UpdateDeleteFriend_reflection_;
  delete BlessFriend::default_instance_;
  delete BlessFriend_reflection_;
  delete ClientReqBlessFriend::default_instance_;
  delete ClientReqBlessFriend_reflection_;
  delete FriendInfo::default_instance_;
  delete FriendInfo_reflection_;
  delete SynOnlineFrined::default_instance_;
  delete SynOnlineFrined_reflection_;
  delete AskBlessFriend::default_instance_;
  delete AskBlessFriend_reflection_;
  delete GTReqWSOpenFriend::default_instance_;
  delete GTReqWSOpenFriend_reflection_;
  delete GTReqWSFindFriend::default_instance_;
  delete GTReqWSFindFriend_reflection_;
  delete GTReqWSAddFriend::default_instance_;
  delete GTReqWSAddFriend_reflection_;
  delete GTReqWSDeleteFriend::default_instance_;
  delete GTReqWSDeleteFriend_reflection_;
  delete WSTOGTSynOnlineFrined::default_instance_;
  delete WSTOGTSynOnlineFrined_reflection_;
  delete WSTOGTFriendInfo::default_instance_;
  delete WSTOGTFriendInfo_reflection_;
  delete WSTOGTBlessFriend::default_instance_;
  delete WSTOGTBlessFriend_reflection_;
  delete GTReqWSBlessFriend::default_instance_;
  delete GTReqWSBlessFriend_reflection_;
  delete WSTOGTAskBlessFriend::default_instance_;
  delete WSTOGTAskBlessFriend_reflection_;
  delete AddPlayerHarted::default_instance_;
  delete AddPlayerHarted_reflection_;
  delete AskAttacked::default_instance_;
  delete AskAttacked_reflection_;
  delete AckReqRecommendFriend::default_instance_;
  delete AckReqRecommendFriend_reflection_;
  delete WSsendGMGainExp::default_instance_;
  delete WSsendGMGainExp_reflection_;
  delete AddFriendList::default_instance_;
  delete AddFriendList_reflection_;
  delete AskAddFriendList::default_instance_;
  delete AskAddFriendList_reflection_;
  delete FriendRecommendation::default_instance_;
  delete FriendRecommendation_reflection_;
  delete PlayerReturnInfo::default_instance_;
  delete PlayerReturnInfo_reflection_;
  delete FriendReturnError::default_instance_;
  delete FriendReturnError_reflection_;
  delete ReqReplyAddFriend::default_instance_;
  delete ReqReplyAddFriend_reflection_;
  delete AckReqReplyAddFriend::default_instance_;
  delete AckReqReplyAddFriend_reflection_;
  delete NoticeAddFriend::default_instance_;
  delete NoticeAddFriend_reflection_;
}

void protobuf_AddDesc_Friend_2fFriendMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032Friend/FriendMessage.proto\022\006Friend\")\n\023"
    "ClientReqFindFriend\022\022\n\nfriendname\030\001 \002(\t\""
    "A\n\nFriendList\022\013\n\003ret\030\001 \002(\005\022&\n\nfriendinfo"
    "\030\002 \003(\0132\022.Friend.FriendInfo\"9\n\tAddFriend\022"
    "\014\n\004type\030\001 \002(\005\022\016\n\006charid\030\002 \002(\003\022\016\n\006attack\030"
    "\003 \001(\005\"F\n\014AskAddFriend\022\016\n\006status\030\001 \002(\005\022&\n"
    "\nfriendInfo\030\002 \001(\0132\022.Friend.FriendInfo\",\n"
    "\014DeleteFriend\022\014\n\004type\030\001 \002(\005\022\016\n\006charid\030\002 "
    "\002(\003\"B\n\022UpdateDeleteFriend\022\016\n\006status\030\001 \002("
    "\005\022\014\n\004type\030\002 \001(\005\022\016\n\006charid\030\003 \001(\003\"e\n\013Bless"
    "Friend\022\016\n\006charid\030\001 \002(\003\022\022\n\nfriendname\030\002 \002"
    "(\t\022\n\n\002lv\030\003 \002(\005\022\031\n\021surplusSendCounts\030\004 \001("
    "\005\022\013\n\003exp\030\005 \001(\005\"&\n\024ClientReqBlessFriend\022\016"
    "\n\006charid\030\001 \003(\003\"\215\001\n\nFriendInfo\022\016\n\006charid\030"
    "\001 \002(\003\022\014\n\004type\030\002 \002(\005\022\022\n\nfriendname\030\003 \002(\t\022"
    "\n\n\002lv\030\004 \002(\005\022\022\n\nprofession\030\005 \001(\005\022\016\n\006hatre"
    "d\030\006 \001(\005\022\016\n\006online\030\007 \001(\005\022\r\n\005viplv\030\010 \001(\005\"\?"
    "\n\017SynOnlineFrined\022\016\n\006charid\030\001 \002(\003\022\016\n\006onl"
    "ine\030\002 \002(\005\022\014\n\004type\030\003 \002(\005\"k\n\016AskBlessFrien"
    "d\022\016\n\006charid\030\001 \002(\003\022\022\n\nfriendname\030\002 \002(\t\022\n\n"
    "\002lv\030\003 \002(\005\022\034\n\024surplusReceiveCounts\030\004 \001(\005\022"
    "\013\n\003exp\030\005 \001(\005\"#\n\021GTReqWSOpenFriend\022\016\n\006cha"
    "rid\030\001 \002(\003\"7\n\021GTReqWSFindFriend\022\016\n\006charid"
    "\030\001 \002(\003\022\022\n\nfriendname\030\002 \002(\t\"Q\n\020GTReqWSAdd"
    "Friend\022\016\n\006charid\030\001 \002(\003\022\014\n\004type\030\002 \002(\005\022\017\n\007"
    "otherid\030\003 \002(\003\022\016\n\006attack\030\004 \002(\005\"D\n\023GTReqWS"
    "DeleteFriend\022\016\n\006charid\030\001 \002(\003\022\014\n\004type\030\002 \002"
    "(\005\022\017\n\007otherid\030\003 \002(\003\"R\n\025WSTOGTSynOnlineFr"
    "ined\022\020\n\010mycharid\030\001 \002(\003\022\'\n\006friend\030\002 \002(\0132\027"
    ".Friend.SynOnlineFrined\"J\n\020WSTOGTFriendI"
    "nfo\022\016\n\006charid\030\001 \002(\003\022&\n\nfriendinfo\030\002 \002(\0132"
    "\022.Friend.FriendInfo\"X\n\021WSTOGTBlessFriend"
    "\022\016\n\006charid\030\001 \002(\003\022\023\n\013othercharid\030\002 \002(\003\022\022\n"
    "\nfriendname\030\003 \002(\t\022\n\n\002lv\030\004 \002(\005\"Y\n\022GTReqWS"
    "BlessFriend\022\020\n\010mycharid\030\001 \002(\003\0221\n\013bressFr"
    "iend\030\002 \002(\0132\034.Friend.ClientReqBlessFriend"
    "\"S\n\024WSTOGTAskBlessFriend\022\016\n\006charid\030\001 \002(\003"
    "\022+\n\013blessfriend\030\002 \002(\0132\026.Friend.AskBlessF"
    "riend\"0\n\017AddPlayerHarted\022\016\n\006myself\030\001 \002(\003"
    "\022\r\n\005other\030\002 \002(\003\"\035\n\013AskAttacked\022\016\n\006charid"
    "\030\001 \002(\003\"A\n\025AckReqRecommendFriend\022\016\n\006chari"
    "d\030\001 \003(\003\022\014\n\004name\030\002 \003(\t\022\n\n\002lv\030\003 \003(\005\"2\n\017WSs"
    "endGMGainExp\022\020\n\010playerID\030\001 \003(\003\022\r\n\005level\030"
    "\002 \003(\005\"6\n\rAddFriendList\022%\n\nfriendList\030\001 \003"
    "(\0132\021.Friend.AddFriend\"N\n\020AskAddFriendLis"
    "t\022\r\n\005error\030\001 \001(\005\022+\n\raskFriendList\030\002 \003(\0132"
    "\024.Friend.AskAddFriend\"Z\n\024FriendRecommend"
    "ation\022\020\n\010playerID\030\001 \003(\003\022\022\n\nprofession\030\002 "
    "\003(\005\022\016\n\006gender\030\003 \003(\005\022\014\n\004name\030\004 \003(\t\"3\n\020Pla"
    "yerReturnInfo\022\020\n\010playerID\030\001 \001(\003\022\r\n\005error"
    "\030\002 \001(\005\"g\n\021FriendReturnError\022\r\n\005error\030\001 \001"
    "(\005\022,\n\nplayerInfo\030\002 \003(\0132\030.Friend.PlayerRe"
    "turnInfo\022\025\n\rSurplusCounts\030\003 \001(\005\"3\n\021ReqRe"
    "plyAddFriend\022\014\n\004flag\030\001 \002(\005\022\020\n\010targetid\030\002"
    " \003(\003\"D\n\024AckReqReplyAddFriend\022\014\n\004code\030\001 \002"
    "(\005\022\014\n\004flag\030\002 \001(\005\022\020\n\010targetid\030\003 \003(\003\"3\n\017No"
    "ticeAddFriend\022 \n\004info\030\001 \003(\0132\022.Friend.Fri"
    "endInfo", 2287);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Friend/FriendMessage.proto", &protobuf_RegisterTypes);
  ClientReqFindFriend::default_instance_ = new ClientReqFindFriend();
  FriendList::default_instance_ = new FriendList();
  AddFriend::default_instance_ = new AddFriend();
  AskAddFriend::default_instance_ = new AskAddFriend();
  DeleteFriend::default_instance_ = new DeleteFriend();
  UpdateDeleteFriend::default_instance_ = new UpdateDeleteFriend();
  BlessFriend::default_instance_ = new BlessFriend();
  ClientReqBlessFriend::default_instance_ = new ClientReqBlessFriend();
  FriendInfo::default_instance_ = new FriendInfo();
  SynOnlineFrined::default_instance_ = new SynOnlineFrined();
  AskBlessFriend::default_instance_ = new AskBlessFriend();
  GTReqWSOpenFriend::default_instance_ = new GTReqWSOpenFriend();
  GTReqWSFindFriend::default_instance_ = new GTReqWSFindFriend();
  GTReqWSAddFriend::default_instance_ = new GTReqWSAddFriend();
  GTReqWSDeleteFriend::default_instance_ = new GTReqWSDeleteFriend();
  WSTOGTSynOnlineFrined::default_instance_ = new WSTOGTSynOnlineFrined();
  WSTOGTFriendInfo::default_instance_ = new WSTOGTFriendInfo();
  WSTOGTBlessFriend::default_instance_ = new WSTOGTBlessFriend();
  GTReqWSBlessFriend::default_instance_ = new GTReqWSBlessFriend();
  WSTOGTAskBlessFriend::default_instance_ = new WSTOGTAskBlessFriend();
  AddPlayerHarted::default_instance_ = new AddPlayerHarted();
  AskAttacked::default_instance_ = new AskAttacked();
  AckReqRecommendFriend::default_instance_ = new AckReqRecommendFriend();
  WSsendGMGainExp::default_instance_ = new WSsendGMGainExp();
  AddFriendList::default_instance_ = new AddFriendList();
  AskAddFriendList::default_instance_ = new AskAddFriendList();
  FriendRecommendation::default_instance_ = new FriendRecommendation();
  PlayerReturnInfo::default_instance_ = new PlayerReturnInfo();
  FriendReturnError::default_instance_ = new FriendReturnError();
  ReqReplyAddFriend::default_instance_ = new ReqReplyAddFriend();
  AckReqReplyAddFriend::default_instance_ = new AckReqReplyAddFriend();
  NoticeAddFriend::default_instance_ = new NoticeAddFriend();
  ClientReqFindFriend::default_instance_->InitAsDefaultInstance();
  FriendList::default_instance_->InitAsDefaultInstance();
  AddFriend::default_instance_->InitAsDefaultInstance();
  AskAddFriend::default_instance_->InitAsDefaultInstance();
  DeleteFriend::default_instance_->InitAsDefaultInstance();
  UpdateDeleteFriend::default_instance_->InitAsDefaultInstance();
  BlessFriend::default_instance_->InitAsDefaultInstance();
  ClientReqBlessFriend::default_instance_->InitAsDefaultInstance();
  FriendInfo::default_instance_->InitAsDefaultInstance();
  SynOnlineFrined::default_instance_->InitAsDefaultInstance();
  AskBlessFriend::default_instance_->InitAsDefaultInstance();
  GTReqWSOpenFriend::default_instance_->InitAsDefaultInstance();
  GTReqWSFindFriend::default_instance_->InitAsDefaultInstance();
  GTReqWSAddFriend::default_instance_->InitAsDefaultInstance();
  GTReqWSDeleteFriend::default_instance_->InitAsDefaultInstance();
  WSTOGTSynOnlineFrined::default_instance_->InitAsDefaultInstance();
  WSTOGTFriendInfo::default_instance_->InitAsDefaultInstance();
  WSTOGTBlessFriend::default_instance_->InitAsDefaultInstance();
  GTReqWSBlessFriend::default_instance_->InitAsDefaultInstance();
  WSTOGTAskBlessFriend::default_instance_->InitAsDefaultInstance();
  AddPlayerHarted::default_instance_->InitAsDefaultInstance();
  AskAttacked::default_instance_->InitAsDefaultInstance();
  AckReqRecommendFriend::default_instance_->InitAsDefaultInstance();
  WSsendGMGainExp::default_instance_->InitAsDefaultInstance();
  AddFriendList::default_instance_->InitAsDefaultInstance();
  AskAddFriendList::default_instance_->InitAsDefaultInstance();
  FriendRecommendation::default_instance_->InitAsDefaultInstance();
  PlayerReturnInfo::default_instance_->InitAsDefaultInstance();
  FriendReturnError::default_instance_->InitAsDefaultInstance();
  ReqReplyAddFriend::default_instance_->InitAsDefaultInstance();
  AckReqReplyAddFriend::default_instance_->InitAsDefaultInstance();
  NoticeAddFriend::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Friend_2fFriendMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Friend_2fFriendMessage_2eproto {
  StaticDescriptorInitializer_Friend_2fFriendMessage_2eproto() {
    protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  }
} static_descriptor_initializer_Friend_2fFriendMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientReqFindFriend::kFriendnameFieldNumber;
#endif  // !_MSC_VER

ClientReqFindFriend::ClientReqFindFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqFindFriend::InitAsDefaultInstance() {
}

ClientReqFindFriend::ClientReqFindFriend(const ClientReqFindFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqFindFriend::SharedCtor() {
  _cached_size_ = 0;
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqFindFriend::~ClientReqFindFriend() {
  SharedDtor();
}

void ClientReqFindFriend::SharedDtor() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (this != default_instance_) {
  }
}

void ClientReqFindFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqFindFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqFindFriend_descriptor_;
}

const ClientReqFindFriend& ClientReqFindFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

ClientReqFindFriend* ClientReqFindFriend::default_instance_ = NULL;

ClientReqFindFriend* ClientReqFindFriend::New() const {
  return new ClientReqFindFriend;
}

void ClientReqFindFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqFindFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string friendname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqFindFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string friendname = 1;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->friendname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqFindFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string friendname = 1;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->friendname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqFindFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string friendname = 1;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqFindFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqFindFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqFindFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqFindFriend::MergeFrom(const ClientReqFindFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqFindFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqFindFriend::CopyFrom(const ClientReqFindFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqFindFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqFindFriend::Swap(ClientReqFindFriend* other) {
  if (other != this) {
    std::swap(friendname_, other->friendname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqFindFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqFindFriend_descriptor_;
  metadata.reflection = ClientReqFindFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendList::kRetFieldNumber;
const int FriendList::kFriendinfoFieldNumber;
#endif  // !_MSC_VER

FriendList::FriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendList::InitAsDefaultInstance() {
}

FriendList::FriendList(const FriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendList::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendList::~FriendList() {
  SharedDtor();
}

void FriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendList_descriptor_;
}

const FriendList& FriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

FriendList* FriendList::default_instance_ = NULL;

FriendList* FriendList::New() const {
  return new FriendList;
}

void FriendList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  friendinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendinfo;
        break;
      }

      // repeated .Friend.FriendInfo friendinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .Friend.FriendInfo friendinfo = 2;
  for (int i = 0; i < this->friendinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friendinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .Friend.FriendInfo friendinfo = 2;
  for (int i = 0; i < this->friendinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friendinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .Friend.FriendInfo friendinfo = 2;
  total_size += 1 * this->friendinfo_size();
  for (int i = 0; i < this->friendinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendList::MergeFrom(const FriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendinfo_.MergeFrom(from.friendinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendList::CopyFrom(const FriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < friendinfo_size(); i++) {
    if (!this->friendinfo(i).IsInitialized()) return false;
  }
  return true;
}

void FriendList::Swap(FriendList* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    friendinfo_.Swap(&other->friendinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendList_descriptor_;
  metadata.reflection = FriendList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriend::kTypeFieldNumber;
const int AddFriend::kCharidFieldNumber;
const int AddFriend::kAttackFieldNumber;
#endif  // !_MSC_VER

AddFriend::AddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFriend::InitAsDefaultInstance() {
}

AddFriend::AddFriend(const AddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFriend::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  attack_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriend::~AddFriend() {
  SharedDtor();
}

void AddFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriend_descriptor_;
}

const AddFriend& AddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

AddFriend* AddFriend::default_instance_ = NULL;

AddFriend* AddFriend::New() const {
  return new AddFriend;
}

void AddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    attack_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required int64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_attack;
        break;
      }

      // optional int32 attack = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  // optional int32 attack = 3;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->attack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  // optional int32 attack = 3;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->attack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 attack = 3;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFriend::MergeFrom(const AddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriend::CopyFrom(const AddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddFriend::Swap(AddFriend* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(attack_, other->attack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriend_descriptor_;
  metadata.reflection = AddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskAddFriend::kStatusFieldNumber;
const int AskAddFriend::kFriendInfoFieldNumber;
#endif  // !_MSC_VER

AskAddFriend::AskAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskAddFriend::InitAsDefaultInstance() {
  friendinfo_ = const_cast< ::Friend::FriendInfo*>(&::Friend::FriendInfo::default_instance());
}

AskAddFriend::AskAddFriend(const AskAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskAddFriend::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  friendinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskAddFriend::~AskAddFriend() {
  SharedDtor();
}

void AskAddFriend::SharedDtor() {
  if (this != default_instance_) {
    delete friendinfo_;
  }
}

void AskAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskAddFriend_descriptor_;
}

const AskAddFriend& AskAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

AskAddFriend* AskAddFriend::default_instance_ = NULL;

AskAddFriend* AskAddFriend::New() const {
  return new AskAddFriend;
}

void AskAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    if (has_friendinfo()) {
      if (friendinfo_ != NULL) friendinfo_->::Friend::FriendInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendInfo;
        break;
      }

      // optional .Friend.FriendInfo friendInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AskAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional .Friend.FriendInfo friendInfo = 2;
  if (has_friendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friendinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional .Friend.FriendInfo friendInfo = 2;
  if (has_friendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friendinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional .Friend.FriendInfo friendInfo = 2;
    if (has_friendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskAddFriend::MergeFrom(const AskAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_friendinfo()) {
      mutable_friendinfo()->::Friend::FriendInfo::MergeFrom(from.friendinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskAddFriend::CopyFrom(const AskAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskAddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_friendinfo()) {
    if (!this->friendinfo().IsInitialized()) return false;
  }
  return true;
}

void AskAddFriend::Swap(AskAddFriend* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(friendinfo_, other->friendinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskAddFriend_descriptor_;
  metadata.reflection = AskAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DeleteFriend::kTypeFieldNumber;
const int DeleteFriend::kCharidFieldNumber;
#endif  // !_MSC_VER

DeleteFriend::DeleteFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DeleteFriend::InitAsDefaultInstance() {
}

DeleteFriend::DeleteFriend(const DeleteFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DeleteFriend::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DeleteFriend::~DeleteFriend() {
  SharedDtor();
}

void DeleteFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DeleteFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DeleteFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DeleteFriend_descriptor_;
}

const DeleteFriend& DeleteFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

DeleteFriend* DeleteFriend::default_instance_ = NULL;

DeleteFriend* DeleteFriend::New() const {
  return new DeleteFriend;
}

void DeleteFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DeleteFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required int64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DeleteFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DeleteFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DeleteFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DeleteFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DeleteFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DeleteFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DeleteFriend::MergeFrom(const DeleteFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DeleteFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DeleteFriend::CopyFrom(const DeleteFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DeleteFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DeleteFriend::Swap(DeleteFriend* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DeleteFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DeleteFriend_descriptor_;
  metadata.reflection = DeleteFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateDeleteFriend::kStatusFieldNumber;
const int UpdateDeleteFriend::kTypeFieldNumber;
const int UpdateDeleteFriend::kCharidFieldNumber;
#endif  // !_MSC_VER

UpdateDeleteFriend::UpdateDeleteFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateDeleteFriend::InitAsDefaultInstance() {
}

UpdateDeleteFriend::UpdateDeleteFriend(const UpdateDeleteFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateDeleteFriend::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  type_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateDeleteFriend::~UpdateDeleteFriend() {
  SharedDtor();
}

void UpdateDeleteFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateDeleteFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateDeleteFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateDeleteFriend_descriptor_;
}

const UpdateDeleteFriend& UpdateDeleteFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

UpdateDeleteFriend* UpdateDeleteFriend::default_instance_ = NULL;

UpdateDeleteFriend* UpdateDeleteFriend::New() const {
  return new UpdateDeleteFriend;
}

void UpdateDeleteFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    type_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateDeleteFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // optional int64 charid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateDeleteFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // optional int64 charid = 3;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateDeleteFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // optional int64 charid = 3;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateDeleteFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 charid = 3;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateDeleteFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateDeleteFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateDeleteFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateDeleteFriend::MergeFrom(const UpdateDeleteFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateDeleteFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateDeleteFriend::CopyFrom(const UpdateDeleteFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateDeleteFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void UpdateDeleteFriend::Swap(UpdateDeleteFriend* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateDeleteFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateDeleteFriend_descriptor_;
  metadata.reflection = UpdateDeleteFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BlessFriend::kCharidFieldNumber;
const int BlessFriend::kFriendnameFieldNumber;
const int BlessFriend::kLvFieldNumber;
const int BlessFriend::kSurplusSendCountsFieldNumber;
const int BlessFriend::kExpFieldNumber;
#endif  // !_MSC_VER

BlessFriend::BlessFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BlessFriend::InitAsDefaultInstance() {
}

BlessFriend::BlessFriend(const BlessFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BlessFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  surplussendcounts_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BlessFriend::~BlessFriend() {
  SharedDtor();
}

void BlessFriend::SharedDtor() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (this != default_instance_) {
  }
}

void BlessFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BlessFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BlessFriend_descriptor_;
}

const BlessFriend& BlessFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

BlessFriend* BlessFriend::default_instance_ = NULL;

BlessFriend* BlessFriend::New() const {
  return new BlessFriend;
}

void BlessFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
    lv_ = 0;
    surplussendcounts_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BlessFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendname;
        break;
      }

      // required string friendname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // required int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_surplusSendCounts;
        break;
      }

      // optional int32 surplusSendCounts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_surplusSendCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surplussendcounts_)));
          set_has_surplussendcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // optional int32 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BlessFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required string friendname = 2;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->friendname(), output);
  }

  // required int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // optional int32 surplusSendCounts = 4;
  if (has_surplussendcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->surplussendcounts(), output);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BlessFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required string friendname = 2;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->friendname(), target);
  }

  // required int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // optional int32 surplusSendCounts = 4;
  if (has_surplussendcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->surplussendcounts(), target);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BlessFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required string friendname = 2;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

    // required int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 surplusSendCounts = 4;
    if (has_surplussendcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surplussendcounts());
    }

    // optional int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BlessFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BlessFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BlessFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BlessFriend::MergeFrom(const BlessFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_surplussendcounts()) {
      set_surplussendcounts(from.surplussendcounts());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BlessFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BlessFriend::CopyFrom(const BlessFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BlessFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void BlessFriend::Swap(BlessFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(friendname_, other->friendname_);
    std::swap(lv_, other->lv_);
    std::swap(surplussendcounts_, other->surplussendcounts_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BlessFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BlessFriend_descriptor_;
  metadata.reflection = BlessFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqBlessFriend::kCharidFieldNumber;
#endif  // !_MSC_VER

ClientReqBlessFriend::ClientReqBlessFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqBlessFriend::InitAsDefaultInstance() {
}

ClientReqBlessFriend::ClientReqBlessFriend(const ClientReqBlessFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqBlessFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqBlessFriend::~ClientReqBlessFriend() {
  SharedDtor();
}

void ClientReqBlessFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqBlessFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqBlessFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqBlessFriend_descriptor_;
}

const ClientReqBlessFriend& ClientReqBlessFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

ClientReqBlessFriend* ClientReqBlessFriend::default_instance_ = NULL;

ClientReqBlessFriend* ClientReqBlessFriend::New() const {
  return new ClientReqBlessFriend;
}

void ClientReqBlessFriend::Clear() {
  charid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqBlessFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_charid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_charid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_charid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqBlessFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 charid = 1;
  for (int i = 0; i < this->charid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->charid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqBlessFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 charid = 1;
  for (int i = 0; i < this->charid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->charid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqBlessFriend::ByteSize() const {
  int total_size = 0;

  // repeated int64 charid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->charid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->charid(i));
    }
    total_size += 1 * this->charid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqBlessFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqBlessFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqBlessFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqBlessFriend::MergeFrom(const ClientReqBlessFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  charid_.MergeFrom(from.charid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqBlessFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqBlessFriend::CopyFrom(const ClientReqBlessFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqBlessFriend::IsInitialized() const {

  return true;
}

void ClientReqBlessFriend::Swap(ClientReqBlessFriend* other) {
  if (other != this) {
    charid_.Swap(&other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqBlessFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqBlessFriend_descriptor_;
  metadata.reflection = ClientReqBlessFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendInfo::kCharidFieldNumber;
const int FriendInfo::kTypeFieldNumber;
const int FriendInfo::kFriendnameFieldNumber;
const int FriendInfo::kLvFieldNumber;
const int FriendInfo::kProfessionFieldNumber;
const int FriendInfo::kHatredFieldNumber;
const int FriendInfo::kOnlineFieldNumber;
const int FriendInfo::kViplvFieldNumber;
#endif  // !_MSC_VER

FriendInfo::FriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendInfo::InitAsDefaultInstance() {
}

FriendInfo::FriendInfo(const FriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  profession_ = 0;
  hatred_ = 0;
  online_ = 0;
  viplv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfo::~FriendInfo() {
  SharedDtor();
}

void FriendInfo::SharedDtor() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (this != default_instance_) {
  }
}

void FriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfo_descriptor_;
}

const FriendInfo& FriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

FriendInfo* FriendInfo::default_instance_ = NULL;

FriendInfo* FriendInfo::New() const {
  return new FriendInfo;
}

void FriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
    lv_ = 0;
    profession_ = 0;
    hatred_ = 0;
    online_ = 0;
    viplv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friendname;
        break;
      }

      // required string friendname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // required int32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_profession;
        break;
      }

      // optional int32 profession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hatred;
        break;
      }

      // optional int32 hatred = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hatred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hatred_)));
          set_has_hatred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_online;
        break;
      }

      // optional int32 online = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_viplv;
        break;
      }

      // optional int32 viplv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required string friendname = 3;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->friendname(), output);
  }

  // required int32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lv(), output);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->profession(), output);
  }

  // optional int32 hatred = 6;
  if (has_hatred()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hatred(), output);
  }

  // optional int32 online = 7;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->online(), output);
  }

  // optional int32 viplv = 8;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->viplv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required string friendname = 3;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->friendname(), target);
  }

  // required int32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lv(), target);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->profession(), target);
  }

  // optional int32 hatred = 6;
  if (has_hatred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hatred(), target);
  }

  // optional int32 online = 7;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->online(), target);
  }

  // optional int32 viplv = 8;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->viplv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required string friendname = 3;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

    // required int32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 hatred = 6;
    if (has_hatred()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hatred());
    }

    // optional int32 online = 7;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

    // optional int32 viplv = 8;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendInfo::MergeFrom(const FriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_hatred()) {
      set_hatred(from.hatred());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FriendInfo::Swap(FriendInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(friendname_, other->friendname_);
    std::swap(lv_, other->lv_);
    std::swap(profession_, other->profession_);
    std::swap(hatred_, other->hatred_);
    std::swap(online_, other->online_);
    std::swap(viplv_, other->viplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfo_descriptor_;
  metadata.reflection = FriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynOnlineFrined::kCharidFieldNumber;
const int SynOnlineFrined::kOnlineFieldNumber;
const int SynOnlineFrined::kTypeFieldNumber;
#endif  // !_MSC_VER

SynOnlineFrined::SynOnlineFrined()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynOnlineFrined::InitAsDefaultInstance() {
}

SynOnlineFrined::SynOnlineFrined(const SynOnlineFrined& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynOnlineFrined::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  online_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynOnlineFrined::~SynOnlineFrined() {
  SharedDtor();
}

void SynOnlineFrined::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SynOnlineFrined::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynOnlineFrined::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynOnlineFrined_descriptor_;
}

const SynOnlineFrined& SynOnlineFrined::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

SynOnlineFrined* SynOnlineFrined::default_instance_ = NULL;

SynOnlineFrined* SynOnlineFrined::New() const {
  return new SynOnlineFrined;
}

void SynOnlineFrined::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    online_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynOnlineFrined::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_online;
        break;
      }

      // required int32 online = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_online:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynOnlineFrined::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 online = 2;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->online(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynOnlineFrined::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 online = 2;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->online(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynOnlineFrined::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 online = 2;
    if (has_online()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->online());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynOnlineFrined::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynOnlineFrined* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynOnlineFrined*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynOnlineFrined::MergeFrom(const SynOnlineFrined& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_online()) {
      set_online(from.online());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynOnlineFrined::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynOnlineFrined::CopyFrom(const SynOnlineFrined& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynOnlineFrined::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SynOnlineFrined::Swap(SynOnlineFrined* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(online_, other->online_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynOnlineFrined::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynOnlineFrined_descriptor_;
  metadata.reflection = SynOnlineFrined_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskBlessFriend::kCharidFieldNumber;
const int AskBlessFriend::kFriendnameFieldNumber;
const int AskBlessFriend::kLvFieldNumber;
const int AskBlessFriend::kSurplusReceiveCountsFieldNumber;
const int AskBlessFriend::kExpFieldNumber;
#endif  // !_MSC_VER

AskBlessFriend::AskBlessFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskBlessFriend::InitAsDefaultInstance() {
}

AskBlessFriend::AskBlessFriend(const AskBlessFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskBlessFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  surplusreceivecounts_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskBlessFriend::~AskBlessFriend() {
  SharedDtor();
}

void AskBlessFriend::SharedDtor() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (this != default_instance_) {
  }
}

void AskBlessFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskBlessFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskBlessFriend_descriptor_;
}

const AskBlessFriend& AskBlessFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

AskBlessFriend* AskBlessFriend::default_instance_ = NULL;

AskBlessFriend* AskBlessFriend::New() const {
  return new AskBlessFriend;
}

void AskBlessFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
    lv_ = 0;
    surplusreceivecounts_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskBlessFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendname;
        break;
      }

      // required string friendname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // required int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_surplusReceiveCounts;
        break;
      }

      // optional int32 surplusReceiveCounts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_surplusReceiveCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surplusreceivecounts_)));
          set_has_surplusreceivecounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_exp;
        break;
      }

      // optional int32 exp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AskBlessFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required string friendname = 2;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->friendname(), output);
  }

  // required int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // optional int32 surplusReceiveCounts = 4;
  if (has_surplusreceivecounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->surplusreceivecounts(), output);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskBlessFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required string friendname = 2;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->friendname(), target);
  }

  // required int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // optional int32 surplusReceiveCounts = 4;
  if (has_surplusreceivecounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->surplusreceivecounts(), target);
  }

  // optional int32 exp = 5;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskBlessFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required string friendname = 2;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

    // required int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 surplusReceiveCounts = 4;
    if (has_surplusreceivecounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surplusreceivecounts());
    }

    // optional int32 exp = 5;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskBlessFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskBlessFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskBlessFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskBlessFriend::MergeFrom(const AskBlessFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_surplusreceivecounts()) {
      set_surplusreceivecounts(from.surplusreceivecounts());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskBlessFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskBlessFriend::CopyFrom(const AskBlessFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskBlessFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void AskBlessFriend::Swap(AskBlessFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(friendname_, other->friendname_);
    std::swap(lv_, other->lv_);
    std::swap(surplusreceivecounts_, other->surplusreceivecounts_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskBlessFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskBlessFriend_descriptor_;
  metadata.reflection = AskBlessFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTReqWSOpenFriend::kCharidFieldNumber;
#endif  // !_MSC_VER

GTReqWSOpenFriend::GTReqWSOpenFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTReqWSOpenFriend::InitAsDefaultInstance() {
}

GTReqWSOpenFriend::GTReqWSOpenFriend(const GTReqWSOpenFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTReqWSOpenFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTReqWSOpenFriend::~GTReqWSOpenFriend() {
  SharedDtor();
}

void GTReqWSOpenFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTReqWSOpenFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTReqWSOpenFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTReqWSOpenFriend_descriptor_;
}

const GTReqWSOpenFriend& GTReqWSOpenFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

GTReqWSOpenFriend* GTReqWSOpenFriend::default_instance_ = NULL;

GTReqWSOpenFriend* GTReqWSOpenFriend::New() const {
  return new GTReqWSOpenFriend;
}

void GTReqWSOpenFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTReqWSOpenFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTReqWSOpenFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTReqWSOpenFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTReqWSOpenFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTReqWSOpenFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTReqWSOpenFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTReqWSOpenFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTReqWSOpenFriend::MergeFrom(const GTReqWSOpenFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTReqWSOpenFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTReqWSOpenFriend::CopyFrom(const GTReqWSOpenFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTReqWSOpenFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GTReqWSOpenFriend::Swap(GTReqWSOpenFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTReqWSOpenFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTReqWSOpenFriend_descriptor_;
  metadata.reflection = GTReqWSOpenFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTReqWSFindFriend::kCharidFieldNumber;
const int GTReqWSFindFriend::kFriendnameFieldNumber;
#endif  // !_MSC_VER

GTReqWSFindFriend::GTReqWSFindFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTReqWSFindFriend::InitAsDefaultInstance() {
}

GTReqWSFindFriend::GTReqWSFindFriend(const GTReqWSFindFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTReqWSFindFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTReqWSFindFriend::~GTReqWSFindFriend() {
  SharedDtor();
}

void GTReqWSFindFriend::SharedDtor() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (this != default_instance_) {
  }
}

void GTReqWSFindFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTReqWSFindFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTReqWSFindFriend_descriptor_;
}

const GTReqWSFindFriend& GTReqWSFindFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

GTReqWSFindFriend* GTReqWSFindFriend::default_instance_ = NULL;

GTReqWSFindFriend* GTReqWSFindFriend::New() const {
  return new GTReqWSFindFriend;
}

void GTReqWSFindFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTReqWSFindFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendname;
        break;
      }

      // required string friendname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTReqWSFindFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required string friendname = 2;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->friendname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTReqWSFindFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required string friendname = 2;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->friendname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTReqWSFindFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required string friendname = 2;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTReqWSFindFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTReqWSFindFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTReqWSFindFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTReqWSFindFriend::MergeFrom(const GTReqWSFindFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTReqWSFindFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTReqWSFindFriend::CopyFrom(const GTReqWSFindFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTReqWSFindFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GTReqWSFindFriend::Swap(GTReqWSFindFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(friendname_, other->friendname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTReqWSFindFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTReqWSFindFriend_descriptor_;
  metadata.reflection = GTReqWSFindFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTReqWSAddFriend::kCharidFieldNumber;
const int GTReqWSAddFriend::kTypeFieldNumber;
const int GTReqWSAddFriend::kOtheridFieldNumber;
const int GTReqWSAddFriend::kAttackFieldNumber;
#endif  // !_MSC_VER

GTReqWSAddFriend::GTReqWSAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTReqWSAddFriend::InitAsDefaultInstance() {
}

GTReqWSAddFriend::GTReqWSAddFriend(const GTReqWSAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTReqWSAddFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  otherid_ = GOOGLE_LONGLONG(0);
  attack_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTReqWSAddFriend::~GTReqWSAddFriend() {
  SharedDtor();
}

void GTReqWSAddFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTReqWSAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTReqWSAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTReqWSAddFriend_descriptor_;
}

const GTReqWSAddFriend& GTReqWSAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

GTReqWSAddFriend* GTReqWSAddFriend::default_instance_ = NULL;

GTReqWSAddFriend* GTReqWSAddFriend::New() const {
  return new GTReqWSAddFriend;
}

void GTReqWSAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    otherid_ = GOOGLE_LONGLONG(0);
    attack_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTReqWSAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_otherid;
        break;
      }

      // required int64 otherid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otherid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_attack;
        break;
      }

      // required int32 attack = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attack_)));
          set_has_attack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTReqWSAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int64 otherid = 3;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->otherid(), output);
  }

  // required int32 attack = 4;
  if (has_attack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->attack(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTReqWSAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int64 otherid = 3;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->otherid(), target);
  }

  // required int32 attack = 4;
  if (has_attack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->attack(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTReqWSAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int64 otherid = 3;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->otherid());
    }

    // required int32 attack = 4;
    if (has_attack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attack());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTReqWSAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTReqWSAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTReqWSAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTReqWSAddFriend::MergeFrom(const GTReqWSAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
    if (from.has_attack()) {
      set_attack(from.attack());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTReqWSAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTReqWSAddFriend::CopyFrom(const GTReqWSAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTReqWSAddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GTReqWSAddFriend::Swap(GTReqWSAddFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(otherid_, other->otherid_);
    std::swap(attack_, other->attack_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTReqWSAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTReqWSAddFriend_descriptor_;
  metadata.reflection = GTReqWSAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTReqWSDeleteFriend::kCharidFieldNumber;
const int GTReqWSDeleteFriend::kTypeFieldNumber;
const int GTReqWSDeleteFriend::kOtheridFieldNumber;
#endif  // !_MSC_VER

GTReqWSDeleteFriend::GTReqWSDeleteFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTReqWSDeleteFriend::InitAsDefaultInstance() {
}

GTReqWSDeleteFriend::GTReqWSDeleteFriend(const GTReqWSDeleteFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTReqWSDeleteFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  otherid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTReqWSDeleteFriend::~GTReqWSDeleteFriend() {
  SharedDtor();
}

void GTReqWSDeleteFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTReqWSDeleteFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTReqWSDeleteFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTReqWSDeleteFriend_descriptor_;
}

const GTReqWSDeleteFriend& GTReqWSDeleteFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

GTReqWSDeleteFriend* GTReqWSDeleteFriend::default_instance_ = NULL;

GTReqWSDeleteFriend* GTReqWSDeleteFriend::New() const {
  return new GTReqWSDeleteFriend;
}

void GTReqWSDeleteFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    otherid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTReqWSDeleteFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_otherid;
        break;
      }

      // required int64 otherid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_otherid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &otherid_)));
          set_has_otherid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTReqWSDeleteFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int64 otherid = 3;
  if (has_otherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->otherid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTReqWSDeleteFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int64 otherid = 3;
  if (has_otherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->otherid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTReqWSDeleteFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int64 otherid = 3;
    if (has_otherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->otherid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTReqWSDeleteFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTReqWSDeleteFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTReqWSDeleteFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTReqWSDeleteFriend::MergeFrom(const GTReqWSDeleteFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_otherid()) {
      set_otherid(from.otherid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTReqWSDeleteFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTReqWSDeleteFriend::CopyFrom(const GTReqWSDeleteFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTReqWSDeleteFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GTReqWSDeleteFriend::Swap(GTReqWSDeleteFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(otherid_, other->otherid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTReqWSDeleteFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTReqWSDeleteFriend_descriptor_;
  metadata.reflection = GTReqWSDeleteFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSTOGTSynOnlineFrined::kMycharidFieldNumber;
const int WSTOGTSynOnlineFrined::kFriendFieldNumber;
#endif  // !_MSC_VER

WSTOGTSynOnlineFrined::WSTOGTSynOnlineFrined()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSTOGTSynOnlineFrined::InitAsDefaultInstance() {
  friend__ = const_cast< ::Friend::SynOnlineFrined*>(&::Friend::SynOnlineFrined::default_instance());
}

WSTOGTSynOnlineFrined::WSTOGTSynOnlineFrined(const WSTOGTSynOnlineFrined& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSTOGTSynOnlineFrined::SharedCtor() {
  _cached_size_ = 0;
  mycharid_ = GOOGLE_LONGLONG(0);
  friend__ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSTOGTSynOnlineFrined::~WSTOGTSynOnlineFrined() {
  SharedDtor();
}

void WSTOGTSynOnlineFrined::SharedDtor() {
  if (this != default_instance_) {
    delete friend__;
  }
}

void WSTOGTSynOnlineFrined::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSTOGTSynOnlineFrined::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSTOGTSynOnlineFrined_descriptor_;
}

const WSTOGTSynOnlineFrined& WSTOGTSynOnlineFrined::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

WSTOGTSynOnlineFrined* WSTOGTSynOnlineFrined::default_instance_ = NULL;

WSTOGTSynOnlineFrined* WSTOGTSynOnlineFrined::New() const {
  return new WSTOGTSynOnlineFrined;
}

void WSTOGTSynOnlineFrined::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mycharid_ = GOOGLE_LONGLONG(0);
    if (has_friend_()) {
      if (friend__ != NULL) friend__->::Friend::SynOnlineFrined::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSTOGTSynOnlineFrined::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 mycharid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mycharid_)));
          set_has_mycharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friend;
        break;
      }

      // required .Friend.SynOnlineFrined friend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friend_()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSTOGTSynOnlineFrined::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 mycharid = 1;
  if (has_mycharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mycharid(), output);
  }

  // required .Friend.SynOnlineFrined friend = 2;
  if (has_friend_()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friend_(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSTOGTSynOnlineFrined::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 mycharid = 1;
  if (has_mycharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mycharid(), target);
  }

  // required .Friend.SynOnlineFrined friend = 2;
  if (has_friend_()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friend_(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSTOGTSynOnlineFrined::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 mycharid = 1;
    if (has_mycharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mycharid());
    }

    // required .Friend.SynOnlineFrined friend = 2;
    if (has_friend_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friend_());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSTOGTSynOnlineFrined::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSTOGTSynOnlineFrined* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSTOGTSynOnlineFrined*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSTOGTSynOnlineFrined::MergeFrom(const WSTOGTSynOnlineFrined& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mycharid()) {
      set_mycharid(from.mycharid());
    }
    if (from.has_friend_()) {
      mutable_friend_()->::Friend::SynOnlineFrined::MergeFrom(from.friend_());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSTOGTSynOnlineFrined::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSTOGTSynOnlineFrined::CopyFrom(const WSTOGTSynOnlineFrined& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSTOGTSynOnlineFrined::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_friend_()) {
    if (!this->friend_().IsInitialized()) return false;
  }
  return true;
}

void WSTOGTSynOnlineFrined::Swap(WSTOGTSynOnlineFrined* other) {
  if (other != this) {
    std::swap(mycharid_, other->mycharid_);
    std::swap(friend__, other->friend__);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSTOGTSynOnlineFrined::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSTOGTSynOnlineFrined_descriptor_;
  metadata.reflection = WSTOGTSynOnlineFrined_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSTOGTFriendInfo::kCharidFieldNumber;
const int WSTOGTFriendInfo::kFriendinfoFieldNumber;
#endif  // !_MSC_VER

WSTOGTFriendInfo::WSTOGTFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSTOGTFriendInfo::InitAsDefaultInstance() {
  friendinfo_ = const_cast< ::Friend::FriendInfo*>(&::Friend::FriendInfo::default_instance());
}

WSTOGTFriendInfo::WSTOGTFriendInfo(const WSTOGTFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSTOGTFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  friendinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSTOGTFriendInfo::~WSTOGTFriendInfo() {
  SharedDtor();
}

void WSTOGTFriendInfo::SharedDtor() {
  if (this != default_instance_) {
    delete friendinfo_;
  }
}

void WSTOGTFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSTOGTFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSTOGTFriendInfo_descriptor_;
}

const WSTOGTFriendInfo& WSTOGTFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

WSTOGTFriendInfo* WSTOGTFriendInfo::default_instance_ = NULL;

WSTOGTFriendInfo* WSTOGTFriendInfo::New() const {
  return new WSTOGTFriendInfo;
}

void WSTOGTFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_friendinfo()) {
      if (friendinfo_ != NULL) friendinfo_->::Friend::FriendInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSTOGTFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_friendinfo;
        break;
      }

      // required .Friend.FriendInfo friendinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSTOGTFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required .Friend.FriendInfo friendinfo = 2;
  if (has_friendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->friendinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSTOGTFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required .Friend.FriendInfo friendinfo = 2;
  if (has_friendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->friendinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSTOGTFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required .Friend.FriendInfo friendinfo = 2;
    if (has_friendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSTOGTFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSTOGTFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSTOGTFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSTOGTFriendInfo::MergeFrom(const WSTOGTFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_friendinfo()) {
      mutable_friendinfo()->::Friend::FriendInfo::MergeFrom(from.friendinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSTOGTFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSTOGTFriendInfo::CopyFrom(const WSTOGTFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSTOGTFriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_friendinfo()) {
    if (!this->friendinfo().IsInitialized()) return false;
  }
  return true;
}

void WSTOGTFriendInfo::Swap(WSTOGTFriendInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(friendinfo_, other->friendinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSTOGTFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSTOGTFriendInfo_descriptor_;
  metadata.reflection = WSTOGTFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSTOGTBlessFriend::kCharidFieldNumber;
const int WSTOGTBlessFriend::kOthercharidFieldNumber;
const int WSTOGTBlessFriend::kFriendnameFieldNumber;
const int WSTOGTBlessFriend::kLvFieldNumber;
#endif  // !_MSC_VER

WSTOGTBlessFriend::WSTOGTBlessFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSTOGTBlessFriend::InitAsDefaultInstance() {
}

WSTOGTBlessFriend::WSTOGTBlessFriend(const WSTOGTBlessFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSTOGTBlessFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  othercharid_ = GOOGLE_LONGLONG(0);
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSTOGTBlessFriend::~WSTOGTBlessFriend() {
  SharedDtor();
}

void WSTOGTBlessFriend::SharedDtor() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (this != default_instance_) {
  }
}

void WSTOGTBlessFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSTOGTBlessFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSTOGTBlessFriend_descriptor_;
}

const WSTOGTBlessFriend& WSTOGTBlessFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

WSTOGTBlessFriend* WSTOGTBlessFriend::default_instance_ = NULL;

WSTOGTBlessFriend* WSTOGTBlessFriend::New() const {
  return new WSTOGTBlessFriend;
}

void WSTOGTBlessFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    othercharid_ = GOOGLE_LONGLONG(0);
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
    lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSTOGTBlessFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_othercharid;
        break;
      }

      // required int64 othercharid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_othercharid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &othercharid_)));
          set_has_othercharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friendname;
        break;
      }

      // required string friendname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // required int32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSTOGTBlessFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int64 othercharid = 2;
  if (has_othercharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->othercharid(), output);
  }

  // required string friendname = 3;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->friendname(), output);
  }

  // required int32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSTOGTBlessFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int64 othercharid = 2;
  if (has_othercharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->othercharid(), target);
  }

  // required string friendname = 3;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->friendname(), target);
  }

  // required int32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSTOGTBlessFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int64 othercharid = 2;
    if (has_othercharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->othercharid());
    }

    // required string friendname = 3;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

    // required int32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSTOGTBlessFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSTOGTBlessFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSTOGTBlessFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSTOGTBlessFriend::MergeFrom(const WSTOGTBlessFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_othercharid()) {
      set_othercharid(from.othercharid());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSTOGTBlessFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSTOGTBlessFriend::CopyFrom(const WSTOGTBlessFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSTOGTBlessFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void WSTOGTBlessFriend::Swap(WSTOGTBlessFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(othercharid_, other->othercharid_);
    std::swap(friendname_, other->friendname_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSTOGTBlessFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSTOGTBlessFriend_descriptor_;
  metadata.reflection = WSTOGTBlessFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTReqWSBlessFriend::kMycharidFieldNumber;
const int GTReqWSBlessFriend::kBressFriendFieldNumber;
#endif  // !_MSC_VER

GTReqWSBlessFriend::GTReqWSBlessFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTReqWSBlessFriend::InitAsDefaultInstance() {
  bressfriend_ = const_cast< ::Friend::ClientReqBlessFriend*>(&::Friend::ClientReqBlessFriend::default_instance());
}

GTReqWSBlessFriend::GTReqWSBlessFriend(const GTReqWSBlessFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTReqWSBlessFriend::SharedCtor() {
  _cached_size_ = 0;
  mycharid_ = GOOGLE_LONGLONG(0);
  bressfriend_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTReqWSBlessFriend::~GTReqWSBlessFriend() {
  SharedDtor();
}

void GTReqWSBlessFriend::SharedDtor() {
  if (this != default_instance_) {
    delete bressfriend_;
  }
}

void GTReqWSBlessFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTReqWSBlessFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTReqWSBlessFriend_descriptor_;
}

const GTReqWSBlessFriend& GTReqWSBlessFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

GTReqWSBlessFriend* GTReqWSBlessFriend::default_instance_ = NULL;

GTReqWSBlessFriend* GTReqWSBlessFriend::New() const {
  return new GTReqWSBlessFriend;
}

void GTReqWSBlessFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mycharid_ = GOOGLE_LONGLONG(0);
    if (has_bressfriend()) {
      if (bressfriend_ != NULL) bressfriend_->::Friend::ClientReqBlessFriend::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTReqWSBlessFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 mycharid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mycharid_)));
          set_has_mycharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bressFriend;
        break;
      }

      // required .Friend.ClientReqBlessFriend bressFriend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bressFriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bressfriend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTReqWSBlessFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 mycharid = 1;
  if (has_mycharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mycharid(), output);
  }

  // required .Friend.ClientReqBlessFriend bressFriend = 2;
  if (has_bressfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->bressfriend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTReqWSBlessFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 mycharid = 1;
  if (has_mycharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mycharid(), target);
  }

  // required .Friend.ClientReqBlessFriend bressFriend = 2;
  if (has_bressfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->bressfriend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTReqWSBlessFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 mycharid = 1;
    if (has_mycharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mycharid());
    }

    // required .Friend.ClientReqBlessFriend bressFriend = 2;
    if (has_bressfriend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bressfriend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTReqWSBlessFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTReqWSBlessFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTReqWSBlessFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTReqWSBlessFriend::MergeFrom(const GTReqWSBlessFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mycharid()) {
      set_mycharid(from.mycharid());
    }
    if (from.has_bressfriend()) {
      mutable_bressfriend()->::Friend::ClientReqBlessFriend::MergeFrom(from.bressfriend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTReqWSBlessFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTReqWSBlessFriend::CopyFrom(const GTReqWSBlessFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTReqWSBlessFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GTReqWSBlessFriend::Swap(GTReqWSBlessFriend* other) {
  if (other != this) {
    std::swap(mycharid_, other->mycharid_);
    std::swap(bressfriend_, other->bressfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTReqWSBlessFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTReqWSBlessFriend_descriptor_;
  metadata.reflection = GTReqWSBlessFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSTOGTAskBlessFriend::kCharidFieldNumber;
const int WSTOGTAskBlessFriend::kBlessfriendFieldNumber;
#endif  // !_MSC_VER

WSTOGTAskBlessFriend::WSTOGTAskBlessFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSTOGTAskBlessFriend::InitAsDefaultInstance() {
  blessfriend_ = const_cast< ::Friend::AskBlessFriend*>(&::Friend::AskBlessFriend::default_instance());
}

WSTOGTAskBlessFriend::WSTOGTAskBlessFriend(const WSTOGTAskBlessFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSTOGTAskBlessFriend::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  blessfriend_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSTOGTAskBlessFriend::~WSTOGTAskBlessFriend() {
  SharedDtor();
}

void WSTOGTAskBlessFriend::SharedDtor() {
  if (this != default_instance_) {
    delete blessfriend_;
  }
}

void WSTOGTAskBlessFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSTOGTAskBlessFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSTOGTAskBlessFriend_descriptor_;
}

const WSTOGTAskBlessFriend& WSTOGTAskBlessFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

WSTOGTAskBlessFriend* WSTOGTAskBlessFriend::default_instance_ = NULL;

WSTOGTAskBlessFriend* WSTOGTAskBlessFriend::New() const {
  return new WSTOGTAskBlessFriend;
}

void WSTOGTAskBlessFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_blessfriend()) {
      if (blessfriend_ != NULL) blessfriend_->::Friend::AskBlessFriend::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSTOGTAskBlessFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_blessfriend;
        break;
      }

      // required .Friend.AskBlessFriend blessfriend = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_blessfriend:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_blessfriend()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSTOGTAskBlessFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required .Friend.AskBlessFriend blessfriend = 2;
  if (has_blessfriend()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->blessfriend(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSTOGTAskBlessFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required .Friend.AskBlessFriend blessfriend = 2;
  if (has_blessfriend()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->blessfriend(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSTOGTAskBlessFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required .Friend.AskBlessFriend blessfriend = 2;
    if (has_blessfriend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->blessfriend());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSTOGTAskBlessFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSTOGTAskBlessFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSTOGTAskBlessFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSTOGTAskBlessFriend::MergeFrom(const WSTOGTAskBlessFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_blessfriend()) {
      mutable_blessfriend()->::Friend::AskBlessFriend::MergeFrom(from.blessfriend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSTOGTAskBlessFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSTOGTAskBlessFriend::CopyFrom(const WSTOGTAskBlessFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSTOGTAskBlessFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_blessfriend()) {
    if (!this->blessfriend().IsInitialized()) return false;
  }
  return true;
}

void WSTOGTAskBlessFriend::Swap(WSTOGTAskBlessFriend* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(blessfriend_, other->blessfriend_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSTOGTAskBlessFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSTOGTAskBlessFriend_descriptor_;
  metadata.reflection = WSTOGTAskBlessFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddPlayerHarted::kMyselfFieldNumber;
const int AddPlayerHarted::kOtherFieldNumber;
#endif  // !_MSC_VER

AddPlayerHarted::AddPlayerHarted()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddPlayerHarted::InitAsDefaultInstance() {
}

AddPlayerHarted::AddPlayerHarted(const AddPlayerHarted& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddPlayerHarted::SharedCtor() {
  _cached_size_ = 0;
  myself_ = GOOGLE_LONGLONG(0);
  other_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddPlayerHarted::~AddPlayerHarted() {
  SharedDtor();
}

void AddPlayerHarted::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddPlayerHarted::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddPlayerHarted::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddPlayerHarted_descriptor_;
}

const AddPlayerHarted& AddPlayerHarted::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

AddPlayerHarted* AddPlayerHarted::default_instance_ = NULL;

AddPlayerHarted* AddPlayerHarted::New() const {
  return new AddPlayerHarted;
}

void AddPlayerHarted::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    myself_ = GOOGLE_LONGLONG(0);
    other_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddPlayerHarted::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 myself = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &myself_)));
          set_has_myself();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_other;
        break;
      }

      // required int64 other = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_other:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &other_)));
          set_has_other();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddPlayerHarted::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 myself = 1;
  if (has_myself()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->myself(), output);
  }

  // required int64 other = 2;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->other(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddPlayerHarted::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 myself = 1;
  if (has_myself()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->myself(), target);
  }

  // required int64 other = 2;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->other(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddPlayerHarted::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 myself = 1;
    if (has_myself()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->myself());
    }

    // required int64 other = 2;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->other());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddPlayerHarted::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddPlayerHarted* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddPlayerHarted*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddPlayerHarted::MergeFrom(const AddPlayerHarted& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_myself()) {
      set_myself(from.myself());
    }
    if (from.has_other()) {
      set_other(from.other());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddPlayerHarted::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddPlayerHarted::CopyFrom(const AddPlayerHarted& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddPlayerHarted::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AddPlayerHarted::Swap(AddPlayerHarted* other) {
  if (other != this) {
    std::swap(myself_, other->myself_);
    std::swap(other_, other->other_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddPlayerHarted::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddPlayerHarted_descriptor_;
  metadata.reflection = AddPlayerHarted_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskAttacked::kCharidFieldNumber;
#endif  // !_MSC_VER

AskAttacked::AskAttacked()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskAttacked::InitAsDefaultInstance() {
}

AskAttacked::AskAttacked(const AskAttacked& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskAttacked::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskAttacked::~AskAttacked() {
  SharedDtor();
}

void AskAttacked::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskAttacked::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskAttacked::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskAttacked_descriptor_;
}

const AskAttacked& AskAttacked::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

AskAttacked* AskAttacked::default_instance_ = NULL;

AskAttacked* AskAttacked::New() const {
  return new AskAttacked;
}

void AskAttacked::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskAttacked::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AskAttacked::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskAttacked::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskAttacked::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskAttacked::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskAttacked* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskAttacked*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskAttacked::MergeFrom(const AskAttacked& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskAttacked::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskAttacked::CopyFrom(const AskAttacked& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskAttacked::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AskAttacked::Swap(AskAttacked* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskAttacked::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskAttacked_descriptor_;
  metadata.reflection = AskAttacked_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqRecommendFriend::kCharidFieldNumber;
const int AckReqRecommendFriend::kNameFieldNumber;
const int AckReqRecommendFriend::kLvFieldNumber;
#endif  // !_MSC_VER

AckReqRecommendFriend::AckReqRecommendFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqRecommendFriend::InitAsDefaultInstance() {
}

AckReqRecommendFriend::AckReqRecommendFriend(const AckReqRecommendFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqRecommendFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqRecommendFriend::~AckReqRecommendFriend() {
  SharedDtor();
}

void AckReqRecommendFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqRecommendFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqRecommendFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqRecommendFriend_descriptor_;
}

const AckReqRecommendFriend& AckReqRecommendFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

AckReqRecommendFriend* AckReqRecommendFriend::default_instance_ = NULL;

AckReqRecommendFriend* AckReqRecommendFriend::New() const {
  return new AckReqRecommendFriend;
}

void AckReqRecommendFriend::Clear() {
  charid_.Clear();
  name_.Clear();
  lv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqRecommendFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_charid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_charid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_charid;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // repeated string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // repeated int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_lv())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_lv())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqRecommendFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 charid = 1;
  for (int i = 0; i < this->charid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->charid(i), output);
  }

  // repeated string name = 2;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(i), output);
  }

  // repeated int32 lv = 3;
  for (int i = 0; i < this->lv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->lv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqRecommendFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 charid = 1;
  for (int i = 0; i < this->charid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->charid(i), target);
  }

  // repeated string name = 2;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->name(i), target);
  }

  // repeated int32 lv = 3;
  for (int i = 0; i < this->lv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->lv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqRecommendFriend::ByteSize() const {
  int total_size = 0;

  // repeated int64 charid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->charid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->charid(i));
    }
    total_size += 1 * this->charid_size() + data_size;
  }

  // repeated string name = 2;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  // repeated int32 lv = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->lv_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->lv(i));
    }
    total_size += 1 * this->lv_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqRecommendFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqRecommendFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqRecommendFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqRecommendFriend::MergeFrom(const AckReqRecommendFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  charid_.MergeFrom(from.charid_);
  name_.MergeFrom(from.name_);
  lv_.MergeFrom(from.lv_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqRecommendFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqRecommendFriend::CopyFrom(const AckReqRecommendFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqRecommendFriend::IsInitialized() const {

  return true;
}

void AckReqRecommendFriend::Swap(AckReqRecommendFriend* other) {
  if (other != this) {
    charid_.Swap(&other->charid_);
    name_.Swap(&other->name_);
    lv_.Swap(&other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqRecommendFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqRecommendFriend_descriptor_;
  metadata.reflection = AckReqRecommendFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSsendGMGainExp::kPlayerIDFieldNumber;
const int WSsendGMGainExp::kLevelFieldNumber;
#endif  // !_MSC_VER

WSsendGMGainExp::WSsendGMGainExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSsendGMGainExp::InitAsDefaultInstance() {
}

WSsendGMGainExp::WSsendGMGainExp(const WSsendGMGainExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSsendGMGainExp::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSsendGMGainExp::~WSsendGMGainExp() {
  SharedDtor();
}

void WSsendGMGainExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSsendGMGainExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSsendGMGainExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSsendGMGainExp_descriptor_;
}

const WSsendGMGainExp& WSsendGMGainExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

WSsendGMGainExp* WSsendGMGainExp::default_instance_ = NULL;

WSsendGMGainExp* WSsendGMGainExp::New() const {
  return new WSsendGMGainExp;
}

void WSsendGMGainExp::Clear() {
  playerid_.Clear();
  level_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSsendGMGainExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_playerid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_playerid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_playerID;
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // repeated int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_level())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_level())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSsendGMGainExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 playerID = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->playerid(i), output);
  }

  // repeated int32 level = 2;
  for (int i = 0; i < this->level_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->level(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSsendGMGainExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 playerID = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->playerid(i), target);
  }

  // repeated int32 level = 2;
  for (int i = 0; i < this->level_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->level(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSsendGMGainExp::ByteSize() const {
  int total_size = 0;

  // repeated int64 playerID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->playerid(i));
    }
    total_size += 1 * this->playerid_size() + data_size;
  }

  // repeated int32 level = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->level_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->level(i));
    }
    total_size += 1 * this->level_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSsendGMGainExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSsendGMGainExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSsendGMGainExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSsendGMGainExp::MergeFrom(const WSsendGMGainExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerid_.MergeFrom(from.playerid_);
  level_.MergeFrom(from.level_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSsendGMGainExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSsendGMGainExp::CopyFrom(const WSsendGMGainExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSsendGMGainExp::IsInitialized() const {

  return true;
}

void WSsendGMGainExp::Swap(WSsendGMGainExp* other) {
  if (other != this) {
    playerid_.Swap(&other->playerid_);
    level_.Swap(&other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSsendGMGainExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSsendGMGainExp_descriptor_;
  metadata.reflection = WSsendGMGainExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AddFriendList::kFriendListFieldNumber;
#endif  // !_MSC_VER

AddFriendList::AddFriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AddFriendList::InitAsDefaultInstance() {
}

AddFriendList::AddFriendList(const AddFriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AddFriendList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AddFriendList::~AddFriendList() {
  SharedDtor();
}

void AddFriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AddFriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AddFriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AddFriendList_descriptor_;
}

const AddFriendList& AddFriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

AddFriendList* AddFriendList::default_instance_ = NULL;

AddFriendList* AddFriendList::New() const {
  return new AddFriendList;
}

void AddFriendList::Clear() {
  friendlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AddFriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Friend.AddFriend friendList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friendList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AddFriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Friend.AddFriend friendList = 1;
  for (int i = 0; i < this->friendlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AddFriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Friend.AddFriend friendList = 1;
  for (int i = 0; i < this->friendlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AddFriendList::ByteSize() const {
  int total_size = 0;

  // repeated .Friend.AddFriend friendList = 1;
  total_size += 1 * this->friendlist_size();
  for (int i = 0; i < this->friendlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AddFriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AddFriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AddFriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AddFriendList::MergeFrom(const AddFriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendlist_.MergeFrom(from.friendlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AddFriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AddFriendList::CopyFrom(const AddFriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AddFriendList::IsInitialized() const {

  for (int i = 0; i < friendlist_size(); i++) {
    if (!this->friendlist(i).IsInitialized()) return false;
  }
  return true;
}

void AddFriendList::Swap(AddFriendList* other) {
  if (other != this) {
    friendlist_.Swap(&other->friendlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AddFriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AddFriendList_descriptor_;
  metadata.reflection = AddFriendList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskAddFriendList::kErrorFieldNumber;
const int AskAddFriendList::kAskFriendListFieldNumber;
#endif  // !_MSC_VER

AskAddFriendList::AskAddFriendList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskAddFriendList::InitAsDefaultInstance() {
}

AskAddFriendList::AskAddFriendList(const AskAddFriendList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskAddFriendList::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskAddFriendList::~AskAddFriendList() {
  SharedDtor();
}

void AskAddFriendList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskAddFriendList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskAddFriendList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskAddFriendList_descriptor_;
}

const AskAddFriendList& AskAddFriendList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

AskAddFriendList* AskAddFriendList::default_instance_ = NULL;

AskAddFriendList* AskAddFriendList::New() const {
  return new AskAddFriendList;
}

void AskAddFriendList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
  }
  askfriendlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskAddFriendList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_askFriendList;
        break;
      }

      // repeated .Friend.AskAddFriend askFriendList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_askFriendList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_askfriendlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_askFriendList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AskAddFriendList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Friend.AskAddFriend askFriendList = 2;
  for (int i = 0; i < this->askfriendlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->askfriendlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskAddFriendList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Friend.AskAddFriend askFriendList = 2;
  for (int i = 0; i < this->askfriendlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->askfriendlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskAddFriendList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  // repeated .Friend.AskAddFriend askFriendList = 2;
  total_size += 1 * this->askfriendlist_size();
  for (int i = 0; i < this->askfriendlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->askfriendlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskAddFriendList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskAddFriendList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskAddFriendList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskAddFriendList::MergeFrom(const AskAddFriendList& from) {
  GOOGLE_CHECK_NE(&from, this);
  askfriendlist_.MergeFrom(from.askfriendlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskAddFriendList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskAddFriendList::CopyFrom(const AskAddFriendList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskAddFriendList::IsInitialized() const {

  for (int i = 0; i < askfriendlist_size(); i++) {
    if (!this->askfriendlist(i).IsInitialized()) return false;
  }
  return true;
}

void AskAddFriendList::Swap(AskAddFriendList* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    askfriendlist_.Swap(&other->askfriendlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskAddFriendList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskAddFriendList_descriptor_;
  metadata.reflection = AskAddFriendList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendRecommendation::kPlayerIDFieldNumber;
const int FriendRecommendation::kProfessionFieldNumber;
const int FriendRecommendation::kGenderFieldNumber;
const int FriendRecommendation::kNameFieldNumber;
#endif  // !_MSC_VER

FriendRecommendation::FriendRecommendation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendRecommendation::InitAsDefaultInstance() {
}

FriendRecommendation::FriendRecommendation(const FriendRecommendation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendRecommendation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendRecommendation::~FriendRecommendation() {
  SharedDtor();
}

void FriendRecommendation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendRecommendation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendRecommendation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendRecommendation_descriptor_;
}

const FriendRecommendation& FriendRecommendation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

FriendRecommendation* FriendRecommendation::default_instance_ = NULL;

FriendRecommendation* FriendRecommendation::New() const {
  return new FriendRecommendation;
}

void FriendRecommendation::Clear() {
  playerid_.Clear();
  profession_.Clear();
  gender_.Clear();
  name_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendRecommendation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_playerid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_playerid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_playerID;
        if (input->ExpectTag(16)) goto parse_profession;
        break;
      }

      // repeated int32 profession = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_profession())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_profession())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_profession;
        if (input->ExpectTag(24)) goto parse_gender;
        break;
      }

      // repeated int32 gender = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gender:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_gender())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_gender())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_gender;
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // repeated string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name(this->name_size() - 1).data(),
            this->name(this->name_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendRecommendation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 playerID = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->playerid(i), output);
  }

  // repeated int32 profession = 2;
  for (int i = 0; i < this->profession_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->profession(i), output);
  }

  // repeated int32 gender = 3;
  for (int i = 0; i < this->gender_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->gender(i), output);
  }

  // repeated string name = 4;
  for (int i = 0; i < this->name_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->name(i).data(), this->name(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendRecommendation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 playerID = 1;
  for (int i = 0; i < this->playerid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->playerid(i), target);
  }

  // repeated int32 profession = 2;
  for (int i = 0; i < this->profession_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->profession(i), target);
  }

  // repeated int32 gender = 3;
  for (int i = 0; i < this->gender_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->gender(i), target);
  }

  // repeated string name = 4;
  for (int i = 0; i < this->name_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name(i).data(), this->name(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->name(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendRecommendation::ByteSize() const {
  int total_size = 0;

  // repeated int64 playerID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->playerid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->playerid(i));
    }
    total_size += 1 * this->playerid_size() + data_size;
  }

  // repeated int32 profession = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->profession_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->profession(i));
    }
    total_size += 1 * this->profession_size() + data_size;
  }

  // repeated int32 gender = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->gender_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->gender(i));
    }
    total_size += 1 * this->gender_size() + data_size;
  }

  // repeated string name = 4;
  total_size += 1 * this->name_size();
  for (int i = 0; i < this->name_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->name(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendRecommendation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendRecommendation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendRecommendation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendRecommendation::MergeFrom(const FriendRecommendation& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerid_.MergeFrom(from.playerid_);
  profession_.MergeFrom(from.profession_);
  gender_.MergeFrom(from.gender_);
  name_.MergeFrom(from.name_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendRecommendation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendRecommendation::CopyFrom(const FriendRecommendation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendRecommendation::IsInitialized() const {

  return true;
}

void FriendRecommendation::Swap(FriendRecommendation* other) {
  if (other != this) {
    playerid_.Swap(&other->playerid_);
    profession_.Swap(&other->profession_);
    gender_.Swap(&other->gender_);
    name_.Swap(&other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendRecommendation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendRecommendation_descriptor_;
  metadata.reflection = FriendRecommendation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerReturnInfo::kPlayerIDFieldNumber;
const int PlayerReturnInfo::kErrorFieldNumber;
#endif  // !_MSC_VER

PlayerReturnInfo::PlayerReturnInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerReturnInfo::InitAsDefaultInstance() {
}

PlayerReturnInfo::PlayerReturnInfo(const PlayerReturnInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerReturnInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  error_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerReturnInfo::~PlayerReturnInfo() {
  SharedDtor();
}

void PlayerReturnInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerReturnInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerReturnInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerReturnInfo_descriptor_;
}

const PlayerReturnInfo& PlayerReturnInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

PlayerReturnInfo* PlayerReturnInfo::default_instance_ = NULL;

PlayerReturnInfo* PlayerReturnInfo::New() const {
  return new PlayerReturnInfo;
}

void PlayerReturnInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    error_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerReturnInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_error;
        break;
      }

      // optional int32 error = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerReturnInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int32 error = 2;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->error(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerReturnInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int32 error = 2;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->error(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerReturnInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int32 error = 2;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerReturnInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerReturnInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerReturnInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerReturnInfo::MergeFrom(const PlayerReturnInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_error()) {
      set_error(from.error());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerReturnInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerReturnInfo::CopyFrom(const PlayerReturnInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerReturnInfo::IsInitialized() const {

  return true;
}

void PlayerReturnInfo::Swap(PlayerReturnInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(error_, other->error_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerReturnInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerReturnInfo_descriptor_;
  metadata.reflection = PlayerReturnInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendReturnError::kErrorFieldNumber;
const int FriendReturnError::kPlayerInfoFieldNumber;
const int FriendReturnError::kSurplusCountsFieldNumber;
#endif  // !_MSC_VER

FriendReturnError::FriendReturnError()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendReturnError::InitAsDefaultInstance() {
}

FriendReturnError::FriendReturnError(const FriendReturnError& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendReturnError::SharedCtor() {
  _cached_size_ = 0;
  error_ = 0;
  surpluscounts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendReturnError::~FriendReturnError() {
  SharedDtor();
}

void FriendReturnError::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendReturnError::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendReturnError::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendReturnError_descriptor_;
}

const FriendReturnError& FriendReturnError::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

FriendReturnError* FriendReturnError::default_instance_ = NULL;

FriendReturnError* FriendReturnError::New() const {
  return new FriendReturnError;
}

void FriendReturnError::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    error_ = 0;
    surpluscounts_ = 0;
  }
  playerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendReturnError::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 error = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerInfo;
        break;
      }

      // repeated .Friend.PlayerReturnInfo playerInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerInfo;
        if (input->ExpectTag(24)) goto parse_SurplusCounts;
        break;
      }

      // optional int32 SurplusCounts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_SurplusCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surpluscounts_)));
          set_has_surpluscounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendReturnError::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 error = 1;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->error(), output);
  }

  // repeated .Friend.PlayerReturnInfo playerInfo = 2;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerinfo(i), output);
  }

  // optional int32 SurplusCounts = 3;
  if (has_surpluscounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->surpluscounts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendReturnError::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 error = 1;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->error(), target);
  }

  // repeated .Friend.PlayerReturnInfo playerInfo = 2;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerinfo(i), target);
  }

  // optional int32 SurplusCounts = 3;
  if (has_surpluscounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->surpluscounts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendReturnError::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 error = 1;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int32 SurplusCounts = 3;
    if (has_surpluscounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surpluscounts());
    }

  }
  // repeated .Friend.PlayerReturnInfo playerInfo = 2;
  total_size += 1 * this->playerinfo_size();
  for (int i = 0; i < this->playerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendReturnError::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendReturnError* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendReturnError*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendReturnError::MergeFrom(const FriendReturnError& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerinfo_.MergeFrom(from.playerinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_surpluscounts()) {
      set_surpluscounts(from.surpluscounts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendReturnError::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendReturnError::CopyFrom(const FriendReturnError& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendReturnError::IsInitialized() const {

  return true;
}

void FriendReturnError::Swap(FriendReturnError* other) {
  if (other != this) {
    std::swap(error_, other->error_);
    playerinfo_.Swap(&other->playerinfo_);
    std::swap(surpluscounts_, other->surpluscounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendReturnError::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendReturnError_descriptor_;
  metadata.reflection = FriendReturnError_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqReplyAddFriend::kFlagFieldNumber;
const int ReqReplyAddFriend::kTargetidFieldNumber;
#endif  // !_MSC_VER

ReqReplyAddFriend::ReqReplyAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqReplyAddFriend::InitAsDefaultInstance() {
}

ReqReplyAddFriend::ReqReplyAddFriend(const ReqReplyAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqReplyAddFriend::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqReplyAddFriend::~ReqReplyAddFriend() {
  SharedDtor();
}

void ReqReplyAddFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqReplyAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqReplyAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqReplyAddFriend_descriptor_;
}

const ReqReplyAddFriend& ReqReplyAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

ReqReplyAddFriend* ReqReplyAddFriend::default_instance_ = NULL;

ReqReplyAddFriend* ReqReplyAddFriend::New() const {
  return new ReqReplyAddFriend;
}

void ReqReplyAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
  }
  targetid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqReplyAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetid;
        break;
      }

      // repeated int64 targetid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_targetid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_targetid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_targetid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqReplyAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // repeated int64 targetid = 2;
  for (int i = 0; i < this->targetid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->targetid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqReplyAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // repeated int64 targetid = 2;
  for (int i = 0; i < this->targetid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->targetid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqReplyAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  // repeated int64 targetid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->targetid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->targetid(i));
    }
    total_size += 1 * this->targetid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqReplyAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqReplyAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqReplyAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqReplyAddFriend::MergeFrom(const ReqReplyAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetid_.MergeFrom(from.targetid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqReplyAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqReplyAddFriend::CopyFrom(const ReqReplyAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqReplyAddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqReplyAddFriend::Swap(ReqReplyAddFriend* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    targetid_.Swap(&other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqReplyAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqReplyAddFriend_descriptor_;
  metadata.reflection = ReqReplyAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckReqReplyAddFriend::kCodeFieldNumber;
const int AckReqReplyAddFriend::kFlagFieldNumber;
const int AckReqReplyAddFriend::kTargetidFieldNumber;
#endif  // !_MSC_VER

AckReqReplyAddFriend::AckReqReplyAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqReplyAddFriend::InitAsDefaultInstance() {
}

AckReqReplyAddFriend::AckReqReplyAddFriend(const AckReqReplyAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqReplyAddFriend::SharedCtor() {
  _cached_size_ = 0;
  code_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqReplyAddFriend::~AckReqReplyAddFriend() {
  SharedDtor();
}

void AckReqReplyAddFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqReplyAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqReplyAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqReplyAddFriend_descriptor_;
}

const AckReqReplyAddFriend& AckReqReplyAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

AckReqReplyAddFriend* AckReqReplyAddFriend::default_instance_ = NULL;

AckReqReplyAddFriend* AckReqReplyAddFriend::New() const {
  return new AckReqReplyAddFriend;
}

void AckReqReplyAddFriend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    code_ = 0;
    flag_ = 0;
  }
  targetid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqReplyAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 code = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &code_)));
          set_has_code();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional int32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetid;
        break;
      }

      // repeated int64 targetid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_targetid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_targetid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_targetid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqReplyAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 code = 1;
  if (has_code()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->code(), output);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->flag(), output);
  }

  // repeated int64 targetid = 3;
  for (int i = 0; i < this->targetid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->targetid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqReplyAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 code = 1;
  if (has_code()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->code(), target);
  }

  // optional int32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->flag(), target);
  }

  // repeated int64 targetid = 3;
  for (int i = 0; i < this->targetid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->targetid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqReplyAddFriend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 code = 1;
    if (has_code()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->code());
    }

    // optional int32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  // repeated int64 targetid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->targetid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->targetid(i));
    }
    total_size += 1 * this->targetid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqReplyAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqReplyAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqReplyAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqReplyAddFriend::MergeFrom(const AckReqReplyAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  targetid_.MergeFrom(from.targetid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_code()) {
      set_code(from.code());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqReplyAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqReplyAddFriend::CopyFrom(const AckReqReplyAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqReplyAddFriend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReqReplyAddFriend::Swap(AckReqReplyAddFriend* other) {
  if (other != this) {
    std::swap(code_, other->code_);
    std::swap(flag_, other->flag_);
    targetid_.Swap(&other->targetid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqReplyAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqReplyAddFriend_descriptor_;
  metadata.reflection = AckReqReplyAddFriend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NoticeAddFriend::kInfoFieldNumber;
#endif  // !_MSC_VER

NoticeAddFriend::NoticeAddFriend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoticeAddFriend::InitAsDefaultInstance() {
}

NoticeAddFriend::NoticeAddFriend(const NoticeAddFriend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoticeAddFriend::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoticeAddFriend::~NoticeAddFriend() {
  SharedDtor();
}

void NoticeAddFriend::SharedDtor() {
  if (this != default_instance_) {
  }
}

void NoticeAddFriend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoticeAddFriend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoticeAddFriend_descriptor_;
}

const NoticeAddFriend& NoticeAddFriend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Friend_2fFriendMessage_2eproto();
  return *default_instance_;
}

NoticeAddFriend* NoticeAddFriend::default_instance_ = NULL;

NoticeAddFriend* NoticeAddFriend::New() const {
  return new NoticeAddFriend;
}

void NoticeAddFriend::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoticeAddFriend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .Friend.FriendInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NoticeAddFriend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .Friend.FriendInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoticeAddFriend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .Friend.FriendInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoticeAddFriend::ByteSize() const {
  int total_size = 0;

  // repeated .Friend.FriendInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoticeAddFriend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoticeAddFriend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoticeAddFriend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoticeAddFriend::MergeFrom(const NoticeAddFriend& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoticeAddFriend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeAddFriend::CopyFrom(const NoticeAddFriend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeAddFriend::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void NoticeAddFriend::Swap(NoticeAddFriend* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoticeAddFriend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoticeAddFriend_descriptor_;
  metadata.reflection = NoticeAddFriend_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Friend

// @@protoc_insertion_point(global_scope)
