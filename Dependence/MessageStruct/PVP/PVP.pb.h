// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PVP/PVP.proto

#ifndef PROTOBUF_PVP_2fPVP_2eproto__INCLUDED
#define PROTOBUF_PVP_2fPVP_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace PvPPackage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_PVP_2fPVP_2eproto();
void protobuf_AssignDesc_PVP_2fPVP_2eproto();
void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

class AckReqPVPMapID;
class ReqGather;
class AckGather;
class GaterResult;
class AckKillData;
class KillData;
class PVPPrize;
class AckFitchPrize;
class PlayerPvPData;
class pvpData;
class PvPBossDamagData;
class BossDamageData;
class BossHP;
class IntegralData;
class PvPIntegralData;
class BossDeadData;
class PvPBossDeadData;
class PVPMapInfos;
class PVPMap;
class PlayerPVPDataList;
class PlayerPVPData;
class ReqPlayerPVPData;
class AckPlayerPVPData;
class GstoWsBossDead;
class BossDamageDataEX;
class ReqDamageRank;
class AckWstoGsDamageRank;
class WstoGsAddItem;
class ItemData;
class WSToGMPVPState;

// ===================================================================

class AckReqPVPMapID : public ::google::protobuf::Message {
 public:
  AckReqPVPMapID();
  virtual ~AckReqPVPMapID();

  AckReqPVPMapID(const AckReqPVPMapID& from);

  inline AckReqPVPMapID& operator=(const AckReqPVPMapID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckReqPVPMapID& default_instance();

  void Swap(AckReqPVPMapID* other);

  // implements Message ----------------------------------------------

  AckReqPVPMapID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckReqPVPMapID& from);
  void MergeFrom(const AckReqPVPMapID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.AckReqPVPMapID)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static AckReqPVPMapID* default_instance_;
};
// -------------------------------------------------------------------

class ReqGather : public ::google::protobuf::Message {
 public:
  ReqGather();
  virtual ~ReqGather();

  ReqGather(const ReqGather& from);

  inline ReqGather& operator=(const ReqGather& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGather& default_instance();

  void Swap(ReqGather* other);

  // implements Message ----------------------------------------------

  ReqGather* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqGather& from);
  void MergeFrom(const ReqGather& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.ReqGather)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static ReqGather* default_instance_;
};
// -------------------------------------------------------------------

class AckGather : public ::google::protobuf::Message {
 public:
  AckGather();
  virtual ~AckGather();

  AckGather(const AckGather& from);

  inline AckGather& operator=(const AckGather& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGather& default_instance();

  void Swap(AckGather* other);

  // implements Message ----------------------------------------------

  AckGather* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGather& from);
  void MergeFrom(const AckGather& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.AckGather)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static AckGather* default_instance_;
};
// -------------------------------------------------------------------

class GaterResult : public ::google::protobuf::Message {
 public:
  GaterResult();
  virtual ~GaterResult();

  GaterResult(const GaterResult& from);

  inline GaterResult& operator=(const GaterResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GaterResult& default_instance();

  void Swap(GaterResult* other);

  // implements Message ----------------------------------------------

  GaterResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GaterResult& from);
  void MergeFrom(const GaterResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 result = 1;
  inline bool has_result() const;
  inline void clear_result();
  static const int kResultFieldNumber = 1;
  inline ::google::protobuf::int32 result() const;
  inline void set_result(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.GaterResult)
 private:
  inline void set_has_result();
  inline void clear_has_result();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 result_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static GaterResult* default_instance_;
};
// -------------------------------------------------------------------

class AckKillData : public ::google::protobuf::Message {
 public:
  AckKillData();
  virtual ~AckKillData();

  AckKillData(const AckKillData& from);

  inline AckKillData& operator=(const AckKillData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckKillData& default_instance();

  void Swap(AckKillData* other);

  // implements Message ----------------------------------------------

  AckKillData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckKillData& from);
  void MergeFrom(const AckKillData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PvPPackage.KillData list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::PvPPackage::KillData& list(int index) const;
  inline ::PvPPackage::KillData* mutable_list(int index);
  inline ::PvPPackage::KillData* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::KillData >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::KillData >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:PvPPackage.AckKillData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PvPPackage::KillData > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static AckKillData* default_instance_;
};
// -------------------------------------------------------------------

class KillData : public ::google::protobuf::Message {
 public:
  KillData();
  virtual ~KillData();

  KillData(const KillData& from);

  inline KillData& operator=(const KillData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const KillData& default_instance();

  void Swap(KillData* other);

  // implements Message ----------------------------------------------

  KillData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const KillData& from);
  void MergeFrom(const KillData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 power = 3;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 3;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // optional int32 viplevel = 4;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 4;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional int32 kills = 5;
  inline bool has_kills() const;
  inline void clear_kills();
  static const int kKillsFieldNumber = 5;
  inline ::google::protobuf::int32 kills() const;
  inline void set_kills(::google::protobuf::int32 value);

  // optional int64 charid = 6;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 6;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.KillData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_kills();
  inline void clear_has_kills();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 kills_;
  ::google::protobuf::int64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static KillData* default_instance_;
};
// -------------------------------------------------------------------

class PVPPrize : public ::google::protobuf::Message {
 public:
  PVPPrize();
  virtual ~PVPPrize();

  PVPPrize(const PVPPrize& from);

  inline PVPPrize& operator=(const PVPPrize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPPrize& default_instance();

  void Swap(PVPPrize* other);

  // implements Message ----------------------------------------------

  PVPPrize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVPPrize& from);
  void MergeFrom(const PVPPrize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 integral = 1;
  inline bool has_integral() const;
  inline void clear_integral();
  static const int kIntegralFieldNumber = 1;
  inline ::google::protobuf::int32 integral() const;
  inline void set_integral(::google::protobuf::int32 value);

  // optional int32 integralSort = 2;
  inline bool has_integralsort() const;
  inline void clear_integralsort();
  static const int kIntegralSortFieldNumber = 2;
  inline ::google::protobuf::int32 integralsort() const;
  inline void set_integralsort(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.PVPPrize)
 private:
  inline void set_has_integral();
  inline void clear_has_integral();
  inline void set_has_integralsort();
  inline void clear_has_integralsort();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 integral_;
  ::google::protobuf::int32 integralsort_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static PVPPrize* default_instance_;
};
// -------------------------------------------------------------------

class AckFitchPrize : public ::google::protobuf::Message {
 public:
  AckFitchPrize();
  virtual ~AckFitchPrize();

  AckFitchPrize(const AckFitchPrize& from);

  inline AckFitchPrize& operator=(const AckFitchPrize& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckFitchPrize& default_instance();

  void Swap(AckFitchPrize* other);

  // implements Message ----------------------------------------------

  AckFitchPrize* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckFitchPrize& from);
  void MergeFrom(const AckFitchPrize& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.AckFitchPrize)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static AckFitchPrize* default_instance_;
};
// -------------------------------------------------------------------

class PlayerPvPData : public ::google::protobuf::Message {
 public:
  PlayerPvPData();
  virtual ~PlayerPvPData();

  PlayerPvPData(const PlayerPvPData& from);

  inline PlayerPvPData& operator=(const PlayerPvPData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerPvPData& default_instance();

  void Swap(PlayerPvPData* other);

  // implements Message ----------------------------------------------

  PlayerPvPData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerPvPData& from);
  void MergeFrom(const PlayerPvPData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PvPPackage.pvpData info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::PvPPackage::pvpData& info(int index) const;
  inline ::PvPPackage::pvpData* mutable_info(int index);
  inline ::PvPPackage::pvpData* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::pvpData >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::pvpData >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:PvPPackage.PlayerPvPData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PvPPackage::pvpData > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static PlayerPvPData* default_instance_;
};
// -------------------------------------------------------------------

class pvpData : public ::google::protobuf::Message {
 public:
  pvpData();
  virtual ~pvpData();

  pvpData(const pvpData& from);

  inline pvpData& operator=(const pvpData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const pvpData& default_instance();

  void Swap(pvpData* other);

  // implements Message ----------------------------------------------

  pvpData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const pvpData& from);
  void MergeFrom(const pvpData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.pvpData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static pvpData* default_instance_;
};
// -------------------------------------------------------------------

class PvPBossDamagData : public ::google::protobuf::Message {
 public:
  PvPBossDamagData();
  virtual ~PvPBossDamagData();

  PvPBossDamagData(const PvPBossDamagData& from);

  inline PvPBossDamagData& operator=(const PvPBossDamagData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPBossDamagData& default_instance();

  void Swap(PvPBossDamagData* other);

  // implements Message ----------------------------------------------

  PvPBossDamagData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPBossDamagData& from);
  void MergeFrom(const PvPBossDamagData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PvPPackage.BossDamageData info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::PvPPackage::BossDamageData& info(int index) const;
  inline ::PvPPackage::BossDamageData* mutable_info(int index);
  inline ::PvPPackage::BossDamageData* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::BossDamageData >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::BossDamageData >*
      mutable_info();

  // optional int32 sort = 2;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 2;
  inline ::google::protobuf::int32 sort() const;
  inline void set_sort(::google::protobuf::int32 value);

  // optional int32 damage = 3;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 3;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.PvPBossDamagData)
 private:
  inline void set_has_sort();
  inline void clear_has_sort();
  inline void set_has_damage();
  inline void clear_has_damage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PvPPackage::BossDamageData > info_;
  ::google::protobuf::int32 sort_;
  ::google::protobuf::int32 damage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static PvPBossDamagData* default_instance_;
};
// -------------------------------------------------------------------

class BossDamageData : public ::google::protobuf::Message {
 public:
  BossDamageData();
  virtual ~BossDamageData();

  BossDamageData(const BossDamageData& from);

  inline BossDamageData& operator=(const BossDamageData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossDamageData& default_instance();

  void Swap(BossDamageData* other);

  // implements Message ----------------------------------------------

  BossDamageData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossDamageData& from);
  void MergeFrom(const BossDamageData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 viplevel = 2;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 2;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional int32 damage = 3;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 3;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // optional int64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.BossDamageData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static BossDamageData* default_instance_;
};
// -------------------------------------------------------------------

class BossHP : public ::google::protobuf::Message {
 public:
  BossHP();
  virtual ~BossHP();

  BossHP(const BossHP& from);

  inline BossHP& operator=(const BossHP& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossHP& default_instance();

  void Swap(BossHP* other);

  // implements Message ----------------------------------------------

  BossHP* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossHP& from);
  void MergeFrom(const BossHP& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 hp = 1;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 1;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.BossHP)
 private:
  inline void set_has_hp();
  inline void clear_has_hp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 hp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static BossHP* default_instance_;
};
// -------------------------------------------------------------------

class IntegralData : public ::google::protobuf::Message {
 public:
  IntegralData();
  virtual ~IntegralData();

  IntegralData(const IntegralData& from);

  inline IntegralData& operator=(const IntegralData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IntegralData& default_instance();

  void Swap(IntegralData* other);

  // implements Message ----------------------------------------------

  IntegralData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IntegralData& from);
  void MergeFrom(const IntegralData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PvPPackage.PvPIntegralData info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::PvPPackage::PvPIntegralData& info(int index) const;
  inline ::PvPPackage::PvPIntegralData* mutable_info(int index);
  inline ::PvPPackage::PvPIntegralData* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::PvPIntegralData >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::PvPIntegralData >*
      mutable_info();

  // optional int32 sort = 2;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 2;
  inline ::google::protobuf::int32 sort() const;
  inline void set_sort(::google::protobuf::int32 value);

  // optional int32 integral = 3;
  inline bool has_integral() const;
  inline void clear_integral();
  static const int kIntegralFieldNumber = 3;
  inline ::google::protobuf::int32 integral() const;
  inline void set_integral(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.IntegralData)
 private:
  inline void set_has_sort();
  inline void clear_has_sort();
  inline void set_has_integral();
  inline void clear_has_integral();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PvPPackage::PvPIntegralData > info_;
  ::google::protobuf::int32 sort_;
  ::google::protobuf::int32 integral_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static IntegralData* default_instance_;
};
// -------------------------------------------------------------------

class PvPIntegralData : public ::google::protobuf::Message {
 public:
  PvPIntegralData();
  virtual ~PvPIntegralData();

  PvPIntegralData(const PvPIntegralData& from);

  inline PvPIntegralData& operator=(const PvPIntegralData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPIntegralData& default_instance();

  void Swap(PvPIntegralData* other);

  // implements Message ----------------------------------------------

  PvPIntegralData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPIntegralData& from);
  void MergeFrom(const PvPIntegralData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 integral = 2;
  inline bool has_integral() const;
  inline void clear_integral();
  static const int kIntegralFieldNumber = 2;
  inline ::google::protobuf::int32 integral() const;
  inline void set_integral(::google::protobuf::int32 value);

  // optional int32 integralSort = 3;
  inline bool has_integralsort() const;
  inline void clear_integralsort();
  static const int kIntegralSortFieldNumber = 3;
  inline ::google::protobuf::int32 integralsort() const;
  inline void set_integralsort(::google::protobuf::int32 value);

  // optional int64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.PvPIntegralData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_integral();
  inline void clear_has_integral();
  inline void set_has_integralsort();
  inline void clear_has_integralsort();
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 integral_;
  ::google::protobuf::int32 integralsort_;
  ::google::protobuf::int64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static PvPIntegralData* default_instance_;
};
// -------------------------------------------------------------------

class BossDeadData : public ::google::protobuf::Message {
 public:
  BossDeadData();
  virtual ~BossDeadData();

  BossDeadData(const BossDeadData& from);

  inline BossDeadData& operator=(const BossDeadData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossDeadData& default_instance();

  void Swap(BossDeadData* other);

  // implements Message ----------------------------------------------

  BossDeadData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossDeadData& from);
  void MergeFrom(const BossDeadData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PvPPackage.PvPBossDeadData info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::PvPPackage::PvPBossDeadData& info(int index) const;
  inline ::PvPPackage::PvPBossDeadData* mutable_info(int index);
  inline ::PvPPackage::PvPBossDeadData* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::PvPBossDeadData >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::PvPBossDeadData >*
      mutable_info();

  // optional .PvPPackage.PvPBossDeadData lastAttact = 2;
  inline bool has_lastattact() const;
  inline void clear_lastattact();
  static const int kLastAttactFieldNumber = 2;
  inline const ::PvPPackage::PvPBossDeadData& lastattact() const;
  inline ::PvPPackage::PvPBossDeadData* mutable_lastattact();
  inline ::PvPPackage::PvPBossDeadData* release_lastattact();
  inline void set_allocated_lastattact(::PvPPackage::PvPBossDeadData* lastattact);

  // optional int32 sort = 3;
  inline bool has_sort() const;
  inline void clear_sort();
  static const int kSortFieldNumber = 3;
  inline ::google::protobuf::int32 sort() const;
  inline void set_sort(::google::protobuf::int32 value);

  // optional int32 damage = 4;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 4;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.BossDeadData)
 private:
  inline void set_has_lastattact();
  inline void clear_has_lastattact();
  inline void set_has_sort();
  inline void clear_has_sort();
  inline void set_has_damage();
  inline void clear_has_damage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PvPPackage::PvPBossDeadData > info_;
  ::PvPPackage::PvPBossDeadData* lastattact_;
  ::google::protobuf::int32 sort_;
  ::google::protobuf::int32 damage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static BossDeadData* default_instance_;
};
// -------------------------------------------------------------------

class PvPBossDeadData : public ::google::protobuf::Message {
 public:
  PvPBossDeadData();
  virtual ~PvPBossDeadData();

  PvPBossDeadData(const PvPBossDeadData& from);

  inline PvPBossDeadData& operator=(const PvPBossDeadData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PvPBossDeadData& default_instance();

  void Swap(PvPBossDeadData* other);

  // implements Message ----------------------------------------------

  PvPBossDeadData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PvPBossDeadData& from);
  void MergeFrom(const PvPBossDeadData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bytes name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 viplevel = 2;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 2;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional int32 damage = 3;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 3;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // optional int64 charid = 4;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 4;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 pro = 6;
  inline bool has_pro() const;
  inline void clear_pro();
  static const int kProFieldNumber = 6;
  inline ::google::protobuf::int32 pro() const;
  inline void set_pro(::google::protobuf::int32 value);

  // optional int32 lv = 7;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 7;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.PvPBossDeadData)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_damage();
  inline void clear_has_damage();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_pro();
  inline void clear_has_pro();
  inline void set_has_lv();
  inline void clear_has_lv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 damage_;
  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 pro_;
  ::google::protobuf::int32 lv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static PvPBossDeadData* default_instance_;
};
// -------------------------------------------------------------------

class PVPMapInfos : public ::google::protobuf::Message {
 public:
  PVPMapInfos();
  virtual ~PVPMapInfos();

  PVPMapInfos(const PVPMapInfos& from);

  inline PVPMapInfos& operator=(const PVPMapInfos& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPMapInfos& default_instance();

  void Swap(PVPMapInfos* other);

  // implements Message ----------------------------------------------

  PVPMapInfos* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVPMapInfos& from);
  void MergeFrom(const PVPMapInfos& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PvPPackage.PVPMap info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::PvPPackage::PVPMap& info(int index) const;
  inline ::PvPPackage::PVPMap* mutable_info(int index);
  inline ::PvPPackage::PVPMap* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::PVPMap >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::PVPMap >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:PvPPackage.PVPMapInfos)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PvPPackage::PVPMap > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static PVPMapInfos* default_instance_;
};
// -------------------------------------------------------------------

class PVPMap : public ::google::protobuf::Message {
 public:
  PVPMap();
  virtual ~PVPMap();

  PVPMap(const PVPMap& from);

  inline PVPMap& operator=(const PVPMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PVPMap& default_instance();

  void Swap(PVPMap* other);

  // implements Message ----------------------------------------------

  PVPMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PVPMap& from);
  void MergeFrom(const PVPMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 layer = 1;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 1;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // optional int64 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.PVPMap)
 private:
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::google::protobuf::int32 layer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static PVPMap* default_instance_;
};
// -------------------------------------------------------------------

class PlayerPVPDataList : public ::google::protobuf::Message {
 public:
  PlayerPVPDataList();
  virtual ~PlayerPVPDataList();

  PlayerPVPDataList(const PlayerPVPDataList& from);

  inline PlayerPVPDataList& operator=(const PlayerPVPDataList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerPVPDataList& default_instance();

  void Swap(PlayerPVPDataList* other);

  // implements Message ----------------------------------------------

  PlayerPVPDataList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerPVPDataList& from);
  void MergeFrom(const PlayerPVPDataList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PvPPackage.PlayerPVPData list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::PvPPackage::PlayerPVPData& list(int index) const;
  inline ::PvPPackage::PlayerPVPData* mutable_list(int index);
  inline ::PvPPackage::PlayerPVPData* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::PlayerPVPData >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::PlayerPVPData >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:PvPPackage.PlayerPVPDataList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PvPPackage::PlayerPVPData > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static PlayerPVPDataList* default_instance_;
};
// -------------------------------------------------------------------

class PlayerPVPData : public ::google::protobuf::Message {
 public:
  PlayerPVPData();
  virtual ~PlayerPVPData();

  PlayerPVPData(const PlayerPVPData& from);

  inline PlayerPVPData& operator=(const PlayerPVPData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerPVPData& default_instance();

  void Swap(PlayerPVPData* other);

  // implements Message ----------------------------------------------

  PlayerPVPData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerPVPData& from);
  void MergeFrom(const PlayerPVPData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int32 layer = 2;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // optional int32 totalkill = 3;
  inline bool has_totalkill() const;
  inline void clear_totalkill();
  static const int kTotalkillFieldNumber = 3;
  inline ::google::protobuf::int32 totalkill() const;
  inline void set_totalkill(::google::protobuf::int32 value);

  // optional int32 totalexp = 4;
  inline bool has_totalexp() const;
  inline void clear_totalexp();
  static const int kTotalexpFieldNumber = 4;
  inline ::google::protobuf::int32 totalexp() const;
  inline void set_totalexp(::google::protobuf::int32 value);

  // optional bytes name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 level = 6;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 6;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 power = 7;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 7;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // optional int32 viplevel = 8;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 8;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional int32 killsort = 9;
  inline bool has_killsort() const;
  inline void clear_killsort();
  static const int kKillsortFieldNumber = 9;
  inline ::google::protobuf::int32 killsort() const;
  inline void set_killsort(::google::protobuf::int32 value);

  // optional int32 integral = 10;
  inline bool has_integral() const;
  inline void clear_integral();
  static const int kIntegralFieldNumber = 10;
  inline ::google::protobuf::int32 integral() const;
  inline void set_integral(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.PlayerPVPData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_layer();
  inline void clear_has_layer();
  inline void set_has_totalkill();
  inline void clear_has_totalkill();
  inline void set_has_totalexp();
  inline void clear_has_totalexp();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_killsort();
  inline void clear_has_killsort();
  inline void set_has_integral();
  inline void clear_has_integral();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 layer_;
  ::google::protobuf::int32 totalkill_;
  ::std::string* name_;
  ::google::protobuf::int32 totalexp_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 killsort_;
  ::google::protobuf::int32 integral_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static PlayerPVPData* default_instance_;
};
// -------------------------------------------------------------------

class ReqPlayerPVPData : public ::google::protobuf::Message {
 public:
  ReqPlayerPVPData();
  virtual ~ReqPlayerPVPData();

  ReqPlayerPVPData(const ReqPlayerPVPData& from);

  inline ReqPlayerPVPData& operator=(const ReqPlayerPVPData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqPlayerPVPData& default_instance();

  void Swap(ReqPlayerPVPData* other);

  // implements Message ----------------------------------------------

  ReqPlayerPVPData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqPlayerPVPData& from);
  void MergeFrom(const ReqPlayerPVPData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int32 layer = 2;
  inline bool has_layer() const;
  inline void clear_layer();
  static const int kLayerFieldNumber = 2;
  inline ::google::protobuf::int32 layer() const;
  inline void set_layer(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.ReqPlayerPVPData)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_layer();
  inline void clear_has_layer();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 layer_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static ReqPlayerPVPData* default_instance_;
};
// -------------------------------------------------------------------

class AckPlayerPVPData : public ::google::protobuf::Message {
 public:
  AckPlayerPVPData();
  virtual ~AckPlayerPVPData();

  AckPlayerPVPData(const AckPlayerPVPData& from);

  inline AckPlayerPVPData& operator=(const AckPlayerPVPData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckPlayerPVPData& default_instance();

  void Swap(AckPlayerPVPData* other);

  // implements Message ----------------------------------------------

  AckPlayerPVPData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckPlayerPVPData& from);
  void MergeFrom(const AckPlayerPVPData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required .PvPPackage.PlayerPVPData info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::PvPPackage::PlayerPVPData& info() const;
  inline ::PvPPackage::PlayerPVPData* mutable_info();
  inline ::PvPPackage::PlayerPVPData* release_info();
  inline void set_allocated_info(::PvPPackage::PlayerPVPData* info);

  // @@protoc_insertion_point(class_scope:PvPPackage.AckPlayerPVPData)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PvPPackage::PlayerPVPData* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static AckPlayerPVPData* default_instance_;
};
// -------------------------------------------------------------------

class GstoWsBossDead : public ::google::protobuf::Message {
 public:
  GstoWsBossDead();
  virtual ~GstoWsBossDead();

  GstoWsBossDead(const GstoWsBossDead& from);

  inline GstoWsBossDead& operator=(const GstoWsBossDead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GstoWsBossDead& default_instance();

  void Swap(GstoWsBossDead* other);

  // implements Message ----------------------------------------------

  GstoWsBossDead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GstoWsBossDead& from);
  void MergeFrom(const GstoWsBossDead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // repeated .PvPPackage.BossDamageDataEX list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::PvPPackage::BossDamageDataEX& list(int index) const;
  inline ::PvPPackage::BossDamageDataEX* mutable_list(int index);
  inline ::PvPPackage::BossDamageDataEX* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::BossDamageDataEX >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::BossDamageDataEX >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:PvPPackage.GstoWsBossDead)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::RepeatedPtrField< ::PvPPackage::BossDamageDataEX > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static GstoWsBossDead* default_instance_;
};
// -------------------------------------------------------------------

class BossDamageDataEX : public ::google::protobuf::Message {
 public:
  BossDamageDataEX();
  virtual ~BossDamageDataEX();

  BossDamageDataEX(const BossDamageDataEX& from);

  inline BossDamageDataEX& operator=(const BossDamageDataEX& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BossDamageDataEX& default_instance();

  void Swap(BossDamageDataEX* other);

  // implements Message ----------------------------------------------

  BossDamageDataEX* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BossDamageDataEX& from);
  void MergeFrom(const BossDamageDataEX& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 viplevel = 3;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kViplevelFieldNumber = 3;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional int32 damage = 4;
  inline bool has_damage() const;
  inline void clear_damage();
  static const int kDamageFieldNumber = 4;
  inline ::google::protobuf::int32 damage() const;
  inline void set_damage(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.BossDamageDataEX)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_damage();
  inline void clear_has_damage();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* name_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 damage_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static BossDamageDataEX* default_instance_;
};
// -------------------------------------------------------------------

class ReqDamageRank : public ::google::protobuf::Message {
 public:
  ReqDamageRank();
  virtual ~ReqDamageRank();

  ReqDamageRank(const ReqDamageRank& from);

  inline ReqDamageRank& operator=(const ReqDamageRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqDamageRank& default_instance();

  void Swap(ReqDamageRank* other);

  // implements Message ----------------------------------------------

  ReqDamageRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqDamageRank& from);
  void MergeFrom(const ReqDamageRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 sence = 1;
  inline bool has_sence() const;
  inline void clear_sence();
  static const int kSenceFieldNumber = 1;
  inline ::google::protobuf::int64 sence() const;
  inline void set_sence(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.ReqDamageRank)
 private:
  inline void set_has_sence();
  inline void clear_has_sence();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 sence_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static ReqDamageRank* default_instance_;
};
// -------------------------------------------------------------------

class AckWstoGsDamageRank : public ::google::protobuf::Message {
 public:
  AckWstoGsDamageRank();
  virtual ~AckWstoGsDamageRank();

  AckWstoGsDamageRank(const AckWstoGsDamageRank& from);

  inline AckWstoGsDamageRank& operator=(const AckWstoGsDamageRank& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckWstoGsDamageRank& default_instance();

  void Swap(AckWstoGsDamageRank* other);

  // implements Message ----------------------------------------------

  AckWstoGsDamageRank* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckWstoGsDamageRank& from);
  void MergeFrom(const AckWstoGsDamageRank& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PvPPackage.BossDamageDataEX list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::PvPPackage::BossDamageDataEX& list(int index) const;
  inline ::PvPPackage::BossDamageDataEX* mutable_list(int index);
  inline ::PvPPackage::BossDamageDataEX* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::BossDamageDataEX >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::BossDamageDataEX >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:PvPPackage.AckWstoGsDamageRank)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PvPPackage::BossDamageDataEX > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static AckWstoGsDamageRank* default_instance_;
};
// -------------------------------------------------------------------

class WstoGsAddItem : public ::google::protobuf::Message {
 public:
  WstoGsAddItem();
  virtual ~WstoGsAddItem();

  WstoGsAddItem(const WstoGsAddItem& from);

  inline WstoGsAddItem& operator=(const WstoGsAddItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WstoGsAddItem& default_instance();

  void Swap(WstoGsAddItem* other);

  // implements Message ----------------------------------------------

  WstoGsAddItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WstoGsAddItem& from);
  void MergeFrom(const WstoGsAddItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // repeated .PvPPackage.ItemData list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::PvPPackage::ItemData& list(int index) const;
  inline ::PvPPackage::ItemData* mutable_list(int index);
  inline ::PvPPackage::ItemData* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::ItemData >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::ItemData >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:PvPPackage.WstoGsAddItem)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::RepeatedPtrField< ::PvPPackage::ItemData > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static WstoGsAddItem* default_instance_;
};
// -------------------------------------------------------------------

class ItemData : public ::google::protobuf::Message {
 public:
  ItemData();
  virtual ~ItemData();

  ItemData(const ItemData& from);

  inline ItemData& operator=(const ItemData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ItemData& default_instance();

  void Swap(ItemData* other);

  // implements Message ----------------------------------------------

  ItemData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ItemData& from);
  void MergeFrom(const ItemData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // optional int32 bind = 3;
  inline bool has_bind() const;
  inline void clear_bind();
  static const int kBindFieldNumber = 3;
  inline ::google::protobuf::int32 bind() const;
  inline void set_bind(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:PvPPackage.ItemData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_bind();
  inline void clear_has_bind();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 num_;
  ::google::protobuf::int32 bind_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static ItemData* default_instance_;
};
// -------------------------------------------------------------------

class WSToGMPVPState : public ::google::protobuf::Message {
 public:
  WSToGMPVPState();
  virtual ~WSToGMPVPState();

  WSToGMPVPState(const WSToGMPVPState& from);

  inline WSToGMPVPState& operator=(const WSToGMPVPState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToGMPVPState& default_instance();

  void Swap(WSToGMPVPState* other);

  // implements Message ----------------------------------------------

  WSToGMPVPState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToGMPVPState& from);
  void MergeFrom(const WSToGMPVPState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline bool state() const;
  inline void set_state(bool value);

  // @@protoc_insertion_point(class_scope:PvPPackage.WSToGMPVPState)
 private:
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  bool state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_PVP_2fPVP_2eproto();
  friend void protobuf_AssignDesc_PVP_2fPVP_2eproto();
  friend void protobuf_ShutdownFile_PVP_2fPVP_2eproto();

  void InitAsDefaultInstance();
  static WSToGMPVPState* default_instance_;
};
// ===================================================================


// ===================================================================

// AckReqPVPMapID

// required int64 id = 1;
inline bool AckReqPVPMapID::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckReqPVPMapID::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckReqPVPMapID::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckReqPVPMapID::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 AckReqPVPMapID::id() const {
  return id_;
}
inline void AckReqPVPMapID::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// ReqGather

// required int32 key = 1;
inline bool ReqGather::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqGather::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqGather::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqGather::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 ReqGather::key() const {
  return key_;
}
inline void ReqGather::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// -------------------------------------------------------------------

// AckGather

// required int32 ret = 1;
inline bool AckGather::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGather::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGather::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGather::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AckGather::ret() const {
  return ret_;
}
inline void AckGather::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GaterResult

// required int32 result = 1;
inline bool GaterResult::has_result() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GaterResult::set_has_result() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GaterResult::clear_has_result() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GaterResult::clear_result() {
  result_ = 0;
  clear_has_result();
}
inline ::google::protobuf::int32 GaterResult::result() const {
  return result_;
}
inline void GaterResult::set_result(::google::protobuf::int32 value) {
  set_has_result();
  result_ = value;
}

// -------------------------------------------------------------------

// AckKillData

// repeated .PvPPackage.KillData list = 1;
inline int AckKillData::list_size() const {
  return list_.size();
}
inline void AckKillData::clear_list() {
  list_.Clear();
}
inline const ::PvPPackage::KillData& AckKillData::list(int index) const {
  return list_.Get(index);
}
inline ::PvPPackage::KillData* AckKillData::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::PvPPackage::KillData* AckKillData::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::KillData >&
AckKillData::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::KillData >*
AckKillData::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// KillData

// required bytes name = 1;
inline bool KillData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void KillData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void KillData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void KillData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& KillData::name() const {
  return *name_;
}
inline void KillData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void KillData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void KillData::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* KillData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* KillData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void KillData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 2;
inline bool KillData::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void KillData::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void KillData::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void KillData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 KillData::level() const {
  return level_;
}
inline void KillData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 power = 3;
inline bool KillData::has_power() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void KillData::set_has_power() {
  _has_bits_[0] |= 0x00000004u;
}
inline void KillData::clear_has_power() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void KillData::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 KillData::power() const {
  return power_;
}
inline void KillData::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 viplevel = 4;
inline bool KillData::has_viplevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void KillData::set_has_viplevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void KillData::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void KillData::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 KillData::viplevel() const {
  return viplevel_;
}
inline void KillData::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional int32 kills = 5;
inline bool KillData::has_kills() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void KillData::set_has_kills() {
  _has_bits_[0] |= 0x00000010u;
}
inline void KillData::clear_has_kills() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void KillData::clear_kills() {
  kills_ = 0;
  clear_has_kills();
}
inline ::google::protobuf::int32 KillData::kills() const {
  return kills_;
}
inline void KillData::set_kills(::google::protobuf::int32 value) {
  set_has_kills();
  kills_ = value;
}

// optional int64 charid = 6;
inline bool KillData::has_charid() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void KillData::set_has_charid() {
  _has_bits_[0] |= 0x00000020u;
}
inline void KillData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void KillData::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 KillData::charid() const {
  return charid_;
}
inline void KillData::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// PVPPrize

// optional int32 integral = 1;
inline bool PVPPrize::has_integral() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPPrize::set_has_integral() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPPrize::clear_has_integral() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPPrize::clear_integral() {
  integral_ = 0;
  clear_has_integral();
}
inline ::google::protobuf::int32 PVPPrize::integral() const {
  return integral_;
}
inline void PVPPrize::set_integral(::google::protobuf::int32 value) {
  set_has_integral();
  integral_ = value;
}

// optional int32 integralSort = 2;
inline bool PVPPrize::has_integralsort() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPPrize::set_has_integralsort() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPPrize::clear_has_integralsort() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPPrize::clear_integralsort() {
  integralsort_ = 0;
  clear_has_integralsort();
}
inline ::google::protobuf::int32 PVPPrize::integralsort() const {
  return integralsort_;
}
inline void PVPPrize::set_integralsort(::google::protobuf::int32 value) {
  set_has_integralsort();
  integralsort_ = value;
}

// -------------------------------------------------------------------

// AckFitchPrize

// required int32 ret = 1;
inline bool AckFitchPrize::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckFitchPrize::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckFitchPrize::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckFitchPrize::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AckFitchPrize::ret() const {
  return ret_;
}
inline void AckFitchPrize::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// PlayerPvPData

// repeated .PvPPackage.pvpData info = 1;
inline int PlayerPvPData::info_size() const {
  return info_.size();
}
inline void PlayerPvPData::clear_info() {
  info_.Clear();
}
inline const ::PvPPackage::pvpData& PlayerPvPData::info(int index) const {
  return info_.Get(index);
}
inline ::PvPPackage::pvpData* PlayerPvPData::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::PvPPackage::pvpData* PlayerPvPData::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::pvpData >&
PlayerPvPData::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::pvpData >*
PlayerPvPData::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// pvpData

// required int32 id = 1;
inline bool pvpData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void pvpData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void pvpData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void pvpData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 pvpData::id() const {
  return id_;
}
inline void pvpData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 value = 2;
inline bool pvpData::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void pvpData::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void pvpData::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void pvpData::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 pvpData::value() const {
  return value_;
}
inline void pvpData::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// PvPBossDamagData

// repeated .PvPPackage.BossDamageData info = 1;
inline int PvPBossDamagData::info_size() const {
  return info_.size();
}
inline void PvPBossDamagData::clear_info() {
  info_.Clear();
}
inline const ::PvPPackage::BossDamageData& PvPBossDamagData::info(int index) const {
  return info_.Get(index);
}
inline ::PvPPackage::BossDamageData* PvPBossDamagData::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::PvPPackage::BossDamageData* PvPBossDamagData::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::BossDamageData >&
PvPBossDamagData::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::BossDamageData >*
PvPBossDamagData::mutable_info() {
  return &info_;
}

// optional int32 sort = 2;
inline bool PvPBossDamagData::has_sort() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPBossDamagData::set_has_sort() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPBossDamagData::clear_has_sort() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPBossDamagData::clear_sort() {
  sort_ = 0;
  clear_has_sort();
}
inline ::google::protobuf::int32 PvPBossDamagData::sort() const {
  return sort_;
}
inline void PvPBossDamagData::set_sort(::google::protobuf::int32 value) {
  set_has_sort();
  sort_ = value;
}

// optional int32 damage = 3;
inline bool PvPBossDamagData::has_damage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvPBossDamagData::set_has_damage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvPBossDamagData::clear_has_damage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvPBossDamagData::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 PvPBossDamagData::damage() const {
  return damage_;
}
inline void PvPBossDamagData::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// -------------------------------------------------------------------

// BossDamageData

// required bytes name = 1;
inline bool BossDamageData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossDamageData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossDamageData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossDamageData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BossDamageData::name() const {
  return *name_;
}
inline void BossDamageData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BossDamageData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BossDamageData::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BossDamageData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BossDamageData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BossDamageData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 viplevel = 2;
inline bool BossDamageData::has_viplevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossDamageData::set_has_viplevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossDamageData::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossDamageData::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 BossDamageData::viplevel() const {
  return viplevel_;
}
inline void BossDamageData::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional int32 damage = 3;
inline bool BossDamageData::has_damage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossDamageData::set_has_damage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossDamageData::clear_has_damage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossDamageData::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 BossDamageData::damage() const {
  return damage_;
}
inline void BossDamageData::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// optional int64 charid = 4;
inline bool BossDamageData::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossDamageData::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossDamageData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossDamageData::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 BossDamageData::charid() const {
  return charid_;
}
inline void BossDamageData::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// BossHP

// required int32 hp = 1;
inline bool BossHP::has_hp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossHP::set_has_hp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossHP::clear_has_hp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossHP::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 BossHP::hp() const {
  return hp_;
}
inline void BossHP::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// -------------------------------------------------------------------

// IntegralData

// repeated .PvPPackage.PvPIntegralData info = 1;
inline int IntegralData::info_size() const {
  return info_.size();
}
inline void IntegralData::clear_info() {
  info_.Clear();
}
inline const ::PvPPackage::PvPIntegralData& IntegralData::info(int index) const {
  return info_.Get(index);
}
inline ::PvPPackage::PvPIntegralData* IntegralData::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::PvPPackage::PvPIntegralData* IntegralData::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::PvPIntegralData >&
IntegralData::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::PvPIntegralData >*
IntegralData::mutable_info() {
  return &info_;
}

// optional int32 sort = 2;
inline bool IntegralData::has_sort() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IntegralData::set_has_sort() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IntegralData::clear_has_sort() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IntegralData::clear_sort() {
  sort_ = 0;
  clear_has_sort();
}
inline ::google::protobuf::int32 IntegralData::sort() const {
  return sort_;
}
inline void IntegralData::set_sort(::google::protobuf::int32 value) {
  set_has_sort();
  sort_ = value;
}

// optional int32 integral = 3;
inline bool IntegralData::has_integral() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void IntegralData::set_has_integral() {
  _has_bits_[0] |= 0x00000004u;
}
inline void IntegralData::clear_has_integral() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void IntegralData::clear_integral() {
  integral_ = 0;
  clear_has_integral();
}
inline ::google::protobuf::int32 IntegralData::integral() const {
  return integral_;
}
inline void IntegralData::set_integral(::google::protobuf::int32 value) {
  set_has_integral();
  integral_ = value;
}

// -------------------------------------------------------------------

// PvPIntegralData

// required bytes name = 1;
inline bool PvPIntegralData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPIntegralData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPIntegralData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPIntegralData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PvPIntegralData::name() const {
  return *name_;
}
inline void PvPIntegralData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PvPIntegralData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PvPIntegralData::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PvPIntegralData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PvPIntegralData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PvPIntegralData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 integral = 2;
inline bool PvPIntegralData::has_integral() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPIntegralData::set_has_integral() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPIntegralData::clear_has_integral() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPIntegralData::clear_integral() {
  integral_ = 0;
  clear_has_integral();
}
inline ::google::protobuf::int32 PvPIntegralData::integral() const {
  return integral_;
}
inline void PvPIntegralData::set_integral(::google::protobuf::int32 value) {
  set_has_integral();
  integral_ = value;
}

// optional int32 integralSort = 3;
inline bool PvPIntegralData::has_integralsort() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvPIntegralData::set_has_integralsort() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvPIntegralData::clear_has_integralsort() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvPIntegralData::clear_integralsort() {
  integralsort_ = 0;
  clear_has_integralsort();
}
inline ::google::protobuf::int32 PvPIntegralData::integralsort() const {
  return integralsort_;
}
inline void PvPIntegralData::set_integralsort(::google::protobuf::int32 value) {
  set_has_integralsort();
  integralsort_ = value;
}

// optional int64 charid = 4;
inline bool PvPIntegralData::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvPIntegralData::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvPIntegralData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvPIntegralData::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 PvPIntegralData::charid() const {
  return charid_;
}
inline void PvPIntegralData::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// BossDeadData

// repeated .PvPPackage.PvPBossDeadData info = 1;
inline int BossDeadData::info_size() const {
  return info_.size();
}
inline void BossDeadData::clear_info() {
  info_.Clear();
}
inline const ::PvPPackage::PvPBossDeadData& BossDeadData::info(int index) const {
  return info_.Get(index);
}
inline ::PvPPackage::PvPBossDeadData* BossDeadData::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::PvPPackage::PvPBossDeadData* BossDeadData::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::PvPBossDeadData >&
BossDeadData::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::PvPBossDeadData >*
BossDeadData::mutable_info() {
  return &info_;
}

// optional .PvPPackage.PvPBossDeadData lastAttact = 2;
inline bool BossDeadData::has_lastattact() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossDeadData::set_has_lastattact() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossDeadData::clear_has_lastattact() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossDeadData::clear_lastattact() {
  if (lastattact_ != NULL) lastattact_->::PvPPackage::PvPBossDeadData::Clear();
  clear_has_lastattact();
}
inline const ::PvPPackage::PvPBossDeadData& BossDeadData::lastattact() const {
  return lastattact_ != NULL ? *lastattact_ : *default_instance_->lastattact_;
}
inline ::PvPPackage::PvPBossDeadData* BossDeadData::mutable_lastattact() {
  set_has_lastattact();
  if (lastattact_ == NULL) lastattact_ = new ::PvPPackage::PvPBossDeadData;
  return lastattact_;
}
inline ::PvPPackage::PvPBossDeadData* BossDeadData::release_lastattact() {
  clear_has_lastattact();
  ::PvPPackage::PvPBossDeadData* temp = lastattact_;
  lastattact_ = NULL;
  return temp;
}
inline void BossDeadData::set_allocated_lastattact(::PvPPackage::PvPBossDeadData* lastattact) {
  delete lastattact_;
  lastattact_ = lastattact;
  if (lastattact) {
    set_has_lastattact();
  } else {
    clear_has_lastattact();
  }
}

// optional int32 sort = 3;
inline bool BossDeadData::has_sort() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossDeadData::set_has_sort() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossDeadData::clear_has_sort() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossDeadData::clear_sort() {
  sort_ = 0;
  clear_has_sort();
}
inline ::google::protobuf::int32 BossDeadData::sort() const {
  return sort_;
}
inline void BossDeadData::set_sort(::google::protobuf::int32 value) {
  set_has_sort();
  sort_ = value;
}

// optional int32 damage = 4;
inline bool BossDeadData::has_damage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossDeadData::set_has_damage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossDeadData::clear_has_damage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossDeadData::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 BossDeadData::damage() const {
  return damage_;
}
inline void BossDeadData::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// -------------------------------------------------------------------

// PvPBossDeadData

// required bytes name = 1;
inline bool PvPBossDeadData::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PvPBossDeadData::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PvPBossDeadData::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PvPBossDeadData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PvPBossDeadData::name() const {
  return *name_;
}
inline void PvPBossDeadData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PvPBossDeadData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PvPBossDeadData::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PvPBossDeadData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PvPBossDeadData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PvPBossDeadData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 viplevel = 2;
inline bool PvPBossDeadData::has_viplevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PvPBossDeadData::set_has_viplevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PvPBossDeadData::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PvPBossDeadData::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 PvPBossDeadData::viplevel() const {
  return viplevel_;
}
inline void PvPBossDeadData::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional int32 damage = 3;
inline bool PvPBossDeadData::has_damage() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PvPBossDeadData::set_has_damage() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PvPBossDeadData::clear_has_damage() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PvPBossDeadData::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 PvPBossDeadData::damage() const {
  return damage_;
}
inline void PvPBossDeadData::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// optional int64 charid = 4;
inline bool PvPBossDeadData::has_charid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PvPBossDeadData::set_has_charid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PvPBossDeadData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PvPBossDeadData::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 PvPBossDeadData::charid() const {
  return charid_;
}
inline void PvPBossDeadData::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 sex = 5;
inline bool PvPBossDeadData::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PvPBossDeadData::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PvPBossDeadData::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PvPBossDeadData::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 PvPBossDeadData::sex() const {
  return sex_;
}
inline void PvPBossDeadData::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 pro = 6;
inline bool PvPBossDeadData::has_pro() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PvPBossDeadData::set_has_pro() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PvPBossDeadData::clear_has_pro() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PvPBossDeadData::clear_pro() {
  pro_ = 0;
  clear_has_pro();
}
inline ::google::protobuf::int32 PvPBossDeadData::pro() const {
  return pro_;
}
inline void PvPBossDeadData::set_pro(::google::protobuf::int32 value) {
  set_has_pro();
  pro_ = value;
}

// optional int32 lv = 7;
inline bool PvPBossDeadData::has_lv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PvPBossDeadData::set_has_lv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PvPBossDeadData::clear_has_lv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PvPBossDeadData::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 PvPBossDeadData::lv() const {
  return lv_;
}
inline void PvPBossDeadData::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// -------------------------------------------------------------------

// PVPMapInfos

// repeated .PvPPackage.PVPMap info = 1;
inline int PVPMapInfos::info_size() const {
  return info_.size();
}
inline void PVPMapInfos::clear_info() {
  info_.Clear();
}
inline const ::PvPPackage::PVPMap& PVPMapInfos::info(int index) const {
  return info_.Get(index);
}
inline ::PvPPackage::PVPMap* PVPMapInfos::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::PvPPackage::PVPMap* PVPMapInfos::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::PVPMap >&
PVPMapInfos::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::PVPMap >*
PVPMapInfos::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// PVPMap

// required int32 layer = 1;
inline bool PVPMap::has_layer() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PVPMap::set_has_layer() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PVPMap::clear_has_layer() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PVPMap::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 PVPMap::layer() const {
  return layer_;
}
inline void PVPMap::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// optional int64 id = 2;
inline bool PVPMap::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PVPMap::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PVPMap::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PVPMap::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 PVPMap::id() const {
  return id_;
}
inline void PVPMap::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// PlayerPVPDataList

// repeated .PvPPackage.PlayerPVPData list = 1;
inline int PlayerPVPDataList::list_size() const {
  return list_.size();
}
inline void PlayerPVPDataList::clear_list() {
  list_.Clear();
}
inline const ::PvPPackage::PlayerPVPData& PlayerPVPDataList::list(int index) const {
  return list_.Get(index);
}
inline ::PvPPackage::PlayerPVPData* PlayerPVPDataList::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::PvPPackage::PlayerPVPData* PlayerPVPDataList::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::PlayerPVPData >&
PlayerPVPDataList::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::PlayerPVPData >*
PlayerPVPDataList::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// PlayerPVPData

// required int64 charid = 1;
inline bool PlayerPVPData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerPVPData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerPVPData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerPVPData::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 PlayerPVPData::charid() const {
  return charid_;
}
inline void PlayerPVPData::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 layer = 2;
inline bool PlayerPVPData::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PlayerPVPData::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PlayerPVPData::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PlayerPVPData::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 PlayerPVPData::layer() const {
  return layer_;
}
inline void PlayerPVPData::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// optional int32 totalkill = 3;
inline bool PlayerPVPData::has_totalkill() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PlayerPVPData::set_has_totalkill() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PlayerPVPData::clear_has_totalkill() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PlayerPVPData::clear_totalkill() {
  totalkill_ = 0;
  clear_has_totalkill();
}
inline ::google::protobuf::int32 PlayerPVPData::totalkill() const {
  return totalkill_;
}
inline void PlayerPVPData::set_totalkill(::google::protobuf::int32 value) {
  set_has_totalkill();
  totalkill_ = value;
}

// optional int32 totalexp = 4;
inline bool PlayerPVPData::has_totalexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void PlayerPVPData::set_has_totalexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void PlayerPVPData::clear_has_totalexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void PlayerPVPData::clear_totalexp() {
  totalexp_ = 0;
  clear_has_totalexp();
}
inline ::google::protobuf::int32 PlayerPVPData::totalexp() const {
  return totalexp_;
}
inline void PlayerPVPData::set_totalexp(::google::protobuf::int32 value) {
  set_has_totalexp();
  totalexp_ = value;
}

// optional bytes name = 5;
inline bool PlayerPVPData::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void PlayerPVPData::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void PlayerPVPData::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void PlayerPVPData::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& PlayerPVPData::name() const {
  return *name_;
}
inline void PlayerPVPData::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerPVPData::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void PlayerPVPData::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* PlayerPVPData::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* PlayerPVPData::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void PlayerPVPData::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 level = 6;
inline bool PlayerPVPData::has_level() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void PlayerPVPData::set_has_level() {
  _has_bits_[0] |= 0x00000020u;
}
inline void PlayerPVPData::clear_has_level() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void PlayerPVPData::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 PlayerPVPData::level() const {
  return level_;
}
inline void PlayerPVPData::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 power = 7;
inline bool PlayerPVPData::has_power() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void PlayerPVPData::set_has_power() {
  _has_bits_[0] |= 0x00000040u;
}
inline void PlayerPVPData::clear_has_power() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void PlayerPVPData::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 PlayerPVPData::power() const {
  return power_;
}
inline void PlayerPVPData::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 viplevel = 8;
inline bool PlayerPVPData::has_viplevel() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void PlayerPVPData::set_has_viplevel() {
  _has_bits_[0] |= 0x00000080u;
}
inline void PlayerPVPData::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void PlayerPVPData::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 PlayerPVPData::viplevel() const {
  return viplevel_;
}
inline void PlayerPVPData::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional int32 killsort = 9;
inline bool PlayerPVPData::has_killsort() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void PlayerPVPData::set_has_killsort() {
  _has_bits_[0] |= 0x00000100u;
}
inline void PlayerPVPData::clear_has_killsort() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void PlayerPVPData::clear_killsort() {
  killsort_ = 0;
  clear_has_killsort();
}
inline ::google::protobuf::int32 PlayerPVPData::killsort() const {
  return killsort_;
}
inline void PlayerPVPData::set_killsort(::google::protobuf::int32 value) {
  set_has_killsort();
  killsort_ = value;
}

// optional int32 integral = 10;
inline bool PlayerPVPData::has_integral() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void PlayerPVPData::set_has_integral() {
  _has_bits_[0] |= 0x00000200u;
}
inline void PlayerPVPData::clear_has_integral() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void PlayerPVPData::clear_integral() {
  integral_ = 0;
  clear_has_integral();
}
inline ::google::protobuf::int32 PlayerPVPData::integral() const {
  return integral_;
}
inline void PlayerPVPData::set_integral(::google::protobuf::int32 value) {
  set_has_integral();
  integral_ = value;
}

// -------------------------------------------------------------------

// ReqPlayerPVPData

// required int64 charid = 1;
inline bool ReqPlayerPVPData::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqPlayerPVPData::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqPlayerPVPData::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqPlayerPVPData::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 ReqPlayerPVPData::charid() const {
  return charid_;
}
inline void ReqPlayerPVPData::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 layer = 2;
inline bool ReqPlayerPVPData::has_layer() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqPlayerPVPData::set_has_layer() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqPlayerPVPData::clear_has_layer() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqPlayerPVPData::clear_layer() {
  layer_ = 0;
  clear_has_layer();
}
inline ::google::protobuf::int32 ReqPlayerPVPData::layer() const {
  return layer_;
}
inline void ReqPlayerPVPData::set_layer(::google::protobuf::int32 value) {
  set_has_layer();
  layer_ = value;
}

// -------------------------------------------------------------------

// AckPlayerPVPData

// required .PvPPackage.PlayerPVPData info = 1;
inline bool AckPlayerPVPData::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckPlayerPVPData::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckPlayerPVPData::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckPlayerPVPData::clear_info() {
  if (info_ != NULL) info_->::PvPPackage::PlayerPVPData::Clear();
  clear_has_info();
}
inline const ::PvPPackage::PlayerPVPData& AckPlayerPVPData::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PvPPackage::PlayerPVPData* AckPlayerPVPData::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PvPPackage::PlayerPVPData;
  return info_;
}
inline ::PvPPackage::PlayerPVPData* AckPlayerPVPData::release_info() {
  clear_has_info();
  ::PvPPackage::PlayerPVPData* temp = info_;
  info_ = NULL;
  return temp;
}
inline void AckPlayerPVPData::set_allocated_info(::PvPPackage::PlayerPVPData* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// GstoWsBossDead

// required int64 charid = 1;
inline bool GstoWsBossDead::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GstoWsBossDead::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GstoWsBossDead::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GstoWsBossDead::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 GstoWsBossDead::charid() const {
  return charid_;
}
inline void GstoWsBossDead::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// repeated .PvPPackage.BossDamageDataEX list = 2;
inline int GstoWsBossDead::list_size() const {
  return list_.size();
}
inline void GstoWsBossDead::clear_list() {
  list_.Clear();
}
inline const ::PvPPackage::BossDamageDataEX& GstoWsBossDead::list(int index) const {
  return list_.Get(index);
}
inline ::PvPPackage::BossDamageDataEX* GstoWsBossDead::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::PvPPackage::BossDamageDataEX* GstoWsBossDead::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::BossDamageDataEX >&
GstoWsBossDead::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::BossDamageDataEX >*
GstoWsBossDead::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// BossDamageDataEX

// required int64 charid = 1;
inline bool BossDamageDataEX::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BossDamageDataEX::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BossDamageDataEX::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BossDamageDataEX::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 BossDamageDataEX::charid() const {
  return charid_;
}
inline void BossDamageDataEX::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional bytes name = 2;
inline bool BossDamageDataEX::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BossDamageDataEX::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BossDamageDataEX::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BossDamageDataEX::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& BossDamageDataEX::name() const {
  return *name_;
}
inline void BossDamageDataEX::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BossDamageDataEX::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void BossDamageDataEX::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BossDamageDataEX::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* BossDamageDataEX::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BossDamageDataEX::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 viplevel = 3;
inline bool BossDamageDataEX::has_viplevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BossDamageDataEX::set_has_viplevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BossDamageDataEX::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BossDamageDataEX::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 BossDamageDataEX::viplevel() const {
  return viplevel_;
}
inline void BossDamageDataEX::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional int32 damage = 4;
inline bool BossDamageDataEX::has_damage() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BossDamageDataEX::set_has_damage() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BossDamageDataEX::clear_has_damage() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BossDamageDataEX::clear_damage() {
  damage_ = 0;
  clear_has_damage();
}
inline ::google::protobuf::int32 BossDamageDataEX::damage() const {
  return damage_;
}
inline void BossDamageDataEX::set_damage(::google::protobuf::int32 value) {
  set_has_damage();
  damage_ = value;
}

// -------------------------------------------------------------------

// ReqDamageRank

// required int64 sence = 1;
inline bool ReqDamageRank::has_sence() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqDamageRank::set_has_sence() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqDamageRank::clear_has_sence() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqDamageRank::clear_sence() {
  sence_ = GOOGLE_LONGLONG(0);
  clear_has_sence();
}
inline ::google::protobuf::int64 ReqDamageRank::sence() const {
  return sence_;
}
inline void ReqDamageRank::set_sence(::google::protobuf::int64 value) {
  set_has_sence();
  sence_ = value;
}

// -------------------------------------------------------------------

// AckWstoGsDamageRank

// repeated .PvPPackage.BossDamageDataEX list = 1;
inline int AckWstoGsDamageRank::list_size() const {
  return list_.size();
}
inline void AckWstoGsDamageRank::clear_list() {
  list_.Clear();
}
inline const ::PvPPackage::BossDamageDataEX& AckWstoGsDamageRank::list(int index) const {
  return list_.Get(index);
}
inline ::PvPPackage::BossDamageDataEX* AckWstoGsDamageRank::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::PvPPackage::BossDamageDataEX* AckWstoGsDamageRank::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::BossDamageDataEX >&
AckWstoGsDamageRank::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::BossDamageDataEX >*
AckWstoGsDamageRank::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// WstoGsAddItem

// required int64 charid = 1;
inline bool WstoGsAddItem::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WstoGsAddItem::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WstoGsAddItem::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WstoGsAddItem::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 WstoGsAddItem::charid() const {
  return charid_;
}
inline void WstoGsAddItem::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// repeated .PvPPackage.ItemData list = 2;
inline int WstoGsAddItem::list_size() const {
  return list_.size();
}
inline void WstoGsAddItem::clear_list() {
  list_.Clear();
}
inline const ::PvPPackage::ItemData& WstoGsAddItem::list(int index) const {
  return list_.Get(index);
}
inline ::PvPPackage::ItemData* WstoGsAddItem::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::PvPPackage::ItemData* WstoGsAddItem::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PvPPackage::ItemData >&
WstoGsAddItem::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::PvPPackage::ItemData >*
WstoGsAddItem::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// ItemData

// required int32 id = 1;
inline bool ItemData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ItemData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ItemData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ItemData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ItemData::id() const {
  return id_;
}
inline void ItemData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 num = 2;
inline bool ItemData::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ItemData::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ItemData::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ItemData::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ItemData::num() const {
  return num_;
}
inline void ItemData::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// optional int32 bind = 3;
inline bool ItemData::has_bind() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ItemData::set_has_bind() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ItemData::clear_has_bind() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ItemData::clear_bind() {
  bind_ = 0;
  clear_has_bind();
}
inline ::google::protobuf::int32 ItemData::bind() const {
  return bind_;
}
inline void ItemData::set_bind(::google::protobuf::int32 value) {
  set_has_bind();
  bind_ = value;
}

// -------------------------------------------------------------------

// WSToGMPVPState

// required bool state = 1;
inline bool WSToGMPVPState::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToGMPVPState::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToGMPVPState::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToGMPVPState::clear_state() {
  state_ = false;
  clear_has_state();
}
inline bool WSToGMPVPState::state() const {
  return state_;
}
inline void WSToGMPVPState::set_state(bool value) {
  set_has_state();
  state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PvPPackage

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_PVP_2fPVP_2eproto__INCLUDED
