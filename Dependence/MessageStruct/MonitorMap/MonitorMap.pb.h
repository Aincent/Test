// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MonitorMap/MonitorMap.proto

#ifndef PROTOBUF_MonitorMap_2fMonitorMap_2eproto__INCLUDED
#define PROTOBUF_MonitorMap_2fMonitorMap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MonitorMap {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MonitorMap_2fMonitorMap_2eproto();
void protobuf_AssignDesc_MonitorMap_2fMonitorMap_2eproto();
void protobuf_ShutdownFile_MonitorMap_2fMonitorMap_2eproto();

class mapInfo;
class mapItem;
class mapPlayerInfo;
class mapPlayerItem;

// ===================================================================

class mapInfo : public ::google::protobuf::Message {
 public:
  mapInfo();
  virtual ~mapInfo();

  mapInfo(const mapInfo& from);

  inline mapInfo& operator=(const mapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mapInfo& default_instance();

  void Swap(mapInfo* other);

  // implements Message ----------------------------------------------

  mapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mapInfo& from);
  void MergeFrom(const mapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MonitorMap.mapItem item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::MonitorMap::mapItem& item(int index) const;
  inline ::MonitorMap::mapItem* mutable_item(int index);
  inline ::MonitorMap::mapItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::MonitorMap::mapItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::MonitorMap::mapItem >*
      mutable_item();

  // required int32 count = 2;
  inline bool has_count() const;
  inline void clear_count();
  static const int kCountFieldNumber = 2;
  inline ::google::protobuf::int32 count() const;
  inline void set_count(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MonitorMap.mapInfo)
 private:
  inline void set_has_count();
  inline void clear_has_count();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MonitorMap::mapItem > item_;
  ::google::protobuf::int32 count_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MonitorMap_2fMonitorMap_2eproto();
  friend void protobuf_AssignDesc_MonitorMap_2fMonitorMap_2eproto();
  friend void protobuf_ShutdownFile_MonitorMap_2fMonitorMap_2eproto();

  void InitAsDefaultInstance();
  static mapInfo* default_instance_;
};
// -------------------------------------------------------------------

class mapItem : public ::google::protobuf::Message {
 public:
  mapItem();
  virtual ~mapItem();

  mapItem(const mapItem& from);

  inline mapItem& operator=(const mapItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mapItem& default_instance();

  void Swap(mapItem* other);

  // implements Message ----------------------------------------------

  mapItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mapItem& from);
  void MergeFrom(const mapItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mapid = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MonitorMap.mapItem)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 mapid_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MonitorMap_2fMonitorMap_2eproto();
  friend void protobuf_AssignDesc_MonitorMap_2fMonitorMap_2eproto();
  friend void protobuf_ShutdownFile_MonitorMap_2fMonitorMap_2eproto();

  void InitAsDefaultInstance();
  static mapItem* default_instance_;
};
// -------------------------------------------------------------------

class mapPlayerInfo : public ::google::protobuf::Message {
 public:
  mapPlayerInfo();
  virtual ~mapPlayerInfo();

  mapPlayerInfo(const mapPlayerInfo& from);

  inline mapPlayerInfo& operator=(const mapPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mapPlayerInfo& default_instance();

  void Swap(mapPlayerInfo* other);

  // implements Message ----------------------------------------------

  mapPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mapPlayerInfo& from);
  void MergeFrom(const mapPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MonitorMap.mapPlayerItem item = 1;
  inline int item_size() const;
  inline void clear_item();
  static const int kItemFieldNumber = 1;
  inline const ::MonitorMap::mapPlayerItem& item(int index) const;
  inline ::MonitorMap::mapPlayerItem* mutable_item(int index);
  inline ::MonitorMap::mapPlayerItem* add_item();
  inline const ::google::protobuf::RepeatedPtrField< ::MonitorMap::mapPlayerItem >&
      item() const;
  inline ::google::protobuf::RepeatedPtrField< ::MonitorMap::mapPlayerItem >*
      mutable_item();

  // @@protoc_insertion_point(class_scope:MonitorMap.mapPlayerInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MonitorMap::mapPlayerItem > item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MonitorMap_2fMonitorMap_2eproto();
  friend void protobuf_AssignDesc_MonitorMap_2fMonitorMap_2eproto();
  friend void protobuf_ShutdownFile_MonitorMap_2fMonitorMap_2eproto();

  void InitAsDefaultInstance();
  static mapPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class mapPlayerItem : public ::google::protobuf::Message {
 public:
  mapPlayerItem();
  virtual ~mapPlayerItem();

  mapPlayerItem(const mapPlayerItem& from);

  inline mapPlayerItem& operator=(const mapPlayerItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const mapPlayerItem& default_instance();

  void Swap(mapPlayerItem* other);

  // implements Message ----------------------------------------------

  mapPlayerItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const mapPlayerItem& from);
  void MergeFrom(const mapPlayerItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string ip = 1;
  inline bool has_ip() const;
  inline void clear_ip();
  static const int kIpFieldNumber = 1;
  inline const ::std::string& ip() const;
  inline void set_ip(const ::std::string& value);
  inline void set_ip(const char* value);
  inline void set_ip(const char* value, size_t size);
  inline ::std::string* mutable_ip();
  inline ::std::string* release_ip();
  inline void set_allocated_ip(::std::string* ip);

  // required int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // required int32 state = 3;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 3;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MonitorMap.mapPlayerItem)
 private:
  inline void set_has_ip();
  inline void clear_has_ip();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* ip_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MonitorMap_2fMonitorMap_2eproto();
  friend void protobuf_AssignDesc_MonitorMap_2fMonitorMap_2eproto();
  friend void protobuf_ShutdownFile_MonitorMap_2fMonitorMap_2eproto();

  void InitAsDefaultInstance();
  static mapPlayerItem* default_instance_;
};
// ===================================================================


// ===================================================================

// mapInfo

// repeated .MonitorMap.mapItem item = 1;
inline int mapInfo::item_size() const {
  return item_.size();
}
inline void mapInfo::clear_item() {
  item_.Clear();
}
inline const ::MonitorMap::mapItem& mapInfo::item(int index) const {
  return item_.Get(index);
}
inline ::MonitorMap::mapItem* mapInfo::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::MonitorMap::mapItem* mapInfo::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MonitorMap::mapItem >&
mapInfo::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::MonitorMap::mapItem >*
mapInfo::mutable_item() {
  return &item_;
}

// required int32 count = 2;
inline bool mapInfo::has_count() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mapInfo::set_has_count() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mapInfo::clear_has_count() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mapInfo::clear_count() {
  count_ = 0;
  clear_has_count();
}
inline ::google::protobuf::int32 mapInfo::count() const {
  return count_;
}
inline void mapInfo::set_count(::google::protobuf::int32 value) {
  set_has_count();
  count_ = value;
}

// -------------------------------------------------------------------

// mapItem

// required int32 mapid = 1;
inline bool mapItem::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mapItem::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mapItem::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mapItem::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 mapItem::mapid() const {
  return mapid_;
}
inline void mapItem::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// required int32 num = 2;
inline bool mapItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mapItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mapItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mapItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 mapItem::num() const {
  return num_;
}
inline void mapItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// mapPlayerInfo

// repeated .MonitorMap.mapPlayerItem item = 1;
inline int mapPlayerInfo::item_size() const {
  return item_.size();
}
inline void mapPlayerInfo::clear_item() {
  item_.Clear();
}
inline const ::MonitorMap::mapPlayerItem& mapPlayerInfo::item(int index) const {
  return item_.Get(index);
}
inline ::MonitorMap::mapPlayerItem* mapPlayerInfo::mutable_item(int index) {
  return item_.Mutable(index);
}
inline ::MonitorMap::mapPlayerItem* mapPlayerInfo::add_item() {
  return item_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MonitorMap::mapPlayerItem >&
mapPlayerInfo::item() const {
  return item_;
}
inline ::google::protobuf::RepeatedPtrField< ::MonitorMap::mapPlayerItem >*
mapPlayerInfo::mutable_item() {
  return &item_;
}

// -------------------------------------------------------------------

// mapPlayerItem

// required string ip = 1;
inline bool mapPlayerItem::has_ip() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void mapPlayerItem::set_has_ip() {
  _has_bits_[0] |= 0x00000001u;
}
inline void mapPlayerItem::clear_has_ip() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void mapPlayerItem::clear_ip() {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    ip_->clear();
  }
  clear_has_ip();
}
inline const ::std::string& mapPlayerItem::ip() const {
  return *ip_;
}
inline void mapPlayerItem::set_ip(const ::std::string& value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void mapPlayerItem::set_ip(const char* value) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(value);
}
inline void mapPlayerItem::set_ip(const char* value, size_t size) {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  ip_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* mapPlayerItem::mutable_ip() {
  set_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    ip_ = new ::std::string;
  }
  return ip_;
}
inline ::std::string* mapPlayerItem::release_ip() {
  clear_has_ip();
  if (ip_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = ip_;
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void mapPlayerItem::set_allocated_ip(::std::string* ip) {
  if (ip_ != &::google::protobuf::internal::kEmptyString) {
    delete ip_;
  }
  if (ip) {
    set_has_ip();
    ip_ = ip;
  } else {
    clear_has_ip();
    ip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 id = 2;
inline bool mapPlayerItem::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void mapPlayerItem::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void mapPlayerItem::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void mapPlayerItem::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 mapPlayerItem::id() const {
  return id_;
}
inline void mapPlayerItem::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// required int32 state = 3;
inline bool mapPlayerItem::has_state() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void mapPlayerItem::set_has_state() {
  _has_bits_[0] |= 0x00000004u;
}
inline void mapPlayerItem::clear_has_state() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void mapPlayerItem::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 mapPlayerItem::state() const {
  return state_;
}
inline void mapPlayerItem::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MonitorMap

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MonitorMap_2fMonitorMap_2eproto__INCLUDED
