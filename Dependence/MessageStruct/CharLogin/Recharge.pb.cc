// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/Recharge.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharLogin/Recharge.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Recharge {

namespace {

const ::google::protobuf::Descriptor* ToClientRechargeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClientRechargeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToDBRechargeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToDBRechargeInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharLogin_2fRecharge_2eproto() {
  protobuf_AddDesc_CharLogin_2fRecharge_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharLogin/Recharge.proto");
  GOOGLE_CHECK(file != NULL);
  ToClientRechargeInfo_descriptor_ = file->message_type(0);
  static const int ToClientRechargeInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientRechargeInfo, starttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientRechargeInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientRechargeInfo, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientRechargeInfo, maxday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientRechargeInfo, item_),
  };
  ToClientRechargeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClientRechargeInfo_descriptor_,
      ToClientRechargeInfo::default_instance_,
      ToClientRechargeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientRechargeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientRechargeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClientRechargeInfo));
  ToDBRechargeInfo_descriptor_ = file->message_type(1);
  static const int ToDBRechargeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToDBRechargeInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToDBRechargeInfo, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToDBRechargeInfo, maxday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToDBRechargeInfo, item_),
  };
  ToDBRechargeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToDBRechargeInfo_descriptor_,
      ToDBRechargeInfo::default_instance_,
      ToDBRechargeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToDBRechargeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToDBRechargeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToDBRechargeInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharLogin_2fRecharge_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClientRechargeInfo_descriptor_, &ToClientRechargeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToDBRechargeInfo_descriptor_, &ToDBRechargeInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharLogin_2fRecharge_2eproto() {
  delete ToClientRechargeInfo::default_instance_;
  delete ToClientRechargeInfo_reflection_;
  delete ToDBRechargeInfo::default_instance_;
  delete ToDBRechargeInfo_reflection_;
}

void protobuf_AddDesc_CharLogin_2fRecharge_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030CharLogin/Recharge.proto\022\010Recharge\"e\n\024"
    "ToClientRechargeInfo\022\021\n\tstartTime\030\001 \001(\003\022"
    "\017\n\007endTime\030\002 \001(\003\022\013\n\003day\030\003 \001(\005\022\016\n\006maxDay\030"
    "\004 \001(\005\022\014\n\004item\030\005 \003(\003\"N\n\020ToDBRechargeInfo\022"
    "\017\n\007endTime\030\001 \001(\003\022\013\n\003day\030\002 \001(\005\022\016\n\006maxDay\030"
    "\003 \001(\005\022\014\n\004item\030\004 \003(\003", 219);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharLogin/Recharge.proto", &protobuf_RegisterTypes);
  ToClientRechargeInfo::default_instance_ = new ToClientRechargeInfo();
  ToDBRechargeInfo::default_instance_ = new ToDBRechargeInfo();
  ToClientRechargeInfo::default_instance_->InitAsDefaultInstance();
  ToDBRechargeInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharLogin_2fRecharge_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharLogin_2fRecharge_2eproto {
  StaticDescriptorInitializer_CharLogin_2fRecharge_2eproto() {
    protobuf_AddDesc_CharLogin_2fRecharge_2eproto();
  }
} static_descriptor_initializer_CharLogin_2fRecharge_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ToClientRechargeInfo::kStartTimeFieldNumber;
const int ToClientRechargeInfo::kEndTimeFieldNumber;
const int ToClientRechargeInfo::kDayFieldNumber;
const int ToClientRechargeInfo::kMaxDayFieldNumber;
const int ToClientRechargeInfo::kItemFieldNumber;
#endif  // !_MSC_VER

ToClientRechargeInfo::ToClientRechargeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClientRechargeInfo::InitAsDefaultInstance() {
}

ToClientRechargeInfo::ToClientRechargeInfo(const ToClientRechargeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClientRechargeInfo::SharedCtor() {
  _cached_size_ = 0;
  starttime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  day_ = 0;
  maxday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClientRechargeInfo::~ToClientRechargeInfo() {
  SharedDtor();
}

void ToClientRechargeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClientRechargeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClientRechargeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClientRechargeInfo_descriptor_;
}

const ToClientRechargeInfo& ToClientRechargeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fRecharge_2eproto();
  return *default_instance_;
}

ToClientRechargeInfo* ToClientRechargeInfo::default_instance_ = NULL;

ToClientRechargeInfo* ToClientRechargeInfo::New() const {
  return new ToClientRechargeInfo;
}

void ToClientRechargeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    starttime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    day_ = 0;
    maxday_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClientRechargeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 startTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &starttime_)));
          set_has_starttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_day;
        break;
      }

      // optional int32 day = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_maxDay;
        break;
      }

      // optional int32 maxDay = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxday_)));
          set_has_maxday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item;
        break;
      }

      // repeated int64 item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_item())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_item())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClientRechargeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 startTime = 1;
  if (has_starttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->starttime(), output);
  }

  // optional int64 endTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->endtime(), output);
  }

  // optional int32 day = 3;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->day(), output);
  }

  // optional int32 maxDay = 4;
  if (has_maxday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->maxday(), output);
  }

  // repeated int64 item = 5;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClientRechargeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 startTime = 1;
  if (has_starttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->starttime(), target);
  }

  // optional int64 endTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->endtime(), target);
  }

  // optional int32 day = 3;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->day(), target);
  }

  // optional int32 maxDay = 4;
  if (has_maxday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->maxday(), target);
  }

  // repeated int64 item = 5;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClientRechargeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 startTime = 1;
    if (has_starttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->starttime());
    }

    // optional int64 endTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 day = 3;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 maxDay = 4;
    if (has_maxday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxday());
    }

  }
  // repeated int64 item = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->item(i));
    }
    total_size += 1 * this->item_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClientRechargeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClientRechargeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClientRechargeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClientRechargeInfo::MergeFrom(const ToClientRechargeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_starttime()) {
      set_starttime(from.starttime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_maxday()) {
      set_maxday(from.maxday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClientRechargeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClientRechargeInfo::CopyFrom(const ToClientRechargeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClientRechargeInfo::IsInitialized() const {

  return true;
}

void ToClientRechargeInfo::Swap(ToClientRechargeInfo* other) {
  if (other != this) {
    std::swap(starttime_, other->starttime_);
    std::swap(endtime_, other->endtime_);
    std::swap(day_, other->day_);
    std::swap(maxday_, other->maxday_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClientRechargeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClientRechargeInfo_descriptor_;
  metadata.reflection = ToClientRechargeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToDBRechargeInfo::kEndTimeFieldNumber;
const int ToDBRechargeInfo::kDayFieldNumber;
const int ToDBRechargeInfo::kMaxDayFieldNumber;
const int ToDBRechargeInfo::kItemFieldNumber;
#endif  // !_MSC_VER

ToDBRechargeInfo::ToDBRechargeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToDBRechargeInfo::InitAsDefaultInstance() {
}

ToDBRechargeInfo::ToDBRechargeInfo(const ToDBRechargeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToDBRechargeInfo::SharedCtor() {
  _cached_size_ = 0;
  endtime_ = GOOGLE_LONGLONG(0);
  day_ = 0;
  maxday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToDBRechargeInfo::~ToDBRechargeInfo() {
  SharedDtor();
}

void ToDBRechargeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToDBRechargeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToDBRechargeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToDBRechargeInfo_descriptor_;
}

const ToDBRechargeInfo& ToDBRechargeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fRecharge_2eproto();
  return *default_instance_;
}

ToDBRechargeInfo* ToDBRechargeInfo::default_instance_ = NULL;

ToDBRechargeInfo* ToDBRechargeInfo::New() const {
  return new ToDBRechargeInfo;
}

void ToDBRechargeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    endtime_ = GOOGLE_LONGLONG(0);
    day_ = 0;
    maxday_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToDBRechargeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 endTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_day;
        break;
      }

      // optional int32 day = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_maxDay;
        break;
      }

      // optional int32 maxDay = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxday_)));
          set_has_maxday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item;
        break;
      }

      // repeated int64 item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 32, input, this->mutable_item())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_item())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToDBRechargeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 endTime = 1;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->endtime(), output);
  }

  // optional int32 day = 2;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->day(), output);
  }

  // optional int32 maxDay = 3;
  if (has_maxday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->maxday(), output);
  }

  // repeated int64 item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      4, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToDBRechargeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 endTime = 1;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->endtime(), target);
  }

  // optional int32 day = 2;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->day(), target);
  }

  // optional int32 maxDay = 3;
  if (has_maxday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->maxday(), target);
  }

  // repeated int64 item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(4, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToDBRechargeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 endTime = 1;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 day = 2;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 maxDay = 3;
    if (has_maxday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxday());
    }

  }
  // repeated int64 item = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->item(i));
    }
    total_size += 1 * this->item_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToDBRechargeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToDBRechargeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToDBRechargeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToDBRechargeInfo::MergeFrom(const ToDBRechargeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_maxday()) {
      set_maxday(from.maxday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToDBRechargeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToDBRechargeInfo::CopyFrom(const ToDBRechargeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToDBRechargeInfo::IsInitialized() const {

  return true;
}

void ToDBRechargeInfo::Swap(ToDBRechargeInfo* other) {
  if (other != this) {
    std::swap(endtime_, other->endtime_);
    std::swap(day_, other->day_);
    std::swap(maxday_, other->maxday_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToDBRechargeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToDBRechargeInfo_descriptor_;
  metadata.reflection = ToDBRechargeInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Recharge

// @@protoc_insertion_point(global_scope)
