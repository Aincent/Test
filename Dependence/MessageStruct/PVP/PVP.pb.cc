// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: PVP/PVP.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "PVP/PVP.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PvPPackage {

namespace {

const ::google::protobuf::Descriptor* AckReqPVPMapID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqPVPMapID_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGather_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGather_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGather_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGather_reflection_ = NULL;
const ::google::protobuf::Descriptor* GaterResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GaterResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckKillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckKillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVPPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVPPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckFitchPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckFitchPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPvPData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPvPData_reflection_ = NULL;
const ::google::protobuf::Descriptor* pvpData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  pvpData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPBossDamagData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPBossDamagData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDamageData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDamageData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossHP_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossHP_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntegralData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegralData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPIntegralData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPIntegralData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDeadData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDeadData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PvPBossDeadData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PvPBossDeadData_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVPMapInfos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVPMapInfos_reflection_ = NULL;
const ::google::protobuf::Descriptor* PVPMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PVPMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPVPDataList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPVPDataList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerPVPData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerPVPData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqPlayerPVPData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqPlayerPVPData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPlayerPVPData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPlayerPVPData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GstoWsBossDead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GstoWsBossDead_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossDamageDataEX_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossDamageDataEX_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqDamageRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqDamageRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckWstoGsDamageRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckWstoGsDamageRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* WstoGsAddItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WstoGsAddItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToGMPVPState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToGMPVPState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_PVP_2fPVP_2eproto() {
  protobuf_AddDesc_PVP_2fPVP_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "PVP/PVP.proto");
  GOOGLE_CHECK(file != NULL);
  AckReqPVPMapID_descriptor_ = file->message_type(0);
  static const int AckReqPVPMapID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqPVPMapID, id_),
  };
  AckReqPVPMapID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqPVPMapID_descriptor_,
      AckReqPVPMapID::default_instance_,
      AckReqPVPMapID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqPVPMapID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqPVPMapID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqPVPMapID));
  ReqGather_descriptor_ = file->message_type(1);
  static const int ReqGather_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGather, key_),
  };
  ReqGather_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGather_descriptor_,
      ReqGather::default_instance_,
      ReqGather_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGather, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGather, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGather));
  AckGather_descriptor_ = file->message_type(2);
  static const int AckGather_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGather, ret_),
  };
  AckGather_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGather_descriptor_,
      AckGather::default_instance_,
      AckGather_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGather, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGather, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGather));
  GaterResult_descriptor_ = file->message_type(3);
  static const int GaterResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaterResult, result_),
  };
  GaterResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GaterResult_descriptor_,
      GaterResult::default_instance_,
      GaterResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaterResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GaterResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GaterResult));
  AckKillData_descriptor_ = file->message_type(4);
  static const int AckKillData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckKillData, list_),
  };
  AckKillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckKillData_descriptor_,
      AckKillData::default_instance_,
      AckKillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckKillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckKillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckKillData));
  KillData_descriptor_ = file->message_type(5);
  static const int KillData_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillData, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillData, kills_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillData, charid_),
  };
  KillData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillData_descriptor_,
      KillData::default_instance_,
      KillData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillData));
  PVPPrize_descriptor_ = file->message_type(6);
  static const int PVPPrize_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPPrize, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPPrize, integralsort_),
  };
  PVPPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVPPrize_descriptor_,
      PVPPrize::default_instance_,
      PVPPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVPPrize));
  AckFitchPrize_descriptor_ = file->message_type(7);
  static const int AckFitchPrize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFitchPrize, ret_),
  };
  AckFitchPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckFitchPrize_descriptor_,
      AckFitchPrize::default_instance_,
      AckFitchPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFitchPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckFitchPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckFitchPrize));
  PlayerPvPData_descriptor_ = file->message_type(8);
  static const int PlayerPvPData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPvPData, info_),
  };
  PlayerPvPData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerPvPData_descriptor_,
      PlayerPvPData::default_instance_,
      PlayerPvPData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPvPData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPvPData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerPvPData));
  pvpData_descriptor_ = file->message_type(9);
  static const int pvpData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvpData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvpData, value_),
  };
  pvpData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      pvpData_descriptor_,
      pvpData::default_instance_,
      pvpData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvpData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(pvpData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(pvpData));
  PvPBossDamagData_descriptor_ = file->message_type(10);
  static const int PvPBossDamagData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBossDamagData, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBossDamagData, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBossDamagData, damage_),
  };
  PvPBossDamagData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPBossDamagData_descriptor_,
      PvPBossDamagData::default_instance_,
      PvPBossDamagData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBossDamagData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBossDamagData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPBossDamagData));
  BossDamageData_descriptor_ = file->message_type(11);
  static const int BossDamageData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamageData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamageData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamageData, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamageData, charid_),
  };
  BossDamageData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDamageData_descriptor_,
      BossDamageData::default_instance_,
      BossDamageData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamageData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamageData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDamageData));
  BossHP_descriptor_ = file->message_type(12);
  static const int BossHP_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHP, hp_),
  };
  BossHP_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossHP_descriptor_,
      BossHP::default_instance_,
      BossHP_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHP, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHP, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossHP));
  IntegralData_descriptor_ = file->message_type(13);
  static const int IntegralData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralData, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralData, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralData, integral_),
  };
  IntegralData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntegralData_descriptor_,
      IntegralData::default_instance_,
      IntegralData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntegralData));
  PvPIntegralData_descriptor_ = file->message_type(14);
  static const int PvPIntegralData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPIntegralData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPIntegralData, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPIntegralData, integralsort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPIntegralData, charid_),
  };
  PvPIntegralData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPIntegralData_descriptor_,
      PvPIntegralData::default_instance_,
      PvPIntegralData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPIntegralData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPIntegralData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPIntegralData));
  BossDeadData_descriptor_ = file->message_type(15);
  static const int BossDeadData_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDeadData, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDeadData, lastattact_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDeadData, sort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDeadData, damage_),
  };
  BossDeadData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDeadData_descriptor_,
      BossDeadData::default_instance_,
      BossDeadData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDeadData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDeadData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDeadData));
  PvPBossDeadData_descriptor_ = file->message_type(16);
  static const int PvPBossDeadData_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBossDeadData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBossDeadData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBossDeadData, damage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBossDeadData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBossDeadData, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBossDeadData, pro_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBossDeadData, lv_),
  };
  PvPBossDeadData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PvPBossDeadData_descriptor_,
      PvPBossDeadData::default_instance_,
      PvPBossDeadData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBossDeadData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PvPBossDeadData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PvPBossDeadData));
  PVPMapInfos_descriptor_ = file->message_type(17);
  static const int PVPMapInfos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPMapInfos, info_),
  };
  PVPMapInfos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVPMapInfos_descriptor_,
      PVPMapInfos::default_instance_,
      PVPMapInfos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPMapInfos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPMapInfos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVPMapInfos));
  PVPMap_descriptor_ = file->message_type(18);
  static const int PVPMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPMap, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPMap, id_),
  };
  PVPMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PVPMap_descriptor_,
      PVPMap::default_instance_,
      PVPMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PVPMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PVPMap));
  PlayerPVPDataList_descriptor_ = file->message_type(19);
  static const int PlayerPVPDataList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPDataList, list_),
  };
  PlayerPVPDataList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerPVPDataList_descriptor_,
      PlayerPVPDataList::default_instance_,
      PlayerPVPDataList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPDataList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPDataList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerPVPDataList));
  PlayerPVPData_descriptor_ = file->message_type(20);
  static const int PlayerPVPData_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, totalkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, totalexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, killsort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, integral_),
  };
  PlayerPVPData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerPVPData_descriptor_,
      PlayerPVPData::default_instance_,
      PlayerPVPData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerPVPData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerPVPData));
  ReqPlayerPVPData_descriptor_ = file->message_type(21);
  static const int ReqPlayerPVPData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayerPVPData, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayerPVPData, layer_),
  };
  ReqPlayerPVPData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqPlayerPVPData_descriptor_,
      ReqPlayerPVPData::default_instance_,
      ReqPlayerPVPData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayerPVPData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqPlayerPVPData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqPlayerPVPData));
  AckPlayerPVPData_descriptor_ = file->message_type(22);
  static const int AckPlayerPVPData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerPVPData, info_),
  };
  AckPlayerPVPData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPlayerPVPData_descriptor_,
      AckPlayerPVPData::default_instance_,
      AckPlayerPVPData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerPVPData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerPVPData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPlayerPVPData));
  GstoWsBossDead_descriptor_ = file->message_type(23);
  static const int GstoWsBossDead_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GstoWsBossDead, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GstoWsBossDead, list_),
  };
  GstoWsBossDead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GstoWsBossDead_descriptor_,
      GstoWsBossDead::default_instance_,
      GstoWsBossDead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GstoWsBossDead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GstoWsBossDead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GstoWsBossDead));
  BossDamageDataEX_descriptor_ = file->message_type(24);
  static const int BossDamageDataEX_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamageDataEX, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamageDataEX, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamageDataEX, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamageDataEX, damage_),
  };
  BossDamageDataEX_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossDamageDataEX_descriptor_,
      BossDamageDataEX::default_instance_,
      BossDamageDataEX_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamageDataEX, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossDamageDataEX, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossDamageDataEX));
  ReqDamageRank_descriptor_ = file->message_type(25);
  static const int ReqDamageRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDamageRank, sence_),
  };
  ReqDamageRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqDamageRank_descriptor_,
      ReqDamageRank::default_instance_,
      ReqDamageRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDamageRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqDamageRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqDamageRank));
  AckWstoGsDamageRank_descriptor_ = file->message_type(26);
  static const int AckWstoGsDamageRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWstoGsDamageRank, list_),
  };
  AckWstoGsDamageRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckWstoGsDamageRank_descriptor_,
      AckWstoGsDamageRank::default_instance_,
      AckWstoGsDamageRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWstoGsDamageRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckWstoGsDamageRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckWstoGsDamageRank));
  WstoGsAddItem_descriptor_ = file->message_type(27);
  static const int WstoGsAddItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WstoGsAddItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WstoGsAddItem, list_),
  };
  WstoGsAddItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WstoGsAddItem_descriptor_,
      WstoGsAddItem::default_instance_,
      WstoGsAddItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WstoGsAddItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WstoGsAddItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WstoGsAddItem));
  ItemData_descriptor_ = file->message_type(28);
  static const int ItemData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, bind_),
  };
  ItemData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemData_descriptor_,
      ItemData::default_instance_,
      ItemData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemData));
  WSToGMPVPState_descriptor_ = file->message_type(29);
  static const int WSToGMPVPState_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMPVPState, state_),
  };
  WSToGMPVPState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToGMPVPState_descriptor_,
      WSToGMPVPState::default_instance_,
      WSToGMPVPState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMPVPState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMPVPState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToGMPVPState));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_PVP_2fPVP_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqPVPMapID_descriptor_, &AckReqPVPMapID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGather_descriptor_, &ReqGather::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGather_descriptor_, &AckGather::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GaterResult_descriptor_, &GaterResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckKillData_descriptor_, &AckKillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillData_descriptor_, &KillData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVPPrize_descriptor_, &PVPPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckFitchPrize_descriptor_, &AckFitchPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerPvPData_descriptor_, &PlayerPvPData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    pvpData_descriptor_, &pvpData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPBossDamagData_descriptor_, &PvPBossDamagData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDamageData_descriptor_, &BossDamageData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossHP_descriptor_, &BossHP::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntegralData_descriptor_, &IntegralData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPIntegralData_descriptor_, &PvPIntegralData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDeadData_descriptor_, &BossDeadData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PvPBossDeadData_descriptor_, &PvPBossDeadData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVPMapInfos_descriptor_, &PVPMapInfos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PVPMap_descriptor_, &PVPMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerPVPDataList_descriptor_, &PlayerPVPDataList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerPVPData_descriptor_, &PlayerPVPData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqPlayerPVPData_descriptor_, &ReqPlayerPVPData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPlayerPVPData_descriptor_, &AckPlayerPVPData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GstoWsBossDead_descriptor_, &GstoWsBossDead::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossDamageDataEX_descriptor_, &BossDamageDataEX::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqDamageRank_descriptor_, &ReqDamageRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckWstoGsDamageRank_descriptor_, &AckWstoGsDamageRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WstoGsAddItem_descriptor_, &WstoGsAddItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemData_descriptor_, &ItemData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToGMPVPState_descriptor_, &WSToGMPVPState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_PVP_2fPVP_2eproto() {
  delete AckReqPVPMapID::default_instance_;
  delete AckReqPVPMapID_reflection_;
  delete ReqGather::default_instance_;
  delete ReqGather_reflection_;
  delete AckGather::default_instance_;
  delete AckGather_reflection_;
  delete GaterResult::default_instance_;
  delete GaterResult_reflection_;
  delete AckKillData::default_instance_;
  delete AckKillData_reflection_;
  delete KillData::default_instance_;
  delete KillData_reflection_;
  delete PVPPrize::default_instance_;
  delete PVPPrize_reflection_;
  delete AckFitchPrize::default_instance_;
  delete AckFitchPrize_reflection_;
  delete PlayerPvPData::default_instance_;
  delete PlayerPvPData_reflection_;
  delete pvpData::default_instance_;
  delete pvpData_reflection_;
  delete PvPBossDamagData::default_instance_;
  delete PvPBossDamagData_reflection_;
  delete BossDamageData::default_instance_;
  delete BossDamageData_reflection_;
  delete BossHP::default_instance_;
  delete BossHP_reflection_;
  delete IntegralData::default_instance_;
  delete IntegralData_reflection_;
  delete PvPIntegralData::default_instance_;
  delete PvPIntegralData_reflection_;
  delete BossDeadData::default_instance_;
  delete BossDeadData_reflection_;
  delete PvPBossDeadData::default_instance_;
  delete PvPBossDeadData_reflection_;
  delete PVPMapInfos::default_instance_;
  delete PVPMapInfos_reflection_;
  delete PVPMap::default_instance_;
  delete PVPMap_reflection_;
  delete PlayerPVPDataList::default_instance_;
  delete PlayerPVPDataList_reflection_;
  delete PlayerPVPData::default_instance_;
  delete PlayerPVPData_reflection_;
  delete ReqPlayerPVPData::default_instance_;
  delete ReqPlayerPVPData_reflection_;
  delete AckPlayerPVPData::default_instance_;
  delete AckPlayerPVPData_reflection_;
  delete GstoWsBossDead::default_instance_;
  delete GstoWsBossDead_reflection_;
  delete BossDamageDataEX::default_instance_;
  delete BossDamageDataEX_reflection_;
  delete ReqDamageRank::default_instance_;
  delete ReqDamageRank_reflection_;
  delete AckWstoGsDamageRank::default_instance_;
  delete AckWstoGsDamageRank_reflection_;
  delete WstoGsAddItem::default_instance_;
  delete WstoGsAddItem_reflection_;
  delete ItemData::default_instance_;
  delete ItemData_reflection_;
  delete WSToGMPVPState::default_instance_;
  delete WSToGMPVPState_reflection_;
}

void protobuf_AddDesc_PVP_2fPVP_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\rPVP/PVP.proto\022\nPvPPackage\"\034\n\016AckReqPVP"
    "MapID\022\n\n\002id\030\001 \002(\003\"\030\n\tReqGather\022\013\n\003key\030\001 "
    "\002(\005\"\030\n\tAckGather\022\013\n\003ret\030\001 \002(\005\"\035\n\013GaterRe"
    "sult\022\016\n\006result\030\001 \002(\005\"1\n\013AckKillData\022\"\n\004l"
    "ist\030\001 \003(\0132\024.PvPPackage.KillData\"g\n\010KillD"
    "ata\022\014\n\004name\030\001 \002(\014\022\r\n\005level\030\002 \001(\005\022\r\n\005powe"
    "r\030\003 \001(\005\022\020\n\010viplevel\030\004 \001(\005\022\r\n\005kills\030\005 \001(\005"
    "\022\016\n\006charid\030\006 \001(\003\"2\n\010PVPPrize\022\020\n\010integral"
    "\030\001 \001(\005\022\024\n\014integralSort\030\002 \001(\005\"\034\n\rAckFitch"
    "Prize\022\013\n\003ret\030\001 \002(\005\"2\n\rPlayerPvPData\022!\n\004i"
    "nfo\030\001 \003(\0132\023.PvPPackage.pvpData\"$\n\007pvpDat"
    "a\022\n\n\002id\030\001 \002(\005\022\r\n\005value\030\002 \001(\005\"Z\n\020PvPBossD"
    "amagData\022(\n\004info\030\001 \003(\0132\032.PvPPackage.Boss"
    "DamageData\022\014\n\004sort\030\002 \001(\005\022\016\n\006damage\030\003 \001(\005"
    "\"P\n\016BossDamageData\022\014\n\004name\030\001 \002(\014\022\020\n\010vipl"
    "evel\030\002 \001(\005\022\016\n\006damage\030\003 \001(\005\022\016\n\006charid\030\004 \001"
    "(\003\"\024\n\006BossHP\022\n\n\002hp\030\001 \002(\005\"Y\n\014IntegralData"
    "\022)\n\004info\030\001 \003(\0132\033.PvPPackage.PvPIntegralD"
    "ata\022\014\n\004sort\030\002 \001(\005\022\020\n\010integral\030\003 \001(\005\"W\n\017P"
    "vPIntegralData\022\014\n\004name\030\001 \002(\014\022\020\n\010integral"
    "\030\002 \001(\005\022\024\n\014integralSort\030\003 \001(\005\022\016\n\006charid\030\004"
    " \001(\003\"\210\001\n\014BossDeadData\022)\n\004info\030\001 \003(\0132\033.Pv"
    "PPackage.PvPBossDeadData\022/\n\nlastAttact\030\002"
    " \001(\0132\033.PvPPackage.PvPBossDeadData\022\014\n\004sor"
    "t\030\003 \001(\005\022\016\n\006damage\030\004 \001(\005\"w\n\017PvPBossDeadDa"
    "ta\022\014\n\004name\030\001 \002(\014\022\020\n\010viplevel\030\002 \001(\005\022\016\n\006da"
    "mage\030\003 \001(\005\022\016\n\006charid\030\004 \001(\003\022\013\n\003sex\030\005 \001(\005\022"
    "\013\n\003pro\030\006 \001(\005\022\n\n\002lv\030\007 \001(\005\"/\n\013PVPMapInfos\022"
    " \n\004info\030\001 \003(\0132\022.PvPPackage.PVPMap\"#\n\006PVP"
    "Map\022\r\n\005layer\030\001 \002(\005\022\n\n\002id\030\002 \001(\003\"<\n\021Player"
    "PVPDataList\022\'\n\004list\030\001 \003(\0132\031.PvPPackage.P"
    "layerPVPData\"\265\001\n\rPlayerPVPData\022\016\n\006charid"
    "\030\001 \002(\003\022\r\n\005layer\030\002 \001(\005\022\021\n\ttotalkill\030\003 \001(\005"
    "\022\020\n\010totalexp\030\004 \001(\005\022\014\n\004name\030\005 \001(\014\022\r\n\005leve"
    "l\030\006 \001(\005\022\r\n\005power\030\007 \001(\005\022\020\n\010viplevel\030\010 \001(\005"
    "\022\020\n\010killsort\030\t \001(\005\022\020\n\010integral\030\n \001(\005\"1\n\020"
    "ReqPlayerPVPData\022\016\n\006charid\030\001 \002(\003\022\r\n\005laye"
    "r\030\002 \001(\005\";\n\020AckPlayerPVPData\022\'\n\004info\030\001 \002("
    "\0132\031.PvPPackage.PlayerPVPData\"L\n\016GstoWsBo"
    "ssDead\022\016\n\006charid\030\001 \002(\003\022*\n\004list\030\002 \003(\0132\034.P"
    "vPPackage.BossDamageDataEX\"R\n\020BossDamage"
    "DataEX\022\016\n\006charid\030\001 \002(\003\022\014\n\004name\030\002 \001(\014\022\020\n\010"
    "viplevel\030\003 \001(\005\022\016\n\006damage\030\004 \001(\005\"\036\n\rReqDam"
    "ageRank\022\r\n\005sence\030\001 \002(\003\"A\n\023AckWstoGsDamag"
    "eRank\022*\n\004list\030\001 \003(\0132\034.PvPPackage.BossDam"
    "ageDataEX\"C\n\rWstoGsAddItem\022\016\n\006charid\030\001 \002"
    "(\003\022\"\n\004list\030\002 \003(\0132\024.PvPPackage.ItemData\"1"
    "\n\010ItemData\022\n\n\002id\030\001 \002(\005\022\013\n\003num\030\002 \001(\005\022\014\n\004b"
    "ind\030\003 \001(\005\"\037\n\016WSToGMPVPState\022\r\n\005state\030\001 \002"
    "(\010", 1962);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "PVP/PVP.proto", &protobuf_RegisterTypes);
  AckReqPVPMapID::default_instance_ = new AckReqPVPMapID();
  ReqGather::default_instance_ = new ReqGather();
  AckGather::default_instance_ = new AckGather();
  GaterResult::default_instance_ = new GaterResult();
  AckKillData::default_instance_ = new AckKillData();
  KillData::default_instance_ = new KillData();
  PVPPrize::default_instance_ = new PVPPrize();
  AckFitchPrize::default_instance_ = new AckFitchPrize();
  PlayerPvPData::default_instance_ = new PlayerPvPData();
  pvpData::default_instance_ = new pvpData();
  PvPBossDamagData::default_instance_ = new PvPBossDamagData();
  BossDamageData::default_instance_ = new BossDamageData();
  BossHP::default_instance_ = new BossHP();
  IntegralData::default_instance_ = new IntegralData();
  PvPIntegralData::default_instance_ = new PvPIntegralData();
  BossDeadData::default_instance_ = new BossDeadData();
  PvPBossDeadData::default_instance_ = new PvPBossDeadData();
  PVPMapInfos::default_instance_ = new PVPMapInfos();
  PVPMap::default_instance_ = new PVPMap();
  PlayerPVPDataList::default_instance_ = new PlayerPVPDataList();
  PlayerPVPData::default_instance_ = new PlayerPVPData();
  ReqPlayerPVPData::default_instance_ = new ReqPlayerPVPData();
  AckPlayerPVPData::default_instance_ = new AckPlayerPVPData();
  GstoWsBossDead::default_instance_ = new GstoWsBossDead();
  BossDamageDataEX::default_instance_ = new BossDamageDataEX();
  ReqDamageRank::default_instance_ = new ReqDamageRank();
  AckWstoGsDamageRank::default_instance_ = new AckWstoGsDamageRank();
  WstoGsAddItem::default_instance_ = new WstoGsAddItem();
  ItemData::default_instance_ = new ItemData();
  WSToGMPVPState::default_instance_ = new WSToGMPVPState();
  AckReqPVPMapID::default_instance_->InitAsDefaultInstance();
  ReqGather::default_instance_->InitAsDefaultInstance();
  AckGather::default_instance_->InitAsDefaultInstance();
  GaterResult::default_instance_->InitAsDefaultInstance();
  AckKillData::default_instance_->InitAsDefaultInstance();
  KillData::default_instance_->InitAsDefaultInstance();
  PVPPrize::default_instance_->InitAsDefaultInstance();
  AckFitchPrize::default_instance_->InitAsDefaultInstance();
  PlayerPvPData::default_instance_->InitAsDefaultInstance();
  pvpData::default_instance_->InitAsDefaultInstance();
  PvPBossDamagData::default_instance_->InitAsDefaultInstance();
  BossDamageData::default_instance_->InitAsDefaultInstance();
  BossHP::default_instance_->InitAsDefaultInstance();
  IntegralData::default_instance_->InitAsDefaultInstance();
  PvPIntegralData::default_instance_->InitAsDefaultInstance();
  BossDeadData::default_instance_->InitAsDefaultInstance();
  PvPBossDeadData::default_instance_->InitAsDefaultInstance();
  PVPMapInfos::default_instance_->InitAsDefaultInstance();
  PVPMap::default_instance_->InitAsDefaultInstance();
  PlayerPVPDataList::default_instance_->InitAsDefaultInstance();
  PlayerPVPData::default_instance_->InitAsDefaultInstance();
  ReqPlayerPVPData::default_instance_->InitAsDefaultInstance();
  AckPlayerPVPData::default_instance_->InitAsDefaultInstance();
  GstoWsBossDead::default_instance_->InitAsDefaultInstance();
  BossDamageDataEX::default_instance_->InitAsDefaultInstance();
  ReqDamageRank::default_instance_->InitAsDefaultInstance();
  AckWstoGsDamageRank::default_instance_->InitAsDefaultInstance();
  WstoGsAddItem::default_instance_->InitAsDefaultInstance();
  ItemData::default_instance_->InitAsDefaultInstance();
  WSToGMPVPState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_PVP_2fPVP_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_PVP_2fPVP_2eproto {
  StaticDescriptorInitializer_PVP_2fPVP_2eproto() {
    protobuf_AddDesc_PVP_2fPVP_2eproto();
  }
} static_descriptor_initializer_PVP_2fPVP_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AckReqPVPMapID::kIdFieldNumber;
#endif  // !_MSC_VER

AckReqPVPMapID::AckReqPVPMapID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqPVPMapID::InitAsDefaultInstance() {
}

AckReqPVPMapID::AckReqPVPMapID(const AckReqPVPMapID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqPVPMapID::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqPVPMapID::~AckReqPVPMapID() {
  SharedDtor();
}

void AckReqPVPMapID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqPVPMapID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqPVPMapID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqPVPMapID_descriptor_;
}

const AckReqPVPMapID& AckReqPVPMapID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

AckReqPVPMapID* AckReqPVPMapID::default_instance_ = NULL;

AckReqPVPMapID* AckReqPVPMapID::New() const {
  return new AckReqPVPMapID;
}

void AckReqPVPMapID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqPVPMapID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqPVPMapID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqPVPMapID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqPVPMapID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqPVPMapID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqPVPMapID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqPVPMapID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqPVPMapID::MergeFrom(const AckReqPVPMapID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqPVPMapID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqPVPMapID::CopyFrom(const AckReqPVPMapID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqPVPMapID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReqPVPMapID::Swap(AckReqPVPMapID* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqPVPMapID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqPVPMapID_descriptor_;
  metadata.reflection = AckReqPVPMapID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGather::kKeyFieldNumber;
#endif  // !_MSC_VER

ReqGather::ReqGather()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGather::InitAsDefaultInstance() {
}

ReqGather::ReqGather(const ReqGather& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGather::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGather::~ReqGather() {
  SharedDtor();
}

void ReqGather::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGather::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGather::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGather_descriptor_;
}

const ReqGather& ReqGather::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

ReqGather* ReqGather::default_instance_ = NULL;

ReqGather* ReqGather::New() const {
  return new ReqGather;
}

void ReqGather::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGather::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGather::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGather::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGather::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGather::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGather* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGather*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGather::MergeFrom(const ReqGather& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGather::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGather::CopyFrom(const ReqGather& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGather::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGather::Swap(ReqGather* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGather::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGather_descriptor_;
  metadata.reflection = ReqGather_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGather::kRetFieldNumber;
#endif  // !_MSC_VER

AckGather::AckGather()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGather::InitAsDefaultInstance() {
}

AckGather::AckGather(const AckGather& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGather::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGather::~AckGather() {
  SharedDtor();
}

void AckGather::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGather::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGather::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGather_descriptor_;
}

const AckGather& AckGather::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

AckGather* AckGather::default_instance_ = NULL;

AckGather* AckGather::New() const {
  return new AckGather;
}

void AckGather::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGather::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGather::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGather::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGather::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGather::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGather* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGather*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGather::MergeFrom(const AckGather& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGather::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGather::CopyFrom(const AckGather& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGather::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGather::Swap(AckGather* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGather::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGather_descriptor_;
  metadata.reflection = AckGather_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GaterResult::kResultFieldNumber;
#endif  // !_MSC_VER

GaterResult::GaterResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GaterResult::InitAsDefaultInstance() {
}

GaterResult::GaterResult(const GaterResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GaterResult::SharedCtor() {
  _cached_size_ = 0;
  result_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GaterResult::~GaterResult() {
  SharedDtor();
}

void GaterResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GaterResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GaterResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GaterResult_descriptor_;
}

const GaterResult& GaterResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

GaterResult* GaterResult::default_instance_ = NULL;

GaterResult* GaterResult::New() const {
  return new GaterResult;
}

void GaterResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    result_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GaterResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 result = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &result_)));
          set_has_result();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GaterResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 result = 1;
  if (has_result()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->result(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GaterResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 result = 1;
  if (has_result()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->result(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GaterResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 result = 1;
    if (has_result()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->result());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GaterResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GaterResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GaterResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GaterResult::MergeFrom(const GaterResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_result()) {
      set_result(from.result());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GaterResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GaterResult::CopyFrom(const GaterResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GaterResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GaterResult::Swap(GaterResult* other) {
  if (other != this) {
    std::swap(result_, other->result_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GaterResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GaterResult_descriptor_;
  metadata.reflection = GaterResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckKillData::kListFieldNumber;
#endif  // !_MSC_VER

AckKillData::AckKillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckKillData::InitAsDefaultInstance() {
}

AckKillData::AckKillData(const AckKillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckKillData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckKillData::~AckKillData() {
  SharedDtor();
}

void AckKillData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckKillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckKillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckKillData_descriptor_;
}

const AckKillData& AckKillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

AckKillData* AckKillData::default_instance_ = NULL;

AckKillData* AckKillData::New() const {
  return new AckKillData;
}

void AckKillData::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckKillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PvPPackage.KillData list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckKillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PvPPackage.KillData list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckKillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PvPPackage.KillData list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckKillData::ByteSize() const {
  int total_size = 0;

  // repeated .PvPPackage.KillData list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckKillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckKillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckKillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckKillData::MergeFrom(const AckKillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckKillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckKillData::CopyFrom(const AckKillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckKillData::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void AckKillData::Swap(AckKillData* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckKillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckKillData_descriptor_;
  metadata.reflection = AckKillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillData::kNameFieldNumber;
const int KillData::kLevelFieldNumber;
const int KillData::kPowerFieldNumber;
const int KillData::kViplevelFieldNumber;
const int KillData::kKillsFieldNumber;
const int KillData::kCharidFieldNumber;
#endif  // !_MSC_VER

KillData::KillData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KillData::InitAsDefaultInstance() {
}

KillData::KillData(const KillData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KillData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  power_ = 0;
  viplevel_ = 0;
  kills_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillData::~KillData() {
  SharedDtor();
}

void KillData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void KillData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillData_descriptor_;
}

const KillData& KillData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

KillData* KillData::default_instance_ = NULL;

KillData* KillData::New() const {
  return new KillData;
}

void KillData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    power_ = 0;
    viplevel_ = 0;
    kills_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_power;
        break;
      }

      // optional int32 power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_viplevel;
        break;
      }

      // optional int32 viplevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kills;
        break;
      }

      // optional int32 kills = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kills_)));
          set_has_kills();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_charid;
        break;
      }

      // optional int64 charid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KillData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 power = 3;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->power(), output);
  }

  // optional int32 viplevel = 4;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->viplevel(), output);
  }

  // optional int32 kills = 5;
  if (has_kills()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->kills(), output);
  }

  // optional int64 charid = 6;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KillData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 power = 3;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->power(), target);
  }

  // optional int32 viplevel = 4;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->viplevel(), target);
  }

  // optional int32 kills = 5;
  if (has_kills()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->kills(), target);
  }

  // optional int64 charid = 6;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KillData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 viplevel = 4;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 kills = 5;
    if (has_kills()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kills());
    }

    // optional int64 charid = 6;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillData::MergeFrom(const KillData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_kills()) {
      set_kills(from.kills());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillData::CopyFrom(const KillData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KillData::Swap(KillData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(power_, other->power_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(kills_, other->kills_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillData_descriptor_;
  metadata.reflection = KillData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVPPrize::kIntegralFieldNumber;
const int PVPPrize::kIntegralSortFieldNumber;
#endif  // !_MSC_VER

PVPPrize::PVPPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVPPrize::InitAsDefaultInstance() {
}

PVPPrize::PVPPrize(const PVPPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVPPrize::SharedCtor() {
  _cached_size_ = 0;
  integral_ = 0;
  integralsort_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPPrize::~PVPPrize() {
  SharedDtor();
}

void PVPPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVPPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVPPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVPPrize_descriptor_;
}

const PVPPrize& PVPPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

PVPPrize* PVPPrize::default_instance_ = NULL;

PVPPrize* PVPPrize::New() const {
  return new PVPPrize;
}

void PVPPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    integral_ = 0;
    integralsort_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVPPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 integral = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_integralSort;
        break;
      }

      // optional int32 integralSort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integralSort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integralsort_)));
          set_has_integralsort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 integral = 1;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->integral(), output);
  }

  // optional int32 integralSort = 2;
  if (has_integralsort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->integralsort(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVPPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 integral = 1;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->integral(), target);
  }

  // optional int32 integralSort = 2;
  if (has_integralsort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->integralsort(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVPPrize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 integral = 1;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral());
    }

    // optional int32 integralSort = 2;
    if (has_integralsort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integralsort());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVPPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVPPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVPPrize::MergeFrom(const PVPPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_integral()) {
      set_integral(from.integral());
    }
    if (from.has_integralsort()) {
      set_integralsort(from.integralsort());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVPPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPPrize::CopyFrom(const PVPPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPPrize::IsInitialized() const {

  return true;
}

void PVPPrize::Swap(PVPPrize* other) {
  if (other != this) {
    std::swap(integral_, other->integral_);
    std::swap(integralsort_, other->integralsort_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVPPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVPPrize_descriptor_;
  metadata.reflection = PVPPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckFitchPrize::kRetFieldNumber;
#endif  // !_MSC_VER

AckFitchPrize::AckFitchPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckFitchPrize::InitAsDefaultInstance() {
}

AckFitchPrize::AckFitchPrize(const AckFitchPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckFitchPrize::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckFitchPrize::~AckFitchPrize() {
  SharedDtor();
}

void AckFitchPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckFitchPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckFitchPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckFitchPrize_descriptor_;
}

const AckFitchPrize& AckFitchPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

AckFitchPrize* AckFitchPrize::default_instance_ = NULL;

AckFitchPrize* AckFitchPrize::New() const {
  return new AckFitchPrize;
}

void AckFitchPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckFitchPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckFitchPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckFitchPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckFitchPrize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckFitchPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckFitchPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckFitchPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckFitchPrize::MergeFrom(const AckFitchPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckFitchPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckFitchPrize::CopyFrom(const AckFitchPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckFitchPrize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckFitchPrize::Swap(AckFitchPrize* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckFitchPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckFitchPrize_descriptor_;
  metadata.reflection = AckFitchPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerPvPData::kInfoFieldNumber;
#endif  // !_MSC_VER

PlayerPvPData::PlayerPvPData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerPvPData::InitAsDefaultInstance() {
}

PlayerPvPData::PlayerPvPData(const PlayerPvPData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerPvPData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPvPData::~PlayerPvPData() {
  SharedDtor();
}

void PlayerPvPData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerPvPData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPvPData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPvPData_descriptor_;
}

const PlayerPvPData& PlayerPvPData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

PlayerPvPData* PlayerPvPData::default_instance_ = NULL;

PlayerPvPData* PlayerPvPData::New() const {
  return new PlayerPvPData;
}

void PlayerPvPData::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerPvPData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PvPPackage.pvpData info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerPvPData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PvPPackage.pvpData info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerPvPData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PvPPackage.pvpData info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerPvPData::ByteSize() const {
  int total_size = 0;

  // repeated .PvPPackage.pvpData info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPvPData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerPvPData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerPvPData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerPvPData::MergeFrom(const PlayerPvPData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerPvPData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPvPData::CopyFrom(const PlayerPvPData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPvPData::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerPvPData::Swap(PlayerPvPData* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerPvPData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPvPData_descriptor_;
  metadata.reflection = PlayerPvPData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int pvpData::kIdFieldNumber;
const int pvpData::kValueFieldNumber;
#endif  // !_MSC_VER

pvpData::pvpData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void pvpData::InitAsDefaultInstance() {
}

pvpData::pvpData(const pvpData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void pvpData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

pvpData::~pvpData() {
  SharedDtor();
}

void pvpData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void pvpData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* pvpData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return pvpData_descriptor_;
}

const pvpData& pvpData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

pvpData* pvpData::default_instance_ = NULL;

pvpData* pvpData::New() const {
  return new pvpData;
}

void pvpData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool pvpData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void pvpData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* pvpData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int pvpData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void pvpData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const pvpData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const pvpData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void pvpData::MergeFrom(const pvpData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void pvpData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void pvpData::CopyFrom(const pvpData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool pvpData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void pvpData::Swap(pvpData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata pvpData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = pvpData_descriptor_;
  metadata.reflection = pvpData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPBossDamagData::kInfoFieldNumber;
const int PvPBossDamagData::kSortFieldNumber;
const int PvPBossDamagData::kDamageFieldNumber;
#endif  // !_MSC_VER

PvPBossDamagData::PvPBossDamagData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPBossDamagData::InitAsDefaultInstance() {
}

PvPBossDamagData::PvPBossDamagData(const PvPBossDamagData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPBossDamagData::SharedCtor() {
  _cached_size_ = 0;
  sort_ = 0;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPBossDamagData::~PvPBossDamagData() {
  SharedDtor();
}

void PvPBossDamagData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PvPBossDamagData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPBossDamagData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPBossDamagData_descriptor_;
}

const PvPBossDamagData& PvPBossDamagData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

PvPBossDamagData* PvPBossDamagData::default_instance_ = NULL;

PvPBossDamagData* PvPBossDamagData::New() const {
  return new PvPBossDamagData;
}

void PvPBossDamagData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    sort_ = 0;
    damage_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPBossDamagData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PvPPackage.BossDamageData info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_sort;
        break;
      }

      // optional int32 sort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_)));
          set_has_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damage;
        break;
      }

      // optional int32 damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPBossDamagData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PvPPackage.BossDamageData info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional int32 sort = 2;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sort(), output);
  }

  // optional int32 damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPBossDamagData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PvPPackage.BossDamageData info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional int32 sort = 2;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sort(), target);
  }

  // optional int32 damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPBossDamagData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 sort = 2;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort());
    }

    // optional int32 damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  // repeated .PvPPackage.BossDamageData info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPBossDamagData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPBossDamagData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPBossDamagData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPBossDamagData::MergeFrom(const PvPBossDamagData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_sort()) {
      set_sort(from.sort());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPBossDamagData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPBossDamagData::CopyFrom(const PvPBossDamagData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPBossDamagData::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void PvPBossDamagData::Swap(PvPBossDamagData* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(sort_, other->sort_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPBossDamagData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPBossDamagData_descriptor_;
  metadata.reflection = PvPBossDamagData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDamageData::kNameFieldNumber;
const int BossDamageData::kViplevelFieldNumber;
const int BossDamageData::kDamageFieldNumber;
const int BossDamageData::kCharidFieldNumber;
#endif  // !_MSC_VER

BossDamageData::BossDamageData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossDamageData::InitAsDefaultInstance() {
}

BossDamageData::BossDamageData(const BossDamageData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossDamageData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viplevel_ = 0;
  damage_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDamageData::~BossDamageData() {
  SharedDtor();
}

void BossDamageData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BossDamageData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDamageData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDamageData_descriptor_;
}

const BossDamageData& BossDamageData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

BossDamageData* BossDamageData::default_instance_ = NULL;

BossDamageData* BossDamageData::New() const {
  return new BossDamageData;
}

void BossDamageData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    viplevel_ = 0;
    damage_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDamageData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_viplevel;
        break;
      }

      // optional int32 viplevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damage;
        break;
      }

      // optional int32 damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional int64 charid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossDamageData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional int32 viplevel = 2;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->viplevel(), output);
  }

  // optional int32 damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damage(), output);
  }

  // optional int64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossDamageData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional int32 viplevel = 2;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->viplevel(), target);
  }

  // optional int32 damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->damage(), target);
  }

  // optional int64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossDamageData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 viplevel = 2;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // optional int64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDamageData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDamageData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDamageData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDamageData::MergeFrom(const BossDamageData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDamageData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDamageData::CopyFrom(const BossDamageData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDamageData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BossDamageData::Swap(BossDamageData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(damage_, other->damage_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDamageData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDamageData_descriptor_;
  metadata.reflection = BossDamageData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossHP::kHpFieldNumber;
#endif  // !_MSC_VER

BossHP::BossHP()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossHP::InitAsDefaultInstance() {
}

BossHP::BossHP(const BossHP& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossHP::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossHP::~BossHP() {
  SharedDtor();
}

void BossHP::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossHP::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossHP::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossHP_descriptor_;
}

const BossHP& BossHP::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

BossHP* BossHP::default_instance_ = NULL;

BossHP* BossHP::New() const {
  return new BossHP;
}

void BossHP::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossHP::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossHP::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossHP::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossHP::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossHP::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossHP* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossHP*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossHP::MergeFrom(const BossHP& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossHP::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossHP::CopyFrom(const BossHP& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossHP::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BossHP::Swap(BossHP* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossHP::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossHP_descriptor_;
  metadata.reflection = BossHP_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntegralData::kInfoFieldNumber;
const int IntegralData::kSortFieldNumber;
const int IntegralData::kIntegralFieldNumber;
#endif  // !_MSC_VER

IntegralData::IntegralData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntegralData::InitAsDefaultInstance() {
}

IntegralData::IntegralData(const IntegralData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntegralData::SharedCtor() {
  _cached_size_ = 0;
  sort_ = 0;
  integral_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntegralData::~IntegralData() {
  SharedDtor();
}

void IntegralData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntegralData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegralData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegralData_descriptor_;
}

const IntegralData& IntegralData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

IntegralData* IntegralData::default_instance_ = NULL;

IntegralData* IntegralData::New() const {
  return new IntegralData;
}

void IntegralData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    sort_ = 0;
    integral_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntegralData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PvPPackage.PvPIntegralData info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(16)) goto parse_sort;
        break;
      }

      // optional int32 sort = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_)));
          set_has_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_integral;
        break;
      }

      // optional int32 integral = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntegralData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PvPPackage.PvPIntegralData info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional int32 sort = 2;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->sort(), output);
  }

  // optional int32 integral = 3;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->integral(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntegralData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PvPPackage.PvPIntegralData info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional int32 sort = 2;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->sort(), target);
  }

  // optional int32 integral = 3;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->integral(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntegralData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 sort = 2;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort());
    }

    // optional int32 integral = 3;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral());
    }

  }
  // repeated .PvPPackage.PvPIntegralData info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegralData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntegralData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntegralData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntegralData::MergeFrom(const IntegralData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_sort()) {
      set_sort(from.sort());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntegralData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegralData::CopyFrom(const IntegralData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegralData::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void IntegralData::Swap(IntegralData* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(sort_, other->sort_);
    std::swap(integral_, other->integral_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntegralData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegralData_descriptor_;
  metadata.reflection = IntegralData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPIntegralData::kNameFieldNumber;
const int PvPIntegralData::kIntegralFieldNumber;
const int PvPIntegralData::kIntegralSortFieldNumber;
const int PvPIntegralData::kCharidFieldNumber;
#endif  // !_MSC_VER

PvPIntegralData::PvPIntegralData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPIntegralData::InitAsDefaultInstance() {
}

PvPIntegralData::PvPIntegralData(const PvPIntegralData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPIntegralData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  integral_ = 0;
  integralsort_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPIntegralData::~PvPIntegralData() {
  SharedDtor();
}

void PvPIntegralData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PvPIntegralData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPIntegralData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPIntegralData_descriptor_;
}

const PvPIntegralData& PvPIntegralData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

PvPIntegralData* PvPIntegralData::default_instance_ = NULL;

PvPIntegralData* PvPIntegralData::New() const {
  return new PvPIntegralData;
}

void PvPIntegralData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    integral_ = 0;
    integralsort_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPIntegralData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_integral;
        break;
      }

      // optional int32 integral = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_integralSort;
        break;
      }

      // optional int32 integralSort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integralSort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integralsort_)));
          set_has_integralsort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional int64 charid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPIntegralData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional int32 integral = 2;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->integral(), output);
  }

  // optional int32 integralSort = 3;
  if (has_integralsort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->integralsort(), output);
  }

  // optional int64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPIntegralData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional int32 integral = 2;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->integral(), target);
  }

  // optional int32 integralSort = 3;
  if (has_integralsort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->integralsort(), target);
  }

  // optional int64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPIntegralData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 integral = 2;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral());
    }

    // optional int32 integralSort = 3;
    if (has_integralsort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integralsort());
    }

    // optional int64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPIntegralData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPIntegralData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPIntegralData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPIntegralData::MergeFrom(const PvPIntegralData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
    if (from.has_integralsort()) {
      set_integralsort(from.integralsort());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPIntegralData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPIntegralData::CopyFrom(const PvPIntegralData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPIntegralData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PvPIntegralData::Swap(PvPIntegralData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(integral_, other->integral_);
    std::swap(integralsort_, other->integralsort_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPIntegralData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPIntegralData_descriptor_;
  metadata.reflection = PvPIntegralData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDeadData::kInfoFieldNumber;
const int BossDeadData::kLastAttactFieldNumber;
const int BossDeadData::kSortFieldNumber;
const int BossDeadData::kDamageFieldNumber;
#endif  // !_MSC_VER

BossDeadData::BossDeadData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossDeadData::InitAsDefaultInstance() {
  lastattact_ = const_cast< ::PvPPackage::PvPBossDeadData*>(&::PvPPackage::PvPBossDeadData::default_instance());
}

BossDeadData::BossDeadData(const BossDeadData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossDeadData::SharedCtor() {
  _cached_size_ = 0;
  lastattact_ = NULL;
  sort_ = 0;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDeadData::~BossDeadData() {
  SharedDtor();
}

void BossDeadData::SharedDtor() {
  if (this != default_instance_) {
    delete lastattact_;
  }
}

void BossDeadData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDeadData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDeadData_descriptor_;
}

const BossDeadData& BossDeadData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

BossDeadData* BossDeadData::default_instance_ = NULL;

BossDeadData* BossDeadData::New() const {
  return new BossDeadData;
}

void BossDeadData::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_lastattact()) {
      if (lastattact_ != NULL) lastattact_->::PvPPackage::PvPBossDeadData::Clear();
    }
    sort_ = 0;
    damage_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDeadData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PvPPackage.PvPBossDeadData info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectTag(18)) goto parse_lastAttact;
        break;
      }

      // optional .PvPPackage.PvPBossDeadData lastAttact = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lastAttact:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lastattact()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_sort;
        break;
      }

      // optional int32 sort = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sort_)));
          set_has_sort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damage;
        break;
      }

      // optional int32 damage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossDeadData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PvPPackage.PvPBossDeadData info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  // optional .PvPPackage.PvPBossDeadData lastAttact = 2;
  if (has_lastattact()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->lastattact(), output);
  }

  // optional int32 sort = 3;
  if (has_sort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sort(), output);
  }

  // optional int32 damage = 4;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossDeadData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PvPPackage.PvPBossDeadData info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  // optional .PvPPackage.PvPBossDeadData lastAttact = 2;
  if (has_lastattact()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->lastattact(), target);
  }

  // optional int32 sort = 3;
  if (has_sort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sort(), target);
  }

  // optional int32 damage = 4;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossDeadData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .PvPPackage.PvPBossDeadData lastAttact = 2;
    if (has_lastattact()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lastattact());
    }

    // optional int32 sort = 3;
    if (has_sort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sort());
    }

    // optional int32 damage = 4;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  // repeated .PvPPackage.PvPBossDeadData info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDeadData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDeadData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDeadData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDeadData::MergeFrom(const BossDeadData& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_lastattact()) {
      mutable_lastattact()->::PvPPackage::PvPBossDeadData::MergeFrom(from.lastattact());
    }
    if (from.has_sort()) {
      set_sort(from.sort());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDeadData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDeadData::CopyFrom(const BossDeadData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDeadData::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  if (has_lastattact()) {
    if (!this->lastattact().IsInitialized()) return false;
  }
  return true;
}

void BossDeadData::Swap(BossDeadData* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(lastattact_, other->lastattact_);
    std::swap(sort_, other->sort_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDeadData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDeadData_descriptor_;
  metadata.reflection = BossDeadData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PvPBossDeadData::kNameFieldNumber;
const int PvPBossDeadData::kViplevelFieldNumber;
const int PvPBossDeadData::kDamageFieldNumber;
const int PvPBossDeadData::kCharidFieldNumber;
const int PvPBossDeadData::kSexFieldNumber;
const int PvPBossDeadData::kProFieldNumber;
const int PvPBossDeadData::kLvFieldNumber;
#endif  // !_MSC_VER

PvPBossDeadData::PvPBossDeadData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PvPBossDeadData::InitAsDefaultInstance() {
}

PvPBossDeadData::PvPBossDeadData(const PvPBossDeadData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PvPBossDeadData::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viplevel_ = 0;
  damage_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  sex_ = 0;
  pro_ = 0;
  lv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PvPBossDeadData::~PvPBossDeadData() {
  SharedDtor();
}

void PvPBossDeadData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PvPBossDeadData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PvPBossDeadData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PvPBossDeadData_descriptor_;
}

const PvPBossDeadData& PvPBossDeadData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

PvPBossDeadData* PvPBossDeadData::default_instance_ = NULL;

PvPBossDeadData* PvPBossDeadData::New() const {
  return new PvPBossDeadData;
}

void PvPBossDeadData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    viplevel_ = 0;
    damage_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    sex_ = 0;
    pro_ = 0;
    lv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PvPBossDeadData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_viplevel;
        break;
      }

      // optional int32 viplevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_damage;
        break;
      }

      // optional int32 damage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charid;
        break;
      }

      // optional int64 charid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional int32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_pro;
        break;
      }

      // optional int32 pro = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pro:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pro_)));
          set_has_pro();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lv;
        break;
      }

      // optional int32 lv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PvPBossDeadData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional int32 viplevel = 2;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->viplevel(), output);
  }

  // optional int32 damage = 3;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->damage(), output);
  }

  // optional int64 charid = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->charid(), output);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  // optional int32 pro = 6;
  if (has_pro()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->pro(), output);
  }

  // optional int32 lv = 7;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->lv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PvPBossDeadData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional int32 viplevel = 2;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->viplevel(), target);
  }

  // optional int32 damage = 3;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->damage(), target);
  }

  // optional int64 charid = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->charid(), target);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  // optional int32 pro = 6;
  if (has_pro()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->pro(), target);
  }

  // optional int32 lv = 7;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->lv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PvPBossDeadData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 viplevel = 2;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 damage = 3;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

    // optional int64 charid = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 pro = 6;
    if (has_pro()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pro());
    }

    // optional int32 lv = 7;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PvPBossDeadData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PvPBossDeadData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PvPBossDeadData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PvPBossDeadData::MergeFrom(const PvPBossDeadData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_pro()) {
      set_pro(from.pro());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PvPBossDeadData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PvPBossDeadData::CopyFrom(const PvPBossDeadData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PvPBossDeadData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PvPBossDeadData::Swap(PvPBossDeadData* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(damage_, other->damage_);
    std::swap(charid_, other->charid_);
    std::swap(sex_, other->sex_);
    std::swap(pro_, other->pro_);
    std::swap(lv_, other->lv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PvPBossDeadData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PvPBossDeadData_descriptor_;
  metadata.reflection = PvPBossDeadData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVPMapInfos::kInfoFieldNumber;
#endif  // !_MSC_VER

PVPMapInfos::PVPMapInfos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVPMapInfos::InitAsDefaultInstance() {
}

PVPMapInfos::PVPMapInfos(const PVPMapInfos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVPMapInfos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPMapInfos::~PVPMapInfos() {
  SharedDtor();
}

void PVPMapInfos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVPMapInfos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVPMapInfos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVPMapInfos_descriptor_;
}

const PVPMapInfos& PVPMapInfos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

PVPMapInfos* PVPMapInfos::default_instance_ = NULL;

PVPMapInfos* PVPMapInfos::New() const {
  return new PVPMapInfos;
}

void PVPMapInfos::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVPMapInfos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PvPPackage.PVPMap info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPMapInfos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PvPPackage.PVPMap info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVPMapInfos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PvPPackage.PVPMap info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVPMapInfos::ByteSize() const {
  int total_size = 0;

  // repeated .PvPPackage.PVPMap info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPMapInfos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVPMapInfos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVPMapInfos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVPMapInfos::MergeFrom(const PVPMapInfos& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVPMapInfos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPMapInfos::CopyFrom(const PVPMapInfos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPMapInfos::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void PVPMapInfos::Swap(PVPMapInfos* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVPMapInfos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVPMapInfos_descriptor_;
  metadata.reflection = PVPMapInfos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PVPMap::kLayerFieldNumber;
const int PVPMap::kIdFieldNumber;
#endif  // !_MSC_VER

PVPMap::PVPMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PVPMap::InitAsDefaultInstance() {
}

PVPMap::PVPMap(const PVPMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PVPMap::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PVPMap::~PVPMap() {
  SharedDtor();
}

void PVPMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PVPMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PVPMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PVPMap_descriptor_;
}

const PVPMap& PVPMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

PVPMap* PVPMap::default_instance_ = NULL;

PVPMap* PVPMap::New() const {
  return new PVPMap;
}

void PVPMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layer_ = 0;
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PVPMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PVPMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layer(), output);
  }

  // optional int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PVPMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layer(), target);
  }

  // optional int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PVPMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PVPMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PVPMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PVPMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PVPMap::MergeFrom(const PVPMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PVPMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PVPMap::CopyFrom(const PVPMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PVPMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PVPMap::Swap(PVPMap* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PVPMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PVPMap_descriptor_;
  metadata.reflection = PVPMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerPVPDataList::kListFieldNumber;
#endif  // !_MSC_VER

PlayerPVPDataList::PlayerPVPDataList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerPVPDataList::InitAsDefaultInstance() {
}

PlayerPVPDataList::PlayerPVPDataList(const PlayerPVPDataList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerPVPDataList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPVPDataList::~PlayerPVPDataList() {
  SharedDtor();
}

void PlayerPVPDataList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerPVPDataList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPVPDataList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPVPDataList_descriptor_;
}

const PlayerPVPDataList& PlayerPVPDataList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

PlayerPVPDataList* PlayerPVPDataList::default_instance_ = NULL;

PlayerPVPDataList* PlayerPVPDataList::New() const {
  return new PlayerPVPDataList;
}

void PlayerPVPDataList::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerPVPDataList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PvPPackage.PlayerPVPData list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerPVPDataList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PvPPackage.PlayerPVPData list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerPVPDataList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PvPPackage.PlayerPVPData list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerPVPDataList::ByteSize() const {
  int total_size = 0;

  // repeated .PvPPackage.PlayerPVPData list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPVPDataList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerPVPDataList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerPVPDataList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerPVPDataList::MergeFrom(const PlayerPVPDataList& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerPVPDataList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPVPDataList::CopyFrom(const PlayerPVPDataList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPVPDataList::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void PlayerPVPDataList::Swap(PlayerPVPDataList* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerPVPDataList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPVPDataList_descriptor_;
  metadata.reflection = PlayerPVPDataList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerPVPData::kCharidFieldNumber;
const int PlayerPVPData::kLayerFieldNumber;
const int PlayerPVPData::kTotalkillFieldNumber;
const int PlayerPVPData::kTotalexpFieldNumber;
const int PlayerPVPData::kNameFieldNumber;
const int PlayerPVPData::kLevelFieldNumber;
const int PlayerPVPData::kPowerFieldNumber;
const int PlayerPVPData::kViplevelFieldNumber;
const int PlayerPVPData::kKillsortFieldNumber;
const int PlayerPVPData::kIntegralFieldNumber;
#endif  // !_MSC_VER

PlayerPVPData::PlayerPVPData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerPVPData::InitAsDefaultInstance() {
}

PlayerPVPData::PlayerPVPData(const PlayerPVPData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerPVPData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  layer_ = 0;
  totalkill_ = 0;
  totalexp_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  power_ = 0;
  viplevel_ = 0;
  killsort_ = 0;
  integral_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerPVPData::~PlayerPVPData() {
  SharedDtor();
}

void PlayerPVPData::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void PlayerPVPData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerPVPData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerPVPData_descriptor_;
}

const PlayerPVPData& PlayerPVPData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

PlayerPVPData* PlayerPVPData::default_instance_ = NULL;

PlayerPVPData* PlayerPVPData::New() const {
  return new PlayerPVPData;
}

void PlayerPVPData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    layer_ = 0;
    totalkill_ = 0;
    totalexp_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    power_ = 0;
    viplevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    killsort_ = 0;
    integral_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerPVPData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_layer;
        break;
      }

      // optional int32 layer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_totalkill;
        break;
      }

      // optional int32 totalkill = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalkill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalkill_)));
          set_has_totalkill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalexp;
        break;
      }

      // optional int32 totalexp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalexp_)));
          set_has_totalexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional bytes name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_level;
        break;
      }

      // optional int32 level = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_power;
        break;
      }

      // optional int32 power = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_viplevel;
        break;
      }

      // optional int32 viplevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_killsort;
        break;
      }

      // optional int32 killsort = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killsort:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killsort_)));
          set_has_killsort();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_integral;
        break;
      }

      // optional int32 integral = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerPVPData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int32 layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->layer(), output);
  }

  // optional int32 totalkill = 3;
  if (has_totalkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalkill(), output);
  }

  // optional int32 totalexp = 4;
  if (has_totalexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalexp(), output);
  }

  // optional bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->name(), output);
  }

  // optional int32 level = 6;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->level(), output);
  }

  // optional int32 power = 7;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->power(), output);
  }

  // optional int32 viplevel = 8;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->viplevel(), output);
  }

  // optional int32 killsort = 9;
  if (has_killsort()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->killsort(), output);
  }

  // optional int32 integral = 10;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->integral(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerPVPData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int32 layer = 2;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->layer(), target);
  }

  // optional int32 totalkill = 3;
  if (has_totalkill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalkill(), target);
  }

  // optional int32 totalexp = 4;
  if (has_totalexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totalexp(), target);
  }

  // optional bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }

  // optional int32 level = 6;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->level(), target);
  }

  // optional int32 power = 7;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->power(), target);
  }

  // optional int32 viplevel = 8;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->viplevel(), target);
  }

  // optional int32 killsort = 9;
  if (has_killsort()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->killsort(), target);
  }

  // optional int32 integral = 10;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->integral(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerPVPData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional int32 totalkill = 3;
    if (has_totalkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalkill());
    }

    // optional int32 totalexp = 4;
    if (has_totalexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalexp());
    }

    // optional bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 level = 6;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 power = 7;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 viplevel = 8;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 killsort = 9;
    if (has_killsort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killsort());
    }

    // optional int32 integral = 10;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerPVPData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerPVPData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerPVPData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerPVPData::MergeFrom(const PlayerPVPData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_totalkill()) {
      set_totalkill(from.totalkill());
    }
    if (from.has_totalexp()) {
      set_totalexp(from.totalexp());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_killsort()) {
      set_killsort(from.killsort());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerPVPData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerPVPData::CopyFrom(const PlayerPVPData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerPVPData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void PlayerPVPData::Swap(PlayerPVPData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(layer_, other->layer_);
    std::swap(totalkill_, other->totalkill_);
    std::swap(totalexp_, other->totalexp_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(power_, other->power_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(killsort_, other->killsort_);
    std::swap(integral_, other->integral_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerPVPData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerPVPData_descriptor_;
  metadata.reflection = PlayerPVPData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqPlayerPVPData::kCharidFieldNumber;
const int ReqPlayerPVPData::kLayerFieldNumber;
#endif  // !_MSC_VER

ReqPlayerPVPData::ReqPlayerPVPData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqPlayerPVPData::InitAsDefaultInstance() {
}

ReqPlayerPVPData::ReqPlayerPVPData(const ReqPlayerPVPData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqPlayerPVPData::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  layer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqPlayerPVPData::~ReqPlayerPVPData() {
  SharedDtor();
}

void ReqPlayerPVPData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqPlayerPVPData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqPlayerPVPData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqPlayerPVPData_descriptor_;
}

const ReqPlayerPVPData& ReqPlayerPVPData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

ReqPlayerPVPData* ReqPlayerPVPData::default_instance_ = NULL;

ReqPlayerPVPData* ReqPlayerPVPData::New() const {
  return new ReqPlayerPVPData;
}

void ReqPlayerPVPData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    layer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqPlayerPVPData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_layer;
        break;
      }

      // optional int32 layer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_layer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqPlayerPVPData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int32 layer = 2;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->layer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqPlayerPVPData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int32 layer = 2;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->layer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqPlayerPVPData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 layer = 2;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqPlayerPVPData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqPlayerPVPData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqPlayerPVPData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqPlayerPVPData::MergeFrom(const ReqPlayerPVPData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqPlayerPVPData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqPlayerPVPData::CopyFrom(const ReqPlayerPVPData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqPlayerPVPData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqPlayerPVPData::Swap(ReqPlayerPVPData* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(layer_, other->layer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqPlayerPVPData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqPlayerPVPData_descriptor_;
  metadata.reflection = ReqPlayerPVPData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPlayerPVPData::kInfoFieldNumber;
#endif  // !_MSC_VER

AckPlayerPVPData::AckPlayerPVPData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPlayerPVPData::InitAsDefaultInstance() {
  info_ = const_cast< ::PvPPackage::PlayerPVPData*>(&::PvPPackage::PlayerPVPData::default_instance());
}

AckPlayerPVPData::AckPlayerPVPData(const AckPlayerPVPData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPlayerPVPData::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPlayerPVPData::~AckPlayerPVPData() {
  SharedDtor();
}

void AckPlayerPVPData::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void AckPlayerPVPData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPlayerPVPData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPlayerPVPData_descriptor_;
}

const AckPlayerPVPData& AckPlayerPVPData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

AckPlayerPVPData* AckPlayerPVPData::default_instance_ = NULL;

AckPlayerPVPData* AckPlayerPVPData::New() const {
  return new AckPlayerPVPData;
}

void AckPlayerPVPData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::PvPPackage::PlayerPVPData::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPlayerPVPData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PvPPackage.PlayerPVPData info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPlayerPVPData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PvPPackage.PlayerPVPData info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPlayerPVPData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PvPPackage.PlayerPVPData info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPlayerPVPData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PvPPackage.PlayerPVPData info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPlayerPVPData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPlayerPVPData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPlayerPVPData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPlayerPVPData::MergeFrom(const AckPlayerPVPData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::PvPPackage::PlayerPVPData::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPlayerPVPData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerPVPData::CopyFrom(const AckPlayerPVPData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerPVPData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void AckPlayerPVPData::Swap(AckPlayerPVPData* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPlayerPVPData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPlayerPVPData_descriptor_;
  metadata.reflection = AckPlayerPVPData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GstoWsBossDead::kCharidFieldNumber;
const int GstoWsBossDead::kListFieldNumber;
#endif  // !_MSC_VER

GstoWsBossDead::GstoWsBossDead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GstoWsBossDead::InitAsDefaultInstance() {
}

GstoWsBossDead::GstoWsBossDead(const GstoWsBossDead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GstoWsBossDead::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GstoWsBossDead::~GstoWsBossDead() {
  SharedDtor();
}

void GstoWsBossDead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GstoWsBossDead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GstoWsBossDead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GstoWsBossDead_descriptor_;
}

const GstoWsBossDead& GstoWsBossDead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

GstoWsBossDead* GstoWsBossDead::default_instance_ = NULL;

GstoWsBossDead* GstoWsBossDead::New() const {
  return new GstoWsBossDead;
}

void GstoWsBossDead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GstoWsBossDead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .PvPPackage.BossDamageDataEX list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GstoWsBossDead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // repeated .PvPPackage.BossDamageDataEX list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GstoWsBossDead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // repeated .PvPPackage.BossDamageDataEX list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GstoWsBossDead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  // repeated .PvPPackage.BossDamageDataEX list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GstoWsBossDead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GstoWsBossDead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GstoWsBossDead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GstoWsBossDead::MergeFrom(const GstoWsBossDead& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GstoWsBossDead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GstoWsBossDead::CopyFrom(const GstoWsBossDead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GstoWsBossDead::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void GstoWsBossDead::Swap(GstoWsBossDead* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GstoWsBossDead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GstoWsBossDead_descriptor_;
  metadata.reflection = GstoWsBossDead_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossDamageDataEX::kCharidFieldNumber;
const int BossDamageDataEX::kNameFieldNumber;
const int BossDamageDataEX::kViplevelFieldNumber;
const int BossDamageDataEX::kDamageFieldNumber;
#endif  // !_MSC_VER

BossDamageDataEX::BossDamageDataEX()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossDamageDataEX::InitAsDefaultInstance() {
}

BossDamageDataEX::BossDamageDataEX(const BossDamageDataEX& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossDamageDataEX::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viplevel_ = 0;
  damage_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossDamageDataEX::~BossDamageDataEX() {
  SharedDtor();
}

void BossDamageDataEX::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void BossDamageDataEX::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossDamageDataEX::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossDamageDataEX_descriptor_;
}

const BossDamageDataEX& BossDamageDataEX::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

BossDamageDataEX* BossDamageDataEX::default_instance_ = NULL;

BossDamageDataEX* BossDamageDataEX::New() const {
  return new BossDamageDataEX;
}

void BossDamageDataEX::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    viplevel_ = 0;
    damage_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossDamageDataEX::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_viplevel;
        break;
      }

      // optional int32 viplevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_damage;
        break;
      }

      // optional int32 damage = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_damage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &damage_)));
          set_has_damage();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossDamageDataEX::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 viplevel = 3;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->viplevel(), output);
  }

  // optional int32 damage = 4;
  if (has_damage()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->damage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossDamageDataEX::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 viplevel = 3;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->viplevel(), target);
  }

  // optional int32 damage = 4;
  if (has_damage()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->damage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossDamageDataEX::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 viplevel = 3;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 damage = 4;
    if (has_damage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->damage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossDamageDataEX::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossDamageDataEX* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossDamageDataEX*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossDamageDataEX::MergeFrom(const BossDamageDataEX& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_damage()) {
      set_damage(from.damage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossDamageDataEX::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossDamageDataEX::CopyFrom(const BossDamageDataEX& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossDamageDataEX::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BossDamageDataEX::Swap(BossDamageDataEX* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(damage_, other->damage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossDamageDataEX::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossDamageDataEX_descriptor_;
  metadata.reflection = BossDamageDataEX_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqDamageRank::kSenceFieldNumber;
#endif  // !_MSC_VER

ReqDamageRank::ReqDamageRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqDamageRank::InitAsDefaultInstance() {
}

ReqDamageRank::ReqDamageRank(const ReqDamageRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqDamageRank::SharedCtor() {
  _cached_size_ = 0;
  sence_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqDamageRank::~ReqDamageRank() {
  SharedDtor();
}

void ReqDamageRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqDamageRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqDamageRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqDamageRank_descriptor_;
}

const ReqDamageRank& ReqDamageRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

ReqDamageRank* ReqDamageRank::default_instance_ = NULL;

ReqDamageRank* ReqDamageRank::New() const {
  return new ReqDamageRank;
}

void ReqDamageRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sence_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqDamageRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 sence = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &sence_)));
          set_has_sence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqDamageRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 sence = 1;
  if (has_sence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->sence(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqDamageRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 sence = 1;
  if (has_sence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->sence(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqDamageRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 sence = 1;
    if (has_sence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->sence());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqDamageRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqDamageRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqDamageRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqDamageRank::MergeFrom(const ReqDamageRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sence()) {
      set_sence(from.sence());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqDamageRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqDamageRank::CopyFrom(const ReqDamageRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqDamageRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqDamageRank::Swap(ReqDamageRank* other) {
  if (other != this) {
    std::swap(sence_, other->sence_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqDamageRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqDamageRank_descriptor_;
  metadata.reflection = ReqDamageRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckWstoGsDamageRank::kListFieldNumber;
#endif  // !_MSC_VER

AckWstoGsDamageRank::AckWstoGsDamageRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckWstoGsDamageRank::InitAsDefaultInstance() {
}

AckWstoGsDamageRank::AckWstoGsDamageRank(const AckWstoGsDamageRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckWstoGsDamageRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckWstoGsDamageRank::~AckWstoGsDamageRank() {
  SharedDtor();
}

void AckWstoGsDamageRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckWstoGsDamageRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckWstoGsDamageRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckWstoGsDamageRank_descriptor_;
}

const AckWstoGsDamageRank& AckWstoGsDamageRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

AckWstoGsDamageRank* AckWstoGsDamageRank::default_instance_ = NULL;

AckWstoGsDamageRank* AckWstoGsDamageRank::New() const {
  return new AckWstoGsDamageRank;
}

void AckWstoGsDamageRank::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckWstoGsDamageRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PvPPackage.BossDamageDataEX list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckWstoGsDamageRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PvPPackage.BossDamageDataEX list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckWstoGsDamageRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PvPPackage.BossDamageDataEX list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckWstoGsDamageRank::ByteSize() const {
  int total_size = 0;

  // repeated .PvPPackage.BossDamageDataEX list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckWstoGsDamageRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckWstoGsDamageRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckWstoGsDamageRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckWstoGsDamageRank::MergeFrom(const AckWstoGsDamageRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckWstoGsDamageRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckWstoGsDamageRank::CopyFrom(const AckWstoGsDamageRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckWstoGsDamageRank::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void AckWstoGsDamageRank::Swap(AckWstoGsDamageRank* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckWstoGsDamageRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckWstoGsDamageRank_descriptor_;
  metadata.reflection = AckWstoGsDamageRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WstoGsAddItem::kCharidFieldNumber;
const int WstoGsAddItem::kListFieldNumber;
#endif  // !_MSC_VER

WstoGsAddItem::WstoGsAddItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WstoGsAddItem::InitAsDefaultInstance() {
}

WstoGsAddItem::WstoGsAddItem(const WstoGsAddItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WstoGsAddItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WstoGsAddItem::~WstoGsAddItem() {
  SharedDtor();
}

void WstoGsAddItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WstoGsAddItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WstoGsAddItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WstoGsAddItem_descriptor_;
}

const WstoGsAddItem& WstoGsAddItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

WstoGsAddItem* WstoGsAddItem::default_instance_ = NULL;

WstoGsAddItem* WstoGsAddItem::New() const {
  return new WstoGsAddItem;
}

void WstoGsAddItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WstoGsAddItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .PvPPackage.ItemData list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WstoGsAddItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // repeated .PvPPackage.ItemData list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WstoGsAddItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // repeated .PvPPackage.ItemData list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WstoGsAddItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  // repeated .PvPPackage.ItemData list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WstoGsAddItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WstoGsAddItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WstoGsAddItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WstoGsAddItem::MergeFrom(const WstoGsAddItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WstoGsAddItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WstoGsAddItem::CopyFrom(const WstoGsAddItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WstoGsAddItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void WstoGsAddItem::Swap(WstoGsAddItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WstoGsAddItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WstoGsAddItem_descriptor_;
  metadata.reflection = WstoGsAddItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemData::kIdFieldNumber;
const int ItemData::kNumFieldNumber;
const int ItemData::kBindFieldNumber;
#endif  // !_MSC_VER

ItemData::ItemData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemData::InitAsDefaultInstance() {
}

ItemData::ItemData(const ItemData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  bind_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemData::~ItemData() {
  SharedDtor();
}

void ItemData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemData_descriptor_;
}

const ItemData& ItemData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

ItemData* ItemData::default_instance_ = NULL;

ItemData* ItemData::New() const {
  return new ItemData;
}

void ItemData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
    bind_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bind;
        break;
      }

      // optional int32 bind = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bind:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bind_)));
          set_has_bind();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bind(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 bind = 3;
  if (has_bind()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bind(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 bind = 3;
    if (has_bind()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bind());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemData::MergeFrom(const ItemData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_bind()) {
      set_bind(from.bind());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemData::CopyFrom(const ItemData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemData::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ItemData::Swap(ItemData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(bind_, other->bind_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemData_descriptor_;
  metadata.reflection = ItemData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToGMPVPState::kStateFieldNumber;
#endif  // !_MSC_VER

WSToGMPVPState::WSToGMPVPState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToGMPVPState::InitAsDefaultInstance() {
}

WSToGMPVPState::WSToGMPVPState(const WSToGMPVPState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToGMPVPState::SharedCtor() {
  _cached_size_ = 0;
  state_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToGMPVPState::~WSToGMPVPState() {
  SharedDtor();
}

void WSToGMPVPState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToGMPVPState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToGMPVPState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToGMPVPState_descriptor_;
}

const WSToGMPVPState& WSToGMPVPState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_PVP_2fPVP_2eproto();
  return *default_instance_;
}

WSToGMPVPState* WSToGMPVPState::default_instance_ = NULL;

WSToGMPVPState* WSToGMPVPState::New() const {
  return new WSToGMPVPState;
}

void WSToGMPVPState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToGMPVPState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToGMPVPState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToGMPVPState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToGMPVPState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool state = 1;
    if (has_state()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToGMPVPState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToGMPVPState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToGMPVPState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToGMPVPState::MergeFrom(const WSToGMPVPState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToGMPVPState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToGMPVPState::CopyFrom(const WSToGMPVPState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToGMPVPState::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToGMPVPState::Swap(WSToGMPVPState* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToGMPVPState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToGMPVPState_descriptor_;
  metadata.reflection = WSToGMPVPState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PvPPackage

// @@protoc_insertion_point(global_scope)
