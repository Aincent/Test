// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSProtoc/OpenIDSomething.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MSProtoc/OpenIDSomething.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MS_OpenIDSomething {

namespace {

const ::google::protobuf::Descriptor* Admin_GetAllLockOpenID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_GetAllLockOpenID_reflection_ = NULL;
const ::google::protobuf::Descriptor* InLockTimeRole_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InLockTimeRole_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_TalkThing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_TalkThing_reflection_ = NULL;
const ::google::protobuf::Descriptor* Aimin_Forbidden_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Aimin_Forbidden_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MSProtoc_2fOpenIDSomething_2eproto() {
  protobuf_AddDesc_MSProtoc_2fOpenIDSomething_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MSProtoc/OpenIDSomething.proto");
  GOOGLE_CHECK(file != NULL);
  Admin_GetAllLockOpenID_descriptor_ = file->message_type(0);
  static const int Admin_GetAllLockOpenID_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_GetAllLockOpenID, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_GetAllLockOpenID, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_GetAllLockOpenID, begincount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_GetAllLockOpenID, endcount_),
  };
  Admin_GetAllLockOpenID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_GetAllLockOpenID_descriptor_,
      Admin_GetAllLockOpenID::default_instance_,
      Admin_GetAllLockOpenID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_GetAllLockOpenID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_GetAllLockOpenID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_GetAllLockOpenID));
  InLockTimeRole_descriptor_ = file->message_type(1);
  static const int InLockTimeRole_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InLockTimeRole, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InLockTimeRole, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InLockTimeRole, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InLockTimeRole, reasonstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InLockTimeRole, sumcount_),
  };
  InLockTimeRole_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InLockTimeRole_descriptor_,
      InLockTimeRole::default_instance_,
      InLockTimeRole_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InLockTimeRole, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InLockTimeRole, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InLockTimeRole));
  Admin_TalkThing_descriptor_ = file->message_type(2);
  static const int Admin_TalkThing_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_TalkThing, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_TalkThing, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_TalkThing, reasonstring_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_TalkThing, dotm_),
  };
  Admin_TalkThing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_TalkThing_descriptor_,
      Admin_TalkThing::default_instance_,
      Admin_TalkThing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_TalkThing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_TalkThing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_TalkThing));
  Aimin_Forbidden_descriptor_ = file->message_type(3);
  static const int Aimin_Forbidden_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aimin_Forbidden, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aimin_Forbidden, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aimin_Forbidden, op_),
  };
  Aimin_Forbidden_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Aimin_Forbidden_descriptor_,
      Aimin_Forbidden::default_instance_,
      Aimin_Forbidden_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aimin_Forbidden, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Aimin_Forbidden, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Aimin_Forbidden));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MSProtoc_2fOpenIDSomething_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_GetAllLockOpenID_descriptor_, &Admin_GetAllLockOpenID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InLockTimeRole_descriptor_, &InLockTimeRole::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_TalkThing_descriptor_, &Admin_TalkThing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Aimin_Forbidden_descriptor_, &Aimin_Forbidden::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MSProtoc_2fOpenIDSomething_2eproto() {
  delete Admin_GetAllLockOpenID::default_instance_;
  delete Admin_GetAllLockOpenID_reflection_;
  delete InLockTimeRole::default_instance_;
  delete InLockTimeRole_reflection_;
  delete Admin_TalkThing::default_instance_;
  delete Admin_TalkThing_reflection_;
  delete Aimin_Forbidden::default_instance_;
  delete Aimin_Forbidden_reflection_;
}

void protobuf_AddDesc_MSProtoc_2fOpenIDSomething_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036MSProtoc/OpenIDSomething.proto\022\022MS_Ope"
    "nIDSomething\"`\n\026Admin_GetAllLockOpenID\022\020"
    "\n\010charName\030\001 \001(\t\022\016\n\006charID\030\002 \001(\003\022\022\n\nbegi"
    "nCount\030\003 \001(\005\022\020\n\010endCount\030\004 \001(\005\"g\n\016InLock"
    "TimeRole\022\013\n\003ret\030\001 \002(\005\022\020\n\010charName\030\002 \003(\t\022"
    "\016\n\006charID\030\003 \003(\003\022\024\n\014reasonString\030\004 \003(\t\022\020\n"
    "\010sumCount\030\005 \001(\005\"S\n\017Admin_TalkThing\022\016\n\006ch"
    "arID\030\001 \002(\003\022\014\n\004type\030\003 \002(\005\022\024\n\014reasonString"
    "\030\004 \001(\t\022\014\n\004dotm\030\005 \001(\005\";\n\017Aimin_Forbidden\022"
    "\016\n\006charID\030\001 \002(\003\022\014\n\004type\030\002 \002(\005\022\n\n\002op\030\003 \002("
    "\005", 401);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MSProtoc/OpenIDSomething.proto", &protobuf_RegisterTypes);
  Admin_GetAllLockOpenID::default_instance_ = new Admin_GetAllLockOpenID();
  InLockTimeRole::default_instance_ = new InLockTimeRole();
  Admin_TalkThing::default_instance_ = new Admin_TalkThing();
  Aimin_Forbidden::default_instance_ = new Aimin_Forbidden();
  Admin_GetAllLockOpenID::default_instance_->InitAsDefaultInstance();
  InLockTimeRole::default_instance_->InitAsDefaultInstance();
  Admin_TalkThing::default_instance_->InitAsDefaultInstance();
  Aimin_Forbidden::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MSProtoc_2fOpenIDSomething_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MSProtoc_2fOpenIDSomething_2eproto {
  StaticDescriptorInitializer_MSProtoc_2fOpenIDSomething_2eproto() {
    protobuf_AddDesc_MSProtoc_2fOpenIDSomething_2eproto();
  }
} static_descriptor_initializer_MSProtoc_2fOpenIDSomething_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int Admin_GetAllLockOpenID::kCharNameFieldNumber;
const int Admin_GetAllLockOpenID::kCharIDFieldNumber;
const int Admin_GetAllLockOpenID::kBeginCountFieldNumber;
const int Admin_GetAllLockOpenID::kEndCountFieldNumber;
#endif  // !_MSC_VER

Admin_GetAllLockOpenID::Admin_GetAllLockOpenID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_GetAllLockOpenID::InitAsDefaultInstance() {
}

Admin_GetAllLockOpenID::Admin_GetAllLockOpenID(const Admin_GetAllLockOpenID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_GetAllLockOpenID::SharedCtor() {
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charid_ = GOOGLE_LONGLONG(0);
  begincount_ = 0;
  endcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_GetAllLockOpenID::~Admin_GetAllLockOpenID() {
  SharedDtor();
}

void Admin_GetAllLockOpenID::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void Admin_GetAllLockOpenID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_GetAllLockOpenID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_GetAllLockOpenID_descriptor_;
}

const Admin_GetAllLockOpenID& Admin_GetAllLockOpenID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fOpenIDSomething_2eproto();
  return *default_instance_;
}

Admin_GetAllLockOpenID* Admin_GetAllLockOpenID::default_instance_ = NULL;

Admin_GetAllLockOpenID* Admin_GetAllLockOpenID::New() const {
  return new Admin_GetAllLockOpenID;
}

void Admin_GetAllLockOpenID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    charid_ = GOOGLE_LONGLONG(0);
    begincount_ = 0;
    endcount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_GetAllLockOpenID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string charName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charID;
        break;
      }

      // optional int64 charID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_beginCount;
        break;
      }

      // optional int32 beginCount = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begincount_)));
          set_has_begincount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endCount;
        break;
      }

      // optional int32 endCount = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &endcount_)));
          set_has_endcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_GetAllLockOpenID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string charName = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->charname(), output);
  }

  // optional int64 charID = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  // optional int32 beginCount = 3;
  if (has_begincount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->begincount(), output);
  }

  // optional int32 endCount = 4;
  if (has_endcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->endcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_GetAllLockOpenID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string charName = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->charname(), target);
  }

  // optional int64 charID = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  // optional int32 beginCount = 3;
  if (has_begincount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->begincount(), target);
  }

  // optional int32 endCount = 4;
  if (has_endcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->endcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_GetAllLockOpenID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string charName = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int64 charID = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 beginCount = 3;
    if (has_begincount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begincount());
    }

    // optional int32 endCount = 4;
    if (has_endcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->endcount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_GetAllLockOpenID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_GetAllLockOpenID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_GetAllLockOpenID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_GetAllLockOpenID::MergeFrom(const Admin_GetAllLockOpenID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_begincount()) {
      set_begincount(from.begincount());
    }
    if (from.has_endcount()) {
      set_endcount(from.endcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_GetAllLockOpenID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_GetAllLockOpenID::CopyFrom(const Admin_GetAllLockOpenID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_GetAllLockOpenID::IsInitialized() const {

  return true;
}

void Admin_GetAllLockOpenID::Swap(Admin_GetAllLockOpenID* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(charid_, other->charid_);
    std::swap(begincount_, other->begincount_);
    std::swap(endcount_, other->endcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_GetAllLockOpenID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_GetAllLockOpenID_descriptor_;
  metadata.reflection = Admin_GetAllLockOpenID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InLockTimeRole::kRetFieldNumber;
const int InLockTimeRole::kCharNameFieldNumber;
const int InLockTimeRole::kCharIDFieldNumber;
const int InLockTimeRole::kReasonStringFieldNumber;
const int InLockTimeRole::kSumCountFieldNumber;
#endif  // !_MSC_VER

InLockTimeRole::InLockTimeRole()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InLockTimeRole::InitAsDefaultInstance() {
}

InLockTimeRole::InLockTimeRole(const InLockTimeRole& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InLockTimeRole::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  sumcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InLockTimeRole::~InLockTimeRole() {
  SharedDtor();
}

void InLockTimeRole::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InLockTimeRole::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InLockTimeRole::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InLockTimeRole_descriptor_;
}

const InLockTimeRole& InLockTimeRole::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fOpenIDSomething_2eproto();
  return *default_instance_;
}

InLockTimeRole* InLockTimeRole::default_instance_ = NULL;

InLockTimeRole* InLockTimeRole::New() const {
  return new InLockTimeRole;
}

void InLockTimeRole::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    sumcount_ = 0;
  }
  charname_.Clear();
  charid_.Clear();
  reasonstring_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InLockTimeRole::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charName;
        break;
      }

      // repeated string charName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname(this->charname_size() - 1).data(),
            this->charname(this->charname_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charName;
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // repeated int64 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_charid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_charid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        if (input->ExpectTag(34)) goto parse_reasonString;
        break;
      }

      // repeated string reasonString = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reasonString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_reasonstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reasonstring(this->reasonstring_size() - 1).data(),
            this->reasonstring(this->reasonstring_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reasonString;
        if (input->ExpectTag(40)) goto parse_sumCount;
        break;
      }

      // optional int32 sumCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sumCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sumcount_)));
          set_has_sumcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InLockTimeRole::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated string charName = 2;
  for (int i = 0; i < this->charname_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->charname(i).data(), this->charname(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(i), output);
  }

  // repeated int64 charID = 3;
  for (int i = 0; i < this->charid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->charid(i), output);
  }

  // repeated string reasonString = 4;
  for (int i = 0; i < this->reasonstring_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->reasonstring(i).data(), this->reasonstring(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reasonstring(i), output);
  }

  // optional int32 sumCount = 5;
  if (has_sumcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sumcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InLockTimeRole::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated string charName = 2;
  for (int i = 0; i < this->charname_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname(i).data(), this->charname(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->charname(i), target);
  }

  // repeated int64 charID = 3;
  for (int i = 0; i < this->charid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->charid(i), target);
  }

  // repeated string reasonString = 4;
  for (int i = 0; i < this->reasonstring_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reasonstring(i).data(), this->reasonstring(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->reasonstring(i), target);
  }

  // optional int32 sumCount = 5;
  if (has_sumcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sumcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InLockTimeRole::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 sumCount = 5;
    if (has_sumcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sumcount());
    }

  }
  // repeated string charName = 2;
  total_size += 1 * this->charname_size();
  for (int i = 0; i < this->charname_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->charname(i));
  }

  // repeated int64 charID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->charid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->charid(i));
    }
    total_size += 1 * this->charid_size() + data_size;
  }

  // repeated string reasonString = 4;
  total_size += 1 * this->reasonstring_size();
  for (int i = 0; i < this->reasonstring_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->reasonstring(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InLockTimeRole::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InLockTimeRole* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InLockTimeRole*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InLockTimeRole::MergeFrom(const InLockTimeRole& from) {
  GOOGLE_CHECK_NE(&from, this);
  charname_.MergeFrom(from.charname_);
  charid_.MergeFrom(from.charid_);
  reasonstring_.MergeFrom(from.reasonstring_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_sumcount()) {
      set_sumcount(from.sumcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InLockTimeRole::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InLockTimeRole::CopyFrom(const InLockTimeRole& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InLockTimeRole::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InLockTimeRole::Swap(InLockTimeRole* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    charname_.Swap(&other->charname_);
    charid_.Swap(&other->charid_);
    reasonstring_.Swap(&other->reasonstring_);
    std::swap(sumcount_, other->sumcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InLockTimeRole::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InLockTimeRole_descriptor_;
  metadata.reflection = InLockTimeRole_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_TalkThing::kCharIDFieldNumber;
const int Admin_TalkThing::kTypeFieldNumber;
const int Admin_TalkThing::kReasonStringFieldNumber;
const int Admin_TalkThing::kDotmFieldNumber;
#endif  // !_MSC_VER

Admin_TalkThing::Admin_TalkThing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_TalkThing::InitAsDefaultInstance() {
}

Admin_TalkThing::Admin_TalkThing(const Admin_TalkThing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_TalkThing::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  reasonstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dotm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_TalkThing::~Admin_TalkThing() {
  SharedDtor();
}

void Admin_TalkThing::SharedDtor() {
  if (reasonstring_ != &::google::protobuf::internal::kEmptyString) {
    delete reasonstring_;
  }
  if (this != default_instance_) {
  }
}

void Admin_TalkThing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_TalkThing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_TalkThing_descriptor_;
}

const Admin_TalkThing& Admin_TalkThing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fOpenIDSomething_2eproto();
  return *default_instance_;
}

Admin_TalkThing* Admin_TalkThing::default_instance_ = NULL;

Admin_TalkThing* Admin_TalkThing::New() const {
  return new Admin_TalkThing;
}

void Admin_TalkThing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    if (has_reasonstring()) {
      if (reasonstring_ != &::google::protobuf::internal::kEmptyString) {
        reasonstring_->clear();
      }
    }
    dotm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_TalkThing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // required int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_reasonString;
        break;
      }

      // optional string reasonString = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_reasonString:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_reasonstring()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->reasonstring().data(), this->reasonstring().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dotm;
        break;
      }

      // optional int32 dotm = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dotm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dotm_)));
          set_has_dotm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_TalkThing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // optional string reasonString = 4;
  if (has_reasonstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reasonstring().data(), this->reasonstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->reasonstring(), output);
  }

  // optional int32 dotm = 5;
  if (has_dotm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dotm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_TalkThing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // optional string reasonString = 4;
  if (has_reasonstring()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->reasonstring().data(), this->reasonstring().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->reasonstring(), target);
  }

  // optional int32 dotm = 5;
  if (has_dotm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dotm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_TalkThing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string reasonString = 4;
    if (has_reasonstring()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->reasonstring());
    }

    // optional int32 dotm = 5;
    if (has_dotm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dotm());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_TalkThing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_TalkThing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_TalkThing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_TalkThing::MergeFrom(const Admin_TalkThing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_reasonstring()) {
      set_reasonstring(from.reasonstring());
    }
    if (from.has_dotm()) {
      set_dotm(from.dotm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_TalkThing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_TalkThing::CopyFrom(const Admin_TalkThing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_TalkThing::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Admin_TalkThing::Swap(Admin_TalkThing* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(reasonstring_, other->reasonstring_);
    std::swap(dotm_, other->dotm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_TalkThing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_TalkThing_descriptor_;
  metadata.reflection = Admin_TalkThing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Aimin_Forbidden::kCharIDFieldNumber;
const int Aimin_Forbidden::kTypeFieldNumber;
const int Aimin_Forbidden::kOpFieldNumber;
#endif  // !_MSC_VER

Aimin_Forbidden::Aimin_Forbidden()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Aimin_Forbidden::InitAsDefaultInstance() {
}

Aimin_Forbidden::Aimin_Forbidden(const Aimin_Forbidden& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Aimin_Forbidden::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  op_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Aimin_Forbidden::~Aimin_Forbidden() {
  SharedDtor();
}

void Aimin_Forbidden::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Aimin_Forbidden::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Aimin_Forbidden::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Aimin_Forbidden_descriptor_;
}

const Aimin_Forbidden& Aimin_Forbidden::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fOpenIDSomething_2eproto();
  return *default_instance_;
}

Aimin_Forbidden* Aimin_Forbidden::default_instance_ = NULL;

Aimin_Forbidden* Aimin_Forbidden::New() const {
  return new Aimin_Forbidden;
}

void Aimin_Forbidden::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
    op_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Aimin_Forbidden::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_op;
        break;
      }

      // required int32 op = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Aimin_Forbidden::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 op = 3;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->op(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Aimin_Forbidden::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 op = 3;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->op(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Aimin_Forbidden::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 op = 3;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Aimin_Forbidden::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Aimin_Forbidden* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Aimin_Forbidden*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Aimin_Forbidden::MergeFrom(const Aimin_Forbidden& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Aimin_Forbidden::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Aimin_Forbidden::CopyFrom(const Aimin_Forbidden& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Aimin_Forbidden::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void Aimin_Forbidden::Swap(Aimin_Forbidden* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(op_, other->op_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Aimin_Forbidden::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Aimin_Forbidden_descriptor_;
  metadata.reflection = Aimin_Forbidden_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MS_OpenIDSomething

// @@protoc_insertion_point(global_scope)
