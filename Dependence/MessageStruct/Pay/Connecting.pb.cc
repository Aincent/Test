// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pay/Connecting.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Pay/Connecting.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ConnectingInfo {

namespace {

const ::google::protobuf::Descriptor* FromConnectingReqAskPayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FromConnectingReqAskPayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToConnectingReqAskPayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToConnectingReqAskPayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysConnectingPayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysConnectingPayInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Pay_2fConnecting_2eproto() {
  protobuf_AddDesc_Pay_2fConnecting_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Pay/Connecting.proto");
  GOOGLE_CHECK(file != NULL);
  FromConnectingReqAskPayInfo_descriptor_ = file->message_type(0);
  static const int FromConnectingReqAskPayInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FromConnectingReqAskPayInfo, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FromConnectingReqAskPayInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FromConnectingReqAskPayInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FromConnectingReqAskPayInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FromConnectingReqAskPayInfo, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FromConnectingReqAskPayInfo, sig_),
  };
  FromConnectingReqAskPayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FromConnectingReqAskPayInfo_descriptor_,
      FromConnectingReqAskPayInfo::default_instance_,
      FromConnectingReqAskPayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FromConnectingReqAskPayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FromConnectingReqAskPayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FromConnectingReqAskPayInfo));
  ToConnectingReqAskPayInfo_descriptor_ = file->message_type(1);
  static const int ToConnectingReqAskPayInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToConnectingReqAskPayInfo, ret_),
  };
  ToConnectingReqAskPayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToConnectingReqAskPayInfo_descriptor_,
      ToConnectingReqAskPayInfo::default_instance_,
      ToConnectingReqAskPayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToConnectingReqAskPayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToConnectingReqAskPayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToConnectingReqAskPayInfo));
  SysConnectingPayInfo_descriptor_ = file->message_type(2);
  static const int SysConnectingPayInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysConnectingPayInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysConnectingPayInfo, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysConnectingPayInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysConnectingPayInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysConnectingPayInfo, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysConnectingPayInfo, sig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysConnectingPayInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysConnectingPayInfo, flag_),
  };
  SysConnectingPayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysConnectingPayInfo_descriptor_,
      SysConnectingPayInfo::default_instance_,
      SysConnectingPayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysConnectingPayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysConnectingPayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysConnectingPayInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Pay_2fConnecting_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FromConnectingReqAskPayInfo_descriptor_, &FromConnectingReqAskPayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToConnectingReqAskPayInfo_descriptor_, &ToConnectingReqAskPayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysConnectingPayInfo_descriptor_, &SysConnectingPayInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Pay_2fConnecting_2eproto() {
  delete FromConnectingReqAskPayInfo::default_instance_;
  delete FromConnectingReqAskPayInfo_reflection_;
  delete ToConnectingReqAskPayInfo::default_instance_;
  delete ToConnectingReqAskPayInfo_reflection_;
  delete SysConnectingPayInfo::default_instance_;
  delete SysConnectingPayInfo_reflection_;
}

void protobuf_AddDesc_Pay_2fConnecting_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\024Pay/Connecting.proto\022\016ConnectingInfo\"\177"
    "\n\033FromConnectingReqAskPayInfo\022\016\n\006openid\030"
    "\001 \002(\t\022\020\n\010serverid\030\002 \002(\r\022\017\n\007orderid\030\003 \002(\t"
    "\022\r\n\005money\030\004 \002(\r\022\021\n\ttimestamp\030\005 \002(\004\022\013\n\003si"
    "g\030\006 \002(\t\"(\n\031ToConnectingReqAskPayInfo\022\013\n\003"
    "ret\030\001 \002(\005\"\221\001\n\024SysConnectingPayInfo\022\016\n\006ch"
    "arid\030\001 \002(\003\022\016\n\006openid\030\002 \002(\t\022\017\n\007orderid\030\003 "
    "\002(\t\022\r\n\005money\030\004 \002(\r\022\021\n\ttimestamp\030\005 \002(\004\022\013\n"
    "\003sig\030\006 \002(\t\022\013\n\003ret\030\007 \002(\005\022\014\n\004flag\030\010 \002(\005", 357);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Pay/Connecting.proto", &protobuf_RegisterTypes);
  FromConnectingReqAskPayInfo::default_instance_ = new FromConnectingReqAskPayInfo();
  ToConnectingReqAskPayInfo::default_instance_ = new ToConnectingReqAskPayInfo();
  SysConnectingPayInfo::default_instance_ = new SysConnectingPayInfo();
  FromConnectingReqAskPayInfo::default_instance_->InitAsDefaultInstance();
  ToConnectingReqAskPayInfo::default_instance_->InitAsDefaultInstance();
  SysConnectingPayInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Pay_2fConnecting_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Pay_2fConnecting_2eproto {
  StaticDescriptorInitializer_Pay_2fConnecting_2eproto() {
    protobuf_AddDesc_Pay_2fConnecting_2eproto();
  }
} static_descriptor_initializer_Pay_2fConnecting_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int FromConnectingReqAskPayInfo::kOpenidFieldNumber;
const int FromConnectingReqAskPayInfo::kServeridFieldNumber;
const int FromConnectingReqAskPayInfo::kOrderidFieldNumber;
const int FromConnectingReqAskPayInfo::kMoneyFieldNumber;
const int FromConnectingReqAskPayInfo::kTimestampFieldNumber;
const int FromConnectingReqAskPayInfo::kSigFieldNumber;
#endif  // !_MSC_VER

FromConnectingReqAskPayInfo::FromConnectingReqAskPayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FromConnectingReqAskPayInfo::InitAsDefaultInstance() {
}

FromConnectingReqAskPayInfo::FromConnectingReqAskPayInfo(const FromConnectingReqAskPayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FromConnectingReqAskPayInfo::SharedCtor() {
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FromConnectingReqAskPayInfo::~FromConnectingReqAskPayInfo() {
  SharedDtor();
}

void FromConnectingReqAskPayInfo::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (this != default_instance_) {
  }
}

void FromConnectingReqAskPayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FromConnectingReqAskPayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FromConnectingReqAskPayInfo_descriptor_;
}

const FromConnectingReqAskPayInfo& FromConnectingReqAskPayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2fConnecting_2eproto();
  return *default_instance_;
}

FromConnectingReqAskPayInfo* FromConnectingReqAskPayInfo::default_instance_ = NULL;

FromConnectingReqAskPayInfo* FromConnectingReqAskPayInfo::New() const {
  return new FromConnectingReqAskPayInfo;
}

void FromConnectingReqAskPayInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    serverid_ = 0u;
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    money_ = 0u;
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::kEmptyString) {
        sig_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FromConnectingReqAskPayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string openid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orderid;
        break;
      }

      // required string orderid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // required uint32 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sig;
        break;
      }

      // required string sig = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sig().data(), this->sig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FromConnectingReqAskPayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->openid(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // required string orderid = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderid(), output);
  }

  // required uint32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->money(), output);
  }

  // required uint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // required string sig = 6;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FromConnectingReqAskPayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // required string orderid = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderid(), target);
  }

  // required uint32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->money(), target);
  }

  // required uint64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // required string sig = 6;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FromConnectingReqAskPayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string openid = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required string orderid = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // required uint32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // required uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required string sig = 6;
    if (has_sig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FromConnectingReqAskPayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FromConnectingReqAskPayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FromConnectingReqAskPayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FromConnectingReqAskPayInfo::MergeFrom(const FromConnectingReqAskPayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FromConnectingReqAskPayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FromConnectingReqAskPayInfo::CopyFrom(const FromConnectingReqAskPayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FromConnectingReqAskPayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void FromConnectingReqAskPayInfo::Swap(FromConnectingReqAskPayInfo* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(serverid_, other->serverid_);
    std::swap(orderid_, other->orderid_);
    std::swap(money_, other->money_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(sig_, other->sig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FromConnectingReqAskPayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FromConnectingReqAskPayInfo_descriptor_;
  metadata.reflection = FromConnectingReqAskPayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToConnectingReqAskPayInfo::kRetFieldNumber;
#endif  // !_MSC_VER

ToConnectingReqAskPayInfo::ToConnectingReqAskPayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToConnectingReqAskPayInfo::InitAsDefaultInstance() {
}

ToConnectingReqAskPayInfo::ToConnectingReqAskPayInfo(const ToConnectingReqAskPayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToConnectingReqAskPayInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToConnectingReqAskPayInfo::~ToConnectingReqAskPayInfo() {
  SharedDtor();
}

void ToConnectingReqAskPayInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToConnectingReqAskPayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToConnectingReqAskPayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToConnectingReqAskPayInfo_descriptor_;
}

const ToConnectingReqAskPayInfo& ToConnectingReqAskPayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2fConnecting_2eproto();
  return *default_instance_;
}

ToConnectingReqAskPayInfo* ToConnectingReqAskPayInfo::default_instance_ = NULL;

ToConnectingReqAskPayInfo* ToConnectingReqAskPayInfo::New() const {
  return new ToConnectingReqAskPayInfo;
}

void ToConnectingReqAskPayInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToConnectingReqAskPayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToConnectingReqAskPayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToConnectingReqAskPayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToConnectingReqAskPayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToConnectingReqAskPayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToConnectingReqAskPayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToConnectingReqAskPayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToConnectingReqAskPayInfo::MergeFrom(const ToConnectingReqAskPayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToConnectingReqAskPayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToConnectingReqAskPayInfo::CopyFrom(const ToConnectingReqAskPayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToConnectingReqAskPayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToConnectingReqAskPayInfo::Swap(ToConnectingReqAskPayInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToConnectingReqAskPayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToConnectingReqAskPayInfo_descriptor_;
  metadata.reflection = ToConnectingReqAskPayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysConnectingPayInfo::kCharidFieldNumber;
const int SysConnectingPayInfo::kOpenidFieldNumber;
const int SysConnectingPayInfo::kOrderidFieldNumber;
const int SysConnectingPayInfo::kMoneyFieldNumber;
const int SysConnectingPayInfo::kTimestampFieldNumber;
const int SysConnectingPayInfo::kSigFieldNumber;
const int SysConnectingPayInfo::kRetFieldNumber;
const int SysConnectingPayInfo::kFlagFieldNumber;
#endif  // !_MSC_VER

SysConnectingPayInfo::SysConnectingPayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysConnectingPayInfo::InitAsDefaultInstance() {
}

SysConnectingPayInfo::SysConnectingPayInfo(const SysConnectingPayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysConnectingPayInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ret_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysConnectingPayInfo::~SysConnectingPayInfo() {
  SharedDtor();
}

void SysConnectingPayInfo::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (this != default_instance_) {
  }
}

void SysConnectingPayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysConnectingPayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysConnectingPayInfo_descriptor_;
}

const SysConnectingPayInfo& SysConnectingPayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2fConnecting_2eproto();
  return *default_instance_;
}

SysConnectingPayInfo* SysConnectingPayInfo::default_instance_ = NULL;

SysConnectingPayInfo* SysConnectingPayInfo::New() const {
  return new SysConnectingPayInfo;
}

void SysConnectingPayInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    money_ = 0u;
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::kEmptyString) {
        sig_->clear();
      }
    }
    ret_ = 0;
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysConnectingPayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // required string openid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orderid;
        break;
      }

      // required string orderid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // required uint32 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sig;
        break;
      }

      // required string sig = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sig().data(), this->sig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ret;
        break;
      }

      // required int32 ret = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_flag;
        break;
      }

      // required int32 flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysConnectingPayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid(), output);
  }

  // required string orderid = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderid(), output);
  }

  // required uint32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->money(), output);
  }

  // required uint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // required string sig = 6;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sig(), output);
  }

  // required int32 ret = 7;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ret(), output);
  }

  // required int32 flag = 8;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysConnectingPayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  // required string orderid = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderid(), target);
  }

  // required uint32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->money(), target);
  }

  // required uint64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // required string sig = 6;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sig(), target);
  }

  // required int32 ret = 7;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ret(), target);
  }

  // required int32 flag = 8;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysConnectingPayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required string orderid = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // required uint32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // required uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required string sig = 6;
    if (has_sig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sig());
    }

    // required int32 ret = 7;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 flag = 8;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysConnectingPayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysConnectingPayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysConnectingPayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysConnectingPayInfo::MergeFrom(const SysConnectingPayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysConnectingPayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysConnectingPayInfo::CopyFrom(const SysConnectingPayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysConnectingPayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void SysConnectingPayInfo::Swap(SysConnectingPayInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(openid_, other->openid_);
    std::swap(orderid_, other->orderid_);
    std::swap(money_, other->money_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(sig_, other->sig_);
    std::swap(ret_, other->ret_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysConnectingPayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysConnectingPayInfo_descriptor_;
  metadata.reflection = SysConnectingPayInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConnectingInfo

// @@protoc_insertion_point(global_scope)
