// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: QuickMessage.proto

#ifndef PROTOBUF_QuickMessage_2eproto__INCLUDED
#define PROTOBUF_QuickMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ServerMessage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_QuickMessage_2eproto();
void protobuf_AssignDesc_QuickMessage_2eproto();
void protobuf_ShutdownFile_QuickMessage_2eproto();

class ClientSingleMessage;
class ClientMessagePackage;
class ToGateServerMessagePack;
class WSToGateServerMessage;
class ToGMSimplePackage;
class ToGMRequestPackage;

// ===================================================================

class ClientSingleMessage : public ::google::protobuf::Message {
 public:
  ClientSingleMessage();
  virtual ~ClientSingleMessage();

  ClientSingleMessage(const ClientSingleMessage& from);

  inline ClientSingleMessage& operator=(const ClientSingleMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientSingleMessage& default_instance();

  void Swap(ClientSingleMessage* other);

  // implements Message ----------------------------------------------

  ClientSingleMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientSingleMessage& from);
  void MergeFrom(const ClientSingleMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional bytes content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:ServerMessage.ClientSingleMessage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* content_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_QuickMessage_2eproto();
  friend void protobuf_AssignDesc_QuickMessage_2eproto();
  friend void protobuf_ShutdownFile_QuickMessage_2eproto();

  void InitAsDefaultInstance();
  static ClientSingleMessage* default_instance_;
};
// -------------------------------------------------------------------

class ClientMessagePackage : public ::google::protobuf::Message {
 public:
  ClientMessagePackage();
  virtual ~ClientMessagePackage();

  ClientMessagePackage(const ClientMessagePackage& from);

  inline ClientMessagePackage& operator=(const ClientMessagePackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientMessagePackage& default_instance();

  void Swap(ClientMessagePackage* other);

  // implements Message ----------------------------------------------

  ClientMessagePackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientMessagePackage& from);
  void MergeFrom(const ClientMessagePackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ServerMessage.ClientSingleMessage content = 1;
  inline int content_size() const;
  inline void clear_content();
  static const int kContentFieldNumber = 1;
  inline const ::ServerMessage::ClientSingleMessage& content(int index) const;
  inline ::ServerMessage::ClientSingleMessage* mutable_content(int index);
  inline ::ServerMessage::ClientSingleMessage* add_content();
  inline const ::google::protobuf::RepeatedPtrField< ::ServerMessage::ClientSingleMessage >&
      content() const;
  inline ::google::protobuf::RepeatedPtrField< ::ServerMessage::ClientSingleMessage >*
      mutable_content();

  // @@protoc_insertion_point(class_scope:ServerMessage.ClientMessagePackage)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ServerMessage::ClientSingleMessage > content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_QuickMessage_2eproto();
  friend void protobuf_AssignDesc_QuickMessage_2eproto();
  friend void protobuf_ShutdownFile_QuickMessage_2eproto();

  void InitAsDefaultInstance();
  static ClientMessagePackage* default_instance_;
};
// -------------------------------------------------------------------

class ToGateServerMessagePack : public ::google::protobuf::Message {
 public:
  ToGateServerMessagePack();
  virtual ~ToGateServerMessagePack();

  ToGateServerMessagePack(const ToGateServerMessagePack& from);

  inline ToGateServerMessagePack& operator=(const ToGateServerMessagePack& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToGateServerMessagePack& default_instance();

  void Swap(ToGateServerMessagePack* other);

  // implements Message ----------------------------------------------

  ToGateServerMessagePack* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToGateServerMessagePack& from);
  void MergeFrom(const ToGateServerMessagePack& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional .ServerMessage.ClientMessagePackage content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::ServerMessage::ClientMessagePackage& content() const;
  inline ::ServerMessage::ClientMessagePackage* mutable_content();
  inline ::ServerMessage::ClientMessagePackage* release_content();
  inline void set_allocated_content(::ServerMessage::ClientMessagePackage* content);

  // @@protoc_insertion_point(class_scope:ServerMessage.ToGateServerMessagePack)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::ServerMessage::ClientMessagePackage* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_QuickMessage_2eproto();
  friend void protobuf_AssignDesc_QuickMessage_2eproto();
  friend void protobuf_ShutdownFile_QuickMessage_2eproto();

  void InitAsDefaultInstance();
  static ToGateServerMessagePack* default_instance_;
};
// -------------------------------------------------------------------

class WSToGateServerMessage : public ::google::protobuf::Message {
 public:
  WSToGateServerMessage();
  virtual ~WSToGateServerMessage();

  WSToGateServerMessage(const WSToGateServerMessage& from);

  inline WSToGateServerMessage& operator=(const WSToGateServerMessage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToGateServerMessage& default_instance();

  void Swap(WSToGateServerMessage* other);

  // implements Message ----------------------------------------------

  WSToGateServerMessage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToGateServerMessage& from);
  void MergeFrom(const WSToGateServerMessage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional .ServerMessage.ClientSingleMessage content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::ServerMessage::ClientSingleMessage& content() const;
  inline ::ServerMessage::ClientSingleMessage* mutable_content();
  inline ::ServerMessage::ClientSingleMessage* release_content();
  inline void set_allocated_content(::ServerMessage::ClientSingleMessage* content);

  // @@protoc_insertion_point(class_scope:ServerMessage.WSToGateServerMessage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::ServerMessage::ClientSingleMessage* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_QuickMessage_2eproto();
  friend void protobuf_AssignDesc_QuickMessage_2eproto();
  friend void protobuf_ShutdownFile_QuickMessage_2eproto();

  void InitAsDefaultInstance();
  static WSToGateServerMessage* default_instance_;
};
// -------------------------------------------------------------------

class ToGMSimplePackage : public ::google::protobuf::Message {
 public:
  ToGMSimplePackage();
  virtual ~ToGMSimplePackage();

  ToGMSimplePackage(const ToGMSimplePackage& from);

  inline ToGMSimplePackage& operator=(const ToGMSimplePackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToGMSimplePackage& default_instance();

  void Swap(ToGMSimplePackage* other);

  // implements Message ----------------------------------------------

  ToGMSimplePackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToGMSimplePackage& from);
  void MergeFrom(const ToGMSimplePackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional .ServerMessage.ClientSingleMessage content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::ServerMessage::ClientSingleMessage& content() const;
  inline ::ServerMessage::ClientSingleMessage* mutable_content();
  inline ::ServerMessage::ClientSingleMessage* release_content();
  inline void set_allocated_content(::ServerMessage::ClientSingleMessage* content);

  // @@protoc_insertion_point(class_scope:ServerMessage.ToGMSimplePackage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::ServerMessage::ClientSingleMessage* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_QuickMessage_2eproto();
  friend void protobuf_AssignDesc_QuickMessage_2eproto();
  friend void protobuf_ShutdownFile_QuickMessage_2eproto();

  void InitAsDefaultInstance();
  static ToGMSimplePackage* default_instance_;
};
// -------------------------------------------------------------------

class ToGMRequestPackage : public ::google::protobuf::Message {
 public:
  ToGMRequestPackage();
  virtual ~ToGMRequestPackage();

  ToGMRequestPackage(const ToGMRequestPackage& from);

  inline ToGMRequestPackage& operator=(const ToGMRequestPackage& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToGMRequestPackage& default_instance();

  void Swap(ToGMRequestPackage* other);

  // implements Message ----------------------------------------------

  ToGMRequestPackage* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToGMRequestPackage& from);
  void MergeFrom(const ToGMRequestPackage& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional .ServerMessage.ClientSingleMessage content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::ServerMessage::ClientSingleMessage& content() const;
  inline ::ServerMessage::ClientSingleMessage* mutable_content();
  inline ::ServerMessage::ClientSingleMessage* release_content();
  inline void set_allocated_content(::ServerMessage::ClientSingleMessage* content);

  // @@protoc_insertion_point(class_scope:ServerMessage.ToGMRequestPackage)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::ServerMessage::ClientSingleMessage* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_QuickMessage_2eproto();
  friend void protobuf_AssignDesc_QuickMessage_2eproto();
  friend void protobuf_ShutdownFile_QuickMessage_2eproto();

  void InitAsDefaultInstance();
  static ToGMRequestPackage* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientSingleMessage

// required int32 id = 1;
inline bool ClientSingleMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientSingleMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientSingleMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientSingleMessage::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ClientSingleMessage::id() const {
  return id_;
}
inline void ClientSingleMessage::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional bytes content = 2;
inline bool ClientSingleMessage::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientSingleMessage::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientSingleMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientSingleMessage::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& ClientSingleMessage::content() const {
  return *content_;
}
inline void ClientSingleMessage::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ClientSingleMessage::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ClientSingleMessage::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientSingleMessage::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* ClientSingleMessage::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientSingleMessage::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ClientMessagePackage

// repeated .ServerMessage.ClientSingleMessage content = 1;
inline int ClientMessagePackage::content_size() const {
  return content_.size();
}
inline void ClientMessagePackage::clear_content() {
  content_.Clear();
}
inline const ::ServerMessage::ClientSingleMessage& ClientMessagePackage::content(int index) const {
  return content_.Get(index);
}
inline ::ServerMessage::ClientSingleMessage* ClientMessagePackage::mutable_content(int index) {
  return content_.Mutable(index);
}
inline ::ServerMessage::ClientSingleMessage* ClientMessagePackage::add_content() {
  return content_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ServerMessage::ClientSingleMessage >&
ClientMessagePackage::content() const {
  return content_;
}
inline ::google::protobuf::RepeatedPtrField< ::ServerMessage::ClientSingleMessage >*
ClientMessagePackage::mutable_content() {
  return &content_;
}

// -------------------------------------------------------------------

// ToGateServerMessagePack

// required int64 id = 1;
inline bool ToGateServerMessagePack::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToGateServerMessagePack::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToGateServerMessagePack::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToGateServerMessagePack::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ToGateServerMessagePack::id() const {
  return id_;
}
inline void ToGateServerMessagePack::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional .ServerMessage.ClientMessagePackage content = 2;
inline bool ToGateServerMessagePack::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToGateServerMessagePack::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToGateServerMessagePack::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToGateServerMessagePack::clear_content() {
  if (content_ != NULL) content_->::ServerMessage::ClientMessagePackage::Clear();
  clear_has_content();
}
inline const ::ServerMessage::ClientMessagePackage& ToGateServerMessagePack::content() const {
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::ServerMessage::ClientMessagePackage* ToGateServerMessagePack::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::ServerMessage::ClientMessagePackage;
  return content_;
}
inline ::ServerMessage::ClientMessagePackage* ToGateServerMessagePack::release_content() {
  clear_has_content();
  ::ServerMessage::ClientMessagePackage* temp = content_;
  content_ = NULL;
  return temp;
}
inline void ToGateServerMessagePack::set_allocated_content(::ServerMessage::ClientMessagePackage* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
}

// -------------------------------------------------------------------

// WSToGateServerMessage

// required int64 id = 1;
inline bool WSToGateServerMessage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToGateServerMessage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToGateServerMessage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToGateServerMessage::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 WSToGateServerMessage::id() const {
  return id_;
}
inline void WSToGateServerMessage::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional .ServerMessage.ClientSingleMessage content = 2;
inline bool WSToGateServerMessage::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSToGateServerMessage::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSToGateServerMessage::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSToGateServerMessage::clear_content() {
  if (content_ != NULL) content_->::ServerMessage::ClientSingleMessage::Clear();
  clear_has_content();
}
inline const ::ServerMessage::ClientSingleMessage& WSToGateServerMessage::content() const {
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::ServerMessage::ClientSingleMessage* WSToGateServerMessage::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::ServerMessage::ClientSingleMessage;
  return content_;
}
inline ::ServerMessage::ClientSingleMessage* WSToGateServerMessage::release_content() {
  clear_has_content();
  ::ServerMessage::ClientSingleMessage* temp = content_;
  content_ = NULL;
  return temp;
}
inline void WSToGateServerMessage::set_allocated_content(::ServerMessage::ClientSingleMessage* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
}

// -------------------------------------------------------------------

// ToGMSimplePackage

// required int64 id = 1;
inline bool ToGMSimplePackage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToGMSimplePackage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToGMSimplePackage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToGMSimplePackage::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ToGMSimplePackage::id() const {
  return id_;
}
inline void ToGMSimplePackage::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional .ServerMessage.ClientSingleMessage content = 2;
inline bool ToGMSimplePackage::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToGMSimplePackage::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToGMSimplePackage::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToGMSimplePackage::clear_content() {
  if (content_ != NULL) content_->::ServerMessage::ClientSingleMessage::Clear();
  clear_has_content();
}
inline const ::ServerMessage::ClientSingleMessage& ToGMSimplePackage::content() const {
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::ServerMessage::ClientSingleMessage* ToGMSimplePackage::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::ServerMessage::ClientSingleMessage;
  return content_;
}
inline ::ServerMessage::ClientSingleMessage* ToGMSimplePackage::release_content() {
  clear_has_content();
  ::ServerMessage::ClientSingleMessage* temp = content_;
  content_ = NULL;
  return temp;
}
inline void ToGMSimplePackage::set_allocated_content(::ServerMessage::ClientSingleMessage* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
}

// -------------------------------------------------------------------

// ToGMRequestPackage

// required int64 id = 1;
inline bool ToGMRequestPackage::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToGMRequestPackage::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToGMRequestPackage::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToGMRequestPackage::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 ToGMRequestPackage::id() const {
  return id_;
}
inline void ToGMRequestPackage::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional .ServerMessage.ClientSingleMessage content = 2;
inline bool ToGMRequestPackage::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToGMRequestPackage::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToGMRequestPackage::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToGMRequestPackage::clear_content() {
  if (content_ != NULL) content_->::ServerMessage::ClientSingleMessage::Clear();
  clear_has_content();
}
inline const ::ServerMessage::ClientSingleMessage& ToGMRequestPackage::content() const {
  return content_ != NULL ? *content_ : *default_instance_->content_;
}
inline ::ServerMessage::ClientSingleMessage* ToGMRequestPackage::mutable_content() {
  set_has_content();
  if (content_ == NULL) content_ = new ::ServerMessage::ClientSingleMessage;
  return content_;
}
inline ::ServerMessage::ClientSingleMessage* ToGMRequestPackage::release_content() {
  clear_has_content();
  ::ServerMessage::ClientSingleMessage* temp = content_;
  content_ = NULL;
  return temp;
}
inline void ToGMRequestPackage::set_allocated_content(::ServerMessage::ClientSingleMessage* content) {
  delete content_;
  content_ = content;
  if (content) {
    set_has_content();
  } else {
    clear_has_content();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ServerMessage

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_QuickMessage_2eproto__INCLUDED
