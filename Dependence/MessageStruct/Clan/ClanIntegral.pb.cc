// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Clan/ClanIntegral.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Clan/ClanIntegral.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ClanPackage {

namespace {

const ::google::protobuf::Descriptor* RetIntegralInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetIntegralInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RntegralRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RntegralRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetSingUpIntegral_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetSingUpIntegral_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetReSingUpIntegral_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetReSingUpIntegral_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetAttClanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetAttClanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetNoticeWar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetNoticeWar_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetKillRankingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetKillRankingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* KillRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KillRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleKillRanking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleKillRanking_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleKill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleKill_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntegralReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegralReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* IntegralWinReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  IntegralWinReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysReSingUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysReSingUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysIntegralOnlyId_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysIntegralOnlyId_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysIntegralToWorld_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysIntegralToWorld_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysIntegral_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysIntegral_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Clan_2fClanIntegral_2eproto() {
  protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Clan/ClanIntegral.proto");
  GOOGLE_CHECK(file != NULL);
  RetIntegralInfo_descriptor_ = file->message_type(0);
  static const int RetIntegralInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetIntegralInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetIntegralInfo, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetIntegralInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetIntegralInfo, win_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetIntegralInfo, lose_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetIntegralInfo, clanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetIntegralInfo, onlyid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetIntegralInfo, besingup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetIntegralInfo, info_),
  };
  RetIntegralInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetIntegralInfo_descriptor_,
      RetIntegralInfo::default_instance_,
      RetIntegralInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetIntegralInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetIntegralInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetIntegralInfo));
  RntegralRanking_descriptor_ = file->message_type(1);
  static const int RntegralRanking_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RntegralRanking, clanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RntegralRanking, integral_),
  };
  RntegralRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RntegralRanking_descriptor_,
      RntegralRanking::default_instance_,
      RntegralRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RntegralRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RntegralRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RntegralRanking));
  RetSingUpIntegral_descriptor_ = file->message_type(2);
  static const int RetSingUpIntegral_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSingUpIntegral, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSingUpIntegral, info_),
  };
  RetSingUpIntegral_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetSingUpIntegral_descriptor_,
      RetSingUpIntegral::default_instance_,
      RetSingUpIntegral_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSingUpIntegral, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSingUpIntegral, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetSingUpIntegral));
  RetReSingUpIntegral_descriptor_ = file->message_type(3);
  static const int RetReSingUpIntegral_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetReSingUpIntegral, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetReSingUpIntegral, info_),
  };
  RetReSingUpIntegral_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetReSingUpIntegral_descriptor_,
      RetReSingUpIntegral::default_instance_,
      RetReSingUpIntegral_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetReSingUpIntegral, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetReSingUpIntegral, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetReSingUpIntegral));
  RetAttClanInfo_descriptor_ = file->message_type(4);
  static const int RetAttClanInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAttClanInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAttClanInfo, clanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAttClanInfo, clanlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAttClanInfo, pepolenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAttClanInfo, integral_),
  };
  RetAttClanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetAttClanInfo_descriptor_,
      RetAttClanInfo::default_instance_,
      RetAttClanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAttClanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAttClanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetAttClanInfo));
  RetNoticeWar_descriptor_ = file->message_type(5);
  static const int RetNoticeWar_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetNoticeWar, ret_),
  };
  RetNoticeWar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetNoticeWar_descriptor_,
      RetNoticeWar::default_instance_,
      RetNoticeWar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetNoticeWar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetNoticeWar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetNoticeWar));
  RetKillRankingInfo_descriptor_ = file->message_type(6);
  static const int RetKillRankingInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetKillRankingInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetKillRankingInfo, myself_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetKillRankingInfo, other_),
  };
  RetKillRankingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetKillRankingInfo_descriptor_,
      RetKillRankingInfo::default_instance_,
      RetKillRankingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetKillRankingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetKillRankingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetKillRankingInfo));
  KillRanking_descriptor_ = file->message_type(7);
  static const int KillRanking_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRanking, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRanking, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRanking, info_),
  };
  KillRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KillRanking_descriptor_,
      KillRanking::default_instance_,
      KillRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KillRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KillRanking));
  SingleKillRanking_descriptor_ = file->message_type(8);
  static const int SingleKillRanking_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleKillRanking, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleKillRanking, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleKillRanking, die_),
  };
  SingleKillRanking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleKillRanking_descriptor_,
      SingleKillRanking::default_instance_,
      SingleKillRanking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleKillRanking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleKillRanking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleKillRanking));
  SingleKill_descriptor_ = file->message_type(9);
  static const int SingleKill_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleKill, totalboss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleKill, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleKill, othertotalboss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleKill, othertotal_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleKill, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleKill, die_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleKill, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleKill, ranking_),
  };
  SingleKill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleKill_descriptor_,
      SingleKill::default_instance_,
      SingleKill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleKill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleKill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleKill));
  IntegralReward_descriptor_ = file->message_type(10);
  static const int IntegralReward_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralReward, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralReward, clanintegral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralReward, clanmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralReward, kill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralReward, items_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralReward, singkillitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralReward, mvpitems_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralReward, killitems_),
  };
  IntegralReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntegralReward_descriptor_,
      IntegralReward::default_instance_,
      IntegralReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntegralReward));
  IntegralWinReward_descriptor_ = file->message_type(11);
  static const int IntegralWinReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralWinReward, items_),
  };
  IntegralWinReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      IntegralWinReward_descriptor_,
      IntegralWinReward::default_instance_,
      IntegralWinReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralWinReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(IntegralWinReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(IntegralWinReward));
  RewardInfo_descriptor_ = file->message_type(12);
  static const int RewardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, itemnum_),
  };
  RewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardInfo_descriptor_,
      RewardInfo::default_instance_,
      RewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardInfo));
  SysReSingUp_descriptor_ = file->message_type(13);
  static const int SysReSingUp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysReSingUp, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysReSingUp, golden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysReSingUp, ret_),
  };
  SysReSingUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysReSingUp_descriptor_,
      SysReSingUp::default_instance_,
      SysReSingUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysReSingUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysReSingUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysReSingUp));
  SysIntegralOnlyId_descriptor_ = file->message_type(14);
  static const int SysIntegralOnlyId_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysIntegralOnlyId, onlyid_),
  };
  SysIntegralOnlyId_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysIntegralOnlyId_descriptor_,
      SysIntegralOnlyId::default_instance_,
      SysIntegralOnlyId_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysIntegralOnlyId, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysIntegralOnlyId, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysIntegralOnlyId));
  SysIntegralToWorld_descriptor_ = file->message_type(15);
  static const int SysIntegralToWorld_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysIntegralToWorld, integralf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysIntegralToWorld, integrals_),
  };
  SysIntegralToWorld_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysIntegralToWorld_descriptor_,
      SysIntegralToWorld::default_instance_,
      SysIntegralToWorld_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysIntegralToWorld, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysIntegralToWorld, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysIntegralToWorld));
  SysIntegral_descriptor_ = file->message_type(16);
  static const int SysIntegral_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysIntegral, clanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysIntegral, clanintegral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysIntegral, clanmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysIntegral, issuccess_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysIntegral, charidlist_),
  };
  SysIntegral_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysIntegral_descriptor_,
      SysIntegral::default_instance_,
      SysIntegral_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysIntegral, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysIntegral, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysIntegral));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Clan_2fClanIntegral_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetIntegralInfo_descriptor_, &RetIntegralInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RntegralRanking_descriptor_, &RntegralRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetSingUpIntegral_descriptor_, &RetSingUpIntegral::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetReSingUpIntegral_descriptor_, &RetReSingUpIntegral::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetAttClanInfo_descriptor_, &RetAttClanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetNoticeWar_descriptor_, &RetNoticeWar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetKillRankingInfo_descriptor_, &RetKillRankingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KillRanking_descriptor_, &KillRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleKillRanking_descriptor_, &SingleKillRanking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleKill_descriptor_, &SingleKill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntegralReward_descriptor_, &IntegralReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    IntegralWinReward_descriptor_, &IntegralWinReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardInfo_descriptor_, &RewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysReSingUp_descriptor_, &SysReSingUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysIntegralOnlyId_descriptor_, &SysIntegralOnlyId::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysIntegralToWorld_descriptor_, &SysIntegralToWorld::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysIntegral_descriptor_, &SysIntegral::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Clan_2fClanIntegral_2eproto() {
  delete RetIntegralInfo::default_instance_;
  delete RetIntegralInfo_reflection_;
  delete RntegralRanking::default_instance_;
  delete RntegralRanking_reflection_;
  delete RetSingUpIntegral::default_instance_;
  delete RetSingUpIntegral_reflection_;
  delete RetReSingUpIntegral::default_instance_;
  delete RetReSingUpIntegral_reflection_;
  delete RetAttClanInfo::default_instance_;
  delete RetAttClanInfo_reflection_;
  delete RetNoticeWar::default_instance_;
  delete RetNoticeWar_reflection_;
  delete RetKillRankingInfo::default_instance_;
  delete RetKillRankingInfo_reflection_;
  delete KillRanking::default_instance_;
  delete KillRanking_reflection_;
  delete SingleKillRanking::default_instance_;
  delete SingleKillRanking_reflection_;
  delete SingleKill::default_instance_;
  delete SingleKill_reflection_;
  delete IntegralReward::default_instance_;
  delete IntegralReward_reflection_;
  delete IntegralWinReward::default_instance_;
  delete IntegralWinReward_reflection_;
  delete RewardInfo::default_instance_;
  delete RewardInfo_reflection_;
  delete SysReSingUp::default_instance_;
  delete SysReSingUp_reflection_;
  delete SysIntegralOnlyId::default_instance_;
  delete SysIntegralOnlyId_reflection_;
  delete SysIntegralToWorld::default_instance_;
  delete SysIntegralToWorld_reflection_;
  delete SysIntegral::default_instance_;
  delete SysIntegral_reflection_;
}

void protobuf_AddDesc_Clan_2fClanIntegral_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027Clan/ClanIntegral.proto\022\013ClanPackage\"\275"
    "\001\n\017RetIntegralInfo\022\016\n\006status\030\001 \002(\005\022\020\n\010in"
    "tegral\030\002 \001(\005\022\r\n\005power\030\003 \001(\005\022\013\n\003win\030\004 \001(\005"
    "\022\014\n\004lose\030\005 \001(\005\022\020\n\010clanname\030\006 \001(\014\022\016\n\006only"
    "id\030\007 \001(\003\022\020\n\010besingup\030\010 \001(\010\022*\n\004info\030\t \003(\013"
    "2\034.ClanPackage.RntegralRanking\"5\n\017Rntegr"
    "alRanking\022\020\n\010clanname\030\001 \001(\014\022\020\n\010integral\030"
    "\002 \001(\005\"L\n\021RetSingUpIntegral\022\013\n\003ret\030\001 \002(\005\022"
    "*\n\004info\030\002 \001(\0132\034.ClanPackage.RetIntegralI"
    "nfo\"N\n\023RetReSingUpIntegral\022\013\n\003ret\030\001 \002(\005\022"
    "*\n\004info\030\002 \001(\0132\034.ClanPackage.RetIntegralI"
    "nfo\"d\n\016RetAttClanInfo\022\013\n\003ret\030\001 \002(\005\022\020\n\010cl"
    "anname\030\002 \001(\014\022\016\n\006clanlv\030\003 \001(\005\022\021\n\tpepolenu"
    "m\030\004 \001(\005\022\020\n\010integral\030\005 \001(\005\"\033\n\014RetNoticeWa"
    "r\022\013\n\003ret\030\001 \002(\005\"t\n\022RetKillRankingInfo\022\013\n\003"
    "ret\030\001 \002(\005\022(\n\006myself\030\002 \001(\0132\030.ClanPackage."
    "KillRanking\022\'\n\005other\030\003 \001(\0132\030.ClanPackage"
    ".KillRanking\"X\n\013KillRanking\022\014\n\004boss\030\001 \001("
    "\005\022\r\n\005total\030\002 \001(\005\022,\n\004info\030\003 \003(\0132\036.ClanPac"
    "kage.SingleKillRanking\"<\n\021SingleKillRank"
    "ing\022\014\n\004name\030\001 \001(\014\022\014\n\004kill\030\002 \001(\005\022\013\n\003die\030\003"
    " \001(\005\"\224\001\n\nSingleKill\022\021\n\ttotalboss\030\001 \001(\005\022\r"
    "\n\005total\030\002 \001(\005\022\026\n\016othertotalboss\030\003 \001(\005\022\022\n"
    "\nothertotal\030\004 \001(\005\022\014\n\004kill\030\005 \001(\005\022\013\n\003die\030\006"
    " \001(\005\022\014\n\004boss\030\007 \001(\005\022\017\n\007ranking\030\010 \001(\005\"\211\002\n\016"
    "IntegralReward\022\021\n\tIsSuccess\030\001 \002(\005\022\024\n\014cla"
    "nIntegral\030\002 \001(\005\022\021\n\tclanmoney\030\003 \001(\005\022\014\n\004ki"
    "ll\030\004 \001(\005\022&\n\005items\030\005 \003(\0132\027.ClanPackage.Re"
    "wardInfo\022.\n\rsingkillitems\030\006 \003(\0132\027.ClanPa"
    "ckage.RewardInfo\022)\n\010mvpitems\030\007 \003(\0132\027.Cla"
    "nPackage.RewardInfo\022*\n\tkillitems\030\010 \003(\0132\027"
    ".ClanPackage.RewardInfo\";\n\021IntegralWinRe"
    "ward\022&\n\005items\030\005 \003(\0132\027.ClanPackage.Reward"
    "Info\"-\n\nRewardInfo\022\016\n\006itemid\030\001 \002(\005\022\017\n\007it"
    "emnum\030\002 \001(\005\":\n\013SysReSingUp\022\016\n\006charid\030\001 \002"
    "(\003\022\016\n\006golden\030\002 \001(\005\022\013\n\003ret\030\003 \001(\005\"#\n\021SysIn"
    "tegralOnlyId\022\016\n\006onlyid\030\001 \002(\003\"n\n\022SysInteg"
    "ralToWorld\022+\n\tintegralf\030\001 \001(\0132\030.ClanPack"
    "age.SysIntegral\022+\n\tintegrals\030\002 \001(\0132\030.Cla"
    "nPackage.SysIntegral\"m\n\013SysIntegral\022\016\n\006c"
    "lanId\030\001 \002(\005\022\024\n\014clanIntegral\030\002 \001(\005\022\021\n\tcla"
    "nmoney\030\003 \001(\005\022\021\n\tIsSuccess\030\004 \001(\005\022\022\n\nchari"
    "dList\030\005 \003(\003", 1691);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Clan/ClanIntegral.proto", &protobuf_RegisterTypes);
  RetIntegralInfo::default_instance_ = new RetIntegralInfo();
  RntegralRanking::default_instance_ = new RntegralRanking();
  RetSingUpIntegral::default_instance_ = new RetSingUpIntegral();
  RetReSingUpIntegral::default_instance_ = new RetReSingUpIntegral();
  RetAttClanInfo::default_instance_ = new RetAttClanInfo();
  RetNoticeWar::default_instance_ = new RetNoticeWar();
  RetKillRankingInfo::default_instance_ = new RetKillRankingInfo();
  KillRanking::default_instance_ = new KillRanking();
  SingleKillRanking::default_instance_ = new SingleKillRanking();
  SingleKill::default_instance_ = new SingleKill();
  IntegralReward::default_instance_ = new IntegralReward();
  IntegralWinReward::default_instance_ = new IntegralWinReward();
  RewardInfo::default_instance_ = new RewardInfo();
  SysReSingUp::default_instance_ = new SysReSingUp();
  SysIntegralOnlyId::default_instance_ = new SysIntegralOnlyId();
  SysIntegralToWorld::default_instance_ = new SysIntegralToWorld();
  SysIntegral::default_instance_ = new SysIntegral();
  RetIntegralInfo::default_instance_->InitAsDefaultInstance();
  RntegralRanking::default_instance_->InitAsDefaultInstance();
  RetSingUpIntegral::default_instance_->InitAsDefaultInstance();
  RetReSingUpIntegral::default_instance_->InitAsDefaultInstance();
  RetAttClanInfo::default_instance_->InitAsDefaultInstance();
  RetNoticeWar::default_instance_->InitAsDefaultInstance();
  RetKillRankingInfo::default_instance_->InitAsDefaultInstance();
  KillRanking::default_instance_->InitAsDefaultInstance();
  SingleKillRanking::default_instance_->InitAsDefaultInstance();
  SingleKill::default_instance_->InitAsDefaultInstance();
  IntegralReward::default_instance_->InitAsDefaultInstance();
  IntegralWinReward::default_instance_->InitAsDefaultInstance();
  RewardInfo::default_instance_->InitAsDefaultInstance();
  SysReSingUp::default_instance_->InitAsDefaultInstance();
  SysIntegralOnlyId::default_instance_->InitAsDefaultInstance();
  SysIntegralToWorld::default_instance_->InitAsDefaultInstance();
  SysIntegral::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Clan_2fClanIntegral_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Clan_2fClanIntegral_2eproto {
  StaticDescriptorInitializer_Clan_2fClanIntegral_2eproto() {
    protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  }
} static_descriptor_initializer_Clan_2fClanIntegral_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RetIntegralInfo::kStatusFieldNumber;
const int RetIntegralInfo::kIntegralFieldNumber;
const int RetIntegralInfo::kPowerFieldNumber;
const int RetIntegralInfo::kWinFieldNumber;
const int RetIntegralInfo::kLoseFieldNumber;
const int RetIntegralInfo::kClannameFieldNumber;
const int RetIntegralInfo::kOnlyidFieldNumber;
const int RetIntegralInfo::kBesingupFieldNumber;
const int RetIntegralInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

RetIntegralInfo::RetIntegralInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetIntegralInfo::InitAsDefaultInstance() {
}

RetIntegralInfo::RetIntegralInfo(const RetIntegralInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetIntegralInfo::SharedCtor() {
  _cached_size_ = 0;
  status_ = 0;
  integral_ = 0;
  power_ = 0;
  win_ = 0;
  lose_ = 0;
  clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  onlyid_ = GOOGLE_LONGLONG(0);
  besingup_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetIntegralInfo::~RetIntegralInfo() {
  SharedDtor();
}

void RetIntegralInfo::SharedDtor() {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (this != default_instance_) {
  }
}

void RetIntegralInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetIntegralInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetIntegralInfo_descriptor_;
}

const RetIntegralInfo& RetIntegralInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

RetIntegralInfo* RetIntegralInfo::default_instance_ = NULL;

RetIntegralInfo* RetIntegralInfo::New() const {
  return new RetIntegralInfo;
}

void RetIntegralInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    status_ = 0;
    integral_ = 0;
    power_ = 0;
    win_ = 0;
    lose_ = 0;
    if (has_clanname()) {
      if (clanname_ != &::google::protobuf::internal::kEmptyString) {
        clanname_->clear();
      }
    }
    onlyid_ = GOOGLE_LONGLONG(0);
    besingup_ = false;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetIntegralInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 status = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_integral;
        break;
      }

      // optional int32 integral = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_power;
        break;
      }

      // optional int32 power = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_win;
        break;
      }

      // optional int32 win = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_win:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &win_)));
          set_has_win();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lose;
        break;
      }

      // optional int32 lose = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lose:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lose_)));
          set_has_lose();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_clanname;
        break;
      }

      // optional bytes clanname = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clanname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clanname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_onlyid;
        break;
      }

      // optional int64 onlyid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &onlyid_)));
          set_has_onlyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_besingup;
        break;
      }

      // optional bool besingup = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_besingup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &besingup_)));
          set_has_besingup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_info;
        break;
      }

      // repeated .ClanPackage.RntegralRanking info = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetIntegralInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 status = 1;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->status(), output);
  }

  // optional int32 integral = 2;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->integral(), output);
  }

  // optional int32 power = 3;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->power(), output);
  }

  // optional int32 win = 4;
  if (has_win()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->win(), output);
  }

  // optional int32 lose = 5;
  if (has_lose()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lose(), output);
  }

  // optional bytes clanname = 6;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->clanname(), output);
  }

  // optional int64 onlyid = 7;
  if (has_onlyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->onlyid(), output);
  }

  // optional bool besingup = 8;
  if (has_besingup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->besingup(), output);
  }

  // repeated .ClanPackage.RntegralRanking info = 9;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetIntegralInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 status = 1;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->status(), target);
  }

  // optional int32 integral = 2;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->integral(), target);
  }

  // optional int32 power = 3;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->power(), target);
  }

  // optional int32 win = 4;
  if (has_win()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->win(), target);
  }

  // optional int32 lose = 5;
  if (has_lose()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lose(), target);
  }

  // optional bytes clanname = 6;
  if (has_clanname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->clanname(), target);
  }

  // optional int64 onlyid = 7;
  if (has_onlyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->onlyid(), target);
  }

  // optional bool besingup = 8;
  if (has_besingup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->besingup(), target);
  }

  // repeated .ClanPackage.RntegralRanking info = 9;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetIntegralInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 status = 1;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 integral = 2;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral());
    }

    // optional int32 power = 3;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 win = 4;
    if (has_win()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->win());
    }

    // optional int32 lose = 5;
    if (has_lose()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lose());
    }

    // optional bytes clanname = 6;
    if (has_clanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clanname());
    }

    // optional int64 onlyid = 7;
    if (has_onlyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->onlyid());
    }

    // optional bool besingup = 8;
    if (has_besingup()) {
      total_size += 1 + 1;
    }

  }
  // repeated .ClanPackage.RntegralRanking info = 9;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetIntegralInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetIntegralInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetIntegralInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetIntegralInfo::MergeFrom(const RetIntegralInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_win()) {
      set_win(from.win());
    }
    if (from.has_lose()) {
      set_lose(from.lose());
    }
    if (from.has_clanname()) {
      set_clanname(from.clanname());
    }
    if (from.has_onlyid()) {
      set_onlyid(from.onlyid());
    }
    if (from.has_besingup()) {
      set_besingup(from.besingup());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetIntegralInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetIntegralInfo::CopyFrom(const RetIntegralInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetIntegralInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetIntegralInfo::Swap(RetIntegralInfo* other) {
  if (other != this) {
    std::swap(status_, other->status_);
    std::swap(integral_, other->integral_);
    std::swap(power_, other->power_);
    std::swap(win_, other->win_);
    std::swap(lose_, other->lose_);
    std::swap(clanname_, other->clanname_);
    std::swap(onlyid_, other->onlyid_);
    std::swap(besingup_, other->besingup_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetIntegralInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetIntegralInfo_descriptor_;
  metadata.reflection = RetIntegralInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RntegralRanking::kClannameFieldNumber;
const int RntegralRanking::kIntegralFieldNumber;
#endif  // !_MSC_VER

RntegralRanking::RntegralRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RntegralRanking::InitAsDefaultInstance() {
}

RntegralRanking::RntegralRanking(const RntegralRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RntegralRanking::SharedCtor() {
  _cached_size_ = 0;
  clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  integral_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RntegralRanking::~RntegralRanking() {
  SharedDtor();
}

void RntegralRanking::SharedDtor() {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (this != default_instance_) {
  }
}

void RntegralRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RntegralRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RntegralRanking_descriptor_;
}

const RntegralRanking& RntegralRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

RntegralRanking* RntegralRanking::default_instance_ = NULL;

RntegralRanking* RntegralRanking::New() const {
  return new RntegralRanking;
}

void RntegralRanking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_clanname()) {
      if (clanname_ != &::google::protobuf::internal::kEmptyString) {
        clanname_->clear();
      }
    }
    integral_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RntegralRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes clanname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clanname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_integral;
        break;
      }

      // optional int32 integral = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RntegralRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes clanname = 1;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->clanname(), output);
  }

  // optional int32 integral = 2;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->integral(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RntegralRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes clanname = 1;
  if (has_clanname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->clanname(), target);
  }

  // optional int32 integral = 2;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->integral(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RntegralRanking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes clanname = 1;
    if (has_clanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clanname());
    }

    // optional int32 integral = 2;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RntegralRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RntegralRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RntegralRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RntegralRanking::MergeFrom(const RntegralRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clanname()) {
      set_clanname(from.clanname());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RntegralRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RntegralRanking::CopyFrom(const RntegralRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RntegralRanking::IsInitialized() const {

  return true;
}

void RntegralRanking::Swap(RntegralRanking* other) {
  if (other != this) {
    std::swap(clanname_, other->clanname_);
    std::swap(integral_, other->integral_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RntegralRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RntegralRanking_descriptor_;
  metadata.reflection = RntegralRanking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetSingUpIntegral::kRetFieldNumber;
const int RetSingUpIntegral::kInfoFieldNumber;
#endif  // !_MSC_VER

RetSingUpIntegral::RetSingUpIntegral()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetSingUpIntegral::InitAsDefaultInstance() {
  info_ = const_cast< ::ClanPackage::RetIntegralInfo*>(&::ClanPackage::RetIntegralInfo::default_instance());
}

RetSingUpIntegral::RetSingUpIntegral(const RetSingUpIntegral& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetSingUpIntegral::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetSingUpIntegral::~RetSingUpIntegral() {
  SharedDtor();
}

void RetSingUpIntegral::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void RetSingUpIntegral::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetSingUpIntegral::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetSingUpIntegral_descriptor_;
}

const RetSingUpIntegral& RetSingUpIntegral::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

RetSingUpIntegral* RetSingUpIntegral::default_instance_ = NULL;

RetSingUpIntegral* RetSingUpIntegral::New() const {
  return new RetSingUpIntegral;
}

void RetSingUpIntegral::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::ClanPackage::RetIntegralInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetSingUpIntegral::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .ClanPackage.RetIntegralInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetSingUpIntegral::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .ClanPackage.RetIntegralInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetSingUpIntegral::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .ClanPackage.RetIntegralInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetSingUpIntegral::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .ClanPackage.RetIntegralInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetSingUpIntegral::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetSingUpIntegral* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetSingUpIntegral*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetSingUpIntegral::MergeFrom(const RetSingUpIntegral& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::ClanPackage::RetIntegralInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetSingUpIntegral::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetSingUpIntegral::CopyFrom(const RetSingUpIntegral& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetSingUpIntegral::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void RetSingUpIntegral::Swap(RetSingUpIntegral* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetSingUpIntegral::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetSingUpIntegral_descriptor_;
  metadata.reflection = RetSingUpIntegral_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetReSingUpIntegral::kRetFieldNumber;
const int RetReSingUpIntegral::kInfoFieldNumber;
#endif  // !_MSC_VER

RetReSingUpIntegral::RetReSingUpIntegral()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetReSingUpIntegral::InitAsDefaultInstance() {
  info_ = const_cast< ::ClanPackage::RetIntegralInfo*>(&::ClanPackage::RetIntegralInfo::default_instance());
}

RetReSingUpIntegral::RetReSingUpIntegral(const RetReSingUpIntegral& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetReSingUpIntegral::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetReSingUpIntegral::~RetReSingUpIntegral() {
  SharedDtor();
}

void RetReSingUpIntegral::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void RetReSingUpIntegral::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetReSingUpIntegral::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetReSingUpIntegral_descriptor_;
}

const RetReSingUpIntegral& RetReSingUpIntegral::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

RetReSingUpIntegral* RetReSingUpIntegral::default_instance_ = NULL;

RetReSingUpIntegral* RetReSingUpIntegral::New() const {
  return new RetReSingUpIntegral;
}

void RetReSingUpIntegral::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_info()) {
      if (info_ != NULL) info_->::ClanPackage::RetIntegralInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetReSingUpIntegral::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // optional .ClanPackage.RetIntegralInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetReSingUpIntegral::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .ClanPackage.RetIntegralInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetReSingUpIntegral::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .ClanPackage.RetIntegralInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetReSingUpIntegral::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .ClanPackage.RetIntegralInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetReSingUpIntegral::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetReSingUpIntegral* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetReSingUpIntegral*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetReSingUpIntegral::MergeFrom(const RetReSingUpIntegral& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_info()) {
      mutable_info()->::ClanPackage::RetIntegralInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetReSingUpIntegral::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetReSingUpIntegral::CopyFrom(const RetReSingUpIntegral& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetReSingUpIntegral::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void RetReSingUpIntegral::Swap(RetReSingUpIntegral* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetReSingUpIntegral::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetReSingUpIntegral_descriptor_;
  metadata.reflection = RetReSingUpIntegral_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetAttClanInfo::kRetFieldNumber;
const int RetAttClanInfo::kClannameFieldNumber;
const int RetAttClanInfo::kClanlvFieldNumber;
const int RetAttClanInfo::kPepolenumFieldNumber;
const int RetAttClanInfo::kIntegralFieldNumber;
#endif  // !_MSC_VER

RetAttClanInfo::RetAttClanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetAttClanInfo::InitAsDefaultInstance() {
}

RetAttClanInfo::RetAttClanInfo(const RetAttClanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetAttClanInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clanlv_ = 0;
  pepolenum_ = 0;
  integral_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetAttClanInfo::~RetAttClanInfo() {
  SharedDtor();
}

void RetAttClanInfo::SharedDtor() {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (this != default_instance_) {
  }
}

void RetAttClanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetAttClanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetAttClanInfo_descriptor_;
}

const RetAttClanInfo& RetAttClanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

RetAttClanInfo* RetAttClanInfo::default_instance_ = NULL;

RetAttClanInfo* RetAttClanInfo::New() const {
  return new RetAttClanInfo;
}

void RetAttClanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_clanname()) {
      if (clanname_ != &::google::protobuf::internal::kEmptyString) {
        clanname_->clear();
      }
    }
    clanlv_ = 0;
    pepolenum_ = 0;
    integral_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetAttClanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clanname;
        break;
      }

      // optional bytes clanname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clanname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_clanname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clanlv;
        break;
      }

      // optional int32 clanlv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanlv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanlv_)));
          set_has_clanlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pepolenum;
        break;
      }

      // optional int32 pepolenum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pepolenum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pepolenum_)));
          set_has_pepolenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_integral;
        break;
      }

      // optional int32 integral = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetAttClanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional bytes clanname = 2;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->clanname(), output);
  }

  // optional int32 clanlv = 3;
  if (has_clanlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clanlv(), output);
  }

  // optional int32 pepolenum = 4;
  if (has_pepolenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pepolenum(), output);
  }

  // optional int32 integral = 5;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->integral(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetAttClanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional bytes clanname = 2;
  if (has_clanname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->clanname(), target);
  }

  // optional int32 clanlv = 3;
  if (has_clanlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clanlv(), target);
  }

  // optional int32 pepolenum = 4;
  if (has_pepolenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pepolenum(), target);
  }

  // optional int32 integral = 5;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->integral(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetAttClanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional bytes clanname = 2;
    if (has_clanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->clanname());
    }

    // optional int32 clanlv = 3;
    if (has_clanlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanlv());
    }

    // optional int32 pepolenum = 4;
    if (has_pepolenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pepolenum());
    }

    // optional int32 integral = 5;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetAttClanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetAttClanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetAttClanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetAttClanInfo::MergeFrom(const RetAttClanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_clanname()) {
      set_clanname(from.clanname());
    }
    if (from.has_clanlv()) {
      set_clanlv(from.clanlv());
    }
    if (from.has_pepolenum()) {
      set_pepolenum(from.pepolenum());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetAttClanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetAttClanInfo::CopyFrom(const RetAttClanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetAttClanInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetAttClanInfo::Swap(RetAttClanInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(clanname_, other->clanname_);
    std::swap(clanlv_, other->clanlv_);
    std::swap(pepolenum_, other->pepolenum_);
    std::swap(integral_, other->integral_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetAttClanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetAttClanInfo_descriptor_;
  metadata.reflection = RetAttClanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetNoticeWar::kRetFieldNumber;
#endif  // !_MSC_VER

RetNoticeWar::RetNoticeWar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetNoticeWar::InitAsDefaultInstance() {
}

RetNoticeWar::RetNoticeWar(const RetNoticeWar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetNoticeWar::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetNoticeWar::~RetNoticeWar() {
  SharedDtor();
}

void RetNoticeWar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetNoticeWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetNoticeWar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetNoticeWar_descriptor_;
}

const RetNoticeWar& RetNoticeWar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

RetNoticeWar* RetNoticeWar::default_instance_ = NULL;

RetNoticeWar* RetNoticeWar::New() const {
  return new RetNoticeWar;
}

void RetNoticeWar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetNoticeWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetNoticeWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetNoticeWar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetNoticeWar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetNoticeWar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetNoticeWar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetNoticeWar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetNoticeWar::MergeFrom(const RetNoticeWar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetNoticeWar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetNoticeWar::CopyFrom(const RetNoticeWar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetNoticeWar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetNoticeWar::Swap(RetNoticeWar* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetNoticeWar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetNoticeWar_descriptor_;
  metadata.reflection = RetNoticeWar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetKillRankingInfo::kRetFieldNumber;
const int RetKillRankingInfo::kMyselfFieldNumber;
const int RetKillRankingInfo::kOtherFieldNumber;
#endif  // !_MSC_VER

RetKillRankingInfo::RetKillRankingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetKillRankingInfo::InitAsDefaultInstance() {
  myself_ = const_cast< ::ClanPackage::KillRanking*>(&::ClanPackage::KillRanking::default_instance());
  other_ = const_cast< ::ClanPackage::KillRanking*>(&::ClanPackage::KillRanking::default_instance());
}

RetKillRankingInfo::RetKillRankingInfo(const RetKillRankingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetKillRankingInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  myself_ = NULL;
  other_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetKillRankingInfo::~RetKillRankingInfo() {
  SharedDtor();
}

void RetKillRankingInfo::SharedDtor() {
  if (this != default_instance_) {
    delete myself_;
    delete other_;
  }
}

void RetKillRankingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetKillRankingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetKillRankingInfo_descriptor_;
}

const RetKillRankingInfo& RetKillRankingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

RetKillRankingInfo* RetKillRankingInfo::default_instance_ = NULL;

RetKillRankingInfo* RetKillRankingInfo::New() const {
  return new RetKillRankingInfo;
}

void RetKillRankingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_myself()) {
      if (myself_ != NULL) myself_->::ClanPackage::KillRanking::Clear();
    }
    if (has_other()) {
      if (other_ != NULL) other_->::ClanPackage::KillRanking::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetKillRankingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_myself;
        break;
      }

      // optional .ClanPackage.KillRanking myself = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_myself:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_myself()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_other;
        break;
      }

      // optional .ClanPackage.KillRanking other = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_other:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_other()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetKillRankingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .ClanPackage.KillRanking myself = 2;
  if (has_myself()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->myself(), output);
  }

  // optional .ClanPackage.KillRanking other = 3;
  if (has_other()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->other(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetKillRankingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .ClanPackage.KillRanking myself = 2;
  if (has_myself()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->myself(), target);
  }

  // optional .ClanPackage.KillRanking other = 3;
  if (has_other()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->other(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetKillRankingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .ClanPackage.KillRanking myself = 2;
    if (has_myself()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->myself());
    }

    // optional .ClanPackage.KillRanking other = 3;
    if (has_other()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->other());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetKillRankingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetKillRankingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetKillRankingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetKillRankingInfo::MergeFrom(const RetKillRankingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_myself()) {
      mutable_myself()->::ClanPackage::KillRanking::MergeFrom(from.myself());
    }
    if (from.has_other()) {
      mutable_other()->::ClanPackage::KillRanking::MergeFrom(from.other());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetKillRankingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetKillRankingInfo::CopyFrom(const RetKillRankingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetKillRankingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetKillRankingInfo::Swap(RetKillRankingInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(myself_, other->myself_);
    std::swap(other_, other->other_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetKillRankingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetKillRankingInfo_descriptor_;
  metadata.reflection = RetKillRankingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KillRanking::kBossFieldNumber;
const int KillRanking::kTotalFieldNumber;
const int KillRanking::kInfoFieldNumber;
#endif  // !_MSC_VER

KillRanking::KillRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KillRanking::InitAsDefaultInstance() {
}

KillRanking::KillRanking(const KillRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KillRanking::SharedCtor() {
  _cached_size_ = 0;
  boss_ = 0;
  total_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KillRanking::~KillRanking() {
  SharedDtor();
}

void KillRanking::SharedDtor() {
  if (this != default_instance_) {
  }
}

void KillRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KillRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KillRanking_descriptor_;
}

const KillRanking& KillRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

KillRanking* KillRanking::default_instance_ = NULL;

KillRanking* KillRanking::New() const {
  return new KillRanking;
}

void KillRanking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    boss_ = 0;
    total_ = 0;
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KillRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 boss = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_)));
          set_has_boss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }

      // optional int32 total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .ClanPackage.SingleKillRanking info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KillRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 boss = 1;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->boss(), output);
  }

  // optional int32 total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total(), output);
  }

  // repeated .ClanPackage.SingleKillRanking info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KillRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 boss = 1;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->boss(), target);
  }

  // optional int32 total = 2;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total(), target);
  }

  // repeated .ClanPackage.SingleKillRanking info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KillRanking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 boss = 1;
    if (has_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss());
    }

    // optional int32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

  }
  // repeated .ClanPackage.SingleKillRanking info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KillRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KillRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KillRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KillRanking::MergeFrom(const KillRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_boss()) {
      set_boss(from.boss());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KillRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KillRanking::CopyFrom(const KillRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KillRanking::IsInitialized() const {

  return true;
}

void KillRanking::Swap(KillRanking* other) {
  if (other != this) {
    std::swap(boss_, other->boss_);
    std::swap(total_, other->total_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KillRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KillRanking_descriptor_;
  metadata.reflection = KillRanking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleKillRanking::kNameFieldNumber;
const int SingleKillRanking::kKillFieldNumber;
const int SingleKillRanking::kDieFieldNumber;
#endif  // !_MSC_VER

SingleKillRanking::SingleKillRanking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleKillRanking::InitAsDefaultInstance() {
}

SingleKillRanking::SingleKillRanking(const SingleKillRanking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleKillRanking::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  kill_ = 0;
  die_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleKillRanking::~SingleKillRanking() {
  SharedDtor();
}

void SingleKillRanking::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SingleKillRanking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleKillRanking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleKillRanking_descriptor_;
}

const SingleKillRanking& SingleKillRanking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

SingleKillRanking* SingleKillRanking::default_instance_ = NULL;

SingleKillRanking* SingleKillRanking::New() const {
  return new SingleKillRanking;
}

void SingleKillRanking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    kill_ = 0;
    die_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleKillRanking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bytes name = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_kill;
        break;
      }

      // optional int32 kill = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_die;
        break;
      }

      // optional int32 die = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_die:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &die_)));
          set_has_die();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleKillRanking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bytes name = 1;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->name(), output);
  }

  // optional int32 kill = 2;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->kill(), output);
  }

  // optional int32 die = 3;
  if (has_die()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->die(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleKillRanking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bytes name = 1;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->name(), target);
  }

  // optional int32 kill = 2;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->kill(), target);
  }

  // optional int32 die = 3;
  if (has_die()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->die(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleKillRanking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bytes name = 1;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 kill = 2;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill());
    }

    // optional int32 die = 3;
    if (has_die()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->die());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleKillRanking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleKillRanking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleKillRanking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleKillRanking::MergeFrom(const SingleKillRanking& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
    if (from.has_die()) {
      set_die(from.die());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleKillRanking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleKillRanking::CopyFrom(const SingleKillRanking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleKillRanking::IsInitialized() const {

  return true;
}

void SingleKillRanking::Swap(SingleKillRanking* other) {
  if (other != this) {
    std::swap(name_, other->name_);
    std::swap(kill_, other->kill_);
    std::swap(die_, other->die_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleKillRanking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleKillRanking_descriptor_;
  metadata.reflection = SingleKillRanking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleKill::kTotalbossFieldNumber;
const int SingleKill::kTotalFieldNumber;
const int SingleKill::kOthertotalbossFieldNumber;
const int SingleKill::kOthertotalFieldNumber;
const int SingleKill::kKillFieldNumber;
const int SingleKill::kDieFieldNumber;
const int SingleKill::kBossFieldNumber;
const int SingleKill::kRankingFieldNumber;
#endif  // !_MSC_VER

SingleKill::SingleKill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleKill::InitAsDefaultInstance() {
}

SingleKill::SingleKill(const SingleKill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleKill::SharedCtor() {
  _cached_size_ = 0;
  totalboss_ = 0;
  total_ = 0;
  othertotalboss_ = 0;
  othertotal_ = 0;
  kill_ = 0;
  die_ = 0;
  boss_ = 0;
  ranking_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleKill::~SingleKill() {
  SharedDtor();
}

void SingleKill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleKill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleKill_descriptor_;
}

const SingleKill& SingleKill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

SingleKill* SingleKill::default_instance_ = NULL;

SingleKill* SingleKill::New() const {
  return new SingleKill;
}

void SingleKill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    totalboss_ = 0;
    total_ = 0;
    othertotalboss_ = 0;
    othertotal_ = 0;
    kill_ = 0;
    die_ = 0;
    boss_ = 0;
    ranking_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 totalboss = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalboss_)));
          set_has_totalboss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }

      // optional int32 total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_othertotalboss;
        break;
      }

      // optional int32 othertotalboss = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_othertotalboss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &othertotalboss_)));
          set_has_othertotalboss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_othertotal;
        break;
      }

      // optional int32 othertotal = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_othertotal:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &othertotal_)));
          set_has_othertotal();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_kill;
        break;
      }

      // optional int32 kill = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_die;
        break;
      }

      // optional int32 die = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_die:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &die_)));
          set_has_die();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_boss;
        break;
      }

      // optional int32 boss = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_)));
          set_has_boss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ranking;
        break;
      }

      // optional int32 ranking = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 totalboss = 1;
  if (has_totalboss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->totalboss(), output);
  }

  // optional int32 total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total(), output);
  }

  // optional int32 othertotalboss = 3;
  if (has_othertotalboss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->othertotalboss(), output);
  }

  // optional int32 othertotal = 4;
  if (has_othertotal()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->othertotal(), output);
  }

  // optional int32 kill = 5;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->kill(), output);
  }

  // optional int32 die = 6;
  if (has_die()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->die(), output);
  }

  // optional int32 boss = 7;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->boss(), output);
  }

  // optional int32 ranking = 8;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ranking(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleKill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 totalboss = 1;
  if (has_totalboss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->totalboss(), target);
  }

  // optional int32 total = 2;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total(), target);
  }

  // optional int32 othertotalboss = 3;
  if (has_othertotalboss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->othertotalboss(), target);
  }

  // optional int32 othertotal = 4;
  if (has_othertotal()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->othertotal(), target);
  }

  // optional int32 kill = 5;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->kill(), target);
  }

  // optional int32 die = 6;
  if (has_die()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->die(), target);
  }

  // optional int32 boss = 7;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->boss(), target);
  }

  // optional int32 ranking = 8;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ranking(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleKill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 totalboss = 1;
    if (has_totalboss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalboss());
    }

    // optional int32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 othertotalboss = 3;
    if (has_othertotalboss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->othertotalboss());
    }

    // optional int32 othertotal = 4;
    if (has_othertotal()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->othertotal());
    }

    // optional int32 kill = 5;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill());
    }

    // optional int32 die = 6;
    if (has_die()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->die());
    }

    // optional int32 boss = 7;
    if (has_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss());
    }

    // optional int32 ranking = 8;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleKill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleKill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleKill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleKill::MergeFrom(const SingleKill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_totalboss()) {
      set_totalboss(from.totalboss());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_othertotalboss()) {
      set_othertotalboss(from.othertotalboss());
    }
    if (from.has_othertotal()) {
      set_othertotal(from.othertotal());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
    if (from.has_die()) {
      set_die(from.die());
    }
    if (from.has_boss()) {
      set_boss(from.boss());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleKill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleKill::CopyFrom(const SingleKill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleKill::IsInitialized() const {

  return true;
}

void SingleKill::Swap(SingleKill* other) {
  if (other != this) {
    std::swap(totalboss_, other->totalboss_);
    std::swap(total_, other->total_);
    std::swap(othertotalboss_, other->othertotalboss_);
    std::swap(othertotal_, other->othertotal_);
    std::swap(kill_, other->kill_);
    std::swap(die_, other->die_);
    std::swap(boss_, other->boss_);
    std::swap(ranking_, other->ranking_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleKill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleKill_descriptor_;
  metadata.reflection = SingleKill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntegralReward::kIsSuccessFieldNumber;
const int IntegralReward::kClanIntegralFieldNumber;
const int IntegralReward::kClanmoneyFieldNumber;
const int IntegralReward::kKillFieldNumber;
const int IntegralReward::kItemsFieldNumber;
const int IntegralReward::kSingkillitemsFieldNumber;
const int IntegralReward::kMvpitemsFieldNumber;
const int IntegralReward::kKillitemsFieldNumber;
#endif  // !_MSC_VER

IntegralReward::IntegralReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntegralReward::InitAsDefaultInstance() {
}

IntegralReward::IntegralReward(const IntegralReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntegralReward::SharedCtor() {
  _cached_size_ = 0;
  issuccess_ = 0;
  clanintegral_ = 0;
  clanmoney_ = 0;
  kill_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntegralReward::~IntegralReward() {
  SharedDtor();
}

void IntegralReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntegralReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegralReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegralReward_descriptor_;
}

const IntegralReward& IntegralReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

IntegralReward* IntegralReward::default_instance_ = NULL;

IntegralReward* IntegralReward::New() const {
  return new IntegralReward;
}

void IntegralReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    issuccess_ = 0;
    clanintegral_ = 0;
    clanmoney_ = 0;
    kill_ = 0;
  }
  items_.Clear();
  singkillitems_.Clear();
  mvpitems_.Clear();
  killitems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntegralReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 IsSuccess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clanIntegral;
        break;
      }

      // optional int32 clanIntegral = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanIntegral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanintegral_)));
          set_has_clanintegral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clanmoney;
        break;
      }

      // optional int32 clanmoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanmoney_)));
          set_has_clanmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_kill;
        break;
      }

      // optional int32 kill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_kill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kill_)));
          set_has_kill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        break;
      }

      // repeated .ClanPackage.RewardInfo items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectTag(50)) goto parse_singkillitems;
        break;
      }

      // repeated .ClanPackage.RewardInfo singkillitems = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_singkillitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_singkillitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_singkillitems;
        if (input->ExpectTag(58)) goto parse_mvpitems;
        break;
      }

      // repeated .ClanPackage.RewardInfo mvpitems = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mvpitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mvpitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_mvpitems;
        if (input->ExpectTag(66)) goto parse_killitems;
        break;
      }

      // repeated .ClanPackage.RewardInfo killitems = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killitems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_killitems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_killitems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntegralReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 IsSuccess = 1;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->issuccess(), output);
  }

  // optional int32 clanIntegral = 2;
  if (has_clanintegral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clanintegral(), output);
  }

  // optional int32 clanmoney = 3;
  if (has_clanmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clanmoney(), output);
  }

  // optional int32 kill = 4;
  if (has_kill()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->kill(), output);
  }

  // repeated .ClanPackage.RewardInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  // repeated .ClanPackage.RewardInfo singkillitems = 6;
  for (int i = 0; i < this->singkillitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->singkillitems(i), output);
  }

  // repeated .ClanPackage.RewardInfo mvpitems = 7;
  for (int i = 0; i < this->mvpitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->mvpitems(i), output);
  }

  // repeated .ClanPackage.RewardInfo killitems = 8;
  for (int i = 0; i < this->killitems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->killitems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntegralReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 IsSuccess = 1;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->issuccess(), target);
  }

  // optional int32 clanIntegral = 2;
  if (has_clanintegral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clanintegral(), target);
  }

  // optional int32 clanmoney = 3;
  if (has_clanmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clanmoney(), target);
  }

  // optional int32 kill = 4;
  if (has_kill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->kill(), target);
  }

  // repeated .ClanPackage.RewardInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }

  // repeated .ClanPackage.RewardInfo singkillitems = 6;
  for (int i = 0; i < this->singkillitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->singkillitems(i), target);
  }

  // repeated .ClanPackage.RewardInfo mvpitems = 7;
  for (int i = 0; i < this->mvpitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->mvpitems(i), target);
  }

  // repeated .ClanPackage.RewardInfo killitems = 8;
  for (int i = 0; i < this->killitems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->killitems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntegralReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 IsSuccess = 1;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issuccess());
    }

    // optional int32 clanIntegral = 2;
    if (has_clanintegral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanintegral());
    }

    // optional int32 clanmoney = 3;
    if (has_clanmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanmoney());
    }

    // optional int32 kill = 4;
    if (has_kill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kill());
    }

  }
  // repeated .ClanPackage.RewardInfo items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  // repeated .ClanPackage.RewardInfo singkillitems = 6;
  total_size += 1 * this->singkillitems_size();
  for (int i = 0; i < this->singkillitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->singkillitems(i));
  }

  // repeated .ClanPackage.RewardInfo mvpitems = 7;
  total_size += 1 * this->mvpitems_size();
  for (int i = 0; i < this->mvpitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mvpitems(i));
  }

  // repeated .ClanPackage.RewardInfo killitems = 8;
  total_size += 1 * this->killitems_size();
  for (int i = 0; i < this->killitems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->killitems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegralReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntegralReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntegralReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntegralReward::MergeFrom(const IntegralReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  singkillitems_.MergeFrom(from.singkillitems_);
  mvpitems_.MergeFrom(from.mvpitems_);
  killitems_.MergeFrom(from.killitems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
    if (from.has_clanintegral()) {
      set_clanintegral(from.clanintegral());
    }
    if (from.has_clanmoney()) {
      set_clanmoney(from.clanmoney());
    }
    if (from.has_kill()) {
      set_kill(from.kill());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntegralReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegralReward::CopyFrom(const IntegralReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegralReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  for (int i = 0; i < singkillitems_size(); i++) {
    if (!this->singkillitems(i).IsInitialized()) return false;
  }
  for (int i = 0; i < mvpitems_size(); i++) {
    if (!this->mvpitems(i).IsInitialized()) return false;
  }
  for (int i = 0; i < killitems_size(); i++) {
    if (!this->killitems(i).IsInitialized()) return false;
  }
  return true;
}

void IntegralReward::Swap(IntegralReward* other) {
  if (other != this) {
    std::swap(issuccess_, other->issuccess_);
    std::swap(clanintegral_, other->clanintegral_);
    std::swap(clanmoney_, other->clanmoney_);
    std::swap(kill_, other->kill_);
    items_.Swap(&other->items_);
    singkillitems_.Swap(&other->singkillitems_);
    mvpitems_.Swap(&other->mvpitems_);
    killitems_.Swap(&other->killitems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntegralReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegralReward_descriptor_;
  metadata.reflection = IntegralReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int IntegralWinReward::kItemsFieldNumber;
#endif  // !_MSC_VER

IntegralWinReward::IntegralWinReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void IntegralWinReward::InitAsDefaultInstance() {
}

IntegralWinReward::IntegralWinReward(const IntegralWinReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void IntegralWinReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

IntegralWinReward::~IntegralWinReward() {
  SharedDtor();
}

void IntegralWinReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void IntegralWinReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* IntegralWinReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return IntegralWinReward_descriptor_;
}

const IntegralWinReward& IntegralWinReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

IntegralWinReward* IntegralWinReward::default_instance_ = NULL;

IntegralWinReward* IntegralWinReward::New() const {
  return new IntegralWinReward;
}

void IntegralWinReward::Clear() {
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool IntegralWinReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ClanPackage.RewardInfo items = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void IntegralWinReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ClanPackage.RewardInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* IntegralWinReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ClanPackage.RewardInfo items = 5;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int IntegralWinReward::ByteSize() const {
  int total_size = 0;

  // repeated .ClanPackage.RewardInfo items = 5;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void IntegralWinReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const IntegralWinReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const IntegralWinReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void IntegralWinReward::MergeFrom(const IntegralWinReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void IntegralWinReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void IntegralWinReward::CopyFrom(const IntegralWinReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool IntegralWinReward::IsInitialized() const {

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void IntegralWinReward::Swap(IntegralWinReward* other) {
  if (other != this) {
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata IntegralWinReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = IntegralWinReward_descriptor_;
  metadata.reflection = IntegralWinReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardInfo::kItemidFieldNumber;
const int RewardInfo::kItemnumFieldNumber;
#endif  // !_MSC_VER

RewardInfo::RewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewardInfo::InitAsDefaultInstance() {
}

RewardInfo::RewardInfo(const RewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewardInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardInfo::~RewardInfo() {
  SharedDtor();
}

void RewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardInfo_descriptor_;
}

const RewardInfo& RewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

RewardInfo* RewardInfo::default_instance_ = NULL;

RewardInfo* RewardInfo::New() const {
  return new RewardInfo;
}

void RewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    itemnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemnum;
        break;
      }

      // optional int32 itemnum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemid = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 itemnum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemid = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 itemnum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemid = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemnum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardInfo::MergeFrom(const RewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardInfo::CopyFrom(const RewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RewardInfo::Swap(RewardInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardInfo_descriptor_;
  metadata.reflection = RewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysReSingUp::kCharidFieldNumber;
const int SysReSingUp::kGoldenFieldNumber;
const int SysReSingUp::kRetFieldNumber;
#endif  // !_MSC_VER

SysReSingUp::SysReSingUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysReSingUp::InitAsDefaultInstance() {
}

SysReSingUp::SysReSingUp(const SysReSingUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysReSingUp::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  golden_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysReSingUp::~SysReSingUp() {
  SharedDtor();
}

void SysReSingUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysReSingUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysReSingUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysReSingUp_descriptor_;
}

const SysReSingUp& SysReSingUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

SysReSingUp* SysReSingUp::default_instance_ = NULL;

SysReSingUp* SysReSingUp::New() const {
  return new SysReSingUp;
}

void SysReSingUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    golden_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysReSingUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_golden;
        break;
      }

      // optional int32 golden = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &golden_)));
          set_has_golden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // optional int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysReSingUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int32 golden = 2;
  if (has_golden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->golden(), output);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysReSingUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int32 golden = 2;
  if (has_golden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->golden(), target);
  }

  // optional int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysReSingUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 golden = 2;
    if (has_golden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->golden());
    }

    // optional int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysReSingUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysReSingUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysReSingUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysReSingUp::MergeFrom(const SysReSingUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_golden()) {
      set_golden(from.golden());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysReSingUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysReSingUp::CopyFrom(const SysReSingUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysReSingUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SysReSingUp::Swap(SysReSingUp* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(golden_, other->golden_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysReSingUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysReSingUp_descriptor_;
  metadata.reflection = SysReSingUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysIntegralOnlyId::kOnlyidFieldNumber;
#endif  // !_MSC_VER

SysIntegralOnlyId::SysIntegralOnlyId()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysIntegralOnlyId::InitAsDefaultInstance() {
}

SysIntegralOnlyId::SysIntegralOnlyId(const SysIntegralOnlyId& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysIntegralOnlyId::SharedCtor() {
  _cached_size_ = 0;
  onlyid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysIntegralOnlyId::~SysIntegralOnlyId() {
  SharedDtor();
}

void SysIntegralOnlyId::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysIntegralOnlyId::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysIntegralOnlyId::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysIntegralOnlyId_descriptor_;
}

const SysIntegralOnlyId& SysIntegralOnlyId::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

SysIntegralOnlyId* SysIntegralOnlyId::default_instance_ = NULL;

SysIntegralOnlyId* SysIntegralOnlyId::New() const {
  return new SysIntegralOnlyId;
}

void SysIntegralOnlyId::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    onlyid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysIntegralOnlyId::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 onlyid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &onlyid_)));
          set_has_onlyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysIntegralOnlyId::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 onlyid = 1;
  if (has_onlyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->onlyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysIntegralOnlyId::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 onlyid = 1;
  if (has_onlyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->onlyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysIntegralOnlyId::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 onlyid = 1;
    if (has_onlyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->onlyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysIntegralOnlyId::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysIntegralOnlyId* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysIntegralOnlyId*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysIntegralOnlyId::MergeFrom(const SysIntegralOnlyId& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_onlyid()) {
      set_onlyid(from.onlyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysIntegralOnlyId::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysIntegralOnlyId::CopyFrom(const SysIntegralOnlyId& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysIntegralOnlyId::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SysIntegralOnlyId::Swap(SysIntegralOnlyId* other) {
  if (other != this) {
    std::swap(onlyid_, other->onlyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysIntegralOnlyId::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysIntegralOnlyId_descriptor_;
  metadata.reflection = SysIntegralOnlyId_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysIntegralToWorld::kIntegralfFieldNumber;
const int SysIntegralToWorld::kIntegralsFieldNumber;
#endif  // !_MSC_VER

SysIntegralToWorld::SysIntegralToWorld()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysIntegralToWorld::InitAsDefaultInstance() {
  integralf_ = const_cast< ::ClanPackage::SysIntegral*>(&::ClanPackage::SysIntegral::default_instance());
  integrals_ = const_cast< ::ClanPackage::SysIntegral*>(&::ClanPackage::SysIntegral::default_instance());
}

SysIntegralToWorld::SysIntegralToWorld(const SysIntegralToWorld& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysIntegralToWorld::SharedCtor() {
  _cached_size_ = 0;
  integralf_ = NULL;
  integrals_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysIntegralToWorld::~SysIntegralToWorld() {
  SharedDtor();
}

void SysIntegralToWorld::SharedDtor() {
  if (this != default_instance_) {
    delete integralf_;
    delete integrals_;
  }
}

void SysIntegralToWorld::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysIntegralToWorld::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysIntegralToWorld_descriptor_;
}

const SysIntegralToWorld& SysIntegralToWorld::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

SysIntegralToWorld* SysIntegralToWorld::default_instance_ = NULL;

SysIntegralToWorld* SysIntegralToWorld::New() const {
  return new SysIntegralToWorld;
}

void SysIntegralToWorld::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_integralf()) {
      if (integralf_ != NULL) integralf_->::ClanPackage::SysIntegral::Clear();
    }
    if (has_integrals()) {
      if (integrals_ != NULL) integrals_->::ClanPackage::SysIntegral::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysIntegralToWorld::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .ClanPackage.SysIntegral integralf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_integralf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_integrals;
        break;
      }

      // optional .ClanPackage.SysIntegral integrals = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_integrals:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_integrals()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysIntegralToWorld::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .ClanPackage.SysIntegral integralf = 1;
  if (has_integralf()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->integralf(), output);
  }

  // optional .ClanPackage.SysIntegral integrals = 2;
  if (has_integrals()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->integrals(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysIntegralToWorld::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .ClanPackage.SysIntegral integralf = 1;
  if (has_integralf()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->integralf(), target);
  }

  // optional .ClanPackage.SysIntegral integrals = 2;
  if (has_integrals()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->integrals(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysIntegralToWorld::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .ClanPackage.SysIntegral integralf = 1;
    if (has_integralf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->integralf());
    }

    // optional .ClanPackage.SysIntegral integrals = 2;
    if (has_integrals()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->integrals());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysIntegralToWorld::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysIntegralToWorld* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysIntegralToWorld*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysIntegralToWorld::MergeFrom(const SysIntegralToWorld& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_integralf()) {
      mutable_integralf()->::ClanPackage::SysIntegral::MergeFrom(from.integralf());
    }
    if (from.has_integrals()) {
      mutable_integrals()->::ClanPackage::SysIntegral::MergeFrom(from.integrals());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysIntegralToWorld::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysIntegralToWorld::CopyFrom(const SysIntegralToWorld& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysIntegralToWorld::IsInitialized() const {

  if (has_integralf()) {
    if (!this->integralf().IsInitialized()) return false;
  }
  if (has_integrals()) {
    if (!this->integrals().IsInitialized()) return false;
  }
  return true;
}

void SysIntegralToWorld::Swap(SysIntegralToWorld* other) {
  if (other != this) {
    std::swap(integralf_, other->integralf_);
    std::swap(integrals_, other->integrals_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysIntegralToWorld::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysIntegralToWorld_descriptor_;
  metadata.reflection = SysIntegralToWorld_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysIntegral::kClanIdFieldNumber;
const int SysIntegral::kClanIntegralFieldNumber;
const int SysIntegral::kClanmoneyFieldNumber;
const int SysIntegral::kIsSuccessFieldNumber;
const int SysIntegral::kCharidListFieldNumber;
#endif  // !_MSC_VER

SysIntegral::SysIntegral()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysIntegral::InitAsDefaultInstance() {
}

SysIntegral::SysIntegral(const SysIntegral& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysIntegral::SharedCtor() {
  _cached_size_ = 0;
  clanid_ = 0;
  clanintegral_ = 0;
  clanmoney_ = 0;
  issuccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysIntegral::~SysIntegral() {
  SharedDtor();
}

void SysIntegral::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysIntegral::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysIntegral::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysIntegral_descriptor_;
}

const SysIntegral& SysIntegral::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Clan_2fClanIntegral_2eproto();
  return *default_instance_;
}

SysIntegral* SysIntegral::default_instance_ = NULL;

SysIntegral* SysIntegral::New() const {
  return new SysIntegral;
}

void SysIntegral::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clanid_ = 0;
    clanintegral_ = 0;
    clanmoney_ = 0;
    issuccess_ = 0;
  }
  charidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysIntegral::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 clanId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanid_)));
          set_has_clanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clanIntegral;
        break;
      }

      // optional int32 clanIntegral = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanIntegral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanintegral_)));
          set_has_clanintegral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clanmoney;
        break;
      }

      // optional int32 clanmoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanmoney_)));
          set_has_clanmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_IsSuccess;
        break;
      }

      // optional int32 IsSuccess = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_IsSuccess:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &issuccess_)));
          set_has_issuccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_charidList;
        break;
      }

      // repeated int64 charidList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charidList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_charidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_charidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_charidList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysIntegral::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 clanId = 1;
  if (has_clanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clanid(), output);
  }

  // optional int32 clanIntegral = 2;
  if (has_clanintegral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clanintegral(), output);
  }

  // optional int32 clanmoney = 3;
  if (has_clanmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clanmoney(), output);
  }

  // optional int32 IsSuccess = 4;
  if (has_issuccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->issuccess(), output);
  }

  // repeated int64 charidList = 5;
  for (int i = 0; i < this->charidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->charidlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysIntegral::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 clanId = 1;
  if (has_clanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clanid(), target);
  }

  // optional int32 clanIntegral = 2;
  if (has_clanintegral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clanintegral(), target);
  }

  // optional int32 clanmoney = 3;
  if (has_clanmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clanmoney(), target);
  }

  // optional int32 IsSuccess = 4;
  if (has_issuccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->issuccess(), target);
  }

  // repeated int64 charidList = 5;
  for (int i = 0; i < this->charidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->charidlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysIntegral::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 clanId = 1;
    if (has_clanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanid());
    }

    // optional int32 clanIntegral = 2;
    if (has_clanintegral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanintegral());
    }

    // optional int32 clanmoney = 3;
    if (has_clanmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanmoney());
    }

    // optional int32 IsSuccess = 4;
    if (has_issuccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->issuccess());
    }

  }
  // repeated int64 charidList = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->charidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->charidlist(i));
    }
    total_size += 1 * this->charidlist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysIntegral::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysIntegral* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysIntegral*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysIntegral::MergeFrom(const SysIntegral& from) {
  GOOGLE_CHECK_NE(&from, this);
  charidlist_.MergeFrom(from.charidlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clanid()) {
      set_clanid(from.clanid());
    }
    if (from.has_clanintegral()) {
      set_clanintegral(from.clanintegral());
    }
    if (from.has_clanmoney()) {
      set_clanmoney(from.clanmoney());
    }
    if (from.has_issuccess()) {
      set_issuccess(from.issuccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysIntegral::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysIntegral::CopyFrom(const SysIntegral& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysIntegral::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SysIntegral::Swap(SysIntegral* other) {
  if (other != this) {
    std::swap(clanid_, other->clanid_);
    std::swap(clanintegral_, other->clanintegral_);
    std::swap(clanmoney_, other->clanmoney_);
    std::swap(issuccess_, other->issuccess_);
    charidlist_.Swap(&other->charidlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysIntegral::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysIntegral_descriptor_;
  metadata.reflection = SysIntegral_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ClanPackage

// @@protoc_insertion_point(global_scope)
