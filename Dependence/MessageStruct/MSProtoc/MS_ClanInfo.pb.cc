// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSProtoc/MS_ClanInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MSProtoc/MS_ClanInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MS_ClanInfo {

namespace {

const ::google::protobuf::Descriptor* ReqClanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqClanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetClanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetClanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSomeClanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSomeClanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetSomeClanInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetSomeClanInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanDetailInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanDetailInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* JoinClan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JoinClan_reflection_ = NULL;
const ::google::protobuf::Descriptor* LeaveClan_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LeaveClan_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanMemberKilled_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanMemberKilled_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchClanEventToWS_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchClanEventToWS_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberContri_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberContri_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanCitryHold_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanCitryHold_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanPaidEvent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanPaidEvent_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MSProtoc_2fMS_5fClanInfo_2eproto() {
  protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MSProtoc/MS_ClanInfo.proto");
  GOOGLE_CHECK(file != NULL);
  ReqClanInfo_descriptor_ = file->message_type(0);
  static const int ReqClanInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClanInfo, begin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClanInfo, end_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClanInfo, querycondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClanInfo, name_),
  };
  ReqClanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqClanInfo_descriptor_,
      ReqClanInfo::default_instance_,
      ReqClanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqClanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqClanInfo));
  RetClanInfo_descriptor_ = file->message_type(1);
  static const int RetClanInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetClanInfo, infolist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetClanInfo, isend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetClanInfo, totalclannum_),
  };
  RetClanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetClanInfo_descriptor_,
      RetClanInfo::default_instance_,
      RetClanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetClanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetClanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetClanInfo));
  ReqSomeClanInfo_descriptor_ = file->message_type(2);
  static const int ReqSomeClanInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSomeClanInfo, clanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSomeClanInfo, clanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSomeClanInfo, querycondition_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSomeClanInfo, memberbegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSomeClanInfo, memberend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSomeClanInfo, isoff_),
  };
  ReqSomeClanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSomeClanInfo_descriptor_,
      ReqSomeClanInfo::default_instance_,
      ReqSomeClanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSomeClanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSomeClanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSomeClanInfo));
  RetSomeClanInfo_descriptor_ = file->message_type(3);
  static const int RetSomeClanInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSomeClanInfo, detailinfo_),
  };
  RetSomeClanInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetSomeClanInfo_descriptor_,
      RetSomeClanInfo::default_instance_,
      RetSomeClanInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSomeClanInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSomeClanInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetSomeClanInfo));
  ClanDetailInfo_descriptor_ = file->message_type(4);
  static const int ClanDetailInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanDetailInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanDetailInfo, membername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanDetailInfo, isend_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanDetailInfo, histroyboos_),
  };
  ClanDetailInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanDetailInfo_descriptor_,
      ClanDetailInfo::default_instance_,
      ClanDetailInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanDetailInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanDetailInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanDetailInfo));
  ClanBaseInfo_descriptor_ = file->message_type(5);
  static const int ClanBaseInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanBaseInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanBaseInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanBaseInfo, membernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanBaseInfo, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanBaseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanBaseInfo, bossname_),
  };
  ClanBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanBaseInfo_descriptor_,
      ClanBaseInfo::default_instance_,
      ClanBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanBaseInfo));
  JoinClan_descriptor_ = file->message_type(6);
  static const int JoinClan_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinClan, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinClan, name_),
  };
  JoinClan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JoinClan_descriptor_,
      JoinClan::default_instance_,
      JoinClan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinClan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JoinClan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JoinClan));
  LeaveClan_descriptor_ = file->message_type(7);
  static const int LeaveClan_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveClan, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveClan, name_),
  };
  LeaveClan_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LeaveClan_descriptor_,
      LeaveClan::default_instance_,
      LeaveClan_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveClan, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LeaveClan, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LeaveClan));
  ClanMemberKilled_descriptor_ = file->message_type(8);
  static const int ClanMemberKilled_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanMemberKilled, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanMemberKilled, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanMemberKilled, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanMemberKilled, killer_),
  };
  ClanMemberKilled_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanMemberKilled_descriptor_,
      ClanMemberKilled::default_instance_,
      ClanMemberKilled_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanMemberKilled, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanMemberKilled, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanMemberKilled));
  SynchClanEventToWS_descriptor_ = file->message_type(9);
  static const int SynchClanEventToWS_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchClanEventToWS, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchClanEventToWS, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchClanEventToWS, killer_),
  };
  SynchClanEventToWS_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchClanEventToWS_descriptor_,
      SynchClanEventToWS::default_instance_,
      SynchClanEventToWS_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchClanEventToWS, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchClanEventToWS, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchClanEventToWS));
  MemberContri_descriptor_ = file->message_type(10);
  static const int MemberContri_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberContri, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberContri, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberContri, golden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberContri, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberContri, contri_),
  };
  MemberContri_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberContri_descriptor_,
      MemberContri::default_instance_,
      MemberContri_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberContri, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberContri, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberContri));
  JobChange_descriptor_ = file->message_type(11);
  static const int JobChange_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobChange, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobChange, bname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobChange, ename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobChange, job_),
  };
  JobChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobChange_descriptor_,
      JobChange::default_instance_,
      JobChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobChange));
  ClanUpdate_descriptor_ = file->message_type(12);
  static const int ClanUpdate_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanUpdate, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanUpdate, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanUpdate, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanUpdate, count_),
  };
  ClanUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanUpdate_descriptor_,
      ClanUpdate::default_instance_,
      ClanUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanUpdate));
  ClanCitryHold_descriptor_ = file->message_type(13);
  static const int ClanCitryHold_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanCitryHold, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanCitryHold, cityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanCitryHold, clan_),
  };
  ClanCitryHold_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanCitryHold_descriptor_,
      ClanCitryHold::default_instance_,
      ClanCitryHold_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanCitryHold, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanCitryHold, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanCitryHold));
  ClanPaidEvent_descriptor_ = file->message_type(14);
  static const int ClanPaidEvent_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanPaidEvent, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanPaidEvent, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanPaidEvent, money_),
  };
  ClanPaidEvent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanPaidEvent_descriptor_,
      ClanPaidEvent::default_instance_,
      ClanPaidEvent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanPaidEvent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanPaidEvent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanPaidEvent));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MSProtoc_2fMS_5fClanInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqClanInfo_descriptor_, &ReqClanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetClanInfo_descriptor_, &RetClanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSomeClanInfo_descriptor_, &ReqSomeClanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetSomeClanInfo_descriptor_, &RetSomeClanInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanDetailInfo_descriptor_, &ClanDetailInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanBaseInfo_descriptor_, &ClanBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JoinClan_descriptor_, &JoinClan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LeaveClan_descriptor_, &LeaveClan::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanMemberKilled_descriptor_, &ClanMemberKilled::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchClanEventToWS_descriptor_, &SynchClanEventToWS::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberContri_descriptor_, &MemberContri::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobChange_descriptor_, &JobChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanUpdate_descriptor_, &ClanUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanCitryHold_descriptor_, &ClanCitryHold::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanPaidEvent_descriptor_, &ClanPaidEvent::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MSProtoc_2fMS_5fClanInfo_2eproto() {
  delete ReqClanInfo::default_instance_;
  delete ReqClanInfo_reflection_;
  delete RetClanInfo::default_instance_;
  delete RetClanInfo_reflection_;
  delete ReqSomeClanInfo::default_instance_;
  delete ReqSomeClanInfo_reflection_;
  delete RetSomeClanInfo::default_instance_;
  delete RetSomeClanInfo_reflection_;
  delete ClanDetailInfo::default_instance_;
  delete ClanDetailInfo_reflection_;
  delete ClanBaseInfo::default_instance_;
  delete ClanBaseInfo_reflection_;
  delete JoinClan::default_instance_;
  delete JoinClan_reflection_;
  delete LeaveClan::default_instance_;
  delete LeaveClan_reflection_;
  delete ClanMemberKilled::default_instance_;
  delete ClanMemberKilled_reflection_;
  delete SynchClanEventToWS::default_instance_;
  delete SynchClanEventToWS_reflection_;
  delete MemberContri::default_instance_;
  delete MemberContri_reflection_;
  delete JobChange::default_instance_;
  delete JobChange_reflection_;
  delete ClanUpdate::default_instance_;
  delete ClanUpdate_reflection_;
  delete ClanCitryHold::default_instance_;
  delete ClanCitryHold_reflection_;
  delete ClanPaidEvent::default_instance_;
  delete ClanPaidEvent_reflection_;
}

void protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032MSProtoc/MS_ClanInfo.proto\022\013MS_ClanInf"
    "o\"O\n\013ReqClanInfo\022\r\n\005begin\030\001 \002(\005\022\013\n\003end\030\002"
    " \002(\005\022\026\n\016queryCondition\030\003 \002(\005\022\014\n\004name\030\004 \001"
    "(\t\"_\n\013RetClanInfo\022+\n\010infoList\030\001 \003(\0132\031.MS"
    "_ClanInfo.ClanBaseInfo\022\r\n\005isEnd\030\002 \002(\005\022\024\n"
    "\014totalClanNum\030\003 \001(\005\"\202\001\n\017ReqSomeClanInfo\022"
    "\016\n\006clanID\030\001 \002(\005\022\020\n\010clanName\030\002 \002(\t\022\026\n\016que"
    "ryCondition\030\003 \002(\005\022\023\n\013memberBegin\030\004 \001(\005\022\021"
    "\n\tmemberEnd\030\005 \001(\005\022\r\n\005isOff\030\006 \001(\010\"B\n\017RetS"
    "omeClanInfo\022/\n\ndetailInfo\030\001 \002(\0132\033.MS_Cla"
    "nInfo.ClanDetailInfo\"u\n\016ClanDetailInfo\022+"
    "\n\010baseInfo\030\001 \002(\0132\031.MS_ClanInfo.ClanBaseI"
    "nfo\022\022\n\nmemberName\030\002 \003(\t\022\r\n\005isEnd\030\003 \002(\005\022\023"
    "\n\013histroyBoos\030\004 \003(\t\"m\n\014ClanBaseInfo\022\n\n\002I"
    "D\030\001 \002(\005\022\n\n\002Lv\030\002 \002(\005\022\021\n\tmemberNum\030\003 \002(\005\022\022"
    "\n\ncreateTime\030\004 \002(\003\022\014\n\004name\030\005 \002(\t\022\020\n\010boss"
    "Name\030\006 \002(\t\"&\n\010JoinClan\022\014\n\004time\030\001 \002(\003\022\014\n\004"
    "name\030\002 \001(\t\"\'\n\tLeaveClan\022\014\n\004time\030\001 \002(\003\022\014\n"
    "\004name\030\002 \001(\t\"M\n\020ClanMemberKilled\022\014\n\004time\030"
    "\001 \002(\003\022\014\n\004name\030\002 \001(\t\022\r\n\005mapid\030\003 \001(\005\022\016\n\006ki"
    "ller\030\004 \001(\t\"B\n\022SynchClanEventToWS\022\016\n\006char"
    "id\030\001 \002(\003\022\014\n\004time\030\002 \002(\001\022\016\n\006killer\030\003 \001(\t\"Y"
    "\n\014MemberContri\022\014\n\004time\030\001 \002(\003\022\014\n\004name\030\002 \001"
    "(\t\022\016\n\006golden\030\003 \001(\005\022\r\n\005money\030\004 \001(\005\022\016\n\006con"
    "tri\030\005 \001(\005\"D\n\tJobChange\022\014\n\004time\030\001 \002(\003\022\r\n\005"
    "bname\030\002 \001(\t\022\r\n\005ename\030\003 \001(\t\022\013\n\003job\030\004 \001(\005\""
    "C\n\nClanUpdate\022\014\n\004time\030\001 \002(\003\022\014\n\004name\030\002 \001("
    "\t\022\n\n\002lv\030\003 \001(\005\022\r\n\005count\030\004 \001(\005\";\n\rClanCitr"
    "yHold\022\014\n\004time\030\001 \002(\003\022\016\n\006cityid\030\002 \001(\005\022\014\n\004c"
    "lan\030\003 \001(\t\"8\n\rClanPaidEvent\022\014\n\004time\030\001 \002(\003"
    "\022\n\n\002id\030\002 \001(\005\022\r\n\005money\030\003 \001(\005", 1227);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MSProtoc/MS_ClanInfo.proto", &protobuf_RegisterTypes);
  ReqClanInfo::default_instance_ = new ReqClanInfo();
  RetClanInfo::default_instance_ = new RetClanInfo();
  ReqSomeClanInfo::default_instance_ = new ReqSomeClanInfo();
  RetSomeClanInfo::default_instance_ = new RetSomeClanInfo();
  ClanDetailInfo::default_instance_ = new ClanDetailInfo();
  ClanBaseInfo::default_instance_ = new ClanBaseInfo();
  JoinClan::default_instance_ = new JoinClan();
  LeaveClan::default_instance_ = new LeaveClan();
  ClanMemberKilled::default_instance_ = new ClanMemberKilled();
  SynchClanEventToWS::default_instance_ = new SynchClanEventToWS();
  MemberContri::default_instance_ = new MemberContri();
  JobChange::default_instance_ = new JobChange();
  ClanUpdate::default_instance_ = new ClanUpdate();
  ClanCitryHold::default_instance_ = new ClanCitryHold();
  ClanPaidEvent::default_instance_ = new ClanPaidEvent();
  ReqClanInfo::default_instance_->InitAsDefaultInstance();
  RetClanInfo::default_instance_->InitAsDefaultInstance();
  ReqSomeClanInfo::default_instance_->InitAsDefaultInstance();
  RetSomeClanInfo::default_instance_->InitAsDefaultInstance();
  ClanDetailInfo::default_instance_->InitAsDefaultInstance();
  ClanBaseInfo::default_instance_->InitAsDefaultInstance();
  JoinClan::default_instance_->InitAsDefaultInstance();
  LeaveClan::default_instance_->InitAsDefaultInstance();
  ClanMemberKilled::default_instance_->InitAsDefaultInstance();
  SynchClanEventToWS::default_instance_->InitAsDefaultInstance();
  MemberContri::default_instance_->InitAsDefaultInstance();
  JobChange::default_instance_->InitAsDefaultInstance();
  ClanUpdate::default_instance_->InitAsDefaultInstance();
  ClanCitryHold::default_instance_->InitAsDefaultInstance();
  ClanPaidEvent::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MSProtoc_2fMS_5fClanInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MSProtoc_2fMS_5fClanInfo_2eproto {
  StaticDescriptorInitializer_MSProtoc_2fMS_5fClanInfo_2eproto() {
    protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  }
} static_descriptor_initializer_MSProtoc_2fMS_5fClanInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqClanInfo::kBeginFieldNumber;
const int ReqClanInfo::kEndFieldNumber;
const int ReqClanInfo::kQueryConditionFieldNumber;
const int ReqClanInfo::kNameFieldNumber;
#endif  // !_MSC_VER

ReqClanInfo::ReqClanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqClanInfo::InitAsDefaultInstance() {
}

ReqClanInfo::ReqClanInfo(const ReqClanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqClanInfo::SharedCtor() {
  _cached_size_ = 0;
  begin_ = 0;
  end_ = 0;
  querycondition_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqClanInfo::~ReqClanInfo() {
  SharedDtor();
}

void ReqClanInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ReqClanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqClanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqClanInfo_descriptor_;
}

const ReqClanInfo& ReqClanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  return *default_instance_;
}

ReqClanInfo* ReqClanInfo::default_instance_ = NULL;

ReqClanInfo* ReqClanInfo::New() const {
  return new ReqClanInfo;
}

void ReqClanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begin_ = 0;
    end_ = 0;
    querycondition_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqClanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 begin = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &begin_)));
          set_has_begin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_end;
        break;
      }

      // required int32 end = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_end:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &end_)));
          set_has_end();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_queryCondition;
        break;
      }

      // required int32 queryCondition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queryCondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &querycondition_)));
          set_has_querycondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqClanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 begin = 1;
  if (has_begin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->begin(), output);
  }

  // required int32 end = 2;
  if (has_end()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->end(), output);
  }

  // required int32 queryCondition = 3;
  if (has_querycondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->querycondition(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqClanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 begin = 1;
  if (has_begin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->begin(), target);
  }

  // required int32 end = 2;
  if (has_end()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->end(), target);
  }

  // required int32 queryCondition = 3;
  if (has_querycondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->querycondition(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqClanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 begin = 1;
    if (has_begin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->begin());
    }

    // required int32 end = 2;
    if (has_end()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->end());
    }

    // required int32 queryCondition = 3;
    if (has_querycondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->querycondition());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqClanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqClanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqClanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqClanInfo::MergeFrom(const ReqClanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begin()) {
      set_begin(from.begin());
    }
    if (from.has_end()) {
      set_end(from.end());
    }
    if (from.has_querycondition()) {
      set_querycondition(from.querycondition());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqClanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqClanInfo::CopyFrom(const ReqClanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqClanInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqClanInfo::Swap(ReqClanInfo* other) {
  if (other != this) {
    std::swap(begin_, other->begin_);
    std::swap(end_, other->end_);
    std::swap(querycondition_, other->querycondition_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqClanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqClanInfo_descriptor_;
  metadata.reflection = ReqClanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetClanInfo::kInfoListFieldNumber;
const int RetClanInfo::kIsEndFieldNumber;
const int RetClanInfo::kTotalClanNumFieldNumber;
#endif  // !_MSC_VER

RetClanInfo::RetClanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetClanInfo::InitAsDefaultInstance() {
}

RetClanInfo::RetClanInfo(const RetClanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetClanInfo::SharedCtor() {
  _cached_size_ = 0;
  isend_ = 0;
  totalclannum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetClanInfo::~RetClanInfo() {
  SharedDtor();
}

void RetClanInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetClanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetClanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetClanInfo_descriptor_;
}

const RetClanInfo& RetClanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  return *default_instance_;
}

RetClanInfo* RetClanInfo::default_instance_ = NULL;

RetClanInfo* RetClanInfo::New() const {
  return new RetClanInfo;
}

void RetClanInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    isend_ = 0;
    totalclannum_ = 0;
  }
  infolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetClanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MS_ClanInfo.ClanBaseInfo infoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_infoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_infolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_infoList;
        if (input->ExpectTag(16)) goto parse_isEnd;
        break;
      }

      // required int32 isEnd = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isend_)));
          set_has_isend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_totalClanNum;
        break;
      }

      // optional int32 totalClanNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalClanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalclannum_)));
          set_has_totalclannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetClanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MS_ClanInfo.ClanBaseInfo infoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->infolist(i), output);
  }

  // required int32 isEnd = 2;
  if (has_isend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->isend(), output);
  }

  // optional int32 totalClanNum = 3;
  if (has_totalclannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totalclannum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetClanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MS_ClanInfo.ClanBaseInfo infoList = 1;
  for (int i = 0; i < this->infolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->infolist(i), target);
  }

  // required int32 isEnd = 2;
  if (has_isend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->isend(), target);
  }

  // optional int32 totalClanNum = 3;
  if (has_totalclannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totalclannum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetClanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int32 isEnd = 2;
    if (has_isend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isend());
    }

    // optional int32 totalClanNum = 3;
    if (has_totalclannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalclannum());
    }

  }
  // repeated .MS_ClanInfo.ClanBaseInfo infoList = 1;
  total_size += 1 * this->infolist_size();
  for (int i = 0; i < this->infolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->infolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetClanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetClanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetClanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetClanInfo::MergeFrom(const RetClanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  infolist_.MergeFrom(from.infolist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_isend()) {
      set_isend(from.isend());
    }
    if (from.has_totalclannum()) {
      set_totalclannum(from.totalclannum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetClanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetClanInfo::CopyFrom(const RetClanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetClanInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < infolist_size(); i++) {
    if (!this->infolist(i).IsInitialized()) return false;
  }
  return true;
}

void RetClanInfo::Swap(RetClanInfo* other) {
  if (other != this) {
    infolist_.Swap(&other->infolist_);
    std::swap(isend_, other->isend_);
    std::swap(totalclannum_, other->totalclannum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetClanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetClanInfo_descriptor_;
  metadata.reflection = RetClanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSomeClanInfo::kClanIDFieldNumber;
const int ReqSomeClanInfo::kClanNameFieldNumber;
const int ReqSomeClanInfo::kQueryConditionFieldNumber;
const int ReqSomeClanInfo::kMemberBeginFieldNumber;
const int ReqSomeClanInfo::kMemberEndFieldNumber;
const int ReqSomeClanInfo::kIsOffFieldNumber;
#endif  // !_MSC_VER

ReqSomeClanInfo::ReqSomeClanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSomeClanInfo::InitAsDefaultInstance() {
}

ReqSomeClanInfo::ReqSomeClanInfo(const ReqSomeClanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSomeClanInfo::SharedCtor() {
  _cached_size_ = 0;
  clanid_ = 0;
  clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  querycondition_ = 0;
  memberbegin_ = 0;
  memberend_ = 0;
  isoff_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSomeClanInfo::~ReqSomeClanInfo() {
  SharedDtor();
}

void ReqSomeClanInfo::SharedDtor() {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (this != default_instance_) {
  }
}

void ReqSomeClanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSomeClanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSomeClanInfo_descriptor_;
}

const ReqSomeClanInfo& ReqSomeClanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  return *default_instance_;
}

ReqSomeClanInfo* ReqSomeClanInfo::default_instance_ = NULL;

ReqSomeClanInfo* ReqSomeClanInfo::New() const {
  return new ReqSomeClanInfo;
}

void ReqSomeClanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clanid_ = 0;
    if (has_clanname()) {
      if (clanname_ != &::google::protobuf::internal::kEmptyString) {
        clanname_->clear();
      }
    }
    querycondition_ = 0;
    memberbegin_ = 0;
    memberend_ = 0;
    isoff_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSomeClanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 clanID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanid_)));
          set_has_clanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_clanName;
        break;
      }

      // required string clanName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clanName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clanname().data(), this->clanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_queryCondition;
        break;
      }

      // required int32 queryCondition = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_queryCondition:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &querycondition_)));
          set_has_querycondition();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_memberBegin;
        break;
      }

      // optional int32 memberBegin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberBegin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memberbegin_)));
          set_has_memberbegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_memberEnd;
        break;
      }

      // optional int32 memberEnd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &memberend_)));
          set_has_memberend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_isOff;
        break;
      }

      // optional bool isOff = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOff:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isoff_)));
          set_has_isoff();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSomeClanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 clanID = 1;
  if (has_clanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clanid(), output);
  }

  // required string clanName = 2;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->clanname(), output);
  }

  // required int32 queryCondition = 3;
  if (has_querycondition()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->querycondition(), output);
  }

  // optional int32 memberBegin = 4;
  if (has_memberbegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->memberbegin(), output);
  }

  // optional int32 memberEnd = 5;
  if (has_memberend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->memberend(), output);
  }

  // optional bool isOff = 6;
  if (has_isoff()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->isoff(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSomeClanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 clanID = 1;
  if (has_clanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clanid(), target);
  }

  // required string clanName = 2;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->clanname(), target);
  }

  // required int32 queryCondition = 3;
  if (has_querycondition()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->querycondition(), target);
  }

  // optional int32 memberBegin = 4;
  if (has_memberbegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->memberbegin(), target);
  }

  // optional int32 memberEnd = 5;
  if (has_memberend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->memberend(), target);
  }

  // optional bool isOff = 6;
  if (has_isoff()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->isoff(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSomeClanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 clanID = 1;
    if (has_clanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanid());
    }

    // required string clanName = 2;
    if (has_clanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clanname());
    }

    // required int32 queryCondition = 3;
    if (has_querycondition()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->querycondition());
    }

    // optional int32 memberBegin = 4;
    if (has_memberbegin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memberbegin());
    }

    // optional int32 memberEnd = 5;
    if (has_memberend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->memberend());
    }

    // optional bool isOff = 6;
    if (has_isoff()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSomeClanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSomeClanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSomeClanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSomeClanInfo::MergeFrom(const ReqSomeClanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clanid()) {
      set_clanid(from.clanid());
    }
    if (from.has_clanname()) {
      set_clanname(from.clanname());
    }
    if (from.has_querycondition()) {
      set_querycondition(from.querycondition());
    }
    if (from.has_memberbegin()) {
      set_memberbegin(from.memberbegin());
    }
    if (from.has_memberend()) {
      set_memberend(from.memberend());
    }
    if (from.has_isoff()) {
      set_isoff(from.isoff());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSomeClanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSomeClanInfo::CopyFrom(const ReqSomeClanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSomeClanInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqSomeClanInfo::Swap(ReqSomeClanInfo* other) {
  if (other != this) {
    std::swap(clanid_, other->clanid_);
    std::swap(clanname_, other->clanname_);
    std::swap(querycondition_, other->querycondition_);
    std::swap(memberbegin_, other->memberbegin_);
    std::swap(memberend_, other->memberend_);
    std::swap(isoff_, other->isoff_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSomeClanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSomeClanInfo_descriptor_;
  metadata.reflection = ReqSomeClanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetSomeClanInfo::kDetailInfoFieldNumber;
#endif  // !_MSC_VER

RetSomeClanInfo::RetSomeClanInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetSomeClanInfo::InitAsDefaultInstance() {
  detailinfo_ = const_cast< ::MS_ClanInfo::ClanDetailInfo*>(&::MS_ClanInfo::ClanDetailInfo::default_instance());
}

RetSomeClanInfo::RetSomeClanInfo(const RetSomeClanInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetSomeClanInfo::SharedCtor() {
  _cached_size_ = 0;
  detailinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetSomeClanInfo::~RetSomeClanInfo() {
  SharedDtor();
}

void RetSomeClanInfo::SharedDtor() {
  if (this != default_instance_) {
    delete detailinfo_;
  }
}

void RetSomeClanInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetSomeClanInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetSomeClanInfo_descriptor_;
}

const RetSomeClanInfo& RetSomeClanInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  return *default_instance_;
}

RetSomeClanInfo* RetSomeClanInfo::default_instance_ = NULL;

RetSomeClanInfo* RetSomeClanInfo::New() const {
  return new RetSomeClanInfo;
}

void RetSomeClanInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_detailinfo()) {
      if (detailinfo_ != NULL) detailinfo_->::MS_ClanInfo::ClanDetailInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetSomeClanInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MS_ClanInfo.ClanDetailInfo detailInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_detailinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetSomeClanInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .MS_ClanInfo.ClanDetailInfo detailInfo = 1;
  if (has_detailinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->detailinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetSomeClanInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MS_ClanInfo.ClanDetailInfo detailInfo = 1;
  if (has_detailinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->detailinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetSomeClanInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MS_ClanInfo.ClanDetailInfo detailInfo = 1;
    if (has_detailinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->detailinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetSomeClanInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetSomeClanInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetSomeClanInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetSomeClanInfo::MergeFrom(const RetSomeClanInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_detailinfo()) {
      mutable_detailinfo()->::MS_ClanInfo::ClanDetailInfo::MergeFrom(from.detailinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetSomeClanInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetSomeClanInfo::CopyFrom(const RetSomeClanInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetSomeClanInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_detailinfo()) {
    if (!this->detailinfo().IsInitialized()) return false;
  }
  return true;
}

void RetSomeClanInfo::Swap(RetSomeClanInfo* other) {
  if (other != this) {
    std::swap(detailinfo_, other->detailinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetSomeClanInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetSomeClanInfo_descriptor_;
  metadata.reflection = RetSomeClanInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanDetailInfo::kBaseInfoFieldNumber;
const int ClanDetailInfo::kMemberNameFieldNumber;
const int ClanDetailInfo::kIsEndFieldNumber;
const int ClanDetailInfo::kHistroyBoosFieldNumber;
#endif  // !_MSC_VER

ClanDetailInfo::ClanDetailInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanDetailInfo::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::MS_ClanInfo::ClanBaseInfo*>(&::MS_ClanInfo::ClanBaseInfo::default_instance());
}

ClanDetailInfo::ClanDetailInfo(const ClanDetailInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanDetailInfo::SharedCtor() {
  _cached_size_ = 0;
  baseinfo_ = NULL;
  isend_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanDetailInfo::~ClanDetailInfo() {
  SharedDtor();
}

void ClanDetailInfo::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
  }
}

void ClanDetailInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanDetailInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanDetailInfo_descriptor_;
}

const ClanDetailInfo& ClanDetailInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  return *default_instance_;
}

ClanDetailInfo* ClanDetailInfo::default_instance_ = NULL;

ClanDetailInfo* ClanDetailInfo::New() const {
  return new ClanDetailInfo;
}

void ClanDetailInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::MS_ClanInfo::ClanBaseInfo::Clear();
    }
    isend_ = 0;
  }
  membername_.Clear();
  histroyboos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanDetailInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .MS_ClanInfo.ClanBaseInfo baseInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memberName;
        break;
      }

      // repeated string memberName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_memberName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_membername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->membername(this->membername_size() - 1).data(),
            this->membername(this->membername_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_memberName;
        if (input->ExpectTag(24)) goto parse_isEnd;
        break;
      }

      // required int32 isEnd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEnd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isend_)));
          set_has_isend();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_histroyBoos;
        break;
      }

      // repeated string histroyBoos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_histroyBoos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->add_histroyboos()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->histroyboos(this->histroyboos_size() - 1).data(),
            this->histroyboos(this->histroyboos_size() - 1).length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_histroyBoos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanDetailInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .MS_ClanInfo.ClanBaseInfo baseInfo = 1;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->baseinfo(), output);
  }

  // repeated string memberName = 2;
  for (int i = 0; i < this->membername_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->membername(i).data(), this->membername(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->membername(i), output);
  }

  // required int32 isEnd = 3;
  if (has_isend()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isend(), output);
  }

  // repeated string histroyBoos = 4;
  for (int i = 0; i < this->histroyboos_size(); i++) {
  ::google::protobuf::internal::WireFormat::VerifyUTF8String(
    this->histroyboos(i).data(), this->histroyboos(i).length(),
    ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->histroyboos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanDetailInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .MS_ClanInfo.ClanBaseInfo baseInfo = 1;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->baseinfo(), target);
  }

  // repeated string memberName = 2;
  for (int i = 0; i < this->membername_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->membername(i).data(), this->membername(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(2, this->membername(i), target);
  }

  // required int32 isEnd = 3;
  if (has_isend()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isend(), target);
  }

  // repeated string histroyBoos = 4;
  for (int i = 0; i < this->histroyboos_size(); i++) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->histroyboos(i).data(), this->histroyboos(i).length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target = ::google::protobuf::internal::WireFormatLite::
      WriteStringToArray(4, this->histroyboos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanDetailInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .MS_ClanInfo.ClanBaseInfo baseInfo = 1;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // required int32 isEnd = 3;
    if (has_isend()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isend());
    }

  }
  // repeated string memberName = 2;
  total_size += 1 * this->membername_size();
  for (int i = 0; i < this->membername_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->membername(i));
  }

  // repeated string histroyBoos = 4;
  total_size += 1 * this->histroyboos_size();
  for (int i = 0; i < this->histroyboos_size(); i++) {
    total_size += ::google::protobuf::internal::WireFormatLite::StringSize(
      this->histroyboos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanDetailInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanDetailInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanDetailInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanDetailInfo::MergeFrom(const ClanDetailInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  membername_.MergeFrom(from.membername_);
  histroyboos_.MergeFrom(from.histroyboos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::MS_ClanInfo::ClanBaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_isend()) {
      set_isend(from.isend());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanDetailInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanDetailInfo::CopyFrom(const ClanDetailInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanDetailInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  return true;
}

void ClanDetailInfo::Swap(ClanDetailInfo* other) {
  if (other != this) {
    std::swap(baseinfo_, other->baseinfo_);
    membername_.Swap(&other->membername_);
    std::swap(isend_, other->isend_);
    histroyboos_.Swap(&other->histroyboos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanDetailInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanDetailInfo_descriptor_;
  metadata.reflection = ClanDetailInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanBaseInfo::kIDFieldNumber;
const int ClanBaseInfo::kLvFieldNumber;
const int ClanBaseInfo::kMemberNumFieldNumber;
const int ClanBaseInfo::kCreateTimeFieldNumber;
const int ClanBaseInfo::kNameFieldNumber;
const int ClanBaseInfo::kBossNameFieldNumber;
#endif  // !_MSC_VER

ClanBaseInfo::ClanBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanBaseInfo::InitAsDefaultInstance() {
}

ClanBaseInfo::ClanBaseInfo(const ClanBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  lv_ = 0;
  membernum_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  bossname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanBaseInfo::~ClanBaseInfo() {
  SharedDtor();
}

void ClanBaseInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (bossname_ != &::google::protobuf::internal::kEmptyString) {
    delete bossname_;
  }
  if (this != default_instance_) {
  }
}

void ClanBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanBaseInfo_descriptor_;
}

const ClanBaseInfo& ClanBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  return *default_instance_;
}

ClanBaseInfo* ClanBaseInfo::default_instance_ = NULL;

ClanBaseInfo* ClanBaseInfo::New() const {
  return new ClanBaseInfo;
}

void ClanBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    lv_ = 0;
    membernum_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_bossname()) {
      if (bossname_ != &::google::protobuf::internal::kEmptyString) {
        bossname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Lv;
        break;
      }

      // required int32 Lv = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_memberNum;
        break;
      }

      // required int32 memberNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_memberNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &membernum_)));
          set_has_membernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_createTime;
        break;
      }

      // required int64 createTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // required string name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_bossName;
        break;
      }

      // required string bossName = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bossname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bossname().data(), this->bossname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 Lv = 2;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->lv(), output);
  }

  // required int32 memberNum = 3;
  if (has_membernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->membernum(), output);
  }

  // required int64 createTime = 4;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->createtime(), output);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->name(), output);
  }

  // required string bossName = 6;
  if (has_bossname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bossname().data(), this->bossname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->bossname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 Lv = 2;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->lv(), target);
  }

  // required int32 memberNum = 3;
  if (has_membernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->membernum(), target);
  }

  // required int64 createTime = 4;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->createtime(), target);
  }

  // required string name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->name(), target);
  }

  // required string bossName = 6;
  if (has_bossname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bossname().data(), this->bossname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->bossname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 Lv = 2;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // required int32 memberNum = 3;
    if (has_membernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->membernum());
    }

    // required int64 createTime = 4;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // required string name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required string bossName = 6;
    if (has_bossname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bossname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanBaseInfo::MergeFrom(const ClanBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_membernum()) {
      set_membernum(from.membernum());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_bossname()) {
      set_bossname(from.bossname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanBaseInfo::CopyFrom(const ClanBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void ClanBaseInfo::Swap(ClanBaseInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(lv_, other->lv_);
    std::swap(membernum_, other->membernum_);
    std::swap(createtime_, other->createtime_);
    std::swap(name_, other->name_);
    std::swap(bossname_, other->bossname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanBaseInfo_descriptor_;
  metadata.reflection = ClanBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JoinClan::kTimeFieldNumber;
const int JoinClan::kNameFieldNumber;
#endif  // !_MSC_VER

JoinClan::JoinClan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JoinClan::InitAsDefaultInstance() {
}

JoinClan::JoinClan(const JoinClan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JoinClan::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JoinClan::~JoinClan() {
  SharedDtor();
}

void JoinClan::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void JoinClan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JoinClan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JoinClan_descriptor_;
}

const JoinClan& JoinClan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  return *default_instance_;
}

JoinClan* JoinClan::default_instance_ = NULL;

JoinClan* JoinClan::New() const {
  return new JoinClan;
}

void JoinClan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JoinClan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JoinClan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JoinClan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JoinClan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JoinClan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JoinClan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JoinClan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JoinClan::MergeFrom(const JoinClan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JoinClan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JoinClan::CopyFrom(const JoinClan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JoinClan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JoinClan::Swap(JoinClan* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JoinClan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JoinClan_descriptor_;
  metadata.reflection = JoinClan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LeaveClan::kTimeFieldNumber;
const int LeaveClan::kNameFieldNumber;
#endif  // !_MSC_VER

LeaveClan::LeaveClan()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LeaveClan::InitAsDefaultInstance() {
}

LeaveClan::LeaveClan(const LeaveClan& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LeaveClan::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LeaveClan::~LeaveClan() {
  SharedDtor();
}

void LeaveClan::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void LeaveClan::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LeaveClan::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LeaveClan_descriptor_;
}

const LeaveClan& LeaveClan::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  return *default_instance_;
}

LeaveClan* LeaveClan::default_instance_ = NULL;

LeaveClan* LeaveClan::New() const {
  return new LeaveClan;
}

void LeaveClan::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LeaveClan::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LeaveClan::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LeaveClan::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LeaveClan::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LeaveClan::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LeaveClan* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LeaveClan*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LeaveClan::MergeFrom(const LeaveClan& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LeaveClan::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LeaveClan::CopyFrom(const LeaveClan& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LeaveClan::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LeaveClan::Swap(LeaveClan* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LeaveClan::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LeaveClan_descriptor_;
  metadata.reflection = LeaveClan_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanMemberKilled::kTimeFieldNumber;
const int ClanMemberKilled::kNameFieldNumber;
const int ClanMemberKilled::kMapidFieldNumber;
const int ClanMemberKilled::kKillerFieldNumber;
#endif  // !_MSC_VER

ClanMemberKilled::ClanMemberKilled()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanMemberKilled::InitAsDefaultInstance() {
}

ClanMemberKilled::ClanMemberKilled(const ClanMemberKilled& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanMemberKilled::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mapid_ = 0;
  killer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanMemberKilled::~ClanMemberKilled() {
  SharedDtor();
}

void ClanMemberKilled::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (killer_ != &::google::protobuf::internal::kEmptyString) {
    delete killer_;
  }
  if (this != default_instance_) {
  }
}

void ClanMemberKilled::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanMemberKilled::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanMemberKilled_descriptor_;
}

const ClanMemberKilled& ClanMemberKilled::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  return *default_instance_;
}

ClanMemberKilled* ClanMemberKilled::default_instance_ = NULL;

ClanMemberKilled* ClanMemberKilled::New() const {
  return new ClanMemberKilled;
}

void ClanMemberKilled::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    mapid_ = 0;
    if (has_killer()) {
      if (killer_ != &::google::protobuf::internal::kEmptyString) {
        killer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanMemberKilled::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mapid;
        break;
      }

      // optional int32 mapid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_killer;
        break;
      }

      // optional string killer = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->killer().data(), this->killer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanMemberKilled::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mapid(), output);
  }

  // optional string killer = 4;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer().data(), this->killer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->killer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanMemberKilled::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 mapid = 3;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mapid(), target);
  }

  // optional string killer = 4;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer().data(), this->killer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->killer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanMemberKilled::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 mapid = 3;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional string killer = 4;
    if (has_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanMemberKilled::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanMemberKilled* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanMemberKilled*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanMemberKilled::MergeFrom(const ClanMemberKilled& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_killer()) {
      set_killer(from.killer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanMemberKilled::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanMemberKilled::CopyFrom(const ClanMemberKilled& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanMemberKilled::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClanMemberKilled::Swap(ClanMemberKilled* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(mapid_, other->mapid_);
    std::swap(killer_, other->killer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanMemberKilled::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanMemberKilled_descriptor_;
  metadata.reflection = ClanMemberKilled_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchClanEventToWS::kCharidFieldNumber;
const int SynchClanEventToWS::kTimeFieldNumber;
const int SynchClanEventToWS::kKillerFieldNumber;
#endif  // !_MSC_VER

SynchClanEventToWS::SynchClanEventToWS()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchClanEventToWS::InitAsDefaultInstance() {
}

SynchClanEventToWS::SynchClanEventToWS(const SynchClanEventToWS& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchClanEventToWS::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  time_ = 0;
  killer_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchClanEventToWS::~SynchClanEventToWS() {
  SharedDtor();
}

void SynchClanEventToWS::SharedDtor() {
  if (killer_ != &::google::protobuf::internal::kEmptyString) {
    delete killer_;
  }
  if (this != default_instance_) {
  }
}

void SynchClanEventToWS::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchClanEventToWS::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchClanEventToWS_descriptor_;
}

const SynchClanEventToWS& SynchClanEventToWS::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  return *default_instance_;
}

SynchClanEventToWS* SynchClanEventToWS::default_instance_ = NULL;

SynchClanEventToWS* SynchClanEventToWS::New() const {
  return new SynchClanEventToWS;
}

void SynchClanEventToWS::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    time_ = 0;
    if (has_killer()) {
      if (killer_ != &::google::protobuf::internal::kEmptyString) {
        killer_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchClanEventToWS::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(17)) goto parse_time;
        break;
      }

      // required double time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_killer;
        break;
      }

      // optional string killer = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_killer:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_killer()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->killer().data(), this->killer().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchClanEventToWS::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required double time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(2, this->time(), output);
  }

  // optional string killer = 3;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer().data(), this->killer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->killer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchClanEventToWS::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required double time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(2, this->time(), target);
  }

  // optional string killer = 3;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->killer().data(), this->killer().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->killer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchClanEventToWS::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required double time = 2;
    if (has_time()) {
      total_size += 1 + 8;
    }

    // optional string killer = 3;
    if (has_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->killer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchClanEventToWS::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchClanEventToWS* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchClanEventToWS*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchClanEventToWS::MergeFrom(const SynchClanEventToWS& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_killer()) {
      set_killer(from.killer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchClanEventToWS::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchClanEventToWS::CopyFrom(const SynchClanEventToWS& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchClanEventToWS::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SynchClanEventToWS::Swap(SynchClanEventToWS* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(time_, other->time_);
    std::swap(killer_, other->killer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchClanEventToWS::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchClanEventToWS_descriptor_;
  metadata.reflection = SynchClanEventToWS_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberContri::kTimeFieldNumber;
const int MemberContri::kNameFieldNumber;
const int MemberContri::kGoldenFieldNumber;
const int MemberContri::kMoneyFieldNumber;
const int MemberContri::kContriFieldNumber;
#endif  // !_MSC_VER

MemberContri::MemberContri()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemberContri::InitAsDefaultInstance() {
}

MemberContri::MemberContri(const MemberContri& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemberContri::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  golden_ = 0;
  money_ = 0;
  contri_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberContri::~MemberContri() {
  SharedDtor();
}

void MemberContri::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MemberContri::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberContri::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberContri_descriptor_;
}

const MemberContri& MemberContri::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  return *default_instance_;
}

MemberContri* MemberContri::default_instance_ = NULL;

MemberContri* MemberContri::New() const {
  return new MemberContri;
}

void MemberContri::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    golden_ = 0;
    money_ = 0;
    contri_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberContri::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_golden;
        break;
      }

      // optional int32 golden = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &golden_)));
          set_has_golden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // optional int32 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_contri;
        break;
      }

      // optional int32 contri = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contri_)));
          set_has_contri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemberContri::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 golden = 3;
  if (has_golden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->golden(), output);
  }

  // optional int32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->money(), output);
  }

  // optional int32 contri = 5;
  if (has_contri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->contri(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemberContri::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 golden = 3;
  if (has_golden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->golden(), target);
  }

  // optional int32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->money(), target);
  }

  // optional int32 contri = 5;
  if (has_contri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->contri(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemberContri::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 golden = 3;
    if (has_golden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->golden());
    }

    // optional int32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 contri = 5;
    if (has_contri()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contri());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberContri::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberContri* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberContri*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberContri::MergeFrom(const MemberContri& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_golden()) {
      set_golden(from.golden());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_contri()) {
      set_contri(from.contri());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberContri::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberContri::CopyFrom(const MemberContri& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberContri::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MemberContri::Swap(MemberContri* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(golden_, other->golden_);
    std::swap(money_, other->money_);
    std::swap(contri_, other->contri_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberContri::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberContri_descriptor_;
  metadata.reflection = MemberContri_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobChange::kTimeFieldNumber;
const int JobChange::kBnameFieldNumber;
const int JobChange::kEnameFieldNumber;
const int JobChange::kJobFieldNumber;
#endif  // !_MSC_VER

JobChange::JobChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JobChange::InitAsDefaultInstance() {
}

JobChange::JobChange(const JobChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JobChange::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  bname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  job_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobChange::~JobChange() {
  SharedDtor();
}

void JobChange::SharedDtor() {
  if (bname_ != &::google::protobuf::internal::kEmptyString) {
    delete bname_;
  }
  if (ename_ != &::google::protobuf::internal::kEmptyString) {
    delete ename_;
  }
  if (this != default_instance_) {
  }
}

void JobChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobChange_descriptor_;
}

const JobChange& JobChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  return *default_instance_;
}

JobChange* JobChange::default_instance_ = NULL;

JobChange* JobChange::New() const {
  return new JobChange;
}

void JobChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_bname()) {
      if (bname_ != &::google::protobuf::internal::kEmptyString) {
        bname_->clear();
      }
    }
    if (has_ename()) {
      if (ename_ != &::google::protobuf::internal::kEmptyString) {
        ename_->clear();
      }
    }
    job_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_bname;
        break;
      }

      // optional string bname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_bname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->bname().data(), this->bname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_ename;
        break;
      }

      // optional string ename = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ename().data(), this->ename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_job;
        break;
      }

      // optional int32 job = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JobChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional string bname = 2;
  if (has_bname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bname().data(), this->bname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->bname(), output);
  }

  // optional string ename = 3;
  if (has_ename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ename().data(), this->ename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->ename(), output);
  }

  // optional int32 job = 4;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->job(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JobChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional string bname = 2;
  if (has_bname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->bname().data(), this->bname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->bname(), target);
  }

  // optional string ename = 3;
  if (has_ename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ename().data(), this->ename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->ename(), target);
  }

  // optional int32 job = 4;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->job(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JobChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string bname = 2;
    if (has_bname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->bname());
    }

    // optional string ename = 3;
    if (has_ename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ename());
    }

    // optional int32 job = 4;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobChange::MergeFrom(const JobChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_bname()) {
      set_bname(from.bname());
    }
    if (from.has_ename()) {
      set_ename(from.ename());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobChange::CopyFrom(const JobChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JobChange::Swap(JobChange* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(bname_, other->bname_);
    std::swap(ename_, other->ename_);
    std::swap(job_, other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobChange_descriptor_;
  metadata.reflection = JobChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanUpdate::kTimeFieldNumber;
const int ClanUpdate::kNameFieldNumber;
const int ClanUpdate::kLvFieldNumber;
const int ClanUpdate::kCountFieldNumber;
#endif  // !_MSC_VER

ClanUpdate::ClanUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanUpdate::InitAsDefaultInstance() {
}

ClanUpdate::ClanUpdate(const ClanUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanUpdate::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanUpdate::~ClanUpdate() {
  SharedDtor();
}

void ClanUpdate::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ClanUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanUpdate_descriptor_;
}

const ClanUpdate& ClanUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  return *default_instance_;
}

ClanUpdate* ClanUpdate::default_instance_ = NULL;

ClanUpdate* ClanUpdate::New() const {
  return new ClanUpdate;
}

void ClanUpdate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_count;
        break;
      }

      // optional int32 count = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // optional int32 count = 4;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // optional int32 count = 4;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanUpdate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 count = 4;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanUpdate::MergeFrom(const ClanUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanUpdate::CopyFrom(const ClanUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanUpdate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClanUpdate::Swap(ClanUpdate* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanUpdate_descriptor_;
  metadata.reflection = ClanUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanCitryHold::kTimeFieldNumber;
const int ClanCitryHold::kCityidFieldNumber;
const int ClanCitryHold::kClanFieldNumber;
#endif  // !_MSC_VER

ClanCitryHold::ClanCitryHold()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanCitryHold::InitAsDefaultInstance() {
}

ClanCitryHold::ClanCitryHold(const ClanCitryHold& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanCitryHold::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  cityid_ = 0;
  clan_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanCitryHold::~ClanCitryHold() {
  SharedDtor();
}

void ClanCitryHold::SharedDtor() {
  if (clan_ != &::google::protobuf::internal::kEmptyString) {
    delete clan_;
  }
  if (this != default_instance_) {
  }
}

void ClanCitryHold::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanCitryHold::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanCitryHold_descriptor_;
}

const ClanCitryHold& ClanCitryHold::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  return *default_instance_;
}

ClanCitryHold* ClanCitryHold::default_instance_ = NULL;

ClanCitryHold* ClanCitryHold::New() const {
  return new ClanCitryHold;
}

void ClanCitryHold::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    cityid_ = 0;
    if (has_clan()) {
      if (clan_ != &::google::protobuf::internal::kEmptyString) {
        clan_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanCitryHold::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_cityid;
        break;
      }

      // optional int32 cityid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cityid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cityid_)));
          set_has_cityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clan;
        break;
      }

      // optional string clan = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clan()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clan().data(), this->clan().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanCitryHold::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional int32 cityid = 2;
  if (has_cityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->cityid(), output);
  }

  // optional string clan = 3;
  if (has_clan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clan().data(), this->clan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->clan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanCitryHold::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional int32 cityid = 2;
  if (has_cityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->cityid(), target);
  }

  // optional string clan = 3;
  if (has_clan()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clan().data(), this->clan().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanCitryHold::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 cityid = 2;
    if (has_cityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cityid());
    }

    // optional string clan = 3;
    if (has_clan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanCitryHold::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanCitryHold* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanCitryHold*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanCitryHold::MergeFrom(const ClanCitryHold& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_cityid()) {
      set_cityid(from.cityid());
    }
    if (from.has_clan()) {
      set_clan(from.clan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanCitryHold::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanCitryHold::CopyFrom(const ClanCitryHold& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanCitryHold::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClanCitryHold::Swap(ClanCitryHold* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(cityid_, other->cityid_);
    std::swap(clan_, other->clan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanCitryHold::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanCitryHold_descriptor_;
  metadata.reflection = ClanCitryHold_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanPaidEvent::kTimeFieldNumber;
const int ClanPaidEvent::kIdFieldNumber;
const int ClanPaidEvent::kMoneyFieldNumber;
#endif  // !_MSC_VER

ClanPaidEvent::ClanPaidEvent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanPaidEvent::InitAsDefaultInstance() {
}

ClanPaidEvent::ClanPaidEvent(const ClanPaidEvent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanPaidEvent::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  id_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanPaidEvent::~ClanPaidEvent() {
  SharedDtor();
}

void ClanPaidEvent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClanPaidEvent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanPaidEvent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanPaidEvent_descriptor_;
}

const ClanPaidEvent& ClanPaidEvent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fClanInfo_2eproto();
  return *default_instance_;
}

ClanPaidEvent* ClanPaidEvent::default_instance_ = NULL;

ClanPaidEvent* ClanPaidEvent::New() const {
  return new ClanPaidEvent;
}

void ClanPaidEvent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    id_ = 0;
    money_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanPaidEvent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int32 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanPaidEvent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->money(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanPaidEvent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->money(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanPaidEvent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanPaidEvent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanPaidEvent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanPaidEvent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanPaidEvent::MergeFrom(const ClanPaidEvent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanPaidEvent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanPaidEvent::CopyFrom(const ClanPaidEvent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanPaidEvent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClanPaidEvent::Swap(ClanPaidEvent* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(id_, other->id_);
    std::swap(money_, other->money_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanPaidEvent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanPaidEvent_descriptor_;
  metadata.reflection = ClanPaidEvent_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MS_ClanInfo

// @@protoc_insertion_point(global_scope)
