// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Marry/MarryServer.proto

#ifndef PROTOBUF_Marry_2fMarryServer_2eproto__INCLUDED
#define PROTOBUF_Marry_2fMarryServer_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MarryServer {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Marry_2fMarryServer_2eproto();
void protobuf_AssignDesc_Marry_2fMarryServer_2eproto();
void protobuf_ShutdownFile_Marry_2fMarryServer_2eproto();

class MarrySuccess;
class MarryChangeMap;

// ===================================================================

class MarrySuccess : public ::google::protobuf::Message {
 public:
  MarrySuccess();
  virtual ~MarrySuccess();

  MarrySuccess(const MarrySuccess& from);

  inline MarrySuccess& operator=(const MarrySuccess& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarrySuccess& default_instance();

  void Swap(MarrySuccess* other);

  // implements Message ----------------------------------------------

  MarrySuccess* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarrySuccess& from);
  void MergeFrom(const MarrySuccess& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 otherPlayerID = 1;
  inline bool has_otherplayerid() const;
  inline void clear_otherplayerid();
  static const int kOtherPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 otherplayerid() const;
  inline void set_otherplayerid(::google::protobuf::int64 value);

  // optional bytes otherName = 2;
  inline bool has_othername() const;
  inline void clear_othername();
  static const int kOtherNameFieldNumber = 2;
  inline const ::std::string& othername() const;
  inline void set_othername(const ::std::string& value);
  inline void set_othername(const char* value);
  inline void set_othername(const void* value, size_t size);
  inline ::std::string* mutable_othername();
  inline ::std::string* release_othername();
  inline void set_allocated_othername(::std::string* othername);

  // optional int64 selfPlayerID = 3;
  inline bool has_selfplayerid() const;
  inline void clear_selfplayerid();
  static const int kSelfPlayerIDFieldNumber = 3;
  inline ::google::protobuf::int64 selfplayerid() const;
  inline void set_selfplayerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MarryServer.MarrySuccess)
 private:
  inline void set_has_otherplayerid();
  inline void clear_has_otherplayerid();
  inline void set_has_othername();
  inline void clear_has_othername();
  inline void set_has_selfplayerid();
  inline void clear_has_selfplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 otherplayerid_;
  ::std::string* othername_;
  ::google::protobuf::int64 selfplayerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryServer_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryServer_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryServer_2eproto();

  void InitAsDefaultInstance();
  static MarrySuccess* default_instance_;
};
// -------------------------------------------------------------------

class MarryChangeMap : public ::google::protobuf::Message {
 public:
  MarryChangeMap();
  virtual ~MarryChangeMap();

  MarryChangeMap(const MarryChangeMap& from);

  inline MarryChangeMap& operator=(const MarryChangeMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarryChangeMap& default_instance();

  void Swap(MarryChangeMap* other);

  // implements Message ----------------------------------------------

  MarryChangeMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarryChangeMap& from);
  void MergeFrom(const MarryChangeMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 mapID = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapIDFieldNumber = 1;
  inline ::google::protobuf::int64 mapid() const;
  inline void set_mapid(::google::protobuf::int64 value);

  // optional int32 xPos = 2;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXPosFieldNumber = 2;
  inline ::google::protobuf::int32 xpos() const;
  inline void set_xpos(::google::protobuf::int32 value);

  // optional int32 yPos = 3;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYPosFieldNumber = 3;
  inline ::google::protobuf::int32 ypos() const;
  inline void set_ypos(::google::protobuf::int32 value);

  // optional int32 error = 4;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 4;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryServer.MarryChangeMap)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_error();
  inline void clear_has_error();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 mapid_;
  ::google::protobuf::int32 xpos_;
  ::google::protobuf::int32 ypos_;
  ::google::protobuf::int32 error_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryServer_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryServer_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryServer_2eproto();

  void InitAsDefaultInstance();
  static MarryChangeMap* default_instance_;
};
// ===================================================================


// ===================================================================

// MarrySuccess

// optional int64 otherPlayerID = 1;
inline bool MarrySuccess::has_otherplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarrySuccess::set_has_otherplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarrySuccess::clear_has_otherplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarrySuccess::clear_otherplayerid() {
  otherplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_otherplayerid();
}
inline ::google::protobuf::int64 MarrySuccess::otherplayerid() const {
  return otherplayerid_;
}
inline void MarrySuccess::set_otherplayerid(::google::protobuf::int64 value) {
  set_has_otherplayerid();
  otherplayerid_ = value;
}

// optional bytes otherName = 2;
inline bool MarrySuccess::has_othername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarrySuccess::set_has_othername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarrySuccess::clear_has_othername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarrySuccess::clear_othername() {
  if (othername_ != &::google::protobuf::internal::kEmptyString) {
    othername_->clear();
  }
  clear_has_othername();
}
inline const ::std::string& MarrySuccess::othername() const {
  return *othername_;
}
inline void MarrySuccess::set_othername(const ::std::string& value) {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::kEmptyString) {
    othername_ = new ::std::string;
  }
  othername_->assign(value);
}
inline void MarrySuccess::set_othername(const char* value) {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::kEmptyString) {
    othername_ = new ::std::string;
  }
  othername_->assign(value);
}
inline void MarrySuccess::set_othername(const void* value, size_t size) {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::kEmptyString) {
    othername_ = new ::std::string;
  }
  othername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarrySuccess::mutable_othername() {
  set_has_othername();
  if (othername_ == &::google::protobuf::internal::kEmptyString) {
    othername_ = new ::std::string;
  }
  return othername_;
}
inline ::std::string* MarrySuccess::release_othername() {
  clear_has_othername();
  if (othername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = othername_;
    othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarrySuccess::set_allocated_othername(::std::string* othername) {
  if (othername_ != &::google::protobuf::internal::kEmptyString) {
    delete othername_;
  }
  if (othername) {
    set_has_othername();
    othername_ = othername;
  } else {
    clear_has_othername();
    othername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 selfPlayerID = 3;
inline bool MarrySuccess::has_selfplayerid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarrySuccess::set_has_selfplayerid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarrySuccess::clear_has_selfplayerid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarrySuccess::clear_selfplayerid() {
  selfplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_selfplayerid();
}
inline ::google::protobuf::int64 MarrySuccess::selfplayerid() const {
  return selfplayerid_;
}
inline void MarrySuccess::set_selfplayerid(::google::protobuf::int64 value) {
  set_has_selfplayerid();
  selfplayerid_ = value;
}

// -------------------------------------------------------------------

// MarryChangeMap

// optional int64 mapID = 1;
inline bool MarryChangeMap::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarryChangeMap::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarryChangeMap::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarryChangeMap::clear_mapid() {
  mapid_ = GOOGLE_LONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::int64 MarryChangeMap::mapid() const {
  return mapid_;
}
inline void MarryChangeMap::set_mapid(::google::protobuf::int64 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional int32 xPos = 2;
inline bool MarryChangeMap::has_xpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarryChangeMap::set_has_xpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarryChangeMap::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarryChangeMap::clear_xpos() {
  xpos_ = 0;
  clear_has_xpos();
}
inline ::google::protobuf::int32 MarryChangeMap::xpos() const {
  return xpos_;
}
inline void MarryChangeMap::set_xpos(::google::protobuf::int32 value) {
  set_has_xpos();
  xpos_ = value;
}

// optional int32 yPos = 3;
inline bool MarryChangeMap::has_ypos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarryChangeMap::set_has_ypos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarryChangeMap::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarryChangeMap::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline ::google::protobuf::int32 MarryChangeMap::ypos() const {
  return ypos_;
}
inline void MarryChangeMap::set_ypos(::google::protobuf::int32 value) {
  set_has_ypos();
  ypos_ = value;
}

// optional int32 error = 4;
inline bool MarryChangeMap::has_error() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarryChangeMap::set_has_error() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarryChangeMap::clear_has_error() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarryChangeMap::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::google::protobuf::int32 MarryChangeMap::error() const {
  return error_;
}
inline void MarryChangeMap::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MarryServer

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Marry_2fMarryServer_2eproto__INCLUDED
