// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSProtoc/MS_Mall.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MSProtoc/MS_Mall.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MS_Mall {

namespace {

const ::google::protobuf::Descriptor* LimitGood_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimitGood_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_ReqMallOp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_ReqMallOp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_RetMallOp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_RetMallOp_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerMallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerMallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetMallInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetMallInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqBuyLimitGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqBuyLimitGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetBuyLimitGoods_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetBuyLimitGoods_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqMallInfoByType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqMallInfoByType_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetMallInfoByType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetMallInfoByType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallLimitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallLimitInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallPlayerLimit_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallPlayerLimit_reflection_ = NULL;
const ::google::protobuf::Descriptor* MallPlayerLimitInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MallPlayerLimitInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MSProtoc_2fMS_5fMall_2eproto() {
  protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MSProtoc/MS_Mall.proto");
  GOOGLE_CHECK(file != NULL);
  LimitGood_descriptor_ = file->message_type(0);
  static const int LimitGood_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGood, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGood, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGood, bindtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGood, formerprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGood, currentprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGood, moneytype_),
  };
  LimitGood_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimitGood_descriptor_,
      LimitGood::default_instance_,
      LimitGood_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGood, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimitGood, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimitGood));
  Admin_ReqMallOp_descriptor_ = file->message_type(1);
  static const int Admin_ReqMallOp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqMallOp, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqMallOp, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqMallOp, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqMallOp, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqMallOp, beginindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqMallOp, count_),
  };
  Admin_ReqMallOp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_ReqMallOp_descriptor_,
      Admin_ReqMallOp::default_instance_,
      Admin_ReqMallOp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqMallOp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqMallOp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_ReqMallOp));
  Admin_RetMallOp_descriptor_ = file->message_type(2);
  static const int Admin_RetMallOp_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetMallOp, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetMallOp, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetMallOp, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetMallOp, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetMallOp, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetMallOp, totalnumber_),
  };
  Admin_RetMallOp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_RetMallOp_descriptor_,
      Admin_RetMallOp::default_instance_,
      Admin_RetMallOp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetMallOp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetMallOp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_RetMallOp));
  PlayerMallInfo_descriptor_ = file->message_type(3);
  static const int PlayerMallInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMallInfo, havebuycount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMallInfo, iteminfo_),
  };
  PlayerMallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerMallInfo_descriptor_,
      PlayerMallInfo::default_instance_,
      PlayerMallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerMallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerMallInfo));
  ReqMallInfo_descriptor_ = file->message_type(4);
  static const int ReqMallInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMallInfo, beginindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMallInfo, count_),
  };
  ReqMallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMallInfo_descriptor_,
      ReqMallInfo::default_instance_,
      ReqMallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMallInfo));
  RetMallInfo_descriptor_ = file->message_type(5);
  static const int RetMallInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMallInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMallInfo, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMallInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMallInfo, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMallInfo, totalcount_),
  };
  RetMallInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetMallInfo_descriptor_,
      RetMallInfo::default_instance_,
      RetMallInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMallInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMallInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetMallInfo));
  ReqBuyLimitGoods_descriptor_ = file->message_type(6);
  static const int ReqBuyLimitGoods_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyLimitGoods, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyLimitGoods, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyLimitGoods, buytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyLimitGoods, currentprice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyLimitGoods, bindtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyLimitGoods, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyLimitGoods, moneytype_),
  };
  ReqBuyLimitGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqBuyLimitGoods_descriptor_,
      ReqBuyLimitGoods::default_instance_,
      ReqBuyLimitGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyLimitGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqBuyLimitGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqBuyLimitGoods));
  RetBuyLimitGoods_descriptor_ = file->message_type(7);
  static const int RetBuyLimitGoods_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetBuyLimitGoods, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetBuyLimitGoods, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetBuyLimitGoods, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetBuyLimitGoods, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetBuyLimitGoods, buytype_),
  };
  RetBuyLimitGoods_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetBuyLimitGoods_descriptor_,
      RetBuyLimitGoods::default_instance_,
      RetBuyLimitGoods_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetBuyLimitGoods, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetBuyLimitGoods, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetBuyLimitGoods));
  ReqMallInfoByType_descriptor_ = file->message_type(8);
  static const int ReqMallInfoByType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMallInfoByType, buytype_),
  };
  ReqMallInfoByType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqMallInfoByType_descriptor_,
      ReqMallInfoByType::default_instance_,
      ReqMallInfoByType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMallInfoByType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqMallInfoByType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqMallInfoByType));
  RetMallInfoByType_descriptor_ = file->message_type(9);
  static const int RetMallInfoByType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMallInfoByType, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMallInfoByType, limitlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMallInfoByType, buytype_),
  };
  RetMallInfoByType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetMallInfoByType_descriptor_,
      RetMallInfoByType::default_instance_,
      RetMallInfoByType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMallInfoByType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetMallInfoByType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetMallInfoByType));
  MallLimitInfo_descriptor_ = file->message_type(10);
  static const int MallLimitInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallLimitInfo, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallLimitInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallLimitInfo, itemlist_),
  };
  MallLimitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallLimitInfo_descriptor_,
      MallLimitInfo::default_instance_,
      MallLimitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallLimitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallLimitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallLimitInfo));
  MallPlayerLimit_descriptor_ = file->message_type(11);
  static const int MallPlayerLimit_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallPlayerLimit, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallPlayerLimit, buycount_),
  };
  MallPlayerLimit_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallPlayerLimit_descriptor_,
      MallPlayerLimit::default_instance_,
      MallPlayerLimit_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallPlayerLimit, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallPlayerLimit, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallPlayerLimit));
  MallPlayerLimitInfo_descriptor_ = file->message_type(12);
  static const int MallPlayerLimitInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallPlayerLimitInfo, limitlist_),
  };
  MallPlayerLimitInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MallPlayerLimitInfo_descriptor_,
      MallPlayerLimitInfo::default_instance_,
      MallPlayerLimitInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallPlayerLimitInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MallPlayerLimitInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MallPlayerLimitInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MSProtoc_2fMS_5fMall_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimitGood_descriptor_, &LimitGood::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_ReqMallOp_descriptor_, &Admin_ReqMallOp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_RetMallOp_descriptor_, &Admin_RetMallOp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerMallInfo_descriptor_, &PlayerMallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMallInfo_descriptor_, &ReqMallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetMallInfo_descriptor_, &RetMallInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqBuyLimitGoods_descriptor_, &ReqBuyLimitGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetBuyLimitGoods_descriptor_, &RetBuyLimitGoods::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqMallInfoByType_descriptor_, &ReqMallInfoByType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetMallInfoByType_descriptor_, &RetMallInfoByType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallLimitInfo_descriptor_, &MallLimitInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallPlayerLimit_descriptor_, &MallPlayerLimit::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MallPlayerLimitInfo_descriptor_, &MallPlayerLimitInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MSProtoc_2fMS_5fMall_2eproto() {
  delete LimitGood::default_instance_;
  delete LimitGood_reflection_;
  delete Admin_ReqMallOp::default_instance_;
  delete Admin_ReqMallOp_reflection_;
  delete Admin_RetMallOp::default_instance_;
  delete Admin_RetMallOp_reflection_;
  delete PlayerMallInfo::default_instance_;
  delete PlayerMallInfo_reflection_;
  delete ReqMallInfo::default_instance_;
  delete ReqMallInfo_reflection_;
  delete RetMallInfo::default_instance_;
  delete RetMallInfo_reflection_;
  delete ReqBuyLimitGoods::default_instance_;
  delete ReqBuyLimitGoods_reflection_;
  delete RetBuyLimitGoods::default_instance_;
  delete RetBuyLimitGoods_reflection_;
  delete ReqMallInfoByType::default_instance_;
  delete ReqMallInfoByType_reflection_;
  delete RetMallInfoByType::default_instance_;
  delete RetMallInfoByType_reflection_;
  delete MallLimitInfo::default_instance_;
  delete MallLimitInfo_reflection_;
  delete MallPlayerLimit::default_instance_;
  delete MallPlayerLimit_reflection_;
  delete MallPlayerLimitInfo::default_instance_;
  delete MallPlayerLimitInfo_reflection_;
}

void protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026MSProtoc/MS_Mall.proto\022\007MS_Mall\"z\n\tLim"
    "itGood\022\016\n\006itemId\030\001 \002(\003\022\r\n\005limit\030\002 \001(\005\022\020\n"
    "\010bindType\030\003 \001(\005\022\023\n\013formerPrice\030\004 \001(\005\022\024\n\014"
    "currentPrice\030\005 \001(\005\022\021\n\tmoneyType\030\006 \001(\005\"\212\001"
    "\n\017Admin_ReqMallOp\022\n\n\002op\030\001 \002(\005\022\021\n\tbeginTi"
    "me\030\002 \001(\003\022\017\n\007endTime\030\003 \001(\003\022$\n\010itemList\030\004 "
    "\003(\0132\022.MS_Mall.LimitGood\022\022\n\nbeginIndex\030\005 "
    "\001(\005\022\r\n\005count\030\006 \001(\005\"\211\001\n\017Admin_RetMallOp\022\013"
    "\n\003ret\030\001 \002(\005\022\n\n\002op\030\002 \001(\005\022\021\n\tbeginTime\030\003 \001"
    "(\003\022\017\n\007endTime\030\004 \001(\003\022$\n\010itemList\030\005 \003(\0132\022."
    "MS_Mall.LimitGood\022\023\n\013totalNumber\030\006 \001(\005\"L"
    "\n\016PlayerMallInfo\022\024\n\014haveBuyCount\030\001 \002(\005\022$"
    "\n\010itemInfo\030\002 \002(\0132\022.MS_Mall.LimitGood\"0\n\013"
    "ReqMallInfo\022\022\n\nbeginIndex\030\001 \002(\005\022\r\n\005count"
    "\030\002 \002(\005\"}\n\013RetMallInfo\022\013\n\003ret\030\001 \002(\005\022\021\n\tbe"
    "ginTime\030\002 \001(\003\022\017\n\007endTime\030\003 \001(\003\022)\n\010itemLi"
    "st\030\004 \003(\0132\027.MS_Mall.PlayerMallInfo\022\022\n\ntot"
    "alCount\030\005 \001(\005\"\215\001\n\020ReqBuyLimitGoods\022\016\n\006it"
    "emId\030\001 \002(\003\022\r\n\005count\030\002 \002(\005\022\017\n\007buyType\030\003 \002"
    "(\005\022\024\n\014currentPrice\030\004 \001(\005\022\020\n\010bindType\030\005 \001"
    "(\005\022\016\n\006charID\030\006 \001(\003\022\021\n\tmoneyType\030\007 \001(\005\"_\n"
    "\020RetBuyLimitGoods\022\013\n\003ret\030\001 \002(\005\022\016\n\006itemId"
    "\030\002 \001(\003\022\r\n\005count\030\003 \001(\005\022\016\n\006charID\030\004 \001(\003\022\017\n"
    "\007buyType\030\005 \001(\005\"$\n\021ReqMallInfoByType\022\017\n\007b"
    "uytype\030\001 \002(\005\"^\n\021RetMallInfoByType\022\013\n\003ret"
    "\030\001 \002(\005\022+\n\tlimitList\030\002 \003(\0132\030.MS_Mall.Mall"
    "PlayerLimit\022\017\n\007buytype\030\003 \002(\005\"Y\n\rMallLimi"
    "tInfo\022\021\n\tbeginTime\030\001 \002(\003\022\017\n\007endTime\030\002 \002("
    "\003\022$\n\010itemList\030\003 \003(\0132\022.MS_Mall.LimitGood\""
    "3\n\017MallPlayerLimit\022\016\n\006itemID\030\001 \002(\003\022\020\n\010bu"
    "yCount\030\002 \002(\005\"B\n\023MallPlayerLimitInfo\022+\n\tl"
    "imitList\030\002 \003(\0132\030.MS_Mall.MallPlayerLimit", 1280);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MSProtoc/MS_Mall.proto", &protobuf_RegisterTypes);
  LimitGood::default_instance_ = new LimitGood();
  Admin_ReqMallOp::default_instance_ = new Admin_ReqMallOp();
  Admin_RetMallOp::default_instance_ = new Admin_RetMallOp();
  PlayerMallInfo::default_instance_ = new PlayerMallInfo();
  ReqMallInfo::default_instance_ = new ReqMallInfo();
  RetMallInfo::default_instance_ = new RetMallInfo();
  ReqBuyLimitGoods::default_instance_ = new ReqBuyLimitGoods();
  RetBuyLimitGoods::default_instance_ = new RetBuyLimitGoods();
  ReqMallInfoByType::default_instance_ = new ReqMallInfoByType();
  RetMallInfoByType::default_instance_ = new RetMallInfoByType();
  MallLimitInfo::default_instance_ = new MallLimitInfo();
  MallPlayerLimit::default_instance_ = new MallPlayerLimit();
  MallPlayerLimitInfo::default_instance_ = new MallPlayerLimitInfo();
  LimitGood::default_instance_->InitAsDefaultInstance();
  Admin_ReqMallOp::default_instance_->InitAsDefaultInstance();
  Admin_RetMallOp::default_instance_->InitAsDefaultInstance();
  PlayerMallInfo::default_instance_->InitAsDefaultInstance();
  ReqMallInfo::default_instance_->InitAsDefaultInstance();
  RetMallInfo::default_instance_->InitAsDefaultInstance();
  ReqBuyLimitGoods::default_instance_->InitAsDefaultInstance();
  RetBuyLimitGoods::default_instance_->InitAsDefaultInstance();
  ReqMallInfoByType::default_instance_->InitAsDefaultInstance();
  RetMallInfoByType::default_instance_->InitAsDefaultInstance();
  MallLimitInfo::default_instance_->InitAsDefaultInstance();
  MallPlayerLimit::default_instance_->InitAsDefaultInstance();
  MallPlayerLimitInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MSProtoc_2fMS_5fMall_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MSProtoc_2fMS_5fMall_2eproto {
  StaticDescriptorInitializer_MSProtoc_2fMS_5fMall_2eproto() {
    protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto();
  }
} static_descriptor_initializer_MSProtoc_2fMS_5fMall_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int LimitGood::kItemIdFieldNumber;
const int LimitGood::kLimitFieldNumber;
const int LimitGood::kBindTypeFieldNumber;
const int LimitGood::kFormerPriceFieldNumber;
const int LimitGood::kCurrentPriceFieldNumber;
const int LimitGood::kMoneyTypeFieldNumber;
#endif  // !_MSC_VER

LimitGood::LimitGood()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LimitGood::InitAsDefaultInstance() {
}

LimitGood::LimitGood(const LimitGood& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LimitGood::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  limit_ = 0;
  bindtype_ = 0;
  formerprice_ = 0;
  currentprice_ = 0;
  moneytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimitGood::~LimitGood() {
  SharedDtor();
}

void LimitGood::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimitGood::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimitGood::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimitGood_descriptor_;
}

const LimitGood& LimitGood::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto();
  return *default_instance_;
}

LimitGood* LimitGood::default_instance_ = NULL;

LimitGood* LimitGood::New() const {
  return new LimitGood;
}

void LimitGood::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = GOOGLE_LONGLONG(0);
    limit_ = 0;
    bindtype_ = 0;
    formerprice_ = 0;
    currentprice_ = 0;
    moneytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimitGood::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // optional int32 limit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bindType;
        break;
      }

      // optional int32 bindType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindtype_)));
          set_has_bindtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_formerPrice;
        break;
      }

      // optional int32 formerPrice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_formerPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &formerprice_)));
          set_has_formerprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_currentPrice;
        break;
      }

      // optional int32 currentPrice = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentprice_)));
          set_has_currentprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_moneyType;
        break;
      }

      // optional int32 moneyType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LimitGood::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->itemid(), output);
  }

  // optional int32 limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->limit(), output);
  }

  // optional int32 bindType = 3;
  if (has_bindtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bindtype(), output);
  }

  // optional int32 formerPrice = 4;
  if (has_formerprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->formerprice(), output);
  }

  // optional int32 currentPrice = 5;
  if (has_currentprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->currentprice(), output);
  }

  // optional int32 moneyType = 6;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->moneytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LimitGood::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->itemid(), target);
  }

  // optional int32 limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->limit(), target);
  }

  // optional int32 bindType = 3;
  if (has_bindtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bindtype(), target);
  }

  // optional int32 formerPrice = 4;
  if (has_formerprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->formerprice(), target);
  }

  // optional int32 currentPrice = 5;
  if (has_currentprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->currentprice(), target);
  }

  // optional int32 moneyType = 6;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->moneytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LimitGood::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 limit = 2;
    if (has_limit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->limit());
    }

    // optional int32 bindType = 3;
    if (has_bindtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindtype());
    }

    // optional int32 formerPrice = 4;
    if (has_formerprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->formerprice());
    }

    // optional int32 currentPrice = 5;
    if (has_currentprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentprice());
    }

    // optional int32 moneyType = 6;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimitGood::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimitGood* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimitGood*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimitGood::MergeFrom(const LimitGood& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_bindtype()) {
      set_bindtype(from.bindtype());
    }
    if (from.has_formerprice()) {
      set_formerprice(from.formerprice());
    }
    if (from.has_currentprice()) {
      set_currentprice(from.currentprice());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimitGood::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimitGood::CopyFrom(const LimitGood& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimitGood::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void LimitGood::Swap(LimitGood* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(limit_, other->limit_);
    std::swap(bindtype_, other->bindtype_);
    std::swap(formerprice_, other->formerprice_);
    std::swap(currentprice_, other->currentprice_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimitGood::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimitGood_descriptor_;
  metadata.reflection = LimitGood_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_ReqMallOp::kOpFieldNumber;
const int Admin_ReqMallOp::kBeginTimeFieldNumber;
const int Admin_ReqMallOp::kEndTimeFieldNumber;
const int Admin_ReqMallOp::kItemListFieldNumber;
const int Admin_ReqMallOp::kBeginIndexFieldNumber;
const int Admin_ReqMallOp::kCountFieldNumber;
#endif  // !_MSC_VER

Admin_ReqMallOp::Admin_ReqMallOp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_ReqMallOp::InitAsDefaultInstance() {
}

Admin_ReqMallOp::Admin_ReqMallOp(const Admin_ReqMallOp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_ReqMallOp::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  beginindex_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_ReqMallOp::~Admin_ReqMallOp() {
  SharedDtor();
}

void Admin_ReqMallOp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_ReqMallOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_ReqMallOp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_ReqMallOp_descriptor_;
}

const Admin_ReqMallOp& Admin_ReqMallOp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto();
  return *default_instance_;
}

Admin_ReqMallOp* Admin_ReqMallOp::default_instance_ = NULL;

Admin_ReqMallOp* Admin_ReqMallOp::New() const {
  return new Admin_ReqMallOp;
}

void Admin_ReqMallOp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    beginindex_ = 0;
    count_ = 0;
  }
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_ReqMallOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_itemList;
        break;
      }

      // repeated .MS_Mall.LimitGood itemList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_itemList;
        if (input->ExpectTag(40)) goto parse_beginIndex;
        break;
      }

      // optional int32 beginIndex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beginindex_)));
          set_has_beginindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_count;
        break;
      }

      // optional int32 count = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_ReqMallOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begintime(), output);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // repeated .MS_Mall.LimitGood itemList = 4;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->itemlist(i), output);
  }

  // optional int32 beginIndex = 5;
  if (has_beginindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->beginindex(), output);
  }

  // optional int32 count = 6;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_ReqMallOp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begintime(), target);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // repeated .MS_Mall.LimitGood itemList = 4;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->itemlist(i), target);
  }

  // optional int32 beginIndex = 5;
  if (has_beginindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->beginindex(), target);
  }

  // optional int32 count = 6;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_ReqMallOp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // optional int64 beginTime = 2;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 beginIndex = 5;
    if (has_beginindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beginindex());
    }

    // optional int32 count = 6;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated .MS_Mall.LimitGood itemList = 4;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_ReqMallOp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_ReqMallOp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_ReqMallOp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_ReqMallOp::MergeFrom(const Admin_ReqMallOp& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_beginindex()) {
      set_beginindex(from.beginindex());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_ReqMallOp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_ReqMallOp::CopyFrom(const Admin_ReqMallOp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_ReqMallOp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < itemlist_size(); i++) {
    if (!this->itemlist(i).IsInitialized()) return false;
  }
  return true;
}

void Admin_ReqMallOp::Swap(Admin_ReqMallOp* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(beginindex_, other->beginindex_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_ReqMallOp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_ReqMallOp_descriptor_;
  metadata.reflection = Admin_ReqMallOp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_RetMallOp::kRetFieldNumber;
const int Admin_RetMallOp::kOpFieldNumber;
const int Admin_RetMallOp::kBeginTimeFieldNumber;
const int Admin_RetMallOp::kEndTimeFieldNumber;
const int Admin_RetMallOp::kItemListFieldNumber;
const int Admin_RetMallOp::kTotalNumberFieldNumber;
#endif  // !_MSC_VER

Admin_RetMallOp::Admin_RetMallOp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_RetMallOp::InitAsDefaultInstance() {
}

Admin_RetMallOp::Admin_RetMallOp(const Admin_RetMallOp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_RetMallOp::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  op_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  totalnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_RetMallOp::~Admin_RetMallOp() {
  SharedDtor();
}

void Admin_RetMallOp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_RetMallOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_RetMallOp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_RetMallOp_descriptor_;
}

const Admin_RetMallOp& Admin_RetMallOp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto();
  return *default_instance_;
}

Admin_RetMallOp* Admin_RetMallOp::default_instance_ = NULL;

Admin_RetMallOp* Admin_RetMallOp::New() const {
  return new Admin_RetMallOp;
}

void Admin_RetMallOp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    op_ = 0;
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    totalnumber_ = 0;
  }
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_RetMallOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_op;
        break;
      }

      // optional int32 op = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_op:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_itemList;
        break;
      }

      // repeated .MS_Mall.LimitGood itemList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_itemList;
        if (input->ExpectTag(48)) goto parse_totalNumber;
        break;
      }

      // optional int32 totalNumber = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumber_)));
          set_has_totalnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_RetMallOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 op = 2;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->op(), output);
  }

  // optional int64 beginTime = 3;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->begintime(), output);
  }

  // optional int64 endTime = 4;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->endtime(), output);
  }

  // repeated .MS_Mall.LimitGood itemList = 5;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->itemlist(i), output);
  }

  // optional int32 totalNumber = 6;
  if (has_totalnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->totalnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_RetMallOp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 op = 2;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->op(), target);
  }

  // optional int64 beginTime = 3;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->begintime(), target);
  }

  // optional int64 endTime = 4;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->endtime(), target);
  }

  // repeated .MS_Mall.LimitGood itemList = 5;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->itemlist(i), target);
  }

  // optional int32 totalNumber = 6;
  if (has_totalnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->totalnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_RetMallOp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 op = 2;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // optional int64 beginTime = 3;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 endTime = 4;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 totalNumber = 6;
    if (has_totalnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnumber());
    }

  }
  // repeated .MS_Mall.LimitGood itemList = 5;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_RetMallOp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_RetMallOp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_RetMallOp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_RetMallOp::MergeFrom(const Admin_RetMallOp& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_totalnumber()) {
      set_totalnumber(from.totalnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_RetMallOp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_RetMallOp::CopyFrom(const Admin_RetMallOp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_RetMallOp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < itemlist_size(); i++) {
    if (!this->itemlist(i).IsInitialized()) return false;
  }
  return true;
}

void Admin_RetMallOp::Swap(Admin_RetMallOp* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(op_, other->op_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(totalnumber_, other->totalnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_RetMallOp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_RetMallOp_descriptor_;
  metadata.reflection = Admin_RetMallOp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerMallInfo::kHaveBuyCountFieldNumber;
const int PlayerMallInfo::kItemInfoFieldNumber;
#endif  // !_MSC_VER

PlayerMallInfo::PlayerMallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerMallInfo::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::MS_Mall::LimitGood*>(&::MS_Mall::LimitGood::default_instance());
}

PlayerMallInfo::PlayerMallInfo(const PlayerMallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerMallInfo::SharedCtor() {
  _cached_size_ = 0;
  havebuycount_ = 0;
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerMallInfo::~PlayerMallInfo() {
  SharedDtor();
}

void PlayerMallInfo::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void PlayerMallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerMallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerMallInfo_descriptor_;
}

const PlayerMallInfo& PlayerMallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto();
  return *default_instance_;
}

PlayerMallInfo* PlayerMallInfo::default_instance_ = NULL;

PlayerMallInfo* PlayerMallInfo::New() const {
  return new PlayerMallInfo;
}

void PlayerMallInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    havebuycount_ = 0;
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::MS_Mall::LimitGood::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerMallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 haveBuyCount = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &havebuycount_)));
          set_has_havebuycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemInfo;
        break;
      }

      // required .MS_Mall.LimitGood itemInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerMallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 haveBuyCount = 1;
  if (has_havebuycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->havebuycount(), output);
  }

  // required .MS_Mall.LimitGood itemInfo = 2;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerMallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 haveBuyCount = 1;
  if (has_havebuycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->havebuycount(), target);
  }

  // required .MS_Mall.LimitGood itemInfo = 2;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerMallInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 haveBuyCount = 1;
    if (has_havebuycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->havebuycount());
    }

    // required .MS_Mall.LimitGood itemInfo = 2;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerMallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerMallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerMallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerMallInfo::MergeFrom(const PlayerMallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_havebuycount()) {
      set_havebuycount(from.havebuycount());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::MS_Mall::LimitGood::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerMallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerMallInfo::CopyFrom(const PlayerMallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerMallInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_iteminfo()) {
    if (!this->iteminfo().IsInitialized()) return false;
  }
  return true;
}

void PlayerMallInfo::Swap(PlayerMallInfo* other) {
  if (other != this) {
    std::swap(havebuycount_, other->havebuycount_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerMallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerMallInfo_descriptor_;
  metadata.reflection = PlayerMallInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMallInfo::kBeginIndexFieldNumber;
const int ReqMallInfo::kCountFieldNumber;
#endif  // !_MSC_VER

ReqMallInfo::ReqMallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqMallInfo::InitAsDefaultInstance() {
}

ReqMallInfo::ReqMallInfo(const ReqMallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqMallInfo::SharedCtor() {
  _cached_size_ = 0;
  beginindex_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMallInfo::~ReqMallInfo() {
  SharedDtor();
}

void ReqMallInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqMallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMallInfo_descriptor_;
}

const ReqMallInfo& ReqMallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto();
  return *default_instance_;
}

ReqMallInfo* ReqMallInfo::default_instance_ = NULL;

ReqMallInfo* ReqMallInfo::New() const {
  return new ReqMallInfo;
}

void ReqMallInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    beginindex_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 beginIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &beginindex_)));
          set_has_beginindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqMallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 beginIndex = 1;
  if (has_beginindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->beginindex(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqMallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 beginIndex = 1;
  if (has_beginindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->beginindex(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqMallInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 beginIndex = 1;
    if (has_beginindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->beginindex());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMallInfo::MergeFrom(const ReqMallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_beginindex()) {
      set_beginindex(from.beginindex());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMallInfo::CopyFrom(const ReqMallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMallInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqMallInfo::Swap(ReqMallInfo* other) {
  if (other != this) {
    std::swap(beginindex_, other->beginindex_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMallInfo_descriptor_;
  metadata.reflection = ReqMallInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetMallInfo::kRetFieldNumber;
const int RetMallInfo::kBeginTimeFieldNumber;
const int RetMallInfo::kEndTimeFieldNumber;
const int RetMallInfo::kItemListFieldNumber;
const int RetMallInfo::kTotalCountFieldNumber;
#endif  // !_MSC_VER

RetMallInfo::RetMallInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetMallInfo::InitAsDefaultInstance() {
}

RetMallInfo::RetMallInfo(const RetMallInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetMallInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  totalcount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetMallInfo::~RetMallInfo() {
  SharedDtor();
}

void RetMallInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetMallInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetMallInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetMallInfo_descriptor_;
}

const RetMallInfo& RetMallInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto();
  return *default_instance_;
}

RetMallInfo* RetMallInfo::default_instance_ = NULL;

RetMallInfo* RetMallInfo::New() const {
  return new RetMallInfo;
}

void RetMallInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    totalcount_ = 0;
  }
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetMallInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_itemList;
        break;
      }

      // repeated .MS_Mall.PlayerMallInfo itemList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_itemList;
        if (input->ExpectTag(40)) goto parse_totalCount;
        break;
      }

      // optional int32 totalCount = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalcount_)));
          set_has_totalcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetMallInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begintime(), output);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // repeated .MS_Mall.PlayerMallInfo itemList = 4;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->itemlist(i), output);
  }

  // optional int32 totalCount = 5;
  if (has_totalcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->totalcount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetMallInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begintime(), target);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // repeated .MS_Mall.PlayerMallInfo itemList = 4;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->itemlist(i), target);
  }

  // optional int32 totalCount = 5;
  if (has_totalcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->totalcount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetMallInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 beginTime = 2;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 totalCount = 5;
    if (has_totalcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalcount());
    }

  }
  // repeated .MS_Mall.PlayerMallInfo itemList = 4;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetMallInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetMallInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetMallInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetMallInfo::MergeFrom(const RetMallInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_totalcount()) {
      set_totalcount(from.totalcount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetMallInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetMallInfo::CopyFrom(const RetMallInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetMallInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < itemlist_size(); i++) {
    if (!this->itemlist(i).IsInitialized()) return false;
  }
  return true;
}

void RetMallInfo::Swap(RetMallInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(totalcount_, other->totalcount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetMallInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetMallInfo_descriptor_;
  metadata.reflection = RetMallInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqBuyLimitGoods::kItemIdFieldNumber;
const int ReqBuyLimitGoods::kCountFieldNumber;
const int ReqBuyLimitGoods::kBuyTypeFieldNumber;
const int ReqBuyLimitGoods::kCurrentPriceFieldNumber;
const int ReqBuyLimitGoods::kBindTypeFieldNumber;
const int ReqBuyLimitGoods::kCharIDFieldNumber;
const int ReqBuyLimitGoods::kMoneyTypeFieldNumber;
#endif  // !_MSC_VER

ReqBuyLimitGoods::ReqBuyLimitGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqBuyLimitGoods::InitAsDefaultInstance() {
}

ReqBuyLimitGoods::ReqBuyLimitGoods(const ReqBuyLimitGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqBuyLimitGoods::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  buytype_ = 0;
  currentprice_ = 0;
  bindtype_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  moneytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqBuyLimitGoods::~ReqBuyLimitGoods() {
  SharedDtor();
}

void ReqBuyLimitGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqBuyLimitGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqBuyLimitGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqBuyLimitGoods_descriptor_;
}

const ReqBuyLimitGoods& ReqBuyLimitGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto();
  return *default_instance_;
}

ReqBuyLimitGoods* ReqBuyLimitGoods::default_instance_ = NULL;

ReqBuyLimitGoods* ReqBuyLimitGoods::New() const {
  return new ReqBuyLimitGoods;
}

void ReqBuyLimitGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = GOOGLE_LONGLONG(0);
    count_ = 0;
    buytype_ = 0;
    currentprice_ = 0;
    bindtype_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    moneytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqBuyLimitGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buyType;
        break;
      }

      // required int32 buyType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buytype_)));
          set_has_buytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_currentPrice;
        break;
      }

      // optional int32 currentPrice = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentPrice:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentprice_)));
          set_has_currentprice();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bindType;
        break;
      }

      // optional int32 bindType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindtype_)));
          set_has_bindtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_charID;
        break;
      }

      // optional int64 charID = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_moneyType;
        break;
      }

      // optional int32 moneyType = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_moneyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &moneytype_)));
          set_has_moneytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqBuyLimitGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->itemid(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // required int32 buyType = 3;
  if (has_buytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buytype(), output);
  }

  // optional int32 currentPrice = 4;
  if (has_currentprice()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->currentprice(), output);
  }

  // optional int32 bindType = 5;
  if (has_bindtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bindtype(), output);
  }

  // optional int64 charID = 6;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->charid(), output);
  }

  // optional int32 moneyType = 7;
  if (has_moneytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->moneytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqBuyLimitGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->itemid(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // required int32 buyType = 3;
  if (has_buytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buytype(), target);
  }

  // optional int32 currentPrice = 4;
  if (has_currentprice()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->currentprice(), target);
  }

  // optional int32 bindType = 5;
  if (has_bindtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bindtype(), target);
  }

  // optional int64 charID = 6;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->charid(), target);
  }

  // optional int32 moneyType = 7;
  if (has_moneytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->moneytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqBuyLimitGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // required int32 buyType = 3;
    if (has_buytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buytype());
    }

    // optional int32 currentPrice = 4;
    if (has_currentprice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentprice());
    }

    // optional int32 bindType = 5;
    if (has_bindtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindtype());
    }

    // optional int64 charID = 6;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 moneyType = 7;
    if (has_moneytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->moneytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqBuyLimitGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqBuyLimitGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqBuyLimitGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqBuyLimitGoods::MergeFrom(const ReqBuyLimitGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_buytype()) {
      set_buytype(from.buytype());
    }
    if (from.has_currentprice()) {
      set_currentprice(from.currentprice());
    }
    if (from.has_bindtype()) {
      set_bindtype(from.bindtype());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_moneytype()) {
      set_moneytype(from.moneytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqBuyLimitGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqBuyLimitGoods::CopyFrom(const ReqBuyLimitGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqBuyLimitGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ReqBuyLimitGoods::Swap(ReqBuyLimitGoods* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(buytype_, other->buytype_);
    std::swap(currentprice_, other->currentprice_);
    std::swap(bindtype_, other->bindtype_);
    std::swap(charid_, other->charid_);
    std::swap(moneytype_, other->moneytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqBuyLimitGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqBuyLimitGoods_descriptor_;
  metadata.reflection = ReqBuyLimitGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetBuyLimitGoods::kRetFieldNumber;
const int RetBuyLimitGoods::kItemIdFieldNumber;
const int RetBuyLimitGoods::kCountFieldNumber;
const int RetBuyLimitGoods::kCharIDFieldNumber;
const int RetBuyLimitGoods::kBuyTypeFieldNumber;
#endif  // !_MSC_VER

RetBuyLimitGoods::RetBuyLimitGoods()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetBuyLimitGoods::InitAsDefaultInstance() {
}

RetBuyLimitGoods::RetBuyLimitGoods(const RetBuyLimitGoods& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetBuyLimitGoods::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  count_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  buytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetBuyLimitGoods::~RetBuyLimitGoods() {
  SharedDtor();
}

void RetBuyLimitGoods::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetBuyLimitGoods::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetBuyLimitGoods::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetBuyLimitGoods_descriptor_;
}

const RetBuyLimitGoods& RetBuyLimitGoods::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto();
  return *default_instance_;
}

RetBuyLimitGoods* RetBuyLimitGoods::default_instance_ = NULL;

RetBuyLimitGoods* RetBuyLimitGoods::New() const {
  return new RetBuyLimitGoods;
}

void RetBuyLimitGoods::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    itemid_ = GOOGLE_LONGLONG(0);
    count_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    buytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetBuyLimitGoods::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // optional int64 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_charID;
        break;
      }

      // optional int64 charID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_buyType;
        break;
      }

      // optional int32 buyType = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buytype_)));
          set_has_buytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetBuyLimitGoods::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->itemid(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional int64 charID = 4;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->charid(), output);
  }

  // optional int32 buyType = 5;
  if (has_buytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->buytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetBuyLimitGoods::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->itemid(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional int64 charID = 4;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->charid(), target);
  }

  // optional int32 buyType = 5;
  if (has_buytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->buytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetBuyLimitGoods::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int64 charID = 4;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 buyType = 5;
    if (has_buytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetBuyLimitGoods::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetBuyLimitGoods* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetBuyLimitGoods*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetBuyLimitGoods::MergeFrom(const RetBuyLimitGoods& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_buytype()) {
      set_buytype(from.buytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetBuyLimitGoods::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetBuyLimitGoods::CopyFrom(const RetBuyLimitGoods& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetBuyLimitGoods::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetBuyLimitGoods::Swap(RetBuyLimitGoods* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(itemid_, other->itemid_);
    std::swap(count_, other->count_);
    std::swap(charid_, other->charid_);
    std::swap(buytype_, other->buytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetBuyLimitGoods::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetBuyLimitGoods_descriptor_;
  metadata.reflection = RetBuyLimitGoods_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqMallInfoByType::kBuytypeFieldNumber;
#endif  // !_MSC_VER

ReqMallInfoByType::ReqMallInfoByType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqMallInfoByType::InitAsDefaultInstance() {
}

ReqMallInfoByType::ReqMallInfoByType(const ReqMallInfoByType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqMallInfoByType::SharedCtor() {
  _cached_size_ = 0;
  buytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqMallInfoByType::~ReqMallInfoByType() {
  SharedDtor();
}

void ReqMallInfoByType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqMallInfoByType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqMallInfoByType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqMallInfoByType_descriptor_;
}

const ReqMallInfoByType& ReqMallInfoByType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto();
  return *default_instance_;
}

ReqMallInfoByType* ReqMallInfoByType::default_instance_ = NULL;

ReqMallInfoByType* ReqMallInfoByType::New() const {
  return new ReqMallInfoByType;
}

void ReqMallInfoByType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buytype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqMallInfoByType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buytype = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buytype_)));
          set_has_buytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqMallInfoByType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buytype = 1;
  if (has_buytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqMallInfoByType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buytype = 1;
  if (has_buytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqMallInfoByType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buytype = 1;
    if (has_buytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buytype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqMallInfoByType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqMallInfoByType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqMallInfoByType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqMallInfoByType::MergeFrom(const ReqMallInfoByType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buytype()) {
      set_buytype(from.buytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqMallInfoByType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqMallInfoByType::CopyFrom(const ReqMallInfoByType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqMallInfoByType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqMallInfoByType::Swap(ReqMallInfoByType* other) {
  if (other != this) {
    std::swap(buytype_, other->buytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqMallInfoByType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqMallInfoByType_descriptor_;
  metadata.reflection = ReqMallInfoByType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetMallInfoByType::kRetFieldNumber;
const int RetMallInfoByType::kLimitListFieldNumber;
const int RetMallInfoByType::kBuytypeFieldNumber;
#endif  // !_MSC_VER

RetMallInfoByType::RetMallInfoByType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetMallInfoByType::InitAsDefaultInstance() {
}

RetMallInfoByType::RetMallInfoByType(const RetMallInfoByType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetMallInfoByType::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  buytype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetMallInfoByType::~RetMallInfoByType() {
  SharedDtor();
}

void RetMallInfoByType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetMallInfoByType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetMallInfoByType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetMallInfoByType_descriptor_;
}

const RetMallInfoByType& RetMallInfoByType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto();
  return *default_instance_;
}

RetMallInfoByType* RetMallInfoByType::default_instance_ = NULL;

RetMallInfoByType* RetMallInfoByType::New() const {
  return new RetMallInfoByType;
}

void RetMallInfoByType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    buytype_ = 0;
  }
  limitlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetMallInfoByType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_limitList;
        break;
      }

      // repeated .MS_Mall.MallPlayerLimit limitList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limitList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limitlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_limitList;
        if (input->ExpectTag(24)) goto parse_buytype;
        break;
      }

      // required int32 buytype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buytype_)));
          set_has_buytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetMallInfoByType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .MS_Mall.MallPlayerLimit limitList = 2;
  for (int i = 0; i < this->limitlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->limitlist(i), output);
  }

  // required int32 buytype = 3;
  if (has_buytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buytype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetMallInfoByType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .MS_Mall.MallPlayerLimit limitList = 2;
  for (int i = 0; i < this->limitlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->limitlist(i), target);
  }

  // required int32 buytype = 3;
  if (has_buytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buytype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetMallInfoByType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 buytype = 3;
    if (has_buytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buytype());
    }

  }
  // repeated .MS_Mall.MallPlayerLimit limitList = 2;
  total_size += 1 * this->limitlist_size();
  for (int i = 0; i < this->limitlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limitlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetMallInfoByType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetMallInfoByType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetMallInfoByType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetMallInfoByType::MergeFrom(const RetMallInfoByType& from) {
  GOOGLE_CHECK_NE(&from, this);
  limitlist_.MergeFrom(from.limitlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_buytype()) {
      set_buytype(from.buytype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetMallInfoByType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetMallInfoByType::CopyFrom(const RetMallInfoByType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetMallInfoByType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < limitlist_size(); i++) {
    if (!this->limitlist(i).IsInitialized()) return false;
  }
  return true;
}

void RetMallInfoByType::Swap(RetMallInfoByType* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    limitlist_.Swap(&other->limitlist_);
    std::swap(buytype_, other->buytype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetMallInfoByType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetMallInfoByType_descriptor_;
  metadata.reflection = RetMallInfoByType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallLimitInfo::kBeginTimeFieldNumber;
const int MallLimitInfo::kEndTimeFieldNumber;
const int MallLimitInfo::kItemListFieldNumber;
#endif  // !_MSC_VER

MallLimitInfo::MallLimitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallLimitInfo::InitAsDefaultInstance() {
}

MallLimitInfo::MallLimitInfo(const MallLimitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallLimitInfo::SharedCtor() {
  _cached_size_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallLimitInfo::~MallLimitInfo() {
  SharedDtor();
}

void MallLimitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallLimitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallLimitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallLimitInfo_descriptor_;
}

const MallLimitInfo& MallLimitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto();
  return *default_instance_;
}

MallLimitInfo* MallLimitInfo::default_instance_ = NULL;

MallLimitInfo* MallLimitInfo::New() const {
  return new MallLimitInfo;
}

void MallLimitInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
  }
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallLimitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 beginTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }

      // required int64 endTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemList;
        break;
      }

      // repeated .MS_Mall.LimitGood itemList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallLimitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 beginTime = 1;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->begintime(), output);
  }

  // required int64 endTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->endtime(), output);
  }

  // repeated .MS_Mall.LimitGood itemList = 3;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->itemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallLimitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 beginTime = 1;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->begintime(), target);
  }

  // required int64 endTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->endtime(), target);
  }

  // repeated .MS_Mall.LimitGood itemList = 3;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->itemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallLimitInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 beginTime = 1;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // required int64 endTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  // repeated .MS_Mall.LimitGood itemList = 3;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallLimitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallLimitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallLimitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallLimitInfo::MergeFrom(const MallLimitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallLimitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallLimitInfo::CopyFrom(const MallLimitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallLimitInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < itemlist_size(); i++) {
    if (!this->itemlist(i).IsInitialized()) return false;
  }
  return true;
}

void MallLimitInfo::Swap(MallLimitInfo* other) {
  if (other != this) {
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallLimitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallLimitInfo_descriptor_;
  metadata.reflection = MallLimitInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallPlayerLimit::kItemIDFieldNumber;
const int MallPlayerLimit::kBuyCountFieldNumber;
#endif  // !_MSC_VER

MallPlayerLimit::MallPlayerLimit()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallPlayerLimit::InitAsDefaultInstance() {
}

MallPlayerLimit::MallPlayerLimit(const MallPlayerLimit& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallPlayerLimit::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = GOOGLE_LONGLONG(0);
  buycount_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallPlayerLimit::~MallPlayerLimit() {
  SharedDtor();
}

void MallPlayerLimit::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallPlayerLimit::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallPlayerLimit::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallPlayerLimit_descriptor_;
}

const MallPlayerLimit& MallPlayerLimit::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto();
  return *default_instance_;
}

MallPlayerLimit* MallPlayerLimit::default_instance_ = NULL;

MallPlayerLimit* MallPlayerLimit::New() const {
  return new MallPlayerLimit;
}

void MallPlayerLimit::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = GOOGLE_LONGLONG(0);
    buycount_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallPlayerLimit::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buyCount;
        break;
      }

      // required int32 buyCount = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buycount_)));
          set_has_buycount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallPlayerLimit::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->itemid(), output);
  }

  // required int32 buyCount = 2;
  if (has_buycount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buycount(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallPlayerLimit::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->itemid(), target);
  }

  // required int32 buyCount = 2;
  if (has_buycount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buycount(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallPlayerLimit::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->itemid());
    }

    // required int32 buyCount = 2;
    if (has_buycount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buycount());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallPlayerLimit::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallPlayerLimit* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallPlayerLimit*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallPlayerLimit::MergeFrom(const MallPlayerLimit& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_buycount()) {
      set_buycount(from.buycount());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallPlayerLimit::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallPlayerLimit::CopyFrom(const MallPlayerLimit& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallPlayerLimit::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void MallPlayerLimit::Swap(MallPlayerLimit* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(buycount_, other->buycount_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallPlayerLimit::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallPlayerLimit_descriptor_;
  metadata.reflection = MallPlayerLimit_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MallPlayerLimitInfo::kLimitListFieldNumber;
#endif  // !_MSC_VER

MallPlayerLimitInfo::MallPlayerLimitInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MallPlayerLimitInfo::InitAsDefaultInstance() {
}

MallPlayerLimitInfo::MallPlayerLimitInfo(const MallPlayerLimitInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MallPlayerLimitInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MallPlayerLimitInfo::~MallPlayerLimitInfo() {
  SharedDtor();
}

void MallPlayerLimitInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MallPlayerLimitInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MallPlayerLimitInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MallPlayerLimitInfo_descriptor_;
}

const MallPlayerLimitInfo& MallPlayerLimitInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fMall_2eproto();
  return *default_instance_;
}

MallPlayerLimitInfo* MallPlayerLimitInfo::default_instance_ = NULL;

MallPlayerLimitInfo* MallPlayerLimitInfo::New() const {
  return new MallPlayerLimitInfo;
}

void MallPlayerLimitInfo::Clear() {
  limitlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MallPlayerLimitInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MS_Mall.MallPlayerLimit limitList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_limitList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_limitlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_limitList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MallPlayerLimitInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MS_Mall.MallPlayerLimit limitList = 2;
  for (int i = 0; i < this->limitlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->limitlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MallPlayerLimitInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MS_Mall.MallPlayerLimit limitList = 2;
  for (int i = 0; i < this->limitlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->limitlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MallPlayerLimitInfo::ByteSize() const {
  int total_size = 0;

  // repeated .MS_Mall.MallPlayerLimit limitList = 2;
  total_size += 1 * this->limitlist_size();
  for (int i = 0; i < this->limitlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->limitlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MallPlayerLimitInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MallPlayerLimitInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MallPlayerLimitInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MallPlayerLimitInfo::MergeFrom(const MallPlayerLimitInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  limitlist_.MergeFrom(from.limitlist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MallPlayerLimitInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MallPlayerLimitInfo::CopyFrom(const MallPlayerLimitInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MallPlayerLimitInfo::IsInitialized() const {

  for (int i = 0; i < limitlist_size(); i++) {
    if (!this->limitlist(i).IsInitialized()) return false;
  }
  return true;
}

void MallPlayerLimitInfo::Swap(MallPlayerLimitInfo* other) {
  if (other != this) {
    limitlist_.Swap(&other->limitlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MallPlayerLimitInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MallPlayerLimitInfo_descriptor_;
  metadata.reflection = MallPlayerLimitInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MS_Mall

// @@protoc_insertion_point(global_scope)
