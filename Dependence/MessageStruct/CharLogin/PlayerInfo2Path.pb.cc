// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/PlayerInfo2Path.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharLogin/PlayerInfo2Path.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CharLogin {

namespace {

const ::google::protobuf::Descriptor* CharInfoToPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharInfoToPath_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharLogin_2fPlayerInfo2Path_2eproto() {
  protobuf_AddDesc_CharLogin_2fPlayerInfo2Path_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharLogin/PlayerInfo2Path.proto");
  GOOGLE_CHECK(file != NULL);
  CharInfoToPath_descriptor_ = file->message_type(0);
  static const int CharInfoToPath_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharInfoToPath, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharInfoToPath, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharInfoToPath, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharInfoToPath, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharInfoToPath, gtid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharInfoToPath, movespeed_),
  };
  CharInfoToPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharInfoToPath_descriptor_,
      CharInfoToPath::default_instance_,
      CharInfoToPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharInfoToPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharInfoToPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharInfoToPath));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharLogin_2fPlayerInfo2Path_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharInfoToPath_descriptor_, &CharInfoToPath::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharLogin_2fPlayerInfo2Path_2eproto() {
  delete CharInfoToPath::default_instance_;
  delete CharInfoToPath_reflection_;
}

void protobuf_AddDesc_CharLogin_2fPlayerInfo2Path_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\037CharLogin/PlayerInfo2Path.proto\022\tCharL"
    "ogin\"l\n\016CharInfoToPath\022\016\n\006charid\030\001 \002(\003\022\r"
    "\n\005mapid\030\002 \002(\003\022\014\n\004xpos\030\003 \002(\005\022\014\n\004ypos\030\004 \002("
    "\005\022\014\n\004gtid\030\005 \002(\005\022\021\n\tmovespeed\030\006 \002(\005", 154);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharLogin/PlayerInfo2Path.proto", &protobuf_RegisterTypes);
  CharInfoToPath::default_instance_ = new CharInfoToPath();
  CharInfoToPath::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharLogin_2fPlayerInfo2Path_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharLogin_2fPlayerInfo2Path_2eproto {
  StaticDescriptorInitializer_CharLogin_2fPlayerInfo2Path_2eproto() {
    protobuf_AddDesc_CharLogin_2fPlayerInfo2Path_2eproto();
  }
} static_descriptor_initializer_CharLogin_2fPlayerInfo2Path_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CharInfoToPath::kCharidFieldNumber;
const int CharInfoToPath::kMapidFieldNumber;
const int CharInfoToPath::kXposFieldNumber;
const int CharInfoToPath::kYposFieldNumber;
const int CharInfoToPath::kGtidFieldNumber;
const int CharInfoToPath::kMovespeedFieldNumber;
#endif  // !_MSC_VER

CharInfoToPath::CharInfoToPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharInfoToPath::InitAsDefaultInstance() {
}

CharInfoToPath::CharInfoToPath(const CharInfoToPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharInfoToPath::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  mapid_ = GOOGLE_LONGLONG(0);
  xpos_ = 0;
  ypos_ = 0;
  gtid_ = 0;
  movespeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharInfoToPath::~CharInfoToPath() {
  SharedDtor();
}

void CharInfoToPath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharInfoToPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharInfoToPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharInfoToPath_descriptor_;
}

const CharInfoToPath& CharInfoToPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo2Path_2eproto();
  return *default_instance_;
}

CharInfoToPath* CharInfoToPath::default_instance_ = NULL;

CharInfoToPath* CharInfoToPath::New() const {
  return new CharInfoToPath;
}

void CharInfoToPath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    mapid_ = GOOGLE_LONGLONG(0);
    xpos_ = 0;
    ypos_ = 0;
    gtid_ = 0;
    movespeed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharInfoToPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // required int64 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_xpos;
        break;
      }

      // required int32 xpos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ypos;
        break;
      }

      // required int32 ypos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_gtid;
        break;
      }

      // required int32 gtid = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gtid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gtid_)));
          set_has_gtid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_movespeed;
        break;
      }

      // required int32 movespeed = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharInfoToPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int64 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mapid(), output);
  }

  // required int32 xpos = 3;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->xpos(), output);
  }

  // required int32 ypos = 4;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ypos(), output);
  }

  // required int32 gtid = 5;
  if (has_gtid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->gtid(), output);
  }

  // required int32 movespeed = 6;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->movespeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharInfoToPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int64 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mapid(), target);
  }

  // required int32 xpos = 3;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->xpos(), target);
  }

  // required int32 ypos = 4;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ypos(), target);
  }

  // required int32 gtid = 5;
  if (has_gtid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->gtid(), target);
  }

  // required int32 movespeed = 6;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->movespeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharInfoToPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int64 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // required int32 xpos = 3;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

    // required int32 ypos = 4;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

    // required int32 gtid = 5;
    if (has_gtid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gtid());
    }

    // required int32 movespeed = 6;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharInfoToPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharInfoToPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharInfoToPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharInfoToPath::MergeFrom(const CharInfoToPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_gtid()) {
      set_gtid(from.gtid());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharInfoToPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharInfoToPath::CopyFrom(const CharInfoToPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharInfoToPath::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void CharInfoToPath::Swap(CharInfoToPath* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(mapid_, other->mapid_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(gtid_, other->gtid_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharInfoToPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharInfoToPath_descriptor_;
  metadata.reflection = CharInfoToPath_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CharLogin

// @@protoc_insertion_point(global_scope)
