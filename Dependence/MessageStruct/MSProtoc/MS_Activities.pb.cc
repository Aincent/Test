// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSProtoc/MS_Activities.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MSProtoc/MS_Activities.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ActivitiesProto {

namespace {

const ::google::protobuf::Descriptor* ActivitiesOp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivitiesOp_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_reflection_ = NULL;
const ::google::protobuf::Descriptor* FirstRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FirstRecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RankingTypes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RankingTypes_reflection_ = NULL;
const ::google::protobuf::Descriptor* Ranking_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Ranking_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvistInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvistInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Invist_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Invist_reflection_ = NULL;
const ::google::protobuf::Descriptor* GeneralTypes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GeneralTypes_reflection_ = NULL;
const ::google::protobuf::Descriptor* General_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  General_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelayRechargeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelayRechargeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RelayRecharge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RelayRecharge_reflection_ = NULL;
const ::google::protobuf::Descriptor* Compensate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Compensate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToGMActivityState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGMActivityState_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityStateList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityStateList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto() {
  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MSProtoc/MS_Activities.proto");
  GOOGLE_CHECK(file != NULL);
  ActivitiesOp_descriptor_ = file->message_type(0);
  static const int ActivitiesOp_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitiesOp, op_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitiesOp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitiesOp, activitylist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitiesOp, totalnumber_),
  };
  ActivitiesOp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivitiesOp_descriptor_,
      ActivitiesOp::default_instance_,
      ActivitiesOp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitiesOp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivitiesOp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivitiesOp));
  Activity_descriptor_ = file->message_type(1);
  static const int Activity_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, content_),
  };
  Activity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_descriptor_,
      Activity::default_instance_,
      Activity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity));
  FirstRecharge_descriptor_ = file->message_type(2);
  static const int FirstRecharge_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRecharge, activityname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRecharge, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRecharge, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRecharge, rewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRecharge, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRecharge, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRecharge, rate_),
  };
  FirstRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FirstRecharge_descriptor_,
      FirstRecharge::default_instance_,
      FirstRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FirstRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FirstRecharge));
  RankingInfo_descriptor_ = file->message_type(3);
  static const int RankingInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, item_num_),
  };
  RankingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankingInfo_descriptor_,
      RankingInfo::default_instance_,
      RankingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankingInfo));
  RankingTypes_descriptor_ = file->message_type(4);
  static const int RankingTypes_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingTypes, tinytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingTypes, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingTypes, info_),
  };
  RankingTypes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RankingTypes_descriptor_,
      RankingTypes::default_instance_,
      RankingTypes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingTypes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RankingTypes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RankingTypes));
  Ranking_descriptor_ = file->message_type(5);
  static const int Ranking_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, activityname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, rewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, data_),
  };
  Ranking_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Ranking_descriptor_,
      Ranking::default_instance_,
      Ranking_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Ranking, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Ranking));
  InvistInfo_descriptor_ = file->message_type(6);
  static const int InvistInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvistInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvistInfo, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvistInfo, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvistInfo, golden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvistInfo, bgolden_),
  };
  InvistInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvistInfo_descriptor_,
      InvistInfo::default_instance_,
      InvistInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvistInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvistInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvistInfo));
  Invist_descriptor_ = file->message_type(7);
  static const int Invist_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invist, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invist, maxgolden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invist, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invist, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invist, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invist, rewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invist, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invist, activityname_),
  };
  Invist_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Invist_descriptor_,
      Invist::default_instance_,
      Invist_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invist, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Invist, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Invist));
  GeneralTypes_descriptor_ = file->message_type(8);
  static const int GeneralTypes_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTypes, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTypes, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTypes, value_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTypes, item_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTypes, item_num_),
  };
  GeneralTypes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GeneralTypes_descriptor_,
      GeneralTypes::default_instance_,
      GeneralTypes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTypes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GeneralTypes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GeneralTypes));
  General_descriptor_ = file->message_type(9);
  static const int General_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(General, activityname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(General, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(General, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(General, rewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(General, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(General, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(General, data_),
  };
  General_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      General_descriptor_,
      General::default_instance_,
      General_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(General, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(General, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(General));
  RelayRechargeInfo_descriptor_ = file->message_type(10);
  static const int RelayRechargeInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRechargeInfo, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRechargeInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRechargeInfo, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRechargeInfo, rechargegolden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRechargeInfo, rechargepeople_),
  };
  RelayRechargeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelayRechargeInfo_descriptor_,
      RelayRechargeInfo::default_instance_,
      RelayRechargeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRechargeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRechargeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelayRechargeInfo));
  RelayRecharge_descriptor_ = file->message_type(11);
  static const int RelayRecharge_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRecharge, activityname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRecharge, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRecharge, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRecharge, rewardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRecharge, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRecharge, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRecharge, data_),
  };
  RelayRecharge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RelayRecharge_descriptor_,
      RelayRecharge::default_instance_,
      RelayRecharge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRecharge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RelayRecharge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RelayRecharge));
  Compensate_descriptor_ = file->message_type(12);
  static const int Compensate_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compensate, activityname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compensate, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compensate, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compensate, announcetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compensate, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compensate, des_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compensate, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compensate, itemnum_),
  };
  Compensate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Compensate_descriptor_,
      Compensate::default_instance_,
      Compensate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compensate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Compensate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Compensate));
  ToGMActivityState_descriptor_ = file->message_type(13);
  static const int ToGMActivityState_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMActivityState, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMActivityState, list_),
  };
  ToGMActivityState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGMActivityState_descriptor_,
      ToGMActivityState::default_instance_,
      ToGMActivityState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMActivityState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMActivityState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGMActivityState));
  ActivityStateList_descriptor_ = file->message_type(14);
  static const int ActivityStateList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStateList, states_),
  };
  ActivityStateList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityStateList_descriptor_,
      ActivityStateList::default_instance_,
      ActivityStateList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStateList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStateList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityStateList));
  ActivityState_descriptor_ = file->message_type(15);
  static const int ActivityState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityState, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityState, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityState, num_),
  };
  ActivityState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityState_descriptor_,
      ActivityState::default_instance_,
      ActivityState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityState));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivitiesOp_descriptor_, &ActivitiesOp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_descriptor_, &Activity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FirstRecharge_descriptor_, &FirstRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankingInfo_descriptor_, &RankingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RankingTypes_descriptor_, &RankingTypes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Ranking_descriptor_, &Ranking::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvistInfo_descriptor_, &InvistInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Invist_descriptor_, &Invist::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GeneralTypes_descriptor_, &GeneralTypes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    General_descriptor_, &General::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelayRechargeInfo_descriptor_, &RelayRechargeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RelayRecharge_descriptor_, &RelayRecharge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Compensate_descriptor_, &Compensate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGMActivityState_descriptor_, &ToGMActivityState::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityStateList_descriptor_, &ActivityStateList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityState_descriptor_, &ActivityState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto() {
  delete ActivitiesOp::default_instance_;
  delete ActivitiesOp_reflection_;
  delete Activity::default_instance_;
  delete Activity_reflection_;
  delete FirstRecharge::default_instance_;
  delete FirstRecharge_reflection_;
  delete RankingInfo::default_instance_;
  delete RankingInfo_reflection_;
  delete RankingTypes::default_instance_;
  delete RankingTypes_reflection_;
  delete Ranking::default_instance_;
  delete Ranking_reflection_;
  delete InvistInfo::default_instance_;
  delete InvistInfo_reflection_;
  delete Invist::default_instance_;
  delete Invist_reflection_;
  delete GeneralTypes::default_instance_;
  delete GeneralTypes_reflection_;
  delete General::default_instance_;
  delete General_reflection_;
  delete RelayRechargeInfo::default_instance_;
  delete RelayRechargeInfo_reflection_;
  delete RelayRecharge::default_instance_;
  delete RelayRecharge_reflection_;
  delete Compensate::default_instance_;
  delete Compensate_reflection_;
  delete ToGMActivityState::default_instance_;
  delete ToGMActivityState_reflection_;
  delete ActivityStateList::default_instance_;
  delete ActivityStateList_reflection_;
  delete ActivityState::default_instance_;
  delete ActivityState_reflection_;
}

void protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034MSProtoc/MS_Activities.proto\022\017Activiti"
    "esProto\"n\n\014ActivitiesOp\022\n\n\002op\030\001 \002(\005\022\014\n\004t"
    "ype\030\002 \002(\005\022/\n\014activityList\030\003 \003(\0132\031.Activi"
    "tiesProto.Activity\022\023\n\013totalNumber\030\004 \001(\005\""
    "9\n\010Activity\022\014\n\004type\030\001 \002(\005\022\016\n\006status\030\002 \001("
    "\005\022\017\n\007content\030\003 \001(\014\"\210\001\n\rFirstRecharge\022\024\n\014"
    "activityName\030\001 \002(\t\022\021\n\tbeginTime\030\002 \001(\003\022\017\n"
    "\007endTime\030\003 \001(\003\022\022\n\nrewardTime\030\004 \001(\003\022\016\n\006st"
    "atus\030\005 \001(\005\022\013\n\003des\030\006 \001(\t\022\014\n\004rate\030\007 \002(\005\"[\n"
    "\013RankingInfo\022\r\n\005index\030\001 \001(\005\022\r\n\005value\030\002 \001"
    "(\005\022\013\n\003des\030\003 \001(\t\022\017\n\007item_id\030\004 \003(\005\022\020\n\010item"
    "_num\030\005 \003(\005\"Y\n\014RankingTypes\022\020\n\010tinyType\030\001"
    " \002(\005\022\013\n\003des\030\002 \001(\t\022*\n\004info\030\003 \003(\0132\034.Activi"
    "tiesProto.RankingInfo\"\224\001\n\007Ranking\022\024\n\014act"
    "ivityName\030\001 \002(\t\022\021\n\tbeginTime\030\002 \001(\003\022\017\n\007en"
    "dTime\030\003 \001(\003\022\022\n\nrewardTime\030\004 \001(\003\022\016\n\006statu"
    "s\030\005 \001(\005\022+\n\004data\030\006 \003(\0132\035.ActivitiesProto."
    "RankingTypes\"X\n\nInvistInfo\022\r\n\005index\030\001 \001("
    "\005\022\r\n\005value\030\002 \001(\005\022\013\n\003des\030\003 \001(\t\022\016\n\006golden\030"
    "\004 \001(\005\022\017\n\007bgolden\030\005 \001(\005\"\261\001\n\006Invist\022\013\n\003des"
    "\030\001 \001(\t\022\021\n\tmaxGolden\030\002 \001(\005\022)\n\004info\030\003 \003(\0132"
    "\033.ActivitiesProto.InvistInfo\022\021\n\tbeginTim"
    "e\030\004 \001(\003\022\017\n\007endTime\030\005 \001(\003\022\022\n\nrewardTime\030\006"
    " \001(\003\022\016\n\006status\030\007 \001(\005\022\024\n\014activityname\030\010 \001"
    "(\t\"\\\n\014GeneralTypes\022\r\n\005index\030\001 \001(\005\022\013\n\003des"
    "\030\002 \001(\t\022\r\n\005value\030\003 \001(\005\022\017\n\007item_id\030\004 \003(\005\022\020"
    "\n\010item_num\030\005 \003(\005\"\241\001\n\007General\022\024\n\014activity"
    "Name\030\001 \002(\t\022\021\n\tbeginTime\030\002 \001(\003\022\017\n\007endTime"
    "\030\003 \001(\003\022\022\n\nrewardTime\030\004 \001(\003\022\016\n\006status\030\005 \001"
    "(\005\022\013\n\003des\030\006 \001(\t\022+\n\004data\030\007 \003(\0132\035.Activiti"
    "esProto.GeneralTypes\"s\n\021RelayRechargeInf"
    "o\022\r\n\005index\030\001 \001(\005\022\016\n\006itemId\030\002 \003(\005\022\017\n\007item"
    "Num\030\003 \003(\005\022\026\n\016rechargegolden\030\004 \001(\005\022\026\n\016rec"
    "hargepeople\030\005 \001(\005\"\254\001\n\rRelayRecharge\022\024\n\014a"
    "ctivityName\030\001 \002(\t\022\021\n\tbeginTime\030\002 \001(\003\022\017\n\007"
    "endTime\030\003 \001(\003\022\022\n\nrewardTime\030\004 \001(\003\022\016\n\006sta"
    "tus\030\005 \001(\005\022\013\n\003des\030\006 \001(\t\0220\n\004data\030\007 \003(\0132\".A"
    "ctivitiesProto.RelayRechargeInfo\"\232\001\n\nCom"
    "pensate\022\024\n\014activityName\030\001 \002(\t\022\021\n\tbeginTi"
    "me\030\002 \001(\003\022\017\n\007endTime\030\003 \001(\003\022\024\n\014AnnounceTim"
    "e\030\004 \001(\003\022\016\n\006status\030\005 \001(\005\022\013\n\003des\030\006 \001(\t\022\016\n\006"
    "itemId\030\007 \003(\005\022\017\n\007itemNum\030\010 \003(\005\"U\n\021ToGMAct"
    "ivityState\022\016\n\006charID\030\001 \003(\003\0220\n\004list\030\002 \003(\013"
    "2\".ActivitiesProto.ActivityStateList\"C\n\021"
    "ActivityStateList\022.\n\006states\030\001 \003(\0132\036.Acti"
    "vitiesProto.ActivityState\"8\n\rActivitySta"
    "te\022\014\n\004type\030\001 \001(\005\022\014\n\004flag\030\002 \001(\010\022\013\n\003num\030\003 "
    "\001(\005", 1883);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MSProtoc/MS_Activities.proto", &protobuf_RegisterTypes);
  ActivitiesOp::default_instance_ = new ActivitiesOp();
  Activity::default_instance_ = new Activity();
  FirstRecharge::default_instance_ = new FirstRecharge();
  RankingInfo::default_instance_ = new RankingInfo();
  RankingTypes::default_instance_ = new RankingTypes();
  Ranking::default_instance_ = new Ranking();
  InvistInfo::default_instance_ = new InvistInfo();
  Invist::default_instance_ = new Invist();
  GeneralTypes::default_instance_ = new GeneralTypes();
  General::default_instance_ = new General();
  RelayRechargeInfo::default_instance_ = new RelayRechargeInfo();
  RelayRecharge::default_instance_ = new RelayRecharge();
  Compensate::default_instance_ = new Compensate();
  ToGMActivityState::default_instance_ = new ToGMActivityState();
  ActivityStateList::default_instance_ = new ActivityStateList();
  ActivityState::default_instance_ = new ActivityState();
  ActivitiesOp::default_instance_->InitAsDefaultInstance();
  Activity::default_instance_->InitAsDefaultInstance();
  FirstRecharge::default_instance_->InitAsDefaultInstance();
  RankingInfo::default_instance_->InitAsDefaultInstance();
  RankingTypes::default_instance_->InitAsDefaultInstance();
  Ranking::default_instance_->InitAsDefaultInstance();
  InvistInfo::default_instance_->InitAsDefaultInstance();
  Invist::default_instance_->InitAsDefaultInstance();
  GeneralTypes::default_instance_->InitAsDefaultInstance();
  General::default_instance_->InitAsDefaultInstance();
  RelayRechargeInfo::default_instance_->InitAsDefaultInstance();
  RelayRecharge::default_instance_->InitAsDefaultInstance();
  Compensate::default_instance_->InitAsDefaultInstance();
  ToGMActivityState::default_instance_->InitAsDefaultInstance();
  ActivityStateList::default_instance_->InitAsDefaultInstance();
  ActivityState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MSProtoc_2fMS_5fActivities_2eproto {
  StaticDescriptorInitializer_MSProtoc_2fMS_5fActivities_2eproto() {
    protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  }
} static_descriptor_initializer_MSProtoc_2fMS_5fActivities_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ActivitiesOp::kOpFieldNumber;
const int ActivitiesOp::kTypeFieldNumber;
const int ActivitiesOp::kActivityListFieldNumber;
const int ActivitiesOp::kTotalNumberFieldNumber;
#endif  // !_MSC_VER

ActivitiesOp::ActivitiesOp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivitiesOp::InitAsDefaultInstance() {
}

ActivitiesOp::ActivitiesOp(const ActivitiesOp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivitiesOp::SharedCtor() {
  _cached_size_ = 0;
  op_ = 0;
  type_ = 0;
  totalnumber_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivitiesOp::~ActivitiesOp() {
  SharedDtor();
}

void ActivitiesOp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivitiesOp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivitiesOp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivitiesOp_descriptor_;
}

const ActivitiesOp& ActivitiesOp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

ActivitiesOp* ActivitiesOp::default_instance_ = NULL;

ActivitiesOp* ActivitiesOp::New() const {
  return new ActivitiesOp;
}

void ActivitiesOp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    op_ = 0;
    type_ = 0;
    totalnumber_ = 0;
  }
  activitylist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivitiesOp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 op = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &op_)));
          set_has_op();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_activityList;
        break;
      }

      // repeated .ActivitiesProto.Activity activityList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activityList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_activitylist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_activityList;
        if (input->ExpectTag(32)) goto parse_totalNumber;
        break;
      }

      // optional int32 totalNumber = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalNumber:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalnumber_)));
          set_has_totalnumber();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivitiesOp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 op = 1;
  if (has_op()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->op(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated .ActivitiesProto.Activity activityList = 3;
  for (int i = 0; i < this->activitylist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->activitylist(i), output);
  }

  // optional int32 totalNumber = 4;
  if (has_totalnumber()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalnumber(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivitiesOp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 op = 1;
  if (has_op()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->op(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated .ActivitiesProto.Activity activityList = 3;
  for (int i = 0; i < this->activitylist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->activitylist(i), target);
  }

  // optional int32 totalNumber = 4;
  if (has_totalnumber()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totalnumber(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivitiesOp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 op = 1;
    if (has_op()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->op());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 totalNumber = 4;
    if (has_totalnumber()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalnumber());
    }

  }
  // repeated .ActivitiesProto.Activity activityList = 3;
  total_size += 1 * this->activitylist_size();
  for (int i = 0; i < this->activitylist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->activitylist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivitiesOp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivitiesOp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivitiesOp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivitiesOp::MergeFrom(const ActivitiesOp& from) {
  GOOGLE_CHECK_NE(&from, this);
  activitylist_.MergeFrom(from.activitylist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_op()) {
      set_op(from.op());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_totalnumber()) {
      set_totalnumber(from.totalnumber());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivitiesOp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivitiesOp::CopyFrom(const ActivitiesOp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivitiesOp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < activitylist_size(); i++) {
    if (!this->activitylist(i).IsInitialized()) return false;
  }
  return true;
}

void ActivitiesOp::Swap(ActivitiesOp* other) {
  if (other != this) {
    std::swap(op_, other->op_);
    std::swap(type_, other->type_);
    activitylist_.Swap(&other->activitylist_);
    std::swap(totalnumber_, other->totalnumber_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivitiesOp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivitiesOp_descriptor_;
  metadata.reflection = ActivitiesOp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity::kTypeFieldNumber;
const int Activity::kStatusFieldNumber;
const int Activity::kContentFieldNumber;
#endif  // !_MSC_VER

Activity::Activity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity::InitAsDefaultInstance() {
}

Activity::Activity(const Activity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  status_ = 0;
  content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity::~Activity() {
  SharedDtor();
}

void Activity::SharedDtor() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (this != default_instance_) {
  }
}

void Activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_descriptor_;
}

const Activity& Activity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

Activity* Activity::default_instance_ = NULL;

Activity* Activity::New() const {
  return new Activity;
}

void Activity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    status_ = 0;
    if (has_content()) {
      if (content_ != &::google::protobuf::internal::kEmptyString) {
        content_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_content;
        break;
      }

      // optional bytes content = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_content:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_content()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional bytes content = 3;
  if (has_content()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->content(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional bytes content = 3;
  if (has_content()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->content(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional bytes content = 3;
    if (has_content()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->content());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity::MergeFrom(const Activity& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_content()) {
      set_content(from.content());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity::CopyFrom(const Activity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Activity::Swap(Activity* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(status_, other->status_);
    std::swap(content_, other->content_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_descriptor_;
  metadata.reflection = Activity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FirstRecharge::kActivityNameFieldNumber;
const int FirstRecharge::kBeginTimeFieldNumber;
const int FirstRecharge::kEndTimeFieldNumber;
const int FirstRecharge::kRewardTimeFieldNumber;
const int FirstRecharge::kStatusFieldNumber;
const int FirstRecharge::kDesFieldNumber;
const int FirstRecharge::kRateFieldNumber;
#endif  // !_MSC_VER

FirstRecharge::FirstRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FirstRecharge::InitAsDefaultInstance() {
}

FirstRecharge::FirstRecharge(const FirstRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FirstRecharge::SharedCtor() {
  _cached_size_ = 0;
  activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  rewardtime_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rate_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FirstRecharge::~FirstRecharge() {
  SharedDtor();
}

void FirstRecharge::SharedDtor() {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (this != default_instance_) {
  }
}

void FirstRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FirstRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FirstRecharge_descriptor_;
}

const FirstRecharge& FirstRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

FirstRecharge* FirstRecharge::default_instance_ = NULL;

FirstRecharge* FirstRecharge::New() const {
  return new FirstRecharge;
}

void FirstRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_activityname()) {
      if (activityname_ != &::google::protobuf::internal::kEmptyString) {
        activityname_->clear();
      }
    }
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    rewardtime_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
    rate_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FirstRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string activityName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activityname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activityname().data(), this->activityname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewardTime;
        break;
      }

      // optional int64 rewardTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_des;
        break;
      }

      // optional string des = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_rate;
        break;
      }

      // required int32 rate = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rate_)));
          set_has_rate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FirstRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string activityName = 1;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->activityname(), output);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begintime(), output);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // optional int64 rewardTime = 4;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->rewardtime(), output);
  }

  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional string des = 6;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->des(), output);
  }

  // required int32 rate = 7;
  if (has_rate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->rate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FirstRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string activityName = 1;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->activityname(), target);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begintime(), target);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // optional int64 rewardTime = 4;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->rewardtime(), target);
  }

  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional string des = 6;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->des(), target);
  }

  // required int32 rate = 7;
  if (has_rate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->rate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FirstRecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string activityName = 1;
    if (has_activityname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activityname());
    }

    // optional int64 beginTime = 2;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int64 rewardTime = 4;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rewardtime());
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string des = 6;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }

    // required int32 rate = 7;
    if (has_rate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rate());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FirstRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FirstRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FirstRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FirstRecharge::MergeFrom(const FirstRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityname()) {
      set_activityname(from.activityname());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
    if (from.has_rate()) {
      set_rate(from.rate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FirstRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FirstRecharge::CopyFrom(const FirstRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FirstRecharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000041) != 0x00000041) return false;

  return true;
}

void FirstRecharge::Swap(FirstRecharge* other) {
  if (other != this) {
    std::swap(activityname_, other->activityname_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(status_, other->status_);
    std::swap(des_, other->des_);
    std::swap(rate_, other->rate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FirstRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FirstRecharge_descriptor_;
  metadata.reflection = FirstRecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankingInfo::kIndexFieldNumber;
const int RankingInfo::kValueFieldNumber;
const int RankingInfo::kDesFieldNumber;
const int RankingInfo::kItemIdFieldNumber;
const int RankingInfo::kItemNumFieldNumber;
#endif  // !_MSC_VER

RankingInfo::RankingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankingInfo::InitAsDefaultInstance() {
}

RankingInfo::RankingInfo(const RankingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankingInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  value_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankingInfo::~RankingInfo() {
  SharedDtor();
}

void RankingInfo::SharedDtor() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (this != default_instance_) {
  }
}

void RankingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankingInfo_descriptor_;
}

const RankingInfo& RankingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

RankingInfo* RankingInfo::default_instance_ = NULL;

RankingInfo* RankingInfo::New() const {
  return new RankingInfo;
}

void RankingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    value_ = 0;
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
  }
  item_id_.Clear();
  item_num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_des;
        break;
      }

      // optional string des = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_id;
        break;
      }

      // repeated int32 item_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_id;
        if (input->ExpectTag(40)) goto parse_item_num;
        break;
      }

      // repeated int32 item_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_item_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_num;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // optional string des = 3;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->des(), output);
  }

  // repeated int32 item_id = 4;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->item_id(i), output);
  }

  // repeated int32 item_num = 5;
  for (int i = 0; i < this->item_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->item_num(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // optional string des = 3;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->des(), target);
  }

  // repeated int32 item_id = 4;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->item_id(i), target);
  }

  // repeated int32 item_num = 5;
  for (int i = 0; i < this->item_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->item_num(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional string des = 3;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }

  }
  // repeated int32 item_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  // repeated int32 item_num = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_num(i));
    }
    total_size += 1 * this->item_num_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankingInfo::MergeFrom(const RankingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  item_num_.MergeFrom(from.item_num_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankingInfo::CopyFrom(const RankingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankingInfo::IsInitialized() const {

  return true;
}

void RankingInfo::Swap(RankingInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(value_, other->value_);
    std::swap(des_, other->des_);
    item_id_.Swap(&other->item_id_);
    item_num_.Swap(&other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankingInfo_descriptor_;
  metadata.reflection = RankingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RankingTypes::kTinyTypeFieldNumber;
const int RankingTypes::kDesFieldNumber;
const int RankingTypes::kInfoFieldNumber;
#endif  // !_MSC_VER

RankingTypes::RankingTypes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RankingTypes::InitAsDefaultInstance() {
}

RankingTypes::RankingTypes(const RankingTypes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RankingTypes::SharedCtor() {
  _cached_size_ = 0;
  tinytype_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RankingTypes::~RankingTypes() {
  SharedDtor();
}

void RankingTypes::SharedDtor() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (this != default_instance_) {
  }
}

void RankingTypes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RankingTypes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RankingTypes_descriptor_;
}

const RankingTypes& RankingTypes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

RankingTypes* RankingTypes::default_instance_ = NULL;

RankingTypes* RankingTypes::New() const {
  return new RankingTypes;
}

void RankingTypes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tinytype_ = 0;
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RankingTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 tinyType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tinytype_)));
          set_has_tinytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_des;
        break;
      }

      // optional string des = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .ActivitiesProto.RankingInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RankingTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 tinyType = 1;
  if (has_tinytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->tinytype(), output);
  }

  // optional string des = 2;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->des(), output);
  }

  // repeated .ActivitiesProto.RankingInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RankingTypes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 tinyType = 1;
  if (has_tinytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->tinytype(), target);
  }

  // optional string des = 2;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->des(), target);
  }

  // repeated .ActivitiesProto.RankingInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RankingTypes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 tinyType = 1;
    if (has_tinytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tinytype());
    }

    // optional string des = 2;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }

  }
  // repeated .ActivitiesProto.RankingInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RankingTypes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RankingTypes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RankingTypes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RankingTypes::MergeFrom(const RankingTypes& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tinytype()) {
      set_tinytype(from.tinytype());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RankingTypes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RankingTypes::CopyFrom(const RankingTypes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RankingTypes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RankingTypes::Swap(RankingTypes* other) {
  if (other != this) {
    std::swap(tinytype_, other->tinytype_);
    std::swap(des_, other->des_);
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RankingTypes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RankingTypes_descriptor_;
  metadata.reflection = RankingTypes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Ranking::kActivityNameFieldNumber;
const int Ranking::kBeginTimeFieldNumber;
const int Ranking::kEndTimeFieldNumber;
const int Ranking::kRewardTimeFieldNumber;
const int Ranking::kStatusFieldNumber;
const int Ranking::kDataFieldNumber;
#endif  // !_MSC_VER

Ranking::Ranking()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Ranking::InitAsDefaultInstance() {
}

Ranking::Ranking(const Ranking& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Ranking::SharedCtor() {
  _cached_size_ = 0;
  activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  rewardtime_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Ranking::~Ranking() {
  SharedDtor();
}

void Ranking::SharedDtor() {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (this != default_instance_) {
  }
}

void Ranking::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Ranking::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Ranking_descriptor_;
}

const Ranking& Ranking::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

Ranking* Ranking::default_instance_ = NULL;

Ranking* Ranking::New() const {
  return new Ranking;
}

void Ranking::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_activityname()) {
      if (activityname_ != &::google::protobuf::internal::kEmptyString) {
        activityname_->clear();
      }
    }
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    rewardtime_ = GOOGLE_LONGLONG(0);
    status_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Ranking::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string activityName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activityname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activityname().data(), this->activityname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewardTime;
        break;
      }

      // optional int64 rewardTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        break;
      }

      // repeated .ActivitiesProto.RankingTypes data = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Ranking::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string activityName = 1;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->activityname(), output);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begintime(), output);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // optional int64 rewardTime = 4;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->rewardtime(), output);
  }

  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // repeated .ActivitiesProto.RankingTypes data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Ranking::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string activityName = 1;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->activityname(), target);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begintime(), target);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // optional int64 rewardTime = 4;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->rewardtime(), target);
  }

  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // repeated .ActivitiesProto.RankingTypes data = 6;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Ranking::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string activityName = 1;
    if (has_activityname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activityname());
    }

    // optional int64 beginTime = 2;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int64 rewardTime = 4;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rewardtime());
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  // repeated .ActivitiesProto.RankingTypes data = 6;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Ranking::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Ranking* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Ranking*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Ranking::MergeFrom(const Ranking& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityname()) {
      set_activityname(from.activityname());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Ranking::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Ranking::CopyFrom(const Ranking& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Ranking::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < data_size(); i++) {
    if (!this->data(i).IsInitialized()) return false;
  }
  return true;
}

void Ranking::Swap(Ranking* other) {
  if (other != this) {
    std::swap(activityname_, other->activityname_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(status_, other->status_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Ranking::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Ranking_descriptor_;
  metadata.reflection = Ranking_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvistInfo::kIndexFieldNumber;
const int InvistInfo::kValueFieldNumber;
const int InvistInfo::kDesFieldNumber;
const int InvistInfo::kGoldenFieldNumber;
const int InvistInfo::kBgoldenFieldNumber;
#endif  // !_MSC_VER

InvistInfo::InvistInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvistInfo::InitAsDefaultInstance() {
}

InvistInfo::InvistInfo(const InvistInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvistInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  value_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  golden_ = 0;
  bgolden_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvistInfo::~InvistInfo() {
  SharedDtor();
}

void InvistInfo::SharedDtor() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (this != default_instance_) {
  }
}

void InvistInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvistInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvistInfo_descriptor_;
}

const InvistInfo& InvistInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

InvistInfo* InvistInfo::default_instance_ = NULL;

InvistInfo* InvistInfo::New() const {
  return new InvistInfo;
}

void InvistInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    value_ = 0;
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
    golden_ = 0;
    bgolden_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvistInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_des;
        break;
      }

      // optional string des = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_golden;
        break;
      }

      // optional int32 golden = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &golden_)));
          set_has_golden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_bgolden;
        break;
      }

      // optional int32 bgolden = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgolden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgolden_)));
          set_has_bgolden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvistInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  // optional string des = 3;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->des(), output);
  }

  // optional int32 golden = 4;
  if (has_golden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->golden(), output);
  }

  // optional int32 bgolden = 5;
  if (has_bgolden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->bgolden(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvistInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  // optional string des = 3;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->des(), target);
  }

  // optional int32 golden = 4;
  if (has_golden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->golden(), target);
  }

  // optional int32 bgolden = 5;
  if (has_bgolden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->bgolden(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvistInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

    // optional string des = 3;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }

    // optional int32 golden = 4;
    if (has_golden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->golden());
    }

    // optional int32 bgolden = 5;
    if (has_bgolden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgolden());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvistInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvistInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvistInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvistInfo::MergeFrom(const InvistInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
    if (from.has_golden()) {
      set_golden(from.golden());
    }
    if (from.has_bgolden()) {
      set_bgolden(from.bgolden());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvistInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvistInfo::CopyFrom(const InvistInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvistInfo::IsInitialized() const {

  return true;
}

void InvistInfo::Swap(InvistInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(value_, other->value_);
    std::swap(des_, other->des_);
    std::swap(golden_, other->golden_);
    std::swap(bgolden_, other->bgolden_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvistInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvistInfo_descriptor_;
  metadata.reflection = InvistInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Invist::kDesFieldNumber;
const int Invist::kMaxGoldenFieldNumber;
const int Invist::kInfoFieldNumber;
const int Invist::kBeginTimeFieldNumber;
const int Invist::kEndTimeFieldNumber;
const int Invist::kRewardTimeFieldNumber;
const int Invist::kStatusFieldNumber;
const int Invist::kActivitynameFieldNumber;
#endif  // !_MSC_VER

Invist::Invist()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Invist::InitAsDefaultInstance() {
}

Invist::Invist(const Invist& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Invist::SharedCtor() {
  _cached_size_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  maxgolden_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  rewardtime_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Invist::~Invist() {
  SharedDtor();
}

void Invist::SharedDtor() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (this != default_instance_) {
  }
}

void Invist::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Invist::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Invist_descriptor_;
}

const Invist& Invist::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

Invist* Invist::default_instance_ = NULL;

Invist* Invist::New() const {
  return new Invist;
}

void Invist::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
    maxgolden_ = 0;
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    rewardtime_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    if (has_activityname()) {
      if (activityname_ != &::google::protobuf::internal::kEmptyString) {
        activityname_->clear();
      }
    }
  }
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Invist::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string des = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxGolden;
        break;
      }

      // optional int32 maxGolden = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxGolden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxgolden_)));
          set_has_maxgolden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        break;
      }

      // repeated .ActivitiesProto.InvistInfo info = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_info;
        if (input->ExpectTag(32)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rewardTime;
        break;
      }

      // optional int64 rewardTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_status;
        break;
      }

      // optional int32 status = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_activityname;
        break;
      }

      // optional string activityname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activityname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activityname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activityname().data(), this->activityname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Invist::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string des = 1;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->des(), output);
  }

  // optional int32 maxGolden = 2;
  if (has_maxgolden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxgolden(), output);
  }

  // repeated .ActivitiesProto.InvistInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->info(i), output);
  }

  // optional int64 beginTime = 4;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->begintime(), output);
  }

  // optional int64 endTime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->endtime(), output);
  }

  // optional int64 rewardTime = 6;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->rewardtime(), output);
  }

  // optional int32 status = 7;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->status(), output);
  }

  // optional string activityname = 8;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->activityname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Invist::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string des = 1;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->des(), target);
  }

  // optional int32 maxGolden = 2;
  if (has_maxgolden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxgolden(), target);
  }

  // repeated .ActivitiesProto.InvistInfo info = 3;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->info(i), target);
  }

  // optional int64 beginTime = 4;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->begintime(), target);
  }

  // optional int64 endTime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->endtime(), target);
  }

  // optional int64 rewardTime = 6;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->rewardtime(), target);
  }

  // optional int32 status = 7;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->status(), target);
  }

  // optional string activityname = 8;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->activityname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Invist::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string des = 1;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }

    // optional int32 maxGolden = 2;
    if (has_maxgolden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxgolden());
    }

    // optional int64 beginTime = 4;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 endTime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int64 rewardTime = 6;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rewardtime());
    }

    // optional int32 status = 7;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string activityname = 8;
    if (has_activityname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activityname());
    }

  }
  // repeated .ActivitiesProto.InvistInfo info = 3;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Invist::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Invist* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Invist*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Invist::MergeFrom(const Invist& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_des()) {
      set_des(from.des());
    }
    if (from.has_maxgolden()) {
      set_maxgolden(from.maxgolden());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_activityname()) {
      set_activityname(from.activityname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Invist::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Invist::CopyFrom(const Invist& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Invist::IsInitialized() const {

  return true;
}

void Invist::Swap(Invist* other) {
  if (other != this) {
    std::swap(des_, other->des_);
    std::swap(maxgolden_, other->maxgolden_);
    info_.Swap(&other->info_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(status_, other->status_);
    std::swap(activityname_, other->activityname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Invist::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Invist_descriptor_;
  metadata.reflection = Invist_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GeneralTypes::kIndexFieldNumber;
const int GeneralTypes::kDesFieldNumber;
const int GeneralTypes::kValueFieldNumber;
const int GeneralTypes::kItemIdFieldNumber;
const int GeneralTypes::kItemNumFieldNumber;
#endif  // !_MSC_VER

GeneralTypes::GeneralTypes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GeneralTypes::InitAsDefaultInstance() {
}

GeneralTypes::GeneralTypes(const GeneralTypes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GeneralTypes::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GeneralTypes::~GeneralTypes() {
  SharedDtor();
}

void GeneralTypes::SharedDtor() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (this != default_instance_) {
  }
}

void GeneralTypes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GeneralTypes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GeneralTypes_descriptor_;
}

const GeneralTypes& GeneralTypes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

GeneralTypes* GeneralTypes::default_instance_ = NULL;

GeneralTypes* GeneralTypes::New() const {
  return new GeneralTypes;
}

void GeneralTypes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
    value_ = 0;
  }
  item_id_.Clear();
  item_num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GeneralTypes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_des;
        break;
      }

      // optional string des = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_id;
        break;
      }

      // repeated int32 item_id = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_item_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_item_id;
        if (input->ExpectTag(40)) goto parse_item_num;
        break;
      }

      // repeated int32 item_num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_item_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_item_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_item_num;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GeneralTypes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional string des = 2;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->des(), output);
  }

  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  // repeated int32 item_id = 4;
  for (int i = 0; i < this->item_id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->item_id(i), output);
  }

  // repeated int32 item_num = 5;
  for (int i = 0; i < this->item_num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->item_num(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GeneralTypes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional string des = 2;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->des(), target);
  }

  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  // repeated int32 item_id = 4;
  for (int i = 0; i < this->item_id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->item_id(i), target);
  }

  // repeated int32 item_num = 5;
  for (int i = 0; i < this->item_num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->item_num(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GeneralTypes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional string des = 2;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }

    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  // repeated int32 item_id = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_id(i));
    }
    total_size += 1 * this->item_id_size() + data_size;
  }

  // repeated int32 item_num = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->item_num(i));
    }
    total_size += 1 * this->item_num_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GeneralTypes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GeneralTypes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GeneralTypes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GeneralTypes::MergeFrom(const GeneralTypes& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_id_.MergeFrom(from.item_id_);
  item_num_.MergeFrom(from.item_num_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GeneralTypes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GeneralTypes::CopyFrom(const GeneralTypes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GeneralTypes::IsInitialized() const {

  return true;
}

void GeneralTypes::Swap(GeneralTypes* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(des_, other->des_);
    std::swap(value_, other->value_);
    item_id_.Swap(&other->item_id_);
    item_num_.Swap(&other->item_num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GeneralTypes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GeneralTypes_descriptor_;
  metadata.reflection = GeneralTypes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int General::kActivityNameFieldNumber;
const int General::kBeginTimeFieldNumber;
const int General::kEndTimeFieldNumber;
const int General::kRewardTimeFieldNumber;
const int General::kStatusFieldNumber;
const int General::kDesFieldNumber;
const int General::kDataFieldNumber;
#endif  // !_MSC_VER

General::General()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void General::InitAsDefaultInstance() {
}

General::General(const General& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void General::SharedCtor() {
  _cached_size_ = 0;
  activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  rewardtime_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

General::~General() {
  SharedDtor();
}

void General::SharedDtor() {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (this != default_instance_) {
  }
}

void General::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* General::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return General_descriptor_;
}

const General& General::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

General* General::default_instance_ = NULL;

General* General::New() const {
  return new General;
}

void General::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_activityname()) {
      if (activityname_ != &::google::protobuf::internal::kEmptyString) {
        activityname_->clear();
      }
    }
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    rewardtime_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool General::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string activityName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activityname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activityname().data(), this->activityname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewardTime;
        break;
      }

      // optional int64 rewardTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_des;
        break;
      }

      // optional string des = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // repeated .ActivitiesProto.GeneralTypes data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void General::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string activityName = 1;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->activityname(), output);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begintime(), output);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // optional int64 rewardTime = 4;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->rewardtime(), output);
  }

  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional string des = 6;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->des(), output);
  }

  // repeated .ActivitiesProto.GeneralTypes data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* General::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string activityName = 1;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->activityname(), target);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begintime(), target);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // optional int64 rewardTime = 4;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->rewardtime(), target);
  }

  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional string des = 6;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->des(), target);
  }

  // repeated .ActivitiesProto.GeneralTypes data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int General::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string activityName = 1;
    if (has_activityname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activityname());
    }

    // optional int64 beginTime = 2;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int64 rewardTime = 4;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rewardtime());
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string des = 6;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }

  }
  // repeated .ActivitiesProto.GeneralTypes data = 7;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void General::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const General* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const General*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void General::MergeFrom(const General& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityname()) {
      set_activityname(from.activityname());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void General::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void General::CopyFrom(const General& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool General::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void General::Swap(General* other) {
  if (other != this) {
    std::swap(activityname_, other->activityname_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(status_, other->status_);
    std::swap(des_, other->des_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata General::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = General_descriptor_;
  metadata.reflection = General_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelayRechargeInfo::kIndexFieldNumber;
const int RelayRechargeInfo::kItemIdFieldNumber;
const int RelayRechargeInfo::kItemNumFieldNumber;
const int RelayRechargeInfo::kRechargegoldenFieldNumber;
const int RelayRechargeInfo::kRechargepeopleFieldNumber;
#endif  // !_MSC_VER

RelayRechargeInfo::RelayRechargeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelayRechargeInfo::InitAsDefaultInstance() {
}

RelayRechargeInfo::RelayRechargeInfo(const RelayRechargeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelayRechargeInfo::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  rechargegolden_ = 0;
  rechargepeople_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelayRechargeInfo::~RelayRechargeInfo() {
  SharedDtor();
}

void RelayRechargeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RelayRechargeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelayRechargeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelayRechargeInfo_descriptor_;
}

const RelayRechargeInfo& RelayRechargeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

RelayRechargeInfo* RelayRechargeInfo::default_instance_ = NULL;

RelayRechargeInfo* RelayRechargeInfo::New() const {
  return new RelayRechargeInfo;
}

void RelayRechargeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    rechargegolden_ = 0;
    rechargepeople_ = 0;
  }
  itemid_.Clear();
  itemnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelayRechargeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // repeated int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // repeated int32 itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_itemnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        if (input->ExpectTag(32)) goto parse_rechargegolden;
        break;
      }

      // optional int32 rechargegolden = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargegolden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargegolden_)));
          set_has_rechargegolden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rechargepeople;
        break;
      }

      // optional int32 rechargepeople = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargepeople:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargepeople_)));
          set_has_rechargepeople();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelayRechargeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // repeated int32 itemId = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->itemid(i), output);
  }

  // repeated int32 itemNum = 3;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->itemnum(i), output);
  }

  // optional int32 rechargegolden = 4;
  if (has_rechargegolden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->rechargegolden(), output);
  }

  // optional int32 rechargepeople = 5;
  if (has_rechargepeople()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->rechargepeople(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelayRechargeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // repeated int32 itemId = 2;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->itemid(i), target);
  }

  // repeated int32 itemNum = 3;
  for (int i = 0; i < this->itemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->itemnum(i), target);
  }

  // optional int32 rechargegolden = 4;
  if (has_rechargegolden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->rechargegolden(), target);
  }

  // optional int32 rechargepeople = 5;
  if (has_rechargepeople()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->rechargepeople(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelayRechargeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 rechargegolden = 4;
    if (has_rechargegolden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargegolden());
    }

    // optional int32 rechargepeople = 5;
    if (has_rechargepeople()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargepeople());
    }

  }
  // repeated int32 itemId = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  // repeated int32 itemNum = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemnum(i));
    }
    total_size += 1 * this->itemnum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelayRechargeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelayRechargeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelayRechargeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelayRechargeInfo::MergeFrom(const RelayRechargeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  itemnum_.MergeFrom(from.itemnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_rechargegolden()) {
      set_rechargegolden(from.rechargegolden());
    }
    if (from.has_rechargepeople()) {
      set_rechargepeople(from.rechargepeople());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelayRechargeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelayRechargeInfo::CopyFrom(const RelayRechargeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayRechargeInfo::IsInitialized() const {

  return true;
}

void RelayRechargeInfo::Swap(RelayRechargeInfo* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    itemid_.Swap(&other->itemid_);
    itemnum_.Swap(&other->itemnum_);
    std::swap(rechargegolden_, other->rechargegolden_);
    std::swap(rechargepeople_, other->rechargepeople_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelayRechargeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelayRechargeInfo_descriptor_;
  metadata.reflection = RelayRechargeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RelayRecharge::kActivityNameFieldNumber;
const int RelayRecharge::kBeginTimeFieldNumber;
const int RelayRecharge::kEndTimeFieldNumber;
const int RelayRecharge::kRewardTimeFieldNumber;
const int RelayRecharge::kStatusFieldNumber;
const int RelayRecharge::kDesFieldNumber;
const int RelayRecharge::kDataFieldNumber;
#endif  // !_MSC_VER

RelayRecharge::RelayRecharge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RelayRecharge::InitAsDefaultInstance() {
}

RelayRecharge::RelayRecharge(const RelayRecharge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RelayRecharge::SharedCtor() {
  _cached_size_ = 0;
  activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  rewardtime_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RelayRecharge::~RelayRecharge() {
  SharedDtor();
}

void RelayRecharge::SharedDtor() {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (this != default_instance_) {
  }
}

void RelayRecharge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RelayRecharge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RelayRecharge_descriptor_;
}

const RelayRecharge& RelayRecharge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

RelayRecharge* RelayRecharge::default_instance_ = NULL;

RelayRecharge* RelayRecharge::New() const {
  return new RelayRecharge;
}

void RelayRecharge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_activityname()) {
      if (activityname_ != &::google::protobuf::internal::kEmptyString) {
        activityname_->clear();
      }
    }
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    rewardtime_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RelayRecharge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string activityName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activityname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activityname().data(), this->activityname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_rewardTime;
        break;
      }

      // optional int64 rewardTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rewardtime_)));
          set_has_rewardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_des;
        break;
      }

      // optional string des = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data;
        break;
      }

      // repeated .ActivitiesProto.RelayRechargeInfo data = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RelayRecharge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string activityName = 1;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->activityname(), output);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begintime(), output);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // optional int64 rewardTime = 4;
  if (has_rewardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->rewardtime(), output);
  }

  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional string des = 6;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->des(), output);
  }

  // repeated .ActivitiesProto.RelayRechargeInfo data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RelayRecharge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string activityName = 1;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->activityname(), target);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begintime(), target);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // optional int64 rewardTime = 4;
  if (has_rewardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->rewardtime(), target);
  }

  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional string des = 6;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->des(), target);
  }

  // repeated .ActivitiesProto.RelayRechargeInfo data = 7;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RelayRecharge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string activityName = 1;
    if (has_activityname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activityname());
    }

    // optional int64 beginTime = 2;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int64 rewardTime = 4;
    if (has_rewardtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rewardtime());
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string des = 6;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }

  }
  // repeated .ActivitiesProto.RelayRechargeInfo data = 7;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RelayRecharge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RelayRecharge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RelayRecharge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RelayRecharge::MergeFrom(const RelayRecharge& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityname()) {
      set_activityname(from.activityname());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_rewardtime()) {
      set_rewardtime(from.rewardtime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RelayRecharge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RelayRecharge::CopyFrom(const RelayRecharge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RelayRecharge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RelayRecharge::Swap(RelayRecharge* other) {
  if (other != this) {
    std::swap(activityname_, other->activityname_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(rewardtime_, other->rewardtime_);
    std::swap(status_, other->status_);
    std::swap(des_, other->des_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RelayRecharge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RelayRecharge_descriptor_;
  metadata.reflection = RelayRecharge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Compensate::kActivityNameFieldNumber;
const int Compensate::kBeginTimeFieldNumber;
const int Compensate::kEndTimeFieldNumber;
const int Compensate::kAnnounceTimeFieldNumber;
const int Compensate::kStatusFieldNumber;
const int Compensate::kDesFieldNumber;
const int Compensate::kItemIdFieldNumber;
const int Compensate::kItemNumFieldNumber;
#endif  // !_MSC_VER

Compensate::Compensate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Compensate::InitAsDefaultInstance() {
}

Compensate::Compensate(const Compensate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Compensate::SharedCtor() {
  _cached_size_ = 0;
  activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  announcetime_ = GOOGLE_LONGLONG(0);
  status_ = 0;
  des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Compensate::~Compensate() {
  SharedDtor();
}

void Compensate::SharedDtor() {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (this != default_instance_) {
  }
}

void Compensate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Compensate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Compensate_descriptor_;
}

const Compensate& Compensate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

Compensate* Compensate::default_instance_ = NULL;

Compensate* Compensate::New() const {
  return new Compensate;
}

void Compensate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_activityname()) {
      if (activityname_ != &::google::protobuf::internal::kEmptyString) {
        activityname_->clear();
      }
    }
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
    announcetime_ = GOOGLE_LONGLONG(0);
    status_ = 0;
    if (has_des()) {
      if (des_ != &::google::protobuf::internal::kEmptyString) {
        des_->clear();
      }
    }
  }
  itemid_.Clear();
  itemnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Compensate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string activityName = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_activityname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->activityname().data(), this->activityname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_AnnounceTime;
        break;
      }

      // optional int64 AnnounceTime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AnnounceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &announcetime_)));
          set_has_announcetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_status;
        break;
      }

      // optional int32 status = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_des;
        break;
      }

      // optional string des = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_des:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_des()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->des().data(), this->des().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_itemId;
        break;
      }

      // repeated int32 itemId = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_itemId;
        if (input->ExpectTag(64)) goto parse_itemNum;
        break;
      }

      // repeated int32 itemNum = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_itemnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_itemNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Compensate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string activityName = 1;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->activityname(), output);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->begintime(), output);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // optional int64 AnnounceTime = 4;
  if (has_announcetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->announcetime(), output);
  }

  // optional int32 status = 5;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->status(), output);
  }

  // optional string des = 6;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->des(), output);
  }

  // repeated int32 itemId = 7;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->itemid(i), output);
  }

  // repeated int32 itemNum = 8;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->itemnum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Compensate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string activityName = 1;
  if (has_activityname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->activityname().data(), this->activityname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->activityname(), target);
  }

  // optional int64 beginTime = 2;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->begintime(), target);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // optional int64 AnnounceTime = 4;
  if (has_announcetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->announcetime(), target);
  }

  // optional int32 status = 5;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->status(), target);
  }

  // optional string des = 6;
  if (has_des()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->des().data(), this->des().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->des(), target);
  }

  // repeated int32 itemId = 7;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->itemid(i), target);
  }

  // repeated int32 itemNum = 8;
  for (int i = 0; i < this->itemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->itemnum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Compensate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string activityName = 1;
    if (has_activityname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->activityname());
    }

    // optional int64 beginTime = 2;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int64 AnnounceTime = 4;
    if (has_announcetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->announcetime());
    }

    // optional int32 status = 5;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional string des = 6;
    if (has_des()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->des());
    }

  }
  // repeated int32 itemId = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  // repeated int32 itemNum = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemnum(i));
    }
    total_size += 1 * this->itemnum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Compensate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Compensate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Compensate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Compensate::MergeFrom(const Compensate& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  itemnum_.MergeFrom(from.itemnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityname()) {
      set_activityname(from.activityname());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_announcetime()) {
      set_announcetime(from.announcetime());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_des()) {
      set_des(from.des());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Compensate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Compensate::CopyFrom(const Compensate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Compensate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Compensate::Swap(Compensate* other) {
  if (other != this) {
    std::swap(activityname_, other->activityname_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(announcetime_, other->announcetime_);
    std::swap(status_, other->status_);
    std::swap(des_, other->des_);
    itemid_.Swap(&other->itemid_);
    itemnum_.Swap(&other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Compensate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Compensate_descriptor_;
  metadata.reflection = Compensate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToGMActivityState::kCharIDFieldNumber;
const int ToGMActivityState::kListFieldNumber;
#endif  // !_MSC_VER

ToGMActivityState::ToGMActivityState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGMActivityState::InitAsDefaultInstance() {
}

ToGMActivityState::ToGMActivityState(const ToGMActivityState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGMActivityState::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGMActivityState::~ToGMActivityState() {
  SharedDtor();
}

void ToGMActivityState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToGMActivityState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGMActivityState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGMActivityState_descriptor_;
}

const ToGMActivityState& ToGMActivityState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

ToGMActivityState* ToGMActivityState::default_instance_ = NULL;

ToGMActivityState* ToGMActivityState::New() const {
  return new ToGMActivityState;
}

void ToGMActivityState::Clear() {
  charid_.Clear();
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGMActivityState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_charid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_charid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_charID;
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .ActivitiesProto.ActivityStateList list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToGMActivityState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 charID = 1;
  for (int i = 0; i < this->charid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->charid(i), output);
  }

  // repeated .ActivitiesProto.ActivityStateList list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGMActivityState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 charID = 1;
  for (int i = 0; i < this->charid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->charid(i), target);
  }

  // repeated .ActivitiesProto.ActivityStateList list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGMActivityState::ByteSize() const {
  int total_size = 0;

  // repeated int64 charID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->charid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->charid(i));
    }
    total_size += 1 * this->charid_size() + data_size;
  }

  // repeated .ActivitiesProto.ActivityStateList list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGMActivityState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGMActivityState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGMActivityState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGMActivityState::MergeFrom(const ToGMActivityState& from) {
  GOOGLE_CHECK_NE(&from, this);
  charid_.MergeFrom(from.charid_);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGMActivityState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGMActivityState::CopyFrom(const ToGMActivityState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGMActivityState::IsInitialized() const {

  return true;
}

void ToGMActivityState::Swap(ToGMActivityState* other) {
  if (other != this) {
    charid_.Swap(&other->charid_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGMActivityState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGMActivityState_descriptor_;
  metadata.reflection = ToGMActivityState_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityStateList::kStatesFieldNumber;
#endif  // !_MSC_VER

ActivityStateList::ActivityStateList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityStateList::InitAsDefaultInstance() {
}

ActivityStateList::ActivityStateList(const ActivityStateList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityStateList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityStateList::~ActivityStateList() {
  SharedDtor();
}

void ActivityStateList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityStateList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityStateList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityStateList_descriptor_;
}

const ActivityStateList& ActivityStateList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

ActivityStateList* ActivityStateList::default_instance_ = NULL;

ActivityStateList* ActivityStateList::New() const {
  return new ActivityStateList;
}

void ActivityStateList::Clear() {
  states_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityStateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ActivitiesProto.ActivityState states = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_states:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_states()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_states;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityStateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ActivitiesProto.ActivityState states = 1;
  for (int i = 0; i < this->states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->states(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityStateList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ActivitiesProto.ActivityState states = 1;
  for (int i = 0; i < this->states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->states(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityStateList::ByteSize() const {
  int total_size = 0;

  // repeated .ActivitiesProto.ActivityState states = 1;
  total_size += 1 * this->states_size();
  for (int i = 0; i < this->states_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->states(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityStateList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityStateList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityStateList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityStateList::MergeFrom(const ActivityStateList& from) {
  GOOGLE_CHECK_NE(&from, this);
  states_.MergeFrom(from.states_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityStateList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityStateList::CopyFrom(const ActivityStateList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityStateList::IsInitialized() const {

  return true;
}

void ActivityStateList::Swap(ActivityStateList* other) {
  if (other != this) {
    states_.Swap(&other->states_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityStateList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityStateList_descriptor_;
  metadata.reflection = ActivityStateList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityState::kTypeFieldNumber;
const int ActivityState::kFlagFieldNumber;
const int ActivityState::kNumFieldNumber;
#endif  // !_MSC_VER

ActivityState::ActivityState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityState::InitAsDefaultInstance() {
}

ActivityState::ActivityState(const ActivityState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityState::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  flag_ = false;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityState::~ActivityState() {
  SharedDtor();
}

void ActivityState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityState_descriptor_;
}

const ActivityState& ActivityState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  return *default_instance_;
}

ActivityState* ActivityState::default_instance_ = NULL;

ActivityState* ActivityState::New() const {
  return new ActivityState;
}

void ActivityState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    flag_ = false;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityState::MergeFrom(const ActivityState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityState::CopyFrom(const ActivityState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityState::IsInitialized() const {

  return true;
}

void ActivityState::Swap(ActivityState* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(flag_, other->flag_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityState_descriptor_;
  metadata.reflection = ActivityState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ActivitiesProto

// @@protoc_insertion_point(global_scope)
