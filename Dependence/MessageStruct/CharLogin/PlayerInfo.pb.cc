// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/PlayerInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharLogin/PlayerInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PlayerInfo {

namespace {

const ::google::protobuf::Descriptor* PlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaDataInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaDataInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaChallengeRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaChallengeRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* ArenaHistoryReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ArenaHistoryReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RingDBData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RingDBData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SaveTypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveTypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSaveTypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSaveTypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeekQuestItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeekQuestItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeekQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeekQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* NewQuestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NewQuestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActiveQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActiveQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* DailyQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DailyQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClanQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClanQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampQuest_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampQuest_reflection_ = NULL;
const ::google::protobuf::Descriptor* POneTalentSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  POneTalentSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkillInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkillInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BuffInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BuffInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CDInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CDInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChannelCD_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChannelCD_reflection_ = NULL;
const ::google::protobuf::Descriptor* ContainerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ContainerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerTypeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerTypeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipQuickInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipQuickInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreHouseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreHouseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonitorInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonitorInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SettingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SettingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* HorseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HorseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SkinInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SkinInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AttrValue_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AttrValue_reflection_ = NULL;
const ::google::protobuf::Descriptor* QuickContainer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  QuickContainer_reflection_ = NULL;
const ::google::protobuf::Descriptor* WPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* FriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceDiffculty_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceDiffculty_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceVip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceVip_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceInfoTwoDays_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceInfoTwoDays_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrestigeInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrestigeInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrestigeInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrestigeInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PrestigeContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PrestigeContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TitleStatus_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TitleStatus_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestinationInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestinationInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestinationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestinationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DestinationContent_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DestinationContent_reflection_ = NULL;
const ::google::protobuf::Descriptor* SignInInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SignInInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CounterService_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CounterService_reflection_ = NULL;
const ::google::protobuf::Descriptor* CounterServiceList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CounterServiceList_reflection_ = NULL;
const ::google::protobuf::Descriptor* EscortInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EscortInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DanLuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DanLuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PlayerVipInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PlayerVipInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PassivePlayerSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PassivePlayerSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* MagicWeapon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MagicWeapon_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandCJobLucky_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandCJobLucky_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandCJobLucky_CJobItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandCJobLucky_CJobItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RandCJobLucky_CreatureCJob_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RandCJobLucky_CreatureCJob_reflection_ = NULL;
const ::google::protobuf::Descriptor* LucklyTurntable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LucklyTurntable_reflection_ = NULL;
const ::google::protobuf::Descriptor* Activity_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Activity_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityYellowVipReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityYellowVipReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityYellowVipRewardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityYellowVipRewardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineMapInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineMapInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* LineMapInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LineMapInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GirlWarInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GirlWarInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GirlWar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GirlWar_reflection_ = NULL;
const ::google::protobuf::Descriptor* LessInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LessInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoneInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoneInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoneItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoneItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBAchShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAchShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBAchShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBAchShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CampShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CampShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* FestivalInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FestivalInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* festivalItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  festivalItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* MoneyInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MoneyInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ChallengeInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ChallengeInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* HeroInstanceData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  HeroInstanceData_reflection_ = NULL;
const ::google::protobuf::Descriptor* BranchLineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BranchLineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TotalBranchLineInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TotalBranchLineInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientIEInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientIEInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* OnceRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OnceRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GroupInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GroupInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceGroupList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceGroupList_reflection_ = NULL;
const ::google::protobuf::Descriptor* EliteInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EliteInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceEliteList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceEliteList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CauchemarInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CauchemarInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceCauchemarList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceCauchemarList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdvancedInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdvancedInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceAdvancedList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceAdvancedList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseShopInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseShopInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* BaseShopInfoData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BaseShopInfoData_reflection_ = NULL;
const ::google::protobuf::Descriptor* AnswerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AnswerInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharLogin_2fPlayerInfo_2eproto() {
  protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharLogin/PlayerInfo.proto");
  GOOGLE_CHECK(file != NULL);
  PlayerInfo_descriptor_ = file->message_type(0);
  static const int PlayerInfo_offsets_[41] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, bsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, binfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, questinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, mt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, equipquick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, girlwarinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, horse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, danlu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, magicw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, cjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, lucktable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, instancelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, signin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, escort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, playervip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, fashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, vitality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, campshopdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, festivaldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, oncereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, ringdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, groupinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, christmasdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, eliteinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, cauchemarinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, arenadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, challengedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, herodata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, smagic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, heartmagic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, advanced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, baseshopinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, answerinfo_),
  };
  PlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerInfo_descriptor_,
      PlayerInfo::default_instance_,
      PlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerInfo));
  ArenaDataInfo_descriptor_ = file->message_type(1);
  static const int ArenaDataInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaDataInfo, canchallcnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaDataInfo, lastresettime_),
  };
  ArenaDataInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaDataInfo_descriptor_,
      ArenaDataInfo::default_instance_,
      ArenaDataInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaDataInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaDataInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaDataInfo));
  ArenaInfo_descriptor_ = file->message_type(2);
  static const int ArenaInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, combatpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, iswin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, abinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, challengerank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, challengenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, historyreward_),
  };
  ArenaInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaInfo_descriptor_,
      ArenaInfo::default_instance_,
      ArenaInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaInfo));
  ArenaBaseInfo_descriptor_ = file->message_type(3);
  static const int ArenaBaseInfo_offsets_[29] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, clanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, mpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, phyattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, phyattackmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, magicattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, magicattackmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, phydefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, magicdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, hitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, avoidrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, baselucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, crackdownrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, baserte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, magicw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, suitrnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, mainequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, costume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, horse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, clanjob_),
  };
  ArenaBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaBaseInfo_descriptor_,
      ArenaBaseInfo::default_instance_,
      ArenaBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaBaseInfo));
  ArenaChallengeRank_descriptor_ = file->message_type(4);
  static const int ArenaChallengeRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeRank, challengerank_),
  };
  ArenaChallengeRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaChallengeRank_descriptor_,
      ArenaChallengeRank::default_instance_,
      ArenaChallengeRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaChallengeRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaChallengeRank));
  ArenaHistoryReward_descriptor_ = file->message_type(5);
  static const int ArenaHistoryReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaHistoryReward, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaHistoryReward, havareward_),
  };
  ArenaHistoryReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ArenaHistoryReward_descriptor_,
      ArenaHistoryReward::default_instance_,
      ArenaHistoryReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaHistoryReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ArenaHistoryReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ArenaHistoryReward));
  RingDBData_descriptor_ = file->message_type(6);
  static const int RingDBData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingDBData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingDBData, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingDBData, reward_),
  };
  RingDBData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RingDBData_descriptor_,
      RingDBData::default_instance_,
      RingDBData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingDBData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingDBData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RingDBData));
  SaveTypeInfo_descriptor_ = file->message_type(7);
  static const int SaveTypeInfo_offsets_[46] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, bsinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, binfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, questinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, skill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, package_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, storehouse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, equipquick_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, monitor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, horse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, signin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, titles_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, escort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, danlu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, vipinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, magicw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, cjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, lucktable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, destination_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, girlwar_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, fashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, vitality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, campdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, festivaldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, oncereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, ringdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, groupinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, christmasdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, eliteinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, cauchemarinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, arenadata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, challengedata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, herodata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, smagic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, heartmagic_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, advanced_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, baseshopinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, answerinfo_),
  };
  SaveTypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveTypeInfo_descriptor_,
      SaveTypeInfo::default_instance_,
      SaveTypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveTypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveTypeInfo));
  WSaveTypeInfo_descriptor_ = file->message_type(8);
  static const int WSaveTypeInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSaveTypeInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSaveTypeInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSaveTypeInfo, isdel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSaveTypeInfo, friendinfo_),
  };
  WSaveTypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSaveTypeInfo_descriptor_,
      WSaveTypeInfo::default_instance_,
      WSaveTypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSaveTypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSaveTypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSaveTypeInfo));
  BaseInfo_descriptor_ = file->message_type(9);
  static const int BaseInfo_offsets_[84] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, golden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, bindgolden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, deadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, horse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, charhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, facontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, faction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, fajob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, mate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, countryjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, battlecontri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, armyjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, countrycontri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, accounttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, sinvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, acupoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, havetodo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, havetodoaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, activites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, activitesaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, onlinereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, levelreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, historyreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, continueanswer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, rightanswer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, addupgolde_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, clanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, awardranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, antiaddictionstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, antiaddictiononlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, totalonlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, nexttalktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, treasonkingreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, practicetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, pktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, clanicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, loginip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, fashionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, antiaddictionaddtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, couple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, fitch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, weekcontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, curcontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, kingrankflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, envelopecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, maxcangetenvelopecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, attributecleartime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, goldencost_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, openkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, pf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, pfkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, couplename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, mgicweaponpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, gourdexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, pvpflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, clienttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, guide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, rechargetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, challengemoney_),
  };
  BaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseInfo_descriptor_,
      BaseInfo::default_instance_,
      BaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseInfo));
  BattleInfo_descriptor_ = file->message_type(10);
  static const int BattleInfo_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, mpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, forcemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, cleverpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, cleverair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, physicalpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, patience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, pkcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, powermax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, phyattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, phyattackmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, phydefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, magicattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, magicattackmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, magicdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, hitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, avoidrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, baselucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, crackdownrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, baserte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, movespeed_),
  };
  BattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BattleInfo_descriptor_,
      BattleInfo::default_instance_,
      BattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BattleInfo));
  QuestInfo_descriptor_ = file->message_type(11);
  static const int QuestInfo_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, daily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, clan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, doclantime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, dailytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, yesterdaydaily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, yesterdayclan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, allmaintaskhadcompflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, ccampquest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, docamptime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, questguideid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, weekquest_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, yesterdaycamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, yesterdayweektimes_),
  };
  QuestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuestInfo_descriptor_,
      QuestInfo::default_instance_,
      QuestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuestInfo));
  WeekQuestItem_descriptor_ = file->message_type(12);
  static const int WeekQuestItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuestItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuestItem, counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuestItem, bindtype_),
  };
  WeekQuestItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeekQuestItem_descriptor_,
      WeekQuestItem::default_instance_,
      WeekQuestItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuestItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuestItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeekQuestItem));
  WeekQuest_descriptor_ = file->message_type(13);
  static const int WeekQuest_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuest, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuest, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuest, rewardids_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuest, endrewardids_),
  };
  WeekQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeekQuest_descriptor_,
      WeekQuest::default_instance_,
      WeekQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeekQuest));
  NewQuestInfo_descriptor_ = file->message_type(14);
  static const int NewQuestInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewQuestInfo, qactive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewQuestInfo, qdaily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewQuestInfo, qclan_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewQuestInfo, yesterdaydaily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewQuestInfo, yesterdayclan_),
  };
  NewQuestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NewQuestInfo_descriptor_,
      NewQuestInfo::default_instance_,
      NewQuestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewQuestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NewQuestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NewQuestInfo));
  ActiveQuest_descriptor_ = file->message_type(15);
  static const int ActiveQuest_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveQuest, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveQuest, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveQuest, ftarget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveQuest, starget_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveQuest, numlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveQuest, rewardlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveQuest, times_),
  };
  ActiveQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActiveQuest_descriptor_,
      ActiveQuest::default_instance_,
      ActiveQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActiveQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActiveQuest));
  DailyQuest_descriptor_ = file->message_type(16);
  static const int DailyQuest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, numlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, rewardlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, numcoefficient_),
  };
  DailyQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DailyQuest_descriptor_,
      DailyQuest::default_instance_,
      DailyQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DailyQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DailyQuest));
  ClanQuest_descriptor_ = file->message_type(17);
  static const int ClanQuest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanQuest, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanQuest, numlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanQuest, rewardlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanQuest, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanQuest, numcoefficient_),
  };
  ClanQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClanQuest_descriptor_,
      ClanQuest::default_instance_,
      ClanQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClanQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClanQuest));
  CampQuest_descriptor_ = file->message_type(18);
  static const int CampQuest_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampQuest, questid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampQuest, numlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampQuest, rewardlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampQuest, times_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampQuest, numcoefficient_),
  };
  CampQuest_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampQuest_descriptor_,
      CampQuest::default_instance_,
      CampQuest_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampQuest, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampQuest, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampQuest));
  POneTalentSkill_descriptor_ = file->message_type(19);
  static const int POneTalentSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POneTalentSkill, talentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POneTalentSkill, skilllist_),
  };
  POneTalentSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      POneTalentSkill_descriptor_,
      POneTalentSkill::default_instance_,
      POneTalentSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POneTalentSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POneTalentSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(POneTalentSkill));
  SkillInfo_descriptor_ = file->message_type(20);
  static const int SkillInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, skilldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, curtalent_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, clanskills_),
  };
  SkillInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkillInfo_descriptor_,
      SkillInfo::default_instance_,
      SkillInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkillInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkillInfo));
  BuffInfo_descriptor_ = file->message_type(21);
  static const int BuffInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, offtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, isdel_),
  };
  BuffInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BuffInfo_descriptor_,
      BuffInfo::default_instance_,
      BuffInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BuffInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BuffInfo));
  CDInfo_descriptor_ = file->message_type(22);
  static const int CDInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDInfo, cd_),
  };
  CDInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CDInfo_descriptor_,
      CDInfo::default_instance_,
      CDInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CDInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CDInfo));
  ChannelCD_descriptor_ = file->message_type(23);
  static const int ChannelCD_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelCD, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelCD, endtime_),
  };
  ChannelCD_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChannelCD_descriptor_,
      ChannelCD::default_instance_,
      ChannelCD_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelCD, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChannelCD, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChannelCD));
  ContainerInfo_descriptor_ = file->message_type(24);
  static const int ContainerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, package_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, storehouse_),
  };
  ContainerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ContainerInfo_descriptor_,
      ContainerInfo::default_instance_,
      ContainerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ContainerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ContainerInfo));
  PlayerTypeInfo_descriptor_ = file->message_type(25);
  static const int PlayerTypeInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTypeInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTypeInfo, horse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTypeInfo, danlu_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTypeInfo, magicw_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTypeInfo, cjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTypeInfo, lucktable_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTypeInfo, activity_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTypeInfo, destination_),
  };
  PlayerTypeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerTypeInfo_descriptor_,
      PlayerTypeInfo::default_instance_,
      PlayerTypeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTypeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerTypeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerTypeInfo));
  EquipQuickInfo_descriptor_ = file->message_type(26);
  static const int EquipQuickInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipQuickInfo, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipQuickInfo, quick_),
  };
  EquipQuickInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipQuickInfo_descriptor_,
      EquipQuickInfo::default_instance_,
      EquipQuickInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipQuickInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipQuickInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipQuickInfo));
  PackageInfo_descriptor_ = file->message_type(27);
  static const int PackageInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfo, package_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfo, time_),
  };
  PackageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageInfo_descriptor_,
      PackageInfo::default_instance_,
      PackageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageInfo));
  StoreHouseInfo_descriptor_ = file->message_type(28);
  static const int StoreHouseInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHouseInfo, storehouse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHouseInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHouseInfo, time_),
  };
  StoreHouseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreHouseInfo_descriptor_,
      StoreHouseInfo::default_instance_,
      StoreHouseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHouseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHouseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreHouseInfo));
  MonitorInfo_descriptor_ = file->message_type(29);
  static const int MonitorInfo_offsets_[21] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, attackskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, ispickequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, ispickstone_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, ispickconsume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, ispickmoney_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, ispickother_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, isgroup_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, assistskill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, isbuyhp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, hpbuytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, isbuymp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, mpbuytype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, isrevalsit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, isuseexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, hpuse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, mpuse_),
  };
  MonitorInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonitorInfo_descriptor_,
      MonitorInfo::default_instance_,
      MonitorInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonitorInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonitorInfo));
  SettingInfo_descriptor_ = file->message_type(30);
  static const int SettingInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingInfo, value_),
  };
  SettingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SettingInfo_descriptor_,
      SettingInfo::default_instance_,
      SettingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SettingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SettingInfo));
  HorseInfo_descriptor_ = file->message_type(31);
  static const int HorseInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseInfo, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseInfo, skinidlist_),
  };
  HorseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HorseInfo_descriptor_,
      HorseInfo::default_instance_,
      HorseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HorseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HorseInfo));
  SkinInfo_descriptor_ = file->message_type(32);
  static const int SkinInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinInfo, skinid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinInfo, endtime_),
  };
  SkinInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SkinInfo_descriptor_,
      SkinInfo::default_instance_,
      SkinInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SkinInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SkinInfo));
  ItemInfo_descriptor_ = file->message_type(33);
  static const int ItemInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, newattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, stoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, inlaypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, refineattrlv_),
  };
  ItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ItemInfo_descriptor_,
      ItemInfo::default_instance_,
      ItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ItemInfo));
  AttrValue_descriptor_ = file->message_type(34);
  static const int AttrValue_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrValue, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrValue, value_),
  };
  AttrValue_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AttrValue_descriptor_,
      AttrValue::default_instance_,
      AttrValue_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrValue, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AttrValue, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AttrValue));
  QuickContainer_descriptor_ = file->message_type(35);
  static const int QuickContainer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickContainer, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickContainer, value_),
  };
  QuickContainer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      QuickContainer_descriptor_,
      QuickContainer::default_instance_,
      QuickContainer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickContainer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(QuickContainer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(QuickContainer));
  WPlayerInfo_descriptor_ = file->message_type(36);
  static const int WPlayerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPlayerInfo, friendlist_),
  };
  WPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WPlayerInfo_descriptor_,
      WPlayerInfo::default_instance_,
      WPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WPlayerInfo));
  FriendInfoList_descriptor_ = file->message_type(37);
  static const int FriendInfoList_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoList, friends_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoList, inwho_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoList, m_receivecounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoList, m_sendcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoList, m_resettime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoList, m_marryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoList, m_invited_),
  };
  FriendInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendInfoList_descriptor_,
      FriendInfoList::default_instance_,
      FriendInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendInfoList));
  FriendInfo_descriptor_ = file->message_type(38);
  static const int FriendInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, friendname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, hatred_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, cohesion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, fighting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, sex_),
  };
  FriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FriendInfo_descriptor_,
      FriendInfo::default_instance_,
      FriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FriendInfo));
  InstanceInfoList_descriptor_ = file->message_type(39);
  static const int InstanceInfoList_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfoList, diffcultyinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfoList, vipinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfoList, expinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfoList, moneyinfo_),
  };
  InstanceInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceInfoList_descriptor_,
      InstanceInfoList::default_instance_,
      InstanceInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceInfoList));
  InstanceDiffculty_descriptor_ = file->message_type(40);
  static const int InstanceDiffculty_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDiffculty, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDiffculty, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDiffculty, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDiffculty, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDiffculty, reset_),
  };
  InstanceDiffculty_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceDiffculty_descriptor_,
      InstanceDiffculty::default_instance_,
      InstanceDiffculty_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDiffculty, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceDiffculty, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceDiffculty));
  InstanceVip_descriptor_ = file->message_type(41);
  static const int InstanceVip_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceVip, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceVip, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceVip, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceVip, time_),
  };
  InstanceVip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceVip_descriptor_,
      InstanceVip::default_instance_,
      InstanceVip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceVip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceVip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceVip));
  InstanceInfoTwoDays_descriptor_ = file->message_type(42);
  static const int InstanceInfoTwoDays_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfoTwoDays, todayinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfoTwoDays, yesterdayinfo_),
  };
  InstanceInfoTwoDays_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceInfoTwoDays_descriptor_,
      InstanceInfoTwoDays::default_instance_,
      InstanceInfoTwoDays_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfoTwoDays, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceInfoTwoDays, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceInfoTwoDays));
  PrestigeInfoList_descriptor_ = file->message_type(43);
  static const int PrestigeInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrestigeInfoList, info_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrestigeInfoList, shop_),
  };
  PrestigeInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrestigeInfoList_descriptor_,
      PrestigeInfoList::default_instance_,
      PrestigeInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrestigeInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrestigeInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrestigeInfoList));
  PrestigeInfo_descriptor_ = file->message_type(44);
  static const int PrestigeInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrestigeInfo, prestigeinfos_),
  };
  PrestigeInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrestigeInfo_descriptor_,
      PrestigeInfo::default_instance_,
      PrestigeInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrestigeInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrestigeInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrestigeInfo));
  PrestigeContent_descriptor_ = file->message_type(45);
  static const int PrestigeContent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrestigeContent, prestigetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrestigeContent, prestigeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrestigeContent, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrestigeContent, iscomplete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrestigeContent, hadget_),
  };
  PrestigeContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PrestigeContent_descriptor_,
      PrestigeContent::default_instance_,
      PrestigeContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrestigeContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PrestigeContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PrestigeContent));
  TitleInfoList_descriptor_ = file->message_type(46);
  static const int TitleInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfoList, info_),
  };
  TitleInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleInfoList_descriptor_,
      TitleInfoList::default_instance_,
      TitleInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleInfoList));
  TitleInfo_descriptor_ = file->message_type(47);
  static const int TitleInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, titleinfo_),
  };
  TitleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleInfo_descriptor_,
      TitleInfo::default_instance_,
      TitleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleInfo));
  TitleStatus_descriptor_ = file->message_type(48);
  static const int TitleStatus_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleStatus, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleStatus, titlestatus_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleStatus, titleactive_),
  };
  TitleStatus_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TitleStatus_descriptor_,
      TitleStatus::default_instance_,
      TitleStatus_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleStatus, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TitleStatus, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TitleStatus));
  DestinationInfoList_descriptor_ = file->message_type(49);
  static const int DestinationInfoList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationInfoList, info_),
  };
  DestinationInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DestinationInfoList_descriptor_,
      DestinationInfoList::default_instance_,
      DestinationInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DestinationInfoList));
  DestinationInfo_descriptor_ = file->message_type(50);
  static const int DestinationInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationInfo, destinationinfos_),
  };
  DestinationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DestinationInfo_descriptor_,
      DestinationInfo::default_instance_,
      DestinationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DestinationInfo));
  DestinationContent_descriptor_ = file->message_type(51);
  static const int DestinationContent_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationContent, destinationid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationContent, destinationtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationContent, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationContent, iscomplete_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationContent, hadget_),
  };
  DestinationContent_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DestinationContent_descriptor_,
      DestinationContent::default_instance_,
      DestinationContent_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationContent, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DestinationContent, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DestinationContent));
  SignInInfo_descriptor_ = file->message_type(52);
  static const int SignInInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInInfo, signin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInInfo, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInInfo, totallogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInInfo, totalloginreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInInfo, firstchargeoverflag_),
  };
  SignInInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SignInInfo_descriptor_,
      SignInInfo::default_instance_,
      SignInInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SignInInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SignInInfo));
  CounterService_descriptor_ = file->message_type(53);
  static const int CounterService_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterService, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterService, num_),
  };
  CounterService_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CounterService_descriptor_,
      CounterService::default_instance_,
      CounterService_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterService, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterService, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CounterService));
  CounterServiceList_descriptor_ = file->message_type(54);
  static const int CounterServiceList_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterServiceList, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterServiceList, yesterdaycounter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterServiceList, lastresettime_),
  };
  CounterServiceList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CounterServiceList_descriptor_,
      CounterServiceList::default_instance_,
      CounterServiceList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterServiceList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CounterServiceList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CounterServiceList));
  EscortInfo_descriptor_ = file->message_type(55);
  static const int EscortInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortInfo, line_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortInfo, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortInfo, robtimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortInfo, lefttimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortInfo, speedlefttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortInfo, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortInfo, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortInfo, rewardexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortInfo, rewardmoney_),
  };
  EscortInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EscortInfo_descriptor_,
      EscortInfo::default_instance_,
      EscortInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EscortInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EscortInfo));
  DanLuInfo_descriptor_ = file->message_type(56);
  static const int DanLuInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanLuInfo, danluid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanLuInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanLuInfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanLuInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanLuInfo, producenum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanLuInfo, itempos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanLuInfo, itemnum_),
  };
  DanLuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DanLuInfo_descriptor_,
      DanLuInfo::default_instance_,
      DanLuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanLuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanLuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DanLuInfo));
  PlayerVipInfo_descriptor_ = file->message_type(57);
  static const int PlayerVipInfo_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipInfo, giftinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipInfo, vipaddupgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipInfo, endtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipInfo, day_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipInfo, maxday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipInfo, lasttime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipInfo, vipcardlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipInfo, vipcardbegintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipInfo, validesecs_),
  };
  PlayerVipInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PlayerVipInfo_descriptor_,
      PlayerVipInfo::default_instance_,
      PlayerVipInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PlayerVipInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PlayerVipInfo));
  PassivePlayerSkill_descriptor_ = file->message_type(58);
  static const int PassivePlayerSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassivePlayerSkill, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassivePlayerSkill, skillid_),
  };
  PassivePlayerSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PassivePlayerSkill_descriptor_,
      PassivePlayerSkill::default_instance_,
      PassivePlayerSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassivePlayerSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PassivePlayerSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PassivePlayerSkill));
  MagicWeapon_descriptor_ = file->message_type(59);
  static const int MagicWeapon_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicWeapon, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicWeapon, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicWeapon, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicWeapon, advancetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicWeapon, tempid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicWeapon, needtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicWeapon, passiveskilllist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicWeapon, firstreflush_),
  };
  MagicWeapon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MagicWeapon_descriptor_,
      MagicWeapon::default_instance_,
      MagicWeapon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicWeapon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MagicWeapon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MagicWeapon));
  RandCJobLucky_descriptor_ = file->message_type(60);
  static const int RandCJobLucky_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCJobLucky, package_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCJobLucky, exampackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCJobLucky, rolepackage_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCJobLucky, jobexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCJobLucky, randnum_),
  };
  RandCJobLucky_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandCJobLucky_descriptor_,
      RandCJobLucky::default_instance_,
      RandCJobLucky_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCJobLucky, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCJobLucky, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandCJobLucky));
  RandCJobLucky_CJobItem_descriptor_ = RandCJobLucky_descriptor_->nested_type(0);
  static const int RandCJobLucky_CJobItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCJobLucky_CJobItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCJobLucky_CJobItem, exp_),
  };
  RandCJobLucky_CJobItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandCJobLucky_CJobItem_descriptor_,
      RandCJobLucky_CJobItem::default_instance_,
      RandCJobLucky_CJobItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCJobLucky_CJobItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCJobLucky_CJobItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandCJobLucky_CJobItem));
  RandCJobLucky_CreatureCJob_descriptor_ = RandCJobLucky_descriptor_->nested_type(1);
  static const int RandCJobLucky_CreatureCJob_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCJobLucky_CreatureCJob, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCJobLucky_CreatureCJob, item_),
  };
  RandCJobLucky_CreatureCJob_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RandCJobLucky_CreatureCJob_descriptor_,
      RandCJobLucky_CreatureCJob::default_instance_,
      RandCJobLucky_CreatureCJob_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCJobLucky_CreatureCJob, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RandCJobLucky_CreatureCJob, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RandCJobLucky_CreatureCJob));
  LucklyTurntable_descriptor_ = file->message_type(61);
  static const int LucklyTurntable_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LucklyTurntable, tm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LucklyTurntable, reawidlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LucklyTurntable, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LucklyTurntable, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LucklyTurntable, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LucklyTurntable, bindtype_),
  };
  LucklyTurntable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LucklyTurntable_descriptor_,
      LucklyTurntable::default_instance_,
      LucklyTurntable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LucklyTurntable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LucklyTurntable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LucklyTurntable));
  Activity_descriptor_ = file->message_type(62);
  static const int Activity_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, curnode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, preward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, pastnode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, swapstime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, vipreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, treasonkingbesttime_),
  };
  Activity_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Activity_descriptor_,
      Activity::default_instance_,
      Activity_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Activity, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Activity));
  ActivityYellowVipReward_descriptor_ = file->message_type(63);
  static const int ActivityYellowVipReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityYellowVipReward, activityid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityYellowVipReward, rewardlist_),
  };
  ActivityYellowVipReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityYellowVipReward_descriptor_,
      ActivityYellowVipReward::default_instance_,
      ActivityYellowVipReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityYellowVipReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityYellowVipReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityYellowVipReward));
  ActivityYellowVipRewardList_descriptor_ = file->message_type(64);
  static const int ActivityYellowVipRewardList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityYellowVipRewardList, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityYellowVipRewardList, value_),
  };
  ActivityYellowVipRewardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityYellowVipRewardList_descriptor_,
      ActivityYellowVipRewardList::default_instance_,
      ActivityYellowVipRewardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityYellowVipRewardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityYellowVipRewardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityYellowVipRewardList));
  LineMapInfoList_descriptor_ = file->message_type(65);
  static const int LineMapInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineMapInfoList, lineinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineMapInfoList, mysecenceid_),
  };
  LineMapInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineMapInfoList_descriptor_,
      LineMapInfoList::default_instance_,
      LineMapInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineMapInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineMapInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineMapInfoList));
  LineMapInfo_descriptor_ = file->message_type(66);
  static const int LineMapInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineMapInfo, scenceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineMapInfo, playernum_),
  };
  LineMapInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LineMapInfo_descriptor_,
      LineMapInfo::default_instance_,
      LineMapInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineMapInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LineMapInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LineMapInfo));
  GirlWarInfo_descriptor_ = file->message_type(67);
  static const int GirlWarInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWarInfo, girlwar_),
  };
  GirlWarInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GirlWarInfo_descriptor_,
      GirlWarInfo::default_instance_,
      GirlWarInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWarInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWarInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GirlWarInfo));
  GirlWar_descriptor_ = file->message_type(68);
  static const int GirlWar_offsets_[26] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, phyattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, phyattackmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, magicattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, magicattackmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, phydefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, hitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, avoidrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, crit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, ung_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, deadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, starrank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, quality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, skill1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, skill2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, skill3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, iswar_),
  };
  GirlWar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GirlWar_descriptor_,
      GirlWar::default_instance_,
      GirlWar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GirlWar));
  LessInfo_descriptor_ = file->message_type(69);
  static const int LessInfo_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessInfo, instancelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessInfo, signin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessInfo, counter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessInfo, escort_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessInfo, playervip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessInfo, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessInfo, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessInfo, fashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessInfo, vitality_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessInfo, campshopdata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessInfo, festivaldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessInfo, info_),
  };
  LessInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LessInfo_descriptor_,
      LessInfo::default_instance_,
      LessInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LessInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LessInfo));
  StoneInfo_descriptor_ = file->message_type(70);
  static const int StoneInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInfo, item_),
  };
  StoneInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoneInfo_descriptor_,
      StoneInfo::default_instance_,
      StoneInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoneInfo));
  StoneItem_descriptor_ = file->message_type(71);
  static const int StoneItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneItem, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneItem, stoneid_),
  };
  StoneItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoneItem_descriptor_,
      StoneItem::default_instance_,
      StoneItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoneItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoneItem));
  DBAchShopInfo_descriptor_ = file->message_type(72);
  static const int DBAchShopInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAchShopInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAchShopInfo, item_),
  };
  DBAchShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBAchShopInfo_descriptor_,
      DBAchShopInfo::default_instance_,
      DBAchShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAchShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAchShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBAchShopInfo));
  DBAchShopItem_descriptor_ = file->message_type(73);
  static const int DBAchShopItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAchShopItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAchShopItem, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAchShopItem, goodsid_),
  };
  DBAchShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBAchShopItem_descriptor_,
      DBAchShopItem::default_instance_,
      DBAchShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAchShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBAchShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBAchShopItem));
  CampShopInfo_descriptor_ = file->message_type(74);
  static const int CampShopInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampShopInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampShopInfo, item_),
  };
  CampShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampShopInfo_descriptor_,
      CampShopInfo::default_instance_,
      CampShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampShopInfo));
  CampShopItem_descriptor_ = file->message_type(75);
  static const int CampShopItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampShopItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampShopItem, nums_),
  };
  CampShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CampShopItem_descriptor_,
      CampShopItem::default_instance_,
      CampShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CampShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CampShopItem));
  FestivalInfo_descriptor_ = file->message_type(76);
  static const int FestivalInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalInfo, item_),
  };
  FestivalInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FestivalInfo_descriptor_,
      FestivalInfo::default_instance_,
      FestivalInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FestivalInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FestivalInfo));
  festivalItem_descriptor_ = file->message_type(77);
  static const int festivalItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalItem, nums_),
  };
  festivalItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      festivalItem_descriptor_,
      festivalItem::default_instance_,
      festivalItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(festivalItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(festivalItem));
  MoneyInstance_descriptor_ = file->message_type(78);
  static const int MoneyInstance_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstance, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstance, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstance, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstance, buytimes_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstance, reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstance, updatetime_),
  };
  MoneyInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MoneyInstance_descriptor_,
      MoneyInstance::default_instance_,
      MoneyInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MoneyInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MoneyInstance));
  ChallengeInstance_descriptor_ = file->message_type(79);
  static const int ChallengeInstance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeInstance, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeInstance, maxlayer_),
  };
  ChallengeInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ChallengeInstance_descriptor_,
      ChallengeInstance::default_instance_,
      ChallengeInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ChallengeInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ChallengeInstance));
  HeroInstanceData_descriptor_ = file->message_type(80);
  static const int HeroInstanceData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInstanceData, layer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInstanceData, fetchs_),
  };
  HeroInstanceData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      HeroInstanceData_descriptor_,
      HeroInstanceData::default_instance_,
      HeroInstanceData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInstanceData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(HeroInstanceData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(HeroInstanceData));
  BranchLineInfo_descriptor_ = file->message_type(81);
  static const int BranchLineInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchLineInfo, info_),
  };
  BranchLineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BranchLineInfo_descriptor_,
      BranchLineInfo::default_instance_,
      BranchLineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchLineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BranchLineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BranchLineInfo));
  TotalBranchLineInfo_descriptor_ = file->message_type(82);
  static const int TotalBranchLineInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalBranchLineInfo, list_),
  };
  TotalBranchLineInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TotalBranchLineInfo_descriptor_,
      TotalBranchLineInfo::default_instance_,
      TotalBranchLineInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalBranchLineInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TotalBranchLineInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TotalBranchLineInfo));
  ClientIEInfo_descriptor_ = file->message_type(83);
  static const int ClientIEInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientIEInfo, info_),
  };
  ClientIEInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientIEInfo_descriptor_,
      ClientIEInfo::default_instance_,
      ClientIEInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientIEInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientIEInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientIEInfo));
  OnceRewardInfo_descriptor_ = file->message_type(84);
  static const int OnceRewardInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnceRewardInfo, microrewardflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnceRewardInfo, firstchargeoverflag_),
  };
  OnceRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OnceRewardInfo_descriptor_,
      OnceRewardInfo::default_instance_,
      OnceRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnceRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OnceRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OnceRewardInfo));
  GroupInstance_descriptor_ = file->message_type(85);
  static const int GroupInstance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInstance, timereset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInstance, grouplist_),
  };
  GroupInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GroupInstance_descriptor_,
      GroupInstance::default_instance_,
      GroupInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GroupInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GroupInstance));
  InstanceGroupList_descriptor_ = file->message_type(86);
  static const int InstanceGroupList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupList, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupList, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupList, vipnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupList, buynum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupList, pass_),
  };
  InstanceGroupList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceGroupList_descriptor_,
      InstanceGroupList::default_instance_,
      InstanceGroupList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceGroupList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceGroupList));
  EliteInstance_descriptor_ = file->message_type(87);
  static const int EliteInstance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteInstance, list_),
  };
  EliteInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EliteInstance_descriptor_,
      EliteInstance::default_instance_,
      EliteInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EliteInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EliteInstance));
  InstanceEliteList_descriptor_ = file->message_type(88);
  static const int InstanceEliteList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceEliteList, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceEliteList, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceEliteList, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceEliteList, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceEliteList, reset_),
  };
  InstanceEliteList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceEliteList_descriptor_,
      InstanceEliteList::default_instance_,
      InstanceEliteList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceEliteList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceEliteList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceEliteList));
  CauchemarInstance_descriptor_ = file->message_type(89);
  static const int CauchemarInstance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CauchemarInstance, list_),
  };
  CauchemarInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CauchemarInstance_descriptor_,
      CauchemarInstance::default_instance_,
      CauchemarInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CauchemarInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CauchemarInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CauchemarInstance));
  InstanceCauchemarList_descriptor_ = file->message_type(90);
  static const int InstanceCauchemarList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCauchemarList, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCauchemarList, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCauchemarList, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCauchemarList, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCauchemarList, reset_),
  };
  InstanceCauchemarList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceCauchemarList_descriptor_,
      InstanceCauchemarList::default_instance_,
      InstanceCauchemarList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCauchemarList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceCauchemarList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceCauchemarList));
  AdvancedInstance_descriptor_ = file->message_type(91);
  static const int AdvancedInstance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedInstance, list_),
  };
  AdvancedInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdvancedInstance_descriptor_,
      AdvancedInstance::default_instance_,
      AdvancedInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdvancedInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdvancedInstance));
  InstanceAdvancedList_descriptor_ = file->message_type(92);
  static const int InstanceAdvancedList_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceAdvancedList, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceAdvancedList, pass_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceAdvancedList, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceAdvancedList, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceAdvancedList, reset_),
  };
  InstanceAdvancedList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceAdvancedList_descriptor_,
      InstanceAdvancedList::default_instance_,
      InstanceAdvancedList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceAdvancedList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceAdvancedList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceAdvancedList));
  BaseShopInfo_descriptor_ = file->message_type(93);
  static const int BaseShopInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseShopInfo, flushtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseShopInfo, list_),
  };
  BaseShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseShopInfo_descriptor_,
      BaseShopInfo::default_instance_,
      BaseShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseShopInfo));
  BaseShopInfoList_descriptor_ = file->message_type(94);
  static const int BaseShopInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseShopInfoList, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseShopInfoList, data_),
  };
  BaseShopInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseShopInfoList_descriptor_,
      BaseShopInfoList::default_instance_,
      BaseShopInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseShopInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseShopInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseShopInfoList));
  BaseShopInfoData_descriptor_ = file->message_type(95);
  static const int BaseShopInfoData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseShopInfoData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseShopInfoData, nums_),
  };
  BaseShopInfoData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BaseShopInfoData_descriptor_,
      BaseShopInfoData::default_instance_,
      BaseShopInfoData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseShopInfoData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BaseShopInfoData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BaseShopInfoData));
  AnswerInfo_descriptor_ = file->message_type(96);
  static const int AnswerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerInfo, currentindex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerInfo, currenttitleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerInfo, rightcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerInfo, wrongcounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerInfo, titleanswerids_),
  };
  AnswerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AnswerInfo_descriptor_,
      AnswerInfo::default_instance_,
      AnswerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AnswerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AnswerInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharLogin_2fPlayerInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerInfo_descriptor_, &PlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaDataInfo_descriptor_, &ArenaDataInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaInfo_descriptor_, &ArenaInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaBaseInfo_descriptor_, &ArenaBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaChallengeRank_descriptor_, &ArenaChallengeRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ArenaHistoryReward_descriptor_, &ArenaHistoryReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RingDBData_descriptor_, &RingDBData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveTypeInfo_descriptor_, &SaveTypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSaveTypeInfo_descriptor_, &WSaveTypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseInfo_descriptor_, &BaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BattleInfo_descriptor_, &BattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuestInfo_descriptor_, &QuestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeekQuestItem_descriptor_, &WeekQuestItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeekQuest_descriptor_, &WeekQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NewQuestInfo_descriptor_, &NewQuestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActiveQuest_descriptor_, &ActiveQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DailyQuest_descriptor_, &DailyQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClanQuest_descriptor_, &ClanQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampQuest_descriptor_, &CampQuest::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    POneTalentSkill_descriptor_, &POneTalentSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkillInfo_descriptor_, &SkillInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BuffInfo_descriptor_, &BuffInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CDInfo_descriptor_, &CDInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChannelCD_descriptor_, &ChannelCD::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ContainerInfo_descriptor_, &ContainerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerTypeInfo_descriptor_, &PlayerTypeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipQuickInfo_descriptor_, &EquipQuickInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageInfo_descriptor_, &PackageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreHouseInfo_descriptor_, &StoreHouseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonitorInfo_descriptor_, &MonitorInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SettingInfo_descriptor_, &SettingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HorseInfo_descriptor_, &HorseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SkinInfo_descriptor_, &SkinInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ItemInfo_descriptor_, &ItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AttrValue_descriptor_, &AttrValue::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    QuickContainer_descriptor_, &QuickContainer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WPlayerInfo_descriptor_, &WPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendInfoList_descriptor_, &FriendInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FriendInfo_descriptor_, &FriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceInfoList_descriptor_, &InstanceInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceDiffculty_descriptor_, &InstanceDiffculty::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceVip_descriptor_, &InstanceVip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceInfoTwoDays_descriptor_, &InstanceInfoTwoDays::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrestigeInfoList_descriptor_, &PrestigeInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrestigeInfo_descriptor_, &PrestigeInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PrestigeContent_descriptor_, &PrestigeContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleInfoList_descriptor_, &TitleInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleInfo_descriptor_, &TitleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TitleStatus_descriptor_, &TitleStatus::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DestinationInfoList_descriptor_, &DestinationInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DestinationInfo_descriptor_, &DestinationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DestinationContent_descriptor_, &DestinationContent::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SignInInfo_descriptor_, &SignInInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CounterService_descriptor_, &CounterService::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CounterServiceList_descriptor_, &CounterServiceList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EscortInfo_descriptor_, &EscortInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DanLuInfo_descriptor_, &DanLuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PlayerVipInfo_descriptor_, &PlayerVipInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PassivePlayerSkill_descriptor_, &PassivePlayerSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MagicWeapon_descriptor_, &MagicWeapon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandCJobLucky_descriptor_, &RandCJobLucky::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandCJobLucky_CJobItem_descriptor_, &RandCJobLucky_CJobItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RandCJobLucky_CreatureCJob_descriptor_, &RandCJobLucky_CreatureCJob::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LucklyTurntable_descriptor_, &LucklyTurntable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Activity_descriptor_, &Activity::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityYellowVipReward_descriptor_, &ActivityYellowVipReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityYellowVipRewardList_descriptor_, &ActivityYellowVipRewardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineMapInfoList_descriptor_, &LineMapInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LineMapInfo_descriptor_, &LineMapInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GirlWarInfo_descriptor_, &GirlWarInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GirlWar_descriptor_, &GirlWar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LessInfo_descriptor_, &LessInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoneInfo_descriptor_, &StoneInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoneItem_descriptor_, &StoneItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBAchShopInfo_descriptor_, &DBAchShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBAchShopItem_descriptor_, &DBAchShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampShopInfo_descriptor_, &CampShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CampShopItem_descriptor_, &CampShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FestivalInfo_descriptor_, &FestivalInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    festivalItem_descriptor_, &festivalItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MoneyInstance_descriptor_, &MoneyInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ChallengeInstance_descriptor_, &ChallengeInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    HeroInstanceData_descriptor_, &HeroInstanceData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BranchLineInfo_descriptor_, &BranchLineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TotalBranchLineInfo_descriptor_, &TotalBranchLineInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientIEInfo_descriptor_, &ClientIEInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OnceRewardInfo_descriptor_, &OnceRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GroupInstance_descriptor_, &GroupInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceGroupList_descriptor_, &InstanceGroupList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EliteInstance_descriptor_, &EliteInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceEliteList_descriptor_, &InstanceEliteList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CauchemarInstance_descriptor_, &CauchemarInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceCauchemarList_descriptor_, &InstanceCauchemarList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdvancedInstance_descriptor_, &AdvancedInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceAdvancedList_descriptor_, &InstanceAdvancedList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseShopInfo_descriptor_, &BaseShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseShopInfoList_descriptor_, &BaseShopInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BaseShopInfoData_descriptor_, &BaseShopInfoData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AnswerInfo_descriptor_, &AnswerInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharLogin_2fPlayerInfo_2eproto() {
  delete PlayerInfo::default_instance_;
  delete PlayerInfo_reflection_;
  delete ArenaDataInfo::default_instance_;
  delete ArenaDataInfo_reflection_;
  delete ArenaInfo::default_instance_;
  delete ArenaInfo_reflection_;
  delete ArenaBaseInfo::default_instance_;
  delete ArenaBaseInfo_reflection_;
  delete ArenaChallengeRank::default_instance_;
  delete ArenaChallengeRank_reflection_;
  delete ArenaHistoryReward::default_instance_;
  delete ArenaHistoryReward_reflection_;
  delete RingDBData::default_instance_;
  delete RingDBData_reflection_;
  delete SaveTypeInfo::default_instance_;
  delete SaveTypeInfo_reflection_;
  delete WSaveTypeInfo::default_instance_;
  delete WSaveTypeInfo_reflection_;
  delete BaseInfo::default_instance_;
  delete BaseInfo_reflection_;
  delete BattleInfo::default_instance_;
  delete BattleInfo_reflection_;
  delete QuestInfo::default_instance_;
  delete QuestInfo_reflection_;
  delete WeekQuestItem::default_instance_;
  delete WeekQuestItem_reflection_;
  delete WeekQuest::default_instance_;
  delete WeekQuest_reflection_;
  delete NewQuestInfo::default_instance_;
  delete NewQuestInfo_reflection_;
  delete ActiveQuest::default_instance_;
  delete ActiveQuest_reflection_;
  delete DailyQuest::default_instance_;
  delete DailyQuest_reflection_;
  delete ClanQuest::default_instance_;
  delete ClanQuest_reflection_;
  delete CampQuest::default_instance_;
  delete CampQuest_reflection_;
  delete POneTalentSkill::default_instance_;
  delete POneTalentSkill_reflection_;
  delete SkillInfo::default_instance_;
  delete SkillInfo_reflection_;
  delete BuffInfo::default_instance_;
  delete BuffInfo_reflection_;
  delete CDInfo::default_instance_;
  delete CDInfo_reflection_;
  delete ChannelCD::default_instance_;
  delete ChannelCD_reflection_;
  delete ContainerInfo::default_instance_;
  delete ContainerInfo_reflection_;
  delete PlayerTypeInfo::default_instance_;
  delete PlayerTypeInfo_reflection_;
  delete EquipQuickInfo::default_instance_;
  delete EquipQuickInfo_reflection_;
  delete PackageInfo::default_instance_;
  delete PackageInfo_reflection_;
  delete StoreHouseInfo::default_instance_;
  delete StoreHouseInfo_reflection_;
  delete MonitorInfo::default_instance_;
  delete MonitorInfo_reflection_;
  delete SettingInfo::default_instance_;
  delete SettingInfo_reflection_;
  delete HorseInfo::default_instance_;
  delete HorseInfo_reflection_;
  delete SkinInfo::default_instance_;
  delete SkinInfo_reflection_;
  delete ItemInfo::default_instance_;
  delete ItemInfo_reflection_;
  delete AttrValue::default_instance_;
  delete AttrValue_reflection_;
  delete QuickContainer::default_instance_;
  delete QuickContainer_reflection_;
  delete WPlayerInfo::default_instance_;
  delete WPlayerInfo_reflection_;
  delete FriendInfoList::default_instance_;
  delete FriendInfoList_reflection_;
  delete FriendInfo::default_instance_;
  delete FriendInfo_reflection_;
  delete InstanceInfoList::default_instance_;
  delete InstanceInfoList_reflection_;
  delete InstanceDiffculty::default_instance_;
  delete InstanceDiffculty_reflection_;
  delete InstanceVip::default_instance_;
  delete InstanceVip_reflection_;
  delete InstanceInfoTwoDays::default_instance_;
  delete InstanceInfoTwoDays_reflection_;
  delete PrestigeInfoList::default_instance_;
  delete PrestigeInfoList_reflection_;
  delete PrestigeInfo::default_instance_;
  delete PrestigeInfo_reflection_;
  delete PrestigeContent::default_instance_;
  delete PrestigeContent_reflection_;
  delete TitleInfoList::default_instance_;
  delete TitleInfoList_reflection_;
  delete TitleInfo::default_instance_;
  delete TitleInfo_reflection_;
  delete TitleStatus::default_instance_;
  delete TitleStatus_reflection_;
  delete DestinationInfoList::default_instance_;
  delete DestinationInfoList_reflection_;
  delete DestinationInfo::default_instance_;
  delete DestinationInfo_reflection_;
  delete DestinationContent::default_instance_;
  delete DestinationContent_reflection_;
  delete SignInInfo::default_instance_;
  delete SignInInfo_reflection_;
  delete CounterService::default_instance_;
  delete CounterService_reflection_;
  delete CounterServiceList::default_instance_;
  delete CounterServiceList_reflection_;
  delete EscortInfo::default_instance_;
  delete EscortInfo_reflection_;
  delete DanLuInfo::default_instance_;
  delete DanLuInfo_reflection_;
  delete PlayerVipInfo::default_instance_;
  delete PlayerVipInfo_reflection_;
  delete PassivePlayerSkill::default_instance_;
  delete PassivePlayerSkill_reflection_;
  delete MagicWeapon::default_instance_;
  delete MagicWeapon_reflection_;
  delete RandCJobLucky::default_instance_;
  delete RandCJobLucky_reflection_;
  delete RandCJobLucky_CJobItem::default_instance_;
  delete RandCJobLucky_CJobItem_reflection_;
  delete RandCJobLucky_CreatureCJob::default_instance_;
  delete RandCJobLucky_CreatureCJob_reflection_;
  delete LucklyTurntable::default_instance_;
  delete LucklyTurntable_reflection_;
  delete Activity::default_instance_;
  delete Activity_reflection_;
  delete ActivityYellowVipReward::default_instance_;
  delete ActivityYellowVipReward_reflection_;
  delete ActivityYellowVipRewardList::default_instance_;
  delete ActivityYellowVipRewardList_reflection_;
  delete LineMapInfoList::default_instance_;
  delete LineMapInfoList_reflection_;
  delete LineMapInfo::default_instance_;
  delete LineMapInfo_reflection_;
  delete GirlWarInfo::default_instance_;
  delete GirlWarInfo_reflection_;
  delete GirlWar::default_instance_;
  delete GirlWar_reflection_;
  delete LessInfo::default_instance_;
  delete LessInfo_reflection_;
  delete StoneInfo::default_instance_;
  delete StoneInfo_reflection_;
  delete StoneItem::default_instance_;
  delete StoneItem_reflection_;
  delete DBAchShopInfo::default_instance_;
  delete DBAchShopInfo_reflection_;
  delete DBAchShopItem::default_instance_;
  delete DBAchShopItem_reflection_;
  delete CampShopInfo::default_instance_;
  delete CampShopInfo_reflection_;
  delete CampShopItem::default_instance_;
  delete CampShopItem_reflection_;
  delete FestivalInfo::default_instance_;
  delete FestivalInfo_reflection_;
  delete festivalItem::default_instance_;
  delete festivalItem_reflection_;
  delete MoneyInstance::default_instance_;
  delete MoneyInstance_reflection_;
  delete ChallengeInstance::default_instance_;
  delete ChallengeInstance_reflection_;
  delete HeroInstanceData::default_instance_;
  delete HeroInstanceData_reflection_;
  delete BranchLineInfo::default_instance_;
  delete BranchLineInfo_reflection_;
  delete TotalBranchLineInfo::default_instance_;
  delete TotalBranchLineInfo_reflection_;
  delete ClientIEInfo::default_instance_;
  delete ClientIEInfo_reflection_;
  delete OnceRewardInfo::default_instance_;
  delete OnceRewardInfo_reflection_;
  delete GroupInstance::default_instance_;
  delete GroupInstance_reflection_;
  delete InstanceGroupList::default_instance_;
  delete InstanceGroupList_reflection_;
  delete EliteInstance::default_instance_;
  delete EliteInstance_reflection_;
  delete InstanceEliteList::default_instance_;
  delete InstanceEliteList_reflection_;
  delete CauchemarInstance::default_instance_;
  delete CauchemarInstance_reflection_;
  delete InstanceCauchemarList::default_instance_;
  delete InstanceCauchemarList_reflection_;
  delete AdvancedInstance::default_instance_;
  delete AdvancedInstance_reflection_;
  delete InstanceAdvancedList::default_instance_;
  delete InstanceAdvancedList_reflection_;
  delete BaseShopInfo::default_instance_;
  delete BaseShopInfo_reflection_;
  delete BaseShopInfoList::default_instance_;
  delete BaseShopInfoList_reflection_;
  delete BaseShopInfoData::default_instance_;
  delete BaseShopInfoData_reflection_;
  delete AnswerInfo::default_instance_;
  delete AnswerInfo_reflection_;
}

void protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::VitalityProto::protobuf_AddDesc_CharLogin_2fVitality_2eproto();
  ::ChristmasDB::protobuf_AddDesc_CharLogin_2fChristmasDB_2eproto();
  ::FashionMsgProto::protobuf_AddDesc_Fashion_2fFashionMessage_2eproto();
  ::PlayerSynch::protobuf_AddDesc_Map_2fSynchPath_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032CharLogin/PlayerInfo.proto\022\nPlayerInfo"
    "\032\030CharLogin/Vitality.proto\032\033CharLogin/Ch"
    "ristmasDB.proto\032\034Fashion/FashionMessage."
    "proto\032\023Map/SynchPath.proto\"\274\016\n\nPlayerInf"
    "o\022$\n\006bsinfo\030\001 \002(\0132\024.PlayerInfo.BaseInfo\022"
    "%\n\005binfo\030\002 \001(\0132\026.PlayerInfo.BattleInfo\022("
    "\n\tquestinfo\030\003 \001(\0132\025.PlayerInfo.QuestInfo"
    "\022$\n\005skill\030\004 \001(\0132\025.PlayerInfo.SkillInfo\022\036"
    "\n\002cd\030\005 \001(\0132\022.PlayerInfo.CDInfo\022#\n\002mt\030\006 \001"
    "(\0132\027.PlayerInfo.MonitorInfo\022.\n\nequipquic"
    "k\030\007 \001(\0132\032.PlayerInfo.EquipQuickInfo\022,\n\013g"
    "irlwarinfo\030\010 \001(\0132\027.PlayerInfo.GirlWarInf"
    "o\022/\n\007counter\030\t \001(\0132\036.PlayerInfo.CounterS"
    "erviceList\022$\n\005horse\030\n \001(\0132\025.PlayerInfo.H"
    "orseInfo\022$\n\005danlu\030\013 \001(\0132\025.PlayerInfo.Dan"
    "LuInfo\022\'\n\006magicw\030\014 \001(\0132\027.PlayerInfo.Magi"
    "cWeapon\022\'\n\004cjob\030\r \001(\0132\031.PlayerInfo.RandC"
    "JobLucky\022.\n\tlucktable\030\016 \001(\0132\033.PlayerInfo"
    ".LucklyTurntable\022&\n\010activity\030\017 \001(\0132\024.Pla"
    "yerInfo.Activity\0224\n\013destination\030\020 \001(\0132\037."
    "PlayerInfo.DestinationInfoList\0225\n\014instan"
    "ceList\030\021 \001(\0132\037.PlayerInfo.InstanceInfoTw"
    "oDays\022&\n\006signin\030\022 \001(\0132\026.PlayerInfo.SignI"
    "nInfo\022&\n\006escort\030\023 \001(\0132\026.PlayerInfo.Escor"
    "tInfo\022,\n\tplayerVip\030\024 \001(\0132\031.PlayerInfo.Pl"
    "ayerVipInfo\022.\n\010prestige\030\025 \001(\0132\034.PlayerIn"
    "fo.PrestigeInfoList\022(\n\005title\030\026 \001(\0132\031.Pla"
    "yerInfo.TitleInfoList\022-\n\007fashion\030\027 \001(\0132\034"
    ".FashionMsgProto.FashionShow\0222\n\010vitality"
    "\030\030 \001(\0132 .VitalityProto.ProtoVitalityInfo"
    "\022.\n\014campShopData\030\031 \001(\0132\030.PlayerInfo.Camp"
    "ShopInfo\022.\n\014festivalData\030\032 \001(\0132\030.PlayerI"
    "nfo.FestivalInfo\022\'\n\004info\030\033 \001(\0132\031.PlayerI"
    "nfo.MoneyInstance\022.\n\nonceReward\030\034 \001(\0132\032."
    "PlayerInfo.OnceRewardInfo\022(\n\010ringData\030\035 "
    "\001(\0132\026.PlayerInfo.RingDBData\022,\n\tgroupInfo"
    "\030\036 \001(\0132\031.PlayerInfo.GroupInstance\0224\n\rchr"
    "istmasData\030\037 \001(\0132\035.ChristmasDB.Christmas"
    "AllData\022,\n\teliteInfo\030  \001(\0132\031.PlayerInfo."
    "EliteInstance\0224\n\rcauchemarInfo\030! \001(\0132\035.P"
    "layerInfo.CauchemarInstance\022,\n\tarenaData"
    "\030\" \001(\0132\031.PlayerInfo.ArenaDataInfo\0224\n\rcha"
    "llengedata\030# \001(\0132\035.PlayerInfo.ChallengeI"
    "nstance\022.\n\010herodata\030$ \001(\0132\034.PlayerInfo.H"
    "eroInstanceData\022\'\n\006smagic\030% \001(\0132\027.Player"
    "Info.MagicWeapon\022+\n\nheartmagic\030& \001(\0132\027.P"
    "layerInfo.MagicWeapon\022.\n\010advanced\030\' \001(\0132"
    "\034.PlayerInfo.AdvancedInstance\022.\n\014baseSho"
    "pInfo\030( \001(\0132\030.PlayerInfo.BaseShopInfo\022*\n"
    "\nanswerInfo\030) \001(\0132\026.PlayerInfo.AnswerInf"
    "o\";\n\rArenaDataInfo\022\023\n\013canChallCnt\030\001 \001(\005\022"
    "\025\n\rlastResetTime\030\002 \001(\004\"\377\001\n\tArenaInfo\022\016\n\006"
    "charid\030\001 \002(\003\022\023\n\013CombatPower\030\002 \001(\005\022\017\n\007Ran"
    "king\030\003 \001(\005\022\r\n\005iswin\030\004 \001(\010\022)\n\006abinfo\030\005 \001("
    "\0132\031.PlayerInfo.ArenaBaseInfo\0225\n\rchalleng"
    "eRank\030\006 \001(\0132\036.PlayerInfo.ArenaChallengeR"
    "ank\022\024\n\014challengeNum\030\007 \001(\005\0225\n\rhistoryRewa"
    "rd\030\010 \001(\0132\036.PlayerInfo.ArenaHistoryReward"
    "\"\260\004\n\rArenaBaseInfo\022\020\n\010charname\030\001 \002(\t\022\r\n\005"
    "level\030\002 \001(\005\022\022\n\nprofession\030\003 \001(\005\022\017\n\007count"
    "ry\030\004 \001(\005\022\013\n\003sex\030\005 \001(\010\022\017\n\007titleid\030\006 \001(\005\022\020"
    "\n\010clanname\030\007 \001(\t\022\r\n\005viplv\030\010 \001(\005\022\r\n\005hpmax"
    "\030\t \001(\005\022\r\n\005mpmax\030\n \001(\005\022\021\n\tmovespeed\030\013 \001(\005"
    "\022\021\n\tphyattack\030\014 \001(\005\022\024\n\014phyattackmax\030\r \001("
    "\005\022\023\n\013magicattack\030\016 \001(\005\022\026\n\016magicattackmax"
    "\030\017 \001(\005\022\022\n\nphydefence\030\020 \001(\005\022\024\n\014magicdefen"
    "ce\030\021 \001(\005\022\017\n\007hitrate\030\022 \001(\005\022\021\n\tavoidrate\030\023"
    " \001(\005\022\021\n\tbaselucky\030\024 \001(\005\022\025\n\rcrackdownrate"
    "\030\025 \001(\005\022\017\n\007baserte\030\026 \001(\005\022\016\n\006magicw\030\027 \001(\005\022"
    "\017\n\007suitrnt\030\030 \001(\005\022)\n\tmainEquip\030\031 \001(\0132\026.Pl"
    "ayerSynch.EquipData\022\017\n\007costume\030\032 \001(\005\022\r\n\005"
    "horse\030\033 \001(\005\022\r\n\005skill\030\034 \003(\005\022\017\n\007clanJob\030\035 "
    "\001(\005\"+\n\022ArenaChallengeRank\022\025\n\rchallengeRa"
    "nk\030\001 \003(\005\"8\n\022ArenaHistoryReward\022\016\n\006reward"
    "\030\001 \003(\005\022\022\n\nhavaReward\030\002 \003(\005\"5\n\nRingDBData"
    "\022\n\n\002id\030\001 \001(\005\022\013\n\003exp\030\002 \001(\005\022\016\n\006reward\030\003 \001("
    "\005\"\271\017\n\014SaveTypeInfo\022\014\n\004type\030\001 \002(\004\022\n\n\002id\030\002"
    " \002(\003\022\r\n\005isdel\030\003 \002(\010\022$\n\006bsinfo\030\004 \001(\0132\024.Pl"
    "ayerInfo.BaseInfo\022%\n\005binfo\030\005 \001(\0132\026.Playe"
    "rInfo.BattleInfo\022(\n\tquestinfo\030\006 \001(\0132\025.Pl"
    "ayerInfo.QuestInfo\022$\n\005skill\030\007 \001(\0132\025.Play"
    "erInfo.SkillInfo\022\036\n\002cd\030\010 \001(\0132\022.PlayerInf"
    "o.CDInfo\022(\n\007package\030\t \001(\0132\027.PlayerInfo.P"
    "ackageInfo\022.\n\nstorehouse\030\n \001(\0132\032.PlayerI"
    "nfo.StoreHouseInfo\022.\n\nequipquick\030\013 \001(\0132\032"
    ".PlayerInfo.EquipQuickInfo\022(\n\007monitor\030\014 "
    "\001(\0132\027.PlayerInfo.MonitorInfo\022$\n\005horse\030\r "
    "\001(\0132\025.PlayerInfo.HorseInfo\0221\n\010instance\030\016"
    " \001(\0132\037.PlayerInfo.InstanceInfoTwoDays\022.\n"
    "\010prestige\030\017 \001(\0132\034.PlayerInfo.PrestigeInf"
    "oList\022&\n\006signin\030\020 \001(\0132\026.PlayerInfo.SignI"
    "nInfo\022/\n\007counter\030\021 \001(\0132\036.PlayerInfo.Coun"
    "terServiceList\022)\n\006titles\030\022 \001(\0132\031.PlayerI"
    "nfo.TitleInfoList\022&\n\006escort\030\023 \001(\0132\026.Play"
    "erInfo.EscortInfo\022$\n\005danlu\030\024 \001(\0132\025.Playe"
    "rInfo.DanLuInfo\022*\n\007vipinfo\030\025 \001(\0132\031.Playe"
    "rInfo.PlayerVipInfo\022\'\n\006magicw\030\026 \001(\0132\027.Pl"
    "ayerInfo.MagicWeapon\022\'\n\004cjob\030\027 \001(\0132\031.Pla"
    "yerInfo.RandCJobLucky\022.\n\tlucktable\030\030 \001(\013"
    "2\033.PlayerInfo.LucklyTurntable\0224\n\013destina"
    "tion\030\031 \001(\0132\037.PlayerInfo.DestinationInfoL"
    "ist\022&\n\010activity\030\032 \001(\0132\024.PlayerInfo.Activ"
    "ity\022(\n\007girlwar\030\033 \001(\0132\027.PlayerInfo.GirlWa"
    "rInfo\022-\n\007fashion\030\034 \001(\0132\034.FashionMsgProto"
    ".FashionShow\0222\n\010vitality\030\035 \001(\0132 .Vitalit"
    "yProto.ProtoVitalityInfo\022*\n\010CampData\030\036 \001"
    "(\0132\030.PlayerInfo.CampShopInfo\022.\n\014festival"
    "Data\030\037 \001(\0132\030.PlayerInfo.FestivalInfo\022\'\n\004"
    "info\030  \001(\0132\031.PlayerInfo.MoneyInstance\022.\n"
    "\nonceReward\030! \001(\0132\032.PlayerInfo.OnceRewar"
    "dInfo\022(\n\010ringData\030\" \001(\0132\026.PlayerInfo.Rin"
    "gDBData\022,\n\tgroupInfo\030# \001(\0132\031.PlayerInfo."
    "GroupInstance\0224\n\rchristmasData\030$ \001(\0132\035.C"
    "hristmasDB.ChristmasAllData\022,\n\teliteInfo"
    "\030% \001(\0132\031.PlayerInfo.EliteInstance\0224\n\rcau"
    "chemarInfo\030& \001(\0132\035.PlayerInfo.CauchemarI"
    "nstance\022,\n\tarenaData\030\' \001(\0132\031.PlayerInfo."
    "ArenaDataInfo\0224\n\rchallengedata\030( \001(\0132\035.P"
    "layerInfo.ChallengeInstance\022.\n\010herodata\030"
    ") \001(\0132\034.PlayerInfo.HeroInstanceData\022\'\n\006s"
    "magic\030* \001(\0132\027.PlayerInfo.MagicWeapon\022+\n\n"
    "heartmagic\030+ \001(\0132\027.PlayerInfo.MagicWeapo"
    "n\022.\n\010advanced\030, \001(\0132\034.PlayerInfo.Advance"
    "dInstance\022.\n\014baseShopInfo\030- \001(\0132\030.Player"
    "Info.BaseShopInfo\022*\n\nanswerInfo\030. \001(\0132\026."
    "PlayerInfo.AnswerInfo\"h\n\rWSaveTypeInfo\022\014"
    "\n\004type\030\001 \002(\004\022\n\n\002id\030\002 \002(\003\022\r\n\005isdel\030\003 \002(\010\022"
    ".\n\nfriendInfo\030\004 \001(\0132\032.PlayerInfo.FriendI"
    "nfoList\"\342\014\n\010BaseInfo\022\016\n\006charid\030\001 \002(\003\022\020\n\010"
    "charname\030\002 \002(\t\022\013\n\003exp\030\003 \002(\003\022\r\n\005level\030\004 \002"
    "(\005\022\r\n\005money\030\005 \002(\005\022\016\n\006golden\030\006 \002(\005\022\022\n\nbin"
    "dgolden\030\007 \002(\005\022\020\n\010deadtime\030\010 \002(\003\022\013\n\003sex\030\t"
    " \002(\010\022\022\n\nprofession\030\n \002(\005\022\014\n\004xpos\030\013 \002(\005\022\014"
    "\n\004ypos\030\014 \002(\005\022\r\n\005horse\030\r \002(\005\022\r\n\005mapid\030\016 \002"
    "(\003\022\017\n\007country\030\017 \002(\005\022\020\n\010charhead\030\020 \002(\005\022\026\n"
    "\016facontribution\030\021 \001(\005\022\017\n\007faction\030\022 \001(\005\022\r"
    "\n\005fajob\030\023 \001(\005\022\014\n\004mate\030\024 \002(\003\022\022\n\ncountryjo"
    "b\030\025 \002(\005\022\024\n\014battlecontri\030\026 \002(\005\022\017\n\007armyjob"
    "\030\027 \002(\005\022\025\n\rcountrycontri\030\030 \001(\005\022\017\n\007titleid"
    "\030\031 \001(\005\022\023\n\013accounttype\030\032 \002(\005\022\016\n\006openid\030\033 "
    "\002(\t\022\020\n\010serverid\030\034 \002(\005\022\020\n\010sinvalue\030\035 \002(\005\022"
    "\020\n\010acupoint\030\036 \002(\005\022\020\n\010settings\030\037 \002(\005\022\020\n\010h"
    "avetodo\030  \002(\003\022\025\n\rhavetodoaward\030! \002(\005\022\021\n\t"
    "activites\030\" \002(\005\022\026\n\016activitesaward\030# \002(\005\022"
    "\023\n\013offlineTime\030$ \002(\003\022\024\n\014onlineReward\030% \002"
    "(\005\022\022\n\nonlineTime\030& \002(\003\022\023\n\013levelReward\030\' "
    "\002(\005\022\020\n\010prestige\030( \002(\005\022\025\n\rhistoryReward\030)"
    " \002(\005\022\r\n\005viplv\030* \002(\005\022\026\n\016continueanswer\030+ "
    "\002(\005\022\023\n\013rightanswer\030, \002(\005\022\022\n\naddupgolde\030-"
    " \002(\005\022\020\n\010clanname\030. \001(\t\022\017\n\007ranking\030/ \001(\005\022"
    "\024\n\014awardranking\0300 \001(\005\022\032\n\022AntiAddictionSt"
    "ate\0301 \001(\005\022\037\n\027AntiAddictionOnLineTime\0302 \001"
    "(\005\022\027\n\017totalOnlineTime\0303 \001(\003\022\024\n\014NextTalkT"
    "ime\0304 \001(\003\022\031\n\021treasonkingReward\0305 \001(\005\022\024\n\014"
    "practiceTime\0306 \001(\005\022\r\n\005score\0307 \001(\005\022\016\n\006pkT"
    "ype\0308 \001(\005\022\020\n\010clanicon\0309 \001(\005\022\017\n\007loginIP\030:"
    " \001(\014\022\016\n\006teamid\030; \001(\003\022\021\n\tfashionID\030< \001(\005\022"
    "\034\n\024antiAddictionAddTime\030= \001(\005\022\016\n\006couple\030"
    "> \001(\003\022\r\n\005power\030\? \001(\005\022\r\n\005fitch\030@ \001(\005\022\026\n\016w"
    "eekContribute\030A \001(\005\022\025\n\rcurContribute\030B \001"
    "(\005\022\024\n\014KingRankFlag\030C \001(\005\022\016\n\006credit\030D \001(\005"
    "\022\025\n\renvelopeCount\030E \001(\005\022\036\n\026maxCanGetEnve"
    "lopeCount\030F \001(\005\022\032\n\022attributeClearTime\030G "
    "\001(\004\022\022\n\ngoldenCost\030H \001(\005\022\017\n\007openKey\030I \001(\t"
    "\022\n\n\002pf\030J \001(\t\022\r\n\005pfKey\030K \001(\t\022\022\n\ncouplenam"
    "e\030L \001(\t\022\027\n\017mgicweaponPower\030M \001(\005\022\020\n\010gour"
    "dExp\030N \001(\005\022\017\n\007pvpflag\030O \001(\005\022\022\n\nclientTyp"
    "e\030P \001(\005\022\r\n\005guide\030Q \001(\005\022\016\n\006source\030R \001(\t\022\024"
    "\n\014rechargetime\030S \001(\003\022\026\n\016challengemoney\030T"
    " \001(\003\"\373\003\n\nBattleInfo\022\n\n\002hp\030\001 \002(\005\022\r\n\005hpmax"
    "\030\002 \002(\005\022\n\n\002mp\030\003 \002(\005\022\r\n\005mpmax\030\004 \002(\005\022\r\n\005for"
    "ce\030\005 \002(\005\022\020\n\010forcemax\030\006 \002(\005\022\020\n\010strength\030\007"
    " \002(\005\022\023\n\013cleverpower\030\010 \002(\005\022\021\n\tcleverair\030\t"
    " \001(\005\022\025\n\rphysicalpower\030\n \002(\005\022\020\n\010patience\030"
    "\013 \002(\005\022\017\n\007agility\030\014 \002(\005\022\017\n\007pkcount\030\r \002(\005\022"
    "\r\n\005power\030\016 \001(\005\022\020\n\010powermax\030\017 \001(\005\022\021\n\tphya"
    "ttack\030\020 \001(\005\022\024\n\014phyattackmax\030\021 \002(\005\022\022\n\nphy"
    "defence\030\022 \002(\005\022\023\n\013magicattack\030\023 \001(\005\022\026\n\016ma"
    "gicattackmax\030\024 \001(\005\022\024\n\014magicdefence\030\025 \001(\005"
    "\022\017\n\007hitrate\030\026 \002(\005\022\021\n\tavoidrate\030\027 \002(\005\022\021\n\t"
    "baselucky\030\030 \001(\005\022\025\n\rcrackdownrate\030\031 \002(\005\022\017"
    "\n\007baserte\030\032 \002(\005\022\021\n\tmovespeed\030\033 \002(\005\"\356\003\n\tQ"
    "uestInfo\022\'\n\006active\030\001 \003(\0132\027.PlayerInfo.Ac"
    "tiveQuest\022%\n\005daily\030\002 \003(\0132\026.PlayerInfo.Da"
    "ilyQuest\022#\n\004clan\030\003 \003(\0132\025.PlayerInfo.Clan"
    "Quest\022\022\n\ndoclantime\030\004 \001(\005\022\021\n\tdailytime\030\005"
    " \001(\005\022.\n\016yesterdaydaily\030\006 \003(\0132\026.PlayerInf"
    "o.DailyQuest\022,\n\ryesterdayclan\030\007 \003(\0132\025.Pl"
    "ayerInfo.ClanQuest\022\036\n\026allMainTaskHadComp"
    "Flag\030\010 \001(\010\022)\n\nccampQuest\030\t \003(\0132\025.PlayerI"
    "nfo.CampQuest\022\022\n\ndoCamptime\030\n \001(\005\022\024\n\014que"
    "stGuideID\030\013 \001(\r\022(\n\tweekquest\030\014 \001(\0132\025.Pla"
    "yerInfo.WeekQuest\022,\n\ryesterdaycamp\030\r \003(\013"
    "2\025.PlayerInfo.CampQuest\022\032\n\022yesterdayWeek"
    "Times\030\016 \001(\005\"A\n\rWeekQuestItem\022\016\n\006itemID\030\001"
    " \001(\005\022\016\n\006counts\030\002 \001(\005\022\020\n\010bindType\030\003 \001(\005\"\207"
    "\001\n\tWeekQuest\022\014\n\004time\030\001 \001(\003\022\r\n\005times\030\002 \001("
    "\005\022,\n\trewardIDs\030\003 \003(\0132\031.PlayerInfo.WeekQu"
    "estItem\022/\n\014endrewardIDs\030\004 \003(\0132\031.PlayerIn"
    "fo.WeekQuestItem\"\344\001\n\014NewQuestInfo\022(\n\007qAc"
    "tive\030\001 \001(\0132\027.PlayerInfo.ActiveQuest\022&\n\006q"
    "Daily\030\002 \001(\0132\026.PlayerInfo.DailyQuest\022$\n\005q"
    "Clan\030\003 \001(\0132\025.PlayerInfo.ClanQuest\022.\n\016yes"
    "terdaydaily\030\004 \001(\0132\026.PlayerInfo.DailyQues"
    "t\022,\n\ryesterdayclan\030\005 \001(\0132\025.PlayerInfo.Cl"
    "anQuest\"\200\001\n\013ActiveQuest\022\n\n\002id\030\001 \002(\005\022\r\n\005s"
    "tate\030\002 \002(\005\022\017\n\007ftarget\030\003 \002(\005\022\017\n\007starget\030\004"
    " \001(\005\022\020\n\010numlevel\030\005 \001(\005\022\023\n\013rewardlevel\030\006 "
    "\001(\005\022\r\n\005times\030\007 \001(\005\"k\n\nDailyQuest\022\017\n\007ques"
    "tid\030\001 \002(\005\022\020\n\010numlevel\030\002 \002(\005\022\023\n\013rewardlev"
    "el\030\003 \002(\005\022\r\n\005times\030\004 \002(\005\022\026\n\016numCoefficien"
    "t\030\005 \001(\002\"j\n\tClanQuest\022\017\n\007questid\030\001 \002(\005\022\020\n"
    "\010numlevel\030\002 \002(\005\022\023\n\013rewardlevel\030\003 \002(\005\022\r\n\005"
    "times\030\004 \002(\005\022\026\n\016numCoefficient\030\005 \001(\002\"j\n\tC"
    "ampQuest\022\017\n\007questid\030\001 \002(\005\022\020\n\010numlevel\030\002 "
    "\002(\005\022\023\n\013rewardlevel\030\003 \002(\005\022\r\n\005times\030\004 \002(\005\022"
    "\026\n\016numCoefficient\030\005 \001(\002\"6\n\017POneTalentSki"
    "ll\022\020\n\010talentID\030\001 \001(\005\022\021\n\tskillList\030\002 \003(\005\""
    "\226\001\n\tSkillInfo\022\017\n\007skillid\030\001 \003(\005\022!\n\003buf\030\002 "
    "\003(\0132\024.PlayerInfo.BuffInfo\022.\n\tskillData\030\003"
    " \003(\0132\033.PlayerInfo.POneTalentSkill\022\021\n\tcur"
    "Talent\030\004 \001(\005\022\022\n\nclanskills\030\005 \003(\005\"U\n\010Buff"
    "Info\022\014\n\004type\030\001 \002(\005\022\n\n\002id\030\002 \002(\005\022\017\n\007endtim"
    "e\030\003 \001(\003\022\017\n\007offtime\030\004 \001(\003\022\r\n\005isdel\030\005 \001(\010\""
    "+\n\006CDInfo\022!\n\002cd\030\001 \003(\0132\025.PlayerInfo.Chann"
    "elCD\"*\n\tChannelCD\022\014\n\004type\030\001 \002(\005\022\017\n\007endti"
    "me\030\002 \002(\003\"i\n\rContainerInfo\022(\n\007package\030\001 \001"
    "(\0132\027.PlayerInfo.PackageInfo\022.\n\nstorehous"
    "e\030\002 \001(\0132\032.PlayerInfo.StoreHouseInfo\"\312\002\n\016"
    "PlayerTypeInfo\022\014\n\004type\030\001 \003(\005\022$\n\005horse\030\002 "
    "\001(\0132\025.PlayerInfo.HorseInfo\022$\n\005danlu\030\003 \001("
    "\0132\025.PlayerInfo.DanLuInfo\022\'\n\006magicw\030\004 \001(\013"
    "2\027.PlayerInfo.MagicWeapon\022\'\n\004cjob\030\005 \001(\0132"
    "\031.PlayerInfo.RandCJobLucky\022.\n\tlucktable\030"
    "\006 \001(\0132\033.PlayerInfo.LucklyTurntable\022&\n\010ac"
    "tivity\030\007 \001(\0132\024.PlayerInfo.Activity\0224\n\013de"
    "stination\030\010 \001(\0132\037.PlayerInfo.Destination"
    "InfoList\"`\n\016EquipQuickInfo\022#\n\005equip\030\001 \003("
    "\0132\024.PlayerInfo.ItemInfo\022)\n\005quick\030\002 \003(\0132\032"
    ".PlayerInfo.QuickContainer\"P\n\013PackageInf"
    "o\022%\n\007package\030\001 \003(\0132\024.PlayerInfo.ItemInfo"
    "\022\014\n\004size\030\002 \001(\005\022\014\n\004time\030\003 \001(\003\"V\n\016StoreHou"
    "seInfo\022(\n\nstorehouse\030\001 \003(\0132\024.PlayerInfo."
    "ItemInfo\022\014\n\004size\030\003 \001(\005\022\014\n\004time\030\004 \001(\003\"\215\003\n"
    "\013MonitorInfo\022\023\n\013attackskill\030\001 \003(\010\022\017\n\007ski"
    "llid\030\002 \003(\003\022\023\n\013ispickequip\030\003 \001(\010\022\017\n\007quali"
    "ty\030\004 \001(\005\022\022\n\nprofession\030\005 \001(\005\022\023\n\013ispickst"
    "one\030\006 \001(\010\022\025\n\rispickconsume\030\007 \001(\010\022\023\n\013ispi"
    "ckmoney\030\010 \001(\010\022\023\n\013ispickother\030\t \001(\010\022\017\n\007is"
    "group\030\n \001(\010\022\023\n\013assistskill\030\013 \001(\010\022\017\n\007isbu"
    "yhp\030\014 \001(\010\022\021\n\thpbuytype\030\r \001(\005\022\017\n\007isbuymp\030"
    "\016 \001(\010\022\021\n\tmpbuytype\030\017 \001(\005\022\022\n\nisrevalsit\030\020"
    " \001(\010\022\020\n\010isuseexp\030\021 \001(\010\022\n\n\002hp\030\022 \001(\005\022\r\n\005hp"
    "use\030\023 \001(\010\022\n\n\002mp\030\024 \001(\005\022\r\n\005mpuse\030\025 \001(\010\"*\n\013"
    "SettingInfo\022\014\n\004type\030\001 \003(\005\022\r\n\005value\030\002 \003(\005"
    "\"[\n\tHorseInfo\022\n\n\002id\030\001 \002(\005\022\013\n\003mid\030\002 \002(\005\022\013"
    "\n\003exp\030\003 \001(\005\022(\n\nskinIDList\030\004 \003(\0132\024.Player"
    "Info.SkinInfo\"+\n\010SkinInfo\022\016\n\006skinID\030\001 \002("
    "\005\022\017\n\007endTime\030\002 \001(\003\"\214\001\n\010ItemInfo\022\n\n\002id\030\001 "
    "\002(\005\022\014\n\004flag\030\002 \001(\r\022\017\n\007newattr\030\003 \003(\r\022\017\n\007st"
    "oneid\030\004 \003(\005\022\017\n\007endtime\030\005 \001(\003\022\013\n\003num\030\006 \001("
    "\005\022\020\n\010inlayPos\030\007 \003(\005\022\024\n\014refineAttrLv\030\010 \003("
    "\r\"&\n\tAttrValue\022\n\n\002id\030\001 \002(\005\022\r\n\005value\030\002 \002("
    "\005\"-\n\016QuickContainer\022\014\n\004type\030\001 \002(\005\022\r\n\005val"
    "ue\030\002 \001(\005\"=\n\013WPlayerInfo\022.\n\nfriendlist\030\001 "
    "\001(\0132\032.PlayerInfo.FriendInfoList\"\262\001\n\016Frie"
    "ndInfoList\022\'\n\007friends\030\001 \003(\0132\026.PlayerInfo"
    ".FriendInfo\022\r\n\005inwho\030\002 \003(\003\022\027\n\017m_ReceiveC"
    "ounts\030\003 \001(\005\022\024\n\014m_SendCounts\030\004 \001(\005\022\023\n\013m_R"
    "esetTime\030\005 \001(\003\022\021\n\tm_marryId\030\006 \001(\003\022\021\n\tm_I"
    "nvited\030\007 \003(\003\"\261\001\n\nFriendInfo\022\014\n\004type\030\001 \002("
    "\005\022\016\n\006charid\030\002 \002(\003\022\022\n\nfriendname\030\003 \002(\t\022\n\n"
    "\002lv\030\004 \002(\005\022\022\n\nprofession\030\005 \001(\005\022\016\n\006hatred\030"
    "\006 \001(\005\022\020\n\010cohesion\030\007 \001(\005\022\020\n\010vipLevel\030\010 \001("
    "\005\022\020\n\010fighting\030\t \001(\005\022\013\n\003sex\030\n \001(\005\"\324\001\n\020Ins"
    "tanceInfoList\0224\n\rdiffcultyInfo\030\001 \003(\0132\035.P"
    "layerInfo.InstanceDiffculty\022(\n\007vipInfo\030\002"
    " \003(\0132\027.PlayerInfo.InstanceVip\022.\n\007expInfo"
    "\030\003 \003(\0132\035.PlayerInfo.InstanceDiffculty\0220\n"
    "\tmoneyInfo\030\004 \003(\0132\035.PlayerInfo.InstanceDi"
    "ffculty\"Z\n\021InstanceDiffculty\022\r\n\005mapId\030\001 "
    "\002(\005\022\014\n\004pass\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022\014\n\004time\030\004"
    " \001(\005\022\r\n\005reset\030\005 \001(\005\"E\n\013InstanceVip\022\r\n\005ma"
    "pId\030\001 \002(\005\022\014\n\004pass\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022\014\n\004"
    "time\030\004 \001(\003\"{\n\023InstanceInfoTwoDays\022/\n\ttod"
    "ayinfo\030\001 \001(\0132\034.PlayerInfo.InstanceInfoLi"
    "st\0223\n\ryesterdayinfo\030\002 \001(\0132\034.PlayerInfo.I"
    "nstanceInfoList\"c\n\020PrestigeInfoList\022&\n\004i"
    "nfo\030\001 \001(\0132\030.PlayerInfo.PrestigeInfo\022\'\n\004s"
    "hop\030\002 \001(\0132\031.PlayerInfo.DBAchShopInfo\"B\n\014"
    "PrestigeInfo\0222\n\rprestigeinfos\030\001 \003(\0132\033.Pl"
    "ayerInfo.PrestigeContent\"l\n\017PrestigeCont"
    "ent\022\024\n\014prestigeType\030\001 \002(\005\022\022\n\nprestigeID\030"
    "\002 \002(\005\022\013\n\003num\030\003 \002(\005\022\022\n\nisComplete\030\004 \002(\005\022\016"
    "\n\006hadGet\030\005 \002(\005\"4\n\rTitleInfoList\022#\n\004info\030"
    "\001 \001(\0132\025.PlayerInfo.TitleInfo\"7\n\tTitleInf"
    "o\022*\n\ttitleinfo\030\001 \003(\0132\027.PlayerInfo.TitleS"
    "tatus\"H\n\013TitleStatus\022\017\n\007titleId\030\001 \002(\005\022\023\n"
    "\013titleStatus\030\002 \002(\005\022\023\n\013titleActive\030\003 \002(\005\""
    "@\n\023DestinationInfoList\022)\n\004info\030\001 \001(\0132\033.P"
    "layerInfo.DestinationInfo\"K\n\017Destination"
    "Info\0228\n\020destinationinfos\030\001 \003(\0132\036.PlayerI"
    "nfo.DestinationContent\"u\n\022DestinationCon"
    "tent\022\025\n\rdestinationID\030\001 \002(\005\022\027\n\017destinati"
    "onType\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022\022\n\nisComplete\030"
    "\004 \001(\005\022\016\n\006hadGet\030\005 \001(\005\"w\n\nSignInInfo\022\016\n\006S"
    "ignIn\030\001 \001(\005\022\016\n\006Reward\030\002 \001(\005\022\022\n\ntotalLogi"
    "n\030\003 \001(\005\022\030\n\020totalLoginReward\030\004 \001(\005\022\033\n\023fir"
    "stChargeOverFlag\030\005 \001(\010\")\n\016CounterService"
    "\022\n\n\002id\030\001 \003(\005\022\013\n\003num\030\002 \003(\005\"\216\001\n\022CounterSer"
    "viceList\022+\n\007counter\030\001 \001(\0132\032.PlayerInfo.C"
    "ounterService\0224\n\020yesterdaycounter\030\002 \001(\0132"
    "\032.PlayerInfo.CounterService\022\025\n\rlastReset"
    "Time\030\003 \001(\003\"\323\001\n\nEscortInfo\022\014\n\004line\030\001 \001(\005\022"
    "\017\n\007quality\030\002 \001(\005\022\020\n\010robTimes\030\003 \001(\005\022\021\n\tle"
    "ftTimes\030\004 \001(\003\022\025\n\rspeedlefttime\030\005 \001(\003\022\r\n\005"
    "mapid\030\006 \001(\003\022\014\n\004xpos\030\007 \001(\005\022\014\n\004ypos\030\010 \001(\005\022"
    "\n\n\002hp\030\t \001(\005\022\013\n\003num\030\n \001(\005\022\021\n\trewardExp\030\013 "
    "\001(\005\022\023\n\013rewardMoney\030\014 \001(\005\"~\n\tDanLuInfo\022\017\n"
    "\007danluId\030\001 \001(\005\022\013\n\003exp\030\002 \001(\005\022\r\n\005point\030\003 \001"
    "(\005\022\016\n\006itemID\030\004 \003(\005\022\022\n\nproduceNum\030\005 \001(\005\022\017"
    "\n\007itemPos\030\006 \003(\005\022\017\n\007itemNum\030\007 \003(\005\"\306\001\n\rPla"
    "yerVipInfo\022\020\n\010giftInfo\030\001 \001(\005\022\024\n\014vipAddUp"
    "Gold\030\002 \001(\005\022\017\n\007endTime\030\003 \001(\003\022\013\n\003day\030\004 \001(\005"
    "\022\016\n\006maxDay\030\005 \001(\005\022\020\n\010lastTime\030\006 \001(\003\022\014\n\004it"
    "em\030\007 \003(\003\022\021\n\tvipCardLv\030\010 \001(\005\022\030\n\020vipCardBe"
    "ginTime\030\t \001(\003\022\022\n\nvalideSecs\030\n \001(\003\"4\n\022Pas"
    "sivePlayerSkill\022\r\n\005index\030\001 \001(\005\022\017\n\007skilli"
    "d\030\002 \001(\005\"\301\001\n\013MagicWeapon\022\r\n\002id\030\001 \001(\005:\0010\022\013"
    "\n\003exp\030\002 \001(\005\022\017\n\007skillid\030\003 \003(\005\022\023\n\013advancet"
    "ime\030\004 \001(\003\022\016\n\006tempID\030\005 \001(\005\022\020\n\010needtime\030\006 "
    "\001(\005\0228\n\020passiveSkillList\030\007 \003(\0132\036.PlayerIn"
    "fo.PassivePlayerSkill\022\024\n\014firstReflush\030\010 "
    "\001(\010\"\252\002\n\rRandCJobLucky\0223\n\007package\030\001 \003(\0132\""
    ".PlayerInfo.RandCJobLucky.CJobItem\022\023\n\013ex"
    "ampackage\030\002 \003(\005\022;\n\013rolepackage\030\003 \003(\0132&.P"
    "layerInfo.RandCJobLucky.CreatureCJob\022\016\n\006"
    "jobexp\030\004 \001(\005\022\017\n\007randNum\030\005 \001(\005\032#\n\010CJobIte"
    "m\022\n\n\002id\030\001 \002(\005\022\013\n\003exp\030\002 \001(\005\032L\n\014CreatureCJ"
    "ob\022\n\n\002id\030\001 \002(\003\0220\n\004item\030\002 \003(\0132\".PlayerInf"
    "o.RandCJobLucky.CJobItem\"l\n\017LucklyTurnta"
    "ble\022\n\n\002tm\030\001 \001(\003\022\022\n\nreawidList\030\002 \003(\005\022\016\n\006i"
    "temid\030\003 \003(\005\022\013\n\003num\030\004 \003(\005\022\n\n\002id\030\005 \003(\005\022\020\n\010"
    "bindType\030\006 \003(\005\"\246\001\n\010Activity\022\017\n\007curnode\030\001"
    " \001(\005\022\017\n\007preward\030\002 \001(\005\022\020\n\010pastnode\030\003 \001(\005\022"
    "\021\n\tswapstime\030\004 \001(\003\0226\n\tvipreward\030\005 \003(\0132#."
    "PlayerInfo.ActivityYellowVipReward\022\033\n\023Tr"
    "easonKingBestTime\030\006 \003(\005\"j\n\027ActivityYello"
    "wVipReward\022\022\n\nactivityId\030\001 \002(\005\022;\n\nreward"
    "List\030\002 \003(\0132\'.PlayerInfo.ActivityYellowVi"
    "pRewardList\";\n\033ActivityYellowVipRewardLi"
    "st\022\r\n\005state\030\001 \001(\005\022\r\n\005value\030\002 \001(\005\"Q\n\017Line"
    "MapInfoList\022)\n\010lineinfo\030\001 \003(\0132\027.PlayerIn"
    "fo.LineMapInfo\022\023\n\013mysecenceid\030\002 \002(\003\"2\n\013L"
    "ineMapInfo\022\020\n\010scenceid\030\001 \002(\003\022\021\n\tplayernu"
    "m\030\002 \002(\005\"3\n\013GirlWarInfo\022$\n\007girlwar\030\001 \003(\0132"
    "\023.PlayerInfo.GirlWar\"\274\003\n\007GirlWar\022\n\n\002id\030\001"
    " \002(\005\022\014\n\004name\030\002 \001(\014\022\022\n\nfightpower\030\003 \001(\005\022\013"
    "\n\003exp\030\004 \001(\003\022\r\n\005level\030\005 \001(\005\022\n\n\002hp\030\006 \001(\005\022\021"
    "\n\tphyattack\030\007 \001(\005\022\024\n\014phyattackmax\030\010 \001(\005\022"
    "\023\n\013magicattack\030\t \001(\005\022\026\n\016magicattackmax\030\n"
    " \001(\005\022\022\n\nphydefence\030\013 \001(\005\022\017\n\007hitrate\030\014 \001("
    "\005\022\021\n\tavoidrate\030\r \001(\005\022\014\n\004crit\030\016 \001(\005\022\013\n\003un"
    "g\030\017 \001(\005\022\021\n\tmovespeed\030\020 \001(\005\022\020\n\010deadTime\030\021"
    " \001(\003\022\020\n\010starrank\030\022 \001(\005\022\017\n\007quality\030\023 \001(\005\022"
    "\r\n\005hpmax\030\024 \001(\005\022\016\n\006skill1\030\025 \001(\005\022\016\n\006skill2"
    "\030\026 \001(\005\022\016\n\006skill3\030\027 \001(\005\022\r\n\005index\030\030 \003(\005\022\r\n"
    "\005equip\030\031 \003(\005\022\r\n\005iswar\030\032 \001(\010\"\304\004\n\010LessInfo"
    "\022\014\n\004type\030\001 \003(\005\0225\n\014instanceList\030\002 \001(\0132\037.P"
    "layerInfo.InstanceInfoTwoDays\022&\n\006signin\030"
    "\003 \001(\0132\026.PlayerInfo.SignInInfo\022/\n\007counter"
    "\030\004 \001(\0132\036.PlayerInfo.CounterServiceList\022&"
    "\n\006escort\030\005 \001(\0132\026.PlayerInfo.EscortInfo\022,"
    "\n\tplayerVip\030\006 \001(\0132\031.PlayerInfo.PlayerVip"
    "Info\022.\n\010prestige\030\007 \001(\0132\034.PlayerInfo.Pres"
    "tigeInfoList\022(\n\005title\030\010 \001(\0132\031.PlayerInfo"
    ".TitleInfoList\022-\n\007fashion\030\t \001(\0132\034.Fashio"
    "nMsgProto.FashionShow\0222\n\010vitality\030\n \001(\0132"
    " .VitalityProto.ProtoVitalityInfo\022.\n\014cam"
    "pShopData\030\013 \001(\0132\030.PlayerInfo.CampShopInf"
    "o\022.\n\014festivalData\030\014 \001(\0132\030.PlayerInfo.Fes"
    "tivalInfo\022\'\n\004info\030\r \001(\0132\031.PlayerInfo.Mon"
    "eyInstance\"0\n\tStoneInfo\022#\n\004item\030\001 \003(\0132\025."
    "PlayerInfo.StoneItem\")\n\tStoneItem\022\013\n\003pos"
    "\030\001 \002(\005\022\017\n\007stoneid\030\002 \003(\005\"F\n\rDBAchShopInfo"
    "\022\014\n\004time\030\001 \001(\003\022\'\n\004item\030\002 \003(\0132\031.PlayerInf"
    "o.DBAchShopItem\";\n\rDBAchShopItem\022\n\n\002id\030\001"
    " \002(\005\022\r\n\005count\030\002 \002(\005\022\017\n\007goodsid\030\003 \003(\005\"D\n\014"
    "CampShopInfo\022\014\n\004time\030\001 \001(\003\022&\n\004item\030\002 \003(\013"
    "2\030.PlayerInfo.CampShopItem\"(\n\014CampShopIt"
    "em\022\n\n\002id\030\001 \001(\005\022\014\n\004nums\030\002 \001(\005\"D\n\014Festival"
    "Info\022\014\n\004time\030\001 \001(\003\022&\n\004item\030\002 \003(\0132\030.Playe"
    "rInfo.festivalItem\"(\n\014festivalItem\022\n\n\002id"
    "\030\001 \001(\005\022\014\n\004nums\030\002 \001(\005\"n\n\rMoneyInstance\022\r\n"
    "\005mapId\030\001 \001(\005\022\014\n\004pass\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\022"
    "\020\n\010buytimes\030\004 \001(\005\022\r\n\005reset\030\005 \001(\005\022\022\n\nupda"
    "tetime\030\006 \001(\003\"4\n\021ChallengeInstance\022\r\n\005lay"
    "er\030\001 \001(\005\022\020\n\010maxlayer\030\002 \001(\005\"1\n\020HeroInstan"
    "ceData\022\r\n\005layer\030\001 \001(\005\022\016\n\006fetchs\030\002 \003(\005\"7\n"
    "\016BranchLineInfo\022%\n\004info\030\001 \003(\0132\027.PlayerIn"
    "fo.LineMapInfo\"\?\n\023TotalBranchLineInfo\022(\n"
    "\004list\030\001 \003(\0132\032.PlayerInfo.BranchLineInfo\""
    "\034\n\014ClientIEInfo\022\014\n\004info\030\001 \002(\t\"F\n\016OnceRew"
    "ardInfo\022\027\n\017microRewardFlag\030\001 \001(\010\022\033\n\023firs"
    "tChargeOverFlag\030\002 \001(\010\"T\n\rGroupInstance\022\021"
    "\n\ttimeReset\030\001 \001(\003\0220\n\tgroupList\030\002 \003(\0132\035.P"
    "layerInfo.InstanceGroupList\"]\n\021InstanceG"
    "roupList\022\r\n\005mapId\030\001 \002(\005\022\013\n\003num\030\002 \001(\005\022\016\n\006"
    "vipnum\030\003 \001(\005\022\016\n\006buynum\030\004 \001(\005\022\014\n\004pass\030\005 \001"
    "(\005\"<\n\rEliteInstance\022+\n\004list\030\001 \003(\0132\035.Play"
    "erInfo.InstanceEliteList\"Z\n\021InstanceElit"
    "eList\022\r\n\005mapId\030\001 \002(\005\022\014\n\004pass\030\002 \001(\005\022\013\n\003nu"
    "m\030\003 \001(\005\022\014\n\004time\030\004 \001(\005\022\r\n\005reset\030\005 \001(\005\"D\n\021"
    "CauchemarInstance\022/\n\004list\030\001 \003(\0132!.Player"
    "Info.InstanceCauchemarList\"^\n\025InstanceCa"
    "uchemarList\022\r\n\005mapId\030\001 \002(\005\022\014\n\004pass\030\002 \001(\005"
    "\022\013\n\003num\030\003 \001(\005\022\014\n\004time\030\004 \001(\005\022\r\n\005reset\030\005 \001"
    "(\005\"B\n\020AdvancedInstance\022.\n\004list\030\001 \003(\0132 .P"
    "layerInfo.InstanceAdvancedList\"]\n\024Instan"
    "ceAdvancedList\022\r\n\005mapId\030\001 \002(\005\022\014\n\004pass\030\002 "
    "\001(\005\022\013\n\003num\030\003 \001(\005\022\014\n\004time\030\004 \001(\005\022\r\n\005reset\030"
    "\005 \001(\005\"M\n\014BaseShopInfo\022\021\n\tflushTime\030\001 \001(\003"
    "\022*\n\004list\030\002 \003(\0132\034.PlayerInfo.BaseShopInfo"
    "List\"L\n\020BaseShopInfoList\022\014\n\004type\030\001 \002(\005\022*"
    "\n\004data\030\002 \003(\0132\034.PlayerInfo.BaseShopInfoDa"
    "ta\",\n\020BaseShopInfoData\022\n\n\002id\030\001 \001(\005\022\014\n\004nu"
    "ms\030\002 \001(\005\"|\n\nAnswerInfo\022\024\n\014currentIndex\030\001"
    " \001(\005\022\026\n\016currentTitleID\030\002 \001(\005\022\023\n\013rightCou"
    "nts\030\003 \001(\005\022\023\n\013wrongCounts\030\004 \001(\005\022\026\n\016titleA"
    "nswerIds\030\005 \003(\005", 17174);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharLogin/PlayerInfo.proto", &protobuf_RegisterTypes);
  PlayerInfo::default_instance_ = new PlayerInfo();
  ArenaDataInfo::default_instance_ = new ArenaDataInfo();
  ArenaInfo::default_instance_ = new ArenaInfo();
  ArenaBaseInfo::default_instance_ = new ArenaBaseInfo();
  ArenaChallengeRank::default_instance_ = new ArenaChallengeRank();
  ArenaHistoryReward::default_instance_ = new ArenaHistoryReward();
  RingDBData::default_instance_ = new RingDBData();
  SaveTypeInfo::default_instance_ = new SaveTypeInfo();
  WSaveTypeInfo::default_instance_ = new WSaveTypeInfo();
  BaseInfo::default_instance_ = new BaseInfo();
  BattleInfo::default_instance_ = new BattleInfo();
  QuestInfo::default_instance_ = new QuestInfo();
  WeekQuestItem::default_instance_ = new WeekQuestItem();
  WeekQuest::default_instance_ = new WeekQuest();
  NewQuestInfo::default_instance_ = new NewQuestInfo();
  ActiveQuest::default_instance_ = new ActiveQuest();
  DailyQuest::default_instance_ = new DailyQuest();
  ClanQuest::default_instance_ = new ClanQuest();
  CampQuest::default_instance_ = new CampQuest();
  POneTalentSkill::default_instance_ = new POneTalentSkill();
  SkillInfo::default_instance_ = new SkillInfo();
  BuffInfo::default_instance_ = new BuffInfo();
  CDInfo::default_instance_ = new CDInfo();
  ChannelCD::default_instance_ = new ChannelCD();
  ContainerInfo::default_instance_ = new ContainerInfo();
  PlayerTypeInfo::default_instance_ = new PlayerTypeInfo();
  EquipQuickInfo::default_instance_ = new EquipQuickInfo();
  PackageInfo::default_instance_ = new PackageInfo();
  StoreHouseInfo::default_instance_ = new StoreHouseInfo();
  MonitorInfo::default_instance_ = new MonitorInfo();
  SettingInfo::default_instance_ = new SettingInfo();
  HorseInfo::default_instance_ = new HorseInfo();
  SkinInfo::default_instance_ = new SkinInfo();
  ItemInfo::default_instance_ = new ItemInfo();
  AttrValue::default_instance_ = new AttrValue();
  QuickContainer::default_instance_ = new QuickContainer();
  WPlayerInfo::default_instance_ = new WPlayerInfo();
  FriendInfoList::default_instance_ = new FriendInfoList();
  FriendInfo::default_instance_ = new FriendInfo();
  InstanceInfoList::default_instance_ = new InstanceInfoList();
  InstanceDiffculty::default_instance_ = new InstanceDiffculty();
  InstanceVip::default_instance_ = new InstanceVip();
  InstanceInfoTwoDays::default_instance_ = new InstanceInfoTwoDays();
  PrestigeInfoList::default_instance_ = new PrestigeInfoList();
  PrestigeInfo::default_instance_ = new PrestigeInfo();
  PrestigeContent::default_instance_ = new PrestigeContent();
  TitleInfoList::default_instance_ = new TitleInfoList();
  TitleInfo::default_instance_ = new TitleInfo();
  TitleStatus::default_instance_ = new TitleStatus();
  DestinationInfoList::default_instance_ = new DestinationInfoList();
  DestinationInfo::default_instance_ = new DestinationInfo();
  DestinationContent::default_instance_ = new DestinationContent();
  SignInInfo::default_instance_ = new SignInInfo();
  CounterService::default_instance_ = new CounterService();
  CounterServiceList::default_instance_ = new CounterServiceList();
  EscortInfo::default_instance_ = new EscortInfo();
  DanLuInfo::default_instance_ = new DanLuInfo();
  PlayerVipInfo::default_instance_ = new PlayerVipInfo();
  PassivePlayerSkill::default_instance_ = new PassivePlayerSkill();
  MagicWeapon::default_instance_ = new MagicWeapon();
  RandCJobLucky::default_instance_ = new RandCJobLucky();
  RandCJobLucky_CJobItem::default_instance_ = new RandCJobLucky_CJobItem();
  RandCJobLucky_CreatureCJob::default_instance_ = new RandCJobLucky_CreatureCJob();
  LucklyTurntable::default_instance_ = new LucklyTurntable();
  Activity::default_instance_ = new Activity();
  ActivityYellowVipReward::default_instance_ = new ActivityYellowVipReward();
  ActivityYellowVipRewardList::default_instance_ = new ActivityYellowVipRewardList();
  LineMapInfoList::default_instance_ = new LineMapInfoList();
  LineMapInfo::default_instance_ = new LineMapInfo();
  GirlWarInfo::default_instance_ = new GirlWarInfo();
  GirlWar::default_instance_ = new GirlWar();
  LessInfo::default_instance_ = new LessInfo();
  StoneInfo::default_instance_ = new StoneInfo();
  StoneItem::default_instance_ = new StoneItem();
  DBAchShopInfo::default_instance_ = new DBAchShopInfo();
  DBAchShopItem::default_instance_ = new DBAchShopItem();
  CampShopInfo::default_instance_ = new CampShopInfo();
  CampShopItem::default_instance_ = new CampShopItem();
  FestivalInfo::default_instance_ = new FestivalInfo();
  festivalItem::default_instance_ = new festivalItem();
  MoneyInstance::default_instance_ = new MoneyInstance();
  ChallengeInstance::default_instance_ = new ChallengeInstance();
  HeroInstanceData::default_instance_ = new HeroInstanceData();
  BranchLineInfo::default_instance_ = new BranchLineInfo();
  TotalBranchLineInfo::default_instance_ = new TotalBranchLineInfo();
  ClientIEInfo::default_instance_ = new ClientIEInfo();
  OnceRewardInfo::default_instance_ = new OnceRewardInfo();
  GroupInstance::default_instance_ = new GroupInstance();
  InstanceGroupList::default_instance_ = new InstanceGroupList();
  EliteInstance::default_instance_ = new EliteInstance();
  InstanceEliteList::default_instance_ = new InstanceEliteList();
  CauchemarInstance::default_instance_ = new CauchemarInstance();
  InstanceCauchemarList::default_instance_ = new InstanceCauchemarList();
  AdvancedInstance::default_instance_ = new AdvancedInstance();
  InstanceAdvancedList::default_instance_ = new InstanceAdvancedList();
  BaseShopInfo::default_instance_ = new BaseShopInfo();
  BaseShopInfoList::default_instance_ = new BaseShopInfoList();
  BaseShopInfoData::default_instance_ = new BaseShopInfoData();
  AnswerInfo::default_instance_ = new AnswerInfo();
  PlayerInfo::default_instance_->InitAsDefaultInstance();
  ArenaDataInfo::default_instance_->InitAsDefaultInstance();
  ArenaInfo::default_instance_->InitAsDefaultInstance();
  ArenaBaseInfo::default_instance_->InitAsDefaultInstance();
  ArenaChallengeRank::default_instance_->InitAsDefaultInstance();
  ArenaHistoryReward::default_instance_->InitAsDefaultInstance();
  RingDBData::default_instance_->InitAsDefaultInstance();
  SaveTypeInfo::default_instance_->InitAsDefaultInstance();
  WSaveTypeInfo::default_instance_->InitAsDefaultInstance();
  BaseInfo::default_instance_->InitAsDefaultInstance();
  BattleInfo::default_instance_->InitAsDefaultInstance();
  QuestInfo::default_instance_->InitAsDefaultInstance();
  WeekQuestItem::default_instance_->InitAsDefaultInstance();
  WeekQuest::default_instance_->InitAsDefaultInstance();
  NewQuestInfo::default_instance_->InitAsDefaultInstance();
  ActiveQuest::default_instance_->InitAsDefaultInstance();
  DailyQuest::default_instance_->InitAsDefaultInstance();
  ClanQuest::default_instance_->InitAsDefaultInstance();
  CampQuest::default_instance_->InitAsDefaultInstance();
  POneTalentSkill::default_instance_->InitAsDefaultInstance();
  SkillInfo::default_instance_->InitAsDefaultInstance();
  BuffInfo::default_instance_->InitAsDefaultInstance();
  CDInfo::default_instance_->InitAsDefaultInstance();
  ChannelCD::default_instance_->InitAsDefaultInstance();
  ContainerInfo::default_instance_->InitAsDefaultInstance();
  PlayerTypeInfo::default_instance_->InitAsDefaultInstance();
  EquipQuickInfo::default_instance_->InitAsDefaultInstance();
  PackageInfo::default_instance_->InitAsDefaultInstance();
  StoreHouseInfo::default_instance_->InitAsDefaultInstance();
  MonitorInfo::default_instance_->InitAsDefaultInstance();
  SettingInfo::default_instance_->InitAsDefaultInstance();
  HorseInfo::default_instance_->InitAsDefaultInstance();
  SkinInfo::default_instance_->InitAsDefaultInstance();
  ItemInfo::default_instance_->InitAsDefaultInstance();
  AttrValue::default_instance_->InitAsDefaultInstance();
  QuickContainer::default_instance_->InitAsDefaultInstance();
  WPlayerInfo::default_instance_->InitAsDefaultInstance();
  FriendInfoList::default_instance_->InitAsDefaultInstance();
  FriendInfo::default_instance_->InitAsDefaultInstance();
  InstanceInfoList::default_instance_->InitAsDefaultInstance();
  InstanceDiffculty::default_instance_->InitAsDefaultInstance();
  InstanceVip::default_instance_->InitAsDefaultInstance();
  InstanceInfoTwoDays::default_instance_->InitAsDefaultInstance();
  PrestigeInfoList::default_instance_->InitAsDefaultInstance();
  PrestigeInfo::default_instance_->InitAsDefaultInstance();
  PrestigeContent::default_instance_->InitAsDefaultInstance();
  TitleInfoList::default_instance_->InitAsDefaultInstance();
  TitleInfo::default_instance_->InitAsDefaultInstance();
  TitleStatus::default_instance_->InitAsDefaultInstance();
  DestinationInfoList::default_instance_->InitAsDefaultInstance();
  DestinationInfo::default_instance_->InitAsDefaultInstance();
  DestinationContent::default_instance_->InitAsDefaultInstance();
  SignInInfo::default_instance_->InitAsDefaultInstance();
  CounterService::default_instance_->InitAsDefaultInstance();
  CounterServiceList::default_instance_->InitAsDefaultInstance();
  EscortInfo::default_instance_->InitAsDefaultInstance();
  DanLuInfo::default_instance_->InitAsDefaultInstance();
  PlayerVipInfo::default_instance_->InitAsDefaultInstance();
  PassivePlayerSkill::default_instance_->InitAsDefaultInstance();
  MagicWeapon::default_instance_->InitAsDefaultInstance();
  RandCJobLucky::default_instance_->InitAsDefaultInstance();
  RandCJobLucky_CJobItem::default_instance_->InitAsDefaultInstance();
  RandCJobLucky_CreatureCJob::default_instance_->InitAsDefaultInstance();
  LucklyTurntable::default_instance_->InitAsDefaultInstance();
  Activity::default_instance_->InitAsDefaultInstance();
  ActivityYellowVipReward::default_instance_->InitAsDefaultInstance();
  ActivityYellowVipRewardList::default_instance_->InitAsDefaultInstance();
  LineMapInfoList::default_instance_->InitAsDefaultInstance();
  LineMapInfo::default_instance_->InitAsDefaultInstance();
  GirlWarInfo::default_instance_->InitAsDefaultInstance();
  GirlWar::default_instance_->InitAsDefaultInstance();
  LessInfo::default_instance_->InitAsDefaultInstance();
  StoneInfo::default_instance_->InitAsDefaultInstance();
  StoneItem::default_instance_->InitAsDefaultInstance();
  DBAchShopInfo::default_instance_->InitAsDefaultInstance();
  DBAchShopItem::default_instance_->InitAsDefaultInstance();
  CampShopInfo::default_instance_->InitAsDefaultInstance();
  CampShopItem::default_instance_->InitAsDefaultInstance();
  FestivalInfo::default_instance_->InitAsDefaultInstance();
  festivalItem::default_instance_->InitAsDefaultInstance();
  MoneyInstance::default_instance_->InitAsDefaultInstance();
  ChallengeInstance::default_instance_->InitAsDefaultInstance();
  HeroInstanceData::default_instance_->InitAsDefaultInstance();
  BranchLineInfo::default_instance_->InitAsDefaultInstance();
  TotalBranchLineInfo::default_instance_->InitAsDefaultInstance();
  ClientIEInfo::default_instance_->InitAsDefaultInstance();
  OnceRewardInfo::default_instance_->InitAsDefaultInstance();
  GroupInstance::default_instance_->InitAsDefaultInstance();
  InstanceGroupList::default_instance_->InitAsDefaultInstance();
  EliteInstance::default_instance_->InitAsDefaultInstance();
  InstanceEliteList::default_instance_->InitAsDefaultInstance();
  CauchemarInstance::default_instance_->InitAsDefaultInstance();
  InstanceCauchemarList::default_instance_->InitAsDefaultInstance();
  AdvancedInstance::default_instance_->InitAsDefaultInstance();
  InstanceAdvancedList::default_instance_->InitAsDefaultInstance();
  BaseShopInfo::default_instance_->InitAsDefaultInstance();
  BaseShopInfoList::default_instance_->InitAsDefaultInstance();
  BaseShopInfoData::default_instance_->InitAsDefaultInstance();
  AnswerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharLogin_2fPlayerInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharLogin_2fPlayerInfo_2eproto {
  StaticDescriptorInitializer_CharLogin_2fPlayerInfo_2eproto() {
    protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  }
} static_descriptor_initializer_CharLogin_2fPlayerInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PlayerInfo::kBsinfoFieldNumber;
const int PlayerInfo::kBinfoFieldNumber;
const int PlayerInfo::kQuestinfoFieldNumber;
const int PlayerInfo::kSkillFieldNumber;
const int PlayerInfo::kCdFieldNumber;
const int PlayerInfo::kMtFieldNumber;
const int PlayerInfo::kEquipquickFieldNumber;
const int PlayerInfo::kGirlwarinfoFieldNumber;
const int PlayerInfo::kCounterFieldNumber;
const int PlayerInfo::kHorseFieldNumber;
const int PlayerInfo::kDanluFieldNumber;
const int PlayerInfo::kMagicwFieldNumber;
const int PlayerInfo::kCjobFieldNumber;
const int PlayerInfo::kLucktableFieldNumber;
const int PlayerInfo::kActivityFieldNumber;
const int PlayerInfo::kDestinationFieldNumber;
const int PlayerInfo::kInstanceListFieldNumber;
const int PlayerInfo::kSigninFieldNumber;
const int PlayerInfo::kEscortFieldNumber;
const int PlayerInfo::kPlayerVipFieldNumber;
const int PlayerInfo::kPrestigeFieldNumber;
const int PlayerInfo::kTitleFieldNumber;
const int PlayerInfo::kFashionFieldNumber;
const int PlayerInfo::kVitalityFieldNumber;
const int PlayerInfo::kCampShopDataFieldNumber;
const int PlayerInfo::kFestivalDataFieldNumber;
const int PlayerInfo::kInfoFieldNumber;
const int PlayerInfo::kOnceRewardFieldNumber;
const int PlayerInfo::kRingDataFieldNumber;
const int PlayerInfo::kGroupInfoFieldNumber;
const int PlayerInfo::kChristmasDataFieldNumber;
const int PlayerInfo::kEliteInfoFieldNumber;
const int PlayerInfo::kCauchemarInfoFieldNumber;
const int PlayerInfo::kArenaDataFieldNumber;
const int PlayerInfo::kChallengedataFieldNumber;
const int PlayerInfo::kHerodataFieldNumber;
const int PlayerInfo::kSmagicFieldNumber;
const int PlayerInfo::kHeartmagicFieldNumber;
const int PlayerInfo::kAdvancedFieldNumber;
const int PlayerInfo::kBaseShopInfoFieldNumber;
const int PlayerInfo::kAnswerInfoFieldNumber;
#endif  // !_MSC_VER

PlayerInfo::PlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerInfo::InitAsDefaultInstance() {
  bsinfo_ = const_cast< ::PlayerInfo::BaseInfo*>(&::PlayerInfo::BaseInfo::default_instance());
  binfo_ = const_cast< ::PlayerInfo::BattleInfo*>(&::PlayerInfo::BattleInfo::default_instance());
  questinfo_ = const_cast< ::PlayerInfo::QuestInfo*>(&::PlayerInfo::QuestInfo::default_instance());
  skill_ = const_cast< ::PlayerInfo::SkillInfo*>(&::PlayerInfo::SkillInfo::default_instance());
  cd_ = const_cast< ::PlayerInfo::CDInfo*>(&::PlayerInfo::CDInfo::default_instance());
  mt_ = const_cast< ::PlayerInfo::MonitorInfo*>(&::PlayerInfo::MonitorInfo::default_instance());
  equipquick_ = const_cast< ::PlayerInfo::EquipQuickInfo*>(&::PlayerInfo::EquipQuickInfo::default_instance());
  girlwarinfo_ = const_cast< ::PlayerInfo::GirlWarInfo*>(&::PlayerInfo::GirlWarInfo::default_instance());
  counter_ = const_cast< ::PlayerInfo::CounterServiceList*>(&::PlayerInfo::CounterServiceList::default_instance());
  horse_ = const_cast< ::PlayerInfo::HorseInfo*>(&::PlayerInfo::HorseInfo::default_instance());
  danlu_ = const_cast< ::PlayerInfo::DanLuInfo*>(&::PlayerInfo::DanLuInfo::default_instance());
  magicw_ = const_cast< ::PlayerInfo::MagicWeapon*>(&::PlayerInfo::MagicWeapon::default_instance());
  cjob_ = const_cast< ::PlayerInfo::RandCJobLucky*>(&::PlayerInfo::RandCJobLucky::default_instance());
  lucktable_ = const_cast< ::PlayerInfo::LucklyTurntable*>(&::PlayerInfo::LucklyTurntable::default_instance());
  activity_ = const_cast< ::PlayerInfo::Activity*>(&::PlayerInfo::Activity::default_instance());
  destination_ = const_cast< ::PlayerInfo::DestinationInfoList*>(&::PlayerInfo::DestinationInfoList::default_instance());
  instancelist_ = const_cast< ::PlayerInfo::InstanceInfoTwoDays*>(&::PlayerInfo::InstanceInfoTwoDays::default_instance());
  signin_ = const_cast< ::PlayerInfo::SignInInfo*>(&::PlayerInfo::SignInInfo::default_instance());
  escort_ = const_cast< ::PlayerInfo::EscortInfo*>(&::PlayerInfo::EscortInfo::default_instance());
  playervip_ = const_cast< ::PlayerInfo::PlayerVipInfo*>(&::PlayerInfo::PlayerVipInfo::default_instance());
  prestige_ = const_cast< ::PlayerInfo::PrestigeInfoList*>(&::PlayerInfo::PrestigeInfoList::default_instance());
  title_ = const_cast< ::PlayerInfo::TitleInfoList*>(&::PlayerInfo::TitleInfoList::default_instance());
  fashion_ = const_cast< ::FashionMsgProto::FashionShow*>(&::FashionMsgProto::FashionShow::default_instance());
  vitality_ = const_cast< ::VitalityProto::ProtoVitalityInfo*>(&::VitalityProto::ProtoVitalityInfo::default_instance());
  campshopdata_ = const_cast< ::PlayerInfo::CampShopInfo*>(&::PlayerInfo::CampShopInfo::default_instance());
  festivaldata_ = const_cast< ::PlayerInfo::FestivalInfo*>(&::PlayerInfo::FestivalInfo::default_instance());
  info_ = const_cast< ::PlayerInfo::MoneyInstance*>(&::PlayerInfo::MoneyInstance::default_instance());
  oncereward_ = const_cast< ::PlayerInfo::OnceRewardInfo*>(&::PlayerInfo::OnceRewardInfo::default_instance());
  ringdata_ = const_cast< ::PlayerInfo::RingDBData*>(&::PlayerInfo::RingDBData::default_instance());
  groupinfo_ = const_cast< ::PlayerInfo::GroupInstance*>(&::PlayerInfo::GroupInstance::default_instance());
  christmasdata_ = const_cast< ::ChristmasDB::ChristmasAllData*>(&::ChristmasDB::ChristmasAllData::default_instance());
  eliteinfo_ = const_cast< ::PlayerInfo::EliteInstance*>(&::PlayerInfo::EliteInstance::default_instance());
  cauchemarinfo_ = const_cast< ::PlayerInfo::CauchemarInstance*>(&::PlayerInfo::CauchemarInstance::default_instance());
  arenadata_ = const_cast< ::PlayerInfo::ArenaDataInfo*>(&::PlayerInfo::ArenaDataInfo::default_instance());
  challengedata_ = const_cast< ::PlayerInfo::ChallengeInstance*>(&::PlayerInfo::ChallengeInstance::default_instance());
  herodata_ = const_cast< ::PlayerInfo::HeroInstanceData*>(&::PlayerInfo::HeroInstanceData::default_instance());
  smagic_ = const_cast< ::PlayerInfo::MagicWeapon*>(&::PlayerInfo::MagicWeapon::default_instance());
  heartmagic_ = const_cast< ::PlayerInfo::MagicWeapon*>(&::PlayerInfo::MagicWeapon::default_instance());
  advanced_ = const_cast< ::PlayerInfo::AdvancedInstance*>(&::PlayerInfo::AdvancedInstance::default_instance());
  baseshopinfo_ = const_cast< ::PlayerInfo::BaseShopInfo*>(&::PlayerInfo::BaseShopInfo::default_instance());
  answerinfo_ = const_cast< ::PlayerInfo::AnswerInfo*>(&::PlayerInfo::AnswerInfo::default_instance());
}

PlayerInfo::PlayerInfo(const PlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  bsinfo_ = NULL;
  binfo_ = NULL;
  questinfo_ = NULL;
  skill_ = NULL;
  cd_ = NULL;
  mt_ = NULL;
  equipquick_ = NULL;
  girlwarinfo_ = NULL;
  counter_ = NULL;
  horse_ = NULL;
  danlu_ = NULL;
  magicw_ = NULL;
  cjob_ = NULL;
  lucktable_ = NULL;
  activity_ = NULL;
  destination_ = NULL;
  instancelist_ = NULL;
  signin_ = NULL;
  escort_ = NULL;
  playervip_ = NULL;
  prestige_ = NULL;
  title_ = NULL;
  fashion_ = NULL;
  vitality_ = NULL;
  campshopdata_ = NULL;
  festivaldata_ = NULL;
  info_ = NULL;
  oncereward_ = NULL;
  ringdata_ = NULL;
  groupinfo_ = NULL;
  christmasdata_ = NULL;
  eliteinfo_ = NULL;
  cauchemarinfo_ = NULL;
  arenadata_ = NULL;
  challengedata_ = NULL;
  herodata_ = NULL;
  smagic_ = NULL;
  heartmagic_ = NULL;
  advanced_ = NULL;
  baseshopinfo_ = NULL;
  answerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerInfo::~PlayerInfo() {
  SharedDtor();
}

void PlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete bsinfo_;
    delete binfo_;
    delete questinfo_;
    delete skill_;
    delete cd_;
    delete mt_;
    delete equipquick_;
    delete girlwarinfo_;
    delete counter_;
    delete horse_;
    delete danlu_;
    delete magicw_;
    delete cjob_;
    delete lucktable_;
    delete activity_;
    delete destination_;
    delete instancelist_;
    delete signin_;
    delete escort_;
    delete playervip_;
    delete prestige_;
    delete title_;
    delete fashion_;
    delete vitality_;
    delete campshopdata_;
    delete festivaldata_;
    delete info_;
    delete oncereward_;
    delete ringdata_;
    delete groupinfo_;
    delete christmasdata_;
    delete eliteinfo_;
    delete cauchemarinfo_;
    delete arenadata_;
    delete challengedata_;
    delete herodata_;
    delete smagic_;
    delete heartmagic_;
    delete advanced_;
    delete baseshopinfo_;
    delete answerinfo_;
  }
}

void PlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerInfo_descriptor_;
}

const PlayerInfo& PlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

PlayerInfo* PlayerInfo::default_instance_ = NULL;

PlayerInfo* PlayerInfo::New() const {
  return new PlayerInfo;
}

void PlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_bsinfo()) {
      if (bsinfo_ != NULL) bsinfo_->::PlayerInfo::BaseInfo::Clear();
    }
    if (has_binfo()) {
      if (binfo_ != NULL) binfo_->::PlayerInfo::BattleInfo::Clear();
    }
    if (has_questinfo()) {
      if (questinfo_ != NULL) questinfo_->::PlayerInfo::QuestInfo::Clear();
    }
    if (has_skill()) {
      if (skill_ != NULL) skill_->::PlayerInfo::SkillInfo::Clear();
    }
    if (has_cd()) {
      if (cd_ != NULL) cd_->::PlayerInfo::CDInfo::Clear();
    }
    if (has_mt()) {
      if (mt_ != NULL) mt_->::PlayerInfo::MonitorInfo::Clear();
    }
    if (has_equipquick()) {
      if (equipquick_ != NULL) equipquick_->::PlayerInfo::EquipQuickInfo::Clear();
    }
    if (has_girlwarinfo()) {
      if (girlwarinfo_ != NULL) girlwarinfo_->::PlayerInfo::GirlWarInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_counter()) {
      if (counter_ != NULL) counter_->::PlayerInfo::CounterServiceList::Clear();
    }
    if (has_horse()) {
      if (horse_ != NULL) horse_->::PlayerInfo::HorseInfo::Clear();
    }
    if (has_danlu()) {
      if (danlu_ != NULL) danlu_->::PlayerInfo::DanLuInfo::Clear();
    }
    if (has_magicw()) {
      if (magicw_ != NULL) magicw_->::PlayerInfo::MagicWeapon::Clear();
    }
    if (has_cjob()) {
      if (cjob_ != NULL) cjob_->::PlayerInfo::RandCJobLucky::Clear();
    }
    if (has_lucktable()) {
      if (lucktable_ != NULL) lucktable_->::PlayerInfo::LucklyTurntable::Clear();
    }
    if (has_activity()) {
      if (activity_ != NULL) activity_->::PlayerInfo::Activity::Clear();
    }
    if (has_destination()) {
      if (destination_ != NULL) destination_->::PlayerInfo::DestinationInfoList::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_instancelist()) {
      if (instancelist_ != NULL) instancelist_->::PlayerInfo::InstanceInfoTwoDays::Clear();
    }
    if (has_signin()) {
      if (signin_ != NULL) signin_->::PlayerInfo::SignInInfo::Clear();
    }
    if (has_escort()) {
      if (escort_ != NULL) escort_->::PlayerInfo::EscortInfo::Clear();
    }
    if (has_playervip()) {
      if (playervip_ != NULL) playervip_->::PlayerInfo::PlayerVipInfo::Clear();
    }
    if (has_prestige()) {
      if (prestige_ != NULL) prestige_->::PlayerInfo::PrestigeInfoList::Clear();
    }
    if (has_title()) {
      if (title_ != NULL) title_->::PlayerInfo::TitleInfoList::Clear();
    }
    if (has_fashion()) {
      if (fashion_ != NULL) fashion_->::FashionMsgProto::FashionShow::Clear();
    }
    if (has_vitality()) {
      if (vitality_ != NULL) vitality_->::VitalityProto::ProtoVitalityInfo::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_campshopdata()) {
      if (campshopdata_ != NULL) campshopdata_->::PlayerInfo::CampShopInfo::Clear();
    }
    if (has_festivaldata()) {
      if (festivaldata_ != NULL) festivaldata_->::PlayerInfo::FestivalInfo::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerInfo::MoneyInstance::Clear();
    }
    if (has_oncereward()) {
      if (oncereward_ != NULL) oncereward_->::PlayerInfo::OnceRewardInfo::Clear();
    }
    if (has_ringdata()) {
      if (ringdata_ != NULL) ringdata_->::PlayerInfo::RingDBData::Clear();
    }
    if (has_groupinfo()) {
      if (groupinfo_ != NULL) groupinfo_->::PlayerInfo::GroupInstance::Clear();
    }
    if (has_christmasdata()) {
      if (christmasdata_ != NULL) christmasdata_->::ChristmasDB::ChristmasAllData::Clear();
    }
    if (has_eliteinfo()) {
      if (eliteinfo_ != NULL) eliteinfo_->::PlayerInfo::EliteInstance::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_cauchemarinfo()) {
      if (cauchemarinfo_ != NULL) cauchemarinfo_->::PlayerInfo::CauchemarInstance::Clear();
    }
    if (has_arenadata()) {
      if (arenadata_ != NULL) arenadata_->::PlayerInfo::ArenaDataInfo::Clear();
    }
    if (has_challengedata()) {
      if (challengedata_ != NULL) challengedata_->::PlayerInfo::ChallengeInstance::Clear();
    }
    if (has_herodata()) {
      if (herodata_ != NULL) herodata_->::PlayerInfo::HeroInstanceData::Clear();
    }
    if (has_smagic()) {
      if (smagic_ != NULL) smagic_->::PlayerInfo::MagicWeapon::Clear();
    }
    if (has_heartmagic()) {
      if (heartmagic_ != NULL) heartmagic_->::PlayerInfo::MagicWeapon::Clear();
    }
    if (has_advanced()) {
      if (advanced_ != NULL) advanced_->::PlayerInfo::AdvancedInstance::Clear();
    }
    if (has_baseshopinfo()) {
      if (baseshopinfo_ != NULL) baseshopinfo_->::PlayerInfo::BaseShopInfo::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_answerinfo()) {
      if (answerinfo_ != NULL) answerinfo_->::PlayerInfo::AnswerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required .PlayerInfo.BaseInfo bsinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bsinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_binfo;
        break;
      }

      // optional .PlayerInfo.BattleInfo binfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_binfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_questinfo;
        break;
      }

      // optional .PlayerInfo.QuestInfo questinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skill;
        break;
      }

      // optional .PlayerInfo.SkillInfo skill = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cd;
        break;
      }

      // optional .PlayerInfo.CDInfo cd = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_mt;
        break;
      }

      // optional .PlayerInfo.MonitorInfo mt = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_equipquick;
        break;
      }

      // optional .PlayerInfo.EquipQuickInfo equipquick = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipquick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipquick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_girlwarinfo;
        break;
      }

      // optional .PlayerInfo.GirlWarInfo girlwarinfo = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_girlwarinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_girlwarinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_counter;
        break;
      }

      // optional .PlayerInfo.CounterServiceList counter = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_horse;
        break;
      }

      // optional .PlayerInfo.HorseInfo horse = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_horse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_horse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_danlu;
        break;
      }

      // optional .PlayerInfo.DanLuInfo danlu = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_danlu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_danlu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_magicw;
        break;
      }

      // optional .PlayerInfo.MagicWeapon magicw = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_magicw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_magicw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_cjob;
        break;
      }

      // optional .PlayerInfo.RandCJobLucky cjob = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cjob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cjob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_lucktable;
        break;
      }

      // optional .PlayerInfo.LucklyTurntable lucktable = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lucktable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lucktable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_activity;
        break;
      }

      // optional .PlayerInfo.Activity activity = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_destination;
        break;
      }

      // optional .PlayerInfo.DestinationInfoList destination = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_instanceList;
        break;
      }

      // optional .PlayerInfo.InstanceInfoTwoDays instanceList = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instanceList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instancelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_signin;
        break;
      }

      // optional .PlayerInfo.SignInInfo signin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_escort;
        break;
      }

      // optional .PlayerInfo.EscortInfo escort = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_escort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_escort()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_playerVip;
        break;
      }

      // optional .PlayerInfo.PlayerVipInfo playerVip = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerVip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playervip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_prestige;
        break;
      }

      // optional .PlayerInfo.PrestigeInfoList prestige = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prestige:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prestige()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_title;
        break;
      }

      // optional .PlayerInfo.TitleInfoList title = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_fashion;
        break;
      }

      // optional .FashionMsgProto.FashionShow fashion = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_vitality;
        break;
      }

      // optional .VitalityProto.ProtoVitalityInfo vitality = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vitality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vitality()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_campShopData;
        break;
      }

      // optional .PlayerInfo.CampShopInfo campShopData = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_campShopData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_campshopdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_festivalData;
        break;
      }

      // optional .PlayerInfo.FestivalInfo festivalData = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_festivaldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_info;
        break;
      }

      // optional .PlayerInfo.MoneyInstance info = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_onceReward;
        break;
      }

      // optional .PlayerInfo.OnceRewardInfo onceReward = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onceReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oncereward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_ringData;
        break;
      }

      // optional .PlayerInfo.RingDBData ringData = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ringData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ringdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_groupInfo;
        break;
      }

      // optional .PlayerInfo.GroupInstance groupInfo = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groupinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_christmasData;
        break;
      }

      // optional .ChristmasDB.ChristmasAllData christmasData = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_christmasData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_christmasdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_eliteInfo;
        break;
      }

      // optional .PlayerInfo.EliteInstance eliteInfo = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eliteInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eliteinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_cauchemarInfo;
        break;
      }

      // optional .PlayerInfo.CauchemarInstance cauchemarInfo = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cauchemarInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cauchemarinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_arenaData;
        break;
      }

      // optional .PlayerInfo.ArenaDataInfo arenaData = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arenaData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arenadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_challengedata;
        break;
      }

      // optional .PlayerInfo.ChallengeInstance challengedata = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challengedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challengedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_herodata;
        break;
      }

      // optional .PlayerInfo.HeroInstanceData herodata = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_herodata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_herodata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_smagic;
        break;
      }

      // optional .PlayerInfo.MagicWeapon smagic = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smagic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smagic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_heartmagic;
        break;
      }

      // optional .PlayerInfo.MagicWeapon heartmagic = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heartmagic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartmagic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_advanced;
        break;
      }

      // optional .PlayerInfo.AdvancedInstance advanced = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_advanced:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advanced()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_baseShopInfo;
        break;
      }

      // optional .PlayerInfo.BaseShopInfo baseShopInfo = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseShopInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseshopinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_answerInfo;
        break;
      }

      // optional .PlayerInfo.AnswerInfo answerInfo = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_answerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_answerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required .PlayerInfo.BaseInfo bsinfo = 1;
  if (has_bsinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->bsinfo(), output);
  }

  // optional .PlayerInfo.BattleInfo binfo = 2;
  if (has_binfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->binfo(), output);
  }

  // optional .PlayerInfo.QuestInfo questinfo = 3;
  if (has_questinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->questinfo(), output);
  }

  // optional .PlayerInfo.SkillInfo skill = 4;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skill(), output);
  }

  // optional .PlayerInfo.CDInfo cd = 5;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cd(), output);
  }

  // optional .PlayerInfo.MonitorInfo mt = 6;
  if (has_mt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->mt(), output);
  }

  // optional .PlayerInfo.EquipQuickInfo equipquick = 7;
  if (has_equipquick()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->equipquick(), output);
  }

  // optional .PlayerInfo.GirlWarInfo girlwarinfo = 8;
  if (has_girlwarinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->girlwarinfo(), output);
  }

  // optional .PlayerInfo.CounterServiceList counter = 9;
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->counter(), output);
  }

  // optional .PlayerInfo.HorseInfo horse = 10;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->horse(), output);
  }

  // optional .PlayerInfo.DanLuInfo danlu = 11;
  if (has_danlu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->danlu(), output);
  }

  // optional .PlayerInfo.MagicWeapon magicw = 12;
  if (has_magicw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->magicw(), output);
  }

  // optional .PlayerInfo.RandCJobLucky cjob = 13;
  if (has_cjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->cjob(), output);
  }

  // optional .PlayerInfo.LucklyTurntable lucktable = 14;
  if (has_lucktable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->lucktable(), output);
  }

  // optional .PlayerInfo.Activity activity = 15;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->activity(), output);
  }

  // optional .PlayerInfo.DestinationInfoList destination = 16;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->destination(), output);
  }

  // optional .PlayerInfo.InstanceInfoTwoDays instanceList = 17;
  if (has_instancelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->instancelist(), output);
  }

  // optional .PlayerInfo.SignInInfo signin = 18;
  if (has_signin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->signin(), output);
  }

  // optional .PlayerInfo.EscortInfo escort = 19;
  if (has_escort()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->escort(), output);
  }

  // optional .PlayerInfo.PlayerVipInfo playerVip = 20;
  if (has_playervip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->playervip(), output);
  }

  // optional .PlayerInfo.PrestigeInfoList prestige = 21;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->prestige(), output);
  }

  // optional .PlayerInfo.TitleInfoList title = 22;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->title(), output);
  }

  // optional .FashionMsgProto.FashionShow fashion = 23;
  if (has_fashion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->fashion(), output);
  }

  // optional .VitalityProto.ProtoVitalityInfo vitality = 24;
  if (has_vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->vitality(), output);
  }

  // optional .PlayerInfo.CampShopInfo campShopData = 25;
  if (has_campshopdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->campshopdata(), output);
  }

  // optional .PlayerInfo.FestivalInfo festivalData = 26;
  if (has_festivaldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->festivaldata(), output);
  }

  // optional .PlayerInfo.MoneyInstance info = 27;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->info(), output);
  }

  // optional .PlayerInfo.OnceRewardInfo onceReward = 28;
  if (has_oncereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->oncereward(), output);
  }

  // optional .PlayerInfo.RingDBData ringData = 29;
  if (has_ringdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->ringdata(), output);
  }

  // optional .PlayerInfo.GroupInstance groupInfo = 30;
  if (has_groupinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->groupinfo(), output);
  }

  // optional .ChristmasDB.ChristmasAllData christmasData = 31;
  if (has_christmasdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->christmasdata(), output);
  }

  // optional .PlayerInfo.EliteInstance eliteInfo = 32;
  if (has_eliteinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->eliteinfo(), output);
  }

  // optional .PlayerInfo.CauchemarInstance cauchemarInfo = 33;
  if (has_cauchemarinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->cauchemarinfo(), output);
  }

  // optional .PlayerInfo.ArenaDataInfo arenaData = 34;
  if (has_arenadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->arenadata(), output);
  }

  // optional .PlayerInfo.ChallengeInstance challengedata = 35;
  if (has_challengedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->challengedata(), output);
  }

  // optional .PlayerInfo.HeroInstanceData herodata = 36;
  if (has_herodata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->herodata(), output);
  }

  // optional .PlayerInfo.MagicWeapon smagic = 37;
  if (has_smagic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->smagic(), output);
  }

  // optional .PlayerInfo.MagicWeapon heartmagic = 38;
  if (has_heartmagic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->heartmagic(), output);
  }

  // optional .PlayerInfo.AdvancedInstance advanced = 39;
  if (has_advanced()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->advanced(), output);
  }

  // optional .PlayerInfo.BaseShopInfo baseShopInfo = 40;
  if (has_baseshopinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->baseshopinfo(), output);
  }

  // optional .PlayerInfo.AnswerInfo answerInfo = 41;
  if (has_answerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->answerinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required .PlayerInfo.BaseInfo bsinfo = 1;
  if (has_bsinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->bsinfo(), target);
  }

  // optional .PlayerInfo.BattleInfo binfo = 2;
  if (has_binfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->binfo(), target);
  }

  // optional .PlayerInfo.QuestInfo questinfo = 3;
  if (has_questinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->questinfo(), target);
  }

  // optional .PlayerInfo.SkillInfo skill = 4;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->skill(), target);
  }

  // optional .PlayerInfo.CDInfo cd = 5;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cd(), target);
  }

  // optional .PlayerInfo.MonitorInfo mt = 6;
  if (has_mt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->mt(), target);
  }

  // optional .PlayerInfo.EquipQuickInfo equipquick = 7;
  if (has_equipquick()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->equipquick(), target);
  }

  // optional .PlayerInfo.GirlWarInfo girlwarinfo = 8;
  if (has_girlwarinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->girlwarinfo(), target);
  }

  // optional .PlayerInfo.CounterServiceList counter = 9;
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->counter(), target);
  }

  // optional .PlayerInfo.HorseInfo horse = 10;
  if (has_horse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->horse(), target);
  }

  // optional .PlayerInfo.DanLuInfo danlu = 11;
  if (has_danlu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->danlu(), target);
  }

  // optional .PlayerInfo.MagicWeapon magicw = 12;
  if (has_magicw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->magicw(), target);
  }

  // optional .PlayerInfo.RandCJobLucky cjob = 13;
  if (has_cjob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->cjob(), target);
  }

  // optional .PlayerInfo.LucklyTurntable lucktable = 14;
  if (has_lucktable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->lucktable(), target);
  }

  // optional .PlayerInfo.Activity activity = 15;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->activity(), target);
  }

  // optional .PlayerInfo.DestinationInfoList destination = 16;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->destination(), target);
  }

  // optional .PlayerInfo.InstanceInfoTwoDays instanceList = 17;
  if (has_instancelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->instancelist(), target);
  }

  // optional .PlayerInfo.SignInInfo signin = 18;
  if (has_signin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->signin(), target);
  }

  // optional .PlayerInfo.EscortInfo escort = 19;
  if (has_escort()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->escort(), target);
  }

  // optional .PlayerInfo.PlayerVipInfo playerVip = 20;
  if (has_playervip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->playervip(), target);
  }

  // optional .PlayerInfo.PrestigeInfoList prestige = 21;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->prestige(), target);
  }

  // optional .PlayerInfo.TitleInfoList title = 22;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->title(), target);
  }

  // optional .FashionMsgProto.FashionShow fashion = 23;
  if (has_fashion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->fashion(), target);
  }

  // optional .VitalityProto.ProtoVitalityInfo vitality = 24;
  if (has_vitality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->vitality(), target);
  }

  // optional .PlayerInfo.CampShopInfo campShopData = 25;
  if (has_campshopdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->campshopdata(), target);
  }

  // optional .PlayerInfo.FestivalInfo festivalData = 26;
  if (has_festivaldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->festivaldata(), target);
  }

  // optional .PlayerInfo.MoneyInstance info = 27;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->info(), target);
  }

  // optional .PlayerInfo.OnceRewardInfo onceReward = 28;
  if (has_oncereward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->oncereward(), target);
  }

  // optional .PlayerInfo.RingDBData ringData = 29;
  if (has_ringdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->ringdata(), target);
  }

  // optional .PlayerInfo.GroupInstance groupInfo = 30;
  if (has_groupinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->groupinfo(), target);
  }

  // optional .ChristmasDB.ChristmasAllData christmasData = 31;
  if (has_christmasdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->christmasdata(), target);
  }

  // optional .PlayerInfo.EliteInstance eliteInfo = 32;
  if (has_eliteinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->eliteinfo(), target);
  }

  // optional .PlayerInfo.CauchemarInstance cauchemarInfo = 33;
  if (has_cauchemarinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->cauchemarinfo(), target);
  }

  // optional .PlayerInfo.ArenaDataInfo arenaData = 34;
  if (has_arenadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->arenadata(), target);
  }

  // optional .PlayerInfo.ChallengeInstance challengedata = 35;
  if (has_challengedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->challengedata(), target);
  }

  // optional .PlayerInfo.HeroInstanceData herodata = 36;
  if (has_herodata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->herodata(), target);
  }

  // optional .PlayerInfo.MagicWeapon smagic = 37;
  if (has_smagic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->smagic(), target);
  }

  // optional .PlayerInfo.MagicWeapon heartmagic = 38;
  if (has_heartmagic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->heartmagic(), target);
  }

  // optional .PlayerInfo.AdvancedInstance advanced = 39;
  if (has_advanced()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->advanced(), target);
  }

  // optional .PlayerInfo.BaseShopInfo baseShopInfo = 40;
  if (has_baseshopinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->baseshopinfo(), target);
  }

  // optional .PlayerInfo.AnswerInfo answerInfo = 41;
  if (has_answerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->answerinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required .PlayerInfo.BaseInfo bsinfo = 1;
    if (has_bsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bsinfo());
    }

    // optional .PlayerInfo.BattleInfo binfo = 2;
    if (has_binfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->binfo());
    }

    // optional .PlayerInfo.QuestInfo questinfo = 3;
    if (has_questinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questinfo());
    }

    // optional .PlayerInfo.SkillInfo skill = 4;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // optional .PlayerInfo.CDInfo cd = 5;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cd());
    }

    // optional .PlayerInfo.MonitorInfo mt = 6;
    if (has_mt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mt());
    }

    // optional .PlayerInfo.EquipQuickInfo equipquick = 7;
    if (has_equipquick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipquick());
    }

    // optional .PlayerInfo.GirlWarInfo girlwarinfo = 8;
    if (has_girlwarinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->girlwarinfo());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PlayerInfo.CounterServiceList counter = 9;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counter());
    }

    // optional .PlayerInfo.HorseInfo horse = 10;
    if (has_horse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->horse());
    }

    // optional .PlayerInfo.DanLuInfo danlu = 11;
    if (has_danlu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->danlu());
    }

    // optional .PlayerInfo.MagicWeapon magicw = 12;
    if (has_magicw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->magicw());
    }

    // optional .PlayerInfo.RandCJobLucky cjob = 13;
    if (has_cjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cjob());
    }

    // optional .PlayerInfo.LucklyTurntable lucktable = 14;
    if (has_lucktable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lucktable());
    }

    // optional .PlayerInfo.Activity activity = 15;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity());
    }

    // optional .PlayerInfo.DestinationInfoList destination = 16;
    if (has_destination()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destination());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PlayerInfo.InstanceInfoTwoDays instanceList = 17;
    if (has_instancelist()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instancelist());
    }

    // optional .PlayerInfo.SignInInfo signin = 18;
    if (has_signin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signin());
    }

    // optional .PlayerInfo.EscortInfo escort = 19;
    if (has_escort()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->escort());
    }

    // optional .PlayerInfo.PlayerVipInfo playerVip = 20;
    if (has_playervip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playervip());
    }

    // optional .PlayerInfo.PrestigeInfoList prestige = 21;
    if (has_prestige()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prestige());
    }

    // optional .PlayerInfo.TitleInfoList title = 22;
    if (has_title()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
    }

    // optional .FashionMsgProto.FashionShow fashion = 23;
    if (has_fashion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashion());
    }

    // optional .VitalityProto.ProtoVitalityInfo vitality = 24;
    if (has_vitality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vitality());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .PlayerInfo.CampShopInfo campShopData = 25;
    if (has_campshopdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->campshopdata());
    }

    // optional .PlayerInfo.FestivalInfo festivalData = 26;
    if (has_festivaldata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->festivaldata());
    }

    // optional .PlayerInfo.MoneyInstance info = 27;
    if (has_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .PlayerInfo.OnceRewardInfo onceReward = 28;
    if (has_oncereward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oncereward());
    }

    // optional .PlayerInfo.RingDBData ringData = 29;
    if (has_ringdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ringdata());
    }

    // optional .PlayerInfo.GroupInstance groupInfo = 30;
    if (has_groupinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupinfo());
    }

    // optional .ChristmasDB.ChristmasAllData christmasData = 31;
    if (has_christmasdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->christmasdata());
    }

    // optional .PlayerInfo.EliteInstance eliteInfo = 32;
    if (has_eliteinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eliteinfo());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .PlayerInfo.CauchemarInstance cauchemarInfo = 33;
    if (has_cauchemarinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cauchemarinfo());
    }

    // optional .PlayerInfo.ArenaDataInfo arenaData = 34;
    if (has_arenadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arenadata());
    }

    // optional .PlayerInfo.ChallengeInstance challengedata = 35;
    if (has_challengedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challengedata());
    }

    // optional .PlayerInfo.HeroInstanceData herodata = 36;
    if (has_herodata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->herodata());
    }

    // optional .PlayerInfo.MagicWeapon smagic = 37;
    if (has_smagic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smagic());
    }

    // optional .PlayerInfo.MagicWeapon heartmagic = 38;
    if (has_heartmagic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heartmagic());
    }

    // optional .PlayerInfo.AdvancedInstance advanced = 39;
    if (has_advanced()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advanced());
    }

    // optional .PlayerInfo.BaseShopInfo baseShopInfo = 40;
    if (has_baseshopinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseshopinfo());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .PlayerInfo.AnswerInfo answerInfo = 41;
    if (has_answerinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->answerinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerInfo::MergeFrom(const PlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bsinfo()) {
      mutable_bsinfo()->::PlayerInfo::BaseInfo::MergeFrom(from.bsinfo());
    }
    if (from.has_binfo()) {
      mutable_binfo()->::PlayerInfo::BattleInfo::MergeFrom(from.binfo());
    }
    if (from.has_questinfo()) {
      mutable_questinfo()->::PlayerInfo::QuestInfo::MergeFrom(from.questinfo());
    }
    if (from.has_skill()) {
      mutable_skill()->::PlayerInfo::SkillInfo::MergeFrom(from.skill());
    }
    if (from.has_cd()) {
      mutable_cd()->::PlayerInfo::CDInfo::MergeFrom(from.cd());
    }
    if (from.has_mt()) {
      mutable_mt()->::PlayerInfo::MonitorInfo::MergeFrom(from.mt());
    }
    if (from.has_equipquick()) {
      mutable_equipquick()->::PlayerInfo::EquipQuickInfo::MergeFrom(from.equipquick());
    }
    if (from.has_girlwarinfo()) {
      mutable_girlwarinfo()->::PlayerInfo::GirlWarInfo::MergeFrom(from.girlwarinfo());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_counter()) {
      mutable_counter()->::PlayerInfo::CounterServiceList::MergeFrom(from.counter());
    }
    if (from.has_horse()) {
      mutable_horse()->::PlayerInfo::HorseInfo::MergeFrom(from.horse());
    }
    if (from.has_danlu()) {
      mutable_danlu()->::PlayerInfo::DanLuInfo::MergeFrom(from.danlu());
    }
    if (from.has_magicw()) {
      mutable_magicw()->::PlayerInfo::MagicWeapon::MergeFrom(from.magicw());
    }
    if (from.has_cjob()) {
      mutable_cjob()->::PlayerInfo::RandCJobLucky::MergeFrom(from.cjob());
    }
    if (from.has_lucktable()) {
      mutable_lucktable()->::PlayerInfo::LucklyTurntable::MergeFrom(from.lucktable());
    }
    if (from.has_activity()) {
      mutable_activity()->::PlayerInfo::Activity::MergeFrom(from.activity());
    }
    if (from.has_destination()) {
      mutable_destination()->::PlayerInfo::DestinationInfoList::MergeFrom(from.destination());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_instancelist()) {
      mutable_instancelist()->::PlayerInfo::InstanceInfoTwoDays::MergeFrom(from.instancelist());
    }
    if (from.has_signin()) {
      mutable_signin()->::PlayerInfo::SignInInfo::MergeFrom(from.signin());
    }
    if (from.has_escort()) {
      mutable_escort()->::PlayerInfo::EscortInfo::MergeFrom(from.escort());
    }
    if (from.has_playervip()) {
      mutable_playervip()->::PlayerInfo::PlayerVipInfo::MergeFrom(from.playervip());
    }
    if (from.has_prestige()) {
      mutable_prestige()->::PlayerInfo::PrestigeInfoList::MergeFrom(from.prestige());
    }
    if (from.has_title()) {
      mutable_title()->::PlayerInfo::TitleInfoList::MergeFrom(from.title());
    }
    if (from.has_fashion()) {
      mutable_fashion()->::FashionMsgProto::FashionShow::MergeFrom(from.fashion());
    }
    if (from.has_vitality()) {
      mutable_vitality()->::VitalityProto::ProtoVitalityInfo::MergeFrom(from.vitality());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_campshopdata()) {
      mutable_campshopdata()->::PlayerInfo::CampShopInfo::MergeFrom(from.campshopdata());
    }
    if (from.has_festivaldata()) {
      mutable_festivaldata()->::PlayerInfo::FestivalInfo::MergeFrom(from.festivaldata());
    }
    if (from.has_info()) {
      mutable_info()->::PlayerInfo::MoneyInstance::MergeFrom(from.info());
    }
    if (from.has_oncereward()) {
      mutable_oncereward()->::PlayerInfo::OnceRewardInfo::MergeFrom(from.oncereward());
    }
    if (from.has_ringdata()) {
      mutable_ringdata()->::PlayerInfo::RingDBData::MergeFrom(from.ringdata());
    }
    if (from.has_groupinfo()) {
      mutable_groupinfo()->::PlayerInfo::GroupInstance::MergeFrom(from.groupinfo());
    }
    if (from.has_christmasdata()) {
      mutable_christmasdata()->::ChristmasDB::ChristmasAllData::MergeFrom(from.christmasdata());
    }
    if (from.has_eliteinfo()) {
      mutable_eliteinfo()->::PlayerInfo::EliteInstance::MergeFrom(from.eliteinfo());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_cauchemarinfo()) {
      mutable_cauchemarinfo()->::PlayerInfo::CauchemarInstance::MergeFrom(from.cauchemarinfo());
    }
    if (from.has_arenadata()) {
      mutable_arenadata()->::PlayerInfo::ArenaDataInfo::MergeFrom(from.arenadata());
    }
    if (from.has_challengedata()) {
      mutable_challengedata()->::PlayerInfo::ChallengeInstance::MergeFrom(from.challengedata());
    }
    if (from.has_herodata()) {
      mutable_herodata()->::PlayerInfo::HeroInstanceData::MergeFrom(from.herodata());
    }
    if (from.has_smagic()) {
      mutable_smagic()->::PlayerInfo::MagicWeapon::MergeFrom(from.smagic());
    }
    if (from.has_heartmagic()) {
      mutable_heartmagic()->::PlayerInfo::MagicWeapon::MergeFrom(from.heartmagic());
    }
    if (from.has_advanced()) {
      mutable_advanced()->::PlayerInfo::AdvancedInstance::MergeFrom(from.advanced());
    }
    if (from.has_baseshopinfo()) {
      mutable_baseshopinfo()->::PlayerInfo::BaseShopInfo::MergeFrom(from.baseshopinfo());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_answerinfo()) {
      mutable_answerinfo()->::PlayerInfo::AnswerInfo::MergeFrom(from.answerinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerInfo::CopyFrom(const PlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_bsinfo()) {
    if (!this->bsinfo().IsInitialized()) return false;
  }
  if (has_binfo()) {
    if (!this->binfo().IsInitialized()) return false;
  }
  if (has_questinfo()) {
    if (!this->questinfo().IsInitialized()) return false;
  }
  if (has_skill()) {
    if (!this->skill().IsInitialized()) return false;
  }
  if (has_cd()) {
    if (!this->cd().IsInitialized()) return false;
  }
  if (has_equipquick()) {
    if (!this->equipquick().IsInitialized()) return false;
  }
  if (has_girlwarinfo()) {
    if (!this->girlwarinfo().IsInitialized()) return false;
  }
  if (has_horse()) {
    if (!this->horse().IsInitialized()) return false;
  }
  if (has_cjob()) {
    if (!this->cjob().IsInitialized()) return false;
  }
  if (has_activity()) {
    if (!this->activity().IsInitialized()) return false;
  }
  if (has_destination()) {
    if (!this->destination().IsInitialized()) return false;
  }
  if (has_instancelist()) {
    if (!this->instancelist().IsInitialized()) return false;
  }
  if (has_prestige()) {
    if (!this->prestige().IsInitialized()) return false;
  }
  if (has_title()) {
    if (!this->title().IsInitialized()) return false;
  }
  if (has_fashion()) {
    if (!this->fashion().IsInitialized()) return false;
  }
  if (has_vitality()) {
    if (!this->vitality().IsInitialized()) return false;
  }
  if (has_groupinfo()) {
    if (!this->groupinfo().IsInitialized()) return false;
  }
  if (has_eliteinfo()) {
    if (!this->eliteinfo().IsInitialized()) return false;
  }
  if (has_cauchemarinfo()) {
    if (!this->cauchemarinfo().IsInitialized()) return false;
  }
  if (has_advanced()) {
    if (!this->advanced().IsInitialized()) return false;
  }
  if (has_baseshopinfo()) {
    if (!this->baseshopinfo().IsInitialized()) return false;
  }
  return true;
}

void PlayerInfo::Swap(PlayerInfo* other) {
  if (other != this) {
    std::swap(bsinfo_, other->bsinfo_);
    std::swap(binfo_, other->binfo_);
    std::swap(questinfo_, other->questinfo_);
    std::swap(skill_, other->skill_);
    std::swap(cd_, other->cd_);
    std::swap(mt_, other->mt_);
    std::swap(equipquick_, other->equipquick_);
    std::swap(girlwarinfo_, other->girlwarinfo_);
    std::swap(counter_, other->counter_);
    std::swap(horse_, other->horse_);
    std::swap(danlu_, other->danlu_);
    std::swap(magicw_, other->magicw_);
    std::swap(cjob_, other->cjob_);
    std::swap(lucktable_, other->lucktable_);
    std::swap(activity_, other->activity_);
    std::swap(destination_, other->destination_);
    std::swap(instancelist_, other->instancelist_);
    std::swap(signin_, other->signin_);
    std::swap(escort_, other->escort_);
    std::swap(playervip_, other->playervip_);
    std::swap(prestige_, other->prestige_);
    std::swap(title_, other->title_);
    std::swap(fashion_, other->fashion_);
    std::swap(vitality_, other->vitality_);
    std::swap(campshopdata_, other->campshopdata_);
    std::swap(festivaldata_, other->festivaldata_);
    std::swap(info_, other->info_);
    std::swap(oncereward_, other->oncereward_);
    std::swap(ringdata_, other->ringdata_);
    std::swap(groupinfo_, other->groupinfo_);
    std::swap(christmasdata_, other->christmasdata_);
    std::swap(eliteinfo_, other->eliteinfo_);
    std::swap(cauchemarinfo_, other->cauchemarinfo_);
    std::swap(arenadata_, other->arenadata_);
    std::swap(challengedata_, other->challengedata_);
    std::swap(herodata_, other->herodata_);
    std::swap(smagic_, other->smagic_);
    std::swap(heartmagic_, other->heartmagic_);
    std::swap(advanced_, other->advanced_);
    std::swap(baseshopinfo_, other->baseshopinfo_);
    std::swap(answerinfo_, other->answerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerInfo_descriptor_;
  metadata.reflection = PlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaDataInfo::kCanChallCntFieldNumber;
const int ArenaDataInfo::kLastResetTimeFieldNumber;
#endif  // !_MSC_VER

ArenaDataInfo::ArenaDataInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaDataInfo::InitAsDefaultInstance() {
}

ArenaDataInfo::ArenaDataInfo(const ArenaDataInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaDataInfo::SharedCtor() {
  _cached_size_ = 0;
  canchallcnt_ = 0;
  lastresettime_ = GOOGLE_ULONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaDataInfo::~ArenaDataInfo() {
  SharedDtor();
}

void ArenaDataInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaDataInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaDataInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaDataInfo_descriptor_;
}

const ArenaDataInfo& ArenaDataInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

ArenaDataInfo* ArenaDataInfo::default_instance_ = NULL;

ArenaDataInfo* ArenaDataInfo::New() const {
  return new ArenaDataInfo;
}

void ArenaDataInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    canchallcnt_ = 0;
    lastresettime_ = GOOGLE_ULONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaDataInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 canChallCnt = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &canchallcnt_)));
          set_has_canchallcnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_lastResetTime;
        break;
      }

      // optional uint64 lastResetTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &lastresettime_)));
          set_has_lastresettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaDataInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 canChallCnt = 1;
  if (has_canchallcnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->canchallcnt(), output);
  }

  // optional uint64 lastResetTime = 2;
  if (has_lastresettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->lastresettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaDataInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 canChallCnt = 1;
  if (has_canchallcnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->canchallcnt(), target);
  }

  // optional uint64 lastResetTime = 2;
  if (has_lastresettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->lastresettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaDataInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 canChallCnt = 1;
    if (has_canchallcnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->canchallcnt());
    }

    // optional uint64 lastResetTime = 2;
    if (has_lastresettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->lastresettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaDataInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaDataInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaDataInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaDataInfo::MergeFrom(const ArenaDataInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_canchallcnt()) {
      set_canchallcnt(from.canchallcnt());
    }
    if (from.has_lastresettime()) {
      set_lastresettime(from.lastresettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaDataInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaDataInfo::CopyFrom(const ArenaDataInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaDataInfo::IsInitialized() const {

  return true;
}

void ArenaDataInfo::Swap(ArenaDataInfo* other) {
  if (other != this) {
    std::swap(canchallcnt_, other->canchallcnt_);
    std::swap(lastresettime_, other->lastresettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaDataInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaDataInfo_descriptor_;
  metadata.reflection = ArenaDataInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaInfo::kCharidFieldNumber;
const int ArenaInfo::kCombatPowerFieldNumber;
const int ArenaInfo::kRankingFieldNumber;
const int ArenaInfo::kIswinFieldNumber;
const int ArenaInfo::kAbinfoFieldNumber;
const int ArenaInfo::kChallengeRankFieldNumber;
const int ArenaInfo::kChallengeNumFieldNumber;
const int ArenaInfo::kHistoryRewardFieldNumber;
#endif  // !_MSC_VER

ArenaInfo::ArenaInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaInfo::InitAsDefaultInstance() {
  abinfo_ = const_cast< ::PlayerInfo::ArenaBaseInfo*>(&::PlayerInfo::ArenaBaseInfo::default_instance());
  challengerank_ = const_cast< ::PlayerInfo::ArenaChallengeRank*>(&::PlayerInfo::ArenaChallengeRank::default_instance());
  historyreward_ = const_cast< ::PlayerInfo::ArenaHistoryReward*>(&::PlayerInfo::ArenaHistoryReward::default_instance());
}

ArenaInfo::ArenaInfo(const ArenaInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  combatpower_ = 0;
  ranking_ = 0;
  iswin_ = false;
  abinfo_ = NULL;
  challengerank_ = NULL;
  challengenum_ = 0;
  historyreward_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaInfo::~ArenaInfo() {
  SharedDtor();
}

void ArenaInfo::SharedDtor() {
  if (this != default_instance_) {
    delete abinfo_;
    delete challengerank_;
    delete historyreward_;
  }
}

void ArenaInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaInfo_descriptor_;
}

const ArenaInfo& ArenaInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

ArenaInfo* ArenaInfo::default_instance_ = NULL;

ArenaInfo* ArenaInfo::New() const {
  return new ArenaInfo;
}

void ArenaInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    combatpower_ = 0;
    ranking_ = 0;
    iswin_ = false;
    if (has_abinfo()) {
      if (abinfo_ != NULL) abinfo_->::PlayerInfo::ArenaBaseInfo::Clear();
    }
    if (has_challengerank()) {
      if (challengerank_ != NULL) challengerank_->::PlayerInfo::ArenaChallengeRank::Clear();
    }
    challengenum_ = 0;
    if (has_historyreward()) {
      if (historyreward_ != NULL) historyreward_->::PlayerInfo::ArenaHistoryReward::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_CombatPower;
        break;
      }

      // optional int32 CombatPower = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_CombatPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &combatpower_)));
          set_has_combatpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Ranking;
        break;
      }

      // optional int32 Ranking = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_iswin;
        break;
      }

      // optional bool iswin = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iswin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswin_)));
          set_has_iswin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_abinfo;
        break;
      }

      // optional .PlayerInfo.ArenaBaseInfo abinfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_abinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_abinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_challengeRank;
        break;
      }

      // optional .PlayerInfo.ArenaChallengeRank challengeRank = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challengeRank:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challengerank()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_challengeNum;
        break;
      }

      // optional int32 challengeNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengeNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengenum_)));
          set_has_challengenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_historyReward;
        break;
      }

      // optional .PlayerInfo.ArenaHistoryReward historyReward = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_historyReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_historyreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int32 CombatPower = 2;
  if (has_combatpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->combatpower(), output);
  }

  // optional int32 Ranking = 3;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ranking(), output);
  }

  // optional bool iswin = 4;
  if (has_iswin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->iswin(), output);
  }

  // optional .PlayerInfo.ArenaBaseInfo abinfo = 5;
  if (has_abinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->abinfo(), output);
  }

  // optional .PlayerInfo.ArenaChallengeRank challengeRank = 6;
  if (has_challengerank()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->challengerank(), output);
  }

  // optional int32 challengeNum = 7;
  if (has_challengenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->challengenum(), output);
  }

  // optional .PlayerInfo.ArenaHistoryReward historyReward = 8;
  if (has_historyreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->historyreward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int32 CombatPower = 2;
  if (has_combatpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->combatpower(), target);
  }

  // optional int32 Ranking = 3;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ranking(), target);
  }

  // optional bool iswin = 4;
  if (has_iswin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->iswin(), target);
  }

  // optional .PlayerInfo.ArenaBaseInfo abinfo = 5;
  if (has_abinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->abinfo(), target);
  }

  // optional .PlayerInfo.ArenaChallengeRank challengeRank = 6;
  if (has_challengerank()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->challengerank(), target);
  }

  // optional int32 challengeNum = 7;
  if (has_challengenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->challengenum(), target);
  }

  // optional .PlayerInfo.ArenaHistoryReward historyReward = 8;
  if (has_historyreward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->historyreward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 CombatPower = 2;
    if (has_combatpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->combatpower());
    }

    // optional int32 Ranking = 3;
    if (has_ranking()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // optional bool iswin = 4;
    if (has_iswin()) {
      total_size += 1 + 1;
    }

    // optional .PlayerInfo.ArenaBaseInfo abinfo = 5;
    if (has_abinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->abinfo());
    }

    // optional .PlayerInfo.ArenaChallengeRank challengeRank = 6;
    if (has_challengerank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challengerank());
    }

    // optional int32 challengeNum = 7;
    if (has_challengenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengenum());
    }

    // optional .PlayerInfo.ArenaHistoryReward historyReward = 8;
    if (has_historyreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->historyreward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaInfo::MergeFrom(const ArenaInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_combatpower()) {
      set_combatpower(from.combatpower());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_iswin()) {
      set_iswin(from.iswin());
    }
    if (from.has_abinfo()) {
      mutable_abinfo()->::PlayerInfo::ArenaBaseInfo::MergeFrom(from.abinfo());
    }
    if (from.has_challengerank()) {
      mutable_challengerank()->::PlayerInfo::ArenaChallengeRank::MergeFrom(from.challengerank());
    }
    if (from.has_challengenum()) {
      set_challengenum(from.challengenum());
    }
    if (from.has_historyreward()) {
      mutable_historyreward()->::PlayerInfo::ArenaHistoryReward::MergeFrom(from.historyreward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaInfo::CopyFrom(const ArenaInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_abinfo()) {
    if (!this->abinfo().IsInitialized()) return false;
  }
  return true;
}

void ArenaInfo::Swap(ArenaInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(combatpower_, other->combatpower_);
    std::swap(ranking_, other->ranking_);
    std::swap(iswin_, other->iswin_);
    std::swap(abinfo_, other->abinfo_);
    std::swap(challengerank_, other->challengerank_);
    std::swap(challengenum_, other->challengenum_);
    std::swap(historyreward_, other->historyreward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaInfo_descriptor_;
  metadata.reflection = ArenaInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaBaseInfo::kCharnameFieldNumber;
const int ArenaBaseInfo::kLevelFieldNumber;
const int ArenaBaseInfo::kProfessionFieldNumber;
const int ArenaBaseInfo::kCountryFieldNumber;
const int ArenaBaseInfo::kSexFieldNumber;
const int ArenaBaseInfo::kTitleidFieldNumber;
const int ArenaBaseInfo::kClannameFieldNumber;
const int ArenaBaseInfo::kViplvFieldNumber;
const int ArenaBaseInfo::kHpmaxFieldNumber;
const int ArenaBaseInfo::kMpmaxFieldNumber;
const int ArenaBaseInfo::kMovespeedFieldNumber;
const int ArenaBaseInfo::kPhyattackFieldNumber;
const int ArenaBaseInfo::kPhyattackmaxFieldNumber;
const int ArenaBaseInfo::kMagicattackFieldNumber;
const int ArenaBaseInfo::kMagicattackmaxFieldNumber;
const int ArenaBaseInfo::kPhydefenceFieldNumber;
const int ArenaBaseInfo::kMagicdefenceFieldNumber;
const int ArenaBaseInfo::kHitrateFieldNumber;
const int ArenaBaseInfo::kAvoidrateFieldNumber;
const int ArenaBaseInfo::kBaseluckyFieldNumber;
const int ArenaBaseInfo::kCrackdownrateFieldNumber;
const int ArenaBaseInfo::kBaserteFieldNumber;
const int ArenaBaseInfo::kMagicwFieldNumber;
const int ArenaBaseInfo::kSuitrntFieldNumber;
const int ArenaBaseInfo::kMainEquipFieldNumber;
const int ArenaBaseInfo::kCostumeFieldNumber;
const int ArenaBaseInfo::kHorseFieldNumber;
const int ArenaBaseInfo::kSkillFieldNumber;
const int ArenaBaseInfo::kClanJobFieldNumber;
#endif  // !_MSC_VER

ArenaBaseInfo::ArenaBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaBaseInfo::InitAsDefaultInstance() {
  mainequip_ = const_cast< ::PlayerSynch::EquipData*>(&::PlayerSynch::EquipData::default_instance());
}

ArenaBaseInfo::ArenaBaseInfo(const ArenaBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  profession_ = 0;
  country_ = 0;
  sex_ = false;
  titleid_ = 0;
  clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viplv_ = 0;
  hpmax_ = 0;
  mpmax_ = 0;
  movespeed_ = 0;
  phyattack_ = 0;
  phyattackmax_ = 0;
  magicattack_ = 0;
  magicattackmax_ = 0;
  phydefence_ = 0;
  magicdefence_ = 0;
  hitrate_ = 0;
  avoidrate_ = 0;
  baselucky_ = 0;
  crackdownrate_ = 0;
  baserte_ = 0;
  magicw_ = 0;
  suitrnt_ = 0;
  mainequip_ = NULL;
  costume_ = 0;
  horse_ = 0;
  clanjob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaBaseInfo::~ArenaBaseInfo() {
  SharedDtor();
}

void ArenaBaseInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (this != default_instance_) {
    delete mainequip_;
  }
}

void ArenaBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaBaseInfo_descriptor_;
}

const ArenaBaseInfo& ArenaBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

ArenaBaseInfo* ArenaBaseInfo::default_instance_ = NULL;

ArenaBaseInfo* ArenaBaseInfo::New() const {
  return new ArenaBaseInfo;
}

void ArenaBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    level_ = 0;
    profession_ = 0;
    country_ = 0;
    sex_ = false;
    titleid_ = 0;
    if (has_clanname()) {
      if (clanname_ != &::google::protobuf::internal::kEmptyString) {
        clanname_->clear();
      }
    }
    viplv_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hpmax_ = 0;
    mpmax_ = 0;
    movespeed_ = 0;
    phyattack_ = 0;
    phyattackmax_ = 0;
    magicattack_ = 0;
    magicattackmax_ = 0;
    phydefence_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    magicdefence_ = 0;
    hitrate_ = 0;
    avoidrate_ = 0;
    baselucky_ = 0;
    crackdownrate_ = 0;
    baserte_ = 0;
    magicw_ = 0;
    suitrnt_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_mainequip()) {
      if (mainequip_ != NULL) mainequip_->::PlayerSynch::EquipData::Clear();
    }
    costume_ = 0;
    horse_ = 0;
    clanjob_ = 0;
  }
  skill_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string charname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_profession;
        break;
      }

      // optional int32 profession = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_country;
        break;
      }

      // optional int32 country = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional bool sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_titleid;
        break;
      }

      // optional int32 titleid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_clanname;
        break;
      }

      // optional string clanname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clanname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clanname().data(), this->clanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_viplv;
        break;
      }

      // optional int32 viplv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hpmax;
        break;
      }

      // optional int32 hpmax = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_mpmax;
        break;
      }

      // optional int32 mpmax = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mpmax_)));
          set_has_mpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_movespeed;
        break;
      }

      // optional int32 movespeed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_phyattack;
        break;
      }

      // optional int32 phyattack = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phyattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phyattack_)));
          set_has_phyattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_phyattackmax;
        break;
      }

      // optional int32 phyattackmax = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phyattackmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phyattackmax_)));
          set_has_phyattackmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_magicattack;
        break;
      }

      // optional int32 magicattack = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicattack_)));
          set_has_magicattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_magicattackmax;
        break;
      }

      // optional int32 magicattackmax = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicattackmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicattackmax_)));
          set_has_magicattackmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_phydefence;
        break;
      }

      // optional int32 phydefence = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phydefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phydefence_)));
          set_has_phydefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_magicdefence;
        break;
      }

      // optional int32 magicdefence = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicdefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicdefence_)));
          set_has_magicdefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_hitrate;
        break;
      }

      // optional int32 hitrate = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitrate_)));
          set_has_hitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_avoidrate;
        break;
      }

      // optional int32 avoidrate = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avoidrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avoidrate_)));
          set_has_avoidrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_baselucky;
        break;
      }

      // optional int32 baselucky = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baselucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baselucky_)));
          set_has_baselucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_crackdownrate;
        break;
      }

      // optional int32 crackdownrate = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crackdownrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crackdownrate_)));
          set_has_crackdownrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_baserte;
        break;
      }

      // optional int32 baserte = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baserte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baserte_)));
          set_has_baserte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_magicw;
        break;
      }

      // optional int32 magicw = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicw:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicw_)));
          set_has_magicw();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_suitrnt;
        break;
      }

      // optional int32 suitrnt = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_suitrnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &suitrnt_)));
          set_has_suitrnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_mainEquip;
        break;
      }

      // optional .PlayerSynch.EquipData mainEquip = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mainEquip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mainequip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_costume;
        break;
      }

      // optional int32 costume = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costume_)));
          set_has_costume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_horse;
        break;
      }

      // optional int32 horse = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horse_)));
          set_has_horse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_skill;
        break;
      }

      // repeated int32 skill = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 224, input, this->mutable_skill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_skill;
        if (input->ExpectTag(232)) goto parse_clanJob;
        break;
      }

      // optional int32 clanJob = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanJob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanjob_)));
          set_has_clanjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->charname(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 profession = 3;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->profession(), output);
  }

  // optional int32 country = 4;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->country(), output);
  }

  // optional bool sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->sex(), output);
  }

  // optional int32 titleid = 6;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->titleid(), output);
  }

  // optional string clanname = 7;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->clanname(), output);
  }

  // optional int32 viplv = 8;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->viplv(), output);
  }

  // optional int32 hpmax = 9;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hpmax(), output);
  }

  // optional int32 mpmax = 10;
  if (has_mpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->mpmax(), output);
  }

  // optional int32 movespeed = 11;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->movespeed(), output);
  }

  // optional int32 phyattack = 12;
  if (has_phyattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->phyattack(), output);
  }

  // optional int32 phyattackmax = 13;
  if (has_phyattackmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->phyattackmax(), output);
  }

  // optional int32 magicattack = 14;
  if (has_magicattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->magicattack(), output);
  }

  // optional int32 magicattackmax = 15;
  if (has_magicattackmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->magicattackmax(), output);
  }

  // optional int32 phydefence = 16;
  if (has_phydefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->phydefence(), output);
  }

  // optional int32 magicdefence = 17;
  if (has_magicdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->magicdefence(), output);
  }

  // optional int32 hitrate = 18;
  if (has_hitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->hitrate(), output);
  }

  // optional int32 avoidrate = 19;
  if (has_avoidrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->avoidrate(), output);
  }

  // optional int32 baselucky = 20;
  if (has_baselucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->baselucky(), output);
  }

  // optional int32 crackdownrate = 21;
  if (has_crackdownrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->crackdownrate(), output);
  }

  // optional int32 baserte = 22;
  if (has_baserte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->baserte(), output);
  }

  // optional int32 magicw = 23;
  if (has_magicw()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->magicw(), output);
  }

  // optional int32 suitrnt = 24;
  if (has_suitrnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->suitrnt(), output);
  }

  // optional .PlayerSynch.EquipData mainEquip = 25;
  if (has_mainequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->mainequip(), output);
  }

  // optional int32 costume = 26;
  if (has_costume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->costume(), output);
  }

  // optional int32 horse = 27;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->horse(), output);
  }

  // repeated int32 skill = 28;
  for (int i = 0; i < this->skill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      28, this->skill(i), output);
  }

  // optional int32 clanJob = 29;
  if (has_clanjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->clanjob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->charname(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 profession = 3;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->profession(), target);
  }

  // optional int32 country = 4;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->country(), target);
  }

  // optional bool sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->sex(), target);
  }

  // optional int32 titleid = 6;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->titleid(), target);
  }

  // optional string clanname = 7;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->clanname(), target);
  }

  // optional int32 viplv = 8;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->viplv(), target);
  }

  // optional int32 hpmax = 9;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hpmax(), target);
  }

  // optional int32 mpmax = 10;
  if (has_mpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->mpmax(), target);
  }

  // optional int32 movespeed = 11;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->movespeed(), target);
  }

  // optional int32 phyattack = 12;
  if (has_phyattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->phyattack(), target);
  }

  // optional int32 phyattackmax = 13;
  if (has_phyattackmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->phyattackmax(), target);
  }

  // optional int32 magicattack = 14;
  if (has_magicattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->magicattack(), target);
  }

  // optional int32 magicattackmax = 15;
  if (has_magicattackmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->magicattackmax(), target);
  }

  // optional int32 phydefence = 16;
  if (has_phydefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->phydefence(), target);
  }

  // optional int32 magicdefence = 17;
  if (has_magicdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->magicdefence(), target);
  }

  // optional int32 hitrate = 18;
  if (has_hitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->hitrate(), target);
  }

  // optional int32 avoidrate = 19;
  if (has_avoidrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->avoidrate(), target);
  }

  // optional int32 baselucky = 20;
  if (has_baselucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->baselucky(), target);
  }

  // optional int32 crackdownrate = 21;
  if (has_crackdownrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->crackdownrate(), target);
  }

  // optional int32 baserte = 22;
  if (has_baserte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->baserte(), target);
  }

  // optional int32 magicw = 23;
  if (has_magicw()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->magicw(), target);
  }

  // optional int32 suitrnt = 24;
  if (has_suitrnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->suitrnt(), target);
  }

  // optional .PlayerSynch.EquipData mainEquip = 25;
  if (has_mainequip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->mainequip(), target);
  }

  // optional int32 costume = 26;
  if (has_costume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->costume(), target);
  }

  // optional int32 horse = 27;
  if (has_horse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->horse(), target);
  }

  // repeated int32 skill = 28;
  for (int i = 0; i < this->skill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(28, this->skill(i), target);
  }

  // optional int32 clanJob = 29;
  if (has_clanjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->clanjob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string charname = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 profession = 3;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 country = 4;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // optional bool sex = 5;
    if (has_sex()) {
      total_size += 1 + 1;
    }

    // optional int32 titleid = 6;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // optional string clanname = 7;
    if (has_clanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clanname());
    }

    // optional int32 viplv = 8;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 hpmax = 9;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

    // optional int32 mpmax = 10;
    if (has_mpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mpmax());
    }

    // optional int32 movespeed = 11;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

    // optional int32 phyattack = 12;
    if (has_phyattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phyattack());
    }

    // optional int32 phyattackmax = 13;
    if (has_phyattackmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phyattackmax());
    }

    // optional int32 magicattack = 14;
    if (has_magicattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicattack());
    }

    // optional int32 magicattackmax = 15;
    if (has_magicattackmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicattackmax());
    }

    // optional int32 phydefence = 16;
    if (has_phydefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phydefence());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 magicdefence = 17;
    if (has_magicdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicdefence());
    }

    // optional int32 hitrate = 18;
    if (has_hitrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitrate());
    }

    // optional int32 avoidrate = 19;
    if (has_avoidrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avoidrate());
    }

    // optional int32 baselucky = 20;
    if (has_baselucky()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baselucky());
    }

    // optional int32 crackdownrate = 21;
    if (has_crackdownrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crackdownrate());
    }

    // optional int32 baserte = 22;
    if (has_baserte()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baserte());
    }

    // optional int32 magicw = 23;
    if (has_magicw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicw());
    }

    // optional int32 suitrnt = 24;
    if (has_suitrnt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->suitrnt());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .PlayerSynch.EquipData mainEquip = 25;
    if (has_mainequip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mainequip());
    }

    // optional int32 costume = 26;
    if (has_costume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costume());
    }

    // optional int32 horse = 27;
    if (has_horse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horse());
    }

    // optional int32 clanJob = 29;
    if (has_clanjob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanjob());
    }

  }
  // repeated int32 skill = 28;
  {
    int data_size = 0;
    for (int i = 0; i < this->skill_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skill(i));
    }
    total_size += 2 * this->skill_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaBaseInfo::MergeFrom(const ArenaBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skill_.MergeFrom(from.skill_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_clanname()) {
      set_clanname(from.clanname());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_mpmax()) {
      set_mpmax(from.mpmax());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_phyattack()) {
      set_phyattack(from.phyattack());
    }
    if (from.has_phyattackmax()) {
      set_phyattackmax(from.phyattackmax());
    }
    if (from.has_magicattack()) {
      set_magicattack(from.magicattack());
    }
    if (from.has_magicattackmax()) {
      set_magicattackmax(from.magicattackmax());
    }
    if (from.has_phydefence()) {
      set_phydefence(from.phydefence());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_magicdefence()) {
      set_magicdefence(from.magicdefence());
    }
    if (from.has_hitrate()) {
      set_hitrate(from.hitrate());
    }
    if (from.has_avoidrate()) {
      set_avoidrate(from.avoidrate());
    }
    if (from.has_baselucky()) {
      set_baselucky(from.baselucky());
    }
    if (from.has_crackdownrate()) {
      set_crackdownrate(from.crackdownrate());
    }
    if (from.has_baserte()) {
      set_baserte(from.baserte());
    }
    if (from.has_magicw()) {
      set_magicw(from.magicw());
    }
    if (from.has_suitrnt()) {
      set_suitrnt(from.suitrnt());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_mainequip()) {
      mutable_mainequip()->::PlayerSynch::EquipData::MergeFrom(from.mainequip());
    }
    if (from.has_costume()) {
      set_costume(from.costume());
    }
    if (from.has_horse()) {
      set_horse(from.horse());
    }
    if (from.has_clanjob()) {
      set_clanjob(from.clanjob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaBaseInfo::CopyFrom(const ArenaBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ArenaBaseInfo::Swap(ArenaBaseInfo* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(level_, other->level_);
    std::swap(profession_, other->profession_);
    std::swap(country_, other->country_);
    std::swap(sex_, other->sex_);
    std::swap(titleid_, other->titleid_);
    std::swap(clanname_, other->clanname_);
    std::swap(viplv_, other->viplv_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(mpmax_, other->mpmax_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(phyattack_, other->phyattack_);
    std::swap(phyattackmax_, other->phyattackmax_);
    std::swap(magicattack_, other->magicattack_);
    std::swap(magicattackmax_, other->magicattackmax_);
    std::swap(phydefence_, other->phydefence_);
    std::swap(magicdefence_, other->magicdefence_);
    std::swap(hitrate_, other->hitrate_);
    std::swap(avoidrate_, other->avoidrate_);
    std::swap(baselucky_, other->baselucky_);
    std::swap(crackdownrate_, other->crackdownrate_);
    std::swap(baserte_, other->baserte_);
    std::swap(magicw_, other->magicw_);
    std::swap(suitrnt_, other->suitrnt_);
    std::swap(mainequip_, other->mainequip_);
    std::swap(costume_, other->costume_);
    std::swap(horse_, other->horse_);
    skill_.Swap(&other->skill_);
    std::swap(clanjob_, other->clanjob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaBaseInfo_descriptor_;
  metadata.reflection = ArenaBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaChallengeRank::kChallengeRankFieldNumber;
#endif  // !_MSC_VER

ArenaChallengeRank::ArenaChallengeRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaChallengeRank::InitAsDefaultInstance() {
}

ArenaChallengeRank::ArenaChallengeRank(const ArenaChallengeRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaChallengeRank::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaChallengeRank::~ArenaChallengeRank() {
  SharedDtor();
}

void ArenaChallengeRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaChallengeRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaChallengeRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaChallengeRank_descriptor_;
}

const ArenaChallengeRank& ArenaChallengeRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

ArenaChallengeRank* ArenaChallengeRank::default_instance_ = NULL;

ArenaChallengeRank* ArenaChallengeRank::New() const {
  return new ArenaChallengeRank;
}

void ArenaChallengeRank::Clear() {
  challengerank_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaChallengeRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 challengeRank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengeRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_challengerank())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_challengerank())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_challengeRank;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaChallengeRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 challengeRank = 1;
  for (int i = 0; i < this->challengerank_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->challengerank(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaChallengeRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 challengeRank = 1;
  for (int i = 0; i < this->challengerank_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->challengerank(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaChallengeRank::ByteSize() const {
  int total_size = 0;

  // repeated int32 challengeRank = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->challengerank_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->challengerank(i));
    }
    total_size += 1 * this->challengerank_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaChallengeRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaChallengeRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaChallengeRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaChallengeRank::MergeFrom(const ArenaChallengeRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  challengerank_.MergeFrom(from.challengerank_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaChallengeRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaChallengeRank::CopyFrom(const ArenaChallengeRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaChallengeRank::IsInitialized() const {

  return true;
}

void ArenaChallengeRank::Swap(ArenaChallengeRank* other) {
  if (other != this) {
    challengerank_.Swap(&other->challengerank_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaChallengeRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaChallengeRank_descriptor_;
  metadata.reflection = ArenaChallengeRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ArenaHistoryReward::kRewardFieldNumber;
const int ArenaHistoryReward::kHavaRewardFieldNumber;
#endif  // !_MSC_VER

ArenaHistoryReward::ArenaHistoryReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ArenaHistoryReward::InitAsDefaultInstance() {
}

ArenaHistoryReward::ArenaHistoryReward(const ArenaHistoryReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ArenaHistoryReward::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ArenaHistoryReward::~ArenaHistoryReward() {
  SharedDtor();
}

void ArenaHistoryReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ArenaHistoryReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ArenaHistoryReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ArenaHistoryReward_descriptor_;
}

const ArenaHistoryReward& ArenaHistoryReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

ArenaHistoryReward* ArenaHistoryReward::default_instance_ = NULL;

ArenaHistoryReward* ArenaHistoryReward::New() const {
  return new ArenaHistoryReward;
}

void ArenaHistoryReward::Clear() {
  reward_.Clear();
  havareward_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ArenaHistoryReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 reward = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_reward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_reward;
        if (input->ExpectTag(16)) goto parse_havaReward;
        break;
      }

      // repeated int32 havaReward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_havaReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_havareward())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_havareward())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_havaReward;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ArenaHistoryReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->reward(i), output);
  }

  // repeated int32 havaReward = 2;
  for (int i = 0; i < this->havareward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->havareward(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ArenaHistoryReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 reward = 1;
  for (int i = 0; i < this->reward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->reward(i), target);
  }

  // repeated int32 havaReward = 2;
  for (int i = 0; i < this->havareward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->havareward(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ArenaHistoryReward::ByteSize() const {
  int total_size = 0;

  // repeated int32 reward = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->reward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->reward(i));
    }
    total_size += 1 * this->reward_size() + data_size;
  }

  // repeated int32 havaReward = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->havareward_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->havareward(i));
    }
    total_size += 1 * this->havareward_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ArenaHistoryReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ArenaHistoryReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ArenaHistoryReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ArenaHistoryReward::MergeFrom(const ArenaHistoryReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  reward_.MergeFrom(from.reward_);
  havareward_.MergeFrom(from.havareward_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ArenaHistoryReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ArenaHistoryReward::CopyFrom(const ArenaHistoryReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ArenaHistoryReward::IsInitialized() const {

  return true;
}

void ArenaHistoryReward::Swap(ArenaHistoryReward* other) {
  if (other != this) {
    reward_.Swap(&other->reward_);
    havareward_.Swap(&other->havareward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ArenaHistoryReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ArenaHistoryReward_descriptor_;
  metadata.reflection = ArenaHistoryReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RingDBData::kIdFieldNumber;
const int RingDBData::kExpFieldNumber;
const int RingDBData::kRewardFieldNumber;
#endif  // !_MSC_VER

RingDBData::RingDBData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RingDBData::InitAsDefaultInstance() {
}

RingDBData::RingDBData(const RingDBData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RingDBData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  exp_ = 0;
  reward_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RingDBData::~RingDBData() {
  SharedDtor();
}

void RingDBData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RingDBData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RingDBData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RingDBData_descriptor_;
}

const RingDBData& RingDBData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

RingDBData* RingDBData::default_instance_ = NULL;

RingDBData* RingDBData::New() const {
  return new RingDBData;
}

void RingDBData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    exp_ = 0;
    reward_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RingDBData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_reward;
        break;
      }

      // optional int32 reward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RingDBData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // optional int32 reward = 3;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->reward(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RingDBData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // optional int32 reward = 3;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->reward(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RingDBData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 reward = 3;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RingDBData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RingDBData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RingDBData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RingDBData::MergeFrom(const RingDBData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RingDBData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RingDBData::CopyFrom(const RingDBData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RingDBData::IsInitialized() const {

  return true;
}

void RingDBData::Swap(RingDBData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(exp_, other->exp_);
    std::swap(reward_, other->reward_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RingDBData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RingDBData_descriptor_;
  metadata.reflection = RingDBData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SaveTypeInfo::kTypeFieldNumber;
const int SaveTypeInfo::kIdFieldNumber;
const int SaveTypeInfo::kIsdelFieldNumber;
const int SaveTypeInfo::kBsinfoFieldNumber;
const int SaveTypeInfo::kBinfoFieldNumber;
const int SaveTypeInfo::kQuestinfoFieldNumber;
const int SaveTypeInfo::kSkillFieldNumber;
const int SaveTypeInfo::kCdFieldNumber;
const int SaveTypeInfo::kPackageFieldNumber;
const int SaveTypeInfo::kStorehouseFieldNumber;
const int SaveTypeInfo::kEquipquickFieldNumber;
const int SaveTypeInfo::kMonitorFieldNumber;
const int SaveTypeInfo::kHorseFieldNumber;
const int SaveTypeInfo::kInstanceFieldNumber;
const int SaveTypeInfo::kPrestigeFieldNumber;
const int SaveTypeInfo::kSigninFieldNumber;
const int SaveTypeInfo::kCounterFieldNumber;
const int SaveTypeInfo::kTitlesFieldNumber;
const int SaveTypeInfo::kEscortFieldNumber;
const int SaveTypeInfo::kDanluFieldNumber;
const int SaveTypeInfo::kVipinfoFieldNumber;
const int SaveTypeInfo::kMagicwFieldNumber;
const int SaveTypeInfo::kCjobFieldNumber;
const int SaveTypeInfo::kLucktableFieldNumber;
const int SaveTypeInfo::kDestinationFieldNumber;
const int SaveTypeInfo::kActivityFieldNumber;
const int SaveTypeInfo::kGirlwarFieldNumber;
const int SaveTypeInfo::kFashionFieldNumber;
const int SaveTypeInfo::kVitalityFieldNumber;
const int SaveTypeInfo::kCampDataFieldNumber;
const int SaveTypeInfo::kFestivalDataFieldNumber;
const int SaveTypeInfo::kInfoFieldNumber;
const int SaveTypeInfo::kOnceRewardFieldNumber;
const int SaveTypeInfo::kRingDataFieldNumber;
const int SaveTypeInfo::kGroupInfoFieldNumber;
const int SaveTypeInfo::kChristmasDataFieldNumber;
const int SaveTypeInfo::kEliteInfoFieldNumber;
const int SaveTypeInfo::kCauchemarInfoFieldNumber;
const int SaveTypeInfo::kArenaDataFieldNumber;
const int SaveTypeInfo::kChallengedataFieldNumber;
const int SaveTypeInfo::kHerodataFieldNumber;
const int SaveTypeInfo::kSmagicFieldNumber;
const int SaveTypeInfo::kHeartmagicFieldNumber;
const int SaveTypeInfo::kAdvancedFieldNumber;
const int SaveTypeInfo::kBaseShopInfoFieldNumber;
const int SaveTypeInfo::kAnswerInfoFieldNumber;
#endif  // !_MSC_VER

SaveTypeInfo::SaveTypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveTypeInfo::InitAsDefaultInstance() {
  bsinfo_ = const_cast< ::PlayerInfo::BaseInfo*>(&::PlayerInfo::BaseInfo::default_instance());
  binfo_ = const_cast< ::PlayerInfo::BattleInfo*>(&::PlayerInfo::BattleInfo::default_instance());
  questinfo_ = const_cast< ::PlayerInfo::QuestInfo*>(&::PlayerInfo::QuestInfo::default_instance());
  skill_ = const_cast< ::PlayerInfo::SkillInfo*>(&::PlayerInfo::SkillInfo::default_instance());
  cd_ = const_cast< ::PlayerInfo::CDInfo*>(&::PlayerInfo::CDInfo::default_instance());
  package_ = const_cast< ::PlayerInfo::PackageInfo*>(&::PlayerInfo::PackageInfo::default_instance());
  storehouse_ = const_cast< ::PlayerInfo::StoreHouseInfo*>(&::PlayerInfo::StoreHouseInfo::default_instance());
  equipquick_ = const_cast< ::PlayerInfo::EquipQuickInfo*>(&::PlayerInfo::EquipQuickInfo::default_instance());
  monitor_ = const_cast< ::PlayerInfo::MonitorInfo*>(&::PlayerInfo::MonitorInfo::default_instance());
  horse_ = const_cast< ::PlayerInfo::HorseInfo*>(&::PlayerInfo::HorseInfo::default_instance());
  instance_ = const_cast< ::PlayerInfo::InstanceInfoTwoDays*>(&::PlayerInfo::InstanceInfoTwoDays::default_instance());
  prestige_ = const_cast< ::PlayerInfo::PrestigeInfoList*>(&::PlayerInfo::PrestigeInfoList::default_instance());
  signin_ = const_cast< ::PlayerInfo::SignInInfo*>(&::PlayerInfo::SignInInfo::default_instance());
  counter_ = const_cast< ::PlayerInfo::CounterServiceList*>(&::PlayerInfo::CounterServiceList::default_instance());
  titles_ = const_cast< ::PlayerInfo::TitleInfoList*>(&::PlayerInfo::TitleInfoList::default_instance());
  escort_ = const_cast< ::PlayerInfo::EscortInfo*>(&::PlayerInfo::EscortInfo::default_instance());
  danlu_ = const_cast< ::PlayerInfo::DanLuInfo*>(&::PlayerInfo::DanLuInfo::default_instance());
  vipinfo_ = const_cast< ::PlayerInfo::PlayerVipInfo*>(&::PlayerInfo::PlayerVipInfo::default_instance());
  magicw_ = const_cast< ::PlayerInfo::MagicWeapon*>(&::PlayerInfo::MagicWeapon::default_instance());
  cjob_ = const_cast< ::PlayerInfo::RandCJobLucky*>(&::PlayerInfo::RandCJobLucky::default_instance());
  lucktable_ = const_cast< ::PlayerInfo::LucklyTurntable*>(&::PlayerInfo::LucklyTurntable::default_instance());
  destination_ = const_cast< ::PlayerInfo::DestinationInfoList*>(&::PlayerInfo::DestinationInfoList::default_instance());
  activity_ = const_cast< ::PlayerInfo::Activity*>(&::PlayerInfo::Activity::default_instance());
  girlwar_ = const_cast< ::PlayerInfo::GirlWarInfo*>(&::PlayerInfo::GirlWarInfo::default_instance());
  fashion_ = const_cast< ::FashionMsgProto::FashionShow*>(&::FashionMsgProto::FashionShow::default_instance());
  vitality_ = const_cast< ::VitalityProto::ProtoVitalityInfo*>(&::VitalityProto::ProtoVitalityInfo::default_instance());
  campdata_ = const_cast< ::PlayerInfo::CampShopInfo*>(&::PlayerInfo::CampShopInfo::default_instance());
  festivaldata_ = const_cast< ::PlayerInfo::FestivalInfo*>(&::PlayerInfo::FestivalInfo::default_instance());
  info_ = const_cast< ::PlayerInfo::MoneyInstance*>(&::PlayerInfo::MoneyInstance::default_instance());
  oncereward_ = const_cast< ::PlayerInfo::OnceRewardInfo*>(&::PlayerInfo::OnceRewardInfo::default_instance());
  ringdata_ = const_cast< ::PlayerInfo::RingDBData*>(&::PlayerInfo::RingDBData::default_instance());
  groupinfo_ = const_cast< ::PlayerInfo::GroupInstance*>(&::PlayerInfo::GroupInstance::default_instance());
  christmasdata_ = const_cast< ::ChristmasDB::ChristmasAllData*>(&::ChristmasDB::ChristmasAllData::default_instance());
  eliteinfo_ = const_cast< ::PlayerInfo::EliteInstance*>(&::PlayerInfo::EliteInstance::default_instance());
  cauchemarinfo_ = const_cast< ::PlayerInfo::CauchemarInstance*>(&::PlayerInfo::CauchemarInstance::default_instance());
  arenadata_ = const_cast< ::PlayerInfo::ArenaDataInfo*>(&::PlayerInfo::ArenaDataInfo::default_instance());
  challengedata_ = const_cast< ::PlayerInfo::ChallengeInstance*>(&::PlayerInfo::ChallengeInstance::default_instance());
  herodata_ = const_cast< ::PlayerInfo::HeroInstanceData*>(&::PlayerInfo::HeroInstanceData::default_instance());
  smagic_ = const_cast< ::PlayerInfo::MagicWeapon*>(&::PlayerInfo::MagicWeapon::default_instance());
  heartmagic_ = const_cast< ::PlayerInfo::MagicWeapon*>(&::PlayerInfo::MagicWeapon::default_instance());
  advanced_ = const_cast< ::PlayerInfo::AdvancedInstance*>(&::PlayerInfo::AdvancedInstance::default_instance());
  baseshopinfo_ = const_cast< ::PlayerInfo::BaseShopInfo*>(&::PlayerInfo::BaseShopInfo::default_instance());
  answerinfo_ = const_cast< ::PlayerInfo::AnswerInfo*>(&::PlayerInfo::AnswerInfo::default_instance());
}

SaveTypeInfo::SaveTypeInfo(const SaveTypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveTypeInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_LONGLONG(0);
  isdel_ = false;
  bsinfo_ = NULL;
  binfo_ = NULL;
  questinfo_ = NULL;
  skill_ = NULL;
  cd_ = NULL;
  package_ = NULL;
  storehouse_ = NULL;
  equipquick_ = NULL;
  monitor_ = NULL;
  horse_ = NULL;
  instance_ = NULL;
  prestige_ = NULL;
  signin_ = NULL;
  counter_ = NULL;
  titles_ = NULL;
  escort_ = NULL;
  danlu_ = NULL;
  vipinfo_ = NULL;
  magicw_ = NULL;
  cjob_ = NULL;
  lucktable_ = NULL;
  destination_ = NULL;
  activity_ = NULL;
  girlwar_ = NULL;
  fashion_ = NULL;
  vitality_ = NULL;
  campdata_ = NULL;
  festivaldata_ = NULL;
  info_ = NULL;
  oncereward_ = NULL;
  ringdata_ = NULL;
  groupinfo_ = NULL;
  christmasdata_ = NULL;
  eliteinfo_ = NULL;
  cauchemarinfo_ = NULL;
  arenadata_ = NULL;
  challengedata_ = NULL;
  herodata_ = NULL;
  smagic_ = NULL;
  heartmagic_ = NULL;
  advanced_ = NULL;
  baseshopinfo_ = NULL;
  answerinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveTypeInfo::~SaveTypeInfo() {
  SharedDtor();
}

void SaveTypeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete bsinfo_;
    delete binfo_;
    delete questinfo_;
    delete skill_;
    delete cd_;
    delete package_;
    delete storehouse_;
    delete equipquick_;
    delete monitor_;
    delete horse_;
    delete instance_;
    delete prestige_;
    delete signin_;
    delete counter_;
    delete titles_;
    delete escort_;
    delete danlu_;
    delete vipinfo_;
    delete magicw_;
    delete cjob_;
    delete lucktable_;
    delete destination_;
    delete activity_;
    delete girlwar_;
    delete fashion_;
    delete vitality_;
    delete campdata_;
    delete festivaldata_;
    delete info_;
    delete oncereward_;
    delete ringdata_;
    delete groupinfo_;
    delete christmasdata_;
    delete eliteinfo_;
    delete cauchemarinfo_;
    delete arenadata_;
    delete challengedata_;
    delete herodata_;
    delete smagic_;
    delete heartmagic_;
    delete advanced_;
    delete baseshopinfo_;
    delete answerinfo_;
  }
}

void SaveTypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveTypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveTypeInfo_descriptor_;
}

const SaveTypeInfo& SaveTypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

SaveTypeInfo* SaveTypeInfo::default_instance_ = NULL;

SaveTypeInfo* SaveTypeInfo::New() const {
  return new SaveTypeInfo;
}

void SaveTypeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = GOOGLE_ULONGLONG(0);
    id_ = GOOGLE_LONGLONG(0);
    isdel_ = false;
    if (has_bsinfo()) {
      if (bsinfo_ != NULL) bsinfo_->::PlayerInfo::BaseInfo::Clear();
    }
    if (has_binfo()) {
      if (binfo_ != NULL) binfo_->::PlayerInfo::BattleInfo::Clear();
    }
    if (has_questinfo()) {
      if (questinfo_ != NULL) questinfo_->::PlayerInfo::QuestInfo::Clear();
    }
    if (has_skill()) {
      if (skill_ != NULL) skill_->::PlayerInfo::SkillInfo::Clear();
    }
    if (has_cd()) {
      if (cd_ != NULL) cd_->::PlayerInfo::CDInfo::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_package()) {
      if (package_ != NULL) package_->::PlayerInfo::PackageInfo::Clear();
    }
    if (has_storehouse()) {
      if (storehouse_ != NULL) storehouse_->::PlayerInfo::StoreHouseInfo::Clear();
    }
    if (has_equipquick()) {
      if (equipquick_ != NULL) equipquick_->::PlayerInfo::EquipQuickInfo::Clear();
    }
    if (has_monitor()) {
      if (monitor_ != NULL) monitor_->::PlayerInfo::MonitorInfo::Clear();
    }
    if (has_horse()) {
      if (horse_ != NULL) horse_->::PlayerInfo::HorseInfo::Clear();
    }
    if (has_instance()) {
      if (instance_ != NULL) instance_->::PlayerInfo::InstanceInfoTwoDays::Clear();
    }
    if (has_prestige()) {
      if (prestige_ != NULL) prestige_->::PlayerInfo::PrestigeInfoList::Clear();
    }
    if (has_signin()) {
      if (signin_ != NULL) signin_->::PlayerInfo::SignInInfo::Clear();
    }
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_counter()) {
      if (counter_ != NULL) counter_->::PlayerInfo::CounterServiceList::Clear();
    }
    if (has_titles()) {
      if (titles_ != NULL) titles_->::PlayerInfo::TitleInfoList::Clear();
    }
    if (has_escort()) {
      if (escort_ != NULL) escort_->::PlayerInfo::EscortInfo::Clear();
    }
    if (has_danlu()) {
      if (danlu_ != NULL) danlu_->::PlayerInfo::DanLuInfo::Clear();
    }
    if (has_vipinfo()) {
      if (vipinfo_ != NULL) vipinfo_->::PlayerInfo::PlayerVipInfo::Clear();
    }
    if (has_magicw()) {
      if (magicw_ != NULL) magicw_->::PlayerInfo::MagicWeapon::Clear();
    }
    if (has_cjob()) {
      if (cjob_ != NULL) cjob_->::PlayerInfo::RandCJobLucky::Clear();
    }
    if (has_lucktable()) {
      if (lucktable_ != NULL) lucktable_->::PlayerInfo::LucklyTurntable::Clear();
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_destination()) {
      if (destination_ != NULL) destination_->::PlayerInfo::DestinationInfoList::Clear();
    }
    if (has_activity()) {
      if (activity_ != NULL) activity_->::PlayerInfo::Activity::Clear();
    }
    if (has_girlwar()) {
      if (girlwar_ != NULL) girlwar_->::PlayerInfo::GirlWarInfo::Clear();
    }
    if (has_fashion()) {
      if (fashion_ != NULL) fashion_->::FashionMsgProto::FashionShow::Clear();
    }
    if (has_vitality()) {
      if (vitality_ != NULL) vitality_->::VitalityProto::ProtoVitalityInfo::Clear();
    }
    if (has_campdata()) {
      if (campdata_ != NULL) campdata_->::PlayerInfo::CampShopInfo::Clear();
    }
    if (has_festivaldata()) {
      if (festivaldata_ != NULL) festivaldata_->::PlayerInfo::FestivalInfo::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerInfo::MoneyInstance::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_oncereward()) {
      if (oncereward_ != NULL) oncereward_->::PlayerInfo::OnceRewardInfo::Clear();
    }
    if (has_ringdata()) {
      if (ringdata_ != NULL) ringdata_->::PlayerInfo::RingDBData::Clear();
    }
    if (has_groupinfo()) {
      if (groupinfo_ != NULL) groupinfo_->::PlayerInfo::GroupInstance::Clear();
    }
    if (has_christmasdata()) {
      if (christmasdata_ != NULL) christmasdata_->::ChristmasDB::ChristmasAllData::Clear();
    }
    if (has_eliteinfo()) {
      if (eliteinfo_ != NULL) eliteinfo_->::PlayerInfo::EliteInstance::Clear();
    }
    if (has_cauchemarinfo()) {
      if (cauchemarinfo_ != NULL) cauchemarinfo_->::PlayerInfo::CauchemarInstance::Clear();
    }
    if (has_arenadata()) {
      if (arenadata_ != NULL) arenadata_->::PlayerInfo::ArenaDataInfo::Clear();
    }
    if (has_challengedata()) {
      if (challengedata_ != NULL) challengedata_->::PlayerInfo::ChallengeInstance::Clear();
    }
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (has_herodata()) {
      if (herodata_ != NULL) herodata_->::PlayerInfo::HeroInstanceData::Clear();
    }
    if (has_smagic()) {
      if (smagic_ != NULL) smagic_->::PlayerInfo::MagicWeapon::Clear();
    }
    if (has_heartmagic()) {
      if (heartmagic_ != NULL) heartmagic_->::PlayerInfo::MagicWeapon::Clear();
    }
    if (has_advanced()) {
      if (advanced_ != NULL) advanced_->::PlayerInfo::AdvancedInstance::Clear();
    }
    if (has_baseshopinfo()) {
      if (baseshopinfo_ != NULL) baseshopinfo_->::PlayerInfo::BaseShopInfo::Clear();
    }
    if (has_answerinfo()) {
      if (answerinfo_ != NULL) answerinfo_->::PlayerInfo::AnswerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveTypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isdel;
        break;
      }

      // required bool isdel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isdel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_bsinfo;
        break;
      }

      // optional .PlayerInfo.BaseInfo bsinfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bsinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_bsinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_binfo;
        break;
      }

      // optional .PlayerInfo.BattleInfo binfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_binfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_binfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_questinfo;
        break;
      }

      // optional .PlayerInfo.QuestInfo questinfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_skill;
        break;
      }

      // optional .PlayerInfo.SkillInfo skill = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_cd;
        break;
      }

      // optional .PlayerInfo.CDInfo cd = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_package;
        break;
      }

      // optional .PlayerInfo.PackageInfo package = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_package()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_storehouse;
        break;
      }

      // optional .PlayerInfo.StoreHouseInfo storehouse = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storehouse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storehouse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_equipquick;
        break;
      }

      // optional .PlayerInfo.EquipQuickInfo equipquick = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equipquick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equipquick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_monitor;
        break;
      }

      // optional .PlayerInfo.MonitorInfo monitor = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monitor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monitor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_horse;
        break;
      }

      // optional .PlayerInfo.HorseInfo horse = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_horse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_horse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_instance;
        break;
      }

      // optional .PlayerInfo.InstanceInfoTwoDays instance = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instance:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instance()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(122)) goto parse_prestige;
        break;
      }

      // optional .PlayerInfo.PrestigeInfoList prestige = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prestige:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prestige()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_signin;
        break;
      }

      // optional .PlayerInfo.SignInInfo signin = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_counter;
        break;
      }

      // optional .PlayerInfo.CounterServiceList counter = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(146)) goto parse_titles;
        break;
      }

      // optional .PlayerInfo.TitleInfoList titles = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titles:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_titles()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(154)) goto parse_escort;
        break;
      }

      // optional .PlayerInfo.EscortInfo escort = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_escort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_escort()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_danlu;
        break;
      }

      // optional .PlayerInfo.DanLuInfo danlu = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_danlu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_danlu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_vipinfo;
        break;
      }

      // optional .PlayerInfo.PlayerVipInfo vipinfo = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vipinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_magicw;
        break;
      }

      // optional .PlayerInfo.MagicWeapon magicw = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_magicw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_magicw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(186)) goto parse_cjob;
        break;
      }

      // optional .PlayerInfo.RandCJobLucky cjob = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cjob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cjob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_lucktable;
        break;
      }

      // optional .PlayerInfo.LucklyTurntable lucktable = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lucktable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lucktable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_destination;
        break;
      }

      // optional .PlayerInfo.DestinationInfoList destination = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_activity;
        break;
      }

      // optional .PlayerInfo.Activity activity = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_girlwar;
        break;
      }

      // optional .PlayerInfo.GirlWarInfo girlwar = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_girlwar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_girlwar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_fashion;
        break;
      }

      // optional .FashionMsgProto.FashionShow fashion = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(234)) goto parse_vitality;
        break;
      }

      // optional .VitalityProto.ProtoVitalityInfo vitality = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vitality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vitality()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(242)) goto parse_CampData;
        break;
      }

      // optional .PlayerInfo.CampShopInfo CampData = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CampData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_campdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_festivalData;
        break;
      }

      // optional .PlayerInfo.FestivalInfo festivalData = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_festivaldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_info;
        break;
      }

      // optional .PlayerInfo.MoneyInstance info = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_onceReward;
        break;
      }

      // optional .PlayerInfo.OnceRewardInfo onceReward = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_onceReward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_oncereward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(274)) goto parse_ringData;
        break;
      }

      // optional .PlayerInfo.RingDBData ringData = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ringData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_ringdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_groupInfo;
        break;
      }

      // optional .PlayerInfo.GroupInstance groupInfo = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_groupinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(290)) goto parse_christmasData;
        break;
      }

      // optional .ChristmasDB.ChristmasAllData christmasData = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_christmasData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_christmasdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(298)) goto parse_eliteInfo;
        break;
      }

      // optional .PlayerInfo.EliteInstance eliteInfo = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_eliteInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_eliteinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(306)) goto parse_cauchemarInfo;
        break;
      }

      // optional .PlayerInfo.CauchemarInstance cauchemarInfo = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cauchemarInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cauchemarinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(314)) goto parse_arenaData;
        break;
      }

      // optional .PlayerInfo.ArenaDataInfo arenaData = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_arenaData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_arenadata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(322)) goto parse_challengedata;
        break;
      }

      // optional .PlayerInfo.ChallengeInstance challengedata = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_challengedata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_challengedata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(330)) goto parse_herodata;
        break;
      }

      // optional .PlayerInfo.HeroInstanceData herodata = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_herodata:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_herodata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(338)) goto parse_smagic;
        break;
      }

      // optional .PlayerInfo.MagicWeapon smagic = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_smagic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_smagic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(346)) goto parse_heartmagic;
        break;
      }

      // optional .PlayerInfo.MagicWeapon heartmagic = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_heartmagic:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_heartmagic()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(354)) goto parse_advanced;
        break;
      }

      // optional .PlayerInfo.AdvancedInstance advanced = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_advanced:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_advanced()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(362)) goto parse_baseShopInfo;
        break;
      }

      // optional .PlayerInfo.BaseShopInfo baseShopInfo = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseShopInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseshopinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_answerInfo;
        break;
      }

      // optional .PlayerInfo.AnswerInfo answerInfo = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_answerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_answerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveTypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->type(), output);
  }

  // required int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // required bool isdel = 3;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdel(), output);
  }

  // optional .PlayerInfo.BaseInfo bsinfo = 4;
  if (has_bsinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->bsinfo(), output);
  }

  // optional .PlayerInfo.BattleInfo binfo = 5;
  if (has_binfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->binfo(), output);
  }

  // optional .PlayerInfo.QuestInfo questinfo = 6;
  if (has_questinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->questinfo(), output);
  }

  // optional .PlayerInfo.SkillInfo skill = 7;
  if (has_skill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->skill(), output);
  }

  // optional .PlayerInfo.CDInfo cd = 8;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->cd(), output);
  }

  // optional .PlayerInfo.PackageInfo package = 9;
  if (has_package()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->package(), output);
  }

  // optional .PlayerInfo.StoreHouseInfo storehouse = 10;
  if (has_storehouse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->storehouse(), output);
  }

  // optional .PlayerInfo.EquipQuickInfo equipquick = 11;
  if (has_equipquick()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->equipquick(), output);
  }

  // optional .PlayerInfo.MonitorInfo monitor = 12;
  if (has_monitor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->monitor(), output);
  }

  // optional .PlayerInfo.HorseInfo horse = 13;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->horse(), output);
  }

  // optional .PlayerInfo.InstanceInfoTwoDays instance = 14;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->instance(), output);
  }

  // optional .PlayerInfo.PrestigeInfoList prestige = 15;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      15, this->prestige(), output);
  }

  // optional .PlayerInfo.SignInInfo signin = 16;
  if (has_signin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->signin(), output);
  }

  // optional .PlayerInfo.CounterServiceList counter = 17;
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->counter(), output);
  }

  // optional .PlayerInfo.TitleInfoList titles = 18;
  if (has_titles()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      18, this->titles(), output);
  }

  // optional .PlayerInfo.EscortInfo escort = 19;
  if (has_escort()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      19, this->escort(), output);
  }

  // optional .PlayerInfo.DanLuInfo danlu = 20;
  if (has_danlu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->danlu(), output);
  }

  // optional .PlayerInfo.PlayerVipInfo vipinfo = 21;
  if (has_vipinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->vipinfo(), output);
  }

  // optional .PlayerInfo.MagicWeapon magicw = 22;
  if (has_magicw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->magicw(), output);
  }

  // optional .PlayerInfo.RandCJobLucky cjob = 23;
  if (has_cjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->cjob(), output);
  }

  // optional .PlayerInfo.LucklyTurntable lucktable = 24;
  if (has_lucktable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      24, this->lucktable(), output);
  }

  // optional .PlayerInfo.DestinationInfoList destination = 25;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      25, this->destination(), output);
  }

  // optional .PlayerInfo.Activity activity = 26;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      26, this->activity(), output);
  }

  // optional .PlayerInfo.GirlWarInfo girlwar = 27;
  if (has_girlwar()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->girlwar(), output);
  }

  // optional .FashionMsgProto.FashionShow fashion = 28;
  if (has_fashion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      28, this->fashion(), output);
  }

  // optional .VitalityProto.ProtoVitalityInfo vitality = 29;
  if (has_vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      29, this->vitality(), output);
  }

  // optional .PlayerInfo.CampShopInfo CampData = 30;
  if (has_campdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      30, this->campdata(), output);
  }

  // optional .PlayerInfo.FestivalInfo festivalData = 31;
  if (has_festivaldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->festivaldata(), output);
  }

  // optional .PlayerInfo.MoneyInstance info = 32;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->info(), output);
  }

  // optional .PlayerInfo.OnceRewardInfo onceReward = 33;
  if (has_oncereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      33, this->oncereward(), output);
  }

  // optional .PlayerInfo.RingDBData ringData = 34;
  if (has_ringdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      34, this->ringdata(), output);
  }

  // optional .PlayerInfo.GroupInstance groupInfo = 35;
  if (has_groupinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      35, this->groupinfo(), output);
  }

  // optional .ChristmasDB.ChristmasAllData christmasData = 36;
  if (has_christmasdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      36, this->christmasdata(), output);
  }

  // optional .PlayerInfo.EliteInstance eliteInfo = 37;
  if (has_eliteinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      37, this->eliteinfo(), output);
  }

  // optional .PlayerInfo.CauchemarInstance cauchemarInfo = 38;
  if (has_cauchemarinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      38, this->cauchemarinfo(), output);
  }

  // optional .PlayerInfo.ArenaDataInfo arenaData = 39;
  if (has_arenadata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      39, this->arenadata(), output);
  }

  // optional .PlayerInfo.ChallengeInstance challengedata = 40;
  if (has_challengedata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      40, this->challengedata(), output);
  }

  // optional .PlayerInfo.HeroInstanceData herodata = 41;
  if (has_herodata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      41, this->herodata(), output);
  }

  // optional .PlayerInfo.MagicWeapon smagic = 42;
  if (has_smagic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      42, this->smagic(), output);
  }

  // optional .PlayerInfo.MagicWeapon heartmagic = 43;
  if (has_heartmagic()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      43, this->heartmagic(), output);
  }

  // optional .PlayerInfo.AdvancedInstance advanced = 44;
  if (has_advanced()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      44, this->advanced(), output);
  }

  // optional .PlayerInfo.BaseShopInfo baseShopInfo = 45;
  if (has_baseshopinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      45, this->baseshopinfo(), output);
  }

  // optional .PlayerInfo.AnswerInfo answerInfo = 46;
  if (has_answerinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      46, this->answerinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveTypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->type(), target);
  }

  // required int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // required bool isdel = 3;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdel(), target);
  }

  // optional .PlayerInfo.BaseInfo bsinfo = 4;
  if (has_bsinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->bsinfo(), target);
  }

  // optional .PlayerInfo.BattleInfo binfo = 5;
  if (has_binfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->binfo(), target);
  }

  // optional .PlayerInfo.QuestInfo questinfo = 6;
  if (has_questinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->questinfo(), target);
  }

  // optional .PlayerInfo.SkillInfo skill = 7;
  if (has_skill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->skill(), target);
  }

  // optional .PlayerInfo.CDInfo cd = 8;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->cd(), target);
  }

  // optional .PlayerInfo.PackageInfo package = 9;
  if (has_package()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->package(), target);
  }

  // optional .PlayerInfo.StoreHouseInfo storehouse = 10;
  if (has_storehouse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->storehouse(), target);
  }

  // optional .PlayerInfo.EquipQuickInfo equipquick = 11;
  if (has_equipquick()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->equipquick(), target);
  }

  // optional .PlayerInfo.MonitorInfo monitor = 12;
  if (has_monitor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->monitor(), target);
  }

  // optional .PlayerInfo.HorseInfo horse = 13;
  if (has_horse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->horse(), target);
  }

  // optional .PlayerInfo.InstanceInfoTwoDays instance = 14;
  if (has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->instance(), target);
  }

  // optional .PlayerInfo.PrestigeInfoList prestige = 15;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        15, this->prestige(), target);
  }

  // optional .PlayerInfo.SignInInfo signin = 16;
  if (has_signin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->signin(), target);
  }

  // optional .PlayerInfo.CounterServiceList counter = 17;
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->counter(), target);
  }

  // optional .PlayerInfo.TitleInfoList titles = 18;
  if (has_titles()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        18, this->titles(), target);
  }

  // optional .PlayerInfo.EscortInfo escort = 19;
  if (has_escort()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        19, this->escort(), target);
  }

  // optional .PlayerInfo.DanLuInfo danlu = 20;
  if (has_danlu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->danlu(), target);
  }

  // optional .PlayerInfo.PlayerVipInfo vipinfo = 21;
  if (has_vipinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->vipinfo(), target);
  }

  // optional .PlayerInfo.MagicWeapon magicw = 22;
  if (has_magicw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->magicw(), target);
  }

  // optional .PlayerInfo.RandCJobLucky cjob = 23;
  if (has_cjob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->cjob(), target);
  }

  // optional .PlayerInfo.LucklyTurntable lucktable = 24;
  if (has_lucktable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        24, this->lucktable(), target);
  }

  // optional .PlayerInfo.DestinationInfoList destination = 25;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        25, this->destination(), target);
  }

  // optional .PlayerInfo.Activity activity = 26;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        26, this->activity(), target);
  }

  // optional .PlayerInfo.GirlWarInfo girlwar = 27;
  if (has_girlwar()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->girlwar(), target);
  }

  // optional .FashionMsgProto.FashionShow fashion = 28;
  if (has_fashion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        28, this->fashion(), target);
  }

  // optional .VitalityProto.ProtoVitalityInfo vitality = 29;
  if (has_vitality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        29, this->vitality(), target);
  }

  // optional .PlayerInfo.CampShopInfo CampData = 30;
  if (has_campdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        30, this->campdata(), target);
  }

  // optional .PlayerInfo.FestivalInfo festivalData = 31;
  if (has_festivaldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->festivaldata(), target);
  }

  // optional .PlayerInfo.MoneyInstance info = 32;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->info(), target);
  }

  // optional .PlayerInfo.OnceRewardInfo onceReward = 33;
  if (has_oncereward()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        33, this->oncereward(), target);
  }

  // optional .PlayerInfo.RingDBData ringData = 34;
  if (has_ringdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        34, this->ringdata(), target);
  }

  // optional .PlayerInfo.GroupInstance groupInfo = 35;
  if (has_groupinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        35, this->groupinfo(), target);
  }

  // optional .ChristmasDB.ChristmasAllData christmasData = 36;
  if (has_christmasdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        36, this->christmasdata(), target);
  }

  // optional .PlayerInfo.EliteInstance eliteInfo = 37;
  if (has_eliteinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        37, this->eliteinfo(), target);
  }

  // optional .PlayerInfo.CauchemarInstance cauchemarInfo = 38;
  if (has_cauchemarinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        38, this->cauchemarinfo(), target);
  }

  // optional .PlayerInfo.ArenaDataInfo arenaData = 39;
  if (has_arenadata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        39, this->arenadata(), target);
  }

  // optional .PlayerInfo.ChallengeInstance challengedata = 40;
  if (has_challengedata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        40, this->challengedata(), target);
  }

  // optional .PlayerInfo.HeroInstanceData herodata = 41;
  if (has_herodata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        41, this->herodata(), target);
  }

  // optional .PlayerInfo.MagicWeapon smagic = 42;
  if (has_smagic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        42, this->smagic(), target);
  }

  // optional .PlayerInfo.MagicWeapon heartmagic = 43;
  if (has_heartmagic()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        43, this->heartmagic(), target);
  }

  // optional .PlayerInfo.AdvancedInstance advanced = 44;
  if (has_advanced()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        44, this->advanced(), target);
  }

  // optional .PlayerInfo.BaseShopInfo baseShopInfo = 45;
  if (has_baseshopinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        45, this->baseshopinfo(), target);
  }

  // optional .PlayerInfo.AnswerInfo answerInfo = 46;
  if (has_answerinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        46, this->answerinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveTypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->type());
    }

    // required int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required bool isdel = 3;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // optional .PlayerInfo.BaseInfo bsinfo = 4;
    if (has_bsinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->bsinfo());
    }

    // optional .PlayerInfo.BattleInfo binfo = 5;
    if (has_binfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->binfo());
    }

    // optional .PlayerInfo.QuestInfo questinfo = 6;
    if (has_questinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questinfo());
    }

    // optional .PlayerInfo.SkillInfo skill = 7;
    if (has_skill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skill());
    }

    // optional .PlayerInfo.CDInfo cd = 8;
    if (has_cd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cd());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .PlayerInfo.PackageInfo package = 9;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->package());
    }

    // optional .PlayerInfo.StoreHouseInfo storehouse = 10;
    if (has_storehouse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storehouse());
    }

    // optional .PlayerInfo.EquipQuickInfo equipquick = 11;
    if (has_equipquick()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equipquick());
    }

    // optional .PlayerInfo.MonitorInfo monitor = 12;
    if (has_monitor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monitor());
    }

    // optional .PlayerInfo.HorseInfo horse = 13;
    if (has_horse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->horse());
    }

    // optional .PlayerInfo.InstanceInfoTwoDays instance = 14;
    if (has_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instance());
    }

    // optional .PlayerInfo.PrestigeInfoList prestige = 15;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prestige());
    }

    // optional .PlayerInfo.SignInInfo signin = 16;
    if (has_signin()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signin());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional .PlayerInfo.CounterServiceList counter = 17;
    if (has_counter()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counter());
    }

    // optional .PlayerInfo.TitleInfoList titles = 18;
    if (has_titles()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->titles());
    }

    // optional .PlayerInfo.EscortInfo escort = 19;
    if (has_escort()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->escort());
    }

    // optional .PlayerInfo.DanLuInfo danlu = 20;
    if (has_danlu()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->danlu());
    }

    // optional .PlayerInfo.PlayerVipInfo vipinfo = 21;
    if (has_vipinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vipinfo());
    }

    // optional .PlayerInfo.MagicWeapon magicw = 22;
    if (has_magicw()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->magicw());
    }

    // optional .PlayerInfo.RandCJobLucky cjob = 23;
    if (has_cjob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cjob());
    }

    // optional .PlayerInfo.LucklyTurntable lucktable = 24;
    if (has_lucktable()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lucktable());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional .PlayerInfo.DestinationInfoList destination = 25;
    if (has_destination()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destination());
    }

    // optional .PlayerInfo.Activity activity = 26;
    if (has_activity()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity());
    }

    // optional .PlayerInfo.GirlWarInfo girlwar = 27;
    if (has_girlwar()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->girlwar());
    }

    // optional .FashionMsgProto.FashionShow fashion = 28;
    if (has_fashion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashion());
    }

    // optional .VitalityProto.ProtoVitalityInfo vitality = 29;
    if (has_vitality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vitality());
    }

    // optional .PlayerInfo.CampShopInfo CampData = 30;
    if (has_campdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->campdata());
    }

    // optional .PlayerInfo.FestivalInfo festivalData = 31;
    if (has_festivaldata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->festivaldata());
    }

    // optional .PlayerInfo.MoneyInstance info = 32;
    if (has_info()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional .PlayerInfo.OnceRewardInfo onceReward = 33;
    if (has_oncereward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->oncereward());
    }

    // optional .PlayerInfo.RingDBData ringData = 34;
    if (has_ringdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->ringdata());
    }

    // optional .PlayerInfo.GroupInstance groupInfo = 35;
    if (has_groupinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->groupinfo());
    }

    // optional .ChristmasDB.ChristmasAllData christmasData = 36;
    if (has_christmasdata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->christmasdata());
    }

    // optional .PlayerInfo.EliteInstance eliteInfo = 37;
    if (has_eliteinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->eliteinfo());
    }

    // optional .PlayerInfo.CauchemarInstance cauchemarInfo = 38;
    if (has_cauchemarinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cauchemarinfo());
    }

    // optional .PlayerInfo.ArenaDataInfo arenaData = 39;
    if (has_arenadata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->arenadata());
    }

    // optional .PlayerInfo.ChallengeInstance challengedata = 40;
    if (has_challengedata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->challengedata());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional .PlayerInfo.HeroInstanceData herodata = 41;
    if (has_herodata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->herodata());
    }

    // optional .PlayerInfo.MagicWeapon smagic = 42;
    if (has_smagic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->smagic());
    }

    // optional .PlayerInfo.MagicWeapon heartmagic = 43;
    if (has_heartmagic()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->heartmagic());
    }

    // optional .PlayerInfo.AdvancedInstance advanced = 44;
    if (has_advanced()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->advanced());
    }

    // optional .PlayerInfo.BaseShopInfo baseShopInfo = 45;
    if (has_baseshopinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseshopinfo());
    }

    // optional .PlayerInfo.AnswerInfo answerInfo = 46;
    if (has_answerinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->answerinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveTypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveTypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveTypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveTypeInfo::MergeFrom(const SaveTypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_bsinfo()) {
      mutable_bsinfo()->::PlayerInfo::BaseInfo::MergeFrom(from.bsinfo());
    }
    if (from.has_binfo()) {
      mutable_binfo()->::PlayerInfo::BattleInfo::MergeFrom(from.binfo());
    }
    if (from.has_questinfo()) {
      mutable_questinfo()->::PlayerInfo::QuestInfo::MergeFrom(from.questinfo());
    }
    if (from.has_skill()) {
      mutable_skill()->::PlayerInfo::SkillInfo::MergeFrom(from.skill());
    }
    if (from.has_cd()) {
      mutable_cd()->::PlayerInfo::CDInfo::MergeFrom(from.cd());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_package()) {
      mutable_package()->::PlayerInfo::PackageInfo::MergeFrom(from.package());
    }
    if (from.has_storehouse()) {
      mutable_storehouse()->::PlayerInfo::StoreHouseInfo::MergeFrom(from.storehouse());
    }
    if (from.has_equipquick()) {
      mutable_equipquick()->::PlayerInfo::EquipQuickInfo::MergeFrom(from.equipquick());
    }
    if (from.has_monitor()) {
      mutable_monitor()->::PlayerInfo::MonitorInfo::MergeFrom(from.monitor());
    }
    if (from.has_horse()) {
      mutable_horse()->::PlayerInfo::HorseInfo::MergeFrom(from.horse());
    }
    if (from.has_instance()) {
      mutable_instance()->::PlayerInfo::InstanceInfoTwoDays::MergeFrom(from.instance());
    }
    if (from.has_prestige()) {
      mutable_prestige()->::PlayerInfo::PrestigeInfoList::MergeFrom(from.prestige());
    }
    if (from.has_signin()) {
      mutable_signin()->::PlayerInfo::SignInInfo::MergeFrom(from.signin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_counter()) {
      mutable_counter()->::PlayerInfo::CounterServiceList::MergeFrom(from.counter());
    }
    if (from.has_titles()) {
      mutable_titles()->::PlayerInfo::TitleInfoList::MergeFrom(from.titles());
    }
    if (from.has_escort()) {
      mutable_escort()->::PlayerInfo::EscortInfo::MergeFrom(from.escort());
    }
    if (from.has_danlu()) {
      mutable_danlu()->::PlayerInfo::DanLuInfo::MergeFrom(from.danlu());
    }
    if (from.has_vipinfo()) {
      mutable_vipinfo()->::PlayerInfo::PlayerVipInfo::MergeFrom(from.vipinfo());
    }
    if (from.has_magicw()) {
      mutable_magicw()->::PlayerInfo::MagicWeapon::MergeFrom(from.magicw());
    }
    if (from.has_cjob()) {
      mutable_cjob()->::PlayerInfo::RandCJobLucky::MergeFrom(from.cjob());
    }
    if (from.has_lucktable()) {
      mutable_lucktable()->::PlayerInfo::LucklyTurntable::MergeFrom(from.lucktable());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_destination()) {
      mutable_destination()->::PlayerInfo::DestinationInfoList::MergeFrom(from.destination());
    }
    if (from.has_activity()) {
      mutable_activity()->::PlayerInfo::Activity::MergeFrom(from.activity());
    }
    if (from.has_girlwar()) {
      mutable_girlwar()->::PlayerInfo::GirlWarInfo::MergeFrom(from.girlwar());
    }
    if (from.has_fashion()) {
      mutable_fashion()->::FashionMsgProto::FashionShow::MergeFrom(from.fashion());
    }
    if (from.has_vitality()) {
      mutable_vitality()->::VitalityProto::ProtoVitalityInfo::MergeFrom(from.vitality());
    }
    if (from.has_campdata()) {
      mutable_campdata()->::PlayerInfo::CampShopInfo::MergeFrom(from.campdata());
    }
    if (from.has_festivaldata()) {
      mutable_festivaldata()->::PlayerInfo::FestivalInfo::MergeFrom(from.festivaldata());
    }
    if (from.has_info()) {
      mutable_info()->::PlayerInfo::MoneyInstance::MergeFrom(from.info());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_oncereward()) {
      mutable_oncereward()->::PlayerInfo::OnceRewardInfo::MergeFrom(from.oncereward());
    }
    if (from.has_ringdata()) {
      mutable_ringdata()->::PlayerInfo::RingDBData::MergeFrom(from.ringdata());
    }
    if (from.has_groupinfo()) {
      mutable_groupinfo()->::PlayerInfo::GroupInstance::MergeFrom(from.groupinfo());
    }
    if (from.has_christmasdata()) {
      mutable_christmasdata()->::ChristmasDB::ChristmasAllData::MergeFrom(from.christmasdata());
    }
    if (from.has_eliteinfo()) {
      mutable_eliteinfo()->::PlayerInfo::EliteInstance::MergeFrom(from.eliteinfo());
    }
    if (from.has_cauchemarinfo()) {
      mutable_cauchemarinfo()->::PlayerInfo::CauchemarInstance::MergeFrom(from.cauchemarinfo());
    }
    if (from.has_arenadata()) {
      mutable_arenadata()->::PlayerInfo::ArenaDataInfo::MergeFrom(from.arenadata());
    }
    if (from.has_challengedata()) {
      mutable_challengedata()->::PlayerInfo::ChallengeInstance::MergeFrom(from.challengedata());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_herodata()) {
      mutable_herodata()->::PlayerInfo::HeroInstanceData::MergeFrom(from.herodata());
    }
    if (from.has_smagic()) {
      mutable_smagic()->::PlayerInfo::MagicWeapon::MergeFrom(from.smagic());
    }
    if (from.has_heartmagic()) {
      mutable_heartmagic()->::PlayerInfo::MagicWeapon::MergeFrom(from.heartmagic());
    }
    if (from.has_advanced()) {
      mutable_advanced()->::PlayerInfo::AdvancedInstance::MergeFrom(from.advanced());
    }
    if (from.has_baseshopinfo()) {
      mutable_baseshopinfo()->::PlayerInfo::BaseShopInfo::MergeFrom(from.baseshopinfo());
    }
    if (from.has_answerinfo()) {
      mutable_answerinfo()->::PlayerInfo::AnswerInfo::MergeFrom(from.answerinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveTypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveTypeInfo::CopyFrom(const SaveTypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveTypeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_bsinfo()) {
    if (!this->bsinfo().IsInitialized()) return false;
  }
  if (has_binfo()) {
    if (!this->binfo().IsInitialized()) return false;
  }
  if (has_questinfo()) {
    if (!this->questinfo().IsInitialized()) return false;
  }
  if (has_skill()) {
    if (!this->skill().IsInitialized()) return false;
  }
  if (has_cd()) {
    if (!this->cd().IsInitialized()) return false;
  }
  if (has_package()) {
    if (!this->package().IsInitialized()) return false;
  }
  if (has_storehouse()) {
    if (!this->storehouse().IsInitialized()) return false;
  }
  if (has_equipquick()) {
    if (!this->equipquick().IsInitialized()) return false;
  }
  if (has_horse()) {
    if (!this->horse().IsInitialized()) return false;
  }
  if (has_instance()) {
    if (!this->instance().IsInitialized()) return false;
  }
  if (has_prestige()) {
    if (!this->prestige().IsInitialized()) return false;
  }
  if (has_titles()) {
    if (!this->titles().IsInitialized()) return false;
  }
  if (has_cjob()) {
    if (!this->cjob().IsInitialized()) return false;
  }
  if (has_destination()) {
    if (!this->destination().IsInitialized()) return false;
  }
  if (has_activity()) {
    if (!this->activity().IsInitialized()) return false;
  }
  if (has_girlwar()) {
    if (!this->girlwar().IsInitialized()) return false;
  }
  if (has_fashion()) {
    if (!this->fashion().IsInitialized()) return false;
  }
  if (has_vitality()) {
    if (!this->vitality().IsInitialized()) return false;
  }
  if (has_groupinfo()) {
    if (!this->groupinfo().IsInitialized()) return false;
  }
  if (has_eliteinfo()) {
    if (!this->eliteinfo().IsInitialized()) return false;
  }
  if (has_cauchemarinfo()) {
    if (!this->cauchemarinfo().IsInitialized()) return false;
  }
  if (has_advanced()) {
    if (!this->advanced().IsInitialized()) return false;
  }
  if (has_baseshopinfo()) {
    if (!this->baseshopinfo().IsInitialized()) return false;
  }
  return true;
}

void SaveTypeInfo::Swap(SaveTypeInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(isdel_, other->isdel_);
    std::swap(bsinfo_, other->bsinfo_);
    std::swap(binfo_, other->binfo_);
    std::swap(questinfo_, other->questinfo_);
    std::swap(skill_, other->skill_);
    std::swap(cd_, other->cd_);
    std::swap(package_, other->package_);
    std::swap(storehouse_, other->storehouse_);
    std::swap(equipquick_, other->equipquick_);
    std::swap(monitor_, other->monitor_);
    std::swap(horse_, other->horse_);
    std::swap(instance_, other->instance_);
    std::swap(prestige_, other->prestige_);
    std::swap(signin_, other->signin_);
    std::swap(counter_, other->counter_);
    std::swap(titles_, other->titles_);
    std::swap(escort_, other->escort_);
    std::swap(danlu_, other->danlu_);
    std::swap(vipinfo_, other->vipinfo_);
    std::swap(magicw_, other->magicw_);
    std::swap(cjob_, other->cjob_);
    std::swap(lucktable_, other->lucktable_);
    std::swap(destination_, other->destination_);
    std::swap(activity_, other->activity_);
    std::swap(girlwar_, other->girlwar_);
    std::swap(fashion_, other->fashion_);
    std::swap(vitality_, other->vitality_);
    std::swap(campdata_, other->campdata_);
    std::swap(festivaldata_, other->festivaldata_);
    std::swap(info_, other->info_);
    std::swap(oncereward_, other->oncereward_);
    std::swap(ringdata_, other->ringdata_);
    std::swap(groupinfo_, other->groupinfo_);
    std::swap(christmasdata_, other->christmasdata_);
    std::swap(eliteinfo_, other->eliteinfo_);
    std::swap(cauchemarinfo_, other->cauchemarinfo_);
    std::swap(arenadata_, other->arenadata_);
    std::swap(challengedata_, other->challengedata_);
    std::swap(herodata_, other->herodata_);
    std::swap(smagic_, other->smagic_);
    std::swap(heartmagic_, other->heartmagic_);
    std::swap(advanced_, other->advanced_);
    std::swap(baseshopinfo_, other->baseshopinfo_);
    std::swap(answerinfo_, other->answerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveTypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveTypeInfo_descriptor_;
  metadata.reflection = SaveTypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSaveTypeInfo::kTypeFieldNumber;
const int WSaveTypeInfo::kIdFieldNumber;
const int WSaveTypeInfo::kIsdelFieldNumber;
const int WSaveTypeInfo::kFriendInfoFieldNumber;
#endif  // !_MSC_VER

WSaveTypeInfo::WSaveTypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSaveTypeInfo::InitAsDefaultInstance() {
  friendinfo_ = const_cast< ::PlayerInfo::FriendInfoList*>(&::PlayerInfo::FriendInfoList::default_instance());
}

WSaveTypeInfo::WSaveTypeInfo(const WSaveTypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSaveTypeInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = GOOGLE_ULONGLONG(0);
  id_ = GOOGLE_LONGLONG(0);
  isdel_ = false;
  friendinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSaveTypeInfo::~WSaveTypeInfo() {
  SharedDtor();
}

void WSaveTypeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete friendinfo_;
  }
}

void WSaveTypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSaveTypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSaveTypeInfo_descriptor_;
}

const WSaveTypeInfo& WSaveTypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

WSaveTypeInfo* WSaveTypeInfo::default_instance_ = NULL;

WSaveTypeInfo* WSaveTypeInfo::New() const {
  return new WSaveTypeInfo;
}

void WSaveTypeInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = GOOGLE_ULONGLONG(0);
    id_ = GOOGLE_LONGLONG(0);
    isdel_ = false;
    if (has_friendinfo()) {
      if (friendinfo_ != NULL) friendinfo_->::PlayerInfo::FriendInfoList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSaveTypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint64 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int64 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isdel;
        break;
      }

      // required bool isdel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isdel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_friendInfo;
        break;
      }

      // optional .PlayerInfo.FriendInfoList friendInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSaveTypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint64 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(1, this->type(), output);
  }

  // required int64 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->id(), output);
  }

  // required bool isdel = 3;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->isdel(), output);
  }

  // optional .PlayerInfo.FriendInfoList friendInfo = 4;
  if (has_friendinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->friendinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSaveTypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint64 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(1, this->type(), target);
  }

  // required int64 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->id(), target);
  }

  // required bool isdel = 3;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->isdel(), target);
  }

  // optional .PlayerInfo.FriendInfoList friendInfo = 4;
  if (has_friendinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->friendinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSaveTypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint64 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->type());
    }

    // required int64 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // required bool isdel = 3;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

    // optional .PlayerInfo.FriendInfoList friendInfo = 4;
    if (has_friendinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSaveTypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSaveTypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSaveTypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSaveTypeInfo::MergeFrom(const WSaveTypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
    if (from.has_friendinfo()) {
      mutable_friendinfo()->::PlayerInfo::FriendInfoList::MergeFrom(from.friendinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSaveTypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSaveTypeInfo::CopyFrom(const WSaveTypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSaveTypeInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  if (has_friendinfo()) {
    if (!this->friendinfo().IsInitialized()) return false;
  }
  return true;
}

void WSaveTypeInfo::Swap(WSaveTypeInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(isdel_, other->isdel_);
    std::swap(friendinfo_, other->friendinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSaveTypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSaveTypeInfo_descriptor_;
  metadata.reflection = WSaveTypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseInfo::kCharidFieldNumber;
const int BaseInfo::kCharnameFieldNumber;
const int BaseInfo::kExpFieldNumber;
const int BaseInfo::kLevelFieldNumber;
const int BaseInfo::kMoneyFieldNumber;
const int BaseInfo::kGoldenFieldNumber;
const int BaseInfo::kBindgoldenFieldNumber;
const int BaseInfo::kDeadtimeFieldNumber;
const int BaseInfo::kSexFieldNumber;
const int BaseInfo::kProfessionFieldNumber;
const int BaseInfo::kXposFieldNumber;
const int BaseInfo::kYposFieldNumber;
const int BaseInfo::kHorseFieldNumber;
const int BaseInfo::kMapidFieldNumber;
const int BaseInfo::kCountryFieldNumber;
const int BaseInfo::kCharheadFieldNumber;
const int BaseInfo::kFacontributionFieldNumber;
const int BaseInfo::kFactionFieldNumber;
const int BaseInfo::kFajobFieldNumber;
const int BaseInfo::kMateFieldNumber;
const int BaseInfo::kCountryjobFieldNumber;
const int BaseInfo::kBattlecontriFieldNumber;
const int BaseInfo::kArmyjobFieldNumber;
const int BaseInfo::kCountrycontriFieldNumber;
const int BaseInfo::kTitleidFieldNumber;
const int BaseInfo::kAccounttypeFieldNumber;
const int BaseInfo::kOpenidFieldNumber;
const int BaseInfo::kServeridFieldNumber;
const int BaseInfo::kSinvalueFieldNumber;
const int BaseInfo::kAcupointFieldNumber;
const int BaseInfo::kSettingsFieldNumber;
const int BaseInfo::kHavetodoFieldNumber;
const int BaseInfo::kHavetodoawardFieldNumber;
const int BaseInfo::kActivitesFieldNumber;
const int BaseInfo::kActivitesawardFieldNumber;
const int BaseInfo::kOfflineTimeFieldNumber;
const int BaseInfo::kOnlineRewardFieldNumber;
const int BaseInfo::kOnlineTimeFieldNumber;
const int BaseInfo::kLevelRewardFieldNumber;
const int BaseInfo::kPrestigeFieldNumber;
const int BaseInfo::kHistoryRewardFieldNumber;
const int BaseInfo::kViplvFieldNumber;
const int BaseInfo::kContinueanswerFieldNumber;
const int BaseInfo::kRightanswerFieldNumber;
const int BaseInfo::kAddupgoldeFieldNumber;
const int BaseInfo::kClannameFieldNumber;
const int BaseInfo::kRankingFieldNumber;
const int BaseInfo::kAwardrankingFieldNumber;
const int BaseInfo::kAntiAddictionStateFieldNumber;
const int BaseInfo::kAntiAddictionOnLineTimeFieldNumber;
const int BaseInfo::kTotalOnlineTimeFieldNumber;
const int BaseInfo::kNextTalkTimeFieldNumber;
const int BaseInfo::kTreasonkingRewardFieldNumber;
const int BaseInfo::kPracticeTimeFieldNumber;
const int BaseInfo::kScoreFieldNumber;
const int BaseInfo::kPkTypeFieldNumber;
const int BaseInfo::kClaniconFieldNumber;
const int BaseInfo::kLoginIPFieldNumber;
const int BaseInfo::kTeamidFieldNumber;
const int BaseInfo::kFashionIDFieldNumber;
const int BaseInfo::kAntiAddictionAddTimeFieldNumber;
const int BaseInfo::kCoupleFieldNumber;
const int BaseInfo::kPowerFieldNumber;
const int BaseInfo::kFitchFieldNumber;
const int BaseInfo::kWeekContributeFieldNumber;
const int BaseInfo::kCurContributeFieldNumber;
const int BaseInfo::kKingRankFlagFieldNumber;
const int BaseInfo::kCreditFieldNumber;
const int BaseInfo::kEnvelopeCountFieldNumber;
const int BaseInfo::kMaxCanGetEnvelopeCountFieldNumber;
const int BaseInfo::kAttributeClearTimeFieldNumber;
const int BaseInfo::kGoldenCostFieldNumber;
const int BaseInfo::kOpenKeyFieldNumber;
const int BaseInfo::kPfFieldNumber;
const int BaseInfo::kPfKeyFieldNumber;
const int BaseInfo::kCouplenameFieldNumber;
const int BaseInfo::kMgicweaponPowerFieldNumber;
const int BaseInfo::kGourdExpFieldNumber;
const int BaseInfo::kPvpflagFieldNumber;
const int BaseInfo::kClientTypeFieldNumber;
const int BaseInfo::kGuideFieldNumber;
const int BaseInfo::kSourceFieldNumber;
const int BaseInfo::kRechargetimeFieldNumber;
const int BaseInfo::kChallengemoneyFieldNumber;
#endif  // !_MSC_VER

BaseInfo::BaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseInfo::InitAsDefaultInstance() {
}

BaseInfo::BaseInfo(const BaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  money_ = 0;
  golden_ = 0;
  bindgolden_ = 0;
  deadtime_ = GOOGLE_LONGLONG(0);
  sex_ = false;
  profession_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  horse_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  country_ = 0;
  charhead_ = 0;
  facontribution_ = 0;
  faction_ = 0;
  fajob_ = 0;
  mate_ = GOOGLE_LONGLONG(0);
  countryjob_ = 0;
  battlecontri_ = 0;
  armyjob_ = 0;
  countrycontri_ = 0;
  titleid_ = 0;
  accounttype_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0;
  sinvalue_ = 0;
  acupoint_ = 0;
  settings_ = 0;
  havetodo_ = GOOGLE_LONGLONG(0);
  havetodoaward_ = 0;
  activites_ = 0;
  activitesaward_ = 0;
  offlinetime_ = GOOGLE_LONGLONG(0);
  onlinereward_ = 0;
  onlinetime_ = GOOGLE_LONGLONG(0);
  levelreward_ = 0;
  prestige_ = 0;
  historyreward_ = 0;
  viplv_ = 0;
  continueanswer_ = 0;
  rightanswer_ = 0;
  addupgolde_ = 0;
  clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ranking_ = 0;
  awardranking_ = 0;
  antiaddictionstate_ = 0;
  antiaddictiononlinetime_ = 0;
  totalonlinetime_ = GOOGLE_LONGLONG(0);
  nexttalktime_ = GOOGLE_LONGLONG(0);
  treasonkingreward_ = 0;
  practicetime_ = 0;
  score_ = 0;
  pktype_ = 0;
  clanicon_ = 0;
  loginip_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  teamid_ = GOOGLE_LONGLONG(0);
  fashionid_ = 0;
  antiaddictionaddtime_ = 0;
  couple_ = GOOGLE_LONGLONG(0);
  power_ = 0;
  fitch_ = 0;
  weekcontribute_ = 0;
  curcontribute_ = 0;
  kingrankflag_ = 0;
  credit_ = 0;
  envelopecount_ = 0;
  maxcangetenvelopecount_ = 0;
  attributecleartime_ = GOOGLE_ULONGLONG(0);
  goldencost_ = 0;
  openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  couplename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  mgicweaponpower_ = 0;
  gourdexp_ = 0;
  pvpflag_ = 0;
  clienttype_ = 0;
  guide_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  rechargetime_ = GOOGLE_LONGLONG(0);
  challengemoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseInfo::~BaseInfo() {
  SharedDtor();
}

void BaseInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (loginip_ != &::google::protobuf::internal::kEmptyString) {
    delete loginip_;
  }
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    delete openkey_;
  }
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    delete pf_;
  }
  if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pfkey_;
  }
  if (couplename_ != &::google::protobuf::internal::kEmptyString) {
    delete couplename_;
  }
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (this != default_instance_) {
  }
}

void BaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseInfo_descriptor_;
}

const BaseInfo& BaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

BaseInfo* BaseInfo::default_instance_ = NULL;

BaseInfo* BaseInfo::New() const {
  return new BaseInfo;
}

void BaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    exp_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    money_ = 0;
    golden_ = 0;
    bindgolden_ = 0;
    deadtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sex_ = false;
    profession_ = 0;
    xpos_ = 0;
    ypos_ = 0;
    horse_ = 0;
    mapid_ = GOOGLE_LONGLONG(0);
    country_ = 0;
    charhead_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    facontribution_ = 0;
    faction_ = 0;
    fajob_ = 0;
    mate_ = GOOGLE_LONGLONG(0);
    countryjob_ = 0;
    battlecontri_ = 0;
    armyjob_ = 0;
    countrycontri_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    titleid_ = 0;
    accounttype_ = 0;
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    serverid_ = 0;
    sinvalue_ = 0;
    acupoint_ = 0;
    settings_ = 0;
    havetodo_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    havetodoaward_ = 0;
    activites_ = 0;
    activitesaward_ = 0;
    offlinetime_ = GOOGLE_LONGLONG(0);
    onlinereward_ = 0;
    onlinetime_ = GOOGLE_LONGLONG(0);
    levelreward_ = 0;
    prestige_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    historyreward_ = 0;
    viplv_ = 0;
    continueanswer_ = 0;
    rightanswer_ = 0;
    addupgolde_ = 0;
    if (has_clanname()) {
      if (clanname_ != &::google::protobuf::internal::kEmptyString) {
        clanname_->clear();
      }
    }
    ranking_ = 0;
    awardranking_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    antiaddictionstate_ = 0;
    antiaddictiononlinetime_ = 0;
    totalonlinetime_ = GOOGLE_LONGLONG(0);
    nexttalktime_ = GOOGLE_LONGLONG(0);
    treasonkingreward_ = 0;
    practicetime_ = 0;
    score_ = 0;
    pktype_ = 0;
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    clanicon_ = 0;
    if (has_loginip()) {
      if (loginip_ != &::google::protobuf::internal::kEmptyString) {
        loginip_->clear();
      }
    }
    teamid_ = GOOGLE_LONGLONG(0);
    fashionid_ = 0;
    antiaddictionaddtime_ = 0;
    couple_ = GOOGLE_LONGLONG(0);
    power_ = 0;
    fitch_ = 0;
  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    weekcontribute_ = 0;
    curcontribute_ = 0;
    kingrankflag_ = 0;
    credit_ = 0;
    envelopecount_ = 0;
    maxcangetenvelopecount_ = 0;
    attributecleartime_ = GOOGLE_ULONGLONG(0);
    goldencost_ = 0;
  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (has_openkey()) {
      if (openkey_ != &::google::protobuf::internal::kEmptyString) {
        openkey_->clear();
      }
    }
    if (has_pf()) {
      if (pf_ != &::google::protobuf::internal::kEmptyString) {
        pf_->clear();
      }
    }
    if (has_pfkey()) {
      if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
        pfkey_->clear();
      }
    }
    if (has_couplename()) {
      if (couplename_ != &::google::protobuf::internal::kEmptyString) {
        couplename_->clear();
      }
    }
    mgicweaponpower_ = 0;
    gourdexp_ = 0;
    pvpflag_ = 0;
    clienttype_ = 0;
  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    guide_ = 0;
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
    rechargetime_ = GOOGLE_LONGLONG(0);
    challengemoney_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // required string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // required int64 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_money;
        break;
      }

      // required int32 money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_golden;
        break;
      }

      // required int32 golden = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &golden_)));
          set_has_golden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bindgolden;
        break;
      }

      // required int32 bindgolden = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindgolden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindgolden_)));
          set_has_bindgolden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_deadtime;
        break;
      }

      // required int64 deadtime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadtime_)));
          set_has_deadtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sex;
        break;
      }

      // required bool sex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_profession;
        break;
      }

      // required int32 profession = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_xpos;
        break;
      }

      // required int32 xpos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ypos;
        break;
      }

      // required int32 ypos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_horse;
        break;
      }

      // required int32 horse = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horse_)));
          set_has_horse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_mapid;
        break;
      }

      // required int64 mapid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_country;
        break;
      }

      // required int32 country = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_charhead;
        break;
      }

      // required int32 charhead = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charhead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charhead_)));
          set_has_charhead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_facontribution;
        break;
      }

      // optional int32 facontribution = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facontribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facontribution_)));
          set_has_facontribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_faction;
        break;
      }

      // optional int32 faction = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faction_)));
          set_has_faction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_fajob;
        break;
      }

      // optional int32 fajob = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fajob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fajob_)));
          set_has_fajob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_mate;
        break;
      }

      // required int64 mate = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mate_)));
          set_has_mate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_countryjob;
        break;
      }

      // required int32 countryjob = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countryjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countryjob_)));
          set_has_countryjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_battlecontri;
        break;
      }

      // required int32 battlecontri = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlecontri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlecontri_)));
          set_has_battlecontri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_armyjob;
        break;
      }

      // required int32 armyjob = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armyjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armyjob_)));
          set_has_armyjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_countrycontri;
        break;
      }

      // optional int32 countrycontri = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countrycontri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countrycontri_)));
          set_has_countrycontri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_titleid;
        break;
      }

      // optional int32 titleid = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_accounttype;
        break;
      }

      // required int32 accounttype = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accounttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accounttype_)));
          set_has_accounttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_openid;
        break;
      }

      // required string openid = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_serverid;
        break;
      }

      // required int32 serverid = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_sinvalue;
        break;
      }

      // required int32 sinvalue = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sinvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sinvalue_)));
          set_has_sinvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_acupoint;
        break;
      }

      // required int32 acupoint = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acupoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acupoint_)));
          set_has_acupoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_settings;
        break;
      }

      // required int32 settings = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_settings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settings_)));
          set_has_settings();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_havetodo;
        break;
      }

      // required int64 havetodo = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_havetodo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &havetodo_)));
          set_has_havetodo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_havetodoaward;
        break;
      }

      // required int32 havetodoaward = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_havetodoaward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &havetodoaward_)));
          set_has_havetodoaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_activites;
        break;
      }

      // required int32 activites = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activites_)));
          set_has_activites();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_activitesaward;
        break;
      }

      // required int32 activitesaward = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activitesaward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activitesaward_)));
          set_has_activitesaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_offlineTime;
        break;
      }

      // required int64 offlineTime = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_onlineReward;
        break;
      }

      // required int32 onlineReward = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinereward_)));
          set_has_onlinereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_onlineTime;
        break;
      }

      // required int64 onlineTime = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_levelReward;
        break;
      }

      // required int32 levelReward = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelreward_)));
          set_has_levelreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_prestige;
        break;
      }

      // required int32 prestige = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_historyReward;
        break;
      }

      // required int32 historyReward = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_historyReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &historyreward_)));
          set_has_historyreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_viplv;
        break;
      }

      // required int32 viplv = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_continueanswer;
        break;
      }

      // required int32 continueanswer = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continueanswer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continueanswer_)));
          set_has_continueanswer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_rightanswer;
        break;
      }

      // required int32 rightanswer = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightanswer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightanswer_)));
          set_has_rightanswer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_addupgolde;
        break;
      }

      // required int32 addupgolde = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addupgolde:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addupgolde_)));
          set_has_addupgolde();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(370)) goto parse_clanname;
        break;
      }

      // optional string clanname = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clanname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clanname().data(), this->clanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_ranking;
        break;
      }

      // optional int32 ranking = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_awardranking;
        break;
      }

      // optional int32 awardranking = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardranking_)));
          set_has_awardranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_AntiAddictionState;
        break;
      }

      // optional int32 AntiAddictionState = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AntiAddictionState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antiaddictionstate_)));
          set_has_antiaddictionstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_AntiAddictionOnLineTime;
        break;
      }

      // optional int32 AntiAddictionOnLineTime = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AntiAddictionOnLineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antiaddictiononlinetime_)));
          set_has_antiaddictiononlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_totalOnlineTime;
        break;
      }

      // optional int64 totalOnlineTime = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalOnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalonlinetime_)));
          set_has_totalonlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_NextTalkTime;
        break;
      }

      // optional int64 NextTalkTime = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NextTalkTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nexttalktime_)));
          set_has_nexttalktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_treasonkingReward;
        break;
      }

      // optional int32 treasonkingReward = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_treasonkingReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &treasonkingreward_)));
          set_has_treasonkingreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_practiceTime;
        break;
      }

      // optional int32 practiceTime = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_practiceTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &practicetime_)));
          set_has_practicetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_score;
        break;
      }

      // optional int32 score = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_pkType;
        break;
      }

      // optional int32 pkType = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pktype_)));
          set_has_pktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(456)) goto parse_clanicon;
        break;
      }

      // optional int32 clanicon = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanicon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanicon_)));
          set_has_clanicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(466)) goto parse_loginIP;
        break;
      }

      // optional bytes loginIP = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_loginIP:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_loginip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_teamid;
        break;
      }

      // optional int64 teamid = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(480)) goto parse_fashionID;
        break;
      }

      // optional int32 fashionID = 60;
      case 60: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashionid_)));
          set_has_fashionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(488)) goto parse_antiAddictionAddTime;
        break;
      }

      // optional int32 antiAddictionAddTime = 61;
      case 61: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_antiAddictionAddTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antiaddictionaddtime_)));
          set_has_antiaddictionaddtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(496)) goto parse_couple;
        break;
      }

      // optional int64 couple = 62;
      case 62: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_couple:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &couple_)));
          set_has_couple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(504)) goto parse_power;
        break;
      }

      // optional int32 power = 63;
      case 63: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(512)) goto parse_fitch;
        break;
      }

      // optional int32 fitch = 64;
      case 64: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fitch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fitch_)));
          set_has_fitch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(520)) goto parse_weekContribute;
        break;
      }

      // optional int32 weekContribute = 65;
      case 65: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weekContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weekcontribute_)));
          set_has_weekcontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(528)) goto parse_curContribute;
        break;
      }

      // optional int32 curContribute = 66;
      case 66: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curContribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curcontribute_)));
          set_has_curcontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(536)) goto parse_KingRankFlag;
        break;
      }

      // optional int32 KingRankFlag = 67;
      case 67: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_KingRankFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &kingrankflag_)));
          set_has_kingrankflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(544)) goto parse_credit;
        break;
      }

      // optional int32 credit = 68;
      case 68: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(552)) goto parse_envelopeCount;
        break;
      }

      // optional int32 envelopeCount = 69;
      case 69: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_envelopeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &envelopecount_)));
          set_has_envelopecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(560)) goto parse_maxCanGetEnvelopeCount;
        break;
      }

      // optional int32 maxCanGetEnvelopeCount = 70;
      case 70: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxCanGetEnvelopeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxcangetenvelopecount_)));
          set_has_maxcangetenvelopecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(568)) goto parse_attributeClearTime;
        break;
      }

      // optional uint64 attributeClearTime = 71;
      case 71: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attributeClearTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &attributecleartime_)));
          set_has_attributecleartime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(576)) goto parse_goldenCost;
        break;
      }

      // optional int32 goldenCost = 72;
      case 72: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goldenCost:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &goldencost_)));
          set_has_goldencost();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(586)) goto parse_openKey;
        break;
      }

      // optional string openKey = 73;
      case 73: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openkey().data(), this->openkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(594)) goto parse_pf;
        break;
      }

      // optional string pf = 74;
      case 74: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pf().data(), this->pf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(602)) goto parse_pfKey;
        break;
      }

      // optional string pfKey = 75;
      case 75: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pfKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pfkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pfkey().data(), this->pfkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(610)) goto parse_couplename;
        break;
      }

      // optional string couplename = 76;
      case 76: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_couplename:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_couplename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->couplename().data(), this->couplename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(616)) goto parse_mgicweaponPower;
        break;
      }

      // optional int32 mgicweaponPower = 77;
      case 77: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mgicweaponPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mgicweaponpower_)));
          set_has_mgicweaponpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(624)) goto parse_gourdExp;
        break;
      }

      // optional int32 gourdExp = 78;
      case 78: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gourdExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gourdexp_)));
          set_has_gourdexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(632)) goto parse_pvpflag;
        break;
      }

      // optional int32 pvpflag = 79;
      case 79: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pvpflag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pvpflag_)));
          set_has_pvpflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(640)) goto parse_clientType;
        break;
      }

      // optional int32 clientType = 80;
      case 80: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clienttype_)));
          set_has_clienttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(648)) goto parse_guide;
        break;
      }

      // optional int32 guide = 81;
      case 81: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guide_)));
          set_has_guide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(658)) goto parse_source;
        break;
      }

      // optional string source = 82;
      case 82: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(664)) goto parse_rechargetime;
        break;
      }

      // optional int64 rechargetime = 83;
      case 83: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rechargetime_)));
          set_has_rechargetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(672)) goto parse_challengemoney;
        break;
      }

      // optional int64 challengemoney = 84;
      case 84: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengemoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &challengemoney_)));
          set_has_challengemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  // required int64 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->exp(), output);
  }

  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required int32 money = 5;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->money(), output);
  }

  // required int32 golden = 6;
  if (has_golden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->golden(), output);
  }

  // required int32 bindgolden = 7;
  if (has_bindgolden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bindgolden(), output);
  }

  // required int64 deadtime = 8;
  if (has_deadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->deadtime(), output);
  }

  // required bool sex = 9;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->sex(), output);
  }

  // required int32 profession = 10;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->profession(), output);
  }

  // required int32 xpos = 11;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->xpos(), output);
  }

  // required int32 ypos = 12;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ypos(), output);
  }

  // required int32 horse = 13;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->horse(), output);
  }

  // required int64 mapid = 14;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->mapid(), output);
  }

  // required int32 country = 15;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->country(), output);
  }

  // required int32 charhead = 16;
  if (has_charhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->charhead(), output);
  }

  // optional int32 facontribution = 17;
  if (has_facontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->facontribution(), output);
  }

  // optional int32 faction = 18;
  if (has_faction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->faction(), output);
  }

  // optional int32 fajob = 19;
  if (has_fajob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->fajob(), output);
  }

  // required int64 mate = 20;
  if (has_mate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(20, this->mate(), output);
  }

  // required int32 countryjob = 21;
  if (has_countryjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->countryjob(), output);
  }

  // required int32 battlecontri = 22;
  if (has_battlecontri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->battlecontri(), output);
  }

  // required int32 armyjob = 23;
  if (has_armyjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->armyjob(), output);
  }

  // optional int32 countrycontri = 24;
  if (has_countrycontri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->countrycontri(), output);
  }

  // optional int32 titleid = 25;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->titleid(), output);
  }

  // required int32 accounttype = 26;
  if (has_accounttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->accounttype(), output);
  }

  // required string openid = 27;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->openid(), output);
  }

  // required int32 serverid = 28;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->serverid(), output);
  }

  // required int32 sinvalue = 29;
  if (has_sinvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->sinvalue(), output);
  }

  // required int32 acupoint = 30;
  if (has_acupoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->acupoint(), output);
  }

  // required int32 settings = 31;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->settings(), output);
  }

  // required int64 havetodo = 32;
  if (has_havetodo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(32, this->havetodo(), output);
  }

  // required int32 havetodoaward = 33;
  if (has_havetodoaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->havetodoaward(), output);
  }

  // required int32 activites = 34;
  if (has_activites()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->activites(), output);
  }

  // required int32 activitesaward = 35;
  if (has_activitesaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->activitesaward(), output);
  }

  // required int64 offlineTime = 36;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(36, this->offlinetime(), output);
  }

  // required int32 onlineReward = 37;
  if (has_onlinereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->onlinereward(), output);
  }

  // required int64 onlineTime = 38;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(38, this->onlinetime(), output);
  }

  // required int32 levelReward = 39;
  if (has_levelreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(39, this->levelreward(), output);
  }

  // required int32 prestige = 40;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->prestige(), output);
  }

  // required int32 historyReward = 41;
  if (has_historyreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->historyreward(), output);
  }

  // required int32 viplv = 42;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->viplv(), output);
  }

  // required int32 continueanswer = 43;
  if (has_continueanswer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->continueanswer(), output);
  }

  // required int32 rightanswer = 44;
  if (has_rightanswer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->rightanswer(), output);
  }

  // required int32 addupgolde = 45;
  if (has_addupgolde()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->addupgolde(), output);
  }

  // optional string clanname = 46;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      46, this->clanname(), output);
  }

  // optional int32 ranking = 47;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->ranking(), output);
  }

  // optional int32 awardranking = 48;
  if (has_awardranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->awardranking(), output);
  }

  // optional int32 AntiAddictionState = 49;
  if (has_antiaddictionstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->antiaddictionstate(), output);
  }

  // optional int32 AntiAddictionOnLineTime = 50;
  if (has_antiaddictiononlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->antiaddictiononlinetime(), output);
  }

  // optional int64 totalOnlineTime = 51;
  if (has_totalonlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(51, this->totalonlinetime(), output);
  }

  // optional int64 NextTalkTime = 52;
  if (has_nexttalktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(52, this->nexttalktime(), output);
  }

  // optional int32 treasonkingReward = 53;
  if (has_treasonkingreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->treasonkingreward(), output);
  }

  // optional int32 practiceTime = 54;
  if (has_practicetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->practicetime(), output);
  }

  // optional int32 score = 55;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->score(), output);
  }

  // optional int32 pkType = 56;
  if (has_pktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(56, this->pktype(), output);
  }

  // optional int32 clanicon = 57;
  if (has_clanicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(57, this->clanicon(), output);
  }

  // optional bytes loginIP = 58;
  if (has_loginip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      58, this->loginip(), output);
  }

  // optional int64 teamid = 59;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(59, this->teamid(), output);
  }

  // optional int32 fashionID = 60;
  if (has_fashionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(60, this->fashionid(), output);
  }

  // optional int32 antiAddictionAddTime = 61;
  if (has_antiaddictionaddtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(61, this->antiaddictionaddtime(), output);
  }

  // optional int64 couple = 62;
  if (has_couple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(62, this->couple(), output);
  }

  // optional int32 power = 63;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(63, this->power(), output);
  }

  // optional int32 fitch = 64;
  if (has_fitch()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(64, this->fitch(), output);
  }

  // optional int32 weekContribute = 65;
  if (has_weekcontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(65, this->weekcontribute(), output);
  }

  // optional int32 curContribute = 66;
  if (has_curcontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(66, this->curcontribute(), output);
  }

  // optional int32 KingRankFlag = 67;
  if (has_kingrankflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(67, this->kingrankflag(), output);
  }

  // optional int32 credit = 68;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(68, this->credit(), output);
  }

  // optional int32 envelopeCount = 69;
  if (has_envelopecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(69, this->envelopecount(), output);
  }

  // optional int32 maxCanGetEnvelopeCount = 70;
  if (has_maxcangetenvelopecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(70, this->maxcangetenvelopecount(), output);
  }

  // optional uint64 attributeClearTime = 71;
  if (has_attributecleartime()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(71, this->attributecleartime(), output);
  }

  // optional int32 goldenCost = 72;
  if (has_goldencost()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(72, this->goldencost(), output);
  }

  // optional string openKey = 73;
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      73, this->openkey(), output);
  }

  // optional string pf = 74;
  if (has_pf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pf().data(), this->pf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      74, this->pf(), output);
  }

  // optional string pfKey = 75;
  if (has_pfkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pfkey().data(), this->pfkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      75, this->pfkey(), output);
  }

  // optional string couplename = 76;
  if (has_couplename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->couplename().data(), this->couplename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      76, this->couplename(), output);
  }

  // optional int32 mgicweaponPower = 77;
  if (has_mgicweaponpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(77, this->mgicweaponpower(), output);
  }

  // optional int32 gourdExp = 78;
  if (has_gourdexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(78, this->gourdexp(), output);
  }

  // optional int32 pvpflag = 79;
  if (has_pvpflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(79, this->pvpflag(), output);
  }

  // optional int32 clientType = 80;
  if (has_clienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(80, this->clienttype(), output);
  }

  // optional int32 guide = 81;
  if (has_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(81, this->guide(), output);
  }

  // optional string source = 82;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      82, this->source(), output);
  }

  // optional int64 rechargetime = 83;
  if (has_rechargetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(83, this->rechargetime(), output);
  }

  // optional int64 challengemoney = 84;
  if (has_challengemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(84, this->challengemoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // required int64 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->exp(), target);
  }

  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required int32 money = 5;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->money(), target);
  }

  // required int32 golden = 6;
  if (has_golden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->golden(), target);
  }

  // required int32 bindgolden = 7;
  if (has_bindgolden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bindgolden(), target);
  }

  // required int64 deadtime = 8;
  if (has_deadtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->deadtime(), target);
  }

  // required bool sex = 9;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->sex(), target);
  }

  // required int32 profession = 10;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->profession(), target);
  }

  // required int32 xpos = 11;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->xpos(), target);
  }

  // required int32 ypos = 12;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ypos(), target);
  }

  // required int32 horse = 13;
  if (has_horse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->horse(), target);
  }

  // required int64 mapid = 14;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->mapid(), target);
  }

  // required int32 country = 15;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->country(), target);
  }

  // required int32 charhead = 16;
  if (has_charhead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->charhead(), target);
  }

  // optional int32 facontribution = 17;
  if (has_facontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->facontribution(), target);
  }

  // optional int32 faction = 18;
  if (has_faction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->faction(), target);
  }

  // optional int32 fajob = 19;
  if (has_fajob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->fajob(), target);
  }

  // required int64 mate = 20;
  if (has_mate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(20, this->mate(), target);
  }

  // required int32 countryjob = 21;
  if (has_countryjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->countryjob(), target);
  }

  // required int32 battlecontri = 22;
  if (has_battlecontri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->battlecontri(), target);
  }

  // required int32 armyjob = 23;
  if (has_armyjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->armyjob(), target);
  }

  // optional int32 countrycontri = 24;
  if (has_countrycontri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->countrycontri(), target);
  }

  // optional int32 titleid = 25;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->titleid(), target);
  }

  // required int32 accounttype = 26;
  if (has_accounttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->accounttype(), target);
  }

  // required string openid = 27;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->openid(), target);
  }

  // required int32 serverid = 28;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->serverid(), target);
  }

  // required int32 sinvalue = 29;
  if (has_sinvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->sinvalue(), target);
  }

  // required int32 acupoint = 30;
  if (has_acupoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->acupoint(), target);
  }

  // required int32 settings = 31;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->settings(), target);
  }

  // required int64 havetodo = 32;
  if (has_havetodo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(32, this->havetodo(), target);
  }

  // required int32 havetodoaward = 33;
  if (has_havetodoaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->havetodoaward(), target);
  }

  // required int32 activites = 34;
  if (has_activites()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->activites(), target);
  }

  // required int32 activitesaward = 35;
  if (has_activitesaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->activitesaward(), target);
  }

  // required int64 offlineTime = 36;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(36, this->offlinetime(), target);
  }

  // required int32 onlineReward = 37;
  if (has_onlinereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->onlinereward(), target);
  }

  // required int64 onlineTime = 38;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(38, this->onlinetime(), target);
  }

  // required int32 levelReward = 39;
  if (has_levelreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(39, this->levelreward(), target);
  }

  // required int32 prestige = 40;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->prestige(), target);
  }

  // required int32 historyReward = 41;
  if (has_historyreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->historyreward(), target);
  }

  // required int32 viplv = 42;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->viplv(), target);
  }

  // required int32 continueanswer = 43;
  if (has_continueanswer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->continueanswer(), target);
  }

  // required int32 rightanswer = 44;
  if (has_rightanswer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->rightanswer(), target);
  }

  // required int32 addupgolde = 45;
  if (has_addupgolde()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->addupgolde(), target);
  }

  // optional string clanname = 46;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        46, this->clanname(), target);
  }

  // optional int32 ranking = 47;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->ranking(), target);
  }

  // optional int32 awardranking = 48;
  if (has_awardranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->awardranking(), target);
  }

  // optional int32 AntiAddictionState = 49;
  if (has_antiaddictionstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->antiaddictionstate(), target);
  }

  // optional int32 AntiAddictionOnLineTime = 50;
  if (has_antiaddictiononlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->antiaddictiononlinetime(), target);
  }

  // optional int64 totalOnlineTime = 51;
  if (has_totalonlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(51, this->totalonlinetime(), target);
  }

  // optional int64 NextTalkTime = 52;
  if (has_nexttalktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(52, this->nexttalktime(), target);
  }

  // optional int32 treasonkingReward = 53;
  if (has_treasonkingreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->treasonkingreward(), target);
  }

  // optional int32 practiceTime = 54;
  if (has_practicetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->practicetime(), target);
  }

  // optional int32 score = 55;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->score(), target);
  }

  // optional int32 pkType = 56;
  if (has_pktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(56, this->pktype(), target);
  }

  // optional int32 clanicon = 57;
  if (has_clanicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(57, this->clanicon(), target);
  }

  // optional bytes loginIP = 58;
  if (has_loginip()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        58, this->loginip(), target);
  }

  // optional int64 teamid = 59;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(59, this->teamid(), target);
  }

  // optional int32 fashionID = 60;
  if (has_fashionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(60, this->fashionid(), target);
  }

  // optional int32 antiAddictionAddTime = 61;
  if (has_antiaddictionaddtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(61, this->antiaddictionaddtime(), target);
  }

  // optional int64 couple = 62;
  if (has_couple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(62, this->couple(), target);
  }

  // optional int32 power = 63;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(63, this->power(), target);
  }

  // optional int32 fitch = 64;
  if (has_fitch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(64, this->fitch(), target);
  }

  // optional int32 weekContribute = 65;
  if (has_weekcontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(65, this->weekcontribute(), target);
  }

  // optional int32 curContribute = 66;
  if (has_curcontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(66, this->curcontribute(), target);
  }

  // optional int32 KingRankFlag = 67;
  if (has_kingrankflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(67, this->kingrankflag(), target);
  }

  // optional int32 credit = 68;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(68, this->credit(), target);
  }

  // optional int32 envelopeCount = 69;
  if (has_envelopecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(69, this->envelopecount(), target);
  }

  // optional int32 maxCanGetEnvelopeCount = 70;
  if (has_maxcangetenvelopecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(70, this->maxcangetenvelopecount(), target);
  }

  // optional uint64 attributeClearTime = 71;
  if (has_attributecleartime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(71, this->attributecleartime(), target);
  }

  // optional int32 goldenCost = 72;
  if (has_goldencost()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(72, this->goldencost(), target);
  }

  // optional string openKey = 73;
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        73, this->openkey(), target);
  }

  // optional string pf = 74;
  if (has_pf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pf().data(), this->pf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        74, this->pf(), target);
  }

  // optional string pfKey = 75;
  if (has_pfkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pfkey().data(), this->pfkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        75, this->pfkey(), target);
  }

  // optional string couplename = 76;
  if (has_couplename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->couplename().data(), this->couplename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        76, this->couplename(), target);
  }

  // optional int32 mgicweaponPower = 77;
  if (has_mgicweaponpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(77, this->mgicweaponpower(), target);
  }

  // optional int32 gourdExp = 78;
  if (has_gourdexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(78, this->gourdexp(), target);
  }

  // optional int32 pvpflag = 79;
  if (has_pvpflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(79, this->pvpflag(), target);
  }

  // optional int32 clientType = 80;
  if (has_clienttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(80, this->clienttype(), target);
  }

  // optional int32 guide = 81;
  if (has_guide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(81, this->guide(), target);
  }

  // optional string source = 82;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        82, this->source(), target);
  }

  // optional int64 rechargetime = 83;
  if (has_rechargetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(83, this->rechargetime(), target);
  }

  // optional int64 challengemoney = 84;
  if (has_challengemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(84, this->challengemoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required int64 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // required int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // required int32 golden = 6;
    if (has_golden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->golden());
    }

    // required int32 bindgolden = 7;
    if (has_bindgolden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindgolden());
    }

    // required int64 deadtime = 8;
    if (has_deadtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deadtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool sex = 9;
    if (has_sex()) {
      total_size += 1 + 1;
    }

    // required int32 profession = 10;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // required int32 xpos = 11;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

    // required int32 ypos = 12;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

    // required int32 horse = 13;
    if (has_horse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horse());
    }

    // required int64 mapid = 14;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // required int32 country = 15;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // required int32 charhead = 16;
    if (has_charhead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charhead());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 facontribution = 17;
    if (has_facontribution()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->facontribution());
    }

    // optional int32 faction = 18;
    if (has_faction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faction());
    }

    // optional int32 fajob = 19;
    if (has_fajob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fajob());
    }

    // required int64 mate = 20;
    if (has_mate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mate());
    }

    // required int32 countryjob = 21;
    if (has_countryjob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryjob());
    }

    // required int32 battlecontri = 22;
    if (has_battlecontri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlecontri());
    }

    // required int32 armyjob = 23;
    if (has_armyjob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armyjob());
    }

    // optional int32 countrycontri = 24;
    if (has_countrycontri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countrycontri());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 titleid = 25;
    if (has_titleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // required int32 accounttype = 26;
    if (has_accounttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accounttype());
    }

    // required string openid = 27;
    if (has_openid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required int32 serverid = 28;
    if (has_serverid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required int32 sinvalue = 29;
    if (has_sinvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sinvalue());
    }

    // required int32 acupoint = 30;
    if (has_acupoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acupoint());
    }

    // required int32 settings = 31;
    if (has_settings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settings());
    }

    // required int64 havetodo = 32;
    if (has_havetodo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->havetodo());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int32 havetodoaward = 33;
    if (has_havetodoaward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->havetodoaward());
    }

    // required int32 activites = 34;
    if (has_activites()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activites());
    }

    // required int32 activitesaward = 35;
    if (has_activitesaward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activitesaward());
    }

    // required int64 offlineTime = 36;
    if (has_offlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offlinetime());
    }

    // required int32 onlineReward = 37;
    if (has_onlinereward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinereward());
    }

    // required int64 onlineTime = 38;
    if (has_onlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->onlinetime());
    }

    // required int32 levelReward = 39;
    if (has_levelreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelreward());
    }

    // required int32 prestige = 40;
    if (has_prestige()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prestige());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required int32 historyReward = 41;
    if (has_historyreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->historyreward());
    }

    // required int32 viplv = 42;
    if (has_viplv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

    // required int32 continueanswer = 43;
    if (has_continueanswer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continueanswer());
    }

    // required int32 rightanswer = 44;
    if (has_rightanswer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightanswer());
    }

    // required int32 addupgolde = 45;
    if (has_addupgolde()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addupgolde());
    }

    // optional string clanname = 46;
    if (has_clanname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clanname());
    }

    // optional int32 ranking = 47;
    if (has_ranking()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // optional int32 awardranking = 48;
    if (has_awardranking()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardranking());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 AntiAddictionState = 49;
    if (has_antiaddictionstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antiaddictionstate());
    }

    // optional int32 AntiAddictionOnLineTime = 50;
    if (has_antiaddictiononlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antiaddictiononlinetime());
    }

    // optional int64 totalOnlineTime = 51;
    if (has_totalonlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalonlinetime());
    }

    // optional int64 NextTalkTime = 52;
    if (has_nexttalktime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nexttalktime());
    }

    // optional int32 treasonkingReward = 53;
    if (has_treasonkingreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->treasonkingreward());
    }

    // optional int32 practiceTime = 54;
    if (has_practicetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->practicetime());
    }

    // optional int32 score = 55;
    if (has_score()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int32 pkType = 56;
    if (has_pktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pktype());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional int32 clanicon = 57;
    if (has_clanicon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanicon());
    }

    // optional bytes loginIP = 58;
    if (has_loginip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->loginip());
    }

    // optional int64 teamid = 59;
    if (has_teamid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

    // optional int32 fashionID = 60;
    if (has_fashionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashionid());
    }

    // optional int32 antiAddictionAddTime = 61;
    if (has_antiaddictionaddtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antiaddictionaddtime());
    }

    // optional int64 couple = 62;
    if (has_couple()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->couple());
    }

    // optional int32 power = 63;
    if (has_power()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 fitch = 64;
    if (has_fitch()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fitch());
    }

  }
  if (_has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    // optional int32 weekContribute = 65;
    if (has_weekcontribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weekcontribute());
    }

    // optional int32 curContribute = 66;
    if (has_curcontribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curcontribute());
    }

    // optional int32 KingRankFlag = 67;
    if (has_kingrankflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->kingrankflag());
    }

    // optional int32 credit = 68;
    if (has_credit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

    // optional int32 envelopeCount = 69;
    if (has_envelopecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->envelopecount());
    }

    // optional int32 maxCanGetEnvelopeCount = 70;
    if (has_maxcangetenvelopecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxcangetenvelopecount());
    }

    // optional uint64 attributeClearTime = 71;
    if (has_attributecleartime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->attributecleartime());
    }

    // optional int32 goldenCost = 72;
    if (has_goldencost()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->goldencost());
    }

  }
  if (_has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    // optional string openKey = 73;
    if (has_openkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openkey());
    }

    // optional string pf = 74;
    if (has_pf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pf());
    }

    // optional string pfKey = 75;
    if (has_pfkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pfkey());
    }

    // optional string couplename = 76;
    if (has_couplename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->couplename());
    }

    // optional int32 mgicweaponPower = 77;
    if (has_mgicweaponpower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mgicweaponpower());
    }

    // optional int32 gourdExp = 78;
    if (has_gourdexp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gourdexp());
    }

    // optional int32 pvpflag = 79;
    if (has_pvpflag()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pvpflag());
    }

    // optional int32 clientType = 80;
    if (has_clienttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clienttype());
    }

  }
  if (_has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    // optional int32 guide = 81;
    if (has_guide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guide());
    }

    // optional string source = 82;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

    // optional int64 rechargetime = 83;
    if (has_rechargetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rechargetime());
    }

    // optional int64 challengemoney = 84;
    if (has_challengemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->challengemoney());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseInfo::MergeFrom(const BaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_golden()) {
      set_golden(from.golden());
    }
    if (from.has_bindgolden()) {
      set_bindgolden(from.bindgolden());
    }
    if (from.has_deadtime()) {
      set_deadtime(from.deadtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_horse()) {
      set_horse(from.horse());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_charhead()) {
      set_charhead(from.charhead());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_facontribution()) {
      set_facontribution(from.facontribution());
    }
    if (from.has_faction()) {
      set_faction(from.faction());
    }
    if (from.has_fajob()) {
      set_fajob(from.fajob());
    }
    if (from.has_mate()) {
      set_mate(from.mate());
    }
    if (from.has_countryjob()) {
      set_countryjob(from.countryjob());
    }
    if (from.has_battlecontri()) {
      set_battlecontri(from.battlecontri());
    }
    if (from.has_armyjob()) {
      set_armyjob(from.armyjob());
    }
    if (from.has_countrycontri()) {
      set_countrycontri(from.countrycontri());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_accounttype()) {
      set_accounttype(from.accounttype());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_sinvalue()) {
      set_sinvalue(from.sinvalue());
    }
    if (from.has_acupoint()) {
      set_acupoint(from.acupoint());
    }
    if (from.has_settings()) {
      set_settings(from.settings());
    }
    if (from.has_havetodo()) {
      set_havetodo(from.havetodo());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_havetodoaward()) {
      set_havetodoaward(from.havetodoaward());
    }
    if (from.has_activites()) {
      set_activites(from.activites());
    }
    if (from.has_activitesaward()) {
      set_activitesaward(from.activitesaward());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_onlinereward()) {
      set_onlinereward(from.onlinereward());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_levelreward()) {
      set_levelreward(from.levelreward());
    }
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_historyreward()) {
      set_historyreward(from.historyreward());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_continueanswer()) {
      set_continueanswer(from.continueanswer());
    }
    if (from.has_rightanswer()) {
      set_rightanswer(from.rightanswer());
    }
    if (from.has_addupgolde()) {
      set_addupgolde(from.addupgolde());
    }
    if (from.has_clanname()) {
      set_clanname(from.clanname());
    }
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_awardranking()) {
      set_awardranking(from.awardranking());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_antiaddictionstate()) {
      set_antiaddictionstate(from.antiaddictionstate());
    }
    if (from.has_antiaddictiononlinetime()) {
      set_antiaddictiononlinetime(from.antiaddictiononlinetime());
    }
    if (from.has_totalonlinetime()) {
      set_totalonlinetime(from.totalonlinetime());
    }
    if (from.has_nexttalktime()) {
      set_nexttalktime(from.nexttalktime());
    }
    if (from.has_treasonkingreward()) {
      set_treasonkingreward(from.treasonkingreward());
    }
    if (from.has_practicetime()) {
      set_practicetime(from.practicetime());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_pktype()) {
      set_pktype(from.pktype());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_clanicon()) {
      set_clanicon(from.clanicon());
    }
    if (from.has_loginip()) {
      set_loginip(from.loginip());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_fashionid()) {
      set_fashionid(from.fashionid());
    }
    if (from.has_antiaddictionaddtime()) {
      set_antiaddictionaddtime(from.antiaddictionaddtime());
    }
    if (from.has_couple()) {
      set_couple(from.couple());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_fitch()) {
      set_fitch(from.fitch());
    }
  }
  if (from._has_bits_[64 / 32] & (0xffu << (64 % 32))) {
    if (from.has_weekcontribute()) {
      set_weekcontribute(from.weekcontribute());
    }
    if (from.has_curcontribute()) {
      set_curcontribute(from.curcontribute());
    }
    if (from.has_kingrankflag()) {
      set_kingrankflag(from.kingrankflag());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_envelopecount()) {
      set_envelopecount(from.envelopecount());
    }
    if (from.has_maxcangetenvelopecount()) {
      set_maxcangetenvelopecount(from.maxcangetenvelopecount());
    }
    if (from.has_attributecleartime()) {
      set_attributecleartime(from.attributecleartime());
    }
    if (from.has_goldencost()) {
      set_goldencost(from.goldencost());
    }
  }
  if (from._has_bits_[72 / 32] & (0xffu << (72 % 32))) {
    if (from.has_openkey()) {
      set_openkey(from.openkey());
    }
    if (from.has_pf()) {
      set_pf(from.pf());
    }
    if (from.has_pfkey()) {
      set_pfkey(from.pfkey());
    }
    if (from.has_couplename()) {
      set_couplename(from.couplename());
    }
    if (from.has_mgicweaponpower()) {
      set_mgicweaponpower(from.mgicweaponpower());
    }
    if (from.has_gourdexp()) {
      set_gourdexp(from.gourdexp());
    }
    if (from.has_pvpflag()) {
      set_pvpflag(from.pvpflag());
    }
    if (from.has_clienttype()) {
      set_clienttype(from.clienttype());
    }
  }
  if (from._has_bits_[80 / 32] & (0xffu << (80 % 32))) {
    if (from.has_guide()) {
      set_guide(from.guide());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
    if (from.has_rechargetime()) {
      set_rechargetime(from.rechargetime());
    }
    if (from.has_challengemoney()) {
      set_challengemoney(from.challengemoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseInfo::CopyFrom(const BaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xfe78ffff) != 0xfe78ffff) return false;
  if ((_has_bits_[1] & 0x00001fff) != 0x00001fff) return false;

  return true;
}

void BaseInfo::Swap(BaseInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(money_, other->money_);
    std::swap(golden_, other->golden_);
    std::swap(bindgolden_, other->bindgolden_);
    std::swap(deadtime_, other->deadtime_);
    std::swap(sex_, other->sex_);
    std::swap(profession_, other->profession_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(horse_, other->horse_);
    std::swap(mapid_, other->mapid_);
    std::swap(country_, other->country_);
    std::swap(charhead_, other->charhead_);
    std::swap(facontribution_, other->facontribution_);
    std::swap(faction_, other->faction_);
    std::swap(fajob_, other->fajob_);
    std::swap(mate_, other->mate_);
    std::swap(countryjob_, other->countryjob_);
    std::swap(battlecontri_, other->battlecontri_);
    std::swap(armyjob_, other->armyjob_);
    std::swap(countrycontri_, other->countrycontri_);
    std::swap(titleid_, other->titleid_);
    std::swap(accounttype_, other->accounttype_);
    std::swap(openid_, other->openid_);
    std::swap(serverid_, other->serverid_);
    std::swap(sinvalue_, other->sinvalue_);
    std::swap(acupoint_, other->acupoint_);
    std::swap(settings_, other->settings_);
    std::swap(havetodo_, other->havetodo_);
    std::swap(havetodoaward_, other->havetodoaward_);
    std::swap(activites_, other->activites_);
    std::swap(activitesaward_, other->activitesaward_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(onlinereward_, other->onlinereward_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(levelreward_, other->levelreward_);
    std::swap(prestige_, other->prestige_);
    std::swap(historyreward_, other->historyreward_);
    std::swap(viplv_, other->viplv_);
    std::swap(continueanswer_, other->continueanswer_);
    std::swap(rightanswer_, other->rightanswer_);
    std::swap(addupgolde_, other->addupgolde_);
    std::swap(clanname_, other->clanname_);
    std::swap(ranking_, other->ranking_);
    std::swap(awardranking_, other->awardranking_);
    std::swap(antiaddictionstate_, other->antiaddictionstate_);
    std::swap(antiaddictiononlinetime_, other->antiaddictiononlinetime_);
    std::swap(totalonlinetime_, other->totalonlinetime_);
    std::swap(nexttalktime_, other->nexttalktime_);
    std::swap(treasonkingreward_, other->treasonkingreward_);
    std::swap(practicetime_, other->practicetime_);
    std::swap(score_, other->score_);
    std::swap(pktype_, other->pktype_);
    std::swap(clanicon_, other->clanicon_);
    std::swap(loginip_, other->loginip_);
    std::swap(teamid_, other->teamid_);
    std::swap(fashionid_, other->fashionid_);
    std::swap(antiaddictionaddtime_, other->antiaddictionaddtime_);
    std::swap(couple_, other->couple_);
    std::swap(power_, other->power_);
    std::swap(fitch_, other->fitch_);
    std::swap(weekcontribute_, other->weekcontribute_);
    std::swap(curcontribute_, other->curcontribute_);
    std::swap(kingrankflag_, other->kingrankflag_);
    std::swap(credit_, other->credit_);
    std::swap(envelopecount_, other->envelopecount_);
    std::swap(maxcangetenvelopecount_, other->maxcangetenvelopecount_);
    std::swap(attributecleartime_, other->attributecleartime_);
    std::swap(goldencost_, other->goldencost_);
    std::swap(openkey_, other->openkey_);
    std::swap(pf_, other->pf_);
    std::swap(pfkey_, other->pfkey_);
    std::swap(couplename_, other->couplename_);
    std::swap(mgicweaponpower_, other->mgicweaponpower_);
    std::swap(gourdexp_, other->gourdexp_);
    std::swap(pvpflag_, other->pvpflag_);
    std::swap(clienttype_, other->clienttype_);
    std::swap(guide_, other->guide_);
    std::swap(source_, other->source_);
    std::swap(rechargetime_, other->rechargetime_);
    std::swap(challengemoney_, other->challengemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    std::swap(_has_bits_[2], other->_has_bits_[2]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseInfo_descriptor_;
  metadata.reflection = BaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BattleInfo::kHpFieldNumber;
const int BattleInfo::kHpmaxFieldNumber;
const int BattleInfo::kMpFieldNumber;
const int BattleInfo::kMpmaxFieldNumber;
const int BattleInfo::kForceFieldNumber;
const int BattleInfo::kForcemaxFieldNumber;
const int BattleInfo::kStrengthFieldNumber;
const int BattleInfo::kCleverpowerFieldNumber;
const int BattleInfo::kCleverairFieldNumber;
const int BattleInfo::kPhysicalpowerFieldNumber;
const int BattleInfo::kPatienceFieldNumber;
const int BattleInfo::kAgilityFieldNumber;
const int BattleInfo::kPkcountFieldNumber;
const int BattleInfo::kPowerFieldNumber;
const int BattleInfo::kPowermaxFieldNumber;
const int BattleInfo::kPhyattackFieldNumber;
const int BattleInfo::kPhyattackmaxFieldNumber;
const int BattleInfo::kPhydefenceFieldNumber;
const int BattleInfo::kMagicattackFieldNumber;
const int BattleInfo::kMagicattackmaxFieldNumber;
const int BattleInfo::kMagicdefenceFieldNumber;
const int BattleInfo::kHitrateFieldNumber;
const int BattleInfo::kAvoidrateFieldNumber;
const int BattleInfo::kBaseluckyFieldNumber;
const int BattleInfo::kCrackdownrateFieldNumber;
const int BattleInfo::kBaserteFieldNumber;
const int BattleInfo::kMovespeedFieldNumber;
#endif  // !_MSC_VER

BattleInfo::BattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BattleInfo::InitAsDefaultInstance() {
}

BattleInfo::BattleInfo(const BattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BattleInfo::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0;
  hpmax_ = 0;
  mp_ = 0;
  mpmax_ = 0;
  force_ = 0;
  forcemax_ = 0;
  strength_ = 0;
  cleverpower_ = 0;
  cleverair_ = 0;
  physicalpower_ = 0;
  patience_ = 0;
  agility_ = 0;
  pkcount_ = 0;
  power_ = 0;
  powermax_ = 0;
  phyattack_ = 0;
  phyattackmax_ = 0;
  phydefence_ = 0;
  magicattack_ = 0;
  magicattackmax_ = 0;
  magicdefence_ = 0;
  hitrate_ = 0;
  avoidrate_ = 0;
  baselucky_ = 0;
  crackdownrate_ = 0;
  baserte_ = 0;
  movespeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BattleInfo::~BattleInfo() {
  SharedDtor();
}

void BattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BattleInfo_descriptor_;
}

const BattleInfo& BattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

BattleInfo* BattleInfo::default_instance_ = NULL;

BattleInfo* BattleInfo::New() const {
  return new BattleInfo;
}

void BattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0;
    hpmax_ = 0;
    mp_ = 0;
    mpmax_ = 0;
    force_ = 0;
    forcemax_ = 0;
    strength_ = 0;
    cleverpower_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cleverair_ = 0;
    physicalpower_ = 0;
    patience_ = 0;
    agility_ = 0;
    pkcount_ = 0;
    power_ = 0;
    powermax_ = 0;
    phyattack_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    phyattackmax_ = 0;
    phydefence_ = 0;
    magicattack_ = 0;
    magicattackmax_ = 0;
    magicdefence_ = 0;
    hitrate_ = 0;
    avoidrate_ = 0;
    baselucky_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    crackdownrate_ = 0;
    baserte_ = 0;
    movespeed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hpmax;
        break;
      }

      // required int32 hpmax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mp;
        break;
      }

      // required int32 mp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mpmax;
        break;
      }

      // required int32 mpmax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mpmax_)));
          set_has_mpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_force;
        break;
      }

      // required int32 force = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_forcemax;
        break;
      }

      // required int32 forcemax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forcemax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forcemax_)));
          set_has_forcemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_strength;
        break;
      }

      // required int32 strength = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cleverpower;
        break;
      }

      // required int32 cleverpower = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleverpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleverpower_)));
          set_has_cleverpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cleverair;
        break;
      }

      // optional int32 cleverair = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleverair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleverair_)));
          set_has_cleverair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_physicalpower;
        break;
      }

      // required int32 physicalpower = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physicalpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physicalpower_)));
          set_has_physicalpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_patience;
        break;
      }

      // required int32 patience = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patience_)));
          set_has_patience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_agility;
        break;
      }

      // required int32 agility = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agility_)));
          set_has_agility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_pkcount;
        break;
      }

      // required int32 pkcount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkcount_)));
          set_has_pkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_power;
        break;
      }

      // optional int32 power = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_powermax;
        break;
      }

      // optional int32 powermax = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_powermax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powermax_)));
          set_has_powermax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_phyattack;
        break;
      }

      // optional int32 phyattack = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phyattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phyattack_)));
          set_has_phyattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_phyattackmax;
        break;
      }

      // required int32 phyattackmax = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phyattackmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phyattackmax_)));
          set_has_phyattackmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_phydefence;
        break;
      }

      // required int32 phydefence = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phydefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phydefence_)));
          set_has_phydefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_magicattack;
        break;
      }

      // optional int32 magicattack = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicattack_)));
          set_has_magicattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_magicattackmax;
        break;
      }

      // optional int32 magicattackmax = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicattackmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicattackmax_)));
          set_has_magicattackmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_magicdefence;
        break;
      }

      // optional int32 magicdefence = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicdefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicdefence_)));
          set_has_magicdefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_hitrate;
        break;
      }

      // required int32 hitrate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitrate_)));
          set_has_hitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_avoidrate;
        break;
      }

      // required int32 avoidrate = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avoidrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avoidrate_)));
          set_has_avoidrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_baselucky;
        break;
      }

      // optional int32 baselucky = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baselucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baselucky_)));
          set_has_baselucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_crackdownrate;
        break;
      }

      // required int32 crackdownrate = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crackdownrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crackdownrate_)));
          set_has_crackdownrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_baserte;
        break;
      }

      // required int32 baserte = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baserte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baserte_)));
          set_has_baserte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_movespeed;
        break;
      }

      // required int32 movespeed = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hp(), output);
  }

  // required int32 hpmax = 2;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hpmax(), output);
  }

  // required int32 mp = 3;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mp(), output);
  }

  // required int32 mpmax = 4;
  if (has_mpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mpmax(), output);
  }

  // required int32 force = 5;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->force(), output);
  }

  // required int32 forcemax = 6;
  if (has_forcemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->forcemax(), output);
  }

  // required int32 strength = 7;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->strength(), output);
  }

  // required int32 cleverpower = 8;
  if (has_cleverpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cleverpower(), output);
  }

  // optional int32 cleverair = 9;
  if (has_cleverair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cleverair(), output);
  }

  // required int32 physicalpower = 10;
  if (has_physicalpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->physicalpower(), output);
  }

  // required int32 patience = 11;
  if (has_patience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->patience(), output);
  }

  // required int32 agility = 12;
  if (has_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->agility(), output);
  }

  // required int32 pkcount = 13;
  if (has_pkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pkcount(), output);
  }

  // optional int32 power = 14;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->power(), output);
  }

  // optional int32 powermax = 15;
  if (has_powermax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->powermax(), output);
  }

  // optional int32 phyattack = 16;
  if (has_phyattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->phyattack(), output);
  }

  // required int32 phyattackmax = 17;
  if (has_phyattackmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->phyattackmax(), output);
  }

  // required int32 phydefence = 18;
  if (has_phydefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->phydefence(), output);
  }

  // optional int32 magicattack = 19;
  if (has_magicattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->magicattack(), output);
  }

  // optional int32 magicattackmax = 20;
  if (has_magicattackmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->magicattackmax(), output);
  }

  // optional int32 magicdefence = 21;
  if (has_magicdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->magicdefence(), output);
  }

  // required int32 hitrate = 22;
  if (has_hitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->hitrate(), output);
  }

  // required int32 avoidrate = 23;
  if (has_avoidrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->avoidrate(), output);
  }

  // optional int32 baselucky = 24;
  if (has_baselucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->baselucky(), output);
  }

  // required int32 crackdownrate = 25;
  if (has_crackdownrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->crackdownrate(), output);
  }

  // required int32 baserte = 26;
  if (has_baserte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->baserte(), output);
  }

  // required int32 movespeed = 27;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->movespeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hp(), target);
  }

  // required int32 hpmax = 2;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hpmax(), target);
  }

  // required int32 mp = 3;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mp(), target);
  }

  // required int32 mpmax = 4;
  if (has_mpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mpmax(), target);
  }

  // required int32 force = 5;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->force(), target);
  }

  // required int32 forcemax = 6;
  if (has_forcemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->forcemax(), target);
  }

  // required int32 strength = 7;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->strength(), target);
  }

  // required int32 cleverpower = 8;
  if (has_cleverpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cleverpower(), target);
  }

  // optional int32 cleverair = 9;
  if (has_cleverair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cleverair(), target);
  }

  // required int32 physicalpower = 10;
  if (has_physicalpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->physicalpower(), target);
  }

  // required int32 patience = 11;
  if (has_patience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->patience(), target);
  }

  // required int32 agility = 12;
  if (has_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->agility(), target);
  }

  // required int32 pkcount = 13;
  if (has_pkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pkcount(), target);
  }

  // optional int32 power = 14;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->power(), target);
  }

  // optional int32 powermax = 15;
  if (has_powermax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->powermax(), target);
  }

  // optional int32 phyattack = 16;
  if (has_phyattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->phyattack(), target);
  }

  // required int32 phyattackmax = 17;
  if (has_phyattackmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->phyattackmax(), target);
  }

  // required int32 phydefence = 18;
  if (has_phydefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->phydefence(), target);
  }

  // optional int32 magicattack = 19;
  if (has_magicattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->magicattack(), target);
  }

  // optional int32 magicattackmax = 20;
  if (has_magicattackmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->magicattackmax(), target);
  }

  // optional int32 magicdefence = 21;
  if (has_magicdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->magicdefence(), target);
  }

  // required int32 hitrate = 22;
  if (has_hitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->hitrate(), target);
  }

  // required int32 avoidrate = 23;
  if (has_avoidrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->avoidrate(), target);
  }

  // optional int32 baselucky = 24;
  if (has_baselucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->baselucky(), target);
  }

  // required int32 crackdownrate = 25;
  if (has_crackdownrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->crackdownrate(), target);
  }

  // required int32 baserte = 26;
  if (has_baserte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->baserte(), target);
  }

  // required int32 movespeed = 27;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->movespeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 hpmax = 2;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

    // required int32 mp = 3;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // required int32 mpmax = 4;
    if (has_mpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mpmax());
    }

    // required int32 force = 5;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }

    // required int32 forcemax = 6;
    if (has_forcemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forcemax());
    }

    // required int32 strength = 7;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength());
    }

    // required int32 cleverpower = 8;
    if (has_cleverpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleverpower());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cleverair = 9;
    if (has_cleverair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleverair());
    }

    // required int32 physicalpower = 10;
    if (has_physicalpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physicalpower());
    }

    // required int32 patience = 11;
    if (has_patience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patience());
    }

    // required int32 agility = 12;
    if (has_agility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agility());
    }

    // required int32 pkcount = 13;
    if (has_pkcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkcount());
    }

    // optional int32 power = 14;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 powermax = 15;
    if (has_powermax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->powermax());
    }

    // optional int32 phyattack = 16;
    if (has_phyattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phyattack());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 phyattackmax = 17;
    if (has_phyattackmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phyattackmax());
    }

    // required int32 phydefence = 18;
    if (has_phydefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phydefence());
    }

    // optional int32 magicattack = 19;
    if (has_magicattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicattack());
    }

    // optional int32 magicattackmax = 20;
    if (has_magicattackmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicattackmax());
    }

    // optional int32 magicdefence = 21;
    if (has_magicdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicdefence());
    }

    // required int32 hitrate = 22;
    if (has_hitrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitrate());
    }

    // required int32 avoidrate = 23;
    if (has_avoidrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avoidrate());
    }

    // optional int32 baselucky = 24;
    if (has_baselucky()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baselucky());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 crackdownrate = 25;
    if (has_crackdownrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crackdownrate());
    }

    // required int32 baserte = 26;
    if (has_baserte()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baserte());
    }

    // required int32 movespeed = 27;
    if (has_movespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BattleInfo::MergeFrom(const BattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_mpmax()) {
      set_mpmax(from.mpmax());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_forcemax()) {
      set_forcemax(from.forcemax());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_cleverpower()) {
      set_cleverpower(from.cleverpower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cleverair()) {
      set_cleverair(from.cleverair());
    }
    if (from.has_physicalpower()) {
      set_physicalpower(from.physicalpower());
    }
    if (from.has_patience()) {
      set_patience(from.patience());
    }
    if (from.has_agility()) {
      set_agility(from.agility());
    }
    if (from.has_pkcount()) {
      set_pkcount(from.pkcount());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_powermax()) {
      set_powermax(from.powermax());
    }
    if (from.has_phyattack()) {
      set_phyattack(from.phyattack());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_phyattackmax()) {
      set_phyattackmax(from.phyattackmax());
    }
    if (from.has_phydefence()) {
      set_phydefence(from.phydefence());
    }
    if (from.has_magicattack()) {
      set_magicattack(from.magicattack());
    }
    if (from.has_magicattackmax()) {
      set_magicattackmax(from.magicattackmax());
    }
    if (from.has_magicdefence()) {
      set_magicdefence(from.magicdefence());
    }
    if (from.has_hitrate()) {
      set_hitrate(from.hitrate());
    }
    if (from.has_avoidrate()) {
      set_avoidrate(from.avoidrate());
    }
    if (from.has_baselucky()) {
      set_baselucky(from.baselucky());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_crackdownrate()) {
      set_crackdownrate(from.crackdownrate());
    }
    if (from.has_baserte()) {
      set_baserte(from.baserte());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BattleInfo::CopyFrom(const BattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x07631eff) != 0x07631eff) return false;

  return true;
}

void BattleInfo::Swap(BattleInfo* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(mp_, other->mp_);
    std::swap(mpmax_, other->mpmax_);
    std::swap(force_, other->force_);
    std::swap(forcemax_, other->forcemax_);
    std::swap(strength_, other->strength_);
    std::swap(cleverpower_, other->cleverpower_);
    std::swap(cleverair_, other->cleverair_);
    std::swap(physicalpower_, other->physicalpower_);
    std::swap(patience_, other->patience_);
    std::swap(agility_, other->agility_);
    std::swap(pkcount_, other->pkcount_);
    std::swap(power_, other->power_);
    std::swap(powermax_, other->powermax_);
    std::swap(phyattack_, other->phyattack_);
    std::swap(phyattackmax_, other->phyattackmax_);
    std::swap(phydefence_, other->phydefence_);
    std::swap(magicattack_, other->magicattack_);
    std::swap(magicattackmax_, other->magicattackmax_);
    std::swap(magicdefence_, other->magicdefence_);
    std::swap(hitrate_, other->hitrate_);
    std::swap(avoidrate_, other->avoidrate_);
    std::swap(baselucky_, other->baselucky_);
    std::swap(crackdownrate_, other->crackdownrate_);
    std::swap(baserte_, other->baserte_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BattleInfo_descriptor_;
  metadata.reflection = BattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuestInfo::kActiveFieldNumber;
const int QuestInfo::kDailyFieldNumber;
const int QuestInfo::kClanFieldNumber;
const int QuestInfo::kDoclantimeFieldNumber;
const int QuestInfo::kDailytimeFieldNumber;
const int QuestInfo::kYesterdaydailyFieldNumber;
const int QuestInfo::kYesterdayclanFieldNumber;
const int QuestInfo::kAllMainTaskHadCompFlagFieldNumber;
const int QuestInfo::kCcampQuestFieldNumber;
const int QuestInfo::kDoCamptimeFieldNumber;
const int QuestInfo::kQuestGuideIDFieldNumber;
const int QuestInfo::kWeekquestFieldNumber;
const int QuestInfo::kYesterdaycampFieldNumber;
const int QuestInfo::kYesterdayWeekTimesFieldNumber;
#endif  // !_MSC_VER

QuestInfo::QuestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuestInfo::InitAsDefaultInstance() {
  weekquest_ = const_cast< ::PlayerInfo::WeekQuest*>(&::PlayerInfo::WeekQuest::default_instance());
}

QuestInfo::QuestInfo(const QuestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuestInfo::SharedCtor() {
  _cached_size_ = 0;
  doclantime_ = 0;
  dailytime_ = 0;
  allmaintaskhadcompflag_ = false;
  docamptime_ = 0;
  questguideid_ = 0u;
  weekquest_ = NULL;
  yesterdayweektimes_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuestInfo::~QuestInfo() {
  SharedDtor();
}

void QuestInfo::SharedDtor() {
  if (this != default_instance_) {
    delete weekquest_;
  }
}

void QuestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuestInfo_descriptor_;
}

const QuestInfo& QuestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

QuestInfo* QuestInfo::default_instance_ = NULL;

QuestInfo* QuestInfo::New() const {
  return new QuestInfo;
}

void QuestInfo::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    doclantime_ = 0;
    dailytime_ = 0;
    allmaintaskhadcompflag_ = false;
  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    docamptime_ = 0;
    questguideid_ = 0u;
    if (has_weekquest()) {
      if (weekquest_ != NULL) weekquest_->::PlayerInfo::WeekQuest::Clear();
    }
    yesterdayweektimes_ = 0;
  }
  active_.Clear();
  daily_.Clear();
  clan_.Clear();
  yesterdaydaily_.Clear();
  yesterdayclan_.Clear();
  ccampquest_.Clear();
  yesterdaycamp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.ActiveQuest active = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_active:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_active()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_active;
        if (input->ExpectTag(18)) goto parse_daily;
        break;
      }

      // repeated .PlayerInfo.DailyQuest daily = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_daily;
        if (input->ExpectTag(26)) goto parse_clan;
        break;
      }

      // repeated .PlayerInfo.ClanQuest clan = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clan;
        if (input->ExpectTag(32)) goto parse_doclantime;
        break;
      }

      // optional int32 doclantime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doclantime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &doclantime_)));
          set_has_doclantime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dailytime;
        break;
      }

      // optional int32 dailytime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dailytime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dailytime_)));
          set_has_dailytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_yesterdaydaily;
        break;
      }

      // repeated .PlayerInfo.DailyQuest yesterdaydaily = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yesterdaydaily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yesterdaydaily()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_yesterdaydaily;
        if (input->ExpectTag(58)) goto parse_yesterdayclan;
        break;
      }

      // repeated .PlayerInfo.ClanQuest yesterdayclan = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yesterdayclan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yesterdayclan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_yesterdayclan;
        if (input->ExpectTag(64)) goto parse_allMainTaskHadCompFlag;
        break;
      }

      // optional bool allMainTaskHadCompFlag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_allMainTaskHadCompFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &allmaintaskhadcompflag_)));
          set_has_allmaintaskhadcompflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ccampQuest;
        break;
      }

      // repeated .PlayerInfo.CampQuest ccampQuest = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ccampQuest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_ccampquest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_ccampQuest;
        if (input->ExpectTag(80)) goto parse_doCamptime;
        break;
      }

      // optional int32 doCamptime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_doCamptime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &docamptime_)));
          set_has_docamptime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_questGuideID;
        break;
      }

      // optional uint32 questGuideID = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questGuideID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &questguideid_)));
          set_has_questguideid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_weekquest;
        break;
      }

      // optional .PlayerInfo.WeekQuest weekquest = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_weekquest:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_weekquest()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_yesterdaycamp;
        break;
      }

      // repeated .PlayerInfo.CampQuest yesterdaycamp = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yesterdaycamp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_yesterdaycamp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_yesterdaycamp;
        if (input->ExpectTag(112)) goto parse_yesterdayWeekTimes;
        break;
      }

      // optional int32 yesterdayWeekTimes = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yesterdayWeekTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yesterdayweektimes_)));
          set_has_yesterdayweektimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.ActiveQuest active = 1;
  for (int i = 0; i < this->active_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->active(i), output);
  }

  // repeated .PlayerInfo.DailyQuest daily = 2;
  for (int i = 0; i < this->daily_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->daily(i), output);
  }

  // repeated .PlayerInfo.ClanQuest clan = 3;
  for (int i = 0; i < this->clan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->clan(i), output);
  }

  // optional int32 doclantime = 4;
  if (has_doclantime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->doclantime(), output);
  }

  // optional int32 dailytime = 5;
  if (has_dailytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dailytime(), output);
  }

  // repeated .PlayerInfo.DailyQuest yesterdaydaily = 6;
  for (int i = 0; i < this->yesterdaydaily_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->yesterdaydaily(i), output);
  }

  // repeated .PlayerInfo.ClanQuest yesterdayclan = 7;
  for (int i = 0; i < this->yesterdayclan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->yesterdayclan(i), output);
  }

  // optional bool allMainTaskHadCompFlag = 8;
  if (has_allmaintaskhadcompflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->allmaintaskhadcompflag(), output);
  }

  // repeated .PlayerInfo.CampQuest ccampQuest = 9;
  for (int i = 0; i < this->ccampquest_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->ccampquest(i), output);
  }

  // optional int32 doCamptime = 10;
  if (has_docamptime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->docamptime(), output);
  }

  // optional uint32 questGuideID = 11;
  if (has_questguideid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(11, this->questguideid(), output);
  }

  // optional .PlayerInfo.WeekQuest weekquest = 12;
  if (has_weekquest()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->weekquest(), output);
  }

  // repeated .PlayerInfo.CampQuest yesterdaycamp = 13;
  for (int i = 0; i < this->yesterdaycamp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->yesterdaycamp(i), output);
  }

  // optional int32 yesterdayWeekTimes = 14;
  if (has_yesterdayweektimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->yesterdayweektimes(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.ActiveQuest active = 1;
  for (int i = 0; i < this->active_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->active(i), target);
  }

  // repeated .PlayerInfo.DailyQuest daily = 2;
  for (int i = 0; i < this->daily_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->daily(i), target);
  }

  // repeated .PlayerInfo.ClanQuest clan = 3;
  for (int i = 0; i < this->clan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->clan(i), target);
  }

  // optional int32 doclantime = 4;
  if (has_doclantime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->doclantime(), target);
  }

  // optional int32 dailytime = 5;
  if (has_dailytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dailytime(), target);
  }

  // repeated .PlayerInfo.DailyQuest yesterdaydaily = 6;
  for (int i = 0; i < this->yesterdaydaily_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->yesterdaydaily(i), target);
  }

  // repeated .PlayerInfo.ClanQuest yesterdayclan = 7;
  for (int i = 0; i < this->yesterdayclan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->yesterdayclan(i), target);
  }

  // optional bool allMainTaskHadCompFlag = 8;
  if (has_allmaintaskhadcompflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->allmaintaskhadcompflag(), target);
  }

  // repeated .PlayerInfo.CampQuest ccampQuest = 9;
  for (int i = 0; i < this->ccampquest_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->ccampquest(i), target);
  }

  // optional int32 doCamptime = 10;
  if (has_docamptime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->docamptime(), target);
  }

  // optional uint32 questGuideID = 11;
  if (has_questguideid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(11, this->questguideid(), target);
  }

  // optional .PlayerInfo.WeekQuest weekquest = 12;
  if (has_weekquest()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->weekquest(), target);
  }

  // repeated .PlayerInfo.CampQuest yesterdaycamp = 13;
  for (int i = 0; i < this->yesterdaycamp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->yesterdaycamp(i), target);
  }

  // optional int32 yesterdayWeekTimes = 14;
  if (has_yesterdayweektimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->yesterdayweektimes(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuestInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 doclantime = 4;
    if (has_doclantime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->doclantime());
    }

    // optional int32 dailytime = 5;
    if (has_dailytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dailytime());
    }

    // optional bool allMainTaskHadCompFlag = 8;
    if (has_allmaintaskhadcompflag()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    // optional int32 doCamptime = 10;
    if (has_docamptime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->docamptime());
    }

    // optional uint32 questGuideID = 11;
    if (has_questguideid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->questguideid());
    }

    // optional .PlayerInfo.WeekQuest weekquest = 12;
    if (has_weekquest()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->weekquest());
    }

    // optional int32 yesterdayWeekTimes = 14;
    if (has_yesterdayweektimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yesterdayweektimes());
    }

  }
  // repeated .PlayerInfo.ActiveQuest active = 1;
  total_size += 1 * this->active_size();
  for (int i = 0; i < this->active_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->active(i));
  }

  // repeated .PlayerInfo.DailyQuest daily = 2;
  total_size += 1 * this->daily_size();
  for (int i = 0; i < this->daily_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily(i));
  }

  // repeated .PlayerInfo.ClanQuest clan = 3;
  total_size += 1 * this->clan_size();
  for (int i = 0; i < this->clan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clan(i));
  }

  // repeated .PlayerInfo.DailyQuest yesterdaydaily = 6;
  total_size += 1 * this->yesterdaydaily_size();
  for (int i = 0; i < this->yesterdaydaily_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yesterdaydaily(i));
  }

  // repeated .PlayerInfo.ClanQuest yesterdayclan = 7;
  total_size += 1 * this->yesterdayclan_size();
  for (int i = 0; i < this->yesterdayclan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yesterdayclan(i));
  }

  // repeated .PlayerInfo.CampQuest ccampQuest = 9;
  total_size += 1 * this->ccampquest_size();
  for (int i = 0; i < this->ccampquest_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->ccampquest(i));
  }

  // repeated .PlayerInfo.CampQuest yesterdaycamp = 13;
  total_size += 1 * this->yesterdaycamp_size();
  for (int i = 0; i < this->yesterdaycamp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->yesterdaycamp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuestInfo::MergeFrom(const QuestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  active_.MergeFrom(from.active_);
  daily_.MergeFrom(from.daily_);
  clan_.MergeFrom(from.clan_);
  yesterdaydaily_.MergeFrom(from.yesterdaydaily_);
  yesterdayclan_.MergeFrom(from.yesterdayclan_);
  ccampquest_.MergeFrom(from.ccampquest_);
  yesterdaycamp_.MergeFrom(from.yesterdaycamp_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_doclantime()) {
      set_doclantime(from.doclantime());
    }
    if (from.has_dailytime()) {
      set_dailytime(from.dailytime());
    }
    if (from.has_allmaintaskhadcompflag()) {
      set_allmaintaskhadcompflag(from.allmaintaskhadcompflag());
    }
  }
  if (from._has_bits_[9 / 32] & (0xffu << (9 % 32))) {
    if (from.has_docamptime()) {
      set_docamptime(from.docamptime());
    }
    if (from.has_questguideid()) {
      set_questguideid(from.questguideid());
    }
    if (from.has_weekquest()) {
      mutable_weekquest()->::PlayerInfo::WeekQuest::MergeFrom(from.weekquest());
    }
    if (from.has_yesterdayweektimes()) {
      set_yesterdayweektimes(from.yesterdayweektimes());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuestInfo::CopyFrom(const QuestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuestInfo::IsInitialized() const {

  for (int i = 0; i < active_size(); i++) {
    if (!this->active(i).IsInitialized()) return false;
  }
  for (int i = 0; i < daily_size(); i++) {
    if (!this->daily(i).IsInitialized()) return false;
  }
  for (int i = 0; i < clan_size(); i++) {
    if (!this->clan(i).IsInitialized()) return false;
  }
  for (int i = 0; i < yesterdaydaily_size(); i++) {
    if (!this->yesterdaydaily(i).IsInitialized()) return false;
  }
  for (int i = 0; i < yesterdayclan_size(); i++) {
    if (!this->yesterdayclan(i).IsInitialized()) return false;
  }
  for (int i = 0; i < ccampquest_size(); i++) {
    if (!this->ccampquest(i).IsInitialized()) return false;
  }
  for (int i = 0; i < yesterdaycamp_size(); i++) {
    if (!this->yesterdaycamp(i).IsInitialized()) return false;
  }
  return true;
}

void QuestInfo::Swap(QuestInfo* other) {
  if (other != this) {
    active_.Swap(&other->active_);
    daily_.Swap(&other->daily_);
    clan_.Swap(&other->clan_);
    std::swap(doclantime_, other->doclantime_);
    std::swap(dailytime_, other->dailytime_);
    yesterdaydaily_.Swap(&other->yesterdaydaily_);
    yesterdayclan_.Swap(&other->yesterdayclan_);
    std::swap(allmaintaskhadcompflag_, other->allmaintaskhadcompflag_);
    ccampquest_.Swap(&other->ccampquest_);
    std::swap(docamptime_, other->docamptime_);
    std::swap(questguideid_, other->questguideid_);
    std::swap(weekquest_, other->weekquest_);
    yesterdaycamp_.Swap(&other->yesterdaycamp_);
    std::swap(yesterdayweektimes_, other->yesterdayweektimes_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuestInfo_descriptor_;
  metadata.reflection = QuestInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeekQuestItem::kItemIDFieldNumber;
const int WeekQuestItem::kCountsFieldNumber;
const int WeekQuestItem::kBindTypeFieldNumber;
#endif  // !_MSC_VER

WeekQuestItem::WeekQuestItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeekQuestItem::InitAsDefaultInstance() {
}

WeekQuestItem::WeekQuestItem(const WeekQuestItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeekQuestItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  counts_ = 0;
  bindtype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeekQuestItem::~WeekQuestItem() {
  SharedDtor();
}

void WeekQuestItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeekQuestItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeekQuestItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeekQuestItem_descriptor_;
}

const WeekQuestItem& WeekQuestItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

WeekQuestItem* WeekQuestItem::default_instance_ = NULL;

WeekQuestItem* WeekQuestItem::New() const {
  return new WeekQuestItem;
}

void WeekQuestItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    counts_ = 0;
    bindtype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeekQuestItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional int32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_bindType;
        break;
      }

      // optional int32 bindType = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindtype_)));
          set_has_bindtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeekQuestItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->counts(), output);
  }

  // optional int32 bindType = 3;
  if (has_bindtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->bindtype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeekQuestItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->counts(), target);
  }

  // optional int32 bindType = 3;
  if (has_bindtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->bindtype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeekQuestItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts());
    }

    // optional int32 bindType = 3;
    if (has_bindtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindtype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeekQuestItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeekQuestItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeekQuestItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeekQuestItem::MergeFrom(const WeekQuestItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
    if (from.has_bindtype()) {
      set_bindtype(from.bindtype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeekQuestItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeekQuestItem::CopyFrom(const WeekQuestItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeekQuestItem::IsInitialized() const {

  return true;
}

void WeekQuestItem::Swap(WeekQuestItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(counts_, other->counts_);
    std::swap(bindtype_, other->bindtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeekQuestItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeekQuestItem_descriptor_;
  metadata.reflection = WeekQuestItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeekQuest::kTimeFieldNumber;
const int WeekQuest::kTimesFieldNumber;
const int WeekQuest::kRewardIDsFieldNumber;
const int WeekQuest::kEndrewardIDsFieldNumber;
#endif  // !_MSC_VER

WeekQuest::WeekQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeekQuest::InitAsDefaultInstance() {
}

WeekQuest::WeekQuest(const WeekQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeekQuest::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeekQuest::~WeekQuest() {
  SharedDtor();
}

void WeekQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeekQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeekQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeekQuest_descriptor_;
}

const WeekQuest& WeekQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

WeekQuest* WeekQuest::default_instance_ = NULL;

WeekQuest* WeekQuest::New() const {
  return new WeekQuest;
}

void WeekQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
    times_ = 0;
  }
  rewardids_.Clear();
  endrewardids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeekQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_times;
        break;
      }

      // optional int32 times = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rewardIDs;
        break;
      }

      // repeated .PlayerInfo.WeekQuestItem rewardIDs = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rewardIDs;
        if (input->ExpectTag(34)) goto parse_endrewardIDs;
        break;
      }

      // repeated .PlayerInfo.WeekQuestItem endrewardIDs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endrewardIDs:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_endrewardids()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_endrewardIDs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeekQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // optional int32 times = 2;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->times(), output);
  }

  // repeated .PlayerInfo.WeekQuestItem rewardIDs = 3;
  for (int i = 0; i < this->rewardids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rewardids(i), output);
  }

  // repeated .PlayerInfo.WeekQuestItem endrewardIDs = 4;
  for (int i = 0; i < this->endrewardids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->endrewardids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeekQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // optional int32 times = 2;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->times(), target);
  }

  // repeated .PlayerInfo.WeekQuestItem rewardIDs = 3;
  for (int i = 0; i < this->rewardids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rewardids(i), target);
  }

  // repeated .PlayerInfo.WeekQuestItem endrewardIDs = 4;
  for (int i = 0; i < this->endrewardids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->endrewardids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeekQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

    // optional int32 times = 2;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  // repeated .PlayerInfo.WeekQuestItem rewardIDs = 3;
  total_size += 1 * this->rewardids_size();
  for (int i = 0; i < this->rewardids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardids(i));
  }

  // repeated .PlayerInfo.WeekQuestItem endrewardIDs = 4;
  total_size += 1 * this->endrewardids_size();
  for (int i = 0; i < this->endrewardids_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->endrewardids(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeekQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeekQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeekQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeekQuest::MergeFrom(const WeekQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardids_.MergeFrom(from.rewardids_);
  endrewardids_.MergeFrom(from.endrewardids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeekQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeekQuest::CopyFrom(const WeekQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeekQuest::IsInitialized() const {

  return true;
}

void WeekQuest::Swap(WeekQuest* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    std::swap(times_, other->times_);
    rewardids_.Swap(&other->rewardids_);
    endrewardids_.Swap(&other->endrewardids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeekQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeekQuest_descriptor_;
  metadata.reflection = WeekQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NewQuestInfo::kQActiveFieldNumber;
const int NewQuestInfo::kQDailyFieldNumber;
const int NewQuestInfo::kQClanFieldNumber;
const int NewQuestInfo::kYesterdaydailyFieldNumber;
const int NewQuestInfo::kYesterdayclanFieldNumber;
#endif  // !_MSC_VER

NewQuestInfo::NewQuestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NewQuestInfo::InitAsDefaultInstance() {
  qactive_ = const_cast< ::PlayerInfo::ActiveQuest*>(&::PlayerInfo::ActiveQuest::default_instance());
  qdaily_ = const_cast< ::PlayerInfo::DailyQuest*>(&::PlayerInfo::DailyQuest::default_instance());
  qclan_ = const_cast< ::PlayerInfo::ClanQuest*>(&::PlayerInfo::ClanQuest::default_instance());
  yesterdaydaily_ = const_cast< ::PlayerInfo::DailyQuest*>(&::PlayerInfo::DailyQuest::default_instance());
  yesterdayclan_ = const_cast< ::PlayerInfo::ClanQuest*>(&::PlayerInfo::ClanQuest::default_instance());
}

NewQuestInfo::NewQuestInfo(const NewQuestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NewQuestInfo::SharedCtor() {
  _cached_size_ = 0;
  qactive_ = NULL;
  qdaily_ = NULL;
  qclan_ = NULL;
  yesterdaydaily_ = NULL;
  yesterdayclan_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NewQuestInfo::~NewQuestInfo() {
  SharedDtor();
}

void NewQuestInfo::SharedDtor() {
  if (this != default_instance_) {
    delete qactive_;
    delete qdaily_;
    delete qclan_;
    delete yesterdaydaily_;
    delete yesterdayclan_;
  }
}

void NewQuestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NewQuestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NewQuestInfo_descriptor_;
}

const NewQuestInfo& NewQuestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

NewQuestInfo* NewQuestInfo::default_instance_ = NULL;

NewQuestInfo* NewQuestInfo::New() const {
  return new NewQuestInfo;
}

void NewQuestInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_qactive()) {
      if (qactive_ != NULL) qactive_->::PlayerInfo::ActiveQuest::Clear();
    }
    if (has_qdaily()) {
      if (qdaily_ != NULL) qdaily_->::PlayerInfo::DailyQuest::Clear();
    }
    if (has_qclan()) {
      if (qclan_ != NULL) qclan_->::PlayerInfo::ClanQuest::Clear();
    }
    if (has_yesterdaydaily()) {
      if (yesterdaydaily_ != NULL) yesterdaydaily_->::PlayerInfo::DailyQuest::Clear();
    }
    if (has_yesterdayclan()) {
      if (yesterdayclan_ != NULL) yesterdayclan_->::PlayerInfo::ClanQuest::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NewQuestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerInfo.ActiveQuest qActive = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qactive()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_qDaily;
        break;
      }

      // optional .PlayerInfo.DailyQuest qDaily = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qDaily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qdaily()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_qClan;
        break;
      }

      // optional .PlayerInfo.ClanQuest qClan = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_qClan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_qclan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_yesterdaydaily;
        break;
      }

      // optional .PlayerInfo.DailyQuest yesterdaydaily = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yesterdaydaily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yesterdaydaily()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_yesterdayclan;
        break;
      }

      // optional .PlayerInfo.ClanQuest yesterdayclan = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yesterdayclan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yesterdayclan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NewQuestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlayerInfo.ActiveQuest qActive = 1;
  if (has_qactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->qactive(), output);
  }

  // optional .PlayerInfo.DailyQuest qDaily = 2;
  if (has_qdaily()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->qdaily(), output);
  }

  // optional .PlayerInfo.ClanQuest qClan = 3;
  if (has_qclan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->qclan(), output);
  }

  // optional .PlayerInfo.DailyQuest yesterdaydaily = 4;
  if (has_yesterdaydaily()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->yesterdaydaily(), output);
  }

  // optional .PlayerInfo.ClanQuest yesterdayclan = 5;
  if (has_yesterdayclan()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->yesterdayclan(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NewQuestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlayerInfo.ActiveQuest qActive = 1;
  if (has_qactive()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->qactive(), target);
  }

  // optional .PlayerInfo.DailyQuest qDaily = 2;
  if (has_qdaily()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->qdaily(), target);
  }

  // optional .PlayerInfo.ClanQuest qClan = 3;
  if (has_qclan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->qclan(), target);
  }

  // optional .PlayerInfo.DailyQuest yesterdaydaily = 4;
  if (has_yesterdaydaily()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->yesterdaydaily(), target);
  }

  // optional .PlayerInfo.ClanQuest yesterdayclan = 5;
  if (has_yesterdayclan()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->yesterdayclan(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NewQuestInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlayerInfo.ActiveQuest qActive = 1;
    if (has_qactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qactive());
    }

    // optional .PlayerInfo.DailyQuest qDaily = 2;
    if (has_qdaily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qdaily());
    }

    // optional .PlayerInfo.ClanQuest qClan = 3;
    if (has_qclan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->qclan());
    }

    // optional .PlayerInfo.DailyQuest yesterdaydaily = 4;
    if (has_yesterdaydaily()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yesterdaydaily());
    }

    // optional .PlayerInfo.ClanQuest yesterdayclan = 5;
    if (has_yesterdayclan()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yesterdayclan());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NewQuestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NewQuestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NewQuestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NewQuestInfo::MergeFrom(const NewQuestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_qactive()) {
      mutable_qactive()->::PlayerInfo::ActiveQuest::MergeFrom(from.qactive());
    }
    if (from.has_qdaily()) {
      mutable_qdaily()->::PlayerInfo::DailyQuest::MergeFrom(from.qdaily());
    }
    if (from.has_qclan()) {
      mutable_qclan()->::PlayerInfo::ClanQuest::MergeFrom(from.qclan());
    }
    if (from.has_yesterdaydaily()) {
      mutable_yesterdaydaily()->::PlayerInfo::DailyQuest::MergeFrom(from.yesterdaydaily());
    }
    if (from.has_yesterdayclan()) {
      mutable_yesterdayclan()->::PlayerInfo::ClanQuest::MergeFrom(from.yesterdayclan());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NewQuestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NewQuestInfo::CopyFrom(const NewQuestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NewQuestInfo::IsInitialized() const {

  if (has_qactive()) {
    if (!this->qactive().IsInitialized()) return false;
  }
  if (has_qdaily()) {
    if (!this->qdaily().IsInitialized()) return false;
  }
  if (has_qclan()) {
    if (!this->qclan().IsInitialized()) return false;
  }
  if (has_yesterdaydaily()) {
    if (!this->yesterdaydaily().IsInitialized()) return false;
  }
  if (has_yesterdayclan()) {
    if (!this->yesterdayclan().IsInitialized()) return false;
  }
  return true;
}

void NewQuestInfo::Swap(NewQuestInfo* other) {
  if (other != this) {
    std::swap(qactive_, other->qactive_);
    std::swap(qdaily_, other->qdaily_);
    std::swap(qclan_, other->qclan_);
    std::swap(yesterdaydaily_, other->yesterdaydaily_);
    std::swap(yesterdayclan_, other->yesterdayclan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NewQuestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NewQuestInfo_descriptor_;
  metadata.reflection = NewQuestInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActiveQuest::kIdFieldNumber;
const int ActiveQuest::kStateFieldNumber;
const int ActiveQuest::kFtargetFieldNumber;
const int ActiveQuest::kStargetFieldNumber;
const int ActiveQuest::kNumlevelFieldNumber;
const int ActiveQuest::kRewardlevelFieldNumber;
const int ActiveQuest::kTimesFieldNumber;
#endif  // !_MSC_VER

ActiveQuest::ActiveQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActiveQuest::InitAsDefaultInstance() {
}

ActiveQuest::ActiveQuest(const ActiveQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActiveQuest::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  state_ = 0;
  ftarget_ = 0;
  starget_ = 0;
  numlevel_ = 0;
  rewardlevel_ = 0;
  times_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActiveQuest::~ActiveQuest() {
  SharedDtor();
}

void ActiveQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActiveQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActiveQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActiveQuest_descriptor_;
}

const ActiveQuest& ActiveQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

ActiveQuest* ActiveQuest::default_instance_ = NULL;

ActiveQuest* ActiveQuest::New() const {
  return new ActiveQuest;
}

void ActiveQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    state_ = 0;
    ftarget_ = 0;
    starget_ = 0;
    numlevel_ = 0;
    rewardlevel_ = 0;
    times_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActiveQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_state;
        break;
      }

      // required int32 state = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ftarget;
        break;
      }

      // required int32 ftarget = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ftarget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ftarget_)));
          set_has_ftarget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_starget;
        break;
      }

      // optional int32 starget = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starget:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starget_)));
          set_has_starget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_numlevel;
        break;
      }

      // optional int32 numlevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numlevel_)));
          set_has_numlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_rewardlevel;
        break;
      }

      // optional int32 rewardlevel = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardlevel_)));
          set_has_rewardlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_times;
        break;
      }

      // optional int32 times = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActiveQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 state = 2;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->state(), output);
  }

  // required int32 ftarget = 3;
  if (has_ftarget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ftarget(), output);
  }

  // optional int32 starget = 4;
  if (has_starget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->starget(), output);
  }

  // optional int32 numlevel = 5;
  if (has_numlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->numlevel(), output);
  }

  // optional int32 rewardlevel = 6;
  if (has_rewardlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->rewardlevel(), output);
  }

  // optional int32 times = 7;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->times(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActiveQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 state = 2;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->state(), target);
  }

  // required int32 ftarget = 3;
  if (has_ftarget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ftarget(), target);
  }

  // optional int32 starget = 4;
  if (has_starget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->starget(), target);
  }

  // optional int32 numlevel = 5;
  if (has_numlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->numlevel(), target);
  }

  // optional int32 rewardlevel = 6;
  if (has_rewardlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->rewardlevel(), target);
  }

  // optional int32 times = 7;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->times(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActiveQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 state = 2;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 ftarget = 3;
    if (has_ftarget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ftarget());
    }

    // optional int32 starget = 4;
    if (has_starget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starget());
    }

    // optional int32 numlevel = 5;
    if (has_numlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numlevel());
    }

    // optional int32 rewardlevel = 6;
    if (has_rewardlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardlevel());
    }

    // optional int32 times = 7;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActiveQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActiveQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActiveQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActiveQuest::MergeFrom(const ActiveQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_ftarget()) {
      set_ftarget(from.ftarget());
    }
    if (from.has_starget()) {
      set_starget(from.starget());
    }
    if (from.has_numlevel()) {
      set_numlevel(from.numlevel());
    }
    if (from.has_rewardlevel()) {
      set_rewardlevel(from.rewardlevel());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActiveQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActiveQuest::CopyFrom(const ActiveQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActiveQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ActiveQuest::Swap(ActiveQuest* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(state_, other->state_);
    std::swap(ftarget_, other->ftarget_);
    std::swap(starget_, other->starget_);
    std::swap(numlevel_, other->numlevel_);
    std::swap(rewardlevel_, other->rewardlevel_);
    std::swap(times_, other->times_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActiveQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActiveQuest_descriptor_;
  metadata.reflection = ActiveQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DailyQuest::kQuestidFieldNumber;
const int DailyQuest::kNumlevelFieldNumber;
const int DailyQuest::kRewardlevelFieldNumber;
const int DailyQuest::kTimesFieldNumber;
const int DailyQuest::kNumCoefficientFieldNumber;
#endif  // !_MSC_VER

DailyQuest::DailyQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DailyQuest::InitAsDefaultInstance() {
}

DailyQuest::DailyQuest(const DailyQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DailyQuest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  numlevel_ = 0;
  rewardlevel_ = 0;
  times_ = 0;
  numcoefficient_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DailyQuest::~DailyQuest() {
  SharedDtor();
}

void DailyQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DailyQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DailyQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DailyQuest_descriptor_;
}

const DailyQuest& DailyQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

DailyQuest* DailyQuest::default_instance_ = NULL;

DailyQuest* DailyQuest::New() const {
  return new DailyQuest;
}

void DailyQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    numlevel_ = 0;
    rewardlevel_ = 0;
    times_ = 0;
    numcoefficient_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DailyQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numlevel;
        break;
      }

      // required int32 numlevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numlevel_)));
          set_has_numlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardlevel;
        break;
      }

      // required int32 rewardlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardlevel_)));
          set_has_rewardlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_times;
        break;
      }

      // required int32 times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_numCoefficient;
        break;
      }

      // optional float numCoefficient = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_numCoefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &numcoefficient_)));
          set_has_numcoefficient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DailyQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required int32 numlevel = 2;
  if (has_numlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numlevel(), output);
  }

  // required int32 rewardlevel = 3;
  if (has_rewardlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rewardlevel(), output);
  }

  // required int32 times = 4;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->times(), output);
  }

  // optional float numCoefficient = 5;
  if (has_numcoefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->numcoefficient(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DailyQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required int32 numlevel = 2;
  if (has_numlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numlevel(), target);
  }

  // required int32 rewardlevel = 3;
  if (has_rewardlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rewardlevel(), target);
  }

  // required int32 times = 4;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->times(), target);
  }

  // optional float numCoefficient = 5;
  if (has_numcoefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->numcoefficient(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DailyQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 numlevel = 2;
    if (has_numlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numlevel());
    }

    // required int32 rewardlevel = 3;
    if (has_rewardlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardlevel());
    }

    // required int32 times = 4;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional float numCoefficient = 5;
    if (has_numcoefficient()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DailyQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DailyQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DailyQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DailyQuest::MergeFrom(const DailyQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_numlevel()) {
      set_numlevel(from.numlevel());
    }
    if (from.has_rewardlevel()) {
      set_rewardlevel(from.rewardlevel());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_numcoefficient()) {
      set_numcoefficient(from.numcoefficient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DailyQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DailyQuest::CopyFrom(const DailyQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DailyQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void DailyQuest::Swap(DailyQuest* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(numlevel_, other->numlevel_);
    std::swap(rewardlevel_, other->rewardlevel_);
    std::swap(times_, other->times_);
    std::swap(numcoefficient_, other->numcoefficient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DailyQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DailyQuest_descriptor_;
  metadata.reflection = DailyQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClanQuest::kQuestidFieldNumber;
const int ClanQuest::kNumlevelFieldNumber;
const int ClanQuest::kRewardlevelFieldNumber;
const int ClanQuest::kTimesFieldNumber;
const int ClanQuest::kNumCoefficientFieldNumber;
#endif  // !_MSC_VER

ClanQuest::ClanQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClanQuest::InitAsDefaultInstance() {
}

ClanQuest::ClanQuest(const ClanQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClanQuest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  numlevel_ = 0;
  rewardlevel_ = 0;
  times_ = 0;
  numcoefficient_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClanQuest::~ClanQuest() {
  SharedDtor();
}

void ClanQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClanQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClanQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClanQuest_descriptor_;
}

const ClanQuest& ClanQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

ClanQuest* ClanQuest::default_instance_ = NULL;

ClanQuest* ClanQuest::New() const {
  return new ClanQuest;
}

void ClanQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    numlevel_ = 0;
    rewardlevel_ = 0;
    times_ = 0;
    numcoefficient_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClanQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numlevel;
        break;
      }

      // required int32 numlevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numlevel_)));
          set_has_numlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardlevel;
        break;
      }

      // required int32 rewardlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardlevel_)));
          set_has_rewardlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_times;
        break;
      }

      // required int32 times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_numCoefficient;
        break;
      }

      // optional float numCoefficient = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_numCoefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &numcoefficient_)));
          set_has_numcoefficient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClanQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required int32 numlevel = 2;
  if (has_numlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numlevel(), output);
  }

  // required int32 rewardlevel = 3;
  if (has_rewardlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rewardlevel(), output);
  }

  // required int32 times = 4;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->times(), output);
  }

  // optional float numCoefficient = 5;
  if (has_numcoefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->numcoefficient(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClanQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required int32 numlevel = 2;
  if (has_numlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numlevel(), target);
  }

  // required int32 rewardlevel = 3;
  if (has_rewardlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rewardlevel(), target);
  }

  // required int32 times = 4;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->times(), target);
  }

  // optional float numCoefficient = 5;
  if (has_numcoefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->numcoefficient(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClanQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 numlevel = 2;
    if (has_numlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numlevel());
    }

    // required int32 rewardlevel = 3;
    if (has_rewardlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardlevel());
    }

    // required int32 times = 4;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional float numCoefficient = 5;
    if (has_numcoefficient()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClanQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClanQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClanQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClanQuest::MergeFrom(const ClanQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_numlevel()) {
      set_numlevel(from.numlevel());
    }
    if (from.has_rewardlevel()) {
      set_rewardlevel(from.rewardlevel());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_numcoefficient()) {
      set_numcoefficient(from.numcoefficient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClanQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClanQuest::CopyFrom(const ClanQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClanQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void ClanQuest::Swap(ClanQuest* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(numlevel_, other->numlevel_);
    std::swap(rewardlevel_, other->rewardlevel_);
    std::swap(times_, other->times_);
    std::swap(numcoefficient_, other->numcoefficient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClanQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClanQuest_descriptor_;
  metadata.reflection = ClanQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampQuest::kQuestidFieldNumber;
const int CampQuest::kNumlevelFieldNumber;
const int CampQuest::kRewardlevelFieldNumber;
const int CampQuest::kTimesFieldNumber;
const int CampQuest::kNumCoefficientFieldNumber;
#endif  // !_MSC_VER

CampQuest::CampQuest()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampQuest::InitAsDefaultInstance() {
}

CampQuest::CampQuest(const CampQuest& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampQuest::SharedCtor() {
  _cached_size_ = 0;
  questid_ = 0;
  numlevel_ = 0;
  rewardlevel_ = 0;
  times_ = 0;
  numcoefficient_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampQuest::~CampQuest() {
  SharedDtor();
}

void CampQuest::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampQuest::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampQuest::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampQuest_descriptor_;
}

const CampQuest& CampQuest::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

CampQuest* CampQuest::default_instance_ = NULL;

CampQuest* CampQuest::New() const {
  return new CampQuest;
}

void CampQuest::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    questid_ = 0;
    numlevel_ = 0;
    rewardlevel_ = 0;
    times_ = 0;
    numcoefficient_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampQuest::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &questid_)));
          set_has_questid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_numlevel;
        break;
      }

      // required int32 numlevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_numlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &numlevel_)));
          set_has_numlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rewardlevel;
        break;
      }

      // required int32 rewardlevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardlevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardlevel_)));
          set_has_rewardlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_times;
        break;
      }

      // required int32 times = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_times:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &times_)));
          set_has_times();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(45)) goto parse_numCoefficient;
        break;
      }

      // optional float numCoefficient = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_numCoefficient:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &numcoefficient_)));
          set_has_numcoefficient();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampQuest::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 questid = 1;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->questid(), output);
  }

  // required int32 numlevel = 2;
  if (has_numlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->numlevel(), output);
  }

  // required int32 rewardlevel = 3;
  if (has_rewardlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rewardlevel(), output);
  }

  // required int32 times = 4;
  if (has_times()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->times(), output);
  }

  // optional float numCoefficient = 5;
  if (has_numcoefficient()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(5, this->numcoefficient(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampQuest::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 questid = 1;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->questid(), target);
  }

  // required int32 numlevel = 2;
  if (has_numlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->numlevel(), target);
  }

  // required int32 rewardlevel = 3;
  if (has_rewardlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rewardlevel(), target);
  }

  // required int32 times = 4;
  if (has_times()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->times(), target);
  }

  // optional float numCoefficient = 5;
  if (has_numcoefficient()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(5, this->numcoefficient(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampQuest::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 questid = 1;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->questid());
    }

    // required int32 numlevel = 2;
    if (has_numlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->numlevel());
    }

    // required int32 rewardlevel = 3;
    if (has_rewardlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardlevel());
    }

    // required int32 times = 4;
    if (has_times()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->times());
    }

    // optional float numCoefficient = 5;
    if (has_numcoefficient()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampQuest::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampQuest* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampQuest*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampQuest::MergeFrom(const CampQuest& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_questid()) {
      set_questid(from.questid());
    }
    if (from.has_numlevel()) {
      set_numlevel(from.numlevel());
    }
    if (from.has_rewardlevel()) {
      set_rewardlevel(from.rewardlevel());
    }
    if (from.has_times()) {
      set_times(from.times());
    }
    if (from.has_numcoefficient()) {
      set_numcoefficient(from.numcoefficient());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampQuest::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampQuest::CopyFrom(const CampQuest& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampQuest::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void CampQuest::Swap(CampQuest* other) {
  if (other != this) {
    std::swap(questid_, other->questid_);
    std::swap(numlevel_, other->numlevel_);
    std::swap(rewardlevel_, other->rewardlevel_);
    std::swap(times_, other->times_);
    std::swap(numcoefficient_, other->numcoefficient_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampQuest::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampQuest_descriptor_;
  metadata.reflection = CampQuest_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int POneTalentSkill::kTalentIDFieldNumber;
const int POneTalentSkill::kSkillListFieldNumber;
#endif  // !_MSC_VER

POneTalentSkill::POneTalentSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void POneTalentSkill::InitAsDefaultInstance() {
}

POneTalentSkill::POneTalentSkill(const POneTalentSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void POneTalentSkill::SharedCtor() {
  _cached_size_ = 0;
  talentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

POneTalentSkill::~POneTalentSkill() {
  SharedDtor();
}

void POneTalentSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void POneTalentSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* POneTalentSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return POneTalentSkill_descriptor_;
}

const POneTalentSkill& POneTalentSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

POneTalentSkill* POneTalentSkill::default_instance_ = NULL;

POneTalentSkill* POneTalentSkill::New() const {
  return new POneTalentSkill;
}

void POneTalentSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    talentid_ = 0;
  }
  skilllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool POneTalentSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 talentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talentid_)));
          set_has_talentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillList;
        break;
      }

      // repeated int32 skillList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_skilllist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skilllist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void POneTalentSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 talentID = 1;
  if (has_talentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->talentid(), output);
  }

  // repeated int32 skillList = 2;
  for (int i = 0; i < this->skilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->skilllist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* POneTalentSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 talentID = 1;
  if (has_talentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->talentid(), target);
  }

  // repeated int32 skillList = 2;
  for (int i = 0; i < this->skilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->skilllist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int POneTalentSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 talentID = 1;
    if (has_talentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talentid());
    }

  }
  // repeated int32 skillList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skilllist(i));
    }
    total_size += 1 * this->skilllist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void POneTalentSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const POneTalentSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const POneTalentSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void POneTalentSkill::MergeFrom(const POneTalentSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilllist_.MergeFrom(from.skilllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_talentid()) {
      set_talentid(from.talentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void POneTalentSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void POneTalentSkill::CopyFrom(const POneTalentSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POneTalentSkill::IsInitialized() const {

  return true;
}

void POneTalentSkill::Swap(POneTalentSkill* other) {
  if (other != this) {
    std::swap(talentid_, other->talentid_);
    skilllist_.Swap(&other->skilllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata POneTalentSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = POneTalentSkill_descriptor_;
  metadata.reflection = POneTalentSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkillInfo::kSkillidFieldNumber;
const int SkillInfo::kBufFieldNumber;
const int SkillInfo::kSkillDataFieldNumber;
const int SkillInfo::kCurTalentFieldNumber;
const int SkillInfo::kClanskillsFieldNumber;
#endif  // !_MSC_VER

SkillInfo::SkillInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkillInfo::InitAsDefaultInstance() {
}

SkillInfo::SkillInfo(const SkillInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkillInfo::SharedCtor() {
  _cached_size_ = 0;
  curtalent_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkillInfo::~SkillInfo() {
  SharedDtor();
}

void SkillInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkillInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkillInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkillInfo_descriptor_;
}

const SkillInfo& SkillInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

SkillInfo* SkillInfo::default_instance_ = NULL;

SkillInfo* SkillInfo::New() const {
  return new SkillInfo;
}

void SkillInfo::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    curtalent_ = 0;
  }
  skillid_.Clear();
  buf_.Clear();
  skilldata_.Clear();
  clanskills_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkillInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 skillid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_skillid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skillid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_skillid;
        if (input->ExpectTag(18)) goto parse_buf;
        break;
      }

      // repeated .PlayerInfo.BuffInfo buf = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_buf;
        if (input->ExpectTag(26)) goto parse_skillData;
        break;
      }

      // repeated .PlayerInfo.POneTalentSkill skillData = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skilldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_skillData;
        if (input->ExpectTag(32)) goto parse_curTalent;
        break;
      }

      // optional int32 curTalent = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curTalent:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curtalent_)));
          set_has_curtalent();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_clanskills;
        break;
      }

      // repeated int32 clanskills = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanskills:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_clanskills())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_clanskills())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_clanskills;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkillInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 skillid = 1;
  for (int i = 0; i < this->skillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->skillid(i), output);
  }

  // repeated .PlayerInfo.BuffInfo buf = 2;
  for (int i = 0; i < this->buf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->buf(i), output);
  }

  // repeated .PlayerInfo.POneTalentSkill skillData = 3;
  for (int i = 0; i < this->skilldata_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->skilldata(i), output);
  }

  // optional int32 curTalent = 4;
  if (has_curtalent()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->curtalent(), output);
  }

  // repeated int32 clanskills = 5;
  for (int i = 0; i < this->clanskills_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->clanskills(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkillInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 skillid = 1;
  for (int i = 0; i < this->skillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->skillid(i), target);
  }

  // repeated .PlayerInfo.BuffInfo buf = 2;
  for (int i = 0; i < this->buf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->buf(i), target);
  }

  // repeated .PlayerInfo.POneTalentSkill skillData = 3;
  for (int i = 0; i < this->skilldata_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->skilldata(i), target);
  }

  // optional int32 curTalent = 4;
  if (has_curtalent()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->curtalent(), target);
  }

  // repeated int32 clanskills = 5;
  for (int i = 0; i < this->clanskills_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->clanskills(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkillInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 curTalent = 4;
    if (has_curtalent()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curtalent());
    }

  }
  // repeated int32 skillid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skillid(i));
    }
    total_size += 1 * this->skillid_size() + data_size;
  }

  // repeated .PlayerInfo.BuffInfo buf = 2;
  total_size += 1 * this->buf_size();
  for (int i = 0; i < this->buf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buf(i));
  }

  // repeated .PlayerInfo.POneTalentSkill skillData = 3;
  total_size += 1 * this->skilldata_size();
  for (int i = 0; i < this->skilldata_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skilldata(i));
  }

  // repeated int32 clanskills = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->clanskills_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->clanskills(i));
    }
    total_size += 1 * this->clanskills_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkillInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkillInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkillInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkillInfo::MergeFrom(const SkillInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillid_.MergeFrom(from.skillid_);
  buf_.MergeFrom(from.buf_);
  skilldata_.MergeFrom(from.skilldata_);
  clanskills_.MergeFrom(from.clanskills_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_curtalent()) {
      set_curtalent(from.curtalent());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkillInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkillInfo::CopyFrom(const SkillInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkillInfo::IsInitialized() const {

  for (int i = 0; i < buf_size(); i++) {
    if (!this->buf(i).IsInitialized()) return false;
  }
  return true;
}

void SkillInfo::Swap(SkillInfo* other) {
  if (other != this) {
    skillid_.Swap(&other->skillid_);
    buf_.Swap(&other->buf_);
    skilldata_.Swap(&other->skilldata_);
    std::swap(curtalent_, other->curtalent_);
    clanskills_.Swap(&other->clanskills_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkillInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkillInfo_descriptor_;
  metadata.reflection = SkillInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BuffInfo::kTypeFieldNumber;
const int BuffInfo::kIdFieldNumber;
const int BuffInfo::kEndtimeFieldNumber;
const int BuffInfo::kOfftimeFieldNumber;
const int BuffInfo::kIsdelFieldNumber;
#endif  // !_MSC_VER

BuffInfo::BuffInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BuffInfo::InitAsDefaultInstance() {
}

BuffInfo::BuffInfo(const BuffInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BuffInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  endtime_ = GOOGLE_LONGLONG(0);
  offtime_ = GOOGLE_LONGLONG(0);
  isdel_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BuffInfo::~BuffInfo() {
  SharedDtor();
}

void BuffInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BuffInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BuffInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BuffInfo_descriptor_;
}

const BuffInfo& BuffInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

BuffInfo* BuffInfo::default_instance_ = NULL;

BuffInfo* BuffInfo::New() const {
  return new BuffInfo;
}

void BuffInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    endtime_ = GOOGLE_LONGLONG(0);
    offtime_ = GOOGLE_LONGLONG(0);
    isdel_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BuffInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // required int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endtime;
        break;
      }

      // optional int64 endtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_offtime;
        break;
      }

      // optional int64 offtime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offtime_)));
          set_has_offtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_isdel;
        break;
      }

      // optional bool isdel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isdel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isdel_)));
          set_has_isdel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BuffInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int64 endtime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // optional int64 offtime = 4;
  if (has_offtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->offtime(), output);
  }

  // optional bool isdel = 5;
  if (has_isdel()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->isdel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BuffInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int64 endtime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // optional int64 offtime = 4;
  if (has_offtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->offtime(), target);
  }

  // optional bool isdel = 5;
  if (has_isdel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->isdel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BuffInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int64 endtime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int64 offtime = 4;
    if (has_offtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offtime());
    }

    // optional bool isdel = 5;
    if (has_isdel()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BuffInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BuffInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BuffInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BuffInfo::MergeFrom(const BuffInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_offtime()) {
      set_offtime(from.offtime());
    }
    if (from.has_isdel()) {
      set_isdel(from.isdel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BuffInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BuffInfo::CopyFrom(const BuffInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BuffInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void BuffInfo::Swap(BuffInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(endtime_, other->endtime_);
    std::swap(offtime_, other->offtime_);
    std::swap(isdel_, other->isdel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BuffInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BuffInfo_descriptor_;
  metadata.reflection = BuffInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CDInfo::kCdFieldNumber;
#endif  // !_MSC_VER

CDInfo::CDInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CDInfo::InitAsDefaultInstance() {
}

CDInfo::CDInfo(const CDInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CDInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CDInfo::~CDInfo() {
  SharedDtor();
}

void CDInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CDInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CDInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CDInfo_descriptor_;
}

const CDInfo& CDInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

CDInfo* CDInfo::default_instance_ = NULL;

CDInfo* CDInfo::New() const {
  return new CDInfo;
}

void CDInfo::Clear() {
  cd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CDInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.ChannelCD cd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_cd;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CDInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.ChannelCD cd = 1;
  for (int i = 0; i < this->cd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->cd(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CDInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.ChannelCD cd = 1;
  for (int i = 0; i < this->cd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->cd(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CDInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerInfo.ChannelCD cd = 1;
  total_size += 1 * this->cd_size();
  for (int i = 0; i < this->cd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cd(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CDInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CDInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CDInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CDInfo::MergeFrom(const CDInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cd_.MergeFrom(from.cd_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CDInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CDInfo::CopyFrom(const CDInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CDInfo::IsInitialized() const {

  for (int i = 0; i < cd_size(); i++) {
    if (!this->cd(i).IsInitialized()) return false;
  }
  return true;
}

void CDInfo::Swap(CDInfo* other) {
  if (other != this) {
    cd_.Swap(&other->cd_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CDInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CDInfo_descriptor_;
  metadata.reflection = CDInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChannelCD::kTypeFieldNumber;
const int ChannelCD::kEndtimeFieldNumber;
#endif  // !_MSC_VER

ChannelCD::ChannelCD()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChannelCD::InitAsDefaultInstance() {
}

ChannelCD::ChannelCD(const ChannelCD& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChannelCD::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  endtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChannelCD::~ChannelCD() {
  SharedDtor();
}

void ChannelCD::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChannelCD::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChannelCD::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChannelCD_descriptor_;
}

const ChannelCD& ChannelCD::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

ChannelCD* ChannelCD::default_instance_ = NULL;

ChannelCD* ChannelCD::New() const {
  return new ChannelCD;
}

void ChannelCD::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    endtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChannelCD::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endtime;
        break;
      }

      // required int64 endtime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChannelCD::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int64 endtime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChannelCD::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int64 endtime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChannelCD::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int64 endtime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChannelCD::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChannelCD* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChannelCD*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChannelCD::MergeFrom(const ChannelCD& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChannelCD::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChannelCD::CopyFrom(const ChannelCD& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChannelCD::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ChannelCD::Swap(ChannelCD* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChannelCD::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChannelCD_descriptor_;
  metadata.reflection = ChannelCD_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ContainerInfo::kPackageFieldNumber;
const int ContainerInfo::kStorehouseFieldNumber;
#endif  // !_MSC_VER

ContainerInfo::ContainerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ContainerInfo::InitAsDefaultInstance() {
  package_ = const_cast< ::PlayerInfo::PackageInfo*>(&::PlayerInfo::PackageInfo::default_instance());
  storehouse_ = const_cast< ::PlayerInfo::StoreHouseInfo*>(&::PlayerInfo::StoreHouseInfo::default_instance());
}

ContainerInfo::ContainerInfo(const ContainerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ContainerInfo::SharedCtor() {
  _cached_size_ = 0;
  package_ = NULL;
  storehouse_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ContainerInfo::~ContainerInfo() {
  SharedDtor();
}

void ContainerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete package_;
    delete storehouse_;
  }
}

void ContainerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ContainerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ContainerInfo_descriptor_;
}

const ContainerInfo& ContainerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

ContainerInfo* ContainerInfo::default_instance_ = NULL;

ContainerInfo* ContainerInfo::New() const {
  return new ContainerInfo;
}

void ContainerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_package()) {
      if (package_ != NULL) package_->::PlayerInfo::PackageInfo::Clear();
    }
    if (has_storehouse()) {
      if (storehouse_ != NULL) storehouse_->::PlayerInfo::StoreHouseInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ContainerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerInfo.PackageInfo package = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_package()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_storehouse;
        break;
      }

      // optional .PlayerInfo.StoreHouseInfo storehouse = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storehouse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storehouse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ContainerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlayerInfo.PackageInfo package = 1;
  if (has_package()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->package(), output);
  }

  // optional .PlayerInfo.StoreHouseInfo storehouse = 2;
  if (has_storehouse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->storehouse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ContainerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlayerInfo.PackageInfo package = 1;
  if (has_package()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->package(), target);
  }

  // optional .PlayerInfo.StoreHouseInfo storehouse = 2;
  if (has_storehouse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->storehouse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ContainerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlayerInfo.PackageInfo package = 1;
    if (has_package()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->package());
    }

    // optional .PlayerInfo.StoreHouseInfo storehouse = 2;
    if (has_storehouse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storehouse());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ContainerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ContainerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ContainerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ContainerInfo::MergeFrom(const ContainerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_package()) {
      mutable_package()->::PlayerInfo::PackageInfo::MergeFrom(from.package());
    }
    if (from.has_storehouse()) {
      mutable_storehouse()->::PlayerInfo::StoreHouseInfo::MergeFrom(from.storehouse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ContainerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ContainerInfo::CopyFrom(const ContainerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ContainerInfo::IsInitialized() const {

  if (has_package()) {
    if (!this->package().IsInitialized()) return false;
  }
  if (has_storehouse()) {
    if (!this->storehouse().IsInitialized()) return false;
  }
  return true;
}

void ContainerInfo::Swap(ContainerInfo* other) {
  if (other != this) {
    std::swap(package_, other->package_);
    std::swap(storehouse_, other->storehouse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ContainerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ContainerInfo_descriptor_;
  metadata.reflection = ContainerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerTypeInfo::kTypeFieldNumber;
const int PlayerTypeInfo::kHorseFieldNumber;
const int PlayerTypeInfo::kDanluFieldNumber;
const int PlayerTypeInfo::kMagicwFieldNumber;
const int PlayerTypeInfo::kCjobFieldNumber;
const int PlayerTypeInfo::kLucktableFieldNumber;
const int PlayerTypeInfo::kActivityFieldNumber;
const int PlayerTypeInfo::kDestinationFieldNumber;
#endif  // !_MSC_VER

PlayerTypeInfo::PlayerTypeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerTypeInfo::InitAsDefaultInstance() {
  horse_ = const_cast< ::PlayerInfo::HorseInfo*>(&::PlayerInfo::HorseInfo::default_instance());
  danlu_ = const_cast< ::PlayerInfo::DanLuInfo*>(&::PlayerInfo::DanLuInfo::default_instance());
  magicw_ = const_cast< ::PlayerInfo::MagicWeapon*>(&::PlayerInfo::MagicWeapon::default_instance());
  cjob_ = const_cast< ::PlayerInfo::RandCJobLucky*>(&::PlayerInfo::RandCJobLucky::default_instance());
  lucktable_ = const_cast< ::PlayerInfo::LucklyTurntable*>(&::PlayerInfo::LucklyTurntable::default_instance());
  activity_ = const_cast< ::PlayerInfo::Activity*>(&::PlayerInfo::Activity::default_instance());
  destination_ = const_cast< ::PlayerInfo::DestinationInfoList*>(&::PlayerInfo::DestinationInfoList::default_instance());
}

PlayerTypeInfo::PlayerTypeInfo(const PlayerTypeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerTypeInfo::SharedCtor() {
  _cached_size_ = 0;
  horse_ = NULL;
  danlu_ = NULL;
  magicw_ = NULL;
  cjob_ = NULL;
  lucktable_ = NULL;
  activity_ = NULL;
  destination_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerTypeInfo::~PlayerTypeInfo() {
  SharedDtor();
}

void PlayerTypeInfo::SharedDtor() {
  if (this != default_instance_) {
    delete horse_;
    delete danlu_;
    delete magicw_;
    delete cjob_;
    delete lucktable_;
    delete activity_;
    delete destination_;
  }
}

void PlayerTypeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerTypeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerTypeInfo_descriptor_;
}

const PlayerTypeInfo& PlayerTypeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

PlayerTypeInfo* PlayerTypeInfo::default_instance_ = NULL;

PlayerTypeInfo* PlayerTypeInfo::New() const {
  return new PlayerTypeInfo;
}

void PlayerTypeInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_horse()) {
      if (horse_ != NULL) horse_->::PlayerInfo::HorseInfo::Clear();
    }
    if (has_danlu()) {
      if (danlu_ != NULL) danlu_->::PlayerInfo::DanLuInfo::Clear();
    }
    if (has_magicw()) {
      if (magicw_ != NULL) magicw_->::PlayerInfo::MagicWeapon::Clear();
    }
    if (has_cjob()) {
      if (cjob_ != NULL) cjob_->::PlayerInfo::RandCJobLucky::Clear();
    }
    if (has_lucktable()) {
      if (lucktable_ != NULL) lucktable_->::PlayerInfo::LucklyTurntable::Clear();
    }
    if (has_activity()) {
      if (activity_ != NULL) activity_->::PlayerInfo::Activity::Clear();
    }
    if (has_destination()) {
      if (destination_ != NULL) destination_->::PlayerInfo::DestinationInfoList::Clear();
    }
  }
  type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerTypeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_type;
        if (input->ExpectTag(18)) goto parse_horse;
        break;
      }

      // optional .PlayerInfo.HorseInfo horse = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_horse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_horse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_danlu;
        break;
      }

      // optional .PlayerInfo.DanLuInfo danlu = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_danlu:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_danlu()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_magicw;
        break;
      }

      // optional .PlayerInfo.MagicWeapon magicw = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_magicw:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_magicw()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_cjob;
        break;
      }

      // optional .PlayerInfo.RandCJobLucky cjob = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cjob:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_cjob()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_lucktable;
        break;
      }

      // optional .PlayerInfo.LucklyTurntable lucktable = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lucktable:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_lucktable()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_activity;
        break;
      }

      // optional .PlayerInfo.Activity activity = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_activity:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_activity()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_destination;
        break;
      }

      // optional .PlayerInfo.DestinationInfoList destination = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destination:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_destination()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerTypeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->type(i), output);
  }

  // optional .PlayerInfo.HorseInfo horse = 2;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->horse(), output);
  }

  // optional .PlayerInfo.DanLuInfo danlu = 3;
  if (has_danlu()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->danlu(), output);
  }

  // optional .PlayerInfo.MagicWeapon magicw = 4;
  if (has_magicw()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->magicw(), output);
  }

  // optional .PlayerInfo.RandCJobLucky cjob = 5;
  if (has_cjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->cjob(), output);
  }

  // optional .PlayerInfo.LucklyTurntable lucktable = 6;
  if (has_lucktable()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->lucktable(), output);
  }

  // optional .PlayerInfo.Activity activity = 7;
  if (has_activity()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->activity(), output);
  }

  // optional .PlayerInfo.DestinationInfoList destination = 8;
  if (has_destination()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->destination(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerTypeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->type(i), target);
  }

  // optional .PlayerInfo.HorseInfo horse = 2;
  if (has_horse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->horse(), target);
  }

  // optional .PlayerInfo.DanLuInfo danlu = 3;
  if (has_danlu()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->danlu(), target);
  }

  // optional .PlayerInfo.MagicWeapon magicw = 4;
  if (has_magicw()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->magicw(), target);
  }

  // optional .PlayerInfo.RandCJobLucky cjob = 5;
  if (has_cjob()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->cjob(), target);
  }

  // optional .PlayerInfo.LucklyTurntable lucktable = 6;
  if (has_lucktable()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->lucktable(), target);
  }

  // optional .PlayerInfo.Activity activity = 7;
  if (has_activity()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->activity(), target);
  }

  // optional .PlayerInfo.DestinationInfoList destination = 8;
  if (has_destination()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->destination(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerTypeInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .PlayerInfo.HorseInfo horse = 2;
    if (has_horse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->horse());
    }

    // optional .PlayerInfo.DanLuInfo danlu = 3;
    if (has_danlu()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->danlu());
    }

    // optional .PlayerInfo.MagicWeapon magicw = 4;
    if (has_magicw()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->magicw());
    }

    // optional .PlayerInfo.RandCJobLucky cjob = 5;
    if (has_cjob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->cjob());
    }

    // optional .PlayerInfo.LucklyTurntable lucktable = 6;
    if (has_lucktable()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->lucktable());
    }

    // optional .PlayerInfo.Activity activity = 7;
    if (has_activity()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->activity());
    }

    // optional .PlayerInfo.DestinationInfoList destination = 8;
    if (has_destination()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->destination());
    }

  }
  // repeated int32 type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerTypeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerTypeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerTypeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerTypeInfo::MergeFrom(const PlayerTypeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_horse()) {
      mutable_horse()->::PlayerInfo::HorseInfo::MergeFrom(from.horse());
    }
    if (from.has_danlu()) {
      mutable_danlu()->::PlayerInfo::DanLuInfo::MergeFrom(from.danlu());
    }
    if (from.has_magicw()) {
      mutable_magicw()->::PlayerInfo::MagicWeapon::MergeFrom(from.magicw());
    }
    if (from.has_cjob()) {
      mutable_cjob()->::PlayerInfo::RandCJobLucky::MergeFrom(from.cjob());
    }
    if (from.has_lucktable()) {
      mutable_lucktable()->::PlayerInfo::LucklyTurntable::MergeFrom(from.lucktable());
    }
    if (from.has_activity()) {
      mutable_activity()->::PlayerInfo::Activity::MergeFrom(from.activity());
    }
    if (from.has_destination()) {
      mutable_destination()->::PlayerInfo::DestinationInfoList::MergeFrom(from.destination());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerTypeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerTypeInfo::CopyFrom(const PlayerTypeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerTypeInfo::IsInitialized() const {

  if (has_horse()) {
    if (!this->horse().IsInitialized()) return false;
  }
  if (has_cjob()) {
    if (!this->cjob().IsInitialized()) return false;
  }
  if (has_activity()) {
    if (!this->activity().IsInitialized()) return false;
  }
  if (has_destination()) {
    if (!this->destination().IsInitialized()) return false;
  }
  return true;
}

void PlayerTypeInfo::Swap(PlayerTypeInfo* other) {
  if (other != this) {
    type_.Swap(&other->type_);
    std::swap(horse_, other->horse_);
    std::swap(danlu_, other->danlu_);
    std::swap(magicw_, other->magicw_);
    std::swap(cjob_, other->cjob_);
    std::swap(lucktable_, other->lucktable_);
    std::swap(activity_, other->activity_);
    std::swap(destination_, other->destination_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerTypeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerTypeInfo_descriptor_;
  metadata.reflection = PlayerTypeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipQuickInfo::kEquipFieldNumber;
const int EquipQuickInfo::kQuickFieldNumber;
#endif  // !_MSC_VER

EquipQuickInfo::EquipQuickInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipQuickInfo::InitAsDefaultInstance() {
}

EquipQuickInfo::EquipQuickInfo(const EquipQuickInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipQuickInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipQuickInfo::~EquipQuickInfo() {
  SharedDtor();
}

void EquipQuickInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipQuickInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipQuickInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipQuickInfo_descriptor_;
}

const EquipQuickInfo& EquipQuickInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

EquipQuickInfo* EquipQuickInfo::default_instance_ = NULL;

EquipQuickInfo* EquipQuickInfo::New() const {
  return new EquipQuickInfo;
}

void EquipQuickInfo::Clear() {
  equip_.Clear();
  quick_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipQuickInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.ItemInfo equip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equip;
        if (input->ExpectTag(18)) goto parse_quick;
        break;
      }

      // repeated .PlayerInfo.QuickContainer quick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quick;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipQuickInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.ItemInfo equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equip(i), output);
  }

  // repeated .PlayerInfo.QuickContainer quick = 2;
  for (int i = 0; i < this->quick_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quick(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipQuickInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.ItemInfo equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equip(i), target);
  }

  // repeated .PlayerInfo.QuickContainer quick = 2;
  for (int i = 0; i < this->quick_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quick(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipQuickInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerInfo.ItemInfo equip = 1;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated .PlayerInfo.QuickContainer quick = 2;
  total_size += 1 * this->quick_size();
  for (int i = 0; i < this->quick_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quick(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipQuickInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipQuickInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipQuickInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipQuickInfo::MergeFrom(const EquipQuickInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  quick_.MergeFrom(from.quick_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipQuickInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipQuickInfo::CopyFrom(const EquipQuickInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipQuickInfo::IsInitialized() const {

  for (int i = 0; i < equip_size(); i++) {
    if (!this->equip(i).IsInitialized()) return false;
  }
  for (int i = 0; i < quick_size(); i++) {
    if (!this->quick(i).IsInitialized()) return false;
  }
  return true;
}

void EquipQuickInfo::Swap(EquipQuickInfo* other) {
  if (other != this) {
    equip_.Swap(&other->equip_);
    quick_.Swap(&other->quick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipQuickInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipQuickInfo_descriptor_;
  metadata.reflection = EquipQuickInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageInfo::kPackageFieldNumber;
const int PackageInfo::kSizeFieldNumber;
const int PackageInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

PackageInfo::PackageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageInfo::InitAsDefaultInstance() {
}

PackageInfo::PackageInfo(const PackageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageInfo::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageInfo::~PackageInfo() {
  SharedDtor();
}

void PackageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageInfo_descriptor_;
}

const PackageInfo& PackageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

PackageInfo* PackageInfo::default_instance_ = NULL;

PackageInfo* PackageInfo::New() const {
  return new PackageInfo;
}

void PackageInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    size_ = 0;
    time_ = GOOGLE_LONGLONG(0);
  }
  package_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.ItemInfo package = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_package()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_package;
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional int32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int64 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.ItemInfo package = 1;
  for (int i = 0; i < this->package_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->package(i), output);
  }

  // optional int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // optional int64 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.ItemInfo package = 1;
  for (int i = 0; i < this->package_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->package(i), target);
  }

  // optional int32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  // optional int64 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int64 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  // repeated .PlayerInfo.ItemInfo package = 1;
  total_size += 1 * this->package_size();
  for (int i = 0; i < this->package_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->package(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageInfo::MergeFrom(const PackageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  package_.MergeFrom(from.package_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageInfo::CopyFrom(const PackageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageInfo::IsInitialized() const {

  for (int i = 0; i < package_size(); i++) {
    if (!this->package(i).IsInitialized()) return false;
  }
  return true;
}

void PackageInfo::Swap(PackageInfo* other) {
  if (other != this) {
    package_.Swap(&other->package_);
    std::swap(size_, other->size_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageInfo_descriptor_;
  metadata.reflection = PackageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreHouseInfo::kStorehouseFieldNumber;
const int StoreHouseInfo::kSizeFieldNumber;
const int StoreHouseInfo::kTimeFieldNumber;
#endif  // !_MSC_VER

StoreHouseInfo::StoreHouseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreHouseInfo::InitAsDefaultInstance() {
}

StoreHouseInfo::StoreHouseInfo(const StoreHouseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreHouseInfo::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreHouseInfo::~StoreHouseInfo() {
  SharedDtor();
}

void StoreHouseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreHouseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreHouseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreHouseInfo_descriptor_;
}

const StoreHouseInfo& StoreHouseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

StoreHouseInfo* StoreHouseInfo::default_instance_ = NULL;

StoreHouseInfo* StoreHouseInfo::New() const {
  return new StoreHouseInfo;
}

void StoreHouseInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    size_ = 0;
    time_ = GOOGLE_LONGLONG(0);
  }
  storehouse_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreHouseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.ItemInfo storehouse = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storehouse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storehouse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_storehouse;
        if (input->ExpectTag(24)) goto parse_size;
        break;
      }

      // optional int32 size = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreHouseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.ItemInfo storehouse = 1;
  for (int i = 0; i < this->storehouse_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->storehouse(i), output);
  }

  // optional int32 size = 3;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->size(), output);
  }

  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreHouseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.ItemInfo storehouse = 1;
  for (int i = 0; i < this->storehouse_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->storehouse(i), target);
  }

  // optional int32 size = 3;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->size(), target);
  }

  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreHouseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 size = 3;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  // repeated .PlayerInfo.ItemInfo storehouse = 1;
  total_size += 1 * this->storehouse_size();
  for (int i = 0; i < this->storehouse_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storehouse(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreHouseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreHouseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreHouseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreHouseInfo::MergeFrom(const StoreHouseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  storehouse_.MergeFrom(from.storehouse_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreHouseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreHouseInfo::CopyFrom(const StoreHouseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreHouseInfo::IsInitialized() const {

  for (int i = 0; i < storehouse_size(); i++) {
    if (!this->storehouse(i).IsInitialized()) return false;
  }
  return true;
}

void StoreHouseInfo::Swap(StoreHouseInfo* other) {
  if (other != this) {
    storehouse_.Swap(&other->storehouse_);
    std::swap(size_, other->size_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreHouseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreHouseInfo_descriptor_;
  metadata.reflection = StoreHouseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonitorInfo::kAttackskillFieldNumber;
const int MonitorInfo::kSkillidFieldNumber;
const int MonitorInfo::kIspickequipFieldNumber;
const int MonitorInfo::kQualityFieldNumber;
const int MonitorInfo::kProfessionFieldNumber;
const int MonitorInfo::kIspickstoneFieldNumber;
const int MonitorInfo::kIspickconsumeFieldNumber;
const int MonitorInfo::kIspickmoneyFieldNumber;
const int MonitorInfo::kIspickotherFieldNumber;
const int MonitorInfo::kIsgroupFieldNumber;
const int MonitorInfo::kAssistskillFieldNumber;
const int MonitorInfo::kIsbuyhpFieldNumber;
const int MonitorInfo::kHpbuytypeFieldNumber;
const int MonitorInfo::kIsbuympFieldNumber;
const int MonitorInfo::kMpbuytypeFieldNumber;
const int MonitorInfo::kIsrevalsitFieldNumber;
const int MonitorInfo::kIsuseexpFieldNumber;
const int MonitorInfo::kHpFieldNumber;
const int MonitorInfo::kHpuseFieldNumber;
const int MonitorInfo::kMpFieldNumber;
const int MonitorInfo::kMpuseFieldNumber;
#endif  // !_MSC_VER

MonitorInfo::MonitorInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonitorInfo::InitAsDefaultInstance() {
}

MonitorInfo::MonitorInfo(const MonitorInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonitorInfo::SharedCtor() {
  _cached_size_ = 0;
  ispickequip_ = false;
  quality_ = 0;
  profession_ = 0;
  ispickstone_ = false;
  ispickconsume_ = false;
  ispickmoney_ = false;
  ispickother_ = false;
  isgroup_ = false;
  assistskill_ = false;
  isbuyhp_ = false;
  hpbuytype_ = 0;
  isbuymp_ = false;
  mpbuytype_ = 0;
  isrevalsit_ = false;
  isuseexp_ = false;
  hp_ = 0;
  hpuse_ = false;
  mp_ = 0;
  mpuse_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonitorInfo::~MonitorInfo() {
  SharedDtor();
}

void MonitorInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonitorInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonitorInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonitorInfo_descriptor_;
}

const MonitorInfo& MonitorInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

MonitorInfo* MonitorInfo::default_instance_ = NULL;

MonitorInfo* MonitorInfo::New() const {
  return new MonitorInfo;
}

void MonitorInfo::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    ispickequip_ = false;
    quality_ = 0;
    profession_ = 0;
    ispickstone_ = false;
    ispickconsume_ = false;
    ispickmoney_ = false;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ispickother_ = false;
    isgroup_ = false;
    assistskill_ = false;
    isbuyhp_ = false;
    hpbuytype_ = 0;
    isbuymp_ = false;
    mpbuytype_ = 0;
    isrevalsit_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    isuseexp_ = false;
    hp_ = 0;
    hpuse_ = false;
    mp_ = 0;
    mpuse_ = false;
  }
  attackskill_.Clear();
  skillid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonitorInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated bool attackskill = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attackskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 1, 8, input, this->mutable_attackskill())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, this->mutable_attackskill())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_attackskill;
        if (input->ExpectTag(16)) goto parse_skillid;
        break;
      }

      // repeated int64 skillid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_skillid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_skillid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillid;
        if (input->ExpectTag(24)) goto parse_ispickequip;
        break;
      }

      // optional bool ispickequip = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ispickequip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispickequip_)));
          set_has_ispickequip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_quality;
        break;
      }

      // optional int32 quality = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_profession;
        break;
      }

      // optional int32 profession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ispickstone;
        break;
      }

      // optional bool ispickstone = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ispickstone:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispickstone_)));
          set_has_ispickstone();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ispickconsume;
        break;
      }

      // optional bool ispickconsume = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ispickconsume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispickconsume_)));
          set_has_ispickconsume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ispickmoney;
        break;
      }

      // optional bool ispickmoney = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ispickmoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispickmoney_)));
          set_has_ispickmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ispickother;
        break;
      }

      // optional bool ispickother = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ispickother:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispickother_)));
          set_has_ispickother();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_isgroup;
        break;
      }

      // optional bool isgroup = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isgroup:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isgroup_)));
          set_has_isgroup();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_assistskill;
        break;
      }

      // optional bool assistskill = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_assistskill:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &assistskill_)));
          set_has_assistskill();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_isbuyhp;
        break;
      }

      // optional bool isbuyhp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbuyhp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbuyhp_)));
          set_has_isbuyhp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_hpbuytype;
        break;
      }

      // optional int32 hpbuytype = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpbuytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpbuytype_)));
          set_has_hpbuytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_isbuymp;
        break;
      }

      // optional bool isbuymp = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isbuymp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isbuymp_)));
          set_has_isbuymp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_mpbuytype;
        break;
      }

      // optional int32 mpbuytype = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mpbuytype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mpbuytype_)));
          set_has_mpbuytype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_isrevalsit;
        break;
      }

      // optional bool isrevalsit = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isrevalsit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isrevalsit_)));
          set_has_isrevalsit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_isuseexp;
        break;
      }

      // optional bool isuseexp = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isuseexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isuseexp_)));
          set_has_isuseexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_hp;
        break;
      }

      // optional int32 hp = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_hpuse;
        break;
      }

      // optional bool hpuse = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &hpuse_)));
          set_has_hpuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_mp;
        break;
      }

      // optional int32 mp = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_mpuse;
        break;
      }

      // optional bool mpuse = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mpuse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &mpuse_)));
          set_has_mpuse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonitorInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated bool attackskill = 1;
  for (int i = 0; i < this->attackskill_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(
      1, this->attackskill(i), output);
  }

  // repeated int64 skillid = 2;
  for (int i = 0; i < this->skillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->skillid(i), output);
  }

  // optional bool ispickequip = 3;
  if (has_ispickequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->ispickequip(), output);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->quality(), output);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->profession(), output);
  }

  // optional bool ispickstone = 6;
  if (has_ispickstone()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(6, this->ispickstone(), output);
  }

  // optional bool ispickconsume = 7;
  if (has_ispickconsume()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(7, this->ispickconsume(), output);
  }

  // optional bool ispickmoney = 8;
  if (has_ispickmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->ispickmoney(), output);
  }

  // optional bool ispickother = 9;
  if (has_ispickother()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->ispickother(), output);
  }

  // optional bool isgroup = 10;
  if (has_isgroup()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(10, this->isgroup(), output);
  }

  // optional bool assistskill = 11;
  if (has_assistskill()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(11, this->assistskill(), output);
  }

  // optional bool isbuyhp = 12;
  if (has_isbuyhp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(12, this->isbuyhp(), output);
  }

  // optional int32 hpbuytype = 13;
  if (has_hpbuytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->hpbuytype(), output);
  }

  // optional bool isbuymp = 14;
  if (has_isbuymp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(14, this->isbuymp(), output);
  }

  // optional int32 mpbuytype = 15;
  if (has_mpbuytype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->mpbuytype(), output);
  }

  // optional bool isrevalsit = 16;
  if (has_isrevalsit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->isrevalsit(), output);
  }

  // optional bool isuseexp = 17;
  if (has_isuseexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->isuseexp(), output);
  }

  // optional int32 hp = 18;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->hp(), output);
  }

  // optional bool hpuse = 19;
  if (has_hpuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->hpuse(), output);
  }

  // optional int32 mp = 20;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->mp(), output);
  }

  // optional bool mpuse = 21;
  if (has_mpuse()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(21, this->mpuse(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonitorInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated bool attackskill = 1;
  for (int i = 0; i < this->attackskill_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteBoolToArray(1, this->attackskill(i), target);
  }

  // repeated int64 skillid = 2;
  for (int i = 0; i < this->skillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->skillid(i), target);
  }

  // optional bool ispickequip = 3;
  if (has_ispickequip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->ispickequip(), target);
  }

  // optional int32 quality = 4;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->quality(), target);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->profession(), target);
  }

  // optional bool ispickstone = 6;
  if (has_ispickstone()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(6, this->ispickstone(), target);
  }

  // optional bool ispickconsume = 7;
  if (has_ispickconsume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(7, this->ispickconsume(), target);
  }

  // optional bool ispickmoney = 8;
  if (has_ispickmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->ispickmoney(), target);
  }

  // optional bool ispickother = 9;
  if (has_ispickother()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->ispickother(), target);
  }

  // optional bool isgroup = 10;
  if (has_isgroup()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(10, this->isgroup(), target);
  }

  // optional bool assistskill = 11;
  if (has_assistskill()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(11, this->assistskill(), target);
  }

  // optional bool isbuyhp = 12;
  if (has_isbuyhp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(12, this->isbuyhp(), target);
  }

  // optional int32 hpbuytype = 13;
  if (has_hpbuytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->hpbuytype(), target);
  }

  // optional bool isbuymp = 14;
  if (has_isbuymp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(14, this->isbuymp(), target);
  }

  // optional int32 mpbuytype = 15;
  if (has_mpbuytype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->mpbuytype(), target);
  }

  // optional bool isrevalsit = 16;
  if (has_isrevalsit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->isrevalsit(), target);
  }

  // optional bool isuseexp = 17;
  if (has_isuseexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->isuseexp(), target);
  }

  // optional int32 hp = 18;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->hp(), target);
  }

  // optional bool hpuse = 19;
  if (has_hpuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->hpuse(), target);
  }

  // optional int32 mp = 20;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->mp(), target);
  }

  // optional bool mpuse = 21;
  if (has_mpuse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(21, this->mpuse(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonitorInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional bool ispickequip = 3;
    if (has_ispickequip()) {
      total_size += 1 + 1;
    }

    // optional int32 quality = 4;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional bool ispickstone = 6;
    if (has_ispickstone()) {
      total_size += 1 + 1;
    }

    // optional bool ispickconsume = 7;
    if (has_ispickconsume()) {
      total_size += 1 + 1;
    }

    // optional bool ispickmoney = 8;
    if (has_ispickmoney()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool ispickother = 9;
    if (has_ispickother()) {
      total_size += 1 + 1;
    }

    // optional bool isgroup = 10;
    if (has_isgroup()) {
      total_size += 1 + 1;
    }

    // optional bool assistskill = 11;
    if (has_assistskill()) {
      total_size += 1 + 1;
    }

    // optional bool isbuyhp = 12;
    if (has_isbuyhp()) {
      total_size += 1 + 1;
    }

    // optional int32 hpbuytype = 13;
    if (has_hpbuytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpbuytype());
    }

    // optional bool isbuymp = 14;
    if (has_isbuymp()) {
      total_size += 1 + 1;
    }

    // optional int32 mpbuytype = 15;
    if (has_mpbuytype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mpbuytype());
    }

    // optional bool isrevalsit = 16;
    if (has_isrevalsit()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool isuseexp = 17;
    if (has_isuseexp()) {
      total_size += 2 + 1;
    }

    // optional int32 hp = 18;
    if (has_hp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional bool hpuse = 19;
    if (has_hpuse()) {
      total_size += 2 + 1;
    }

    // optional int32 mp = 20;
    if (has_mp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional bool mpuse = 21;
    if (has_mpuse()) {
      total_size += 2 + 1;
    }

  }
  // repeated bool attackskill = 1;
  {
    int data_size = 0;
    data_size = 1 * this->attackskill_size();
    total_size += 1 * this->attackskill_size() + data_size;
  }

  // repeated int64 skillid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->skillid(i));
    }
    total_size += 1 * this->skillid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonitorInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonitorInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonitorInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonitorInfo::MergeFrom(const MonitorInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  attackskill_.MergeFrom(from.attackskill_);
  skillid_.MergeFrom(from.skillid_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_ispickequip()) {
      set_ispickequip(from.ispickequip());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_ispickstone()) {
      set_ispickstone(from.ispickstone());
    }
    if (from.has_ispickconsume()) {
      set_ispickconsume(from.ispickconsume());
    }
    if (from.has_ispickmoney()) {
      set_ispickmoney(from.ispickmoney());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ispickother()) {
      set_ispickother(from.ispickother());
    }
    if (from.has_isgroup()) {
      set_isgroup(from.isgroup());
    }
    if (from.has_assistskill()) {
      set_assistskill(from.assistskill());
    }
    if (from.has_isbuyhp()) {
      set_isbuyhp(from.isbuyhp());
    }
    if (from.has_hpbuytype()) {
      set_hpbuytype(from.hpbuytype());
    }
    if (from.has_isbuymp()) {
      set_isbuymp(from.isbuymp());
    }
    if (from.has_mpbuytype()) {
      set_mpbuytype(from.mpbuytype());
    }
    if (from.has_isrevalsit()) {
      set_isrevalsit(from.isrevalsit());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_isuseexp()) {
      set_isuseexp(from.isuseexp());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hpuse()) {
      set_hpuse(from.hpuse());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_mpuse()) {
      set_mpuse(from.mpuse());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonitorInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonitorInfo::CopyFrom(const MonitorInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonitorInfo::IsInitialized() const {

  return true;
}

void MonitorInfo::Swap(MonitorInfo* other) {
  if (other != this) {
    attackskill_.Swap(&other->attackskill_);
    skillid_.Swap(&other->skillid_);
    std::swap(ispickequip_, other->ispickequip_);
    std::swap(quality_, other->quality_);
    std::swap(profession_, other->profession_);
    std::swap(ispickstone_, other->ispickstone_);
    std::swap(ispickconsume_, other->ispickconsume_);
    std::swap(ispickmoney_, other->ispickmoney_);
    std::swap(ispickother_, other->ispickother_);
    std::swap(isgroup_, other->isgroup_);
    std::swap(assistskill_, other->assistskill_);
    std::swap(isbuyhp_, other->isbuyhp_);
    std::swap(hpbuytype_, other->hpbuytype_);
    std::swap(isbuymp_, other->isbuymp_);
    std::swap(mpbuytype_, other->mpbuytype_);
    std::swap(isrevalsit_, other->isrevalsit_);
    std::swap(isuseexp_, other->isuseexp_);
    std::swap(hp_, other->hp_);
    std::swap(hpuse_, other->hpuse_);
    std::swap(mp_, other->mp_);
    std::swap(mpuse_, other->mpuse_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonitorInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonitorInfo_descriptor_;
  metadata.reflection = MonitorInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SettingInfo::kTypeFieldNumber;
const int SettingInfo::kValueFieldNumber;
#endif  // !_MSC_VER

SettingInfo::SettingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SettingInfo::InitAsDefaultInstance() {
}

SettingInfo::SettingInfo(const SettingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SettingInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SettingInfo::~SettingInfo() {
  SharedDtor();
}

void SettingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SettingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SettingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SettingInfo_descriptor_;
}

const SettingInfo& SettingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

SettingInfo* SettingInfo::default_instance_ = NULL;

SettingInfo* SettingInfo::New() const {
  return new SettingInfo;
}

void SettingInfo::Clear() {
  type_.Clear();
  value_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SettingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_type;
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // repeated int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_value())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_value())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SettingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->type(i), output);
  }

  // repeated int32 value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->value(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SettingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->type(i), target);
  }

  // repeated int32 value = 2;
  for (int i = 0; i < this->value_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->value(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SettingInfo::ByteSize() const {
  int total_size = 0;

  // repeated int32 type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }

  // repeated int32 value = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->value_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->value(i));
    }
    total_size += 1 * this->value_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SettingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SettingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SettingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SettingInfo::MergeFrom(const SettingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  value_.MergeFrom(from.value_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SettingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SettingInfo::CopyFrom(const SettingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SettingInfo::IsInitialized() const {

  return true;
}

void SettingInfo::Swap(SettingInfo* other) {
  if (other != this) {
    type_.Swap(&other->type_);
    value_.Swap(&other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SettingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SettingInfo_descriptor_;
  metadata.reflection = SettingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HorseInfo::kIdFieldNumber;
const int HorseInfo::kMidFieldNumber;
const int HorseInfo::kExpFieldNumber;
const int HorseInfo::kSkinIDListFieldNumber;
#endif  // !_MSC_VER

HorseInfo::HorseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HorseInfo::InitAsDefaultInstance() {
}

HorseInfo::HorseInfo(const HorseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HorseInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  mid_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HorseInfo::~HorseInfo() {
  SharedDtor();
}

void HorseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HorseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HorseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HorseInfo_descriptor_;
}

const HorseInfo& HorseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

HorseInfo* HorseInfo::default_instance_ = NULL;

HorseInfo* HorseInfo::New() const {
  return new HorseInfo;
}

void HorseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    mid_ = 0;
    exp_ = 0;
  }
  skinidlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HorseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mid;
        break;
      }

      // required int32 mid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skinIDList;
        break;
      }

      // repeated .PlayerInfo.SkinInfo skinIDList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skinIDList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_skinidlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_skinIDList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HorseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 mid = 2;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mid(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // repeated .PlayerInfo.SkinInfo skinIDList = 4;
  for (int i = 0; i < this->skinidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->skinidlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HorseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 mid = 2;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mid(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // repeated .PlayerInfo.SkinInfo skinIDList = 4;
  for (int i = 0; i < this->skinidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->skinidlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HorseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 mid = 2;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mid());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  // repeated .PlayerInfo.SkinInfo skinIDList = 4;
  total_size += 1 * this->skinidlist_size();
  for (int i = 0; i < this->skinidlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->skinidlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HorseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HorseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HorseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HorseInfo::MergeFrom(const HorseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  skinidlist_.MergeFrom(from.skinidlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HorseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HorseInfo::CopyFrom(const HorseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HorseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < skinidlist_size(); i++) {
    if (!this->skinidlist(i).IsInitialized()) return false;
  }
  return true;
}

void HorseInfo::Swap(HorseInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mid_, other->mid_);
    std::swap(exp_, other->exp_);
    skinidlist_.Swap(&other->skinidlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HorseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HorseInfo_descriptor_;
  metadata.reflection = HorseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SkinInfo::kSkinIDFieldNumber;
const int SkinInfo::kEndTimeFieldNumber;
#endif  // !_MSC_VER

SkinInfo::SkinInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SkinInfo::InitAsDefaultInstance() {
}

SkinInfo::SkinInfo(const SkinInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SkinInfo::SharedCtor() {
  _cached_size_ = 0;
  skinid_ = 0;
  endtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SkinInfo::~SkinInfo() {
  SharedDtor();
}

void SkinInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SkinInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SkinInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SkinInfo_descriptor_;
}

const SkinInfo& SkinInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

SkinInfo* SkinInfo::default_instance_ = NULL;

SkinInfo* SkinInfo::New() const {
  return new SkinInfo;
}

void SkinInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skinid_ = 0;
    endtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SkinInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 skinID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skinid_)));
          set_has_skinid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SkinInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 skinID = 1;
  if (has_skinid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skinid(), output);
  }

  // optional int64 endTime = 2;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SkinInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 skinID = 1;
  if (has_skinid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skinid(), target);
  }

  // optional int64 endTime = 2;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SkinInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 skinID = 1;
    if (has_skinid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skinid());
    }

    // optional int64 endTime = 2;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SkinInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SkinInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SkinInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SkinInfo::MergeFrom(const SkinInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skinid()) {
      set_skinid(from.skinid());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SkinInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SkinInfo::CopyFrom(const SkinInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SkinInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SkinInfo::Swap(SkinInfo* other) {
  if (other != this) {
    std::swap(skinid_, other->skinid_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SkinInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SkinInfo_descriptor_;
  metadata.reflection = SkinInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ItemInfo::kIdFieldNumber;
const int ItemInfo::kFlagFieldNumber;
const int ItemInfo::kNewattrFieldNumber;
const int ItemInfo::kStoneidFieldNumber;
const int ItemInfo::kEndtimeFieldNumber;
const int ItemInfo::kNumFieldNumber;
const int ItemInfo::kInlayPosFieldNumber;
const int ItemInfo::kRefineAttrLvFieldNumber;
#endif  // !_MSC_VER

ItemInfo::ItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ItemInfo::InitAsDefaultInstance() {
}

ItemInfo::ItemInfo(const ItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ItemInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  flag_ = 0u;
  endtime_ = GOOGLE_LONGLONG(0);
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ItemInfo::~ItemInfo() {
  SharedDtor();
}

void ItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ItemInfo_descriptor_;
}

const ItemInfo& ItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

ItemInfo* ItemInfo::default_instance_ = NULL;

ItemInfo* ItemInfo::New() const {
  return new ItemInfo;
}

void ItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    flag_ = 0u;
    endtime_ = GOOGLE_LONGLONG(0);
    num_ = 0;
  }
  newattr_.Clear();
  stoneid_.Clear();
  inlaypos_.Clear();
  refineattrlv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newattr;
        break;
      }

      // repeated uint32 newattr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newattr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_newattr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_newattr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newattr;
        if (input->ExpectTag(32)) goto parse_stoneid;
        break;
      }

      // repeated int32 stoneid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_stoneid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stoneid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stoneid;
        if (input->ExpectTag(40)) goto parse_endtime;
        break;
      }

      // optional int64 endtime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }

      // optional int32 num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inlayPos;
        break;
      }

      // repeated int32 inlayPos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inlayPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_inlaypos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_inlaypos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inlayPos;
        if (input->ExpectTag(64)) goto parse_refineAttrLv;
        break;
      }

      // repeated uint32 refineAttrLv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineAttrLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_refineattrlv())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_refineattrlv())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_refineAttrLv;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // repeated uint32 newattr = 3;
  for (int i = 0; i < this->newattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->newattr(i), output);
  }

  // repeated int32 stoneid = 4;
  for (int i = 0; i < this->stoneid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->stoneid(i), output);
  }

  // optional int64 endtime = 5;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->endtime(), output);
  }

  // optional int32 num = 6;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->num(), output);
  }

  // repeated int32 inlayPos = 7;
  for (int i = 0; i < this->inlaypos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->inlaypos(i), output);
  }

  // repeated uint32 refineAttrLv = 8;
  for (int i = 0; i < this->refineattrlv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->refineattrlv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  // repeated uint32 newattr = 3;
  for (int i = 0; i < this->newattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->newattr(i), target);
  }

  // repeated int32 stoneid = 4;
  for (int i = 0; i < this->stoneid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->stoneid(i), target);
  }

  // optional int64 endtime = 5;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->endtime(), target);
  }

  // optional int32 num = 6;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->num(), target);
  }

  // repeated int32 inlayPos = 7;
  for (int i = 0; i < this->inlaypos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->inlaypos(i), target);
  }

  // repeated uint32 refineAttrLv = 8;
  for (int i = 0; i < this->refineattrlv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->refineattrlv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional int64 endtime = 5;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 num = 6;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  // repeated uint32 newattr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->newattr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->newattr(i));
    }
    total_size += 1 * this->newattr_size() + data_size;
  }

  // repeated int32 stoneid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->stoneid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stoneid(i));
    }
    total_size += 1 * this->stoneid_size() + data_size;
  }

  // repeated int32 inlayPos = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->inlaypos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->inlaypos(i));
    }
    total_size += 1 * this->inlaypos_size() + data_size;
  }

  // repeated uint32 refineAttrLv = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->refineattrlv_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->refineattrlv(i));
    }
    total_size += 1 * this->refineattrlv_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ItemInfo::MergeFrom(const ItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  newattr_.MergeFrom(from.newattr_);
  stoneid_.MergeFrom(from.stoneid_);
  inlaypos_.MergeFrom(from.inlaypos_);
  refineattrlv_.MergeFrom(from.refineattrlv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ItemInfo::CopyFrom(const ItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ItemInfo::Swap(ItemInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(flag_, other->flag_);
    newattr_.Swap(&other->newattr_);
    stoneid_.Swap(&other->stoneid_);
    std::swap(endtime_, other->endtime_);
    std::swap(num_, other->num_);
    inlaypos_.Swap(&other->inlaypos_);
    refineattrlv_.Swap(&other->refineattrlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ItemInfo_descriptor_;
  metadata.reflection = ItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AttrValue::kIdFieldNumber;
const int AttrValue::kValueFieldNumber;
#endif  // !_MSC_VER

AttrValue::AttrValue()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AttrValue::InitAsDefaultInstance() {
}

AttrValue::AttrValue(const AttrValue& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AttrValue::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AttrValue::~AttrValue() {
  SharedDtor();
}

void AttrValue::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AttrValue::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AttrValue::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AttrValue_descriptor_;
}

const AttrValue& AttrValue::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

AttrValue* AttrValue::default_instance_ = NULL;

AttrValue* AttrValue::New() const {
  return new AttrValue;
}

void AttrValue::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AttrValue::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // required int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AttrValue::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AttrValue::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AttrValue::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AttrValue::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AttrValue* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AttrValue*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AttrValue::MergeFrom(const AttrValue& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AttrValue::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AttrValue::CopyFrom(const AttrValue& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AttrValue::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void AttrValue::Swap(AttrValue* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AttrValue::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AttrValue_descriptor_;
  metadata.reflection = AttrValue_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int QuickContainer::kTypeFieldNumber;
const int QuickContainer::kValueFieldNumber;
#endif  // !_MSC_VER

QuickContainer::QuickContainer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void QuickContainer::InitAsDefaultInstance() {
}

QuickContainer::QuickContainer(const QuickContainer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void QuickContainer::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

QuickContainer::~QuickContainer() {
  SharedDtor();
}

void QuickContainer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void QuickContainer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* QuickContainer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return QuickContainer_descriptor_;
}

const QuickContainer& QuickContainer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

QuickContainer* QuickContainer::default_instance_ = NULL;

QuickContainer* QuickContainer::New() const {
  return new QuickContainer;
}

void QuickContainer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool QuickContainer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void QuickContainer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* QuickContainer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int QuickContainer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void QuickContainer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const QuickContainer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const QuickContainer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void QuickContainer::MergeFrom(const QuickContainer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void QuickContainer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void QuickContainer::CopyFrom(const QuickContainer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool QuickContainer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void QuickContainer::Swap(QuickContainer* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata QuickContainer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = QuickContainer_descriptor_;
  metadata.reflection = QuickContainer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WPlayerInfo::kFriendlistFieldNumber;
#endif  // !_MSC_VER

WPlayerInfo::WPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WPlayerInfo::InitAsDefaultInstance() {
  friendlist_ = const_cast< ::PlayerInfo::FriendInfoList*>(&::PlayerInfo::FriendInfoList::default_instance());
}

WPlayerInfo::WPlayerInfo(const WPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  friendlist_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WPlayerInfo::~WPlayerInfo() {
  SharedDtor();
}

void WPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete friendlist_;
  }
}

void WPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WPlayerInfo_descriptor_;
}

const WPlayerInfo& WPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

WPlayerInfo* WPlayerInfo::default_instance_ = NULL;

WPlayerInfo* WPlayerInfo::New() const {
  return new WPlayerInfo;
}

void WPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_friendlist()) {
      if (friendlist_ != NULL) friendlist_->::PlayerInfo::FriendInfoList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerInfo.FriendInfoList friendlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_friendlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlayerInfo.FriendInfoList friendlist = 1;
  if (has_friendlist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendlist(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlayerInfo.FriendInfoList friendlist = 1;
  if (has_friendlist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendlist(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlayerInfo.FriendInfoList friendlist = 1;
    if (has_friendlist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->friendlist());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WPlayerInfo::MergeFrom(const WPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_friendlist()) {
      mutable_friendlist()->::PlayerInfo::FriendInfoList::MergeFrom(from.friendlist());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WPlayerInfo::CopyFrom(const WPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WPlayerInfo::IsInitialized() const {

  if (has_friendlist()) {
    if (!this->friendlist().IsInitialized()) return false;
  }
  return true;
}

void WPlayerInfo::Swap(WPlayerInfo* other) {
  if (other != this) {
    std::swap(friendlist_, other->friendlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WPlayerInfo_descriptor_;
  metadata.reflection = WPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendInfoList::kFriendsFieldNumber;
const int FriendInfoList::kInwhoFieldNumber;
const int FriendInfoList::kMReceiveCountsFieldNumber;
const int FriendInfoList::kMSendCountsFieldNumber;
const int FriendInfoList::kMResetTimeFieldNumber;
const int FriendInfoList::kMMarryIdFieldNumber;
const int FriendInfoList::kMInvitedFieldNumber;
#endif  // !_MSC_VER

FriendInfoList::FriendInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendInfoList::InitAsDefaultInstance() {
}

FriendInfoList::FriendInfoList(const FriendInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendInfoList::SharedCtor() {
  _cached_size_ = 0;
  m_receivecounts_ = 0;
  m_sendcounts_ = 0;
  m_resettime_ = GOOGLE_LONGLONG(0);
  m_marryid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfoList::~FriendInfoList() {
  SharedDtor();
}

void FriendInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FriendInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfoList_descriptor_;
}

const FriendInfoList& FriendInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

FriendInfoList* FriendInfoList::default_instance_ = NULL;

FriendInfoList* FriendInfoList::New() const {
  return new FriendInfoList;
}

void FriendInfoList::Clear() {
  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    m_receivecounts_ = 0;
    m_sendcounts_ = 0;
    m_resettime_ = GOOGLE_LONGLONG(0);
    m_marryid_ = GOOGLE_LONGLONG(0);
  }
  friends_.Clear();
  inwho_.Clear();
  m_invited_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.FriendInfo friends = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friends:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friends()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friends;
        if (input->ExpectTag(16)) goto parse_inwho;
        break;
      }

      // repeated int64 inwho = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inwho:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_inwho())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_inwho())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_inwho;
        if (input->ExpectTag(24)) goto parse_m_ReceiveCounts;
        break;
      }

      // optional int32 m_ReceiveCounts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ReceiveCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_receivecounts_)));
          set_has_m_receivecounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_SendCounts;
        break;
      }

      // optional int32 m_SendCounts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_SendCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_sendcounts_)));
          set_has_m_sendcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_m_ResetTime;
        break;
      }

      // optional int64 m_ResetTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_ResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_resettime_)));
          set_has_m_resettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_m_marryId;
        break;
      }

      // optional int64 m_marryId = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_marryId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &m_marryid_)));
          set_has_m_marryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_Invited;
        break;
      }

      // repeated int64 m_Invited = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_Invited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56, input, this->mutable_m_invited())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_m_invited())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_m_Invited;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.FriendInfo friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friends(i), output);
  }

  // repeated int64 inwho = 2;
  for (int i = 0; i < this->inwho_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->inwho(i), output);
  }

  // optional int32 m_ReceiveCounts = 3;
  if (has_m_receivecounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->m_receivecounts(), output);
  }

  // optional int32 m_SendCounts = 4;
  if (has_m_sendcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_sendcounts(), output);
  }

  // optional int64 m_ResetTime = 5;
  if (has_m_resettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->m_resettime(), output);
  }

  // optional int64 m_marryId = 6;
  if (has_m_marryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->m_marryid(), output);
  }

  // repeated int64 m_Invited = 7;
  for (int i = 0; i < this->m_invited_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->m_invited(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.FriendInfo friends = 1;
  for (int i = 0; i < this->friends_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friends(i), target);
  }

  // repeated int64 inwho = 2;
  for (int i = 0; i < this->inwho_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->inwho(i), target);
  }

  // optional int32 m_ReceiveCounts = 3;
  if (has_m_receivecounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->m_receivecounts(), target);
  }

  // optional int32 m_SendCounts = 4;
  if (has_m_sendcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_sendcounts(), target);
  }

  // optional int64 m_ResetTime = 5;
  if (has_m_resettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->m_resettime(), target);
  }

  // optional int64 m_marryId = 6;
  if (has_m_marryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->m_marryid(), target);
  }

  // repeated int64 m_Invited = 7;
  for (int i = 0; i < this->m_invited_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(7, this->m_invited(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    // optional int32 m_ReceiveCounts = 3;
    if (has_m_receivecounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_receivecounts());
    }

    // optional int32 m_SendCounts = 4;
    if (has_m_sendcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_sendcounts());
    }

    // optional int64 m_ResetTime = 5;
    if (has_m_resettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_resettime());
    }

    // optional int64 m_marryId = 6;
    if (has_m_marryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->m_marryid());
    }

  }
  // repeated .PlayerInfo.FriendInfo friends = 1;
  total_size += 1 * this->friends_size();
  for (int i = 0; i < this->friends_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friends(i));
  }

  // repeated int64 inwho = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->inwho_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->inwho(i));
    }
    total_size += 1 * this->inwho_size() + data_size;
  }

  // repeated int64 m_Invited = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->m_invited_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->m_invited(i));
    }
    total_size += 1 * this->m_invited_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendInfoList::MergeFrom(const FriendInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  friends_.MergeFrom(from.friends_);
  inwho_.MergeFrom(from.inwho_);
  m_invited_.MergeFrom(from.m_invited_);
  if (from._has_bits_[2 / 32] & (0xffu << (2 % 32))) {
    if (from.has_m_receivecounts()) {
      set_m_receivecounts(from.m_receivecounts());
    }
    if (from.has_m_sendcounts()) {
      set_m_sendcounts(from.m_sendcounts());
    }
    if (from.has_m_resettime()) {
      set_m_resettime(from.m_resettime());
    }
    if (from.has_m_marryid()) {
      set_m_marryid(from.m_marryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfoList::CopyFrom(const FriendInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfoList::IsInitialized() const {

  for (int i = 0; i < friends_size(); i++) {
    if (!this->friends(i).IsInitialized()) return false;
  }
  return true;
}

void FriendInfoList::Swap(FriendInfoList* other) {
  if (other != this) {
    friends_.Swap(&other->friends_);
    inwho_.Swap(&other->inwho_);
    std::swap(m_receivecounts_, other->m_receivecounts_);
    std::swap(m_sendcounts_, other->m_sendcounts_);
    std::swap(m_resettime_, other->m_resettime_);
    std::swap(m_marryid_, other->m_marryid_);
    m_invited_.Swap(&other->m_invited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfoList_descriptor_;
  metadata.reflection = FriendInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FriendInfo::kTypeFieldNumber;
const int FriendInfo::kCharidFieldNumber;
const int FriendInfo::kFriendnameFieldNumber;
const int FriendInfo::kLvFieldNumber;
const int FriendInfo::kProfessionFieldNumber;
const int FriendInfo::kHatredFieldNumber;
const int FriendInfo::kCohesionFieldNumber;
const int FriendInfo::kVipLevelFieldNumber;
const int FriendInfo::kFightingFieldNumber;
const int FriendInfo::kSexFieldNumber;
#endif  // !_MSC_VER

FriendInfo::FriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FriendInfo::InitAsDefaultInstance() {
}

FriendInfo::FriendInfo(const FriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FriendInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  friendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  profession_ = 0;
  hatred_ = 0;
  cohesion_ = 0;
  viplevel_ = 0;
  fighting_ = 0;
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FriendInfo::~FriendInfo() {
  SharedDtor();
}

void FriendInfo::SharedDtor() {
  if (friendname_ != &::google::protobuf::internal::kEmptyString) {
    delete friendname_;
  }
  if (this != default_instance_) {
  }
}

void FriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FriendInfo_descriptor_;
}

const FriendInfo& FriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

FriendInfo* FriendInfo::default_instance_ = NULL;

FriendInfo* FriendInfo::New() const {
  return new FriendInfo;
}

void FriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    if (has_friendname()) {
      if (friendname_ != &::google::protobuf::internal::kEmptyString) {
        friendname_->clear();
      }
    }
    lv_ = 0;
    profession_ = 0;
    hatred_ = 0;
    cohesion_ = 0;
    viplevel_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    fighting_ = 0;
    sex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // required int64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_friendname;
        break;
      }

      // required string friendname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_friendname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->friendname().data(), this->friendname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // required int32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_profession;
        break;
      }

      // optional int32 profession = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hatred;
        break;
      }

      // optional int32 hatred = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hatred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hatred_)));
          set_has_hatred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_cohesion;
        break;
      }

      // optional int32 cohesion = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cohesion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cohesion_)));
          set_has_cohesion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_fighting;
        break;
      }

      // optional int32 fighting = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighting_)));
          set_has_fighting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_sex;
        break;
      }

      // optional int32 sex = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  // required string friendname = 3;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->friendname(), output);
  }

  // required int32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lv(), output);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->profession(), output);
  }

  // optional int32 hatred = 6;
  if (has_hatred()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hatred(), output);
  }

  // optional int32 cohesion = 7;
  if (has_cohesion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->cohesion(), output);
  }

  // optional int32 vipLevel = 8;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->viplevel(), output);
  }

  // optional int32 fighting = 9;
  if (has_fighting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->fighting(), output);
  }

  // optional int32 sex = 10;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  // required string friendname = 3;
  if (has_friendname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->friendname().data(), this->friendname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->friendname(), target);
  }

  // required int32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lv(), target);
  }

  // optional int32 profession = 5;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->profession(), target);
  }

  // optional int32 hatred = 6;
  if (has_hatred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hatred(), target);
  }

  // optional int32 cohesion = 7;
  if (has_cohesion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->cohesion(), target);
  }

  // optional int32 vipLevel = 8;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->viplevel(), target);
  }

  // optional int32 fighting = 9;
  if (has_fighting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->fighting(), target);
  }

  // optional int32 sex = 10;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required string friendname = 3;
    if (has_friendname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->friendname());
    }

    // required int32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 profession = 5;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 hatred = 6;
    if (has_hatred()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hatred());
    }

    // optional int32 cohesion = 7;
    if (has_cohesion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cohesion());
    }

    // optional int32 vipLevel = 8;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 fighting = 9;
    if (has_fighting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighting());
    }

    // optional int32 sex = 10;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FriendInfo::MergeFrom(const FriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_friendname()) {
      set_friendname(from.friendname());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_hatred()) {
      set_hatred(from.hatred());
    }
    if (from.has_cohesion()) {
      set_cohesion(from.cohesion());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fighting()) {
      set_fighting(from.fighting());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FriendInfo::CopyFrom(const FriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FriendInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void FriendInfo::Swap(FriendInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(charid_, other->charid_);
    std::swap(friendname_, other->friendname_);
    std::swap(lv_, other->lv_);
    std::swap(profession_, other->profession_);
    std::swap(hatred_, other->hatred_);
    std::swap(cohesion_, other->cohesion_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(fighting_, other->fighting_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FriendInfo_descriptor_;
  metadata.reflection = FriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceInfoList::kDiffcultyInfoFieldNumber;
const int InstanceInfoList::kVipInfoFieldNumber;
const int InstanceInfoList::kExpInfoFieldNumber;
const int InstanceInfoList::kMoneyInfoFieldNumber;
#endif  // !_MSC_VER

InstanceInfoList::InstanceInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceInfoList::InitAsDefaultInstance() {
}

InstanceInfoList::InstanceInfoList(const InstanceInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceInfoList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceInfoList::~InstanceInfoList() {
  SharedDtor();
}

void InstanceInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceInfoList_descriptor_;
}

const InstanceInfoList& InstanceInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

InstanceInfoList* InstanceInfoList::default_instance_ = NULL;

InstanceInfoList* InstanceInfoList::New() const {
  return new InstanceInfoList;
}

void InstanceInfoList::Clear() {
  diffcultyinfo_.Clear();
  vipinfo_.Clear();
  expinfo_.Clear();
  moneyinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.InstanceDiffculty diffcultyInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_diffcultyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_diffcultyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_diffcultyInfo;
        if (input->ExpectTag(18)) goto parse_vipInfo;
        break;
      }

      // repeated .PlayerInfo.InstanceVip vipInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_vipInfo;
        if (input->ExpectTag(26)) goto parse_expInfo;
        break;
      }

      // repeated .PlayerInfo.InstanceDiffculty expInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_expInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_expinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_expInfo;
        if (input->ExpectTag(34)) goto parse_moneyInfo;
        break;
      }

      // repeated .PlayerInfo.InstanceDiffculty moneyInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_moneyInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_moneyinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_moneyInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.InstanceDiffculty diffcultyInfo = 1;
  for (int i = 0; i < this->diffcultyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->diffcultyinfo(i), output);
  }

  // repeated .PlayerInfo.InstanceVip vipInfo = 2;
  for (int i = 0; i < this->vipinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->vipinfo(i), output);
  }

  // repeated .PlayerInfo.InstanceDiffculty expInfo = 3;
  for (int i = 0; i < this->expinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->expinfo(i), output);
  }

  // repeated .PlayerInfo.InstanceDiffculty moneyInfo = 4;
  for (int i = 0; i < this->moneyinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->moneyinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.InstanceDiffculty diffcultyInfo = 1;
  for (int i = 0; i < this->diffcultyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->diffcultyinfo(i), target);
  }

  // repeated .PlayerInfo.InstanceVip vipInfo = 2;
  for (int i = 0; i < this->vipinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->vipinfo(i), target);
  }

  // repeated .PlayerInfo.InstanceDiffculty expInfo = 3;
  for (int i = 0; i < this->expinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->expinfo(i), target);
  }

  // repeated .PlayerInfo.InstanceDiffculty moneyInfo = 4;
  for (int i = 0; i < this->moneyinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->moneyinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceInfoList::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerInfo.InstanceDiffculty diffcultyInfo = 1;
  total_size += 1 * this->diffcultyinfo_size();
  for (int i = 0; i < this->diffcultyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->diffcultyinfo(i));
  }

  // repeated .PlayerInfo.InstanceVip vipInfo = 2;
  total_size += 1 * this->vipinfo_size();
  for (int i = 0; i < this->vipinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipinfo(i));
  }

  // repeated .PlayerInfo.InstanceDiffculty expInfo = 3;
  total_size += 1 * this->expinfo_size();
  for (int i = 0; i < this->expinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->expinfo(i));
  }

  // repeated .PlayerInfo.InstanceDiffculty moneyInfo = 4;
  total_size += 1 * this->moneyinfo_size();
  for (int i = 0; i < this->moneyinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->moneyinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceInfoList::MergeFrom(const InstanceInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  diffcultyinfo_.MergeFrom(from.diffcultyinfo_);
  vipinfo_.MergeFrom(from.vipinfo_);
  expinfo_.MergeFrom(from.expinfo_);
  moneyinfo_.MergeFrom(from.moneyinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceInfoList::CopyFrom(const InstanceInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceInfoList::IsInitialized() const {

  for (int i = 0; i < diffcultyinfo_size(); i++) {
    if (!this->diffcultyinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < vipinfo_size(); i++) {
    if (!this->vipinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < expinfo_size(); i++) {
    if (!this->expinfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < moneyinfo_size(); i++) {
    if (!this->moneyinfo(i).IsInitialized()) return false;
  }
  return true;
}

void InstanceInfoList::Swap(InstanceInfoList* other) {
  if (other != this) {
    diffcultyinfo_.Swap(&other->diffcultyinfo_);
    vipinfo_.Swap(&other->vipinfo_);
    expinfo_.Swap(&other->expinfo_);
    moneyinfo_.Swap(&other->moneyinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceInfoList_descriptor_;
  metadata.reflection = InstanceInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceDiffculty::kMapIdFieldNumber;
const int InstanceDiffculty::kPassFieldNumber;
const int InstanceDiffculty::kNumFieldNumber;
const int InstanceDiffculty::kTimeFieldNumber;
const int InstanceDiffculty::kResetFieldNumber;
#endif  // !_MSC_VER

InstanceDiffculty::InstanceDiffculty()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceDiffculty::InitAsDefaultInstance() {
}

InstanceDiffculty::InstanceDiffculty(const InstanceDiffculty& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceDiffculty::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pass_ = 0;
  num_ = 0;
  time_ = 0;
  reset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceDiffculty::~InstanceDiffculty() {
  SharedDtor();
}

void InstanceDiffculty::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceDiffculty::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceDiffculty::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceDiffculty_descriptor_;
}

const InstanceDiffculty& InstanceDiffculty::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

InstanceDiffculty* InstanceDiffculty::default_instance_ = NULL;

InstanceDiffculty* InstanceDiffculty::New() const {
  return new InstanceDiffculty;
}

void InstanceDiffculty::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    pass_ = 0;
    num_ = 0;
    time_ = 0;
    reset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceDiffculty::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }

      // optional int32 pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reset;
        break;
      }

      // optional int32 reset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceDiffculty::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  // optional int32 reset = 5;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceDiffculty::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  // optional int32 reset = 5;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceDiffculty::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 reset = 5;
    if (has_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceDiffculty::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceDiffculty* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceDiffculty*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceDiffculty::MergeFrom(const InstanceDiffculty& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceDiffculty::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceDiffculty::CopyFrom(const InstanceDiffculty& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceDiffculty::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstanceDiffculty::Swap(InstanceDiffculty* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pass_, other->pass_);
    std::swap(num_, other->num_);
    std::swap(time_, other->time_);
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceDiffculty::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceDiffculty_descriptor_;
  metadata.reflection = InstanceDiffculty_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceVip::kMapIdFieldNumber;
const int InstanceVip::kPassFieldNumber;
const int InstanceVip::kNumFieldNumber;
const int InstanceVip::kTimeFieldNumber;
#endif  // !_MSC_VER

InstanceVip::InstanceVip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceVip::InitAsDefaultInstance() {
}

InstanceVip::InstanceVip(const InstanceVip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceVip::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pass_ = 0;
  num_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceVip::~InstanceVip() {
  SharedDtor();
}

void InstanceVip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceVip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceVip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceVip_descriptor_;
}

const InstanceVip& InstanceVip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

InstanceVip* InstanceVip::default_instance_ = NULL;

InstanceVip* InstanceVip::New() const {
  return new InstanceVip;
}

void InstanceVip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    pass_ = 0;
    num_ = 0;
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceVip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }

      // optional int32 pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int64 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceVip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int64 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceVip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int64 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceVip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceVip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceVip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceVip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceVip::MergeFrom(const InstanceVip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceVip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceVip::CopyFrom(const InstanceVip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceVip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstanceVip::Swap(InstanceVip* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pass_, other->pass_);
    std::swap(num_, other->num_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceVip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceVip_descriptor_;
  metadata.reflection = InstanceVip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceInfoTwoDays::kTodayinfoFieldNumber;
const int InstanceInfoTwoDays::kYesterdayinfoFieldNumber;
#endif  // !_MSC_VER

InstanceInfoTwoDays::InstanceInfoTwoDays()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceInfoTwoDays::InitAsDefaultInstance() {
  todayinfo_ = const_cast< ::PlayerInfo::InstanceInfoList*>(&::PlayerInfo::InstanceInfoList::default_instance());
  yesterdayinfo_ = const_cast< ::PlayerInfo::InstanceInfoList*>(&::PlayerInfo::InstanceInfoList::default_instance());
}

InstanceInfoTwoDays::InstanceInfoTwoDays(const InstanceInfoTwoDays& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceInfoTwoDays::SharedCtor() {
  _cached_size_ = 0;
  todayinfo_ = NULL;
  yesterdayinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceInfoTwoDays::~InstanceInfoTwoDays() {
  SharedDtor();
}

void InstanceInfoTwoDays::SharedDtor() {
  if (this != default_instance_) {
    delete todayinfo_;
    delete yesterdayinfo_;
  }
}

void InstanceInfoTwoDays::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceInfoTwoDays::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceInfoTwoDays_descriptor_;
}

const InstanceInfoTwoDays& InstanceInfoTwoDays::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

InstanceInfoTwoDays* InstanceInfoTwoDays::default_instance_ = NULL;

InstanceInfoTwoDays* InstanceInfoTwoDays::New() const {
  return new InstanceInfoTwoDays;
}

void InstanceInfoTwoDays::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_todayinfo()) {
      if (todayinfo_ != NULL) todayinfo_->::PlayerInfo::InstanceInfoList::Clear();
    }
    if (has_yesterdayinfo()) {
      if (yesterdayinfo_ != NULL) yesterdayinfo_->::PlayerInfo::InstanceInfoList::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceInfoTwoDays::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerInfo.InstanceInfoList todayinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_todayinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_yesterdayinfo;
        break;
      }

      // optional .PlayerInfo.InstanceInfoList yesterdayinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yesterdayinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yesterdayinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceInfoTwoDays::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlayerInfo.InstanceInfoList todayinfo = 1;
  if (has_todayinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->todayinfo(), output);
  }

  // optional .PlayerInfo.InstanceInfoList yesterdayinfo = 2;
  if (has_yesterdayinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->yesterdayinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceInfoTwoDays::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlayerInfo.InstanceInfoList todayinfo = 1;
  if (has_todayinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->todayinfo(), target);
  }

  // optional .PlayerInfo.InstanceInfoList yesterdayinfo = 2;
  if (has_yesterdayinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->yesterdayinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceInfoTwoDays::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlayerInfo.InstanceInfoList todayinfo = 1;
    if (has_todayinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->todayinfo());
    }

    // optional .PlayerInfo.InstanceInfoList yesterdayinfo = 2;
    if (has_yesterdayinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yesterdayinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceInfoTwoDays::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceInfoTwoDays* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceInfoTwoDays*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceInfoTwoDays::MergeFrom(const InstanceInfoTwoDays& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_todayinfo()) {
      mutable_todayinfo()->::PlayerInfo::InstanceInfoList::MergeFrom(from.todayinfo());
    }
    if (from.has_yesterdayinfo()) {
      mutable_yesterdayinfo()->::PlayerInfo::InstanceInfoList::MergeFrom(from.yesterdayinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceInfoTwoDays::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceInfoTwoDays::CopyFrom(const InstanceInfoTwoDays& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceInfoTwoDays::IsInitialized() const {

  if (has_todayinfo()) {
    if (!this->todayinfo().IsInitialized()) return false;
  }
  if (has_yesterdayinfo()) {
    if (!this->yesterdayinfo().IsInitialized()) return false;
  }
  return true;
}

void InstanceInfoTwoDays::Swap(InstanceInfoTwoDays* other) {
  if (other != this) {
    std::swap(todayinfo_, other->todayinfo_);
    std::swap(yesterdayinfo_, other->yesterdayinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceInfoTwoDays::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceInfoTwoDays_descriptor_;
  metadata.reflection = InstanceInfoTwoDays_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrestigeInfoList::kInfoFieldNumber;
const int PrestigeInfoList::kShopFieldNumber;
#endif  // !_MSC_VER

PrestigeInfoList::PrestigeInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrestigeInfoList::InitAsDefaultInstance() {
  info_ = const_cast< ::PlayerInfo::PrestigeInfo*>(&::PlayerInfo::PrestigeInfo::default_instance());
  shop_ = const_cast< ::PlayerInfo::DBAchShopInfo*>(&::PlayerInfo::DBAchShopInfo::default_instance());
}

PrestigeInfoList::PrestigeInfoList(const PrestigeInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrestigeInfoList::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  shop_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrestigeInfoList::~PrestigeInfoList() {
  SharedDtor();
}

void PrestigeInfoList::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
    delete shop_;
  }
}

void PrestigeInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrestigeInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrestigeInfoList_descriptor_;
}

const PrestigeInfoList& PrestigeInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

PrestigeInfoList* PrestigeInfoList::default_instance_ = NULL;

PrestigeInfoList* PrestigeInfoList::New() const {
  return new PrestigeInfoList;
}

void PrestigeInfoList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerInfo::PrestigeInfo::Clear();
    }
    if (has_shop()) {
      if (shop_ != NULL) shop_->::PlayerInfo::DBAchShopInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrestigeInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerInfo.PrestigeInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_shop;
        break;
      }

      // optional .PlayerInfo.DBAchShopInfo shop = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_shop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_shop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrestigeInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlayerInfo.PrestigeInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  // optional .PlayerInfo.DBAchShopInfo shop = 2;
  if (has_shop()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->shop(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrestigeInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlayerInfo.PrestigeInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  // optional .PlayerInfo.DBAchShopInfo shop = 2;
  if (has_shop()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->shop(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrestigeInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlayerInfo.PrestigeInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

    // optional .PlayerInfo.DBAchShopInfo shop = 2;
    if (has_shop()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->shop());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrestigeInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrestigeInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrestigeInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrestigeInfoList::MergeFrom(const PrestigeInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::PlayerInfo::PrestigeInfo::MergeFrom(from.info());
    }
    if (from.has_shop()) {
      mutable_shop()->::PlayerInfo::DBAchShopInfo::MergeFrom(from.shop());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrestigeInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrestigeInfoList::CopyFrom(const PrestigeInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrestigeInfoList::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  if (has_shop()) {
    if (!this->shop().IsInitialized()) return false;
  }
  return true;
}

void PrestigeInfoList::Swap(PrestigeInfoList* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(shop_, other->shop_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrestigeInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrestigeInfoList_descriptor_;
  metadata.reflection = PrestigeInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrestigeInfo::kPrestigeinfosFieldNumber;
#endif  // !_MSC_VER

PrestigeInfo::PrestigeInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrestigeInfo::InitAsDefaultInstance() {
}

PrestigeInfo::PrestigeInfo(const PrestigeInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrestigeInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrestigeInfo::~PrestigeInfo() {
  SharedDtor();
}

void PrestigeInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrestigeInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrestigeInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrestigeInfo_descriptor_;
}

const PrestigeInfo& PrestigeInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

PrestigeInfo* PrestigeInfo::default_instance_ = NULL;

PrestigeInfo* PrestigeInfo::New() const {
  return new PrestigeInfo;
}

void PrestigeInfo::Clear() {
  prestigeinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrestigeInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.PrestigeContent prestigeinfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prestigeinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prestigeinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_prestigeinfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrestigeInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.PrestigeContent prestigeinfos = 1;
  for (int i = 0; i < this->prestigeinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prestigeinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrestigeInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.PrestigeContent prestigeinfos = 1;
  for (int i = 0; i < this->prestigeinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prestigeinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrestigeInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerInfo.PrestigeContent prestigeinfos = 1;
  total_size += 1 * this->prestigeinfos_size();
  for (int i = 0; i < this->prestigeinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prestigeinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrestigeInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrestigeInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrestigeInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrestigeInfo::MergeFrom(const PrestigeInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  prestigeinfos_.MergeFrom(from.prestigeinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrestigeInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrestigeInfo::CopyFrom(const PrestigeInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrestigeInfo::IsInitialized() const {

  for (int i = 0; i < prestigeinfos_size(); i++) {
    if (!this->prestigeinfos(i).IsInitialized()) return false;
  }
  return true;
}

void PrestigeInfo::Swap(PrestigeInfo* other) {
  if (other != this) {
    prestigeinfos_.Swap(&other->prestigeinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrestigeInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrestigeInfo_descriptor_;
  metadata.reflection = PrestigeInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PrestigeContent::kPrestigeTypeFieldNumber;
const int PrestigeContent::kPrestigeIDFieldNumber;
const int PrestigeContent::kNumFieldNumber;
const int PrestigeContent::kIsCompleteFieldNumber;
const int PrestigeContent::kHadGetFieldNumber;
#endif  // !_MSC_VER

PrestigeContent::PrestigeContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PrestigeContent::InitAsDefaultInstance() {
}

PrestigeContent::PrestigeContent(const PrestigeContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PrestigeContent::SharedCtor() {
  _cached_size_ = 0;
  prestigetype_ = 0;
  prestigeid_ = 0;
  num_ = 0;
  iscomplete_ = 0;
  hadget_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PrestigeContent::~PrestigeContent() {
  SharedDtor();
}

void PrestigeContent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PrestigeContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PrestigeContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PrestigeContent_descriptor_;
}

const PrestigeContent& PrestigeContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

PrestigeContent* PrestigeContent::default_instance_ = NULL;

PrestigeContent* PrestigeContent::New() const {
  return new PrestigeContent;
}

void PrestigeContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    prestigetype_ = 0;
    prestigeid_ = 0;
    num_ = 0;
    iscomplete_ = 0;
    hadget_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PrestigeContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 prestigeType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prestigetype_)));
          set_has_prestigetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_prestigeID;
        break;
      }

      // required int32 prestigeID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestigeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prestigeid_)));
          set_has_prestigeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isComplete;
        break;
      }

      // required int32 isComplete = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isComplete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscomplete_)));
          set_has_iscomplete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hadGet;
        break;
      }

      // required int32 hadGet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hadGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hadget_)));
          set_has_hadget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PrestigeContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 prestigeType = 1;
  if (has_prestigetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->prestigetype(), output);
  }

  // required int32 prestigeID = 2;
  if (has_prestigeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->prestigeid(), output);
  }

  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // required int32 isComplete = 4;
  if (has_iscomplete()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iscomplete(), output);
  }

  // required int32 hadGet = 5;
  if (has_hadget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hadget(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PrestigeContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 prestigeType = 1;
  if (has_prestigetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->prestigetype(), target);
  }

  // required int32 prestigeID = 2;
  if (has_prestigeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->prestigeid(), target);
  }

  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // required int32 isComplete = 4;
  if (has_iscomplete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iscomplete(), target);
  }

  // required int32 hadGet = 5;
  if (has_hadget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hadget(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PrestigeContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 prestigeType = 1;
    if (has_prestigetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prestigetype());
    }

    // required int32 prestigeID = 2;
    if (has_prestigeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prestigeid());
    }

    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // required int32 isComplete = 4;
    if (has_iscomplete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscomplete());
    }

    // required int32 hadGet = 5;
    if (has_hadget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hadget());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PrestigeContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PrestigeContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PrestigeContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PrestigeContent::MergeFrom(const PrestigeContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_prestigetype()) {
      set_prestigetype(from.prestigetype());
    }
    if (from.has_prestigeid()) {
      set_prestigeid(from.prestigeid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_iscomplete()) {
      set_iscomplete(from.iscomplete());
    }
    if (from.has_hadget()) {
      set_hadget(from.hadget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PrestigeContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PrestigeContent::CopyFrom(const PrestigeContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PrestigeContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000001f) != 0x0000001f) return false;

  return true;
}

void PrestigeContent::Swap(PrestigeContent* other) {
  if (other != this) {
    std::swap(prestigetype_, other->prestigetype_);
    std::swap(prestigeid_, other->prestigeid_);
    std::swap(num_, other->num_);
    std::swap(iscomplete_, other->iscomplete_);
    std::swap(hadget_, other->hadget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PrestigeContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PrestigeContent_descriptor_;
  metadata.reflection = PrestigeContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleInfoList::kInfoFieldNumber;
#endif  // !_MSC_VER

TitleInfoList::TitleInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleInfoList::InitAsDefaultInstance() {
  info_ = const_cast< ::PlayerInfo::TitleInfo*>(&::PlayerInfo::TitleInfo::default_instance());
}

TitleInfoList::TitleInfoList(const TitleInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleInfoList::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleInfoList::~TitleInfoList() {
  SharedDtor();
}

void TitleInfoList::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void TitleInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleInfoList_descriptor_;
}

const TitleInfoList& TitleInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

TitleInfoList* TitleInfoList::default_instance_ = NULL;

TitleInfoList* TitleInfoList::New() const {
  return new TitleInfoList;
}

void TitleInfoList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerInfo::TitleInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerInfo.TitleInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlayerInfo.TitleInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlayerInfo.TitleInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlayerInfo.TitleInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleInfoList::MergeFrom(const TitleInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::PlayerInfo::TitleInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleInfoList::CopyFrom(const TitleInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleInfoList::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void TitleInfoList::Swap(TitleInfoList* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleInfoList_descriptor_;
  metadata.reflection = TitleInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleInfo::kTitleinfoFieldNumber;
#endif  // !_MSC_VER

TitleInfo::TitleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleInfo::InitAsDefaultInstance() {
}

TitleInfo::TitleInfo(const TitleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleInfo::~TitleInfo() {
  SharedDtor();
}

void TitleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleInfo_descriptor_;
}

const TitleInfo& TitleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

TitleInfo* TitleInfo::default_instance_ = NULL;

TitleInfo* TitleInfo::New() const {
  return new TitleInfo;
}

void TitleInfo::Clear() {
  titleinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.TitleStatus titleinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_titleinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_titleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_titleinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.TitleStatus titleinfo = 1;
  for (int i = 0; i < this->titleinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->titleinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.TitleStatus titleinfo = 1;
  for (int i = 0; i < this->titleinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->titleinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerInfo.TitleStatus titleinfo = 1;
  total_size += 1 * this->titleinfo_size();
  for (int i = 0; i < this->titleinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->titleinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleInfo::MergeFrom(const TitleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  titleinfo_.MergeFrom(from.titleinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleInfo::CopyFrom(const TitleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleInfo::IsInitialized() const {

  for (int i = 0; i < titleinfo_size(); i++) {
    if (!this->titleinfo(i).IsInitialized()) return false;
  }
  return true;
}

void TitleInfo::Swap(TitleInfo* other) {
  if (other != this) {
    titleinfo_.Swap(&other->titleinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleInfo_descriptor_;
  metadata.reflection = TitleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TitleStatus::kTitleIdFieldNumber;
const int TitleStatus::kTitleStatusFieldNumber;
const int TitleStatus::kTitleActiveFieldNumber;
#endif  // !_MSC_VER

TitleStatus::TitleStatus()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TitleStatus::InitAsDefaultInstance() {
}

TitleStatus::TitleStatus(const TitleStatus& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TitleStatus::SharedCtor() {
  _cached_size_ = 0;
  titleid_ = 0;
  titlestatus_ = 0;
  titleactive_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TitleStatus::~TitleStatus() {
  SharedDtor();
}

void TitleStatus::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TitleStatus::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TitleStatus::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TitleStatus_descriptor_;
}

const TitleStatus& TitleStatus::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

TitleStatus* TitleStatus::default_instance_ = NULL;

TitleStatus* TitleStatus::New() const {
  return new TitleStatus;
}

void TitleStatus::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    titleid_ = 0;
    titlestatus_ = 0;
    titleactive_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TitleStatus::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 titleId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_titleStatus;
        break;
      }

      // required int32 titleStatus = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleStatus:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titlestatus_)));
          set_has_titlestatus();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_titleActive;
        break;
      }

      // required int32 titleActive = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleActive:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleactive_)));
          set_has_titleactive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TitleStatus::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 titleId = 1;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->titleid(), output);
  }

  // required int32 titleStatus = 2;
  if (has_titlestatus()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->titlestatus(), output);
  }

  // required int32 titleActive = 3;
  if (has_titleactive()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->titleactive(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TitleStatus::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 titleId = 1;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->titleid(), target);
  }

  // required int32 titleStatus = 2;
  if (has_titlestatus()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->titlestatus(), target);
  }

  // required int32 titleActive = 3;
  if (has_titleactive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->titleactive(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TitleStatus::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 titleId = 1;
    if (has_titleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // required int32 titleStatus = 2;
    if (has_titlestatus()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titlestatus());
    }

    // required int32 titleActive = 3;
    if (has_titleactive()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleactive());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TitleStatus::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TitleStatus* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TitleStatus*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TitleStatus::MergeFrom(const TitleStatus& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_titlestatus()) {
      set_titlestatus(from.titlestatus());
    }
    if (from.has_titleactive()) {
      set_titleactive(from.titleactive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TitleStatus::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TitleStatus::CopyFrom(const TitleStatus& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TitleStatus::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void TitleStatus::Swap(TitleStatus* other) {
  if (other != this) {
    std::swap(titleid_, other->titleid_);
    std::swap(titlestatus_, other->titlestatus_);
    std::swap(titleactive_, other->titleactive_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TitleStatus::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TitleStatus_descriptor_;
  metadata.reflection = TitleStatus_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DestinationInfoList::kInfoFieldNumber;
#endif  // !_MSC_VER

DestinationInfoList::DestinationInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DestinationInfoList::InitAsDefaultInstance() {
  info_ = const_cast< ::PlayerInfo::DestinationInfo*>(&::PlayerInfo::DestinationInfo::default_instance());
}

DestinationInfoList::DestinationInfoList(const DestinationInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DestinationInfoList::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestinationInfoList::~DestinationInfoList() {
  SharedDtor();
}

void DestinationInfoList::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void DestinationInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestinationInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestinationInfoList_descriptor_;
}

const DestinationInfoList& DestinationInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

DestinationInfoList* DestinationInfoList::default_instance_ = NULL;

DestinationInfoList* DestinationInfoList::New() const {
  return new DestinationInfoList;
}

void DestinationInfoList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerInfo::DestinationInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DestinationInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerInfo.DestinationInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DestinationInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlayerInfo.DestinationInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DestinationInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlayerInfo.DestinationInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DestinationInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlayerInfo.DestinationInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestinationInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DestinationInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DestinationInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestinationInfoList::MergeFrom(const DestinationInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::PlayerInfo::DestinationInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DestinationInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestinationInfoList::CopyFrom(const DestinationInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestinationInfoList::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void DestinationInfoList::Swap(DestinationInfoList* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DestinationInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestinationInfoList_descriptor_;
  metadata.reflection = DestinationInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DestinationInfo::kDestinationinfosFieldNumber;
#endif  // !_MSC_VER

DestinationInfo::DestinationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DestinationInfo::InitAsDefaultInstance() {
}

DestinationInfo::DestinationInfo(const DestinationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DestinationInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestinationInfo::~DestinationInfo() {
  SharedDtor();
}

void DestinationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestinationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestinationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestinationInfo_descriptor_;
}

const DestinationInfo& DestinationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

DestinationInfo* DestinationInfo::default_instance_ = NULL;

DestinationInfo* DestinationInfo::New() const {
  return new DestinationInfo;
}

void DestinationInfo::Clear() {
  destinationinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DestinationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.DestinationContent destinationinfos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_destinationinfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_destinationinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_destinationinfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DestinationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.DestinationContent destinationinfos = 1;
  for (int i = 0; i < this->destinationinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->destinationinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DestinationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.DestinationContent destinationinfos = 1;
  for (int i = 0; i < this->destinationinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->destinationinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DestinationInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerInfo.DestinationContent destinationinfos = 1;
  total_size += 1 * this->destinationinfos_size();
  for (int i = 0; i < this->destinationinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->destinationinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestinationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DestinationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DestinationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestinationInfo::MergeFrom(const DestinationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  destinationinfos_.MergeFrom(from.destinationinfos_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DestinationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestinationInfo::CopyFrom(const DestinationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestinationInfo::IsInitialized() const {

  for (int i = 0; i < destinationinfos_size(); i++) {
    if (!this->destinationinfos(i).IsInitialized()) return false;
  }
  return true;
}

void DestinationInfo::Swap(DestinationInfo* other) {
  if (other != this) {
    destinationinfos_.Swap(&other->destinationinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DestinationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestinationInfo_descriptor_;
  metadata.reflection = DestinationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DestinationContent::kDestinationIDFieldNumber;
const int DestinationContent::kDestinationTypeFieldNumber;
const int DestinationContent::kNumFieldNumber;
const int DestinationContent::kIsCompleteFieldNumber;
const int DestinationContent::kHadGetFieldNumber;
#endif  // !_MSC_VER

DestinationContent::DestinationContent()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DestinationContent::InitAsDefaultInstance() {
}

DestinationContent::DestinationContent(const DestinationContent& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DestinationContent::SharedCtor() {
  _cached_size_ = 0;
  destinationid_ = 0;
  destinationtype_ = 0;
  num_ = 0;
  iscomplete_ = 0;
  hadget_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DestinationContent::~DestinationContent() {
  SharedDtor();
}

void DestinationContent::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DestinationContent::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DestinationContent::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DestinationContent_descriptor_;
}

const DestinationContent& DestinationContent::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

DestinationContent* DestinationContent::default_instance_ = NULL;

DestinationContent* DestinationContent::New() const {
  return new DestinationContent;
}

void DestinationContent::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    destinationid_ = 0;
    destinationtype_ = 0;
    num_ = 0;
    iscomplete_ = 0;
    hadget_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DestinationContent::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 destinationID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destinationid_)));
          set_has_destinationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_destinationType;
        break;
      }

      // optional int32 destinationType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destinationType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destinationtype_)));
          set_has_destinationtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isComplete;
        break;
      }

      // optional int32 isComplete = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isComplete:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscomplete_)));
          set_has_iscomplete();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hadGet;
        break;
      }

      // optional int32 hadGet = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hadGet:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hadget_)));
          set_has_hadget();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DestinationContent::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 destinationID = 1;
  if (has_destinationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->destinationid(), output);
  }

  // optional int32 destinationType = 2;
  if (has_destinationtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->destinationtype(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 isComplete = 4;
  if (has_iscomplete()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->iscomplete(), output);
  }

  // optional int32 hadGet = 5;
  if (has_hadget()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hadget(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DestinationContent::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 destinationID = 1;
  if (has_destinationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->destinationid(), target);
  }

  // optional int32 destinationType = 2;
  if (has_destinationtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->destinationtype(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 isComplete = 4;
  if (has_iscomplete()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->iscomplete(), target);
  }

  // optional int32 hadGet = 5;
  if (has_hadget()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hadget(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DestinationContent::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 destinationID = 1;
    if (has_destinationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destinationid());
    }

    // optional int32 destinationType = 2;
    if (has_destinationtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destinationtype());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 isComplete = 4;
    if (has_iscomplete()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscomplete());
    }

    // optional int32 hadGet = 5;
    if (has_hadget()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hadget());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DestinationContent::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DestinationContent* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DestinationContent*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DestinationContent::MergeFrom(const DestinationContent& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destinationid()) {
      set_destinationid(from.destinationid());
    }
    if (from.has_destinationtype()) {
      set_destinationtype(from.destinationtype());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_iscomplete()) {
      set_iscomplete(from.iscomplete());
    }
    if (from.has_hadget()) {
      set_hadget(from.hadget());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DestinationContent::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DestinationContent::CopyFrom(const DestinationContent& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DestinationContent::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DestinationContent::Swap(DestinationContent* other) {
  if (other != this) {
    std::swap(destinationid_, other->destinationid_);
    std::swap(destinationtype_, other->destinationtype_);
    std::swap(num_, other->num_);
    std::swap(iscomplete_, other->iscomplete_);
    std::swap(hadget_, other->hadget_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DestinationContent::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DestinationContent_descriptor_;
  metadata.reflection = DestinationContent_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SignInInfo::kSignInFieldNumber;
const int SignInInfo::kRewardFieldNumber;
const int SignInInfo::kTotalLoginFieldNumber;
const int SignInInfo::kTotalLoginRewardFieldNumber;
const int SignInInfo::kFirstChargeOverFlagFieldNumber;
#endif  // !_MSC_VER

SignInInfo::SignInInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SignInInfo::InitAsDefaultInstance() {
}

SignInInfo::SignInInfo(const SignInInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SignInInfo::SharedCtor() {
  _cached_size_ = 0;
  signin_ = 0;
  reward_ = 0;
  totallogin_ = 0;
  totalloginreward_ = 0;
  firstchargeoverflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SignInInfo::~SignInInfo() {
  SharedDtor();
}

void SignInInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SignInInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SignInInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SignInInfo_descriptor_;
}

const SignInInfo& SignInInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

SignInInfo* SignInInfo::default_instance_ = NULL;

SignInInfo* SignInInfo::New() const {
  return new SignInInfo;
}

void SignInInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    signin_ = 0;
    reward_ = 0;
    totallogin_ = 0;
    totalloginreward_ = 0;
    firstchargeoverflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SignInInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 SignIn = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &signin_)));
          set_has_signin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Reward;
        break;
      }

      // optional int32 Reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_totalLogin;
        break;
      }

      // optional int32 totalLogin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalLogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totallogin_)));
          set_has_totallogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_totalLoginReward;
        break;
      }

      // optional int32 totalLoginReward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalLoginReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &totalloginreward_)));
          set_has_totalloginreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_firstChargeOverFlag;
        break;
      }

      // optional bool firstChargeOverFlag = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstChargeOverFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &firstchargeoverflag_)));
          set_has_firstchargeoverflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SignInInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 SignIn = 1;
  if (has_signin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->signin(), output);
  }

  // optional int32 Reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward(), output);
  }

  // optional int32 totalLogin = 3;
  if (has_totallogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->totallogin(), output);
  }

  // optional int32 totalLoginReward = 4;
  if (has_totalloginreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->totalloginreward(), output);
  }

  // optional bool firstChargeOverFlag = 5;
  if (has_firstchargeoverflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->firstchargeoverflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SignInInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 SignIn = 1;
  if (has_signin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->signin(), target);
  }

  // optional int32 Reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward(), target);
  }

  // optional int32 totalLogin = 3;
  if (has_totallogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->totallogin(), target);
  }

  // optional int32 totalLoginReward = 4;
  if (has_totalloginreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->totalloginreward(), target);
  }

  // optional bool firstChargeOverFlag = 5;
  if (has_firstchargeoverflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->firstchargeoverflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SignInInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 SignIn = 1;
    if (has_signin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->signin());
    }

    // optional int32 Reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward());
    }

    // optional int32 totalLogin = 3;
    if (has_totallogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totallogin());
    }

    // optional int32 totalLoginReward = 4;
    if (has_totalloginreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->totalloginreward());
    }

    // optional bool firstChargeOverFlag = 5;
    if (has_firstchargeoverflag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SignInInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SignInInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SignInInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SignInInfo::MergeFrom(const SignInInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_signin()) {
      set_signin(from.signin());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_totallogin()) {
      set_totallogin(from.totallogin());
    }
    if (from.has_totalloginreward()) {
      set_totalloginreward(from.totalloginreward());
    }
    if (from.has_firstchargeoverflag()) {
      set_firstchargeoverflag(from.firstchargeoverflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SignInInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SignInInfo::CopyFrom(const SignInInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SignInInfo::IsInitialized() const {

  return true;
}

void SignInInfo::Swap(SignInInfo* other) {
  if (other != this) {
    std::swap(signin_, other->signin_);
    std::swap(reward_, other->reward_);
    std::swap(totallogin_, other->totallogin_);
    std::swap(totalloginreward_, other->totalloginreward_);
    std::swap(firstchargeoverflag_, other->firstchargeoverflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SignInInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SignInInfo_descriptor_;
  metadata.reflection = SignInInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CounterService::kIdFieldNumber;
const int CounterService::kNumFieldNumber;
#endif  // !_MSC_VER

CounterService::CounterService()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CounterService::InitAsDefaultInstance() {
}

CounterService::CounterService(const CounterService& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CounterService::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterService::~CounterService() {
  SharedDtor();
}

void CounterService::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CounterService::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CounterService::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterService_descriptor_;
}

const CounterService& CounterService::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

CounterService* CounterService::default_instance_ = NULL;

CounterService* CounterService::New() const {
  return new CounterService;
}

void CounterService::Clear() {
  id_.Clear();
  num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CounterService::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_id;
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // repeated int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CounterService::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->id(i), output);
  }

  // repeated int32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->num(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CounterService::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 id = 1;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->id(i), target);
  }

  // repeated int32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->num(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CounterService::ByteSize() const {
  int total_size = 0;

  // repeated int32 id = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  // repeated int32 num = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterService::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CounterService* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CounterService*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CounterService::MergeFrom(const CounterService& from) {
  GOOGLE_CHECK_NE(&from, this);
  id_.MergeFrom(from.id_);
  num_.MergeFrom(from.num_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CounterService::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounterService::CopyFrom(const CounterService& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterService::IsInitialized() const {

  return true;
}

void CounterService::Swap(CounterService* other) {
  if (other != this) {
    id_.Swap(&other->id_);
    num_.Swap(&other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CounterService::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CounterService_descriptor_;
  metadata.reflection = CounterService_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CounterServiceList::kCounterFieldNumber;
const int CounterServiceList::kYesterdaycounterFieldNumber;
const int CounterServiceList::kLastResetTimeFieldNumber;
#endif  // !_MSC_VER

CounterServiceList::CounterServiceList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CounterServiceList::InitAsDefaultInstance() {
  counter_ = const_cast< ::PlayerInfo::CounterService*>(&::PlayerInfo::CounterService::default_instance());
  yesterdaycounter_ = const_cast< ::PlayerInfo::CounterService*>(&::PlayerInfo::CounterService::default_instance());
}

CounterServiceList::CounterServiceList(const CounterServiceList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CounterServiceList::SharedCtor() {
  _cached_size_ = 0;
  counter_ = NULL;
  yesterdaycounter_ = NULL;
  lastresettime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CounterServiceList::~CounterServiceList() {
  SharedDtor();
}

void CounterServiceList::SharedDtor() {
  if (this != default_instance_) {
    delete counter_;
    delete yesterdaycounter_;
  }
}

void CounterServiceList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CounterServiceList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CounterServiceList_descriptor_;
}

const CounterServiceList& CounterServiceList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

CounterServiceList* CounterServiceList::default_instance_ = NULL;

CounterServiceList* CounterServiceList::New() const {
  return new CounterServiceList;
}

void CounterServiceList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_counter()) {
      if (counter_ != NULL) counter_->::PlayerInfo::CounterService::Clear();
    }
    if (has_yesterdaycounter()) {
      if (yesterdaycounter_ != NULL) yesterdaycounter_->::PlayerInfo::CounterService::Clear();
    }
    lastresettime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CounterServiceList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerInfo.CounterService counter = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_yesterdaycounter;
        break;
      }

      // optional .PlayerInfo.CounterService yesterdaycounter = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_yesterdaycounter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_yesterdaycounter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lastResetTime;
        break;
      }

      // optional int64 lastResetTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastResetTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastresettime_)));
          set_has_lastresettime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CounterServiceList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlayerInfo.CounterService counter = 1;
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->counter(), output);
  }

  // optional .PlayerInfo.CounterService yesterdaycounter = 2;
  if (has_yesterdaycounter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->yesterdaycounter(), output);
  }

  // optional int64 lastResetTime = 3;
  if (has_lastresettime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->lastresettime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CounterServiceList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlayerInfo.CounterService counter = 1;
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->counter(), target);
  }

  // optional .PlayerInfo.CounterService yesterdaycounter = 2;
  if (has_yesterdaycounter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->yesterdaycounter(), target);
  }

  // optional int64 lastResetTime = 3;
  if (has_lastresettime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->lastresettime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CounterServiceList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlayerInfo.CounterService counter = 1;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counter());
    }

    // optional .PlayerInfo.CounterService yesterdaycounter = 2;
    if (has_yesterdaycounter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->yesterdaycounter());
    }

    // optional int64 lastResetTime = 3;
    if (has_lastresettime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastresettime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CounterServiceList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CounterServiceList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CounterServiceList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CounterServiceList::MergeFrom(const CounterServiceList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_counter()) {
      mutable_counter()->::PlayerInfo::CounterService::MergeFrom(from.counter());
    }
    if (from.has_yesterdaycounter()) {
      mutable_yesterdaycounter()->::PlayerInfo::CounterService::MergeFrom(from.yesterdaycounter());
    }
    if (from.has_lastresettime()) {
      set_lastresettime(from.lastresettime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CounterServiceList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CounterServiceList::CopyFrom(const CounterServiceList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CounterServiceList::IsInitialized() const {

  return true;
}

void CounterServiceList::Swap(CounterServiceList* other) {
  if (other != this) {
    std::swap(counter_, other->counter_);
    std::swap(yesterdaycounter_, other->yesterdaycounter_);
    std::swap(lastresettime_, other->lastresettime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CounterServiceList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CounterServiceList_descriptor_;
  metadata.reflection = CounterServiceList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EscortInfo::kLineFieldNumber;
const int EscortInfo::kQualityFieldNumber;
const int EscortInfo::kRobTimesFieldNumber;
const int EscortInfo::kLeftTimesFieldNumber;
const int EscortInfo::kSpeedlefttimeFieldNumber;
const int EscortInfo::kMapidFieldNumber;
const int EscortInfo::kXposFieldNumber;
const int EscortInfo::kYposFieldNumber;
const int EscortInfo::kHpFieldNumber;
const int EscortInfo::kNumFieldNumber;
const int EscortInfo::kRewardExpFieldNumber;
const int EscortInfo::kRewardMoneyFieldNumber;
#endif  // !_MSC_VER

EscortInfo::EscortInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EscortInfo::InitAsDefaultInstance() {
}

EscortInfo::EscortInfo(const EscortInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EscortInfo::SharedCtor() {
  _cached_size_ = 0;
  line_ = 0;
  quality_ = 0;
  robtimes_ = 0;
  lefttimes_ = GOOGLE_LONGLONG(0);
  speedlefttime_ = GOOGLE_LONGLONG(0);
  mapid_ = GOOGLE_LONGLONG(0);
  xpos_ = 0;
  ypos_ = 0;
  hp_ = 0;
  num_ = 0;
  rewardexp_ = 0;
  rewardmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EscortInfo::~EscortInfo() {
  SharedDtor();
}

void EscortInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EscortInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EscortInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EscortInfo_descriptor_;
}

const EscortInfo& EscortInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

EscortInfo* EscortInfo::default_instance_ = NULL;

EscortInfo* EscortInfo::New() const {
  return new EscortInfo;
}

void EscortInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    line_ = 0;
    quality_ = 0;
    robtimes_ = 0;
    lefttimes_ = GOOGLE_LONGLONG(0);
    speedlefttime_ = GOOGLE_LONGLONG(0);
    mapid_ = GOOGLE_LONGLONG(0);
    xpos_ = 0;
    ypos_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    hp_ = 0;
    num_ = 0;
    rewardexp_ = 0;
    rewardmoney_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EscortInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 line = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &line_)));
          set_has_line();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_quality;
        break;
      }

      // optional int32 quality = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_robTimes;
        break;
      }

      // optional int32 robTimes = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_robTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &robtimes_)));
          set_has_robtimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_leftTimes;
        break;
      }

      // optional int64 leftTimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_leftTimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lefttimes_)));
          set_has_lefttimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_speedlefttime;
        break;
      }

      // optional int64 speedlefttime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_speedlefttime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &speedlefttime_)));
          set_has_speedlefttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mapid;
        break;
      }

      // optional int64 mapid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_xpos;
        break;
      }

      // optional int32 xpos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ypos;
        break;
      }

      // optional int32 ypos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_hp;
        break;
      }

      // optional int32 hp = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_num;
        break;
      }

      // optional int32 num = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_rewardExp;
        break;
      }

      // optional int32 rewardExp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardexp_)));
          set_has_rewardexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_rewardMoney;
        break;
      }

      // optional int32 rewardMoney = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rewardMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rewardmoney_)));
          set_has_rewardmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EscortInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 line = 1;
  if (has_line()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->line(), output);
  }

  // optional int32 quality = 2;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->quality(), output);
  }

  // optional int32 robTimes = 3;
  if (has_robtimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->robtimes(), output);
  }

  // optional int64 leftTimes = 4;
  if (has_lefttimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->lefttimes(), output);
  }

  // optional int64 speedlefttime = 5;
  if (has_speedlefttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->speedlefttime(), output);
  }

  // optional int64 mapid = 6;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->mapid(), output);
  }

  // optional int32 xpos = 7;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->xpos(), output);
  }

  // optional int32 ypos = 8;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ypos(), output);
  }

  // optional int32 hp = 9;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->hp(), output);
  }

  // optional int32 num = 10;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->num(), output);
  }

  // optional int32 rewardExp = 11;
  if (has_rewardexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->rewardexp(), output);
  }

  // optional int32 rewardMoney = 12;
  if (has_rewardmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->rewardmoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EscortInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 line = 1;
  if (has_line()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->line(), target);
  }

  // optional int32 quality = 2;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->quality(), target);
  }

  // optional int32 robTimes = 3;
  if (has_robtimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->robtimes(), target);
  }

  // optional int64 leftTimes = 4;
  if (has_lefttimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->lefttimes(), target);
  }

  // optional int64 speedlefttime = 5;
  if (has_speedlefttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->speedlefttime(), target);
  }

  // optional int64 mapid = 6;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->mapid(), target);
  }

  // optional int32 xpos = 7;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->xpos(), target);
  }

  // optional int32 ypos = 8;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ypos(), target);
  }

  // optional int32 hp = 9;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->hp(), target);
  }

  // optional int32 num = 10;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->num(), target);
  }

  // optional int32 rewardExp = 11;
  if (has_rewardexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->rewardexp(), target);
  }

  // optional int32 rewardMoney = 12;
  if (has_rewardmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->rewardmoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EscortInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 line = 1;
    if (has_line()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->line());
    }

    // optional int32 quality = 2;
    if (has_quality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 robTimes = 3;
    if (has_robtimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->robtimes());
    }

    // optional int64 leftTimes = 4;
    if (has_lefttimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lefttimes());
    }

    // optional int64 speedlefttime = 5;
    if (has_speedlefttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->speedlefttime());
    }

    // optional int64 mapid = 6;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional int32 xpos = 7;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

    // optional int32 ypos = 8;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 hp = 9;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 num = 10;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 rewardExp = 11;
    if (has_rewardexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardexp());
    }

    // optional int32 rewardMoney = 12;
    if (has_rewardmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rewardmoney());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EscortInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EscortInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EscortInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EscortInfo::MergeFrom(const EscortInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_line()) {
      set_line(from.line());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_robtimes()) {
      set_robtimes(from.robtimes());
    }
    if (from.has_lefttimes()) {
      set_lefttimes(from.lefttimes());
    }
    if (from.has_speedlefttime()) {
      set_speedlefttime(from.speedlefttime());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_rewardexp()) {
      set_rewardexp(from.rewardexp());
    }
    if (from.has_rewardmoney()) {
      set_rewardmoney(from.rewardmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EscortInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EscortInfo::CopyFrom(const EscortInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EscortInfo::IsInitialized() const {

  return true;
}

void EscortInfo::Swap(EscortInfo* other) {
  if (other != this) {
    std::swap(line_, other->line_);
    std::swap(quality_, other->quality_);
    std::swap(robtimes_, other->robtimes_);
    std::swap(lefttimes_, other->lefttimes_);
    std::swap(speedlefttime_, other->speedlefttime_);
    std::swap(mapid_, other->mapid_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(hp_, other->hp_);
    std::swap(num_, other->num_);
    std::swap(rewardexp_, other->rewardexp_);
    std::swap(rewardmoney_, other->rewardmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EscortInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EscortInfo_descriptor_;
  metadata.reflection = EscortInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DanLuInfo::kDanluIdFieldNumber;
const int DanLuInfo::kExpFieldNumber;
const int DanLuInfo::kPointFieldNumber;
const int DanLuInfo::kItemIDFieldNumber;
const int DanLuInfo::kProduceNumFieldNumber;
const int DanLuInfo::kItemPosFieldNumber;
const int DanLuInfo::kItemNumFieldNumber;
#endif  // !_MSC_VER

DanLuInfo::DanLuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DanLuInfo::InitAsDefaultInstance() {
}

DanLuInfo::DanLuInfo(const DanLuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DanLuInfo::SharedCtor() {
  _cached_size_ = 0;
  danluid_ = 0;
  exp_ = 0;
  point_ = 0;
  producenum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DanLuInfo::~DanLuInfo() {
  SharedDtor();
}

void DanLuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DanLuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DanLuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DanLuInfo_descriptor_;
}

const DanLuInfo& DanLuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

DanLuInfo* DanLuInfo::default_instance_ = NULL;

DanLuInfo* DanLuInfo::New() const {
  return new DanLuInfo;
}

void DanLuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    danluid_ = 0;
    exp_ = 0;
    point_ = 0;
    producenum_ = 0;
  }
  itemid_.Clear();
  itempos_.Clear();
  itemnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DanLuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 danluId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &danluid_)));
          set_has_danluid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_point;
        break;
      }

      // optional int32 point = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemID;
        break;
      }

      // repeated int32 itemID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemID;
        if (input->ExpectTag(40)) goto parse_produceNum;
        break;
      }

      // optional int32 produceNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_produceNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &producenum_)));
          set_has_producenum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_itemPos;
        break;
      }

      // repeated int32 itemPos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_itempos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itempos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_itemPos;
        if (input->ExpectTag(56)) goto parse_itemNum;
        break;
      }

      // repeated int32 itemNum = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_itemnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_itemNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DanLuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 danluId = 1;
  if (has_danluid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->danluid(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // optional int32 point = 3;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->point(), output);
  }

  // repeated int32 itemID = 4;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->itemid(i), output);
  }

  // optional int32 produceNum = 5;
  if (has_producenum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->producenum(), output);
  }

  // repeated int32 itemPos = 6;
  for (int i = 0; i < this->itempos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->itempos(i), output);
  }

  // repeated int32 itemNum = 7;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->itemnum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DanLuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 danluId = 1;
  if (has_danluid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->danluid(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // optional int32 point = 3;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->point(), target);
  }

  // repeated int32 itemID = 4;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->itemid(i), target);
  }

  // optional int32 produceNum = 5;
  if (has_producenum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->producenum(), target);
  }

  // repeated int32 itemPos = 6;
  for (int i = 0; i < this->itempos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->itempos(i), target);
  }

  // repeated int32 itemNum = 7;
  for (int i = 0; i < this->itemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->itemnum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DanLuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 danluId = 1;
    if (has_danluid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->danluid());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 point = 3;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // optional int32 produceNum = 5;
    if (has_producenum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->producenum());
    }

  }
  // repeated int32 itemID = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  // repeated int32 itemPos = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->itempos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itempos(i));
    }
    total_size += 1 * this->itempos_size() + data_size;
  }

  // repeated int32 itemNum = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemnum(i));
    }
    total_size += 1 * this->itemnum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DanLuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DanLuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DanLuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DanLuInfo::MergeFrom(const DanLuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  itempos_.MergeFrom(from.itempos_);
  itemnum_.MergeFrom(from.itemnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_danluid()) {
      set_danluid(from.danluid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_producenum()) {
      set_producenum(from.producenum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DanLuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DanLuInfo::CopyFrom(const DanLuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanLuInfo::IsInitialized() const {

  return true;
}

void DanLuInfo::Swap(DanLuInfo* other) {
  if (other != this) {
    std::swap(danluid_, other->danluid_);
    std::swap(exp_, other->exp_);
    std::swap(point_, other->point_);
    itemid_.Swap(&other->itemid_);
    std::swap(producenum_, other->producenum_);
    itempos_.Swap(&other->itempos_);
    itemnum_.Swap(&other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DanLuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DanLuInfo_descriptor_;
  metadata.reflection = DanLuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PlayerVipInfo::kGiftInfoFieldNumber;
const int PlayerVipInfo::kVipAddUpGoldFieldNumber;
const int PlayerVipInfo::kEndTimeFieldNumber;
const int PlayerVipInfo::kDayFieldNumber;
const int PlayerVipInfo::kMaxDayFieldNumber;
const int PlayerVipInfo::kLastTimeFieldNumber;
const int PlayerVipInfo::kItemFieldNumber;
const int PlayerVipInfo::kVipCardLvFieldNumber;
const int PlayerVipInfo::kVipCardBeginTimeFieldNumber;
const int PlayerVipInfo::kValideSecsFieldNumber;
#endif  // !_MSC_VER

PlayerVipInfo::PlayerVipInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PlayerVipInfo::InitAsDefaultInstance() {
}

PlayerVipInfo::PlayerVipInfo(const PlayerVipInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PlayerVipInfo::SharedCtor() {
  _cached_size_ = 0;
  giftinfo_ = 0;
  vipaddupgold_ = 0;
  endtime_ = GOOGLE_LONGLONG(0);
  day_ = 0;
  maxday_ = 0;
  lasttime_ = GOOGLE_LONGLONG(0);
  vipcardlv_ = 0;
  vipcardbegintime_ = GOOGLE_LONGLONG(0);
  validesecs_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PlayerVipInfo::~PlayerVipInfo() {
  SharedDtor();
}

void PlayerVipInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PlayerVipInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PlayerVipInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PlayerVipInfo_descriptor_;
}

const PlayerVipInfo& PlayerVipInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

PlayerVipInfo* PlayerVipInfo::default_instance_ = NULL;

PlayerVipInfo* PlayerVipInfo::New() const {
  return new PlayerVipInfo;
}

void PlayerVipInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    giftinfo_ = 0;
    vipaddupgold_ = 0;
    endtime_ = GOOGLE_LONGLONG(0);
    day_ = 0;
    maxday_ = 0;
    lasttime_ = GOOGLE_LONGLONG(0);
    vipcardlv_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    vipcardbegintime_ = GOOGLE_LONGLONG(0);
    validesecs_ = GOOGLE_LONGLONG(0);
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PlayerVipInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 giftInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &giftinfo_)));
          set_has_giftinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_vipAddUpGold;
        break;
      }

      // optional int32 vipAddUpGold = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipAddUpGold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipaddupgold_)));
          set_has_vipaddupgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_day;
        break;
      }

      // optional int32 day = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_day:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &day_)));
          set_has_day();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxDay;
        break;
      }

      // optional int32 maxDay = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxDay:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxday_)));
          set_has_maxday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_lastTime;
        break;
      }

      // optional int64 lastTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lasttime_)));
          set_has_lasttime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_item;
        break;
      }

      // repeated int64 item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_item:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 56, input, this->mutable_item())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_item())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_item;
        if (input->ExpectTag(64)) goto parse_vipCardLv;
        break;
      }

      // optional int32 vipCardLv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipCardLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipcardlv_)));
          set_has_vipcardlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_vipCardBeginTime;
        break;
      }

      // optional int64 vipCardBeginTime = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipCardBeginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vipcardbegintime_)));
          set_has_vipcardbegintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_valideSecs;
        break;
      }

      // optional int64 valideSecs = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_valideSecs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &validesecs_)));
          set_has_validesecs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PlayerVipInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 giftInfo = 1;
  if (has_giftinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->giftinfo(), output);
  }

  // optional int32 vipAddUpGold = 2;
  if (has_vipaddupgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->vipaddupgold(), output);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->endtime(), output);
  }

  // optional int32 day = 4;
  if (has_day()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->day(), output);
  }

  // optional int32 maxDay = 5;
  if (has_maxday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxday(), output);
  }

  // optional int64 lastTime = 6;
  if (has_lasttime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->lasttime(), output);
  }

  // repeated int64 item = 7;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      7, this->item(i), output);
  }

  // optional int32 vipCardLv = 8;
  if (has_vipcardlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->vipcardlv(), output);
  }

  // optional int64 vipCardBeginTime = 9;
  if (has_vipcardbegintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->vipcardbegintime(), output);
  }

  // optional int64 valideSecs = 10;
  if (has_validesecs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->validesecs(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PlayerVipInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 giftInfo = 1;
  if (has_giftinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->giftinfo(), target);
  }

  // optional int32 vipAddUpGold = 2;
  if (has_vipaddupgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->vipaddupgold(), target);
  }

  // optional int64 endTime = 3;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->endtime(), target);
  }

  // optional int32 day = 4;
  if (has_day()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->day(), target);
  }

  // optional int32 maxDay = 5;
  if (has_maxday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxday(), target);
  }

  // optional int64 lastTime = 6;
  if (has_lasttime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->lasttime(), target);
  }

  // repeated int64 item = 7;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(7, this->item(i), target);
  }

  // optional int32 vipCardLv = 8;
  if (has_vipcardlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->vipcardlv(), target);
  }

  // optional int64 vipCardBeginTime = 9;
  if (has_vipcardbegintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->vipcardbegintime(), target);
  }

  // optional int64 valideSecs = 10;
  if (has_validesecs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->validesecs(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PlayerVipInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 giftInfo = 1;
    if (has_giftinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->giftinfo());
    }

    // optional int32 vipAddUpGold = 2;
    if (has_vipaddupgold()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipaddupgold());
    }

    // optional int64 endTime = 3;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

    // optional int32 day = 4;
    if (has_day()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->day());
    }

    // optional int32 maxDay = 5;
    if (has_maxday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxday());
    }

    // optional int64 lastTime = 6;
    if (has_lasttime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lasttime());
    }

    // optional int32 vipCardLv = 8;
    if (has_vipcardlv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipcardlv());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 vipCardBeginTime = 9;
    if (has_vipcardbegintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vipcardbegintime());
    }

    // optional int64 valideSecs = 10;
    if (has_validesecs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->validesecs());
    }

  }
  // repeated int64 item = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->item_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->item(i));
    }
    total_size += 1 * this->item_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PlayerVipInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PlayerVipInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PlayerVipInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PlayerVipInfo::MergeFrom(const PlayerVipInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_giftinfo()) {
      set_giftinfo(from.giftinfo());
    }
    if (from.has_vipaddupgold()) {
      set_vipaddupgold(from.vipaddupgold());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
    if (from.has_day()) {
      set_day(from.day());
    }
    if (from.has_maxday()) {
      set_maxday(from.maxday());
    }
    if (from.has_lasttime()) {
      set_lasttime(from.lasttime());
    }
    if (from.has_vipcardlv()) {
      set_vipcardlv(from.vipcardlv());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_vipcardbegintime()) {
      set_vipcardbegintime(from.vipcardbegintime());
    }
    if (from.has_validesecs()) {
      set_validesecs(from.validesecs());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PlayerVipInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PlayerVipInfo::CopyFrom(const PlayerVipInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PlayerVipInfo::IsInitialized() const {

  return true;
}

void PlayerVipInfo::Swap(PlayerVipInfo* other) {
  if (other != this) {
    std::swap(giftinfo_, other->giftinfo_);
    std::swap(vipaddupgold_, other->vipaddupgold_);
    std::swap(endtime_, other->endtime_);
    std::swap(day_, other->day_);
    std::swap(maxday_, other->maxday_);
    std::swap(lasttime_, other->lasttime_);
    item_.Swap(&other->item_);
    std::swap(vipcardlv_, other->vipcardlv_);
    std::swap(vipcardbegintime_, other->vipcardbegintime_);
    std::swap(validesecs_, other->validesecs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PlayerVipInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PlayerVipInfo_descriptor_;
  metadata.reflection = PlayerVipInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PassivePlayerSkill::kIndexFieldNumber;
const int PassivePlayerSkill::kSkillidFieldNumber;
#endif  // !_MSC_VER

PassivePlayerSkill::PassivePlayerSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PassivePlayerSkill::InitAsDefaultInstance() {
}

PassivePlayerSkill::PassivePlayerSkill(const PassivePlayerSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PassivePlayerSkill::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  skillid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PassivePlayerSkill::~PassivePlayerSkill() {
  SharedDtor();
}

void PassivePlayerSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PassivePlayerSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PassivePlayerSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PassivePlayerSkill_descriptor_;
}

const PassivePlayerSkill& PassivePlayerSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

PassivePlayerSkill* PassivePlayerSkill::default_instance_ = NULL;

PassivePlayerSkill* PassivePlayerSkill::New() const {
  return new PassivePlayerSkill;
}

void PassivePlayerSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    skillid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PassivePlayerSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillid;
        break;
      }

      // optional int32 skillid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PassivePlayerSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 skillid = 2;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->skillid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PassivePlayerSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 skillid = 2;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->skillid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PassivePlayerSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 skillid = 2;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PassivePlayerSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PassivePlayerSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PassivePlayerSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PassivePlayerSkill::MergeFrom(const PassivePlayerSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PassivePlayerSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PassivePlayerSkill::CopyFrom(const PassivePlayerSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PassivePlayerSkill::IsInitialized() const {

  return true;
}

void PassivePlayerSkill::Swap(PassivePlayerSkill* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(skillid_, other->skillid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PassivePlayerSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PassivePlayerSkill_descriptor_;
  metadata.reflection = PassivePlayerSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MagicWeapon::kIdFieldNumber;
const int MagicWeapon::kExpFieldNumber;
const int MagicWeapon::kSkillidFieldNumber;
const int MagicWeapon::kAdvancetimeFieldNumber;
const int MagicWeapon::kTempIDFieldNumber;
const int MagicWeapon::kNeedtimeFieldNumber;
const int MagicWeapon::kPassiveSkillListFieldNumber;
const int MagicWeapon::kFirstReflushFieldNumber;
#endif  // !_MSC_VER

MagicWeapon::MagicWeapon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MagicWeapon::InitAsDefaultInstance() {
}

MagicWeapon::MagicWeapon(const MagicWeapon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MagicWeapon::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  exp_ = 0;
  advancetime_ = GOOGLE_LONGLONG(0);
  tempid_ = 0;
  needtime_ = 0;
  firstreflush_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MagicWeapon::~MagicWeapon() {
  SharedDtor();
}

void MagicWeapon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MagicWeapon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MagicWeapon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MagicWeapon_descriptor_;
}

const MagicWeapon& MagicWeapon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

MagicWeapon* MagicWeapon::default_instance_ = NULL;

MagicWeapon* MagicWeapon::New() const {
  return new MagicWeapon;
}

void MagicWeapon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    exp_ = 0;
    advancetime_ = GOOGLE_LONGLONG(0);
    tempid_ = 0;
    needtime_ = 0;
    firstreflush_ = false;
  }
  skillid_.Clear();
  passiveskilllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MagicWeapon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // repeated int32 skillid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_skillid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skillid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        if (input->ExpectTag(32)) goto parse_advancetime;
        break;
      }

      // optional int64 advancetime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advancetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &advancetime_)));
          set_has_advancetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_tempID;
        break;
      }

      // optional int32 tempID = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_tempID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tempid_)));
          set_has_tempid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_needtime;
        break;
      }

      // optional int32 needtime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_needtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &needtime_)));
          set_has_needtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_passiveSkillList;
        break;
      }

      // repeated .PlayerInfo.PassivePlayerSkill passiveSkillList = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_passiveSkillList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_passiveskilllist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_passiveSkillList;
        if (input->ExpectTag(64)) goto parse_firstReflush;
        break;
      }

      // optional bool firstReflush = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstReflush:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &firstreflush_)));
          set_has_firstreflush();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MagicWeapon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // repeated int32 skillid = 3;
  for (int i = 0; i < this->skillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->skillid(i), output);
  }

  // optional int64 advancetime = 4;
  if (has_advancetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->advancetime(), output);
  }

  // optional int32 tempID = 5;
  if (has_tempid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->tempid(), output);
  }

  // optional int32 needtime = 6;
  if (has_needtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->needtime(), output);
  }

  // repeated .PlayerInfo.PassivePlayerSkill passiveSkillList = 7;
  for (int i = 0; i < this->passiveskilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->passiveskilllist(i), output);
  }

  // optional bool firstReflush = 8;
  if (has_firstreflush()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(8, this->firstreflush(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MagicWeapon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // repeated int32 skillid = 3;
  for (int i = 0; i < this->skillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->skillid(i), target);
  }

  // optional int64 advancetime = 4;
  if (has_advancetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->advancetime(), target);
  }

  // optional int32 tempID = 5;
  if (has_tempid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->tempid(), target);
  }

  // optional int32 needtime = 6;
  if (has_needtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->needtime(), target);
  }

  // repeated .PlayerInfo.PassivePlayerSkill passiveSkillList = 7;
  for (int i = 0; i < this->passiveskilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->passiveskilllist(i), target);
  }

  // optional bool firstReflush = 8;
  if (has_firstreflush()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(8, this->firstreflush(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MagicWeapon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int64 advancetime = 4;
    if (has_advancetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->advancetime());
    }

    // optional int32 tempID = 5;
    if (has_tempid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tempid());
    }

    // optional int32 needtime = 6;
    if (has_needtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->needtime());
    }

    // optional bool firstReflush = 8;
    if (has_firstreflush()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 skillid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skillid(i));
    }
    total_size += 1 * this->skillid_size() + data_size;
  }

  // repeated .PlayerInfo.PassivePlayerSkill passiveSkillList = 7;
  total_size += 1 * this->passiveskilllist_size();
  for (int i = 0; i < this->passiveskilllist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->passiveskilllist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MagicWeapon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MagicWeapon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MagicWeapon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MagicWeapon::MergeFrom(const MagicWeapon& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillid_.MergeFrom(from.skillid_);
  passiveskilllist_.MergeFrom(from.passiveskilllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_advancetime()) {
      set_advancetime(from.advancetime());
    }
    if (from.has_tempid()) {
      set_tempid(from.tempid());
    }
    if (from.has_needtime()) {
      set_needtime(from.needtime());
    }
    if (from.has_firstreflush()) {
      set_firstreflush(from.firstreflush());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MagicWeapon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MagicWeapon::CopyFrom(const MagicWeapon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MagicWeapon::IsInitialized() const {

  return true;
}

void MagicWeapon::Swap(MagicWeapon* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(exp_, other->exp_);
    skillid_.Swap(&other->skillid_);
    std::swap(advancetime_, other->advancetime_);
    std::swap(tempid_, other->tempid_);
    std::swap(needtime_, other->needtime_);
    passiveskilllist_.Swap(&other->passiveskilllist_);
    std::swap(firstreflush_, other->firstreflush_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MagicWeapon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MagicWeapon_descriptor_;
  metadata.reflection = MagicWeapon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RandCJobLucky_CJobItem::kIdFieldNumber;
const int RandCJobLucky_CJobItem::kExpFieldNumber;
#endif  // !_MSC_VER

RandCJobLucky_CJobItem::RandCJobLucky_CJobItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RandCJobLucky_CJobItem::InitAsDefaultInstance() {
}

RandCJobLucky_CJobItem::RandCJobLucky_CJobItem(const RandCJobLucky_CJobItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RandCJobLucky_CJobItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandCJobLucky_CJobItem::~RandCJobLucky_CJobItem() {
  SharedDtor();
}

void RandCJobLucky_CJobItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandCJobLucky_CJobItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandCJobLucky_CJobItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandCJobLucky_CJobItem_descriptor_;
}

const RandCJobLucky_CJobItem& RandCJobLucky_CJobItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

RandCJobLucky_CJobItem* RandCJobLucky_CJobItem::default_instance_ = NULL;

RandCJobLucky_CJobItem* RandCJobLucky_CJobItem::New() const {
  return new RandCJobLucky_CJobItem;
}

void RandCJobLucky_CJobItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandCJobLucky_CJobItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RandCJobLucky_CJobItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RandCJobLucky_CJobItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RandCJobLucky_CJobItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandCJobLucky_CJobItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandCJobLucky_CJobItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandCJobLucky_CJobItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandCJobLucky_CJobItem::MergeFrom(const RandCJobLucky_CJobItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandCJobLucky_CJobItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandCJobLucky_CJobItem::CopyFrom(const RandCJobLucky_CJobItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandCJobLucky_CJobItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RandCJobLucky_CJobItem::Swap(RandCJobLucky_CJobItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandCJobLucky_CJobItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandCJobLucky_CJobItem_descriptor_;
  metadata.reflection = RandCJobLucky_CJobItem_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RandCJobLucky_CreatureCJob::kIdFieldNumber;
const int RandCJobLucky_CreatureCJob::kItemFieldNumber;
#endif  // !_MSC_VER

RandCJobLucky_CreatureCJob::RandCJobLucky_CreatureCJob()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RandCJobLucky_CreatureCJob::InitAsDefaultInstance() {
}

RandCJobLucky_CreatureCJob::RandCJobLucky_CreatureCJob(const RandCJobLucky_CreatureCJob& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RandCJobLucky_CreatureCJob::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandCJobLucky_CreatureCJob::~RandCJobLucky_CreatureCJob() {
  SharedDtor();
}

void RandCJobLucky_CreatureCJob::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandCJobLucky_CreatureCJob::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandCJobLucky_CreatureCJob::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandCJobLucky_CreatureCJob_descriptor_;
}

const RandCJobLucky_CreatureCJob& RandCJobLucky_CreatureCJob::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

RandCJobLucky_CreatureCJob* RandCJobLucky_CreatureCJob::default_instance_ = NULL;

RandCJobLucky_CreatureCJob* RandCJobLucky_CreatureCJob::New() const {
  return new RandCJobLucky_CreatureCJob;
}

void RandCJobLucky_CreatureCJob::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandCJobLucky_CreatureCJob::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .PlayerInfo.RandCJobLucky.CJobItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RandCJobLucky_CreatureCJob::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // repeated .PlayerInfo.RandCJobLucky.CJobItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RandCJobLucky_CreatureCJob::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // repeated .PlayerInfo.RandCJobLucky.CJobItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RandCJobLucky_CreatureCJob::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  // repeated .PlayerInfo.RandCJobLucky.CJobItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandCJobLucky_CreatureCJob::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandCJobLucky_CreatureCJob* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandCJobLucky_CreatureCJob*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandCJobLucky_CreatureCJob::MergeFrom(const RandCJobLucky_CreatureCJob& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandCJobLucky_CreatureCJob::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandCJobLucky_CreatureCJob::CopyFrom(const RandCJobLucky_CreatureCJob& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandCJobLucky_CreatureCJob::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void RandCJobLucky_CreatureCJob::Swap(RandCJobLucky_CreatureCJob* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandCJobLucky_CreatureCJob::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandCJobLucky_CreatureCJob_descriptor_;
  metadata.reflection = RandCJobLucky_CreatureCJob_reflection_;
  return metadata;
}


// -------------------------------------------------------------------

#ifndef _MSC_VER
const int RandCJobLucky::kPackageFieldNumber;
const int RandCJobLucky::kExampackageFieldNumber;
const int RandCJobLucky::kRolepackageFieldNumber;
const int RandCJobLucky::kJobexpFieldNumber;
const int RandCJobLucky::kRandNumFieldNumber;
#endif  // !_MSC_VER

RandCJobLucky::RandCJobLucky()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RandCJobLucky::InitAsDefaultInstance() {
}

RandCJobLucky::RandCJobLucky(const RandCJobLucky& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RandCJobLucky::SharedCtor() {
  _cached_size_ = 0;
  jobexp_ = 0;
  randnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RandCJobLucky::~RandCJobLucky() {
  SharedDtor();
}

void RandCJobLucky::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RandCJobLucky::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RandCJobLucky::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RandCJobLucky_descriptor_;
}

const RandCJobLucky& RandCJobLucky::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

RandCJobLucky* RandCJobLucky::default_instance_ = NULL;

RandCJobLucky* RandCJobLucky::New() const {
  return new RandCJobLucky;
}

void RandCJobLucky::Clear() {
  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    jobexp_ = 0;
    randnum_ = 0;
  }
  package_.Clear();
  exampackage_.Clear();
  rolepackage_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RandCJobLucky::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.RandCJobLucky.CJobItem package = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_package:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_package()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_package;
        if (input->ExpectTag(16)) goto parse_exampackage;
        break;
      }

      // repeated int32 exampackage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exampackage:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_exampackage())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_exampackage())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exampackage;
        if (input->ExpectTag(26)) goto parse_rolepackage;
        break;
      }

      // repeated .PlayerInfo.RandCJobLucky.CreatureCJob rolepackage = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rolepackage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rolepackage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rolepackage;
        if (input->ExpectTag(32)) goto parse_jobexp;
        break;
      }

      // optional int32 jobexp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_jobexp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &jobexp_)));
          set_has_jobexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_randNum;
        break;
      }

      // optional int32 randNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_randNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &randnum_)));
          set_has_randnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RandCJobLucky::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.RandCJobLucky.CJobItem package = 1;
  for (int i = 0; i < this->package_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->package(i), output);
  }

  // repeated int32 exampackage = 2;
  for (int i = 0; i < this->exampackage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->exampackage(i), output);
  }

  // repeated .PlayerInfo.RandCJobLucky.CreatureCJob rolepackage = 3;
  for (int i = 0; i < this->rolepackage_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rolepackage(i), output);
  }

  // optional int32 jobexp = 4;
  if (has_jobexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->jobexp(), output);
  }

  // optional int32 randNum = 5;
  if (has_randnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->randnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RandCJobLucky::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.RandCJobLucky.CJobItem package = 1;
  for (int i = 0; i < this->package_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->package(i), target);
  }

  // repeated int32 exampackage = 2;
  for (int i = 0; i < this->exampackage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->exampackage(i), target);
  }

  // repeated .PlayerInfo.RandCJobLucky.CreatureCJob rolepackage = 3;
  for (int i = 0; i < this->rolepackage_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rolepackage(i), target);
  }

  // optional int32 jobexp = 4;
  if (has_jobexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->jobexp(), target);
  }

  // optional int32 randNum = 5;
  if (has_randnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->randnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RandCJobLucky::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    // optional int32 jobexp = 4;
    if (has_jobexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->jobexp());
    }

    // optional int32 randNum = 5;
    if (has_randnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->randnum());
    }

  }
  // repeated .PlayerInfo.RandCJobLucky.CJobItem package = 1;
  total_size += 1 * this->package_size();
  for (int i = 0; i < this->package_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->package(i));
  }

  // repeated int32 exampackage = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->exampackage_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->exampackage(i));
    }
    total_size += 1 * this->exampackage_size() + data_size;
  }

  // repeated .PlayerInfo.RandCJobLucky.CreatureCJob rolepackage = 3;
  total_size += 1 * this->rolepackage_size();
  for (int i = 0; i < this->rolepackage_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rolepackage(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RandCJobLucky::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RandCJobLucky* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RandCJobLucky*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RandCJobLucky::MergeFrom(const RandCJobLucky& from) {
  GOOGLE_CHECK_NE(&from, this);
  package_.MergeFrom(from.package_);
  exampackage_.MergeFrom(from.exampackage_);
  rolepackage_.MergeFrom(from.rolepackage_);
  if (from._has_bits_[3 / 32] & (0xffu << (3 % 32))) {
    if (from.has_jobexp()) {
      set_jobexp(from.jobexp());
    }
    if (from.has_randnum()) {
      set_randnum(from.randnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RandCJobLucky::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RandCJobLucky::CopyFrom(const RandCJobLucky& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RandCJobLucky::IsInitialized() const {

  for (int i = 0; i < package_size(); i++) {
    if (!this->package(i).IsInitialized()) return false;
  }
  for (int i = 0; i < rolepackage_size(); i++) {
    if (!this->rolepackage(i).IsInitialized()) return false;
  }
  return true;
}

void RandCJobLucky::Swap(RandCJobLucky* other) {
  if (other != this) {
    package_.Swap(&other->package_);
    exampackage_.Swap(&other->exampackage_);
    rolepackage_.Swap(&other->rolepackage_);
    std::swap(jobexp_, other->jobexp_);
    std::swap(randnum_, other->randnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RandCJobLucky::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RandCJobLucky_descriptor_;
  metadata.reflection = RandCJobLucky_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LucklyTurntable::kTmFieldNumber;
const int LucklyTurntable::kReawidListFieldNumber;
const int LucklyTurntable::kItemidFieldNumber;
const int LucklyTurntable::kNumFieldNumber;
const int LucklyTurntable::kIdFieldNumber;
const int LucklyTurntable::kBindTypeFieldNumber;
#endif  // !_MSC_VER

LucklyTurntable::LucklyTurntable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LucklyTurntable::InitAsDefaultInstance() {
}

LucklyTurntable::LucklyTurntable(const LucklyTurntable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LucklyTurntable::SharedCtor() {
  _cached_size_ = 0;
  tm_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LucklyTurntable::~LucklyTurntable() {
  SharedDtor();
}

void LucklyTurntable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LucklyTurntable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LucklyTurntable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LucklyTurntable_descriptor_;
}

const LucklyTurntable& LucklyTurntable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

LucklyTurntable* LucklyTurntable::default_instance_ = NULL;

LucklyTurntable* LucklyTurntable::New() const {
  return new LucklyTurntable;
}

void LucklyTurntable::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    tm_ = GOOGLE_LONGLONG(0);
  }
  reawidlist_.Clear();
  itemid_.Clear();
  num_.Clear();
  id_.Clear();
  bindtype_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LucklyTurntable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 tm = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &tm_)));
          set_has_tm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reawidList;
        break;
      }

      // repeated int32 reawidList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reawidList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_reawidlist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_reawidlist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reawidList;
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // repeated int32 itemid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // repeated int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        if (input->ExpectTag(40)) goto parse_id;
        break;
      }

      // repeated int32 id = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_id())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_id())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_id;
        if (input->ExpectTag(48)) goto parse_bindType;
        break;
      }

      // repeated int32 bindType = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_bindtype())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_bindtype())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bindType;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LucklyTurntable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 tm = 1;
  if (has_tm()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->tm(), output);
  }

  // repeated int32 reawidList = 2;
  for (int i = 0; i < this->reawidlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->reawidlist(i), output);
  }

  // repeated int32 itemid = 3;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->itemid(i), output);
  }

  // repeated int32 num = 4;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->num(i), output);
  }

  // repeated int32 id = 5;
  for (int i = 0; i < this->id_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->id(i), output);
  }

  // repeated int32 bindType = 6;
  for (int i = 0; i < this->bindtype_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->bindtype(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LucklyTurntable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 tm = 1;
  if (has_tm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->tm(), target);
  }

  // repeated int32 reawidList = 2;
  for (int i = 0; i < this->reawidlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->reawidlist(i), target);
  }

  // repeated int32 itemid = 3;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->itemid(i), target);
  }

  // repeated int32 num = 4;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->num(i), target);
  }

  // repeated int32 id = 5;
  for (int i = 0; i < this->id_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->id(i), target);
  }

  // repeated int32 bindType = 6;
  for (int i = 0; i < this->bindtype_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->bindtype(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LucklyTurntable::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 tm = 1;
    if (has_tm()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->tm());
    }

  }
  // repeated int32 reawidList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->reawidlist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->reawidlist(i));
    }
    total_size += 1 * this->reawidlist_size() + data_size;
  }

  // repeated int32 itemid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  // repeated int32 num = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }

  // repeated int32 id = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->id_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->id(i));
    }
    total_size += 1 * this->id_size() + data_size;
  }

  // repeated int32 bindType = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->bindtype_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->bindtype(i));
    }
    total_size += 1 * this->bindtype_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LucklyTurntable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LucklyTurntable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LucklyTurntable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LucklyTurntable::MergeFrom(const LucklyTurntable& from) {
  GOOGLE_CHECK_NE(&from, this);
  reawidlist_.MergeFrom(from.reawidlist_);
  itemid_.MergeFrom(from.itemid_);
  num_.MergeFrom(from.num_);
  id_.MergeFrom(from.id_);
  bindtype_.MergeFrom(from.bindtype_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_tm()) {
      set_tm(from.tm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LucklyTurntable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LucklyTurntable::CopyFrom(const LucklyTurntable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LucklyTurntable::IsInitialized() const {

  return true;
}

void LucklyTurntable::Swap(LucklyTurntable* other) {
  if (other != this) {
    std::swap(tm_, other->tm_);
    reawidlist_.Swap(&other->reawidlist_);
    itemid_.Swap(&other->itemid_);
    num_.Swap(&other->num_);
    id_.Swap(&other->id_);
    bindtype_.Swap(&other->bindtype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LucklyTurntable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LucklyTurntable_descriptor_;
  metadata.reflection = LucklyTurntable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Activity::kCurnodeFieldNumber;
const int Activity::kPrewardFieldNumber;
const int Activity::kPastnodeFieldNumber;
const int Activity::kSwapstimeFieldNumber;
const int Activity::kViprewardFieldNumber;
const int Activity::kTreasonKingBestTimeFieldNumber;
#endif  // !_MSC_VER

Activity::Activity()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Activity::InitAsDefaultInstance() {
}

Activity::Activity(const Activity& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Activity::SharedCtor() {
  _cached_size_ = 0;
  curnode_ = 0;
  preward_ = 0;
  pastnode_ = 0;
  swapstime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Activity::~Activity() {
  SharedDtor();
}

void Activity::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Activity::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Activity::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Activity_descriptor_;
}

const Activity& Activity::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

Activity* Activity::default_instance_ = NULL;

Activity* Activity::New() const {
  return new Activity;
}

void Activity::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    curnode_ = 0;
    preward_ = 0;
    pastnode_ = 0;
    swapstime_ = GOOGLE_LONGLONG(0);
  }
  vipreward_.Clear();
  treasonkingbesttime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Activity::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 curnode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &curnode_)));
          set_has_curnode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_preward;
        break;
      }

      // optional int32 preward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_preward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &preward_)));
          set_has_preward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_pastnode;
        break;
      }

      // optional int32 pastnode = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pastnode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pastnode_)));
          set_has_pastnode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_swapstime;
        break;
      }

      // optional int64 swapstime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_swapstime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &swapstime_)));
          set_has_swapstime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vipreward;
        break;
      }

      // repeated .PlayerInfo.ActivityYellowVipReward vipreward = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vipreward:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_vipreward()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_vipreward;
        if (input->ExpectTag(48)) goto parse_TreasonKingBestTime;
        break;
      }

      // repeated int32 TreasonKingBestTime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasonKingBestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 48, input, this->mutable_treasonkingbesttime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_treasonkingbesttime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_TreasonKingBestTime;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Activity::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 curnode = 1;
  if (has_curnode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->curnode(), output);
  }

  // optional int32 preward = 2;
  if (has_preward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->preward(), output);
  }

  // optional int32 pastnode = 3;
  if (has_pastnode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->pastnode(), output);
  }

  // optional int64 swapstime = 4;
  if (has_swapstime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->swapstime(), output);
  }

  // repeated .PlayerInfo.ActivityYellowVipReward vipreward = 5;
  for (int i = 0; i < this->vipreward_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->vipreward(i), output);
  }

  // repeated int32 TreasonKingBestTime = 6;
  for (int i = 0; i < this->treasonkingbesttime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      6, this->treasonkingbesttime(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Activity::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 curnode = 1;
  if (has_curnode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->curnode(), target);
  }

  // optional int32 preward = 2;
  if (has_preward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->preward(), target);
  }

  // optional int32 pastnode = 3;
  if (has_pastnode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->pastnode(), target);
  }

  // optional int64 swapstime = 4;
  if (has_swapstime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->swapstime(), target);
  }

  // repeated .PlayerInfo.ActivityYellowVipReward vipreward = 5;
  for (int i = 0; i < this->vipreward_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->vipreward(i), target);
  }

  // repeated int32 TreasonKingBestTime = 6;
  for (int i = 0; i < this->treasonkingbesttime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(6, this->treasonkingbesttime(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Activity::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 curnode = 1;
    if (has_curnode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->curnode());
    }

    // optional int32 preward = 2;
    if (has_preward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->preward());
    }

    // optional int32 pastnode = 3;
    if (has_pastnode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pastnode());
    }

    // optional int64 swapstime = 4;
    if (has_swapstime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->swapstime());
    }

  }
  // repeated .PlayerInfo.ActivityYellowVipReward vipreward = 5;
  total_size += 1 * this->vipreward_size();
  for (int i = 0; i < this->vipreward_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->vipreward(i));
  }

  // repeated int32 TreasonKingBestTime = 6;
  {
    int data_size = 0;
    for (int i = 0; i < this->treasonkingbesttime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->treasonkingbesttime(i));
    }
    total_size += 1 * this->treasonkingbesttime_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Activity::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Activity* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Activity*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Activity::MergeFrom(const Activity& from) {
  GOOGLE_CHECK_NE(&from, this);
  vipreward_.MergeFrom(from.vipreward_);
  treasonkingbesttime_.MergeFrom(from.treasonkingbesttime_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_curnode()) {
      set_curnode(from.curnode());
    }
    if (from.has_preward()) {
      set_preward(from.preward());
    }
    if (from.has_pastnode()) {
      set_pastnode(from.pastnode());
    }
    if (from.has_swapstime()) {
      set_swapstime(from.swapstime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Activity::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Activity::CopyFrom(const Activity& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Activity::IsInitialized() const {

  for (int i = 0; i < vipreward_size(); i++) {
    if (!this->vipreward(i).IsInitialized()) return false;
  }
  return true;
}

void Activity::Swap(Activity* other) {
  if (other != this) {
    std::swap(curnode_, other->curnode_);
    std::swap(preward_, other->preward_);
    std::swap(pastnode_, other->pastnode_);
    std::swap(swapstime_, other->swapstime_);
    vipreward_.Swap(&other->vipreward_);
    treasonkingbesttime_.Swap(&other->treasonkingbesttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Activity::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Activity_descriptor_;
  metadata.reflection = Activity_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityYellowVipReward::kActivityIdFieldNumber;
const int ActivityYellowVipReward::kRewardListFieldNumber;
#endif  // !_MSC_VER

ActivityYellowVipReward::ActivityYellowVipReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityYellowVipReward::InitAsDefaultInstance() {
}

ActivityYellowVipReward::ActivityYellowVipReward(const ActivityYellowVipReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityYellowVipReward::SharedCtor() {
  _cached_size_ = 0;
  activityid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityYellowVipReward::~ActivityYellowVipReward() {
  SharedDtor();
}

void ActivityYellowVipReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityYellowVipReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityYellowVipReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityYellowVipReward_descriptor_;
}

const ActivityYellowVipReward& ActivityYellowVipReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

ActivityYellowVipReward* ActivityYellowVipReward::default_instance_ = NULL;

ActivityYellowVipReward* ActivityYellowVipReward::New() const {
  return new ActivityYellowVipReward;
}

void ActivityYellowVipReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    activityid_ = 0;
  }
  rewardlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityYellowVipReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 activityId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activityid_)));
          set_has_activityid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewardList;
        break;
      }

      // repeated .PlayerInfo.ActivityYellowVipRewardList rewardList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rewardList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rewardlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_rewardList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityYellowVipReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 activityId = 1;
  if (has_activityid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->activityid(), output);
  }

  // repeated .PlayerInfo.ActivityYellowVipRewardList rewardList = 2;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->rewardlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityYellowVipReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 activityId = 1;
  if (has_activityid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->activityid(), target);
  }

  // repeated .PlayerInfo.ActivityYellowVipRewardList rewardList = 2;
  for (int i = 0; i < this->rewardlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->rewardlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityYellowVipReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 activityId = 1;
    if (has_activityid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activityid());
    }

  }
  // repeated .PlayerInfo.ActivityYellowVipRewardList rewardList = 2;
  total_size += 1 * this->rewardlist_size();
  for (int i = 0; i < this->rewardlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rewardlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityYellowVipReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityYellowVipReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityYellowVipReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityYellowVipReward::MergeFrom(const ActivityYellowVipReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rewardlist_.MergeFrom(from.rewardlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_activityid()) {
      set_activityid(from.activityid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityYellowVipReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityYellowVipReward::CopyFrom(const ActivityYellowVipReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityYellowVipReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ActivityYellowVipReward::Swap(ActivityYellowVipReward* other) {
  if (other != this) {
    std::swap(activityid_, other->activityid_);
    rewardlist_.Swap(&other->rewardlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityYellowVipReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityYellowVipReward_descriptor_;
  metadata.reflection = ActivityYellowVipReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityYellowVipRewardList::kStateFieldNumber;
const int ActivityYellowVipRewardList::kValueFieldNumber;
#endif  // !_MSC_VER

ActivityYellowVipRewardList::ActivityYellowVipRewardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityYellowVipRewardList::InitAsDefaultInstance() {
}

ActivityYellowVipRewardList::ActivityYellowVipRewardList(const ActivityYellowVipRewardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityYellowVipRewardList::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityYellowVipRewardList::~ActivityYellowVipRewardList() {
  SharedDtor();
}

void ActivityYellowVipRewardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityYellowVipRewardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityYellowVipRewardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityYellowVipRewardList_descriptor_;
}

const ActivityYellowVipRewardList& ActivityYellowVipRewardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

ActivityYellowVipRewardList* ActivityYellowVipRewardList::default_instance_ = NULL;

ActivityYellowVipRewardList* ActivityYellowVipRewardList::New() const {
  return new ActivityYellowVipRewardList;
}

void ActivityYellowVipRewardList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityYellowVipRewardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int32 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityYellowVipRewardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityYellowVipRewardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional int32 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityYellowVipRewardList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityYellowVipRewardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityYellowVipRewardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityYellowVipRewardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityYellowVipRewardList::MergeFrom(const ActivityYellowVipRewardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityYellowVipRewardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityYellowVipRewardList::CopyFrom(const ActivityYellowVipRewardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityYellowVipRewardList::IsInitialized() const {

  return true;
}

void ActivityYellowVipRewardList::Swap(ActivityYellowVipRewardList* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityYellowVipRewardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityYellowVipRewardList_descriptor_;
  metadata.reflection = ActivityYellowVipRewardList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineMapInfoList::kLineinfoFieldNumber;
const int LineMapInfoList::kMysecenceidFieldNumber;
#endif  // !_MSC_VER

LineMapInfoList::LineMapInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineMapInfoList::InitAsDefaultInstance() {
}

LineMapInfoList::LineMapInfoList(const LineMapInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineMapInfoList::SharedCtor() {
  _cached_size_ = 0;
  mysecenceid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineMapInfoList::~LineMapInfoList() {
  SharedDtor();
}

void LineMapInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LineMapInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineMapInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineMapInfoList_descriptor_;
}

const LineMapInfoList& LineMapInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

LineMapInfoList* LineMapInfoList::default_instance_ = NULL;

LineMapInfoList* LineMapInfoList::New() const {
  return new LineMapInfoList;
}

void LineMapInfoList::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    mysecenceid_ = GOOGLE_LONGLONG(0);
  }
  lineinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineMapInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.LineMapInfo lineinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_lineinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_lineinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_lineinfo;
        if (input->ExpectTag(16)) goto parse_mysecenceid;
        break;
      }

      // required int64 mysecenceid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mysecenceid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mysecenceid_)));
          set_has_mysecenceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineMapInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.LineMapInfo lineinfo = 1;
  for (int i = 0; i < this->lineinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->lineinfo(i), output);
  }

  // required int64 mysecenceid = 2;
  if (has_mysecenceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mysecenceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineMapInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.LineMapInfo lineinfo = 1;
  for (int i = 0; i < this->lineinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->lineinfo(i), target);
  }

  // required int64 mysecenceid = 2;
  if (has_mysecenceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mysecenceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineMapInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // required int64 mysecenceid = 2;
    if (has_mysecenceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mysecenceid());
    }

  }
  // repeated .PlayerInfo.LineMapInfo lineinfo = 1;
  total_size += 1 * this->lineinfo_size();
  for (int i = 0; i < this->lineinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->lineinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineMapInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineMapInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineMapInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineMapInfoList::MergeFrom(const LineMapInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  lineinfo_.MergeFrom(from.lineinfo_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_mysecenceid()) {
      set_mysecenceid(from.mysecenceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineMapInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineMapInfoList::CopyFrom(const LineMapInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineMapInfoList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000002) != 0x00000002) return false;

  for (int i = 0; i < lineinfo_size(); i++) {
    if (!this->lineinfo(i).IsInitialized()) return false;
  }
  return true;
}

void LineMapInfoList::Swap(LineMapInfoList* other) {
  if (other != this) {
    lineinfo_.Swap(&other->lineinfo_);
    std::swap(mysecenceid_, other->mysecenceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineMapInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineMapInfoList_descriptor_;
  metadata.reflection = LineMapInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LineMapInfo::kScenceidFieldNumber;
const int LineMapInfo::kPlayernumFieldNumber;
#endif  // !_MSC_VER

LineMapInfo::LineMapInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LineMapInfo::InitAsDefaultInstance() {
}

LineMapInfo::LineMapInfo(const LineMapInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LineMapInfo::SharedCtor() {
  _cached_size_ = 0;
  scenceid_ = GOOGLE_LONGLONG(0);
  playernum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LineMapInfo::~LineMapInfo() {
  SharedDtor();
}

void LineMapInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LineMapInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LineMapInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LineMapInfo_descriptor_;
}

const LineMapInfo& LineMapInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

LineMapInfo* LineMapInfo::default_instance_ = NULL;

LineMapInfo* LineMapInfo::New() const {
  return new LineMapInfo;
}

void LineMapInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    scenceid_ = GOOGLE_LONGLONG(0);
    playernum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LineMapInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 scenceid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &scenceid_)));
          set_has_scenceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_playernum;
        break;
      }

      // required int32 playernum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playernum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &playernum_)));
          set_has_playernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LineMapInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 scenceid = 1;
  if (has_scenceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->scenceid(), output);
  }

  // required int32 playernum = 2;
  if (has_playernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->playernum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LineMapInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 scenceid = 1;
  if (has_scenceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->scenceid(), target);
  }

  // required int32 playernum = 2;
  if (has_playernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->playernum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LineMapInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 scenceid = 1;
    if (has_scenceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->scenceid());
    }

    // required int32 playernum = 2;
    if (has_playernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->playernum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LineMapInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LineMapInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LineMapInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LineMapInfo::MergeFrom(const LineMapInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_scenceid()) {
      set_scenceid(from.scenceid());
    }
    if (from.has_playernum()) {
      set_playernum(from.playernum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LineMapInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LineMapInfo::CopyFrom(const LineMapInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LineMapInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void LineMapInfo::Swap(LineMapInfo* other) {
  if (other != this) {
    std::swap(scenceid_, other->scenceid_);
    std::swap(playernum_, other->playernum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LineMapInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LineMapInfo_descriptor_;
  metadata.reflection = LineMapInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GirlWarInfo::kGirlwarFieldNumber;
#endif  // !_MSC_VER

GirlWarInfo::GirlWarInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GirlWarInfo::InitAsDefaultInstance() {
}

GirlWarInfo::GirlWarInfo(const GirlWarInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GirlWarInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GirlWarInfo::~GirlWarInfo() {
  SharedDtor();
}

void GirlWarInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GirlWarInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GirlWarInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GirlWarInfo_descriptor_;
}

const GirlWarInfo& GirlWarInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

GirlWarInfo* GirlWarInfo::default_instance_ = NULL;

GirlWarInfo* GirlWarInfo::New() const {
  return new GirlWarInfo;
}

void GirlWarInfo::Clear() {
  girlwar_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GirlWarInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.GirlWar girlwar = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_girlwar:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_girlwar()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_girlwar;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GirlWarInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.GirlWar girlwar = 1;
  for (int i = 0; i < this->girlwar_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->girlwar(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GirlWarInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.GirlWar girlwar = 1;
  for (int i = 0; i < this->girlwar_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->girlwar(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GirlWarInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerInfo.GirlWar girlwar = 1;
  total_size += 1 * this->girlwar_size();
  for (int i = 0; i < this->girlwar_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->girlwar(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GirlWarInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GirlWarInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GirlWarInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GirlWarInfo::MergeFrom(const GirlWarInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  girlwar_.MergeFrom(from.girlwar_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GirlWarInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GirlWarInfo::CopyFrom(const GirlWarInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GirlWarInfo::IsInitialized() const {

  for (int i = 0; i < girlwar_size(); i++) {
    if (!this->girlwar(i).IsInitialized()) return false;
  }
  return true;
}

void GirlWarInfo::Swap(GirlWarInfo* other) {
  if (other != this) {
    girlwar_.Swap(&other->girlwar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GirlWarInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GirlWarInfo_descriptor_;
  metadata.reflection = GirlWarInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GirlWar::kIdFieldNumber;
const int GirlWar::kNameFieldNumber;
const int GirlWar::kFightpowerFieldNumber;
const int GirlWar::kExpFieldNumber;
const int GirlWar::kLevelFieldNumber;
const int GirlWar::kHpFieldNumber;
const int GirlWar::kPhyattackFieldNumber;
const int GirlWar::kPhyattackmaxFieldNumber;
const int GirlWar::kMagicattackFieldNumber;
const int GirlWar::kMagicattackmaxFieldNumber;
const int GirlWar::kPhydefenceFieldNumber;
const int GirlWar::kHitrateFieldNumber;
const int GirlWar::kAvoidrateFieldNumber;
const int GirlWar::kCritFieldNumber;
const int GirlWar::kUngFieldNumber;
const int GirlWar::kMovespeedFieldNumber;
const int GirlWar::kDeadTimeFieldNumber;
const int GirlWar::kStarrankFieldNumber;
const int GirlWar::kQualityFieldNumber;
const int GirlWar::kHpmaxFieldNumber;
const int GirlWar::kSkill1FieldNumber;
const int GirlWar::kSkill2FieldNumber;
const int GirlWar::kSkill3FieldNumber;
const int GirlWar::kIndexFieldNumber;
const int GirlWar::kEquipFieldNumber;
const int GirlWar::kIswarFieldNumber;
#endif  // !_MSC_VER

GirlWar::GirlWar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GirlWar::InitAsDefaultInstance() {
}

GirlWar::GirlWar(const GirlWar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GirlWar::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fightpower_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  hp_ = 0;
  phyattack_ = 0;
  phyattackmax_ = 0;
  magicattack_ = 0;
  magicattackmax_ = 0;
  phydefence_ = 0;
  hitrate_ = 0;
  avoidrate_ = 0;
  crit_ = 0;
  ung_ = 0;
  movespeed_ = 0;
  deadtime_ = GOOGLE_LONGLONG(0);
  starrank_ = 0;
  quality_ = 0;
  hpmax_ = 0;
  skill1_ = 0;
  skill2_ = 0;
  skill3_ = 0;
  iswar_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GirlWar::~GirlWar() {
  SharedDtor();
}

void GirlWar::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void GirlWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GirlWar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GirlWar_descriptor_;
}

const GirlWar& GirlWar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

GirlWar* GirlWar::default_instance_ = NULL;

GirlWar* GirlWar::New() const {
  return new GirlWar;
}

void GirlWar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    fightpower_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    hp_ = 0;
    phyattack_ = 0;
    phyattackmax_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    magicattack_ = 0;
    magicattackmax_ = 0;
    phydefence_ = 0;
    hitrate_ = 0;
    avoidrate_ = 0;
    crit_ = 0;
    ung_ = 0;
    movespeed_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    deadtime_ = GOOGLE_LONGLONG(0);
    starrank_ = 0;
    quality_ = 0;
    hpmax_ = 0;
    skill1_ = 0;
    skill2_ = 0;
    skill3_ = 0;
  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    iswar_ = false;
  }
  index_.Clear();
  equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GirlWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fightpower;
        break;
      }

      // optional int32 fightpower = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_exp;
        break;
      }

      // optional int64 exp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_level;
        break;
      }

      // optional int32 level = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hp;
        break;
      }

      // optional int32 hp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_phyattack;
        break;
      }

      // optional int32 phyattack = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phyattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phyattack_)));
          set_has_phyattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_phyattackmax;
        break;
      }

      // optional int32 phyattackmax = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phyattackmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phyattackmax_)));
          set_has_phyattackmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_magicattack;
        break;
      }

      // optional int32 magicattack = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicattack_)));
          set_has_magicattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_magicattackmax;
        break;
      }

      // optional int32 magicattackmax = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicattackmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicattackmax_)));
          set_has_magicattackmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_phydefence;
        break;
      }

      // optional int32 phydefence = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phydefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phydefence_)));
          set_has_phydefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_hitrate;
        break;
      }

      // optional int32 hitrate = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitrate_)));
          set_has_hitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_avoidrate;
        break;
      }

      // optional int32 avoidrate = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avoidrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avoidrate_)));
          set_has_avoidrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_crit;
        break;
      }

      // optional int32 crit = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crit_)));
          set_has_crit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_ung;
        break;
      }

      // optional int32 ung = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ung:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ung_)));
          set_has_ung();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_movespeed;
        break;
      }

      // optional int32 movespeed = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_deadTime;
        break;
      }

      // optional int64 deadTime = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadtime_)));
          set_has_deadtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_starrank;
        break;
      }

      // optional int32 starrank = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_starrank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &starrank_)));
          set_has_starrank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_quality;
        break;
      }

      // optional int32 quality = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_quality:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &quality_)));
          set_has_quality();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_hpmax;
        break;
      }

      // optional int32 hpmax = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_skill1;
        break;
      }

      // optional int32 skill1 = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill1_)));
          set_has_skill1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_skill2;
        break;
      }

      // optional int32 skill2 = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill2_)));
          set_has_skill2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_skill3;
        break;
      }

      // optional int32 skill3 = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skill3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skill3_)));
          set_has_skill3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_index;
        break;
      }

      // repeated int32 index = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 192, input, this->mutable_index())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_index())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_index;
        if (input->ExpectTag(200)) goto parse_equip;
        break;
      }

      // repeated int32 equip = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_equip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 200, input, this->mutable_equip())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_equip())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_equip;
        if (input->ExpectTag(208)) goto parse_iswar;
        break;
      }

      // optional bool iswar = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_iswar:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &iswar_)));
          set_has_iswar();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GirlWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 fightpower = 3;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fightpower(), output);
  }

  // optional int64 exp = 4;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->exp(), output);
  }

  // optional int32 level = 5;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->level(), output);
  }

  // optional int32 hp = 6;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hp(), output);
  }

  // optional int32 phyattack = 7;
  if (has_phyattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->phyattack(), output);
  }

  // optional int32 phyattackmax = 8;
  if (has_phyattackmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->phyattackmax(), output);
  }

  // optional int32 magicattack = 9;
  if (has_magicattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->magicattack(), output);
  }

  // optional int32 magicattackmax = 10;
  if (has_magicattackmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->magicattackmax(), output);
  }

  // optional int32 phydefence = 11;
  if (has_phydefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->phydefence(), output);
  }

  // optional int32 hitrate = 12;
  if (has_hitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->hitrate(), output);
  }

  // optional int32 avoidrate = 13;
  if (has_avoidrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->avoidrate(), output);
  }

  // optional int32 crit = 14;
  if (has_crit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->crit(), output);
  }

  // optional int32 ung = 15;
  if (has_ung()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->ung(), output);
  }

  // optional int32 movespeed = 16;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->movespeed(), output);
  }

  // optional int64 deadTime = 17;
  if (has_deadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(17, this->deadtime(), output);
  }

  // optional int32 starrank = 18;
  if (has_starrank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->starrank(), output);
  }

  // optional int32 quality = 19;
  if (has_quality()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->quality(), output);
  }

  // optional int32 hpmax = 20;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->hpmax(), output);
  }

  // optional int32 skill1 = 21;
  if (has_skill1()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->skill1(), output);
  }

  // optional int32 skill2 = 22;
  if (has_skill2()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->skill2(), output);
  }

  // optional int32 skill3 = 23;
  if (has_skill3()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->skill3(), output);
  }

  // repeated int32 index = 24;
  for (int i = 0; i < this->index_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      24, this->index(i), output);
  }

  // repeated int32 equip = 25;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      25, this->equip(i), output);
  }

  // optional bool iswar = 26;
  if (has_iswar()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(26, this->iswar(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GirlWar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 fightpower = 3;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fightpower(), target);
  }

  // optional int64 exp = 4;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->exp(), target);
  }

  // optional int32 level = 5;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->level(), target);
  }

  // optional int32 hp = 6;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hp(), target);
  }

  // optional int32 phyattack = 7;
  if (has_phyattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->phyattack(), target);
  }

  // optional int32 phyattackmax = 8;
  if (has_phyattackmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->phyattackmax(), target);
  }

  // optional int32 magicattack = 9;
  if (has_magicattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->magicattack(), target);
  }

  // optional int32 magicattackmax = 10;
  if (has_magicattackmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->magicattackmax(), target);
  }

  // optional int32 phydefence = 11;
  if (has_phydefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->phydefence(), target);
  }

  // optional int32 hitrate = 12;
  if (has_hitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->hitrate(), target);
  }

  // optional int32 avoidrate = 13;
  if (has_avoidrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->avoidrate(), target);
  }

  // optional int32 crit = 14;
  if (has_crit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->crit(), target);
  }

  // optional int32 ung = 15;
  if (has_ung()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->ung(), target);
  }

  // optional int32 movespeed = 16;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->movespeed(), target);
  }

  // optional int64 deadTime = 17;
  if (has_deadtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(17, this->deadtime(), target);
  }

  // optional int32 starrank = 18;
  if (has_starrank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->starrank(), target);
  }

  // optional int32 quality = 19;
  if (has_quality()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->quality(), target);
  }

  // optional int32 hpmax = 20;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->hpmax(), target);
  }

  // optional int32 skill1 = 21;
  if (has_skill1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->skill1(), target);
  }

  // optional int32 skill2 = 22;
  if (has_skill2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->skill2(), target);
  }

  // optional int32 skill3 = 23;
  if (has_skill3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->skill3(), target);
  }

  // repeated int32 index = 24;
  for (int i = 0; i < this->index_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(24, this->index(i), target);
  }

  // repeated int32 equip = 25;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(25, this->equip(i), target);
  }

  // optional bool iswar = 26;
  if (has_iswar()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(26, this->iswar(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GirlWar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 fightpower = 3;
    if (has_fightpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightpower());
    }

    // optional int64 exp = 4;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int32 level = 5;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 hp = 6;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 phyattack = 7;
    if (has_phyattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phyattack());
    }

    // optional int32 phyattackmax = 8;
    if (has_phyattackmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phyattackmax());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 magicattack = 9;
    if (has_magicattack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicattack());
    }

    // optional int32 magicattackmax = 10;
    if (has_magicattackmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicattackmax());
    }

    // optional int32 phydefence = 11;
    if (has_phydefence()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phydefence());
    }

    // optional int32 hitrate = 12;
    if (has_hitrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitrate());
    }

    // optional int32 avoidrate = 13;
    if (has_avoidrate()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avoidrate());
    }

    // optional int32 crit = 14;
    if (has_crit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crit());
    }

    // optional int32 ung = 15;
    if (has_ung()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ung());
    }

    // optional int32 movespeed = 16;
    if (has_movespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int64 deadTime = 17;
    if (has_deadtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deadtime());
    }

    // optional int32 starrank = 18;
    if (has_starrank()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->starrank());
    }

    // optional int32 quality = 19;
    if (has_quality()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->quality());
    }

    // optional int32 hpmax = 20;
    if (has_hpmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

    // optional int32 skill1 = 21;
    if (has_skill1()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill1());
    }

    // optional int32 skill2 = 22;
    if (has_skill2()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill2());
    }

    // optional int32 skill3 = 23;
    if (has_skill3()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skill3());
    }

  }
  if (_has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    // optional bool iswar = 26;
    if (has_iswar()) {
      total_size += 2 + 1;
    }

  }
  // repeated int32 index = 24;
  {
    int data_size = 0;
    for (int i = 0; i < this->index_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->index(i));
    }
    total_size += 2 * this->index_size() + data_size;
  }

  // repeated int32 equip = 25;
  {
    int data_size = 0;
    for (int i = 0; i < this->equip_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->equip(i));
    }
    total_size += 2 * this->equip_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GirlWar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GirlWar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GirlWar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GirlWar::MergeFrom(const GirlWar& from) {
  GOOGLE_CHECK_NE(&from, this);
  index_.MergeFrom(from.index_);
  equip_.MergeFrom(from.equip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_phyattack()) {
      set_phyattack(from.phyattack());
    }
    if (from.has_phyattackmax()) {
      set_phyattackmax(from.phyattackmax());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_magicattack()) {
      set_magicattack(from.magicattack());
    }
    if (from.has_magicattackmax()) {
      set_magicattackmax(from.magicattackmax());
    }
    if (from.has_phydefence()) {
      set_phydefence(from.phydefence());
    }
    if (from.has_hitrate()) {
      set_hitrate(from.hitrate());
    }
    if (from.has_avoidrate()) {
      set_avoidrate(from.avoidrate());
    }
    if (from.has_crit()) {
      set_crit(from.crit());
    }
    if (from.has_ung()) {
      set_ung(from.ung());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_deadtime()) {
      set_deadtime(from.deadtime());
    }
    if (from.has_starrank()) {
      set_starrank(from.starrank());
    }
    if (from.has_quality()) {
      set_quality(from.quality());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_skill1()) {
      set_skill1(from.skill1());
    }
    if (from.has_skill2()) {
      set_skill2(from.skill2());
    }
    if (from.has_skill3()) {
      set_skill3(from.skill3());
    }
  }
  if (from._has_bits_[25 / 32] & (0xffu << (25 % 32))) {
    if (from.has_iswar()) {
      set_iswar(from.iswar());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GirlWar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GirlWar::CopyFrom(const GirlWar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GirlWar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GirlWar::Swap(GirlWar* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(hp_, other->hp_);
    std::swap(phyattack_, other->phyattack_);
    std::swap(phyattackmax_, other->phyattackmax_);
    std::swap(magicattack_, other->magicattack_);
    std::swap(magicattackmax_, other->magicattackmax_);
    std::swap(phydefence_, other->phydefence_);
    std::swap(hitrate_, other->hitrate_);
    std::swap(avoidrate_, other->avoidrate_);
    std::swap(crit_, other->crit_);
    std::swap(ung_, other->ung_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(deadtime_, other->deadtime_);
    std::swap(starrank_, other->starrank_);
    std::swap(quality_, other->quality_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(skill1_, other->skill1_);
    std::swap(skill2_, other->skill2_);
    std::swap(skill3_, other->skill3_);
    index_.Swap(&other->index_);
    equip_.Swap(&other->equip_);
    std::swap(iswar_, other->iswar_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GirlWar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GirlWar_descriptor_;
  metadata.reflection = GirlWar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LessInfo::kTypeFieldNumber;
const int LessInfo::kInstanceListFieldNumber;
const int LessInfo::kSigninFieldNumber;
const int LessInfo::kCounterFieldNumber;
const int LessInfo::kEscortFieldNumber;
const int LessInfo::kPlayerVipFieldNumber;
const int LessInfo::kPrestigeFieldNumber;
const int LessInfo::kTitleFieldNumber;
const int LessInfo::kFashionFieldNumber;
const int LessInfo::kVitalityFieldNumber;
const int LessInfo::kCampShopDataFieldNumber;
const int LessInfo::kFestivalDataFieldNumber;
const int LessInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

LessInfo::LessInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LessInfo::InitAsDefaultInstance() {
  instancelist_ = const_cast< ::PlayerInfo::InstanceInfoTwoDays*>(&::PlayerInfo::InstanceInfoTwoDays::default_instance());
  signin_ = const_cast< ::PlayerInfo::SignInInfo*>(&::PlayerInfo::SignInInfo::default_instance());
  counter_ = const_cast< ::PlayerInfo::CounterServiceList*>(&::PlayerInfo::CounterServiceList::default_instance());
  escort_ = const_cast< ::PlayerInfo::EscortInfo*>(&::PlayerInfo::EscortInfo::default_instance());
  playervip_ = const_cast< ::PlayerInfo::PlayerVipInfo*>(&::PlayerInfo::PlayerVipInfo::default_instance());
  prestige_ = const_cast< ::PlayerInfo::PrestigeInfoList*>(&::PlayerInfo::PrestigeInfoList::default_instance());
  title_ = const_cast< ::PlayerInfo::TitleInfoList*>(&::PlayerInfo::TitleInfoList::default_instance());
  fashion_ = const_cast< ::FashionMsgProto::FashionShow*>(&::FashionMsgProto::FashionShow::default_instance());
  vitality_ = const_cast< ::VitalityProto::ProtoVitalityInfo*>(&::VitalityProto::ProtoVitalityInfo::default_instance());
  campshopdata_ = const_cast< ::PlayerInfo::CampShopInfo*>(&::PlayerInfo::CampShopInfo::default_instance());
  festivaldata_ = const_cast< ::PlayerInfo::FestivalInfo*>(&::PlayerInfo::FestivalInfo::default_instance());
  info_ = const_cast< ::PlayerInfo::MoneyInstance*>(&::PlayerInfo::MoneyInstance::default_instance());
}

LessInfo::LessInfo(const LessInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LessInfo::SharedCtor() {
  _cached_size_ = 0;
  instancelist_ = NULL;
  signin_ = NULL;
  counter_ = NULL;
  escort_ = NULL;
  playervip_ = NULL;
  prestige_ = NULL;
  title_ = NULL;
  fashion_ = NULL;
  vitality_ = NULL;
  campshopdata_ = NULL;
  festivaldata_ = NULL;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LessInfo::~LessInfo() {
  SharedDtor();
}

void LessInfo::SharedDtor() {
  if (this != default_instance_) {
    delete instancelist_;
    delete signin_;
    delete counter_;
    delete escort_;
    delete playervip_;
    delete prestige_;
    delete title_;
    delete fashion_;
    delete vitality_;
    delete campshopdata_;
    delete festivaldata_;
    delete info_;
  }
}

void LessInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LessInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LessInfo_descriptor_;
}

const LessInfo& LessInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

LessInfo* LessInfo::default_instance_ = NULL;

LessInfo* LessInfo::New() const {
  return new LessInfo;
}

void LessInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_instancelist()) {
      if (instancelist_ != NULL) instancelist_->::PlayerInfo::InstanceInfoTwoDays::Clear();
    }
    if (has_signin()) {
      if (signin_ != NULL) signin_->::PlayerInfo::SignInInfo::Clear();
    }
    if (has_counter()) {
      if (counter_ != NULL) counter_->::PlayerInfo::CounterServiceList::Clear();
    }
    if (has_escort()) {
      if (escort_ != NULL) escort_->::PlayerInfo::EscortInfo::Clear();
    }
    if (has_playervip()) {
      if (playervip_ != NULL) playervip_->::PlayerInfo::PlayerVipInfo::Clear();
    }
    if (has_prestige()) {
      if (prestige_ != NULL) prestige_->::PlayerInfo::PrestigeInfoList::Clear();
    }
    if (has_title()) {
      if (title_ != NULL) title_->::PlayerInfo::TitleInfoList::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_fashion()) {
      if (fashion_ != NULL) fashion_->::FashionMsgProto::FashionShow::Clear();
    }
    if (has_vitality()) {
      if (vitality_ != NULL) vitality_->::VitalityProto::ProtoVitalityInfo::Clear();
    }
    if (has_campshopdata()) {
      if (campshopdata_ != NULL) campshopdata_->::PlayerInfo::CampShopInfo::Clear();
    }
    if (has_festivaldata()) {
      if (festivaldata_ != NULL) festivaldata_->::PlayerInfo::FestivalInfo::Clear();
    }
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerInfo::MoneyInstance::Clear();
    }
  }
  type_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LessInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_type())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_type())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_type;
        if (input->ExpectTag(18)) goto parse_instanceList;
        break;
      }

      // optional .PlayerInfo.InstanceInfoTwoDays instanceList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_instanceList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_instancelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_signin;
        break;
      }

      // optional .PlayerInfo.SignInInfo signin = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_signin:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_signin()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_counter;
        break;
      }

      // optional .PlayerInfo.CounterServiceList counter = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_counter:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_counter()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_escort;
        break;
      }

      // optional .PlayerInfo.EscortInfo escort = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_escort:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_escort()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_playerVip;
        break;
      }

      // optional .PlayerInfo.PlayerVipInfo playerVip = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerVip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_playervip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_prestige;
        break;
      }

      // optional .PlayerInfo.PrestigeInfoList prestige = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prestige:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_prestige()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_title;
        break;
      }

      // optional .PlayerInfo.TitleInfoList title = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_title:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_title()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_fashion;
        break;
      }

      // optional .FashionMsgProto.FashionShow fashion = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fashion:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_fashion()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_vitality;
        break;
      }

      // optional .VitalityProto.ProtoVitalityInfo vitality = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_vitality:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_vitality()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_campShopData;
        break;
      }

      // optional .PlayerInfo.CampShopInfo campShopData = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_campShopData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_campshopdata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_festivalData;
        break;
      }

      // optional .PlayerInfo.FestivalInfo festivalData = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_festivalData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_festivaldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_info;
        break;
      }

      // optional .PlayerInfo.MoneyInstance info = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LessInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->type(i), output);
  }

  // optional .PlayerInfo.InstanceInfoTwoDays instanceList = 2;
  if (has_instancelist()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->instancelist(), output);
  }

  // optional .PlayerInfo.SignInInfo signin = 3;
  if (has_signin()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->signin(), output);
  }

  // optional .PlayerInfo.CounterServiceList counter = 4;
  if (has_counter()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->counter(), output);
  }

  // optional .PlayerInfo.EscortInfo escort = 5;
  if (has_escort()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->escort(), output);
  }

  // optional .PlayerInfo.PlayerVipInfo playerVip = 6;
  if (has_playervip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->playervip(), output);
  }

  // optional .PlayerInfo.PrestigeInfoList prestige = 7;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->prestige(), output);
  }

  // optional .PlayerInfo.TitleInfoList title = 8;
  if (has_title()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->title(), output);
  }

  // optional .FashionMsgProto.FashionShow fashion = 9;
  if (has_fashion()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->fashion(), output);
  }

  // optional .VitalityProto.ProtoVitalityInfo vitality = 10;
  if (has_vitality()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->vitality(), output);
  }

  // optional .PlayerInfo.CampShopInfo campShopData = 11;
  if (has_campshopdata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      11, this->campshopdata(), output);
  }

  // optional .PlayerInfo.FestivalInfo festivalData = 12;
  if (has_festivaldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      12, this->festivaldata(), output);
  }

  // optional .PlayerInfo.MoneyInstance info = 13;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      13, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LessInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 type = 1;
  for (int i = 0; i < this->type_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->type(i), target);
  }

  // optional .PlayerInfo.InstanceInfoTwoDays instanceList = 2;
  if (has_instancelist()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->instancelist(), target);
  }

  // optional .PlayerInfo.SignInInfo signin = 3;
  if (has_signin()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->signin(), target);
  }

  // optional .PlayerInfo.CounterServiceList counter = 4;
  if (has_counter()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->counter(), target);
  }

  // optional .PlayerInfo.EscortInfo escort = 5;
  if (has_escort()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->escort(), target);
  }

  // optional .PlayerInfo.PlayerVipInfo playerVip = 6;
  if (has_playervip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->playervip(), target);
  }

  // optional .PlayerInfo.PrestigeInfoList prestige = 7;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->prestige(), target);
  }

  // optional .PlayerInfo.TitleInfoList title = 8;
  if (has_title()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->title(), target);
  }

  // optional .FashionMsgProto.FashionShow fashion = 9;
  if (has_fashion()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->fashion(), target);
  }

  // optional .VitalityProto.ProtoVitalityInfo vitality = 10;
  if (has_vitality()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->vitality(), target);
  }

  // optional .PlayerInfo.CampShopInfo campShopData = 11;
  if (has_campshopdata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        11, this->campshopdata(), target);
  }

  // optional .PlayerInfo.FestivalInfo festivalData = 12;
  if (has_festivaldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        12, this->festivaldata(), target);
  }

  // optional .PlayerInfo.MoneyInstance info = 13;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        13, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LessInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional .PlayerInfo.InstanceInfoTwoDays instanceList = 2;
    if (has_instancelist()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->instancelist());
    }

    // optional .PlayerInfo.SignInInfo signin = 3;
    if (has_signin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->signin());
    }

    // optional .PlayerInfo.CounterServiceList counter = 4;
    if (has_counter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->counter());
    }

    // optional .PlayerInfo.EscortInfo escort = 5;
    if (has_escort()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->escort());
    }

    // optional .PlayerInfo.PlayerVipInfo playerVip = 6;
    if (has_playervip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->playervip());
    }

    // optional .PlayerInfo.PrestigeInfoList prestige = 7;
    if (has_prestige()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->prestige());
    }

    // optional .PlayerInfo.TitleInfoList title = 8;
    if (has_title()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->title());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .FashionMsgProto.FashionShow fashion = 9;
    if (has_fashion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->fashion());
    }

    // optional .VitalityProto.ProtoVitalityInfo vitality = 10;
    if (has_vitality()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->vitality());
    }

    // optional .PlayerInfo.CampShopInfo campShopData = 11;
    if (has_campshopdata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->campshopdata());
    }

    // optional .PlayerInfo.FestivalInfo festivalData = 12;
    if (has_festivaldata()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->festivaldata());
    }

    // optional .PlayerInfo.MoneyInstance info = 13;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  // repeated int32 type = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->type_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->type(i));
    }
    total_size += 1 * this->type_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LessInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LessInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LessInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LessInfo::MergeFrom(const LessInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  type_.MergeFrom(from.type_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_instancelist()) {
      mutable_instancelist()->::PlayerInfo::InstanceInfoTwoDays::MergeFrom(from.instancelist());
    }
    if (from.has_signin()) {
      mutable_signin()->::PlayerInfo::SignInInfo::MergeFrom(from.signin());
    }
    if (from.has_counter()) {
      mutable_counter()->::PlayerInfo::CounterServiceList::MergeFrom(from.counter());
    }
    if (from.has_escort()) {
      mutable_escort()->::PlayerInfo::EscortInfo::MergeFrom(from.escort());
    }
    if (from.has_playervip()) {
      mutable_playervip()->::PlayerInfo::PlayerVipInfo::MergeFrom(from.playervip());
    }
    if (from.has_prestige()) {
      mutable_prestige()->::PlayerInfo::PrestigeInfoList::MergeFrom(from.prestige());
    }
    if (from.has_title()) {
      mutable_title()->::PlayerInfo::TitleInfoList::MergeFrom(from.title());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_fashion()) {
      mutable_fashion()->::FashionMsgProto::FashionShow::MergeFrom(from.fashion());
    }
    if (from.has_vitality()) {
      mutable_vitality()->::VitalityProto::ProtoVitalityInfo::MergeFrom(from.vitality());
    }
    if (from.has_campshopdata()) {
      mutable_campshopdata()->::PlayerInfo::CampShopInfo::MergeFrom(from.campshopdata());
    }
    if (from.has_festivaldata()) {
      mutable_festivaldata()->::PlayerInfo::FestivalInfo::MergeFrom(from.festivaldata());
    }
    if (from.has_info()) {
      mutable_info()->::PlayerInfo::MoneyInstance::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LessInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LessInfo::CopyFrom(const LessInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LessInfo::IsInitialized() const {

  if (has_instancelist()) {
    if (!this->instancelist().IsInitialized()) return false;
  }
  if (has_prestige()) {
    if (!this->prestige().IsInitialized()) return false;
  }
  if (has_title()) {
    if (!this->title().IsInitialized()) return false;
  }
  if (has_fashion()) {
    if (!this->fashion().IsInitialized()) return false;
  }
  if (has_vitality()) {
    if (!this->vitality().IsInitialized()) return false;
  }
  return true;
}

void LessInfo::Swap(LessInfo* other) {
  if (other != this) {
    type_.Swap(&other->type_);
    std::swap(instancelist_, other->instancelist_);
    std::swap(signin_, other->signin_);
    std::swap(counter_, other->counter_);
    std::swap(escort_, other->escort_);
    std::swap(playervip_, other->playervip_);
    std::swap(prestige_, other->prestige_);
    std::swap(title_, other->title_);
    std::swap(fashion_, other->fashion_);
    std::swap(vitality_, other->vitality_);
    std::swap(campshopdata_, other->campshopdata_);
    std::swap(festivaldata_, other->festivaldata_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LessInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LessInfo_descriptor_;
  metadata.reflection = LessInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoneInfo::kItemFieldNumber;
#endif  // !_MSC_VER

StoneInfo::StoneInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoneInfo::InitAsDefaultInstance() {
}

StoneInfo::StoneInfo(const StoneInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoneInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoneInfo::~StoneInfo() {
  SharedDtor();
}

void StoneInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoneInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoneInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoneInfo_descriptor_;
}

const StoneInfo& StoneInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

StoneInfo* StoneInfo::default_instance_ = NULL;

StoneInfo* StoneInfo::New() const {
  return new StoneInfo;
}

void StoneInfo::Clear() {
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoneInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.StoneItem item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoneInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.StoneItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoneInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.StoneItem item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoneInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerInfo.StoneItem item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoneInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoneInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoneInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoneInfo::MergeFrom(const StoneInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoneInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoneInfo::CopyFrom(const StoneInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoneInfo::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void StoneInfo::Swap(StoneInfo* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoneInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoneInfo_descriptor_;
  metadata.reflection = StoneInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoneItem::kPosFieldNumber;
const int StoneItem::kStoneidFieldNumber;
#endif  // !_MSC_VER

StoneItem::StoneItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoneItem::InitAsDefaultInstance() {
}

StoneItem::StoneItem(const StoneItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoneItem::SharedCtor() {
  _cached_size_ = 0;
  pos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoneItem::~StoneItem() {
  SharedDtor();
}

void StoneItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoneItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoneItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoneItem_descriptor_;
}

const StoneItem& StoneItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

StoneItem* StoneItem::default_instance_ = NULL;

StoneItem* StoneItem::New() const {
  return new StoneItem;
}

void StoneItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    pos_ = 0;
  }
  stoneid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoneItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 pos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stoneid;
        break;
      }

      // repeated int32 stoneid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_stoneid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stoneid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_stoneid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoneItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 pos = 1;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->pos(), output);
  }

  // repeated int32 stoneid = 2;
  for (int i = 0; i < this->stoneid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->stoneid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoneItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 pos = 1;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->pos(), target);
  }

  // repeated int32 stoneid = 2;
  for (int i = 0; i < this->stoneid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->stoneid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoneItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 pos = 1;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pos());
    }

  }
  // repeated int32 stoneid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->stoneid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stoneid(i));
    }
    total_size += 1 * this->stoneid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoneItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoneItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoneItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoneItem::MergeFrom(const StoneItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  stoneid_.MergeFrom(from.stoneid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_pos()) {
      set_pos(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoneItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoneItem::CopyFrom(const StoneItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoneItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void StoneItem::Swap(StoneItem* other) {
  if (other != this) {
    std::swap(pos_, other->pos_);
    stoneid_.Swap(&other->stoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoneItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoneItem_descriptor_;
  metadata.reflection = StoneItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBAchShopInfo::kTimeFieldNumber;
const int DBAchShopInfo::kItemFieldNumber;
#endif  // !_MSC_VER

DBAchShopInfo::DBAchShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBAchShopInfo::InitAsDefaultInstance() {
}

DBAchShopInfo::DBAchShopInfo(const DBAchShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBAchShopInfo::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBAchShopInfo::~DBAchShopInfo() {
  SharedDtor();
}

void DBAchShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBAchShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAchShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAchShopInfo_descriptor_;
}

const DBAchShopInfo& DBAchShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

DBAchShopInfo* DBAchShopInfo::default_instance_ = NULL;

DBAchShopInfo* DBAchShopInfo::New() const {
  return new DBAchShopInfo;
}

void DBAchShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBAchShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .PlayerInfo.DBAchShopItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBAchShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // repeated .PlayerInfo.DBAchShopItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBAchShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // repeated .PlayerInfo.DBAchShopItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBAchShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  // repeated .PlayerInfo.DBAchShopItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAchShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBAchShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBAchShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAchShopInfo::MergeFrom(const DBAchShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBAchShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAchShopInfo::CopyFrom(const DBAchShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAchShopInfo::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void DBAchShopInfo::Swap(DBAchShopInfo* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBAchShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAchShopInfo_descriptor_;
  metadata.reflection = DBAchShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBAchShopItem::kIdFieldNumber;
const int DBAchShopItem::kCountFieldNumber;
const int DBAchShopItem::kGoodsidFieldNumber;
#endif  // !_MSC_VER

DBAchShopItem::DBAchShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBAchShopItem::InitAsDefaultInstance() {
}

DBAchShopItem::DBAchShopItem(const DBAchShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBAchShopItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBAchShopItem::~DBAchShopItem() {
  SharedDtor();
}

void DBAchShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBAchShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBAchShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBAchShopItem_descriptor_;
}

const DBAchShopItem& DBAchShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

DBAchShopItem* DBAchShopItem::default_instance_ = NULL;

DBAchShopItem* DBAchShopItem::New() const {
  return new DBAchShopItem;
}

void DBAchShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  goodsid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBAchShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // required int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goodsid;
        break;
      }

      // repeated int32 goodsid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodsid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_goodsid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_goodsid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_goodsid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBAchShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  // repeated int32 goodsid = 3;
  for (int i = 0; i < this->goodsid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->goodsid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBAchShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  // repeated int32 goodsid = 3;
  for (int i = 0; i < this->goodsid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->goodsid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBAchShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  // repeated int32 goodsid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->goodsid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->goodsid(i));
    }
    total_size += 1 * this->goodsid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBAchShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBAchShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBAchShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBAchShopItem::MergeFrom(const DBAchShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodsid_.MergeFrom(from.goodsid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBAchShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBAchShopItem::CopyFrom(const DBAchShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBAchShopItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void DBAchShopItem::Swap(DBAchShopItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    goodsid_.Swap(&other->goodsid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBAchShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBAchShopItem_descriptor_;
  metadata.reflection = DBAchShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampShopInfo::kTimeFieldNumber;
const int CampShopInfo::kItemFieldNumber;
#endif  // !_MSC_VER

CampShopInfo::CampShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampShopInfo::InitAsDefaultInstance() {
}

CampShopInfo::CampShopInfo(const CampShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampShopInfo::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampShopInfo::~CampShopInfo() {
  SharedDtor();
}

void CampShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampShopInfo_descriptor_;
}

const CampShopInfo& CampShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

CampShopInfo* CampShopInfo::default_instance_ = NULL;

CampShopInfo* CampShopInfo::New() const {
  return new CampShopInfo;
}

void CampShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .PlayerInfo.CampShopItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // repeated .PlayerInfo.CampShopItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // repeated .PlayerInfo.CampShopItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  // repeated .PlayerInfo.CampShopItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampShopInfo::MergeFrom(const CampShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampShopInfo::CopyFrom(const CampShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampShopInfo::IsInitialized() const {

  return true;
}

void CampShopInfo::Swap(CampShopInfo* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampShopInfo_descriptor_;
  metadata.reflection = CampShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CampShopItem::kIdFieldNumber;
const int CampShopItem::kNumsFieldNumber;
#endif  // !_MSC_VER

CampShopItem::CampShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CampShopItem::InitAsDefaultInstance() {
}

CampShopItem::CampShopItem(const CampShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CampShopItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  nums_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CampShopItem::~CampShopItem() {
  SharedDtor();
}

void CampShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CampShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CampShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CampShopItem_descriptor_;
}

const CampShopItem& CampShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

CampShopItem* CampShopItem::default_instance_ = NULL;

CampShopItem* CampShopItem::New() const {
  return new CampShopItem;
}

void CampShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    nums_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CampShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nums;
        break;
      }

      // optional int32 nums = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nums_)));
          set_has_nums();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CampShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 nums = 2;
  if (has_nums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nums(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CampShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 nums = 2;
  if (has_nums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nums(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CampShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 nums = 2;
    if (has_nums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nums());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CampShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CampShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CampShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CampShopItem::MergeFrom(const CampShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nums()) {
      set_nums(from.nums());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CampShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CampShopItem::CopyFrom(const CampShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CampShopItem::IsInitialized() const {

  return true;
}

void CampShopItem::Swap(CampShopItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nums_, other->nums_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CampShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CampShopItem_descriptor_;
  metadata.reflection = CampShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FestivalInfo::kTimeFieldNumber;
const int FestivalInfo::kItemFieldNumber;
#endif  // !_MSC_VER

FestivalInfo::FestivalInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FestivalInfo::InitAsDefaultInstance() {
}

FestivalInfo::FestivalInfo(const FestivalInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FestivalInfo::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FestivalInfo::~FestivalInfo() {
  SharedDtor();
}

void FestivalInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FestivalInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FestivalInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FestivalInfo_descriptor_;
}

const FestivalInfo& FestivalInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

FestivalInfo* FestivalInfo::default_instance_ = NULL;

FestivalInfo* FestivalInfo::New() const {
  return new FestivalInfo;
}

void FestivalInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FestivalInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .PlayerInfo.festivalItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FestivalInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // repeated .PlayerInfo.festivalItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FestivalInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // repeated .PlayerInfo.festivalItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FestivalInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  // repeated .PlayerInfo.festivalItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FestivalInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FestivalInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FestivalInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FestivalInfo::MergeFrom(const FestivalInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FestivalInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FestivalInfo::CopyFrom(const FestivalInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FestivalInfo::IsInitialized() const {

  return true;
}

void FestivalInfo::Swap(FestivalInfo* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FestivalInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FestivalInfo_descriptor_;
  metadata.reflection = FestivalInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int festivalItem::kIdFieldNumber;
const int festivalItem::kNumsFieldNumber;
#endif  // !_MSC_VER

festivalItem::festivalItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void festivalItem::InitAsDefaultInstance() {
}

festivalItem::festivalItem(const festivalItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void festivalItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  nums_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

festivalItem::~festivalItem() {
  SharedDtor();
}

void festivalItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void festivalItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* festivalItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return festivalItem_descriptor_;
}

const festivalItem& festivalItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

festivalItem* festivalItem::default_instance_ = NULL;

festivalItem* festivalItem::New() const {
  return new festivalItem;
}

void festivalItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    nums_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool festivalItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nums;
        break;
      }

      // optional int32 nums = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nums_)));
          set_has_nums();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void festivalItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 nums = 2;
  if (has_nums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nums(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* festivalItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 nums = 2;
  if (has_nums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nums(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int festivalItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 nums = 2;
    if (has_nums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nums());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void festivalItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const festivalItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const festivalItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void festivalItem::MergeFrom(const festivalItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nums()) {
      set_nums(from.nums());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void festivalItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void festivalItem::CopyFrom(const festivalItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool festivalItem::IsInitialized() const {

  return true;
}

void festivalItem::Swap(festivalItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nums_, other->nums_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata festivalItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = festivalItem_descriptor_;
  metadata.reflection = festivalItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MoneyInstance::kMapIdFieldNumber;
const int MoneyInstance::kPassFieldNumber;
const int MoneyInstance::kNumFieldNumber;
const int MoneyInstance::kBuytimesFieldNumber;
const int MoneyInstance::kResetFieldNumber;
const int MoneyInstance::kUpdatetimeFieldNumber;
#endif  // !_MSC_VER

MoneyInstance::MoneyInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MoneyInstance::InitAsDefaultInstance() {
}

MoneyInstance::MoneyInstance(const MoneyInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MoneyInstance::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pass_ = 0;
  num_ = 0;
  buytimes_ = 0;
  reset_ = 0;
  updatetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MoneyInstance::~MoneyInstance() {
  SharedDtor();
}

void MoneyInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MoneyInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MoneyInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MoneyInstance_descriptor_;
}

const MoneyInstance& MoneyInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

MoneyInstance* MoneyInstance::default_instance_ = NULL;

MoneyInstance* MoneyInstance::New() const {
  return new MoneyInstance;
}

void MoneyInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    pass_ = 0;
    num_ = 0;
    buytimes_ = 0;
    reset_ = 0;
    updatetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MoneyInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }

      // optional int32 pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buytimes;
        break;
      }

      // optional int32 buytimes = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buytimes:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buytimes_)));
          set_has_buytimes();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reset;
        break;
      }

      // optional int32 reset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_updatetime;
        break;
      }

      // optional int64 updatetime = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_updatetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &updatetime_)));
          set_has_updatetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MoneyInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 buytimes = 4;
  if (has_buytimes()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buytimes(), output);
  }

  // optional int32 reset = 5;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reset(), output);
  }

  // optional int64 updatetime = 6;
  if (has_updatetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->updatetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MoneyInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 buytimes = 4;
  if (has_buytimes()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buytimes(), target);
  }

  // optional int32 reset = 5;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reset(), target);
  }

  // optional int64 updatetime = 6;
  if (has_updatetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->updatetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MoneyInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 buytimes = 4;
    if (has_buytimes()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buytimes());
    }

    // optional int32 reset = 5;
    if (has_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset());
    }

    // optional int64 updatetime = 6;
    if (has_updatetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->updatetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MoneyInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MoneyInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MoneyInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MoneyInstance::MergeFrom(const MoneyInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_buytimes()) {
      set_buytimes(from.buytimes());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
    if (from.has_updatetime()) {
      set_updatetime(from.updatetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MoneyInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MoneyInstance::CopyFrom(const MoneyInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MoneyInstance::IsInitialized() const {

  return true;
}

void MoneyInstance::Swap(MoneyInstance* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pass_, other->pass_);
    std::swap(num_, other->num_);
    std::swap(buytimes_, other->buytimes_);
    std::swap(reset_, other->reset_);
    std::swap(updatetime_, other->updatetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MoneyInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MoneyInstance_descriptor_;
  metadata.reflection = MoneyInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ChallengeInstance::kLayerFieldNumber;
const int ChallengeInstance::kMaxlayerFieldNumber;
#endif  // !_MSC_VER

ChallengeInstance::ChallengeInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ChallengeInstance::InitAsDefaultInstance() {
}

ChallengeInstance::ChallengeInstance(const ChallengeInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ChallengeInstance::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0;
  maxlayer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ChallengeInstance::~ChallengeInstance() {
  SharedDtor();
}

void ChallengeInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ChallengeInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ChallengeInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ChallengeInstance_descriptor_;
}

const ChallengeInstance& ChallengeInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

ChallengeInstance* ChallengeInstance::default_instance_ = NULL;

ChallengeInstance* ChallengeInstance::New() const {
  return new ChallengeInstance;
}

void ChallengeInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layer_ = 0;
    maxlayer_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ChallengeInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_maxlayer;
        break;
      }

      // optional int32 maxlayer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxlayer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxlayer_)));
          set_has_maxlayer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ChallengeInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layer(), output);
  }

  // optional int32 maxlayer = 2;
  if (has_maxlayer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->maxlayer(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ChallengeInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layer(), target);
  }

  // optional int32 maxlayer = 2;
  if (has_maxlayer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->maxlayer(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ChallengeInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

    // optional int32 maxlayer = 2;
    if (has_maxlayer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxlayer());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ChallengeInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ChallengeInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ChallengeInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ChallengeInstance::MergeFrom(const ChallengeInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
    if (from.has_maxlayer()) {
      set_maxlayer(from.maxlayer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ChallengeInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ChallengeInstance::CopyFrom(const ChallengeInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ChallengeInstance::IsInitialized() const {

  return true;
}

void ChallengeInstance::Swap(ChallengeInstance* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    std::swap(maxlayer_, other->maxlayer_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ChallengeInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ChallengeInstance_descriptor_;
  metadata.reflection = ChallengeInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int HeroInstanceData::kLayerFieldNumber;
const int HeroInstanceData::kFetchsFieldNumber;
#endif  // !_MSC_VER

HeroInstanceData::HeroInstanceData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void HeroInstanceData::InitAsDefaultInstance() {
}

HeroInstanceData::HeroInstanceData(const HeroInstanceData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void HeroInstanceData::SharedCtor() {
  _cached_size_ = 0;
  layer_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

HeroInstanceData::~HeroInstanceData() {
  SharedDtor();
}

void HeroInstanceData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void HeroInstanceData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* HeroInstanceData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return HeroInstanceData_descriptor_;
}

const HeroInstanceData& HeroInstanceData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

HeroInstanceData* HeroInstanceData::default_instance_ = NULL;

HeroInstanceData* HeroInstanceData::New() const {
  return new HeroInstanceData;
}

void HeroInstanceData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    layer_ = 0;
  }
  fetchs_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool HeroInstanceData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 layer = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &layer_)));
          set_has_layer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fetchs;
        break;
      }

      // repeated int32 fetchs = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetchs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_fetchs())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_fetchs())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fetchs;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void HeroInstanceData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 layer = 1;
  if (has_layer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->layer(), output);
  }

  // repeated int32 fetchs = 2;
  for (int i = 0; i < this->fetchs_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->fetchs(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* HeroInstanceData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 layer = 1;
  if (has_layer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->layer(), target);
  }

  // repeated int32 fetchs = 2;
  for (int i = 0; i < this->fetchs_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->fetchs(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int HeroInstanceData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 layer = 1;
    if (has_layer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->layer());
    }

  }
  // repeated int32 fetchs = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->fetchs_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->fetchs(i));
    }
    total_size += 1 * this->fetchs_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void HeroInstanceData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const HeroInstanceData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const HeroInstanceData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void HeroInstanceData::MergeFrom(const HeroInstanceData& from) {
  GOOGLE_CHECK_NE(&from, this);
  fetchs_.MergeFrom(from.fetchs_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_layer()) {
      set_layer(from.layer());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void HeroInstanceData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void HeroInstanceData::CopyFrom(const HeroInstanceData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool HeroInstanceData::IsInitialized() const {

  return true;
}

void HeroInstanceData::Swap(HeroInstanceData* other) {
  if (other != this) {
    std::swap(layer_, other->layer_);
    fetchs_.Swap(&other->fetchs_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata HeroInstanceData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = HeroInstanceData_descriptor_;
  metadata.reflection = HeroInstanceData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BranchLineInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

BranchLineInfo::BranchLineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BranchLineInfo::InitAsDefaultInstance() {
}

BranchLineInfo::BranchLineInfo(const BranchLineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BranchLineInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BranchLineInfo::~BranchLineInfo() {
  SharedDtor();
}

void BranchLineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BranchLineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BranchLineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BranchLineInfo_descriptor_;
}

const BranchLineInfo& BranchLineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

BranchLineInfo* BranchLineInfo::default_instance_ = NULL;

BranchLineInfo* BranchLineInfo::New() const {
  return new BranchLineInfo;
}

void BranchLineInfo::Clear() {
  info_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BranchLineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.LineMapInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_info;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BranchLineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.LineMapInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BranchLineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.LineMapInfo info = 1;
  for (int i = 0; i < this->info_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BranchLineInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerInfo.LineMapInfo info = 1;
  total_size += 1 * this->info_size();
  for (int i = 0; i < this->info_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->info(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BranchLineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BranchLineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BranchLineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BranchLineInfo::MergeFrom(const BranchLineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  info_.MergeFrom(from.info_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BranchLineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BranchLineInfo::CopyFrom(const BranchLineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BranchLineInfo::IsInitialized() const {

  for (int i = 0; i < info_size(); i++) {
    if (!this->info(i).IsInitialized()) return false;
  }
  return true;
}

void BranchLineInfo::Swap(BranchLineInfo* other) {
  if (other != this) {
    info_.Swap(&other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BranchLineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BranchLineInfo_descriptor_;
  metadata.reflection = BranchLineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TotalBranchLineInfo::kListFieldNumber;
#endif  // !_MSC_VER

TotalBranchLineInfo::TotalBranchLineInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TotalBranchLineInfo::InitAsDefaultInstance() {
}

TotalBranchLineInfo::TotalBranchLineInfo(const TotalBranchLineInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TotalBranchLineInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TotalBranchLineInfo::~TotalBranchLineInfo() {
  SharedDtor();
}

void TotalBranchLineInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TotalBranchLineInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TotalBranchLineInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TotalBranchLineInfo_descriptor_;
}

const TotalBranchLineInfo& TotalBranchLineInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

TotalBranchLineInfo* TotalBranchLineInfo::default_instance_ = NULL;

TotalBranchLineInfo* TotalBranchLineInfo::New() const {
  return new TotalBranchLineInfo;
}

void TotalBranchLineInfo::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TotalBranchLineInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.BranchLineInfo list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TotalBranchLineInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.BranchLineInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TotalBranchLineInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.BranchLineInfo list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TotalBranchLineInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerInfo.BranchLineInfo list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TotalBranchLineInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TotalBranchLineInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TotalBranchLineInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TotalBranchLineInfo::MergeFrom(const TotalBranchLineInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TotalBranchLineInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TotalBranchLineInfo::CopyFrom(const TotalBranchLineInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TotalBranchLineInfo::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void TotalBranchLineInfo::Swap(TotalBranchLineInfo* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TotalBranchLineInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TotalBranchLineInfo_descriptor_;
  metadata.reflection = TotalBranchLineInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientIEInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

ClientIEInfo::ClientIEInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientIEInfo::InitAsDefaultInstance() {
}

ClientIEInfo::ClientIEInfo(const ClientIEInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientIEInfo::SharedCtor() {
  _cached_size_ = 0;
  info_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientIEInfo::~ClientIEInfo() {
  SharedDtor();
}

void ClientIEInfo::SharedDtor() {
  if (info_ != &::google::protobuf::internal::kEmptyString) {
    delete info_;
  }
  if (this != default_instance_) {
  }
}

void ClientIEInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientIEInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientIEInfo_descriptor_;
}

const ClientIEInfo& ClientIEInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

ClientIEInfo* ClientIEInfo::default_instance_ = NULL;

ClientIEInfo* ClientIEInfo::New() const {
  return new ClientIEInfo;
}

void ClientIEInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != &::google::protobuf::internal::kEmptyString) {
        info_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientIEInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_info()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->info().data(), this->info().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientIEInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientIEInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->info().data(), this->info().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientIEInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientIEInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientIEInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientIEInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientIEInfo::MergeFrom(const ClientIEInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      set_info(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientIEInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientIEInfo::CopyFrom(const ClientIEInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientIEInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientIEInfo::Swap(ClientIEInfo* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientIEInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientIEInfo_descriptor_;
  metadata.reflection = ClientIEInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OnceRewardInfo::kMicroRewardFlagFieldNumber;
const int OnceRewardInfo::kFirstChargeOverFlagFieldNumber;
#endif  // !_MSC_VER

OnceRewardInfo::OnceRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OnceRewardInfo::InitAsDefaultInstance() {
}

OnceRewardInfo::OnceRewardInfo(const OnceRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OnceRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  microrewardflag_ = false;
  firstchargeoverflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OnceRewardInfo::~OnceRewardInfo() {
  SharedDtor();
}

void OnceRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OnceRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OnceRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OnceRewardInfo_descriptor_;
}

const OnceRewardInfo& OnceRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

OnceRewardInfo* OnceRewardInfo::default_instance_ = NULL;

OnceRewardInfo* OnceRewardInfo::New() const {
  return new OnceRewardInfo;
}

void OnceRewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    microrewardflag_ = false;
    firstchargeoverflag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OnceRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool microRewardFlag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &microrewardflag_)));
          set_has_microrewardflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_firstChargeOverFlag;
        break;
      }

      // optional bool firstChargeOverFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firstChargeOverFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &firstchargeoverflag_)));
          set_has_firstchargeoverflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OnceRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool microRewardFlag = 1;
  if (has_microrewardflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->microrewardflag(), output);
  }

  // optional bool firstChargeOverFlag = 2;
  if (has_firstchargeoverflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->firstchargeoverflag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OnceRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool microRewardFlag = 1;
  if (has_microrewardflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->microrewardflag(), target);
  }

  // optional bool firstChargeOverFlag = 2;
  if (has_firstchargeoverflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->firstchargeoverflag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OnceRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool microRewardFlag = 1;
    if (has_microrewardflag()) {
      total_size += 1 + 1;
    }

    // optional bool firstChargeOverFlag = 2;
    if (has_firstchargeoverflag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OnceRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OnceRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OnceRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OnceRewardInfo::MergeFrom(const OnceRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_microrewardflag()) {
      set_microrewardflag(from.microrewardflag());
    }
    if (from.has_firstchargeoverflag()) {
      set_firstchargeoverflag(from.firstchargeoverflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OnceRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OnceRewardInfo::CopyFrom(const OnceRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OnceRewardInfo::IsInitialized() const {

  return true;
}

void OnceRewardInfo::Swap(OnceRewardInfo* other) {
  if (other != this) {
    std::swap(microrewardflag_, other->microrewardflag_);
    std::swap(firstchargeoverflag_, other->firstchargeoverflag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OnceRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OnceRewardInfo_descriptor_;
  metadata.reflection = OnceRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GroupInstance::kTimeResetFieldNumber;
const int GroupInstance::kGroupListFieldNumber;
#endif  // !_MSC_VER

GroupInstance::GroupInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GroupInstance::InitAsDefaultInstance() {
}

GroupInstance::GroupInstance(const GroupInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GroupInstance::SharedCtor() {
  _cached_size_ = 0;
  timereset_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GroupInstance::~GroupInstance() {
  SharedDtor();
}

void GroupInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GroupInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GroupInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GroupInstance_descriptor_;
}

const GroupInstance& GroupInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

GroupInstance* GroupInstance::default_instance_ = NULL;

GroupInstance* GroupInstance::New() const {
  return new GroupInstance;
}

void GroupInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    timereset_ = GOOGLE_LONGLONG(0);
  }
  grouplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GroupInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 timeReset = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timereset_)));
          set_has_timereset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupList;
        break;
      }

      // repeated .PlayerInfo.InstanceGroupList groupList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_grouplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_groupList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GroupInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 timeReset = 1;
  if (has_timereset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->timereset(), output);
  }

  // repeated .PlayerInfo.InstanceGroupList groupList = 2;
  for (int i = 0; i < this->grouplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->grouplist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GroupInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 timeReset = 1;
  if (has_timereset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->timereset(), target);
  }

  // repeated .PlayerInfo.InstanceGroupList groupList = 2;
  for (int i = 0; i < this->grouplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->grouplist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GroupInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 timeReset = 1;
    if (has_timereset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timereset());
    }

  }
  // repeated .PlayerInfo.InstanceGroupList groupList = 2;
  total_size += 1 * this->grouplist_size();
  for (int i = 0; i < this->grouplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->grouplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GroupInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GroupInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GroupInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GroupInstance::MergeFrom(const GroupInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  grouplist_.MergeFrom(from.grouplist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_timereset()) {
      set_timereset(from.timereset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GroupInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GroupInstance::CopyFrom(const GroupInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GroupInstance::IsInitialized() const {

  for (int i = 0; i < grouplist_size(); i++) {
    if (!this->grouplist(i).IsInitialized()) return false;
  }
  return true;
}

void GroupInstance::Swap(GroupInstance* other) {
  if (other != this) {
    std::swap(timereset_, other->timereset_);
    grouplist_.Swap(&other->grouplist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GroupInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GroupInstance_descriptor_;
  metadata.reflection = GroupInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceGroupList::kMapIdFieldNumber;
const int InstanceGroupList::kNumFieldNumber;
const int InstanceGroupList::kVipnumFieldNumber;
const int InstanceGroupList::kBuynumFieldNumber;
const int InstanceGroupList::kPassFieldNumber;
#endif  // !_MSC_VER

InstanceGroupList::InstanceGroupList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceGroupList::InitAsDefaultInstance() {
}

InstanceGroupList::InstanceGroupList(const InstanceGroupList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceGroupList::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  num_ = 0;
  vipnum_ = 0;
  buynum_ = 0;
  pass_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceGroupList::~InstanceGroupList() {
  SharedDtor();
}

void InstanceGroupList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceGroupList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceGroupList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceGroupList_descriptor_;
}

const InstanceGroupList& InstanceGroupList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

InstanceGroupList* InstanceGroupList::default_instance_ = NULL;

InstanceGroupList* InstanceGroupList::New() const {
  return new InstanceGroupList;
}

void InstanceGroupList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    num_ = 0;
    vipnum_ = 0;
    buynum_ = 0;
    pass_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceGroupList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_vipnum;
        break;
      }

      // optional int32 vipnum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipnum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipnum_)));
          set_has_vipnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_buynum;
        break;
      }

      // optional int32 buynum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buynum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buynum_)));
          set_has_buynum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_pass;
        break;
      }

      // optional int32 pass = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceGroupList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  // optional int32 vipnum = 3;
  if (has_vipnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->vipnum(), output);
  }

  // optional int32 buynum = 4;
  if (has_buynum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->buynum(), output);
  }

  // optional int32 pass = 5;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->pass(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceGroupList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  // optional int32 vipnum = 3;
  if (has_vipnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->vipnum(), target);
  }

  // optional int32 buynum = 4;
  if (has_buynum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->buynum(), target);
  }

  // optional int32 pass = 5;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->pass(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceGroupList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 vipnum = 3;
    if (has_vipnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipnum());
    }

    // optional int32 buynum = 4;
    if (has_buynum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buynum());
    }

    // optional int32 pass = 5;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceGroupList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceGroupList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceGroupList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceGroupList::MergeFrom(const InstanceGroupList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_vipnum()) {
      set_vipnum(from.vipnum());
    }
    if (from.has_buynum()) {
      set_buynum(from.buynum());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceGroupList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceGroupList::CopyFrom(const InstanceGroupList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceGroupList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstanceGroupList::Swap(InstanceGroupList* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(num_, other->num_);
    std::swap(vipnum_, other->vipnum_);
    std::swap(buynum_, other->buynum_);
    std::swap(pass_, other->pass_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceGroupList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceGroupList_descriptor_;
  metadata.reflection = InstanceGroupList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EliteInstance::kListFieldNumber;
#endif  // !_MSC_VER

EliteInstance::EliteInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EliteInstance::InitAsDefaultInstance() {
}

EliteInstance::EliteInstance(const EliteInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EliteInstance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EliteInstance::~EliteInstance() {
  SharedDtor();
}

void EliteInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EliteInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EliteInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EliteInstance_descriptor_;
}

const EliteInstance& EliteInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

EliteInstance* EliteInstance::default_instance_ = NULL;

EliteInstance* EliteInstance::New() const {
  return new EliteInstance;
}

void EliteInstance::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EliteInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.InstanceEliteList list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EliteInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.InstanceEliteList list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EliteInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.InstanceEliteList list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EliteInstance::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerInfo.InstanceEliteList list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EliteInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EliteInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EliteInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EliteInstance::MergeFrom(const EliteInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EliteInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EliteInstance::CopyFrom(const EliteInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EliteInstance::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void EliteInstance::Swap(EliteInstance* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EliteInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EliteInstance_descriptor_;
  metadata.reflection = EliteInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceEliteList::kMapIdFieldNumber;
const int InstanceEliteList::kPassFieldNumber;
const int InstanceEliteList::kNumFieldNumber;
const int InstanceEliteList::kTimeFieldNumber;
const int InstanceEliteList::kResetFieldNumber;
#endif  // !_MSC_VER

InstanceEliteList::InstanceEliteList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceEliteList::InitAsDefaultInstance() {
}

InstanceEliteList::InstanceEliteList(const InstanceEliteList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceEliteList::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pass_ = 0;
  num_ = 0;
  time_ = 0;
  reset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceEliteList::~InstanceEliteList() {
  SharedDtor();
}

void InstanceEliteList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceEliteList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceEliteList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceEliteList_descriptor_;
}

const InstanceEliteList& InstanceEliteList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

InstanceEliteList* InstanceEliteList::default_instance_ = NULL;

InstanceEliteList* InstanceEliteList::New() const {
  return new InstanceEliteList;
}

void InstanceEliteList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    pass_ = 0;
    num_ = 0;
    time_ = 0;
    reset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceEliteList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }

      // optional int32 pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reset;
        break;
      }

      // optional int32 reset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceEliteList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  // optional int32 reset = 5;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceEliteList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  // optional int32 reset = 5;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceEliteList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 reset = 5;
    if (has_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceEliteList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceEliteList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceEliteList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceEliteList::MergeFrom(const InstanceEliteList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceEliteList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceEliteList::CopyFrom(const InstanceEliteList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceEliteList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstanceEliteList::Swap(InstanceEliteList* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pass_, other->pass_);
    std::swap(num_, other->num_);
    std::swap(time_, other->time_);
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceEliteList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceEliteList_descriptor_;
  metadata.reflection = InstanceEliteList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CauchemarInstance::kListFieldNumber;
#endif  // !_MSC_VER

CauchemarInstance::CauchemarInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CauchemarInstance::InitAsDefaultInstance() {
}

CauchemarInstance::CauchemarInstance(const CauchemarInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CauchemarInstance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CauchemarInstance::~CauchemarInstance() {
  SharedDtor();
}

void CauchemarInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CauchemarInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CauchemarInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CauchemarInstance_descriptor_;
}

const CauchemarInstance& CauchemarInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

CauchemarInstance* CauchemarInstance::default_instance_ = NULL;

CauchemarInstance* CauchemarInstance::New() const {
  return new CauchemarInstance;
}

void CauchemarInstance::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CauchemarInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.InstanceCauchemarList list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CauchemarInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.InstanceCauchemarList list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CauchemarInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.InstanceCauchemarList list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CauchemarInstance::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerInfo.InstanceCauchemarList list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CauchemarInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CauchemarInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CauchemarInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CauchemarInstance::MergeFrom(const CauchemarInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CauchemarInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CauchemarInstance::CopyFrom(const CauchemarInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CauchemarInstance::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void CauchemarInstance::Swap(CauchemarInstance* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CauchemarInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CauchemarInstance_descriptor_;
  metadata.reflection = CauchemarInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceCauchemarList::kMapIdFieldNumber;
const int InstanceCauchemarList::kPassFieldNumber;
const int InstanceCauchemarList::kNumFieldNumber;
const int InstanceCauchemarList::kTimeFieldNumber;
const int InstanceCauchemarList::kResetFieldNumber;
#endif  // !_MSC_VER

InstanceCauchemarList::InstanceCauchemarList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceCauchemarList::InitAsDefaultInstance() {
}

InstanceCauchemarList::InstanceCauchemarList(const InstanceCauchemarList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceCauchemarList::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pass_ = 0;
  num_ = 0;
  time_ = 0;
  reset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceCauchemarList::~InstanceCauchemarList() {
  SharedDtor();
}

void InstanceCauchemarList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceCauchemarList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceCauchemarList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceCauchemarList_descriptor_;
}

const InstanceCauchemarList& InstanceCauchemarList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

InstanceCauchemarList* InstanceCauchemarList::default_instance_ = NULL;

InstanceCauchemarList* InstanceCauchemarList::New() const {
  return new InstanceCauchemarList;
}

void InstanceCauchemarList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    pass_ = 0;
    num_ = 0;
    time_ = 0;
    reset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceCauchemarList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }

      // optional int32 pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reset;
        break;
      }

      // optional int32 reset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceCauchemarList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  // optional int32 reset = 5;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceCauchemarList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  // optional int32 reset = 5;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceCauchemarList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 reset = 5;
    if (has_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceCauchemarList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceCauchemarList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceCauchemarList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceCauchemarList::MergeFrom(const InstanceCauchemarList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceCauchemarList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceCauchemarList::CopyFrom(const InstanceCauchemarList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceCauchemarList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstanceCauchemarList::Swap(InstanceCauchemarList* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pass_, other->pass_);
    std::swap(num_, other->num_);
    std::swap(time_, other->time_);
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceCauchemarList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceCauchemarList_descriptor_;
  metadata.reflection = InstanceCauchemarList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdvancedInstance::kListFieldNumber;
#endif  // !_MSC_VER

AdvancedInstance::AdvancedInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdvancedInstance::InitAsDefaultInstance() {
}

AdvancedInstance::AdvancedInstance(const AdvancedInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdvancedInstance::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdvancedInstance::~AdvancedInstance() {
  SharedDtor();
}

void AdvancedInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AdvancedInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdvancedInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdvancedInstance_descriptor_;
}

const AdvancedInstance& AdvancedInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

AdvancedInstance* AdvancedInstance::default_instance_ = NULL;

AdvancedInstance* AdvancedInstance::New() const {
  return new AdvancedInstance;
}

void AdvancedInstance::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdvancedInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.InstanceAdvancedList list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdvancedInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.InstanceAdvancedList list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdvancedInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.InstanceAdvancedList list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdvancedInstance::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerInfo.InstanceAdvancedList list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdvancedInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdvancedInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdvancedInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdvancedInstance::MergeFrom(const AdvancedInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdvancedInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdvancedInstance::CopyFrom(const AdvancedInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdvancedInstance::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void AdvancedInstance::Swap(AdvancedInstance* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdvancedInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdvancedInstance_descriptor_;
  metadata.reflection = AdvancedInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceAdvancedList::kMapIdFieldNumber;
const int InstanceAdvancedList::kPassFieldNumber;
const int InstanceAdvancedList::kNumFieldNumber;
const int InstanceAdvancedList::kTimeFieldNumber;
const int InstanceAdvancedList::kResetFieldNumber;
#endif  // !_MSC_VER

InstanceAdvancedList::InstanceAdvancedList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceAdvancedList::InitAsDefaultInstance() {
}

InstanceAdvancedList::InstanceAdvancedList(const InstanceAdvancedList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceAdvancedList::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  pass_ = 0;
  num_ = 0;
  time_ = 0;
  reset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceAdvancedList::~InstanceAdvancedList() {
  SharedDtor();
}

void InstanceAdvancedList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceAdvancedList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceAdvancedList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceAdvancedList_descriptor_;
}

const InstanceAdvancedList& InstanceAdvancedList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

InstanceAdvancedList* InstanceAdvancedList::default_instance_ = NULL;

InstanceAdvancedList* InstanceAdvancedList::New() const {
  return new InstanceAdvancedList;
}

void InstanceAdvancedList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
    pass_ = 0;
    num_ = 0;
    time_ = 0;
    reset_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceAdvancedList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pass;
        break;
      }

      // optional int32 pass = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pass:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pass_)));
          set_has_pass();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_time;
        break;
      }

      // optional int32 time = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_reset;
        break;
      }

      // optional int32 reset = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceAdvancedList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->pass(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 time = 4;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->time(), output);
  }

  // optional int32 reset = 5;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->reset(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceAdvancedList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapId = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  // optional int32 pass = 2;
  if (has_pass()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->pass(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 time = 4;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->time(), target);
  }

  // optional int32 reset = 5;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->reset(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceAdvancedList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapId = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 pass = 2;
    if (has_pass()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pass());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 time = 4;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional int32 reset = 5;
    if (has_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceAdvancedList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceAdvancedList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceAdvancedList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceAdvancedList::MergeFrom(const InstanceAdvancedList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_pass()) {
      set_pass(from.pass());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceAdvancedList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceAdvancedList::CopyFrom(const InstanceAdvancedList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceAdvancedList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InstanceAdvancedList::Swap(InstanceAdvancedList* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(pass_, other->pass_);
    std::swap(num_, other->num_);
    std::swap(time_, other->time_);
    std::swap(reset_, other->reset_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceAdvancedList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceAdvancedList_descriptor_;
  metadata.reflection = InstanceAdvancedList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseShopInfo::kFlushTimeFieldNumber;
const int BaseShopInfo::kListFieldNumber;
#endif  // !_MSC_VER

BaseShopInfo::BaseShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseShopInfo::InitAsDefaultInstance() {
}

BaseShopInfo::BaseShopInfo(const BaseShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseShopInfo::SharedCtor() {
  _cached_size_ = 0;
  flushtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseShopInfo::~BaseShopInfo() {
  SharedDtor();
}

void BaseShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaseShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseShopInfo_descriptor_;
}

const BaseShopInfo& BaseShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

BaseShopInfo* BaseShopInfo::default_instance_ = NULL;

BaseShopInfo* BaseShopInfo::New() const {
  return new BaseShopInfo;
}

void BaseShopInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flushtime_ = GOOGLE_LONGLONG(0);
  }
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 flushTime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &flushtime_)));
          set_has_flushtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        break;
      }

      // repeated .PlayerInfo.BaseShopInfoList list = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 flushTime = 1;
  if (has_flushtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->flushtime(), output);
  }

  // repeated .PlayerInfo.BaseShopInfoList list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 flushTime = 1;
  if (has_flushtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->flushtime(), target);
  }

  // repeated .PlayerInfo.BaseShopInfoList list = 2;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 flushTime = 1;
    if (has_flushtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->flushtime());
    }

  }
  // repeated .PlayerInfo.BaseShopInfoList list = 2;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseShopInfo::MergeFrom(const BaseShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flushtime()) {
      set_flushtime(from.flushtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseShopInfo::CopyFrom(const BaseShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseShopInfo::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void BaseShopInfo::Swap(BaseShopInfo* other) {
  if (other != this) {
    std::swap(flushtime_, other->flushtime_);
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseShopInfo_descriptor_;
  metadata.reflection = BaseShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseShopInfoList::kTypeFieldNumber;
const int BaseShopInfoList::kDataFieldNumber;
#endif  // !_MSC_VER

BaseShopInfoList::BaseShopInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseShopInfoList::InitAsDefaultInstance() {
}

BaseShopInfoList::BaseShopInfoList(const BaseShopInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseShopInfoList::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseShopInfoList::~BaseShopInfoList() {
  SharedDtor();
}

void BaseShopInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaseShopInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseShopInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseShopInfoList_descriptor_;
}

const BaseShopInfoList& BaseShopInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

BaseShopInfoList* BaseShopInfoList::default_instance_ = NULL;

BaseShopInfoList* BaseShopInfoList::New() const {
  return new BaseShopInfoList;
}

void BaseShopInfoList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseShopInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        break;
      }

      // repeated .PlayerInfo.BaseShopInfoData data = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseShopInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .PlayerInfo.BaseShopInfoData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseShopInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .PlayerInfo.BaseShopInfoData data = 2;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseShopInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .PlayerInfo.BaseShopInfoData data = 2;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseShopInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseShopInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseShopInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseShopInfoList::MergeFrom(const BaseShopInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseShopInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseShopInfoList::CopyFrom(const BaseShopInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseShopInfoList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BaseShopInfoList::Swap(BaseShopInfoList* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseShopInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseShopInfoList_descriptor_;
  metadata.reflection = BaseShopInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BaseShopInfoData::kIdFieldNumber;
const int BaseShopInfoData::kNumsFieldNumber;
#endif  // !_MSC_VER

BaseShopInfoData::BaseShopInfoData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BaseShopInfoData::InitAsDefaultInstance() {
}

BaseShopInfoData::BaseShopInfoData(const BaseShopInfoData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BaseShopInfoData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  nums_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BaseShopInfoData::~BaseShopInfoData() {
  SharedDtor();
}

void BaseShopInfoData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BaseShopInfoData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BaseShopInfoData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BaseShopInfoData_descriptor_;
}

const BaseShopInfoData& BaseShopInfoData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

BaseShopInfoData* BaseShopInfoData::default_instance_ = NULL;

BaseShopInfoData* BaseShopInfoData::New() const {
  return new BaseShopInfoData;
}

void BaseShopInfoData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    nums_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BaseShopInfoData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nums;
        break;
      }

      // optional int32 nums = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nums_)));
          set_has_nums();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BaseShopInfoData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 nums = 2;
  if (has_nums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nums(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BaseShopInfoData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 nums = 2;
  if (has_nums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nums(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BaseShopInfoData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 nums = 2;
    if (has_nums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nums());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BaseShopInfoData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BaseShopInfoData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BaseShopInfoData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BaseShopInfoData::MergeFrom(const BaseShopInfoData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nums()) {
      set_nums(from.nums());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BaseShopInfoData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BaseShopInfoData::CopyFrom(const BaseShopInfoData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BaseShopInfoData::IsInitialized() const {

  return true;
}

void BaseShopInfoData::Swap(BaseShopInfoData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nums_, other->nums_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BaseShopInfoData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BaseShopInfoData_descriptor_;
  metadata.reflection = BaseShopInfoData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AnswerInfo::kCurrentIndexFieldNumber;
const int AnswerInfo::kCurrentTitleIDFieldNumber;
const int AnswerInfo::kRightCountsFieldNumber;
const int AnswerInfo::kWrongCountsFieldNumber;
const int AnswerInfo::kTitleAnswerIdsFieldNumber;
#endif  // !_MSC_VER

AnswerInfo::AnswerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AnswerInfo::InitAsDefaultInstance() {
}

AnswerInfo::AnswerInfo(const AnswerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AnswerInfo::SharedCtor() {
  _cached_size_ = 0;
  currentindex_ = 0;
  currenttitleid_ = 0;
  rightcounts_ = 0;
  wrongcounts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AnswerInfo::~AnswerInfo() {
  SharedDtor();
}

void AnswerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AnswerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AnswerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AnswerInfo_descriptor_;
}

const AnswerInfo& AnswerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  return *default_instance_;
}

AnswerInfo* AnswerInfo::default_instance_ = NULL;

AnswerInfo* AnswerInfo::New() const {
  return new AnswerInfo;
}

void AnswerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currentindex_ = 0;
    currenttitleid_ = 0;
    rightcounts_ = 0;
    wrongcounts_ = 0;
  }
  titleanswerids_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AnswerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 currentIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentindex_)));
          set_has_currentindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currentTitleID;
        break;
      }

      // optional int32 currentTitleID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentTitleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currenttitleid_)));
          set_has_currenttitleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rightCounts;
        break;
      }

      // optional int32 rightCounts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightcounts_)));
          set_has_rightcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wrongCounts;
        break;
      }

      // optional int32 wrongCounts = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wrongCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wrongcounts_)));
          set_has_wrongcounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_titleAnswerIds;
        break;
      }

      // repeated int32 titleAnswerIds = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleAnswerIds:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_titleanswerids())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_titleanswerids())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_titleAnswerIds;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AnswerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 currentIndex = 1;
  if (has_currentindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currentindex(), output);
  }

  // optional int32 currentTitleID = 2;
  if (has_currenttitleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currenttitleid(), output);
  }

  // optional int32 rightCounts = 3;
  if (has_rightcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->rightcounts(), output);
  }

  // optional int32 wrongCounts = 4;
  if (has_wrongcounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wrongcounts(), output);
  }

  // repeated int32 titleAnswerIds = 5;
  for (int i = 0; i < this->titleanswerids_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->titleanswerids(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AnswerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 currentIndex = 1;
  if (has_currentindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->currentindex(), target);
  }

  // optional int32 currentTitleID = 2;
  if (has_currenttitleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currenttitleid(), target);
  }

  // optional int32 rightCounts = 3;
  if (has_rightcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->rightcounts(), target);
  }

  // optional int32 wrongCounts = 4;
  if (has_wrongcounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wrongcounts(), target);
  }

  // repeated int32 titleAnswerIds = 5;
  for (int i = 0; i < this->titleanswerids_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->titleanswerids(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AnswerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 currentIndex = 1;
    if (has_currentindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentindex());
    }

    // optional int32 currentTitleID = 2;
    if (has_currenttitleid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currenttitleid());
    }

    // optional int32 rightCounts = 3;
    if (has_rightcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightcounts());
    }

    // optional int32 wrongCounts = 4;
    if (has_wrongcounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wrongcounts());
    }

  }
  // repeated int32 titleAnswerIds = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->titleanswerids_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->titleanswerids(i));
    }
    total_size += 1 * this->titleanswerids_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AnswerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AnswerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AnswerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AnswerInfo::MergeFrom(const AnswerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  titleanswerids_.MergeFrom(from.titleanswerids_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currentindex()) {
      set_currentindex(from.currentindex());
    }
    if (from.has_currenttitleid()) {
      set_currenttitleid(from.currenttitleid());
    }
    if (from.has_rightcounts()) {
      set_rightcounts(from.rightcounts());
    }
    if (from.has_wrongcounts()) {
      set_wrongcounts(from.wrongcounts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AnswerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AnswerInfo::CopyFrom(const AnswerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AnswerInfo::IsInitialized() const {

  return true;
}

void AnswerInfo::Swap(AnswerInfo* other) {
  if (other != this) {
    std::swap(currentindex_, other->currentindex_);
    std::swap(currenttitleid_, other->currenttitleid_);
    std::swap(rightcounts_, other->rightcounts_);
    std::swap(wrongcounts_, other->wrongcounts_);
    titleanswerids_.Swap(&other->titleanswerids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AnswerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AnswerInfo_descriptor_;
  metadata.reflection = AnswerInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PlayerInfo

// @@protoc_insertion_point(global_scope)
