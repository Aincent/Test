// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/DanLu.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharLogin/DanLu.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DanLuInfo {

namespace {

const ::google::protobuf::Descriptor* DanluStatistics_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DanluStatistics_reflection_ = NULL;
const ::google::protobuf::Descriptor* DanLuItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DanLuItemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPlayerDanLuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPlayerDanLuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientDanLuAddExp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientDanLuAddExp_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientDanLuEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientDanLuEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetClientDanLuEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetClientDanLuEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* SmeltItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SmeltItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetDanluEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetDanluEquip_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharLogin_2fDanLu_2eproto() {
  protobuf_AddDesc_CharLogin_2fDanLu_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharLogin/DanLu.proto");
  GOOGLE_CHECK(file != NULL);
  DanluStatistics_descriptor_ = file->message_type(0);
  static const int DanluStatistics_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanluStatistics, multiple_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanluStatistics, counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanluStatistics, exp_),
  };
  DanluStatistics_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DanluStatistics_descriptor_,
      DanluStatistics::default_instance_,
      DanluStatistics_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanluStatistics, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanluStatistics, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DanluStatistics));
  DanLuItemList_descriptor_ = file->message_type(1);
  static const int DanLuItemList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanLuItemList, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanLuItemList, counts_),
  };
  DanLuItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DanLuItemList_descriptor_,
      DanLuItemList::default_instance_,
      DanLuItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanLuItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DanLuItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DanLuItemList));
  AckPlayerDanLuInfo_descriptor_ = file->message_type(2);
  static const int AckPlayerDanLuInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerDanLuInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerDanLuInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerDanLuInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerDanLuInfo, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerDanLuInfo, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerDanLuInfo, statisticslist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerDanLuInfo, addallexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerDanLuInfo, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerDanLuInfo, golden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerDanLuInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerDanLuInfo, stoperror_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerDanLuInfo, type_),
  };
  AckPlayerDanLuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPlayerDanLuInfo_descriptor_,
      AckPlayerDanLuInfo::default_instance_,
      AckPlayerDanLuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerDanLuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPlayerDanLuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPlayerDanLuInfo));
  ClientDanLuAddExp_descriptor_ = file->message_type(3);
  static const int ClientDanLuAddExp_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDanLuAddExp, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDanLuAddExp, isautobuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDanLuAddExp, id_),
  };
  ClientDanLuAddExp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientDanLuAddExp_descriptor_,
      ClientDanLuAddExp::default_instance_,
      ClientDanLuAddExp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDanLuAddExp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDanLuAddExp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientDanLuAddExp));
  ClientDanLuEquip_descriptor_ = file->message_type(4);
  static const int ClientDanLuEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDanLuEquip, goodid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDanLuEquip, num_),
  };
  ClientDanLuEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientDanLuEquip_descriptor_,
      ClientDanLuEquip::default_instance_,
      ClientDanLuEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDanLuEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientDanLuEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientDanLuEquip));
  RetClientDanLuEquip_descriptor_ = file->message_type(5);
  static const int RetClientDanLuEquip_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetClientDanLuEquip, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetClientDanLuEquip, point_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetClientDanLuEquip, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetClientDanLuEquip, itemlist_),
  };
  RetClientDanLuEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetClientDanLuEquip_descriptor_,
      RetClientDanLuEquip::default_instance_,
      RetClientDanLuEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetClientDanLuEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetClientDanLuEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetClientDanLuEquip));
  SmeltItem_descriptor_ = file->message_type(6);
  static const int SmeltItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltItem, itemnum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltItem, itempos_),
  };
  SmeltItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SmeltItem_descriptor_,
      SmeltItem::default_instance_,
      SmeltItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SmeltItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SmeltItem));
  RetDanluEquip_descriptor_ = file->message_type(7);
  static const int RetDanluEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetDanluEquip, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetDanluEquip, goods_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetDanluEquip, number_),
  };
  RetDanluEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetDanluEquip_descriptor_,
      RetDanluEquip::default_instance_,
      RetDanluEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetDanluEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetDanluEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetDanluEquip));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharLogin_2fDanLu_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DanluStatistics_descriptor_, &DanluStatistics::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DanLuItemList_descriptor_, &DanLuItemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPlayerDanLuInfo_descriptor_, &AckPlayerDanLuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientDanLuAddExp_descriptor_, &ClientDanLuAddExp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientDanLuEquip_descriptor_, &ClientDanLuEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetClientDanLuEquip_descriptor_, &RetClientDanLuEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SmeltItem_descriptor_, &SmeltItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetDanluEquip_descriptor_, &RetDanluEquip::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharLogin_2fDanLu_2eproto() {
  delete DanluStatistics::default_instance_;
  delete DanluStatistics_reflection_;
  delete DanLuItemList::default_instance_;
  delete DanLuItemList_reflection_;
  delete AckPlayerDanLuInfo::default_instance_;
  delete AckPlayerDanLuInfo_reflection_;
  delete ClientDanLuAddExp::default_instance_;
  delete ClientDanLuAddExp_reflection_;
  delete ClientDanLuEquip::default_instance_;
  delete ClientDanLuEquip_reflection_;
  delete RetClientDanLuEquip::default_instance_;
  delete RetClientDanLuEquip_reflection_;
  delete SmeltItem::default_instance_;
  delete SmeltItem_reflection_;
  delete RetDanluEquip::default_instance_;
  delete RetDanluEquip_reflection_;
}

void protobuf_AddDesc_CharLogin_2fDanLu_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025CharLogin/DanLu.proto\022\tDanLuInfo\"@\n\017Da"
    "nluStatistics\022\020\n\010multiple\030\001 \001(\005\022\016\n\006count"
    "s\030\002 \001(\005\022\013\n\003exp\030\003 \001(\005\"/\n\rDanLuItemList\022\016\n"
    "\006itemID\030\001 \001(\005\022\016\n\006counts\030\002 \001(\005\"\240\002\n\022AckPla"
    "yerDanLuInfo\022\013\n\003ret\030\001 \002(\005\022\n\n\002id\030\002 \001(\005\022\013\n"
    "\003exp\030\003 \001(\005\022\r\n\005point\030\004 \001(\005\022\"\n\004item\030\005 \003(\0132"
    "\024.DanLuInfo.SmeltItem\0222\n\016statisticsList\030"
    "\006 \003(\0132\032.DanLuInfo.DanluStatistics\022\021\n\tadd"
    "AllExp\030\007 \001(\005\022*\n\010itemList\030\010 \003(\0132\030.DanLuIn"
    "fo.DanLuItemList\022\016\n\006golden\030\t \001(\005\022\r\n\005mone"
    "y\030\n \001(\005\022\021\n\tstopError\030\014 \001(\005\022\014\n\004type\030\r \001(\005"
    "\"@\n\021ClientDanLuAddExp\022\014\n\004type\030\001 \001(\005\022\021\n\ti"
    "sAutoBuy\030\002 \001(\010\022\n\n\002id\030\003 \001(\005\"/\n\020ClientDanL"
    "uEquip\022\016\n\006goodID\030\001 \003(\005\022\013\n\003num\030\002 \003(\005\"\201\001\n\023"
    "RetClientDanLuEquip\022\013\n\003ret\030\001 \002(\005\022\r\n\005poin"
    "t\030\002 \001(\005\022\"\n\004item\030\003 \003(\0132\024.DanLuInfo.SmeltI"
    "tem\022*\n\010itemList\030\004 \003(\0132\030.DanLuInfo.DanLuI"
    "temList\"=\n\tSmeltItem\022\016\n\006itemID\030\001 \002(\005\022\017\n\007"
    "itemNum\030\002 \001(\005\022\017\n\007itemPos\030\003 \001(\005\";\n\rRetDan"
    "luEquip\022\013\n\003ret\030\001 \002(\005\022\r\n\005goods\030\002 \001(\003\022\016\n\006n"
    "umber\030\003 \001(\005", 811);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharLogin/DanLu.proto", &protobuf_RegisterTypes);
  DanluStatistics::default_instance_ = new DanluStatistics();
  DanLuItemList::default_instance_ = new DanLuItemList();
  AckPlayerDanLuInfo::default_instance_ = new AckPlayerDanLuInfo();
  ClientDanLuAddExp::default_instance_ = new ClientDanLuAddExp();
  ClientDanLuEquip::default_instance_ = new ClientDanLuEquip();
  RetClientDanLuEquip::default_instance_ = new RetClientDanLuEquip();
  SmeltItem::default_instance_ = new SmeltItem();
  RetDanluEquip::default_instance_ = new RetDanluEquip();
  DanluStatistics::default_instance_->InitAsDefaultInstance();
  DanLuItemList::default_instance_->InitAsDefaultInstance();
  AckPlayerDanLuInfo::default_instance_->InitAsDefaultInstance();
  ClientDanLuAddExp::default_instance_->InitAsDefaultInstance();
  ClientDanLuEquip::default_instance_->InitAsDefaultInstance();
  RetClientDanLuEquip::default_instance_->InitAsDefaultInstance();
  SmeltItem::default_instance_->InitAsDefaultInstance();
  RetDanluEquip::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharLogin_2fDanLu_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharLogin_2fDanLu_2eproto {
  StaticDescriptorInitializer_CharLogin_2fDanLu_2eproto() {
    protobuf_AddDesc_CharLogin_2fDanLu_2eproto();
  }
} static_descriptor_initializer_CharLogin_2fDanLu_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int DanluStatistics::kMultipleFieldNumber;
const int DanluStatistics::kCountsFieldNumber;
const int DanluStatistics::kExpFieldNumber;
#endif  // !_MSC_VER

DanluStatistics::DanluStatistics()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DanluStatistics::InitAsDefaultInstance() {
}

DanluStatistics::DanluStatistics(const DanluStatistics& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DanluStatistics::SharedCtor() {
  _cached_size_ = 0;
  multiple_ = 0;
  counts_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DanluStatistics::~DanluStatistics() {
  SharedDtor();
}

void DanluStatistics::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DanluStatistics::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DanluStatistics::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DanluStatistics_descriptor_;
}

const DanluStatistics& DanluStatistics::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fDanLu_2eproto();
  return *default_instance_;
}

DanluStatistics* DanluStatistics::default_instance_ = NULL;

DanluStatistics* DanluStatistics::New() const {
  return new DanluStatistics;
}

void DanluStatistics::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    multiple_ = 0;
    counts_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DanluStatistics::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 multiple = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &multiple_)));
          set_has_multiple();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional int32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DanluStatistics::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 multiple = 1;
  if (has_multiple()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->multiple(), output);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->counts(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DanluStatistics::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 multiple = 1;
  if (has_multiple()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->multiple(), target);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->counts(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DanluStatistics::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 multiple = 1;
    if (has_multiple()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->multiple());
    }

    // optional int32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DanluStatistics::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DanluStatistics* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DanluStatistics*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DanluStatistics::MergeFrom(const DanluStatistics& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_multiple()) {
      set_multiple(from.multiple());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DanluStatistics::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DanluStatistics::CopyFrom(const DanluStatistics& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanluStatistics::IsInitialized() const {

  return true;
}

void DanluStatistics::Swap(DanluStatistics* other) {
  if (other != this) {
    std::swap(multiple_, other->multiple_);
    std::swap(counts_, other->counts_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DanluStatistics::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DanluStatistics_descriptor_;
  metadata.reflection = DanluStatistics_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DanLuItemList::kItemIDFieldNumber;
const int DanLuItemList::kCountsFieldNumber;
#endif  // !_MSC_VER

DanLuItemList::DanLuItemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DanLuItemList::InitAsDefaultInstance() {
}

DanLuItemList::DanLuItemList(const DanLuItemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DanLuItemList::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  counts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DanLuItemList::~DanLuItemList() {
  SharedDtor();
}

void DanLuItemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DanLuItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DanLuItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DanLuItemList_descriptor_;
}

const DanLuItemList& DanLuItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fDanLu_2eproto();
  return *default_instance_;
}

DanLuItemList* DanLuItemList::default_instance_ = NULL;

DanLuItemList* DanLuItemList::New() const {
  return new DanLuItemList;
}

void DanLuItemList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    counts_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DanLuItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional int32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DanLuItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->counts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DanLuItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->counts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DanLuItemList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DanLuItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DanLuItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DanLuItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DanLuItemList::MergeFrom(const DanLuItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DanLuItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DanLuItemList::CopyFrom(const DanLuItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DanLuItemList::IsInitialized() const {

  return true;
}

void DanLuItemList::Swap(DanLuItemList* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(counts_, other->counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DanLuItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DanLuItemList_descriptor_;
  metadata.reflection = DanLuItemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPlayerDanLuInfo::kRetFieldNumber;
const int AckPlayerDanLuInfo::kIdFieldNumber;
const int AckPlayerDanLuInfo::kExpFieldNumber;
const int AckPlayerDanLuInfo::kPointFieldNumber;
const int AckPlayerDanLuInfo::kItemFieldNumber;
const int AckPlayerDanLuInfo::kStatisticsListFieldNumber;
const int AckPlayerDanLuInfo::kAddAllExpFieldNumber;
const int AckPlayerDanLuInfo::kItemListFieldNumber;
const int AckPlayerDanLuInfo::kGoldenFieldNumber;
const int AckPlayerDanLuInfo::kMoneyFieldNumber;
const int AckPlayerDanLuInfo::kStopErrorFieldNumber;
const int AckPlayerDanLuInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

AckPlayerDanLuInfo::AckPlayerDanLuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPlayerDanLuInfo::InitAsDefaultInstance() {
}

AckPlayerDanLuInfo::AckPlayerDanLuInfo(const AckPlayerDanLuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPlayerDanLuInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  exp_ = 0;
  point_ = 0;
  addallexp_ = 0;
  golden_ = 0;
  money_ = 0;
  stoperror_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPlayerDanLuInfo::~AckPlayerDanLuInfo() {
  SharedDtor();
}

void AckPlayerDanLuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPlayerDanLuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPlayerDanLuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPlayerDanLuInfo_descriptor_;
}

const AckPlayerDanLuInfo& AckPlayerDanLuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fDanLu_2eproto();
  return *default_instance_;
}

AckPlayerDanLuInfo* AckPlayerDanLuInfo::default_instance_ = NULL;

AckPlayerDanLuInfo* AckPlayerDanLuInfo::New() const {
  return new AckPlayerDanLuInfo;
}

void AckPlayerDanLuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
    exp_ = 0;
    point_ = 0;
    addallexp_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    golden_ = 0;
    money_ = 0;
    stoperror_ = 0;
    type_ = 0;
  }
  item_.Clear();
  statisticslist_.Clear();
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPlayerDanLuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_point;
        break;
      }

      // optional int32 point = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item;
        break;
      }

      // repeated .DanLuInfo.SmeltItem item = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_item;
        if (input->ExpectTag(50)) goto parse_statisticsList;
        break;
      }

      // repeated .DanLuInfo.DanluStatistics statisticsList = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_statisticsList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_statisticslist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_statisticsList;
        if (input->ExpectTag(56)) goto parse_addAllExp;
        break;
      }

      // optional int32 addAllExp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addAllExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addallexp_)));
          set_has_addallexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_itemList;
        break;
      }

      // repeated .DanLuInfo.DanLuItemList itemList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_itemList;
        if (input->ExpectTag(72)) goto parse_golden;
        break;
      }

      // optional int32 golden = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &golden_)));
          set_has_golden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_money;
        break;
      }

      // optional int32 money = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_stopError;
        break;
      }

      // optional int32 stopError = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stopError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stoperror_)));
          set_has_stoperror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_type;
        break;
      }

      // optional int32 type = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPlayerDanLuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional int32 point = 4;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->point(), output);
  }

  // repeated .DanLuInfo.SmeltItem item = 5;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->item(i), output);
  }

  // repeated .DanLuInfo.DanluStatistics statisticsList = 6;
  for (int i = 0; i < this->statisticslist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->statisticslist(i), output);
  }

  // optional int32 addAllExp = 7;
  if (has_addallexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->addallexp(), output);
  }

  // repeated .DanLuInfo.DanLuItemList itemList = 8;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->itemlist(i), output);
  }

  // optional int32 golden = 9;
  if (has_golden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->golden(), output);
  }

  // optional int32 money = 10;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->money(), output);
  }

  // optional int32 stopError = 12;
  if (has_stoperror()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->stoperror(), output);
  }

  // optional int32 type = 13;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPlayerDanLuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // optional int32 point = 4;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->point(), target);
  }

  // repeated .DanLuInfo.SmeltItem item = 5;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->item(i), target);
  }

  // repeated .DanLuInfo.DanluStatistics statisticsList = 6;
  for (int i = 0; i < this->statisticslist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->statisticslist(i), target);
  }

  // optional int32 addAllExp = 7;
  if (has_addallexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->addallexp(), target);
  }

  // repeated .DanLuInfo.DanLuItemList itemList = 8;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->itemlist(i), target);
  }

  // optional int32 golden = 9;
  if (has_golden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->golden(), target);
  }

  // optional int32 money = 10;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->money(), target);
  }

  // optional int32 stopError = 12;
  if (has_stoperror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->stoperror(), target);
  }

  // optional int32 type = 13;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPlayerDanLuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 point = 4;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

    // optional int32 addAllExp = 7;
    if (has_addallexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addallexp());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 golden = 9;
    if (has_golden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->golden());
    }

    // optional int32 money = 10;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 stopError = 12;
    if (has_stoperror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stoperror());
    }

    // optional int32 type = 13;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .DanLuInfo.SmeltItem item = 5;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated .DanLuInfo.DanluStatistics statisticsList = 6;
  total_size += 1 * this->statisticslist_size();
  for (int i = 0; i < this->statisticslist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->statisticslist(i));
  }

  // repeated .DanLuInfo.DanLuItemList itemList = 8;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPlayerDanLuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPlayerDanLuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPlayerDanLuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPlayerDanLuInfo::MergeFrom(const AckPlayerDanLuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  statisticslist_.MergeFrom(from.statisticslist_);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
    if (from.has_addallexp()) {
      set_addallexp(from.addallexp());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_golden()) {
      set_golden(from.golden());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_stoperror()) {
      set_stoperror(from.stoperror());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPlayerDanLuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPlayerDanLuInfo::CopyFrom(const AckPlayerDanLuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPlayerDanLuInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void AckPlayerDanLuInfo::Swap(AckPlayerDanLuInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(exp_, other->exp_);
    std::swap(point_, other->point_);
    item_.Swap(&other->item_);
    statisticslist_.Swap(&other->statisticslist_);
    std::swap(addallexp_, other->addallexp_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(golden_, other->golden_);
    std::swap(money_, other->money_);
    std::swap(stoperror_, other->stoperror_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPlayerDanLuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPlayerDanLuInfo_descriptor_;
  metadata.reflection = AckPlayerDanLuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientDanLuAddExp::kTypeFieldNumber;
const int ClientDanLuAddExp::kIsAutoBuyFieldNumber;
const int ClientDanLuAddExp::kIdFieldNumber;
#endif  // !_MSC_VER

ClientDanLuAddExp::ClientDanLuAddExp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientDanLuAddExp::InitAsDefaultInstance() {
}

ClientDanLuAddExp::ClientDanLuAddExp(const ClientDanLuAddExp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientDanLuAddExp::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  isautobuy_ = false;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientDanLuAddExp::~ClientDanLuAddExp() {
  SharedDtor();
}

void ClientDanLuAddExp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientDanLuAddExp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientDanLuAddExp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientDanLuAddExp_descriptor_;
}

const ClientDanLuAddExp& ClientDanLuAddExp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fDanLu_2eproto();
  return *default_instance_;
}

ClientDanLuAddExp* ClientDanLuAddExp::default_instance_ = NULL;

ClientDanLuAddExp* ClientDanLuAddExp::New() const {
  return new ClientDanLuAddExp;
}

void ClientDanLuAddExp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    isautobuy_ = false;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientDanLuAddExp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isAutoBuy;
        break;
      }

      // optional bool isAutoBuy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutoBuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautobuy_)));
          set_has_isautobuy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientDanLuAddExp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional bool isAutoBuy = 2;
  if (has_isautobuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isautobuy(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientDanLuAddExp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional bool isAutoBuy = 2;
  if (has_isautobuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isautobuy(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientDanLuAddExp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool isAutoBuy = 2;
    if (has_isautobuy()) {
      total_size += 1 + 1;
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientDanLuAddExp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientDanLuAddExp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientDanLuAddExp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientDanLuAddExp::MergeFrom(const ClientDanLuAddExp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isautobuy()) {
      set_isautobuy(from.isautobuy());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientDanLuAddExp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientDanLuAddExp::CopyFrom(const ClientDanLuAddExp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDanLuAddExp::IsInitialized() const {

  return true;
}

void ClientDanLuAddExp::Swap(ClientDanLuAddExp* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(isautobuy_, other->isautobuy_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientDanLuAddExp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientDanLuAddExp_descriptor_;
  metadata.reflection = ClientDanLuAddExp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientDanLuEquip::kGoodIDFieldNumber;
const int ClientDanLuEquip::kNumFieldNumber;
#endif  // !_MSC_VER

ClientDanLuEquip::ClientDanLuEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientDanLuEquip::InitAsDefaultInstance() {
}

ClientDanLuEquip::ClientDanLuEquip(const ClientDanLuEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientDanLuEquip::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientDanLuEquip::~ClientDanLuEquip() {
  SharedDtor();
}

void ClientDanLuEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientDanLuEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientDanLuEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientDanLuEquip_descriptor_;
}

const ClientDanLuEquip& ClientDanLuEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fDanLu_2eproto();
  return *default_instance_;
}

ClientDanLuEquip* ClientDanLuEquip::default_instance_ = NULL;

ClientDanLuEquip* ClientDanLuEquip::New() const {
  return new ClientDanLuEquip;
}

void ClientDanLuEquip::Clear() {
  goodid_.Clear();
  num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientDanLuEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 goodID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goodID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_goodid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_goodid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_goodID;
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // repeated int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientDanLuEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 goodID = 1;
  for (int i = 0; i < this->goodid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->goodid(i), output);
  }

  // repeated int32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->num(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientDanLuEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 goodID = 1;
  for (int i = 0; i < this->goodid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->goodid(i), target);
  }

  // repeated int32 num = 2;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->num(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientDanLuEquip::ByteSize() const {
  int total_size = 0;

  // repeated int32 goodID = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->goodid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->goodid(i));
    }
    total_size += 1 * this->goodid_size() + data_size;
  }

  // repeated int32 num = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientDanLuEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientDanLuEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientDanLuEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientDanLuEquip::MergeFrom(const ClientDanLuEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  goodid_.MergeFrom(from.goodid_);
  num_.MergeFrom(from.num_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientDanLuEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientDanLuEquip::CopyFrom(const ClientDanLuEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientDanLuEquip::IsInitialized() const {

  return true;
}

void ClientDanLuEquip::Swap(ClientDanLuEquip* other) {
  if (other != this) {
    goodid_.Swap(&other->goodid_);
    num_.Swap(&other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientDanLuEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientDanLuEquip_descriptor_;
  metadata.reflection = ClientDanLuEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetClientDanLuEquip::kRetFieldNumber;
const int RetClientDanLuEquip::kPointFieldNumber;
const int RetClientDanLuEquip::kItemFieldNumber;
const int RetClientDanLuEquip::kItemListFieldNumber;
#endif  // !_MSC_VER

RetClientDanLuEquip::RetClientDanLuEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetClientDanLuEquip::InitAsDefaultInstance() {
}

RetClientDanLuEquip::RetClientDanLuEquip(const RetClientDanLuEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetClientDanLuEquip::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  point_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetClientDanLuEquip::~RetClientDanLuEquip() {
  SharedDtor();
}

void RetClientDanLuEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetClientDanLuEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetClientDanLuEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetClientDanLuEquip_descriptor_;
}

const RetClientDanLuEquip& RetClientDanLuEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fDanLu_2eproto();
  return *default_instance_;
}

RetClientDanLuEquip* RetClientDanLuEquip::default_instance_ = NULL;

RetClientDanLuEquip* RetClientDanLuEquip::New() const {
  return new RetClientDanLuEquip;
}

void RetClientDanLuEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    point_ = 0;
  }
  item_.Clear();
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetClientDanLuEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_point;
        break;
      }

      // optional int32 point = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_point:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &point_)));
          set_has_point();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .DanLuInfo.SmeltItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectTag(34)) goto parse_itemList;
        break;
      }

      // repeated .DanLuInfo.DanLuItemList itemList = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_itemList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetClientDanLuEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 point = 2;
  if (has_point()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->point(), output);
  }

  // repeated .DanLuInfo.SmeltItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  // repeated .DanLuInfo.DanLuItemList itemList = 4;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->itemlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetClientDanLuEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 point = 2;
  if (has_point()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->point(), target);
  }

  // repeated .DanLuInfo.SmeltItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  // repeated .DanLuInfo.DanLuItemList itemList = 4;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->itemlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetClientDanLuEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 point = 2;
    if (has_point()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->point());
    }

  }
  // repeated .DanLuInfo.SmeltItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  // repeated .DanLuInfo.DanLuItemList itemList = 4;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetClientDanLuEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetClientDanLuEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetClientDanLuEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetClientDanLuEquip::MergeFrom(const RetClientDanLuEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_point()) {
      set_point(from.point());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetClientDanLuEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetClientDanLuEquip::CopyFrom(const RetClientDanLuEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetClientDanLuEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void RetClientDanLuEquip::Swap(RetClientDanLuEquip* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(point_, other->point_);
    item_.Swap(&other->item_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetClientDanLuEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetClientDanLuEquip_descriptor_;
  metadata.reflection = RetClientDanLuEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SmeltItem::kItemIDFieldNumber;
const int SmeltItem::kItemNumFieldNumber;
const int SmeltItem::kItemPosFieldNumber;
#endif  // !_MSC_VER

SmeltItem::SmeltItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SmeltItem::InitAsDefaultInstance() {
}

SmeltItem::SmeltItem(const SmeltItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SmeltItem::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  itempos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SmeltItem::~SmeltItem() {
  SharedDtor();
}

void SmeltItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SmeltItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SmeltItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SmeltItem_descriptor_;
}

const SmeltItem& SmeltItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fDanLu_2eproto();
  return *default_instance_;
}

SmeltItem* SmeltItem::default_instance_ = NULL;

SmeltItem* SmeltItem::New() const {
  return new SmeltItem;
}

void SmeltItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    itemnum_ = 0;
    itempos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SmeltItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemNum;
        break;
      }

      // optional int32 itemNum = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemPos;
        break;
      }

      // optional int32 itemPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itempos_)));
          set_has_itempos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SmeltItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 itemNum = 2;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemnum(), output);
  }

  // optional int32 itemPos = 3;
  if (has_itempos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itempos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SmeltItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 itemNum = 2;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemnum(), target);
  }

  // optional int32 itemPos = 3;
  if (has_itempos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itempos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SmeltItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 itemNum = 2;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

    // optional int32 itemPos = 3;
    if (has_itempos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itempos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SmeltItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SmeltItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SmeltItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SmeltItem::MergeFrom(const SmeltItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
    if (from.has_itempos()) {
      set_itempos(from.itempos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SmeltItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SmeltItem::CopyFrom(const SmeltItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SmeltItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SmeltItem::Swap(SmeltItem* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(itempos_, other->itempos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SmeltItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SmeltItem_descriptor_;
  metadata.reflection = SmeltItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetDanluEquip::kRetFieldNumber;
const int RetDanluEquip::kGoodsFieldNumber;
const int RetDanluEquip::kNumberFieldNumber;
#endif  // !_MSC_VER

RetDanluEquip::RetDanluEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetDanluEquip::InitAsDefaultInstance() {
}

RetDanluEquip::RetDanluEquip(const RetDanluEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetDanluEquip::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  goods_ = GOOGLE_LONGLONG(0);
  number_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetDanluEquip::~RetDanluEquip() {
  SharedDtor();
}

void RetDanluEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetDanluEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetDanluEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetDanluEquip_descriptor_;
}

const RetDanluEquip& RetDanluEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fDanLu_2eproto();
  return *default_instance_;
}

RetDanluEquip* RetDanluEquip::default_instance_ = NULL;

RetDanluEquip* RetDanluEquip::New() const {
  return new RetDanluEquip;
}

void RetDanluEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    goods_ = GOOGLE_LONGLONG(0);
    number_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetDanluEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_goods;
        break;
      }

      // optional int64 goods = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_goods:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &goods_)));
          set_has_goods();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_number;
        break;
      }

      // optional int32 number = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_number:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &number_)));
          set_has_number();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetDanluEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 goods = 2;
  if (has_goods()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->goods(), output);
  }

  // optional int32 number = 3;
  if (has_number()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->number(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetDanluEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 goods = 2;
  if (has_goods()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->goods(), target);
  }

  // optional int32 number = 3;
  if (has_number()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->number(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetDanluEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 goods = 2;
    if (has_goods()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->goods());
    }

    // optional int32 number = 3;
    if (has_number()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->number());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetDanluEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetDanluEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetDanluEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetDanluEquip::MergeFrom(const RetDanluEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_goods()) {
      set_goods(from.goods());
    }
    if (from.has_number()) {
      set_number(from.number());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetDanluEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetDanluEquip::CopyFrom(const RetDanluEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetDanluEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetDanluEquip::Swap(RetDanluEquip* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(goods_, other->goods_);
    std::swap(number_, other->number_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetDanluEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetDanluEquip_descriptor_;
  metadata.reflection = RetDanluEquip_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DanLuInfo

// @@protoc_insertion_point(global_scope)
