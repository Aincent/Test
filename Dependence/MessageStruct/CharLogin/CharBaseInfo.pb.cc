// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/CharBaseInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharLogin/CharBaseInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CharLogin {

namespace {

const ::google::protobuf::Descriptor* POneTalentSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  POneTalentSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* skillInfoPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  skillInfoPro_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharCDTime_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharCDTime_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharQuestInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharQuestInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharQuestToGT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharQuestToGT_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckToClientAcceptable_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckToClientAcceptable_reflection_ = NULL;
const ::google::protobuf::Descriptor* AcceptableQuestToGT_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AcceptableQuestToGT_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientContainerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientContainerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToGTContainerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGTContainerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipQuickInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipQuickInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* PackageInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PackageInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* StoreHouseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StoreHouseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientItemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientItemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* WBaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WBaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchToWorldInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchToWorldInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SyncMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SyncMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqSeePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqSeePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SeePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SeePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* BeyondPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BeyondPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGetWSAckData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGetWSAckData_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMGetWSRequestData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMGetWSRequestData_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityStateList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityStateList_reflection_ = NULL;
const ::google::protobuf::Descriptor* ActivityState_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ActivityState_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto() {
  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharLogin/CharBaseInfo.proto");
  GOOGLE_CHECK(file != NULL);
  POneTalentSkill_descriptor_ = file->message_type(0);
  static const int POneTalentSkill_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POneTalentSkill, talentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POneTalentSkill, skilllist_),
  };
  POneTalentSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      POneTalentSkill_descriptor_,
      POneTalentSkill::default_instance_,
      POneTalentSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POneTalentSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(POneTalentSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(POneTalentSkill));
  skillInfoPro_descriptor_ = file->message_type(1);
  static const int skillInfoPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillInfoPro, currenttalentid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillInfoPro, talents_),
  };
  skillInfoPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      skillInfoPro_descriptor_,
      skillInfoPro::default_instance_,
      skillInfoPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillInfoPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(skillInfoPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(skillInfoPro));
  CharBaseInfo_descriptor_ = file->message_type(2);
  static const int CharBaseInfo_offsets_[59] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, mpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, faction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, forcemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, nowequip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, skillinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, mt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, horse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, sinvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, acupoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, logintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, addupgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, isininstance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, clanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, antiaddictionstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, antiaddictiononlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, pktype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, totalonlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, clanicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, gold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, bgold_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, fashionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, rechargestate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, coupleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, countryjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, contrycontribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, envelopecount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, is_yellow_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, is_yellow_year_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, yellow_vip_level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, is_yellow_high_vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, vipcardlv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, vipcardtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, couplename_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, guide_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, challengemoney_),
  };
  CharBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharBaseInfo_descriptor_,
      CharBaseInfo::default_instance_,
      CharBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharBaseInfo));
  CharCDTime_descriptor_ = file->message_type(3);
  static const int CharCDTime_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharCDTime, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharCDTime, time_),
  };
  CharCDTime_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharCDTime_descriptor_,
      CharCDTime::default_instance_,
      CharCDTime_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharCDTime, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharCDTime, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharCDTime));
  CharQuestInfo_descriptor_ = file->message_type(4);
  static const int CharQuestInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharQuestInfo, active_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharQuestInfo, daily_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharQuestInfo, clan_),
  };
  CharQuestInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharQuestInfo_descriptor_,
      CharQuestInfo::default_instance_,
      CharQuestInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharQuestInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharQuestInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharQuestInfo));
  CharQuestToGT_descriptor_ = file->message_type(5);
  static const int CharQuestToGT_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharQuestToGT, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharQuestToGT, active_),
  };
  CharQuestToGT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharQuestToGT_descriptor_,
      CharQuestToGT::default_instance_,
      CharQuestToGT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharQuestToGT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharQuestToGT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharQuestToGT));
  AckToClientAcceptable_descriptor_ = file->message_type(6);
  static const int AckToClientAcceptable_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckToClientAcceptable, questid_),
  };
  AckToClientAcceptable_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckToClientAcceptable_descriptor_,
      AckToClientAcceptable::default_instance_,
      AckToClientAcceptable_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckToClientAcceptable, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckToClientAcceptable, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckToClientAcceptable));
  AcceptableQuestToGT_descriptor_ = file->message_type(7);
  static const int AcceptableQuestToGT_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptableQuestToGT, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptableQuestToGT, questid_),
  };
  AcceptableQuestToGT_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AcceptableQuestToGT_descriptor_,
      AcceptableQuestToGT::default_instance_,
      AcceptableQuestToGT_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptableQuestToGT, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AcceptableQuestToGT, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AcceptableQuestToGT));
  ClientContainerInfo_descriptor_ = file->message_type(8);
  static const int ClientContainerInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContainerInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContainerInfo, pack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContainerInfo, storehouse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContainerInfo, pno_),
  };
  ClientContainerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientContainerInfo_descriptor_,
      ClientContainerInfo::default_instance_,
      ClientContainerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContainerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientContainerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientContainerInfo));
  ToGTContainerInfo_descriptor_ = file->message_type(9);
  static const int ToGTContainerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTContainerInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTContainerInfo, info_),
  };
  ToGTContainerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGTContainerInfo_descriptor_,
      ToGTContainerInfo::default_instance_,
      ToGTContainerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTContainerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGTContainerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGTContainerInfo));
  EquipQuickInfo_descriptor_ = file->message_type(10);
  static const int EquipQuickInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipQuickInfo, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipQuickInfo, quick_),
  };
  EquipQuickInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipQuickInfo_descriptor_,
      EquipQuickInfo::default_instance_,
      EquipQuickInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipQuickInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipQuickInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipQuickInfo));
  PackageInfo_descriptor_ = file->message_type(11);
  static const int PackageInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfo, pack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfo, dtime_),
  };
  PackageInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PackageInfo_descriptor_,
      PackageInfo::default_instance_,
      PackageInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PackageInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PackageInfo));
  StoreHouseInfo_descriptor_ = file->message_type(12);
  static const int StoreHouseInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHouseInfo, storehouse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHouseInfo, size_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHouseInfo, dtime_),
  };
  StoreHouseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StoreHouseInfo_descriptor_,
      StoreHouseInfo::default_instance_,
      StoreHouseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHouseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StoreHouseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StoreHouseInfo));
  ClientItemInfo_descriptor_ = file->message_type(13);
  static const int ClientItemInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, newattr_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, stoneid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, inlaypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, refineattrlv_),
  };
  ClientItemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientItemInfo_descriptor_,
      ClientItemInfo::default_instance_,
      ClientItemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientItemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientItemInfo));
  CharEquip_descriptor_ = file->message_type(14);
  static const int CharEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharEquip, idweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharEquip, idcloth_),
  };
  CharEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharEquip_descriptor_,
      CharEquip::default_instance_,
      CharEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharEquip));
  WBaseInfo_descriptor_ = file->message_type(15);
  static const int WBaseInfo_offsets_[30] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, localtype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, hatred_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, nexttalktime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, score_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, countryjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, fitchprize_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, magicweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, horseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, openkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, pf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, pfkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, addupgolden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, challengearenanum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, golden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, accounttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, source_),
  };
  WBaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WBaseInfo_descriptor_,
      WBaseInfo::default_instance_,
      WBaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WBaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WBaseInfo));
  SynchToWorldInfo_descriptor_ = file->message_type(16);
  static const int SynchToWorldInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchToWorldInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchToWorldInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchToWorldInfo, isyesterdayreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchToWorldInfo, m_viplevel_),
  };
  SynchToWorldInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchToWorldInfo_descriptor_,
      SynchToWorldInfo::default_instance_,
      SynchToWorldInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchToWorldInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchToWorldInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchToWorldInfo));
  SyncMap_descriptor_ = file->message_type(17);
  static const int SyncMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMap, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMap, mapid_),
  };
  SyncMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SyncMap_descriptor_,
      SyncMap::default_instance_,
      SyncMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SyncMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SyncMap));
  ReqSeePlayerInfo_descriptor_ = file->message_type(18);
  static const int ReqSeePlayerInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSeePlayerInfo, charid_),
  };
  ReqSeePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqSeePlayerInfo_descriptor_,
      ReqSeePlayerInfo::default_instance_,
      ReqSeePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSeePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqSeePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqSeePlayerInfo));
  SeePlayerInfo_descriptor_ = file->message_type(19);
  static const int SeePlayerInfo_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, mpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, cleverpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, cleverair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, physicalpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, patience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, phyattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, phyattackmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, phydefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, magicattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, magicattackmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, magicdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, hitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, avoidrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, baselucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, crackdownrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, baserte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, powermax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, magicequipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, guildjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, pkcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, viplv_),
  };
  SeePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SeePlayerInfo_descriptor_,
      SeePlayerInfo::default_instance_,
      SeePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SeePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SeePlayerInfo));
  BeyondPlayerInfo_descriptor_ = file->message_type(20);
  static const int BeyondPlayerInfo_offsets_[37] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, mpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, cleverpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, cleverair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, physicalpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, patience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, phyattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, phyattackmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, phydefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, magicattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, magicattackmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, magicdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, hitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, avoidrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, baselucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, crackdownrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, baserte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, powermax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, magicequipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, guildname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, guildjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, pkcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, viplv_),
  };
  BeyondPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BeyondPlayerInfo_descriptor_,
      BeyondPlayerInfo::default_instance_,
      BeyondPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BeyondPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BeyondPlayerInfo));
  GMGetWSAckData_descriptor_ = file->message_type(21);
  static const int GMGetWSAckData_offsets_[22] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, clanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, clanlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, clanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, fajob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, clanicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, facontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, teamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, title_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, marryotherid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, marryothername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, marrytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, reqclannum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, envelopecnt_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, cangetdistreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, cangetdrawenvereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, isanswerbegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, isprotectkingdouble_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, ispvpfightwarbegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, isescortdoublebegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, isclanwarbegin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, worldbossopenid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, list_),
  };
  GMGetWSAckData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGetWSAckData_descriptor_,
      GMGetWSAckData::default_instance_,
      GMGetWSAckData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSAckData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGetWSAckData));
  GMGetWSRequestData_descriptor_ = file->message_type(22);
  static const int GMGetWSRequestData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSRequestData, info_),
  };
  GMGetWSRequestData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMGetWSRequestData_descriptor_,
      GMGetWSRequestData::default_instance_,
      GMGetWSRequestData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSRequestData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMGetWSRequestData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMGetWSRequestData));
  ActivityStateList_descriptor_ = file->message_type(23);
  static const int ActivityStateList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStateList, states_),
  };
  ActivityStateList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityStateList_descriptor_,
      ActivityStateList::default_instance_,
      ActivityStateList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStateList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityStateList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityStateList));
  ActivityState_descriptor_ = file->message_type(24);
  static const int ActivityState_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityState, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityState, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityState, num_),
  };
  ActivityState_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ActivityState_descriptor_,
      ActivityState::default_instance_,
      ActivityState_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityState, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ActivityState, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ActivityState));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    POneTalentSkill_descriptor_, &POneTalentSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    skillInfoPro_descriptor_, &skillInfoPro::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharBaseInfo_descriptor_, &CharBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharCDTime_descriptor_, &CharCDTime::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharQuestInfo_descriptor_, &CharQuestInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharQuestToGT_descriptor_, &CharQuestToGT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckToClientAcceptable_descriptor_, &AckToClientAcceptable::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AcceptableQuestToGT_descriptor_, &AcceptableQuestToGT::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientContainerInfo_descriptor_, &ClientContainerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGTContainerInfo_descriptor_, &ToGTContainerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipQuickInfo_descriptor_, &EquipQuickInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PackageInfo_descriptor_, &PackageInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StoreHouseInfo_descriptor_, &StoreHouseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientItemInfo_descriptor_, &ClientItemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharEquip_descriptor_, &CharEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WBaseInfo_descriptor_, &WBaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchToWorldInfo_descriptor_, &SynchToWorldInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SyncMap_descriptor_, &SyncMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqSeePlayerInfo_descriptor_, &ReqSeePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SeePlayerInfo_descriptor_, &SeePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BeyondPlayerInfo_descriptor_, &BeyondPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGetWSAckData_descriptor_, &GMGetWSAckData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMGetWSRequestData_descriptor_, &GMGetWSRequestData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityStateList_descriptor_, &ActivityStateList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ActivityState_descriptor_, &ActivityState::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto() {
  delete POneTalentSkill::default_instance_;
  delete POneTalentSkill_reflection_;
  delete skillInfoPro::default_instance_;
  delete skillInfoPro_reflection_;
  delete CharBaseInfo::default_instance_;
  delete CharBaseInfo_reflection_;
  delete CharCDTime::default_instance_;
  delete CharCDTime_reflection_;
  delete CharQuestInfo::default_instance_;
  delete CharQuestInfo_reflection_;
  delete CharQuestToGT::default_instance_;
  delete CharQuestToGT_reflection_;
  delete AckToClientAcceptable::default_instance_;
  delete AckToClientAcceptable_reflection_;
  delete AcceptableQuestToGT::default_instance_;
  delete AcceptableQuestToGT_reflection_;
  delete ClientContainerInfo::default_instance_;
  delete ClientContainerInfo_reflection_;
  delete ToGTContainerInfo::default_instance_;
  delete ToGTContainerInfo_reflection_;
  delete EquipQuickInfo::default_instance_;
  delete EquipQuickInfo_reflection_;
  delete PackageInfo::default_instance_;
  delete PackageInfo_reflection_;
  delete StoreHouseInfo::default_instance_;
  delete StoreHouseInfo_reflection_;
  delete ClientItemInfo::default_instance_;
  delete ClientItemInfo_reflection_;
  delete CharEquip::default_instance_;
  delete CharEquip_reflection_;
  delete WBaseInfo::default_instance_;
  delete WBaseInfo_reflection_;
  delete SynchToWorldInfo::default_instance_;
  delete SynchToWorldInfo_reflection_;
  delete SyncMap::default_instance_;
  delete SyncMap_reflection_;
  delete ReqSeePlayerInfo::default_instance_;
  delete ReqSeePlayerInfo_reflection_;
  delete SeePlayerInfo::default_instance_;
  delete SeePlayerInfo_reflection_;
  delete BeyondPlayerInfo::default_instance_;
  delete BeyondPlayerInfo_reflection_;
  delete GMGetWSAckData::default_instance_;
  delete GMGetWSAckData_reflection_;
  delete GMGetWSRequestData::default_instance_;
  delete GMGetWSRequestData_reflection_;
  delete ActivityStateList::default_instance_;
  delete ActivityStateList_reflection_;
  delete ActivityState::default_instance_;
  delete ActivityState_reflection_;
}

void protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PlayerInfo::protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034CharLogin/CharBaseInfo.proto\022\tCharLogi"
    "n\032\032CharLogin/PlayerInfo.proto\"6\n\017POneTal"
    "entSkill\022\020\n\010talentID\030\001 \001(\005\022\021\n\tskillList\030"
    "\002 \003(\005\"T\n\014skillInfoPro\022\027\n\017currentTalentID"
    "\030\001 \001(\005\022+\n\007talents\030\002 \003(\0132\032.CharLogin.POne"
    "TalentSkill\"\274\t\n\014CharBaseInfo\022\016\n\006charid\030\001"
    " \002(\003\022\013\n\003key\030\002 \002(\005\022\014\n\004name\030\003 \002(\t\022\r\n\005level"
    "\030\004 \002(\005\022\n\n\002hp\030\005 \002(\005\022\r\n\005hpmax\030\006 \002(\005\022\n\n\002mp\030"
    "\007 \002(\005\022\r\n\005mpmax\030\010 \002(\005\022\r\n\005mapid\030\t \002(\003\022\014\n\004x"
    "pos\030\n \002(\005\022\014\n\004ypos\030\013 \002(\005\022\013\n\003exp\030\014 \002(\003\022\017\n\007"
    "country\030\r \002(\005\022\017\n\007faction\030\016 \002(\005\022\013\n\003sex\030\017 "
    "\002(\005\022\022\n\nprofession\030\020 \002(\005\022\r\n\005force\030\021 \002(\005\022\020"
    "\n\010forcemax\030\022 \002(\005\022\021\n\tmovespeed\030\023 \002(\005\022+\n\010n"
    "owequip\030\024 \001(\0132\031.CharLogin.EquipQuickInfo"
    "\022*\n\tskillinfo\030\025 \001(\0132\027.CharLogin.skillInf"
    "oPro\022!\n\002cd\030\026 \003(\0132\025.CharLogin.CharCDTime\022"
    "#\n\002mt\030\027 \001(\0132\027.PlayerInfo.MonitorInfo\022\r\n\005"
    "horse\030\030 \001(\r\022\020\n\010sinvalue\030\031 \001(\005\022\020\n\010acupoin"
    "t\030\032 \001(\005\022)\n\010settings\030\033 \001(\0132\027.PlayerInfo.S"
    "ettingInfo\022\021\n\tloginTime\030\034 \001(\001\022\022\n\nfightPo"
    "wer\030\035 \001(\005\022\017\n\007titleId\030\036 \001(\005\022\r\n\005viplv\030\037 \001("
    "\005\022\021\n\taddupgold\030  \001(\005\022\024\n\014isininstance\030! \001"
    "(\003\022\013\n\003job\030\" \001(\005\022\020\n\010clanname\030# \001(\t\022\032\n\022Ant"
    "iAddictionState\030$ \001(\005\022\037\n\027AntiAddictionOn"
    "LineTime\030% \001(\005\022\016\n\006pkType\030& \001(\005\022\027\n\017totalO"
    "nlineTime\030\' \001(\001\022\020\n\010clanicon\030( \001(\005\022\r\n\005mon"
    "ey\030) \001(\005\022\014\n\004gold\030* \001(\005\022\r\n\005bgold\030+ \001(\005\022\021\n"
    "\tfashionID\030, \001(\005\022\025\n\rrechargeState\030- \001(\005\022"
    "\020\n\010coupleID\030. \001(\003\022\022\n\ncountryjob\030/ \001(\005\022\030\n"
    "\020contrycontribute\0300 \001(\005\022\025\n\renvelopeCount"
    "\0301 \001(\005\022\016\n\006credit\0302 \001(\005\022\025\n\ris_yellow_vip\030"
    "3 \001(\005\022\032\n\022is_yellow_year_vip\0304 \001(\005\022\030\n\020yel"
    "low_vip_level\0305 \001(\005\022\032\n\022is_yellow_high_vi"
    "p\0306 \001(\005\022\021\n\tvipCardLv\0307 \001(\005\022\023\n\013vipCardTim"
    "e\0308 \001(\003\022\022\n\ncoupleName\0309 \001(\t\022\r\n\005guide\030: \001"
    "(\005\022\026\n\016challengemoney\030; \001(\003\"(\n\nCharCDTime"
    "\022\014\n\004type\030\001 \002(\005\022\014\n\004time\030\002 \002(\005\"\204\001\n\rCharQue"
    "stInfo\022\'\n\006active\030\001 \003(\0132\027.PlayerInfo.Acti"
    "veQuest\022%\n\005daily\030\002 \003(\0132\026.PlayerInfo.Dail"
    "yQuest\022#\n\004clan\030\003 \003(\0132\025.PlayerInfo.ClanQu"
    "est\"I\n\rCharQuestToGT\022\016\n\006charid\030\001 \002(\003\022(\n\006"
    "active\030\002 \001(\0132\030.CharLogin.CharQuestInfo\"("
    "\n\025AckToClientAcceptable\022\017\n\007questid\030\001 \003(\005"
    "\"T\n\023AcceptableQuestToGT\022\n\n\002id\030\001 \002(\003\0221\n\007q"
    "uestid\030\002 \001(\0132 .CharLogin.AckToClientAcce"
    "ptable\"\205\001\n\023ClientContainerInfo\022\014\n\004type\030\001"
    " \002(\005\022$\n\004pack\030\002 \001(\0132\026.CharLogin.PackageIn"
    "fo\022-\n\nstorehouse\030\003 \001(\0132\031.CharLogin.Store"
    "HouseInfo\022\013\n\003pno\030\004 \001(\005\"Q\n\021ToGTContainerI"
    "nfo\022\016\n\006charid\030\001 \002(\003\022,\n\004info\030\002 \002(\0132\036.Char"
    "Login.ClientContainerInfo\"e\n\016EquipQuickI"
    "nfo\022(\n\005equip\030\001 \003(\0132\031.CharLogin.ClientIte"
    "mInfo\022)\n\005quick\030\002 \003(\0132\032.PlayerInfo.QuickC"
    "ontainer\"S\n\013PackageInfo\022\'\n\004pack\030\001 \003(\0132\031."
    "CharLogin.ClientItemInfo\022\014\n\004size\030\002 \001(\005\022\r"
    "\n\005dtime\030\003 \001(\001\"\\\n\016StoreHouseInfo\022-\n\nstore"
    "house\030\001 \003(\0132\031.CharLogin.ClientItemInfo\022\014"
    "\n\004size\030\002 \001(\005\022\r\n\005dtime\030\003 \001(\001\"\217\001\n\016ClientIt"
    "emInfo\022\n\n\002id\030\001 \002(\005\022\014\n\004flag\030\002 \001(\r\022\017\n\007newa"
    "ttr\030\003 \003(\r\022\017\n\007stoneid\030\004 \003(\005\022\014\n\004time\030\005 \001(\r"
    "\022\013\n\003num\030\006 \001(\r\022\020\n\010inlayPos\030\007 \003(\005\022\024\n\014refin"
    "eAttrLv\030\010 \003(\r\".\n\tCharEquip\022\020\n\010idweapon\030\001"
    " \002(\005\022\017\n\007idcloth\030\002 \002(\005\"\236\004\n\tWBaseInfo\022\016\n\006c"
    "harid\030\001 \002(\003\022\r\n\005mapid\030\002 \001(\003\022\021\n\tlocaltype\030"
    "\003 \001(\003\022\014\n\004name\030\004 \001(\t\022\n\n\002lv\030\005 \001(\005\022\022\n\nprofe"
    "ssion\030\006 \001(\005\022\016\n\006hatred\030\007 \001(\005\022\020\n\010settings\030"
    "\010 \001(\005\022\017\n\007country\030\n \001(\005\022\024\n\014nextTalkTime\030\014"
    " \001(\003\022\r\n\005score\030\r \001(\005\022\023\n\013offlinetime\030\016 \001(\003"
    "\022\016\n\006teamid\030\017 \001(\003\022\022\n\nfightPower\030\020 \001(\005\022\013\n\003"
    "sex\030\021 \001(\010\022\022\n\ncountryjob\030\023 \001(\005\022\022\n\ncontrib"
    "ute\030\024 \001(\005\022\022\n\nfitchPrize\030\025 \001(\005\022\020\n\010vipLeve"
    "l\030\026 \001(\005\022\023\n\013magicWeapon\030\027 \001(\005\022\017\n\007horseid\030"
    "\030 \001(\005\022\016\n\006openid\030\031 \001(\t\022\017\n\007openkey\030\032 \001(\t\022\n"
    "\n\002pf\030\033 \001(\t\022\r\n\005pfkey\030\034 \001(\t\022\023\n\013addupGolden"
    "\030\035 \001(\005\022\031\n\021challengeArenaNum\030\036 \001(\005\022\016\n\006gol"
    "den\030\037 \001(\005\022\023\n\013accountType\030  \001(\005\022\016\n\006source"
    "\030! \001(\t\"`\n\020SynchToWorldInfo\022\016\n\006charid\030\001 \002"
    "(\003\022\r\n\005fight\030\002 \001(\005\022\031\n\021isYesterdayReward\030\003"
    " \001(\005\022\022\n\nm_VipLevel\030\004 \001(\005\"(\n\007SyncMap\022\016\n\006c"
    "harid\030\001 \002(\003\022\r\n\005mapid\030\002 \001(\003\"\"\n\020ReqSeePlay"
    "erInfo\022\016\n\006charid\030\001 \002(\003\"\265\005\n\rSeePlayerInfo"
    "\022\016\n\006charid\030\001 \002(\003\022\020\n\010charname\030\002 \002(\t\022\022\n\npr"
    "ofession\030\003 \002(\005\022\013\n\003sex\030\004 \002(\005\022\n\n\002hp\030\005 \002(\005\022"
    "\r\n\005hpmax\030\006 \002(\005\022\n\n\002mp\030\007 \002(\005\022\r\n\005mpmax\030\010 \002("
    "\005\022\020\n\010strength\030\t \002(\005\022\023\n\013cleverpower\030\n \002(\005"
    "\022\021\n\tcleverair\030\013 \001(\005\022\025\n\rphysicalpower\030\014 \002"
    "(\005\022\020\n\010patience\030\r \002(\005\022\017\n\007agility\030\016 \002(\005\022\r\n"
    "\005power\030\017 \001(\005\022\021\n\tphyattack\030\020 \002(\005\022\024\n\014phyat"
    "tackmax\030\021 \002(\005\022\022\n\nphydefence\030\022 \002(\005\022\023\n\013mag"
    "icattack\030\023 \002(\005\022\026\n\016magicattackmax\030\024 \002(\005\022\024"
    "\n\014magicdefence\030\025 \002(\005\022\017\n\007hitrate\030\026 \002(\005\022\021\n"
    "\tavoidrate\030\027 \002(\005\022\021\n\tbaselucky\030\030 \002(\005\022\025\n\rc"
    "rackdownrate\030\031 \002(\005\022\017\n\007baserte\030\032 \002(\005\022#\n\005e"
    "quip\030\033 \003(\0132\024.PlayerInfo.ItemInfo\022\r\n\005figh"
    "t\030\034 \002(\005\022\020\n\010powermax\030\035 \002(\005\022\013\n\003exp\030\036 \002(\003\022\n"
    "\n\002lv\030\037 \002(\005\022\024\n\014magicequipid\030  \002(\005\022\021\n\tguil"
    "dname\030! \002(\t\022\020\n\010guildjob\030\" \002(\005\022\017\n\007titleid"
    "\030# \002(\005\022\017\n\007pkcount\030$ \002(\005\022\r\n\005viplv\030% \002(\005\"\270"
    "\005\n\020BeyondPlayerInfo\022\016\n\006charid\030\001 \002(\003\022\020\n\010c"
    "harname\030\002 \001(\t\022\022\n\nprofession\030\003 \001(\005\022\013\n\003sex"
    "\030\004 \001(\005\022\n\n\002hp\030\005 \001(\005\022\r\n\005hpmax\030\006 \001(\005\022\n\n\002mp\030"
    "\007 \001(\005\022\r\n\005mpmax\030\010 \001(\005\022\020\n\010strength\030\t \001(\005\022\023"
    "\n\013cleverpower\030\n \001(\005\022\021\n\tcleverair\030\013 \001(\005\022\025"
    "\n\rphysicalpower\030\014 \001(\005\022\020\n\010patience\030\r \001(\005\022"
    "\017\n\007agility\030\016 \001(\005\022\r\n\005power\030\017 \001(\005\022\021\n\tphyat"
    "tack\030\020 \001(\005\022\024\n\014phyattackmax\030\021 \001(\005\022\022\n\nphyd"
    "efence\030\022 \001(\005\022\023\n\013magicattack\030\023 \001(\005\022\026\n\016mag"
    "icattackmax\030\024 \001(\005\022\024\n\014magicdefence\030\025 \001(\005\022"
    "\017\n\007hitrate\030\026 \001(\005\022\021\n\tavoidrate\030\027 \001(\005\022\021\n\tb"
    "aselucky\030\030 \001(\005\022\025\n\rcrackdownrate\030\031 \001(\005\022\017\n"
    "\007baserte\030\032 \001(\005\022#\n\005equip\030\033 \003(\0132\024.PlayerIn"
    "fo.ItemInfo\022\r\n\005fight\030\034 \001(\005\022\020\n\010powermax\030\035"
    " \001(\005\022\013\n\003exp\030\036 \001(\003\022\n\n\002lv\030\037 \001(\005\022\024\n\014magiceq"
    "uipid\030  \001(\005\022\021\n\tguildname\030! \001(\t\022\020\n\010guildj"
    "ob\030\" \001(\005\022\017\n\007titleid\030# \001(\005\022\017\n\007pkcount\030$ \001"
    "(\005\022\r\n\005viplv\030% \001(\005\"\211\004\n\016GMGetWSAckData\022\016\n\006"
    "clanID\030\001 \001(\005\022\021\n\tclanLevel\030\002 \001(\005\022\020\n\010clanN"
    "ame\030\003 \001(\t\022\r\n\005fajob\030\004 \001(\005\022\020\n\010clanicon\030\005 \001"
    "(\005\022\026\n\016facontribution\030\006 \001(\005\022\016\n\006teamid\030\007 \001"
    "(\003\022\r\n\005title\030\010 \003(\005\022\024\n\014marryotherid\030\t \001(\003\022"
    "\026\n\016marryothername\030\n \001(\014\022\021\n\tmarryTime\030\013 \001"
    "(\003\022\022\n\nreqClanNum\030\014 \001(\005\022\023\n\013envelopeCnt\030\r "
    "\001(\005\022\030\n\020canGetDistReward\030\016 \001(\005\022\034\n\024canGetD"
    "rawEnveReward\030\017 \001(\005\022\025\n\risAnswerBegin\030\020 \001"
    "(\010\022\033\n\023isProtectKingDouble\030\021 \001(\010\022\032\n\022isPvp"
    "FightWarBegin\030\022 \001(\010\022\033\n\023isEscortDoubleBeg"
    "in\030\023 \001(\010\022\026\n\016isClanWarBegin\030\024 \001(\010\022\027\n\017worl"
    "dBossOpenID\030\025 \003(\005\022*\n\004list\030\026 \001(\0132\034.CharLo"
    "gin.ActivityStateList\"8\n\022GMGetWSRequestD"
    "ata\022\"\n\004info\030\001 \001(\0132\024.CharLogin.WBaseInfo\""
    "=\n\021ActivityStateList\022(\n\006states\030\001 \003(\0132\030.C"
    "harLogin.ActivityState\"8\n\rActivityState\022"
    "\014\n\004type\030\001 \001(\005\022\014\n\004flag\030\002 \001(\010\022\013\n\003num\030\003 \001(\005", 5320);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharLogin/CharBaseInfo.proto", &protobuf_RegisterTypes);
  POneTalentSkill::default_instance_ = new POneTalentSkill();
  skillInfoPro::default_instance_ = new skillInfoPro();
  CharBaseInfo::default_instance_ = new CharBaseInfo();
  CharCDTime::default_instance_ = new CharCDTime();
  CharQuestInfo::default_instance_ = new CharQuestInfo();
  CharQuestToGT::default_instance_ = new CharQuestToGT();
  AckToClientAcceptable::default_instance_ = new AckToClientAcceptable();
  AcceptableQuestToGT::default_instance_ = new AcceptableQuestToGT();
  ClientContainerInfo::default_instance_ = new ClientContainerInfo();
  ToGTContainerInfo::default_instance_ = new ToGTContainerInfo();
  EquipQuickInfo::default_instance_ = new EquipQuickInfo();
  PackageInfo::default_instance_ = new PackageInfo();
  StoreHouseInfo::default_instance_ = new StoreHouseInfo();
  ClientItemInfo::default_instance_ = new ClientItemInfo();
  CharEquip::default_instance_ = new CharEquip();
  WBaseInfo::default_instance_ = new WBaseInfo();
  SynchToWorldInfo::default_instance_ = new SynchToWorldInfo();
  SyncMap::default_instance_ = new SyncMap();
  ReqSeePlayerInfo::default_instance_ = new ReqSeePlayerInfo();
  SeePlayerInfo::default_instance_ = new SeePlayerInfo();
  BeyondPlayerInfo::default_instance_ = new BeyondPlayerInfo();
  GMGetWSAckData::default_instance_ = new GMGetWSAckData();
  GMGetWSRequestData::default_instance_ = new GMGetWSRequestData();
  ActivityStateList::default_instance_ = new ActivityStateList();
  ActivityState::default_instance_ = new ActivityState();
  POneTalentSkill::default_instance_->InitAsDefaultInstance();
  skillInfoPro::default_instance_->InitAsDefaultInstance();
  CharBaseInfo::default_instance_->InitAsDefaultInstance();
  CharCDTime::default_instance_->InitAsDefaultInstance();
  CharQuestInfo::default_instance_->InitAsDefaultInstance();
  CharQuestToGT::default_instance_->InitAsDefaultInstance();
  AckToClientAcceptable::default_instance_->InitAsDefaultInstance();
  AcceptableQuestToGT::default_instance_->InitAsDefaultInstance();
  ClientContainerInfo::default_instance_->InitAsDefaultInstance();
  ToGTContainerInfo::default_instance_->InitAsDefaultInstance();
  EquipQuickInfo::default_instance_->InitAsDefaultInstance();
  PackageInfo::default_instance_->InitAsDefaultInstance();
  StoreHouseInfo::default_instance_->InitAsDefaultInstance();
  ClientItemInfo::default_instance_->InitAsDefaultInstance();
  CharEquip::default_instance_->InitAsDefaultInstance();
  WBaseInfo::default_instance_->InitAsDefaultInstance();
  SynchToWorldInfo::default_instance_->InitAsDefaultInstance();
  SyncMap::default_instance_->InitAsDefaultInstance();
  ReqSeePlayerInfo::default_instance_->InitAsDefaultInstance();
  SeePlayerInfo::default_instance_->InitAsDefaultInstance();
  BeyondPlayerInfo::default_instance_->InitAsDefaultInstance();
  GMGetWSAckData::default_instance_->InitAsDefaultInstance();
  GMGetWSRequestData::default_instance_->InitAsDefaultInstance();
  ActivityStateList::default_instance_->InitAsDefaultInstance();
  ActivityState::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharLogin_2fCharBaseInfo_2eproto {
  StaticDescriptorInitializer_CharLogin_2fCharBaseInfo_2eproto() {
    protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  }
} static_descriptor_initializer_CharLogin_2fCharBaseInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int POneTalentSkill::kTalentIDFieldNumber;
const int POneTalentSkill::kSkillListFieldNumber;
#endif  // !_MSC_VER

POneTalentSkill::POneTalentSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void POneTalentSkill::InitAsDefaultInstance() {
}

POneTalentSkill::POneTalentSkill(const POneTalentSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void POneTalentSkill::SharedCtor() {
  _cached_size_ = 0;
  talentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

POneTalentSkill::~POneTalentSkill() {
  SharedDtor();
}

void POneTalentSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void POneTalentSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* POneTalentSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return POneTalentSkill_descriptor_;
}

const POneTalentSkill& POneTalentSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

POneTalentSkill* POneTalentSkill::default_instance_ = NULL;

POneTalentSkill* POneTalentSkill::New() const {
  return new POneTalentSkill;
}

void POneTalentSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    talentid_ = 0;
  }
  skilllist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool POneTalentSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 talentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &talentid_)));
          set_has_talentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillList;
        break;
      }

      // repeated int32 skillList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillList:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_skilllist())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skilllist())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_skillList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void POneTalentSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 talentID = 1;
  if (has_talentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->talentid(), output);
  }

  // repeated int32 skillList = 2;
  for (int i = 0; i < this->skilllist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->skilllist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* POneTalentSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 talentID = 1;
  if (has_talentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->talentid(), target);
  }

  // repeated int32 skillList = 2;
  for (int i = 0; i < this->skilllist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->skilllist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int POneTalentSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 talentID = 1;
    if (has_talentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->talentid());
    }

  }
  // repeated int32 skillList = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->skilllist_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skilllist(i));
    }
    total_size += 1 * this->skilllist_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void POneTalentSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const POneTalentSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const POneTalentSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void POneTalentSkill::MergeFrom(const POneTalentSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  skilllist_.MergeFrom(from.skilllist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_talentid()) {
      set_talentid(from.talentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void POneTalentSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void POneTalentSkill::CopyFrom(const POneTalentSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool POneTalentSkill::IsInitialized() const {

  return true;
}

void POneTalentSkill::Swap(POneTalentSkill* other) {
  if (other != this) {
    std::swap(talentid_, other->talentid_);
    skilllist_.Swap(&other->skilllist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata POneTalentSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = POneTalentSkill_descriptor_;
  metadata.reflection = POneTalentSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int skillInfoPro::kCurrentTalentIDFieldNumber;
const int skillInfoPro::kTalentsFieldNumber;
#endif  // !_MSC_VER

skillInfoPro::skillInfoPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void skillInfoPro::InitAsDefaultInstance() {
}

skillInfoPro::skillInfoPro(const skillInfoPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void skillInfoPro::SharedCtor() {
  _cached_size_ = 0;
  currenttalentid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

skillInfoPro::~skillInfoPro() {
  SharedDtor();
}

void skillInfoPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void skillInfoPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* skillInfoPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return skillInfoPro_descriptor_;
}

const skillInfoPro& skillInfoPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

skillInfoPro* skillInfoPro::default_instance_ = NULL;

skillInfoPro* skillInfoPro::New() const {
  return new skillInfoPro;
}

void skillInfoPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    currenttalentid_ = 0;
  }
  talents_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool skillInfoPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 currentTalentID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currenttalentid_)));
          set_has_currenttalentid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_talents;
        break;
      }

      // repeated .CharLogin.POneTalentSkill talents = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_talents:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_talents()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_talents;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void skillInfoPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 currentTalentID = 1;
  if (has_currenttalentid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->currenttalentid(), output);
  }

  // repeated .CharLogin.POneTalentSkill talents = 2;
  for (int i = 0; i < this->talents_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->talents(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* skillInfoPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 currentTalentID = 1;
  if (has_currenttalentid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->currenttalentid(), target);
  }

  // repeated .CharLogin.POneTalentSkill talents = 2;
  for (int i = 0; i < this->talents_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->talents(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int skillInfoPro::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 currentTalentID = 1;
    if (has_currenttalentid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currenttalentid());
    }

  }
  // repeated .CharLogin.POneTalentSkill talents = 2;
  total_size += 1 * this->talents_size();
  for (int i = 0; i < this->talents_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->talents(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void skillInfoPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const skillInfoPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const skillInfoPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void skillInfoPro::MergeFrom(const skillInfoPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  talents_.MergeFrom(from.talents_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_currenttalentid()) {
      set_currenttalentid(from.currenttalentid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void skillInfoPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void skillInfoPro::CopyFrom(const skillInfoPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool skillInfoPro::IsInitialized() const {

  return true;
}

void skillInfoPro::Swap(skillInfoPro* other) {
  if (other != this) {
    std::swap(currenttalentid_, other->currenttalentid_);
    talents_.Swap(&other->talents_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata skillInfoPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = skillInfoPro_descriptor_;
  metadata.reflection = skillInfoPro_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharBaseInfo::kCharidFieldNumber;
const int CharBaseInfo::kKeyFieldNumber;
const int CharBaseInfo::kNameFieldNumber;
const int CharBaseInfo::kLevelFieldNumber;
const int CharBaseInfo::kHpFieldNumber;
const int CharBaseInfo::kHpmaxFieldNumber;
const int CharBaseInfo::kMpFieldNumber;
const int CharBaseInfo::kMpmaxFieldNumber;
const int CharBaseInfo::kMapidFieldNumber;
const int CharBaseInfo::kXposFieldNumber;
const int CharBaseInfo::kYposFieldNumber;
const int CharBaseInfo::kExpFieldNumber;
const int CharBaseInfo::kCountryFieldNumber;
const int CharBaseInfo::kFactionFieldNumber;
const int CharBaseInfo::kSexFieldNumber;
const int CharBaseInfo::kProfessionFieldNumber;
const int CharBaseInfo::kForceFieldNumber;
const int CharBaseInfo::kForcemaxFieldNumber;
const int CharBaseInfo::kMovespeedFieldNumber;
const int CharBaseInfo::kNowequipFieldNumber;
const int CharBaseInfo::kSkillinfoFieldNumber;
const int CharBaseInfo::kCdFieldNumber;
const int CharBaseInfo::kMtFieldNumber;
const int CharBaseInfo::kHorseFieldNumber;
const int CharBaseInfo::kSinvalueFieldNumber;
const int CharBaseInfo::kAcupointFieldNumber;
const int CharBaseInfo::kSettingsFieldNumber;
const int CharBaseInfo::kLoginTimeFieldNumber;
const int CharBaseInfo::kFightPowerFieldNumber;
const int CharBaseInfo::kTitleIdFieldNumber;
const int CharBaseInfo::kViplvFieldNumber;
const int CharBaseInfo::kAddupgoldFieldNumber;
const int CharBaseInfo::kIsininstanceFieldNumber;
const int CharBaseInfo::kJobFieldNumber;
const int CharBaseInfo::kClannameFieldNumber;
const int CharBaseInfo::kAntiAddictionStateFieldNumber;
const int CharBaseInfo::kAntiAddictionOnLineTimeFieldNumber;
const int CharBaseInfo::kPkTypeFieldNumber;
const int CharBaseInfo::kTotalOnlineTimeFieldNumber;
const int CharBaseInfo::kClaniconFieldNumber;
const int CharBaseInfo::kMoneyFieldNumber;
const int CharBaseInfo::kGoldFieldNumber;
const int CharBaseInfo::kBgoldFieldNumber;
const int CharBaseInfo::kFashionIDFieldNumber;
const int CharBaseInfo::kRechargeStateFieldNumber;
const int CharBaseInfo::kCoupleIDFieldNumber;
const int CharBaseInfo::kCountryjobFieldNumber;
const int CharBaseInfo::kContrycontributeFieldNumber;
const int CharBaseInfo::kEnvelopeCountFieldNumber;
const int CharBaseInfo::kCreditFieldNumber;
const int CharBaseInfo::kIsYellowVipFieldNumber;
const int CharBaseInfo::kIsYellowYearVipFieldNumber;
const int CharBaseInfo::kYellowVipLevelFieldNumber;
const int CharBaseInfo::kIsYellowHighVipFieldNumber;
const int CharBaseInfo::kVipCardLvFieldNumber;
const int CharBaseInfo::kVipCardTimeFieldNumber;
const int CharBaseInfo::kCoupleNameFieldNumber;
const int CharBaseInfo::kGuideFieldNumber;
const int CharBaseInfo::kChallengemoneyFieldNumber;
#endif  // !_MSC_VER

CharBaseInfo::CharBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharBaseInfo::InitAsDefaultInstance() {
  nowequip_ = const_cast< ::CharLogin::EquipQuickInfo*>(&::CharLogin::EquipQuickInfo::default_instance());
  skillinfo_ = const_cast< ::CharLogin::skillInfoPro*>(&::CharLogin::skillInfoPro::default_instance());
  mt_ = const_cast< ::PlayerInfo::MonitorInfo*>(&::PlayerInfo::MonitorInfo::default_instance());
  settings_ = const_cast< ::PlayerInfo::SettingInfo*>(&::PlayerInfo::SettingInfo::default_instance());
}

CharBaseInfo::CharBaseInfo(const CharBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  key_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  hp_ = 0;
  hpmax_ = 0;
  mp_ = 0;
  mpmax_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  xpos_ = 0;
  ypos_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  country_ = 0;
  faction_ = 0;
  sex_ = 0;
  profession_ = 0;
  force_ = 0;
  forcemax_ = 0;
  movespeed_ = 0;
  nowequip_ = NULL;
  skillinfo_ = NULL;
  mt_ = NULL;
  horse_ = 0u;
  sinvalue_ = 0;
  acupoint_ = 0;
  settings_ = NULL;
  logintime_ = 0;
  fightpower_ = 0;
  titleid_ = 0;
  viplv_ = 0;
  addupgold_ = 0;
  isininstance_ = GOOGLE_LONGLONG(0);
  job_ = 0;
  clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  antiaddictionstate_ = 0;
  antiaddictiononlinetime_ = 0;
  pktype_ = 0;
  totalonlinetime_ = 0;
  clanicon_ = 0;
  money_ = 0;
  gold_ = 0;
  bgold_ = 0;
  fashionid_ = 0;
  rechargestate_ = 0;
  coupleid_ = GOOGLE_LONGLONG(0);
  countryjob_ = 0;
  contrycontribute_ = 0;
  envelopecount_ = 0;
  credit_ = 0;
  is_yellow_vip_ = 0;
  is_yellow_year_vip_ = 0;
  yellow_vip_level_ = 0;
  is_yellow_high_vip_ = 0;
  vipcardlv_ = 0;
  vipcardtime_ = GOOGLE_LONGLONG(0);
  couplename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guide_ = 0;
  challengemoney_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharBaseInfo::~CharBaseInfo() {
  SharedDtor();
}

void CharBaseInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (couplename_ != &::google::protobuf::internal::kEmptyString) {
    delete couplename_;
  }
  if (this != default_instance_) {
    delete nowequip_;
    delete skillinfo_;
    delete mt_;
    delete settings_;
  }
}

void CharBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharBaseInfo_descriptor_;
}

const CharBaseInfo& CharBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

CharBaseInfo* CharBaseInfo::default_instance_ = NULL;

CharBaseInfo* CharBaseInfo::New() const {
  return new CharBaseInfo;
}

void CharBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    key_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    hp_ = 0;
    hpmax_ = 0;
    mp_ = 0;
    mpmax_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mapid_ = GOOGLE_LONGLONG(0);
    xpos_ = 0;
    ypos_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    country_ = 0;
    faction_ = 0;
    sex_ = 0;
    profession_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    force_ = 0;
    forcemax_ = 0;
    movespeed_ = 0;
    if (has_nowequip()) {
      if (nowequip_ != NULL) nowequip_->::CharLogin::EquipQuickInfo::Clear();
    }
    if (has_skillinfo()) {
      if (skillinfo_ != NULL) skillinfo_->::CharLogin::skillInfoPro::Clear();
    }
    if (has_mt()) {
      if (mt_ != NULL) mt_->::PlayerInfo::MonitorInfo::Clear();
    }
    horse_ = 0u;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    sinvalue_ = 0;
    acupoint_ = 0;
    if (has_settings()) {
      if (settings_ != NULL) settings_->::PlayerInfo::SettingInfo::Clear();
    }
    logintime_ = 0;
    fightpower_ = 0;
    titleid_ = 0;
    viplv_ = 0;
    addupgold_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    isininstance_ = GOOGLE_LONGLONG(0);
    job_ = 0;
    if (has_clanname()) {
      if (clanname_ != &::google::protobuf::internal::kEmptyString) {
        clanname_->clear();
      }
    }
    antiaddictionstate_ = 0;
    antiaddictiononlinetime_ = 0;
    pktype_ = 0;
    totalonlinetime_ = 0;
    clanicon_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    money_ = 0;
    gold_ = 0;
    bgold_ = 0;
    fashionid_ = 0;
    rechargestate_ = 0;
    coupleid_ = GOOGLE_LONGLONG(0);
    countryjob_ = 0;
    contrycontribute_ = 0;
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    envelopecount_ = 0;
    credit_ = 0;
    is_yellow_vip_ = 0;
    is_yellow_year_vip_ = 0;
    yellow_vip_level_ = 0;
    is_yellow_high_vip_ = 0;
    vipcardlv_ = 0;
    vipcardtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (has_couplename()) {
      if (couplename_ != &::google::protobuf::internal::kEmptyString) {
        couplename_->clear();
      }
    }
    guide_ = 0;
    challengemoney_ = GOOGLE_LONGLONG(0);
  }
  cd_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // required int32 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // required int32 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hpmax;
        break;
      }

      // required int32 hpmax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mp;
        break;
      }

      // required int32 mp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mpmax;
        break;
      }

      // required int32 mpmax = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mpmax_)));
          set_has_mpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mapid;
        break;
      }

      // required int64 mapid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_xpos;
        break;
      }

      // required int32 xpos = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_ypos;
        break;
      }

      // required int32 ypos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_exp;
        break;
      }

      // required int64 exp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_country;
        break;
      }

      // required int32 country = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_faction;
        break;
      }

      // required int32 faction = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faction_)));
          set_has_faction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_sex;
        break;
      }

      // required int32 sex = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_profession;
        break;
      }

      // required int32 profession = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_force;
        break;
      }

      // required int32 force = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_forcemax;
        break;
      }

      // required int32 forcemax = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forcemax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forcemax_)));
          set_has_forcemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_movespeed;
        break;
      }

      // required int32 movespeed = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_nowequip;
        break;
      }

      // optional .CharLogin.EquipQuickInfo nowequip = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_nowequip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_nowequip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_skillinfo;
        break;
      }

      // optional .CharLogin.skillInfoPro skillinfo = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skillinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_cd;
        break;
      }

      // repeated .CharLogin.CharCDTime cd = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_cd:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_cd()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(178)) goto parse_cd;
        if (input->ExpectTag(186)) goto parse_mt;
        break;
      }

      // optional .PlayerInfo.MonitorInfo mt = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_mt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_horse;
        break;
      }

      // optional uint32 horse = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &horse_)));
          set_has_horse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_sinvalue;
        break;
      }

      // optional int32 sinvalue = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sinvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sinvalue_)));
          set_has_sinvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_acupoint;
        break;
      }

      // optional int32 acupoint = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acupoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acupoint_)));
          set_has_acupoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_settings;
        break;
      }

      // optional .PlayerInfo.SettingInfo settings = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_settings:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_settings()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(225)) goto parse_loginTime;
        break;
      }

      // optional double loginTime = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_loginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &logintime_)));
          set_has_logintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_fightPower;
        break;
      }

      // optional int32 fightPower = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_titleId;
        break;
      }

      // optional int32 titleId = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_viplv;
        break;
      }

      // optional int32 viplv = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_addupgold;
        break;
      }

      // optional int32 addupgold = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addupgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addupgold_)));
          set_has_addupgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_isininstance;
        break;
      }

      // optional int64 isininstance = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isininstance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &isininstance_)));
          set_has_isininstance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_job;
        break;
      }

      // optional int32 job = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(282)) goto parse_clanname;
        break;
      }

      // optional string clanname = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clanname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clanname().data(), this->clanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_AntiAddictionState;
        break;
      }

      // optional int32 AntiAddictionState = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AntiAddictionState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antiaddictionstate_)));
          set_has_antiaddictionstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_AntiAddictionOnLineTime;
        break;
      }

      // optional int32 AntiAddictionOnLineTime = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_AntiAddictionOnLineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antiaddictiononlinetime_)));
          set_has_antiaddictiononlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_pkType;
        break;
      }

      // optional int32 pkType = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pktype_)));
          set_has_pktype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(313)) goto parse_totalOnlineTime;
        break;
      }

      // optional double totalOnlineTime = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_totalOnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &totalonlinetime_)));
          set_has_totalonlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_clanicon;
        break;
      }

      // optional int32 clanicon = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanicon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanicon_)));
          set_has_clanicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_money;
        break;
      }

      // optional int32 money = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_gold;
        break;
      }

      // optional int32 gold = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_gold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &gold_)));
          set_has_gold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_bgold;
        break;
      }

      // optional int32 bgold = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bgold:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bgold_)));
          set_has_bgold();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_fashionID;
        break;
      }

      // optional int32 fashionID = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashionid_)));
          set_has_fashionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_rechargeState;
        break;
      }

      // optional int32 rechargeState = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rechargeState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rechargestate_)));
          set_has_rechargestate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_coupleID;
        break;
      }

      // optional int64 coupleID = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coupleID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &coupleid_)));
          set_has_coupleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_countryjob;
        break;
      }

      // optional int32 countryjob = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countryjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countryjob_)));
          set_has_countryjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(384)) goto parse_contrycontribute;
        break;
      }

      // optional int32 contrycontribute = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contrycontribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contrycontribute_)));
          set_has_contrycontribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_envelopeCount;
        break;
      }

      // optional int32 envelopeCount = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_envelopeCount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &envelopecount_)));
          set_has_envelopecount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_credit;
        break;
      }

      // optional int32 credit = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(408)) goto parse_is_yellow_vip;
        break;
      }

      // optional int32 is_yellow_vip = 51;
      case 51: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_yellow_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_yellow_vip_)));
          set_has_is_yellow_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_is_yellow_year_vip;
        break;
      }

      // optional int32 is_yellow_year_vip = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_yellow_year_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_yellow_year_vip_)));
          set_has_is_yellow_year_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_yellow_vip_level;
        break;
      }

      // optional int32 yellow_vip_level = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_yellow_vip_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &yellow_vip_level_)));
          set_has_yellow_vip_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_is_yellow_high_vip;
        break;
      }

      // optional int32 is_yellow_high_vip = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_is_yellow_high_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &is_yellow_high_vip_)));
          set_has_is_yellow_high_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(440)) goto parse_vipCardLv;
        break;
      }

      // optional int32 vipCardLv = 55;
      case 55: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipCardLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vipcardlv_)));
          set_has_vipcardlv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(448)) goto parse_vipCardTime;
        break;
      }

      // optional int64 vipCardTime = 56;
      case 56: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipCardTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &vipcardtime_)));
          set_has_vipcardtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(458)) goto parse_coupleName;
        break;
      }

      // optional string coupleName = 57;
      case 57: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_coupleName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_couplename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->couplename().data(), this->couplename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(464)) goto parse_guide;
        break;
      }

      // optional int32 guide = 58;
      case 58: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guide:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guide_)));
          set_has_guide();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(472)) goto parse_challengemoney;
        break;
      }

      // optional int64 challengemoney = 59;
      case 59: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengemoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &challengemoney_)));
          set_has_challengemoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required int32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hp(), output);
  }

  // required int32 hpmax = 6;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hpmax(), output);
  }

  // required int32 mp = 7;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mp(), output);
  }

  // required int32 mpmax = 8;
  if (has_mpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mpmax(), output);
  }

  // required int64 mapid = 9;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->mapid(), output);
  }

  // required int32 xpos = 10;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->xpos(), output);
  }

  // required int32 ypos = 11;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->ypos(), output);
  }

  // required int64 exp = 12;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->exp(), output);
  }

  // required int32 country = 13;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->country(), output);
  }

  // required int32 faction = 14;
  if (has_faction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->faction(), output);
  }

  // required int32 sex = 15;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->sex(), output);
  }

  // required int32 profession = 16;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->profession(), output);
  }

  // required int32 force = 17;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->force(), output);
  }

  // required int32 forcemax = 18;
  if (has_forcemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->forcemax(), output);
  }

  // required int32 movespeed = 19;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->movespeed(), output);
  }

  // optional .CharLogin.EquipQuickInfo nowequip = 20;
  if (has_nowequip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      20, this->nowequip(), output);
  }

  // optional .CharLogin.skillInfoPro skillinfo = 21;
  if (has_skillinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->skillinfo(), output);
  }

  // repeated .CharLogin.CharCDTime cd = 22;
  for (int i = 0; i < this->cd_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->cd(i), output);
  }

  // optional .PlayerInfo.MonitorInfo mt = 23;
  if (has_mt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      23, this->mt(), output);
  }

  // optional uint32 horse = 24;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(24, this->horse(), output);
  }

  // optional int32 sinvalue = 25;
  if (has_sinvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->sinvalue(), output);
  }

  // optional int32 acupoint = 26;
  if (has_acupoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->acupoint(), output);
  }

  // optional .PlayerInfo.SettingInfo settings = 27;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->settings(), output);
  }

  // optional double loginTime = 28;
  if (has_logintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(28, this->logintime(), output);
  }

  // optional int32 fightPower = 29;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->fightpower(), output);
  }

  // optional int32 titleId = 30;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->titleid(), output);
  }

  // optional int32 viplv = 31;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->viplv(), output);
  }

  // optional int32 addupgold = 32;
  if (has_addupgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->addupgold(), output);
  }

  // optional int64 isininstance = 33;
  if (has_isininstance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->isininstance(), output);
  }

  // optional int32 job = 34;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->job(), output);
  }

  // optional string clanname = 35;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      35, this->clanname(), output);
  }

  // optional int32 AntiAddictionState = 36;
  if (has_antiaddictionstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->antiaddictionstate(), output);
  }

  // optional int32 AntiAddictionOnLineTime = 37;
  if (has_antiaddictiononlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->antiaddictiononlinetime(), output);
  }

  // optional int32 pkType = 38;
  if (has_pktype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->pktype(), output);
  }

  // optional double totalOnlineTime = 39;
  if (has_totalonlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(39, this->totalonlinetime(), output);
  }

  // optional int32 clanicon = 40;
  if (has_clanicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->clanicon(), output);
  }

  // optional int32 money = 41;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->money(), output);
  }

  // optional int32 gold = 42;
  if (has_gold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->gold(), output);
  }

  // optional int32 bgold = 43;
  if (has_bgold()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->bgold(), output);
  }

  // optional int32 fashionID = 44;
  if (has_fashionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->fashionid(), output);
  }

  // optional int32 rechargeState = 45;
  if (has_rechargestate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->rechargestate(), output);
  }

  // optional int64 coupleID = 46;
  if (has_coupleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(46, this->coupleid(), output);
  }

  // optional int32 countryjob = 47;
  if (has_countryjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->countryjob(), output);
  }

  // optional int32 contrycontribute = 48;
  if (has_contrycontribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(48, this->contrycontribute(), output);
  }

  // optional int32 envelopeCount = 49;
  if (has_envelopecount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->envelopecount(), output);
  }

  // optional int32 credit = 50;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->credit(), output);
  }

  // optional int32 is_yellow_vip = 51;
  if (has_is_yellow_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(51, this->is_yellow_vip(), output);
  }

  // optional int32 is_yellow_year_vip = 52;
  if (has_is_yellow_year_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(52, this->is_yellow_year_vip(), output);
  }

  // optional int32 yellow_vip_level = 53;
  if (has_yellow_vip_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->yellow_vip_level(), output);
  }

  // optional int32 is_yellow_high_vip = 54;
  if (has_is_yellow_high_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(54, this->is_yellow_high_vip(), output);
  }

  // optional int32 vipCardLv = 55;
  if (has_vipcardlv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(55, this->vipcardlv(), output);
  }

  // optional int64 vipCardTime = 56;
  if (has_vipcardtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(56, this->vipcardtime(), output);
  }

  // optional string coupleName = 57;
  if (has_couplename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->couplename().data(), this->couplename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      57, this->couplename(), output);
  }

  // optional int32 guide = 58;
  if (has_guide()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(58, this->guide(), output);
  }

  // optional int64 challengemoney = 59;
  if (has_challengemoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(59, this->challengemoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->key(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required int32 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hp(), target);
  }

  // required int32 hpmax = 6;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hpmax(), target);
  }

  // required int32 mp = 7;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mp(), target);
  }

  // required int32 mpmax = 8;
  if (has_mpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mpmax(), target);
  }

  // required int64 mapid = 9;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->mapid(), target);
  }

  // required int32 xpos = 10;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->xpos(), target);
  }

  // required int32 ypos = 11;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->ypos(), target);
  }

  // required int64 exp = 12;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->exp(), target);
  }

  // required int32 country = 13;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->country(), target);
  }

  // required int32 faction = 14;
  if (has_faction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->faction(), target);
  }

  // required int32 sex = 15;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->sex(), target);
  }

  // required int32 profession = 16;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->profession(), target);
  }

  // required int32 force = 17;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->force(), target);
  }

  // required int32 forcemax = 18;
  if (has_forcemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->forcemax(), target);
  }

  // required int32 movespeed = 19;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->movespeed(), target);
  }

  // optional .CharLogin.EquipQuickInfo nowequip = 20;
  if (has_nowequip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        20, this->nowequip(), target);
  }

  // optional .CharLogin.skillInfoPro skillinfo = 21;
  if (has_skillinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->skillinfo(), target);
  }

  // repeated .CharLogin.CharCDTime cd = 22;
  for (int i = 0; i < this->cd_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->cd(i), target);
  }

  // optional .PlayerInfo.MonitorInfo mt = 23;
  if (has_mt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        23, this->mt(), target);
  }

  // optional uint32 horse = 24;
  if (has_horse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(24, this->horse(), target);
  }

  // optional int32 sinvalue = 25;
  if (has_sinvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->sinvalue(), target);
  }

  // optional int32 acupoint = 26;
  if (has_acupoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->acupoint(), target);
  }

  // optional .PlayerInfo.SettingInfo settings = 27;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->settings(), target);
  }

  // optional double loginTime = 28;
  if (has_logintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(28, this->logintime(), target);
  }

  // optional int32 fightPower = 29;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->fightpower(), target);
  }

  // optional int32 titleId = 30;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->titleid(), target);
  }

  // optional int32 viplv = 31;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->viplv(), target);
  }

  // optional int32 addupgold = 32;
  if (has_addupgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->addupgold(), target);
  }

  // optional int64 isininstance = 33;
  if (has_isininstance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->isininstance(), target);
  }

  // optional int32 job = 34;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->job(), target);
  }

  // optional string clanname = 35;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        35, this->clanname(), target);
  }

  // optional int32 AntiAddictionState = 36;
  if (has_antiaddictionstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->antiaddictionstate(), target);
  }

  // optional int32 AntiAddictionOnLineTime = 37;
  if (has_antiaddictiononlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->antiaddictiononlinetime(), target);
  }

  // optional int32 pkType = 38;
  if (has_pktype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->pktype(), target);
  }

  // optional double totalOnlineTime = 39;
  if (has_totalonlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(39, this->totalonlinetime(), target);
  }

  // optional int32 clanicon = 40;
  if (has_clanicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->clanicon(), target);
  }

  // optional int32 money = 41;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->money(), target);
  }

  // optional int32 gold = 42;
  if (has_gold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->gold(), target);
  }

  // optional int32 bgold = 43;
  if (has_bgold()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->bgold(), target);
  }

  // optional int32 fashionID = 44;
  if (has_fashionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->fashionid(), target);
  }

  // optional int32 rechargeState = 45;
  if (has_rechargestate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->rechargestate(), target);
  }

  // optional int64 coupleID = 46;
  if (has_coupleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(46, this->coupleid(), target);
  }

  // optional int32 countryjob = 47;
  if (has_countryjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->countryjob(), target);
  }

  // optional int32 contrycontribute = 48;
  if (has_contrycontribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(48, this->contrycontribute(), target);
  }

  // optional int32 envelopeCount = 49;
  if (has_envelopecount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->envelopecount(), target);
  }

  // optional int32 credit = 50;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->credit(), target);
  }

  // optional int32 is_yellow_vip = 51;
  if (has_is_yellow_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(51, this->is_yellow_vip(), target);
  }

  // optional int32 is_yellow_year_vip = 52;
  if (has_is_yellow_year_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(52, this->is_yellow_year_vip(), target);
  }

  // optional int32 yellow_vip_level = 53;
  if (has_yellow_vip_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->yellow_vip_level(), target);
  }

  // optional int32 is_yellow_high_vip = 54;
  if (has_is_yellow_high_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(54, this->is_yellow_high_vip(), target);
  }

  // optional int32 vipCardLv = 55;
  if (has_vipcardlv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(55, this->vipcardlv(), target);
  }

  // optional int64 vipCardTime = 56;
  if (has_vipcardtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(56, this->vipcardtime(), target);
  }

  // optional string coupleName = 57;
  if (has_couplename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->couplename().data(), this->couplename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        57, this->couplename(), target);
  }

  // optional int32 guide = 58;
  if (has_guide()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(58, this->guide(), target);
  }

  // optional int64 challengemoney = 59;
  if (has_challengemoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(59, this->challengemoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 hpmax = 6;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

    // required int32 mp = 7;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // required int32 mpmax = 8;
    if (has_mpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mpmax());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int64 mapid = 9;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // required int32 xpos = 10;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

    // required int32 ypos = 11;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

    // required int64 exp = 12;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // required int32 country = 13;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // required int32 faction = 14;
    if (has_faction()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faction());
    }

    // required int32 sex = 15;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required int32 profession = 16;
    if (has_profession()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 force = 17;
    if (has_force()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }

    // required int32 forcemax = 18;
    if (has_forcemax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forcemax());
    }

    // required int32 movespeed = 19;
    if (has_movespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

    // optional .CharLogin.EquipQuickInfo nowequip = 20;
    if (has_nowequip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->nowequip());
    }

    // optional .CharLogin.skillInfoPro skillinfo = 21;
    if (has_skillinfo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skillinfo());
    }

    // optional .PlayerInfo.MonitorInfo mt = 23;
    if (has_mt()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->mt());
    }

    // optional uint32 horse = 24;
    if (has_horse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->horse());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 sinvalue = 25;
    if (has_sinvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sinvalue());
    }

    // optional int32 acupoint = 26;
    if (has_acupoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acupoint());
    }

    // optional .PlayerInfo.SettingInfo settings = 27;
    if (has_settings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->settings());
    }

    // optional double loginTime = 28;
    if (has_logintime()) {
      total_size += 2 + 8;
    }

    // optional int32 fightPower = 29;
    if (has_fightpower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightpower());
    }

    // optional int32 titleId = 30;
    if (has_titleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // optional int32 viplv = 31;
    if (has_viplv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

    // optional int32 addupgold = 32;
    if (has_addupgold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addupgold());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int64 isininstance = 33;
    if (has_isininstance()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->isininstance());
    }

    // optional int32 job = 34;
    if (has_job()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // optional string clanname = 35;
    if (has_clanname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clanname());
    }

    // optional int32 AntiAddictionState = 36;
    if (has_antiaddictionstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antiaddictionstate());
    }

    // optional int32 AntiAddictionOnLineTime = 37;
    if (has_antiaddictiononlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antiaddictiononlinetime());
    }

    // optional int32 pkType = 38;
    if (has_pktype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pktype());
    }

    // optional double totalOnlineTime = 39;
    if (has_totalonlinetime()) {
      total_size += 2 + 8;
    }

    // optional int32 clanicon = 40;
    if (has_clanicon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanicon());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // optional int32 money = 41;
    if (has_money()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // optional int32 gold = 42;
    if (has_gold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->gold());
    }

    // optional int32 bgold = 43;
    if (has_bgold()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bgold());
    }

    // optional int32 fashionID = 44;
    if (has_fashionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashionid());
    }

    // optional int32 rechargeState = 45;
    if (has_rechargestate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rechargestate());
    }

    // optional int64 coupleID = 46;
    if (has_coupleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->coupleid());
    }

    // optional int32 countryjob = 47;
    if (has_countryjob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryjob());
    }

    // optional int32 contrycontribute = 48;
    if (has_contrycontribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contrycontribute());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 envelopeCount = 49;
    if (has_envelopecount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->envelopecount());
    }

    // optional int32 credit = 50;
    if (has_credit()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

    // optional int32 is_yellow_vip = 51;
    if (has_is_yellow_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_yellow_vip());
    }

    // optional int32 is_yellow_year_vip = 52;
    if (has_is_yellow_year_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_yellow_year_vip());
    }

    // optional int32 yellow_vip_level = 53;
    if (has_yellow_vip_level()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->yellow_vip_level());
    }

    // optional int32 is_yellow_high_vip = 54;
    if (has_is_yellow_high_vip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->is_yellow_high_vip());
    }

    // optional int32 vipCardLv = 55;
    if (has_vipcardlv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vipcardlv());
    }

    // optional int64 vipCardTime = 56;
    if (has_vipcardtime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->vipcardtime());
    }

  }
  if (_has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    // optional string coupleName = 57;
    if (has_couplename()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->couplename());
    }

    // optional int32 guide = 58;
    if (has_guide()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guide());
    }

    // optional int64 challengemoney = 59;
    if (has_challengemoney()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->challengemoney());
    }

  }
  // repeated .CharLogin.CharCDTime cd = 22;
  total_size += 2 * this->cd_size();
  for (int i = 0; i < this->cd_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->cd(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharBaseInfo::MergeFrom(const CharBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  cd_.MergeFrom(from.cd_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_mpmax()) {
      set_mpmax(from.mpmax());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_faction()) {
      set_faction(from.faction());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_forcemax()) {
      set_forcemax(from.forcemax());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_nowequip()) {
      mutable_nowequip()->::CharLogin::EquipQuickInfo::MergeFrom(from.nowequip());
    }
    if (from.has_skillinfo()) {
      mutable_skillinfo()->::CharLogin::skillInfoPro::MergeFrom(from.skillinfo());
    }
    if (from.has_mt()) {
      mutable_mt()->::PlayerInfo::MonitorInfo::MergeFrom(from.mt());
    }
    if (from.has_horse()) {
      set_horse(from.horse());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_sinvalue()) {
      set_sinvalue(from.sinvalue());
    }
    if (from.has_acupoint()) {
      set_acupoint(from.acupoint());
    }
    if (from.has_settings()) {
      mutable_settings()->::PlayerInfo::SettingInfo::MergeFrom(from.settings());
    }
    if (from.has_logintime()) {
      set_logintime(from.logintime());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_addupgold()) {
      set_addupgold(from.addupgold());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_isininstance()) {
      set_isininstance(from.isininstance());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_clanname()) {
      set_clanname(from.clanname());
    }
    if (from.has_antiaddictionstate()) {
      set_antiaddictionstate(from.antiaddictionstate());
    }
    if (from.has_antiaddictiononlinetime()) {
      set_antiaddictiononlinetime(from.antiaddictiononlinetime());
    }
    if (from.has_pktype()) {
      set_pktype(from.pktype());
    }
    if (from.has_totalonlinetime()) {
      set_totalonlinetime(from.totalonlinetime());
    }
    if (from.has_clanicon()) {
      set_clanicon(from.clanicon());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_gold()) {
      set_gold(from.gold());
    }
    if (from.has_bgold()) {
      set_bgold(from.bgold());
    }
    if (from.has_fashionid()) {
      set_fashionid(from.fashionid());
    }
    if (from.has_rechargestate()) {
      set_rechargestate(from.rechargestate());
    }
    if (from.has_coupleid()) {
      set_coupleid(from.coupleid());
    }
    if (from.has_countryjob()) {
      set_countryjob(from.countryjob());
    }
    if (from.has_contrycontribute()) {
      set_contrycontribute(from.contrycontribute());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_envelopecount()) {
      set_envelopecount(from.envelopecount());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_is_yellow_vip()) {
      set_is_yellow_vip(from.is_yellow_vip());
    }
    if (from.has_is_yellow_year_vip()) {
      set_is_yellow_year_vip(from.is_yellow_year_vip());
    }
    if (from.has_yellow_vip_level()) {
      set_yellow_vip_level(from.yellow_vip_level());
    }
    if (from.has_is_yellow_high_vip()) {
      set_is_yellow_high_vip(from.is_yellow_high_vip());
    }
    if (from.has_vipcardlv()) {
      set_vipcardlv(from.vipcardlv());
    }
    if (from.has_vipcardtime()) {
      set_vipcardtime(from.vipcardtime());
    }
  }
  if (from._has_bits_[56 / 32] & (0xffu << (56 % 32))) {
    if (from.has_couplename()) {
      set_couplename(from.couplename());
    }
    if (from.has_guide()) {
      set_guide(from.guide());
    }
    if (from.has_challengemoney()) {
      set_challengemoney(from.challengemoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharBaseInfo::CopyFrom(const CharBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0007ffff) != 0x0007ffff) return false;

  if (has_nowequip()) {
    if (!this->nowequip().IsInitialized()) return false;
  }
  for (int i = 0; i < cd_size(); i++) {
    if (!this->cd(i).IsInitialized()) return false;
  }
  return true;
}

void CharBaseInfo::Swap(CharBaseInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(key_, other->key_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(hp_, other->hp_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(mp_, other->mp_);
    std::swap(mpmax_, other->mpmax_);
    std::swap(mapid_, other->mapid_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(exp_, other->exp_);
    std::swap(country_, other->country_);
    std::swap(faction_, other->faction_);
    std::swap(sex_, other->sex_);
    std::swap(profession_, other->profession_);
    std::swap(force_, other->force_);
    std::swap(forcemax_, other->forcemax_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(nowequip_, other->nowequip_);
    std::swap(skillinfo_, other->skillinfo_);
    cd_.Swap(&other->cd_);
    std::swap(mt_, other->mt_);
    std::swap(horse_, other->horse_);
    std::swap(sinvalue_, other->sinvalue_);
    std::swap(acupoint_, other->acupoint_);
    std::swap(settings_, other->settings_);
    std::swap(logintime_, other->logintime_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(titleid_, other->titleid_);
    std::swap(viplv_, other->viplv_);
    std::swap(addupgold_, other->addupgold_);
    std::swap(isininstance_, other->isininstance_);
    std::swap(job_, other->job_);
    std::swap(clanname_, other->clanname_);
    std::swap(antiaddictionstate_, other->antiaddictionstate_);
    std::swap(antiaddictiononlinetime_, other->antiaddictiononlinetime_);
    std::swap(pktype_, other->pktype_);
    std::swap(totalonlinetime_, other->totalonlinetime_);
    std::swap(clanicon_, other->clanicon_);
    std::swap(money_, other->money_);
    std::swap(gold_, other->gold_);
    std::swap(bgold_, other->bgold_);
    std::swap(fashionid_, other->fashionid_);
    std::swap(rechargestate_, other->rechargestate_);
    std::swap(coupleid_, other->coupleid_);
    std::swap(countryjob_, other->countryjob_);
    std::swap(contrycontribute_, other->contrycontribute_);
    std::swap(envelopecount_, other->envelopecount_);
    std::swap(credit_, other->credit_);
    std::swap(is_yellow_vip_, other->is_yellow_vip_);
    std::swap(is_yellow_year_vip_, other->is_yellow_year_vip_);
    std::swap(yellow_vip_level_, other->yellow_vip_level_);
    std::swap(is_yellow_high_vip_, other->is_yellow_high_vip_);
    std::swap(vipcardlv_, other->vipcardlv_);
    std::swap(vipcardtime_, other->vipcardtime_);
    std::swap(couplename_, other->couplename_);
    std::swap(guide_, other->guide_);
    std::swap(challengemoney_, other->challengemoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharBaseInfo_descriptor_;
  metadata.reflection = CharBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharCDTime::kTypeFieldNumber;
const int CharCDTime::kTimeFieldNumber;
#endif  // !_MSC_VER

CharCDTime::CharCDTime()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharCDTime::InitAsDefaultInstance() {
}

CharCDTime::CharCDTime(const CharCDTime& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharCDTime::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharCDTime::~CharCDTime() {
  SharedDtor();
}

void CharCDTime::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharCDTime::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharCDTime::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharCDTime_descriptor_;
}

const CharCDTime& CharCDTime::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

CharCDTime* CharCDTime::default_instance_ = NULL;

CharCDTime* CharCDTime::New() const {
  return new CharCDTime;
}

void CharCDTime::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharCDTime::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // required int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharCDTime::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // required int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharCDTime::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // required int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharCDTime::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharCDTime::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharCDTime* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharCDTime*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharCDTime::MergeFrom(const CharCDTime& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharCDTime::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharCDTime::CopyFrom(const CharCDTime& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharCDTime::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CharCDTime::Swap(CharCDTime* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharCDTime::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharCDTime_descriptor_;
  metadata.reflection = CharCDTime_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharQuestInfo::kActiveFieldNumber;
const int CharQuestInfo::kDailyFieldNumber;
const int CharQuestInfo::kClanFieldNumber;
#endif  // !_MSC_VER

CharQuestInfo::CharQuestInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharQuestInfo::InitAsDefaultInstance() {
}

CharQuestInfo::CharQuestInfo(const CharQuestInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharQuestInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharQuestInfo::~CharQuestInfo() {
  SharedDtor();
}

void CharQuestInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharQuestInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharQuestInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharQuestInfo_descriptor_;
}

const CharQuestInfo& CharQuestInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

CharQuestInfo* CharQuestInfo::default_instance_ = NULL;

CharQuestInfo* CharQuestInfo::New() const {
  return new CharQuestInfo;
}

void CharQuestInfo::Clear() {
  active_.Clear();
  daily_.Clear();
  clan_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharQuestInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerInfo.ActiveQuest active = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_active:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_active()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_active;
        if (input->ExpectTag(18)) goto parse_daily;
        break;
      }

      // repeated .PlayerInfo.DailyQuest daily = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_daily:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_daily()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_daily;
        if (input->ExpectTag(26)) goto parse_clan;
        break;
      }

      // repeated .PlayerInfo.ClanQuest clan = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clan:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_clan()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clan;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharQuestInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerInfo.ActiveQuest active = 1;
  for (int i = 0; i < this->active_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->active(i), output);
  }

  // repeated .PlayerInfo.DailyQuest daily = 2;
  for (int i = 0; i < this->daily_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->daily(i), output);
  }

  // repeated .PlayerInfo.ClanQuest clan = 3;
  for (int i = 0; i < this->clan_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->clan(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharQuestInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerInfo.ActiveQuest active = 1;
  for (int i = 0; i < this->active_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->active(i), target);
  }

  // repeated .PlayerInfo.DailyQuest daily = 2;
  for (int i = 0; i < this->daily_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->daily(i), target);
  }

  // repeated .PlayerInfo.ClanQuest clan = 3;
  for (int i = 0; i < this->clan_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->clan(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharQuestInfo::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerInfo.ActiveQuest active = 1;
  total_size += 1 * this->active_size();
  for (int i = 0; i < this->active_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->active(i));
  }

  // repeated .PlayerInfo.DailyQuest daily = 2;
  total_size += 1 * this->daily_size();
  for (int i = 0; i < this->daily_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->daily(i));
  }

  // repeated .PlayerInfo.ClanQuest clan = 3;
  total_size += 1 * this->clan_size();
  for (int i = 0; i < this->clan_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->clan(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharQuestInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharQuestInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharQuestInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharQuestInfo::MergeFrom(const CharQuestInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  active_.MergeFrom(from.active_);
  daily_.MergeFrom(from.daily_);
  clan_.MergeFrom(from.clan_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharQuestInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharQuestInfo::CopyFrom(const CharQuestInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharQuestInfo::IsInitialized() const {

  for (int i = 0; i < active_size(); i++) {
    if (!this->active(i).IsInitialized()) return false;
  }
  for (int i = 0; i < daily_size(); i++) {
    if (!this->daily(i).IsInitialized()) return false;
  }
  for (int i = 0; i < clan_size(); i++) {
    if (!this->clan(i).IsInitialized()) return false;
  }
  return true;
}

void CharQuestInfo::Swap(CharQuestInfo* other) {
  if (other != this) {
    active_.Swap(&other->active_);
    daily_.Swap(&other->daily_);
    clan_.Swap(&other->clan_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharQuestInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharQuestInfo_descriptor_;
  metadata.reflection = CharQuestInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharQuestToGT::kCharidFieldNumber;
const int CharQuestToGT::kActiveFieldNumber;
#endif  // !_MSC_VER

CharQuestToGT::CharQuestToGT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharQuestToGT::InitAsDefaultInstance() {
  active_ = const_cast< ::CharLogin::CharQuestInfo*>(&::CharLogin::CharQuestInfo::default_instance());
}

CharQuestToGT::CharQuestToGT(const CharQuestToGT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharQuestToGT::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  active_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharQuestToGT::~CharQuestToGT() {
  SharedDtor();
}

void CharQuestToGT::SharedDtor() {
  if (this != default_instance_) {
    delete active_;
  }
}

void CharQuestToGT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharQuestToGT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharQuestToGT_descriptor_;
}

const CharQuestToGT& CharQuestToGT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

CharQuestToGT* CharQuestToGT::default_instance_ = NULL;

CharQuestToGT* CharQuestToGT::New() const {
  return new CharQuestToGT;
}

void CharQuestToGT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_active()) {
      if (active_ != NULL) active_->::CharLogin::CharQuestInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharQuestToGT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_active;
        break;
      }

      // optional .CharLogin.CharQuestInfo active = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_active:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_active()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharQuestToGT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional .CharLogin.CharQuestInfo active = 2;
  if (has_active()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->active(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharQuestToGT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional .CharLogin.CharQuestInfo active = 2;
  if (has_active()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->active(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharQuestToGT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional .CharLogin.CharQuestInfo active = 2;
    if (has_active()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->active());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharQuestToGT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharQuestToGT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharQuestToGT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharQuestToGT::MergeFrom(const CharQuestToGT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_active()) {
      mutable_active()->::CharLogin::CharQuestInfo::MergeFrom(from.active());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharQuestToGT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharQuestToGT::CopyFrom(const CharQuestToGT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharQuestToGT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_active()) {
    if (!this->active().IsInitialized()) return false;
  }
  return true;
}

void CharQuestToGT::Swap(CharQuestToGT* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(active_, other->active_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharQuestToGT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharQuestToGT_descriptor_;
  metadata.reflection = CharQuestToGT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckToClientAcceptable::kQuestidFieldNumber;
#endif  // !_MSC_VER

AckToClientAcceptable::AckToClientAcceptable()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckToClientAcceptable::InitAsDefaultInstance() {
}

AckToClientAcceptable::AckToClientAcceptable(const AckToClientAcceptable& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckToClientAcceptable::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckToClientAcceptable::~AckToClientAcceptable() {
  SharedDtor();
}

void AckToClientAcceptable::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckToClientAcceptable::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckToClientAcceptable::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckToClientAcceptable_descriptor_;
}

const AckToClientAcceptable& AckToClientAcceptable::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

AckToClientAcceptable* AckToClientAcceptable::default_instance_ = NULL;

AckToClientAcceptable* AckToClientAcceptable::New() const {
  return new AckToClientAcceptable;
}

void AckToClientAcceptable::Clear() {
  questid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckToClientAcceptable::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 questid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_questid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_questid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_questid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_questid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckToClientAcceptable::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 questid = 1;
  for (int i = 0; i < this->questid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->questid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckToClientAcceptable::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 questid = 1;
  for (int i = 0; i < this->questid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->questid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckToClientAcceptable::ByteSize() const {
  int total_size = 0;

  // repeated int32 questid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->questid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->questid(i));
    }
    total_size += 1 * this->questid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckToClientAcceptable::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckToClientAcceptable* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckToClientAcceptable*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckToClientAcceptable::MergeFrom(const AckToClientAcceptable& from) {
  GOOGLE_CHECK_NE(&from, this);
  questid_.MergeFrom(from.questid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckToClientAcceptable::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckToClientAcceptable::CopyFrom(const AckToClientAcceptable& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckToClientAcceptable::IsInitialized() const {

  return true;
}

void AckToClientAcceptable::Swap(AckToClientAcceptable* other) {
  if (other != this) {
    questid_.Swap(&other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckToClientAcceptable::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckToClientAcceptable_descriptor_;
  metadata.reflection = AckToClientAcceptable_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AcceptableQuestToGT::kIdFieldNumber;
const int AcceptableQuestToGT::kQuestidFieldNumber;
#endif  // !_MSC_VER

AcceptableQuestToGT::AcceptableQuestToGT()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AcceptableQuestToGT::InitAsDefaultInstance() {
  questid_ = const_cast< ::CharLogin::AckToClientAcceptable*>(&::CharLogin::AckToClientAcceptable::default_instance());
}

AcceptableQuestToGT::AcceptableQuestToGT(const AcceptableQuestToGT& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AcceptableQuestToGT::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  questid_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AcceptableQuestToGT::~AcceptableQuestToGT() {
  SharedDtor();
}

void AcceptableQuestToGT::SharedDtor() {
  if (this != default_instance_) {
    delete questid_;
  }
}

void AcceptableQuestToGT::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AcceptableQuestToGT::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AcceptableQuestToGT_descriptor_;
}

const AcceptableQuestToGT& AcceptableQuestToGT::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

AcceptableQuestToGT* AcceptableQuestToGT::default_instance_ = NULL;

AcceptableQuestToGT* AcceptableQuestToGT::New() const {
  return new AcceptableQuestToGT;
}

void AcceptableQuestToGT::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_questid()) {
      if (questid_ != NULL) questid_->::CharLogin::AckToClientAcceptable::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AcceptableQuestToGT::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_questid;
        break;
      }

      // optional .CharLogin.AckToClientAcceptable questid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_questid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_questid()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AcceptableQuestToGT::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional .CharLogin.AckToClientAcceptable questid = 2;
  if (has_questid()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->questid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AcceptableQuestToGT::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional .CharLogin.AckToClientAcceptable questid = 2;
  if (has_questid()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->questid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AcceptableQuestToGT::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional .CharLogin.AckToClientAcceptable questid = 2;
    if (has_questid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->questid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AcceptableQuestToGT::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AcceptableQuestToGT* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AcceptableQuestToGT*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AcceptableQuestToGT::MergeFrom(const AcceptableQuestToGT& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_questid()) {
      mutable_questid()->::CharLogin::AckToClientAcceptable::MergeFrom(from.questid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AcceptableQuestToGT::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AcceptableQuestToGT::CopyFrom(const AcceptableQuestToGT& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AcceptableQuestToGT::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AcceptableQuestToGT::Swap(AcceptableQuestToGT* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(questid_, other->questid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AcceptableQuestToGT::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AcceptableQuestToGT_descriptor_;
  metadata.reflection = AcceptableQuestToGT_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientContainerInfo::kTypeFieldNumber;
const int ClientContainerInfo::kPackFieldNumber;
const int ClientContainerInfo::kStorehouseFieldNumber;
const int ClientContainerInfo::kPnoFieldNumber;
#endif  // !_MSC_VER

ClientContainerInfo::ClientContainerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientContainerInfo::InitAsDefaultInstance() {
  pack_ = const_cast< ::CharLogin::PackageInfo*>(&::CharLogin::PackageInfo::default_instance());
  storehouse_ = const_cast< ::CharLogin::StoreHouseInfo*>(&::CharLogin::StoreHouseInfo::default_instance());
}

ClientContainerInfo::ClientContainerInfo(const ClientContainerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientContainerInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  pack_ = NULL;
  storehouse_ = NULL;
  pno_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientContainerInfo::~ClientContainerInfo() {
  SharedDtor();
}

void ClientContainerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete pack_;
    delete storehouse_;
  }
}

void ClientContainerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientContainerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientContainerInfo_descriptor_;
}

const ClientContainerInfo& ClientContainerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

ClientContainerInfo* ClientContainerInfo::default_instance_ = NULL;

ClientContainerInfo* ClientContainerInfo::New() const {
  return new ClientContainerInfo;
}

void ClientContainerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_pack()) {
      if (pack_ != NULL) pack_->::CharLogin::PackageInfo::Clear();
    }
    if (has_storehouse()) {
      if (storehouse_ != NULL) storehouse_->::CharLogin::StoreHouseInfo::Clear();
    }
    pno_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientContainerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pack;
        break;
      }

      // optional .CharLogin.PackageInfo pack = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_storehouse;
        break;
      }

      // optional .CharLogin.StoreHouseInfo storehouse = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storehouse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_storehouse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_pno;
        break;
      }

      // optional int32 pno = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pno:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pno_)));
          set_has_pno();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientContainerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional .CharLogin.PackageInfo pack = 2;
  if (has_pack()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pack(), output);
  }

  // optional .CharLogin.StoreHouseInfo storehouse = 3;
  if (has_storehouse()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->storehouse(), output);
  }

  // optional int32 pno = 4;
  if (has_pno()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->pno(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientContainerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional .CharLogin.PackageInfo pack = 2;
  if (has_pack()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pack(), target);
  }

  // optional .CharLogin.StoreHouseInfo storehouse = 3;
  if (has_storehouse()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->storehouse(), target);
  }

  // optional int32 pno = 4;
  if (has_pno()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->pno(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientContainerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional .CharLogin.PackageInfo pack = 2;
    if (has_pack()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pack());
    }

    // optional .CharLogin.StoreHouseInfo storehouse = 3;
    if (has_storehouse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->storehouse());
    }

    // optional int32 pno = 4;
    if (has_pno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pno());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientContainerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientContainerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientContainerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientContainerInfo::MergeFrom(const ClientContainerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_pack()) {
      mutable_pack()->::CharLogin::PackageInfo::MergeFrom(from.pack());
    }
    if (from.has_storehouse()) {
      mutable_storehouse()->::CharLogin::StoreHouseInfo::MergeFrom(from.storehouse());
    }
    if (from.has_pno()) {
      set_pno(from.pno());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientContainerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientContainerInfo::CopyFrom(const ClientContainerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientContainerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_pack()) {
    if (!this->pack().IsInitialized()) return false;
  }
  if (has_storehouse()) {
    if (!this->storehouse().IsInitialized()) return false;
  }
  return true;
}

void ClientContainerInfo::Swap(ClientContainerInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(pack_, other->pack_);
    std::swap(storehouse_, other->storehouse_);
    std::swap(pno_, other->pno_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientContainerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientContainerInfo_descriptor_;
  metadata.reflection = ClientContainerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToGTContainerInfo::kCharidFieldNumber;
const int ToGTContainerInfo::kInfoFieldNumber;
#endif  // !_MSC_VER

ToGTContainerInfo::ToGTContainerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGTContainerInfo::InitAsDefaultInstance() {
  info_ = const_cast< ::CharLogin::ClientContainerInfo*>(&::CharLogin::ClientContainerInfo::default_instance());
}

ToGTContainerInfo::ToGTContainerInfo(const ToGTContainerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGTContainerInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGTContainerInfo::~ToGTContainerInfo() {
  SharedDtor();
}

void ToGTContainerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void ToGTContainerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGTContainerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGTContainerInfo_descriptor_;
}

const ToGTContainerInfo& ToGTContainerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

ToGTContainerInfo* ToGTContainerInfo::default_instance_ = NULL;

ToGTContainerInfo* ToGTContainerInfo::New() const {
  return new ToGTContainerInfo;
}

void ToGTContainerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::CharLogin::ClientContainerInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGTContainerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // required .CharLogin.ClientContainerInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToGTContainerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required .CharLogin.ClientContainerInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGTContainerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required .CharLogin.ClientContainerInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGTContainerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required .CharLogin.ClientContainerInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGTContainerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGTContainerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGTContainerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGTContainerInfo::MergeFrom(const ToGTContainerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_info()) {
      mutable_info()->::CharLogin::ClientContainerInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGTContainerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGTContainerInfo::CopyFrom(const ToGTContainerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGTContainerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void ToGTContainerInfo::Swap(ToGTContainerInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGTContainerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGTContainerInfo_descriptor_;
  metadata.reflection = ToGTContainerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipQuickInfo::kEquipFieldNumber;
const int EquipQuickInfo::kQuickFieldNumber;
#endif  // !_MSC_VER

EquipQuickInfo::EquipQuickInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipQuickInfo::InitAsDefaultInstance() {
}

EquipQuickInfo::EquipQuickInfo(const EquipQuickInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipQuickInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipQuickInfo::~EquipQuickInfo() {
  SharedDtor();
}

void EquipQuickInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipQuickInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipQuickInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipQuickInfo_descriptor_;
}

const EquipQuickInfo& EquipQuickInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

EquipQuickInfo* EquipQuickInfo::default_instance_ = NULL;

EquipQuickInfo* EquipQuickInfo::New() const {
  return new EquipQuickInfo;
}

void EquipQuickInfo::Clear() {
  equip_.Clear();
  quick_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipQuickInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CharLogin.ClientItemInfo equip = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_equip;
        if (input->ExpectTag(18)) goto parse_quick;
        break;
      }

      // repeated .PlayerInfo.QuickContainer quick = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_quick:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_quick()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_quick;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipQuickInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CharLogin.ClientItemInfo equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->equip(i), output);
  }

  // repeated .PlayerInfo.QuickContainer quick = 2;
  for (int i = 0; i < this->quick_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->quick(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipQuickInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CharLogin.ClientItemInfo equip = 1;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->equip(i), target);
  }

  // repeated .PlayerInfo.QuickContainer quick = 2;
  for (int i = 0; i < this->quick_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->quick(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipQuickInfo::ByteSize() const {
  int total_size = 0;

  // repeated .CharLogin.ClientItemInfo equip = 1;
  total_size += 1 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  // repeated .PlayerInfo.QuickContainer quick = 2;
  total_size += 1 * this->quick_size();
  for (int i = 0; i < this->quick_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->quick(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipQuickInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipQuickInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipQuickInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipQuickInfo::MergeFrom(const EquipQuickInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  quick_.MergeFrom(from.quick_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipQuickInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipQuickInfo::CopyFrom(const EquipQuickInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipQuickInfo::IsInitialized() const {

  for (int i = 0; i < equip_size(); i++) {
    if (!this->equip(i).IsInitialized()) return false;
  }
  for (int i = 0; i < quick_size(); i++) {
    if (!this->quick(i).IsInitialized()) return false;
  }
  return true;
}

void EquipQuickInfo::Swap(EquipQuickInfo* other) {
  if (other != this) {
    equip_.Swap(&other->equip_);
    quick_.Swap(&other->quick_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipQuickInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipQuickInfo_descriptor_;
  metadata.reflection = EquipQuickInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PackageInfo::kPackFieldNumber;
const int PackageInfo::kSizeFieldNumber;
const int PackageInfo::kDtimeFieldNumber;
#endif  // !_MSC_VER

PackageInfo::PackageInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PackageInfo::InitAsDefaultInstance() {
}

PackageInfo::PackageInfo(const PackageInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PackageInfo::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
  dtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PackageInfo::~PackageInfo() {
  SharedDtor();
}

void PackageInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PackageInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PackageInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PackageInfo_descriptor_;
}

const PackageInfo& PackageInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

PackageInfo* PackageInfo::default_instance_ = NULL;

PackageInfo* PackageInfo::New() const {
  return new PackageInfo;
}

void PackageInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    size_ = 0;
    dtime_ = 0;
  }
  pack_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PackageInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CharLogin.ClientItemInfo pack = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pack:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pack()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_pack;
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional int32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dtime;
        break;
      }

      // optional double dtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dtime_)));
          set_has_dtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PackageInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CharLogin.ClientItemInfo pack = 1;
  for (int i = 0; i < this->pack_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->pack(i), output);
  }

  // optional int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // optional double dtime = 3;
  if (has_dtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PackageInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CharLogin.ClientItemInfo pack = 1;
  for (int i = 0; i < this->pack_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->pack(i), target);
  }

  // optional int32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  // optional double dtime = 3;
  if (has_dtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PackageInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional double dtime = 3;
    if (has_dtime()) {
      total_size += 1 + 8;
    }

  }
  // repeated .CharLogin.ClientItemInfo pack = 1;
  total_size += 1 * this->pack_size();
  for (int i = 0; i < this->pack_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pack(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PackageInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PackageInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PackageInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PackageInfo::MergeFrom(const PackageInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  pack_.MergeFrom(from.pack_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_dtime()) {
      set_dtime(from.dtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PackageInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PackageInfo::CopyFrom(const PackageInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PackageInfo::IsInitialized() const {

  for (int i = 0; i < pack_size(); i++) {
    if (!this->pack(i).IsInitialized()) return false;
  }
  return true;
}

void PackageInfo::Swap(PackageInfo* other) {
  if (other != this) {
    pack_.Swap(&other->pack_);
    std::swap(size_, other->size_);
    std::swap(dtime_, other->dtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PackageInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PackageInfo_descriptor_;
  metadata.reflection = PackageInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StoreHouseInfo::kStorehouseFieldNumber;
const int StoreHouseInfo::kSizeFieldNumber;
const int StoreHouseInfo::kDtimeFieldNumber;
#endif  // !_MSC_VER

StoreHouseInfo::StoreHouseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StoreHouseInfo::InitAsDefaultInstance() {
}

StoreHouseInfo::StoreHouseInfo(const StoreHouseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StoreHouseInfo::SharedCtor() {
  _cached_size_ = 0;
  size_ = 0;
  dtime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StoreHouseInfo::~StoreHouseInfo() {
  SharedDtor();
}

void StoreHouseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StoreHouseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StoreHouseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StoreHouseInfo_descriptor_;
}

const StoreHouseInfo& StoreHouseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

StoreHouseInfo* StoreHouseInfo::default_instance_ = NULL;

StoreHouseInfo* StoreHouseInfo::New() const {
  return new StoreHouseInfo;
}

void StoreHouseInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    size_ = 0;
    dtime_ = 0;
  }
  storehouse_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StoreHouseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CharLogin.ClientItemInfo storehouse = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_storehouse:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_storehouse()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_storehouse;
        if (input->ExpectTag(16)) goto parse_size;
        break;
      }

      // optional int32 size = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_size:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &size_)));
          set_has_size();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_dtime;
        break;
      }

      // optional double dtime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_dtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &dtime_)));
          set_has_dtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StoreHouseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CharLogin.ClientItemInfo storehouse = 1;
  for (int i = 0; i < this->storehouse_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->storehouse(i), output);
  }

  // optional int32 size = 2;
  if (has_size()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->size(), output);
  }

  // optional double dtime = 3;
  if (has_dtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->dtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StoreHouseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CharLogin.ClientItemInfo storehouse = 1;
  for (int i = 0; i < this->storehouse_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->storehouse(i), target);
  }

  // optional int32 size = 2;
  if (has_size()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->size(), target);
  }

  // optional double dtime = 3;
  if (has_dtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->dtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StoreHouseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 size = 2;
    if (has_size()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->size());
    }

    // optional double dtime = 3;
    if (has_dtime()) {
      total_size += 1 + 8;
    }

  }
  // repeated .CharLogin.ClientItemInfo storehouse = 1;
  total_size += 1 * this->storehouse_size();
  for (int i = 0; i < this->storehouse_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->storehouse(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StoreHouseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StoreHouseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StoreHouseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StoreHouseInfo::MergeFrom(const StoreHouseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  storehouse_.MergeFrom(from.storehouse_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_size()) {
      set_size(from.size());
    }
    if (from.has_dtime()) {
      set_dtime(from.dtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StoreHouseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StoreHouseInfo::CopyFrom(const StoreHouseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StoreHouseInfo::IsInitialized() const {

  for (int i = 0; i < storehouse_size(); i++) {
    if (!this->storehouse(i).IsInitialized()) return false;
  }
  return true;
}

void StoreHouseInfo::Swap(StoreHouseInfo* other) {
  if (other != this) {
    storehouse_.Swap(&other->storehouse_);
    std::swap(size_, other->size_);
    std::swap(dtime_, other->dtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StoreHouseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StoreHouseInfo_descriptor_;
  metadata.reflection = StoreHouseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientItemInfo::kIdFieldNumber;
const int ClientItemInfo::kFlagFieldNumber;
const int ClientItemInfo::kNewattrFieldNumber;
const int ClientItemInfo::kStoneidFieldNumber;
const int ClientItemInfo::kTimeFieldNumber;
const int ClientItemInfo::kNumFieldNumber;
const int ClientItemInfo::kInlayPosFieldNumber;
const int ClientItemInfo::kRefineAttrLvFieldNumber;
#endif  // !_MSC_VER

ClientItemInfo::ClientItemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientItemInfo::InitAsDefaultInstance() {
}

ClientItemInfo::ClientItemInfo(const ClientItemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientItemInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  flag_ = 0u;
  time_ = 0u;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientItemInfo::~ClientItemInfo() {
  SharedDtor();
}

void ClientItemInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientItemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientItemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientItemInfo_descriptor_;
}

const ClientItemInfo& ClientItemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

ClientItemInfo* ClientItemInfo::default_instance_ = NULL;

ClientItemInfo* ClientItemInfo::New() const {
  return new ClientItemInfo;
}

void ClientItemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    flag_ = 0u;
    time_ = 0u;
    num_ = 0u;
  }
  newattr_.Clear();
  stoneid_.Clear();
  inlaypos_.Clear();
  refineattrlv_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientItemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional uint32 flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newattr;
        break;
      }

      // repeated uint32 newattr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_newattr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 24, input, this->mutable_newattr())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_newattr())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_newattr;
        if (input->ExpectTag(32)) goto parse_stoneid;
        break;
      }

      // repeated int32 stoneid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stoneid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_stoneid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_stoneid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_stoneid;
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional uint32 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_num;
        break;
      }

      // optional uint32 num = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inlayPos;
        break;
      }

      // repeated int32 inlayPos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_inlayPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_inlaypos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_inlaypos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_inlayPos;
        if (input->ExpectTag(64)) goto parse_refineAttrLv;
        break;
      }

      // repeated uint32 refineAttrLv = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_refineAttrLv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 1, 64, input, this->mutable_refineattrlv())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, this->mutable_refineattrlv())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_refineAttrLv;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientItemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->flag(), output);
  }

  // repeated uint32 newattr = 3;
  for (int i = 0; i < this->newattr_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      3, this->newattr(i), output);
  }

  // repeated int32 stoneid = 4;
  for (int i = 0; i < this->stoneid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->stoneid(i), output);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(5, this->time(), output);
  }

  // optional uint32 num = 6;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(6, this->num(), output);
  }

  // repeated int32 inlayPos = 7;
  for (int i = 0; i < this->inlaypos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->inlaypos(i), output);
  }

  // repeated uint32 refineAttrLv = 8;
  for (int i = 0; i < this->refineattrlv_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(
      8, this->refineattrlv(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientItemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional uint32 flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->flag(), target);
  }

  // repeated uint32 newattr = 3;
  for (int i = 0; i < this->newattr_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(3, this->newattr(i), target);
  }

  // repeated int32 stoneid = 4;
  for (int i = 0; i < this->stoneid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->stoneid(i), target);
  }

  // optional uint32 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(5, this->time(), target);
  }

  // optional uint32 num = 6;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(6, this->num(), target);
  }

  // repeated int32 inlayPos = 7;
  for (int i = 0; i < this->inlaypos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->inlaypos(i), target);
  }

  // repeated uint32 refineAttrLv = 8;
  for (int i = 0; i < this->refineattrlv_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteUInt32ToArray(8, this->refineattrlv(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientItemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional uint32 flag = 2;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->flag());
    }

    // optional uint32 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->time());
    }

    // optional uint32 num = 6;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  // repeated uint32 newattr = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->newattr_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->newattr(i));
    }
    total_size += 1 * this->newattr_size() + data_size;
  }

  // repeated int32 stoneid = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->stoneid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->stoneid(i));
    }
    total_size += 1 * this->stoneid_size() + data_size;
  }

  // repeated int32 inlayPos = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->inlaypos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->inlaypos(i));
    }
    total_size += 1 * this->inlaypos_size() + data_size;
  }

  // repeated uint32 refineAttrLv = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->refineattrlv_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        UInt32Size(this->refineattrlv(i));
    }
    total_size += 1 * this->refineattrlv_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientItemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientItemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientItemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientItemInfo::MergeFrom(const ClientItemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  newattr_.MergeFrom(from.newattr_);
  stoneid_.MergeFrom(from.stoneid_);
  inlaypos_.MergeFrom(from.inlaypos_);
  refineattrlv_.MergeFrom(from.refineattrlv_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientItemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientItemInfo::CopyFrom(const ClientItemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientItemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientItemInfo::Swap(ClientItemInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(flag_, other->flag_);
    newattr_.Swap(&other->newattr_);
    stoneid_.Swap(&other->stoneid_);
    std::swap(time_, other->time_);
    std::swap(num_, other->num_);
    inlaypos_.Swap(&other->inlaypos_);
    refineattrlv_.Swap(&other->refineattrlv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientItemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientItemInfo_descriptor_;
  metadata.reflection = ClientItemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharEquip::kIdweaponFieldNumber;
const int CharEquip::kIdclothFieldNumber;
#endif  // !_MSC_VER

CharEquip::CharEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharEquip::InitAsDefaultInstance() {
}

CharEquip::CharEquip(const CharEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharEquip::SharedCtor() {
  _cached_size_ = 0;
  idweapon_ = 0;
  idcloth_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharEquip::~CharEquip() {
  SharedDtor();
}

void CharEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharEquip_descriptor_;
}

const CharEquip& CharEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

CharEquip* CharEquip::default_instance_ = NULL;

CharEquip* CharEquip::New() const {
  return new CharEquip;
}

void CharEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    idweapon_ = 0;
    idcloth_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 idweapon = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idweapon_)));
          set_has_idweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_idcloth;
        break;
      }

      // required int32 idcloth = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_idcloth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &idcloth_)));
          set_has_idcloth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 idweapon = 1;
  if (has_idweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->idweapon(), output);
  }

  // required int32 idcloth = 2;
  if (has_idcloth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->idcloth(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 idweapon = 1;
  if (has_idweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->idweapon(), target);
  }

  // required int32 idcloth = 2;
  if (has_idcloth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->idcloth(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 idweapon = 1;
    if (has_idweapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idweapon());
    }

    // required int32 idcloth = 2;
    if (has_idcloth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->idcloth());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharEquip::MergeFrom(const CharEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_idweapon()) {
      set_idweapon(from.idweapon());
    }
    if (from.has_idcloth()) {
      set_idcloth(from.idcloth());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharEquip::CopyFrom(const CharEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharEquip::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CharEquip::Swap(CharEquip* other) {
  if (other != this) {
    std::swap(idweapon_, other->idweapon_);
    std::swap(idcloth_, other->idcloth_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharEquip_descriptor_;
  metadata.reflection = CharEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WBaseInfo::kCharidFieldNumber;
const int WBaseInfo::kMapidFieldNumber;
const int WBaseInfo::kLocaltypeFieldNumber;
const int WBaseInfo::kNameFieldNumber;
const int WBaseInfo::kLvFieldNumber;
const int WBaseInfo::kProfessionFieldNumber;
const int WBaseInfo::kHatredFieldNumber;
const int WBaseInfo::kSettingsFieldNumber;
const int WBaseInfo::kCountryFieldNumber;
const int WBaseInfo::kNextTalkTimeFieldNumber;
const int WBaseInfo::kScoreFieldNumber;
const int WBaseInfo::kOfflinetimeFieldNumber;
const int WBaseInfo::kTeamidFieldNumber;
const int WBaseInfo::kFightPowerFieldNumber;
const int WBaseInfo::kSexFieldNumber;
const int WBaseInfo::kCountryjobFieldNumber;
const int WBaseInfo::kContributeFieldNumber;
const int WBaseInfo::kFitchPrizeFieldNumber;
const int WBaseInfo::kVipLevelFieldNumber;
const int WBaseInfo::kMagicWeaponFieldNumber;
const int WBaseInfo::kHorseidFieldNumber;
const int WBaseInfo::kOpenidFieldNumber;
const int WBaseInfo::kOpenkeyFieldNumber;
const int WBaseInfo::kPfFieldNumber;
const int WBaseInfo::kPfkeyFieldNumber;
const int WBaseInfo::kAddupGoldenFieldNumber;
const int WBaseInfo::kChallengeArenaNumFieldNumber;
const int WBaseInfo::kGoldenFieldNumber;
const int WBaseInfo::kAccountTypeFieldNumber;
const int WBaseInfo::kSourceFieldNumber;
#endif  // !_MSC_VER

WBaseInfo::WBaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WBaseInfo::InitAsDefaultInstance() {
}

WBaseInfo::WBaseInfo(const WBaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WBaseInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  mapid_ = GOOGLE_LONGLONG(0);
  localtype_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  profession_ = 0;
  hatred_ = 0;
  settings_ = 0;
  country_ = 0;
  nexttalktime_ = GOOGLE_LONGLONG(0);
  score_ = 0;
  offlinetime_ = GOOGLE_LONGLONG(0);
  teamid_ = GOOGLE_LONGLONG(0);
  fightpower_ = 0;
  sex_ = false;
  countryjob_ = 0;
  contribute_ = 0;
  fitchprize_ = 0;
  viplevel_ = 0;
  magicweapon_ = 0;
  horseid_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  addupgolden_ = 0;
  challengearenanum_ = 0;
  golden_ = 0;
  accounttype_ = 0;
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WBaseInfo::~WBaseInfo() {
  SharedDtor();
}

void WBaseInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    delete openkey_;
  }
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    delete pf_;
  }
  if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pfkey_;
  }
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (this != default_instance_) {
  }
}

void WBaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WBaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WBaseInfo_descriptor_;
}

const WBaseInfo& WBaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

WBaseInfo* WBaseInfo::default_instance_ = NULL;

WBaseInfo* WBaseInfo::New() const {
  return new WBaseInfo;
}

void WBaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    mapid_ = GOOGLE_LONGLONG(0);
    localtype_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    lv_ = 0;
    profession_ = 0;
    hatred_ = 0;
    settings_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    country_ = 0;
    nexttalktime_ = GOOGLE_LONGLONG(0);
    score_ = 0;
    offlinetime_ = GOOGLE_LONGLONG(0);
    teamid_ = GOOGLE_LONGLONG(0);
    fightpower_ = 0;
    sex_ = false;
    countryjob_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    contribute_ = 0;
    fitchprize_ = 0;
    viplevel_ = 0;
    magicweapon_ = 0;
    horseid_ = 0;
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    if (has_openkey()) {
      if (openkey_ != &::google::protobuf::internal::kEmptyString) {
        openkey_->clear();
      }
    }
    if (has_pf()) {
      if (pf_ != &::google::protobuf::internal::kEmptyString) {
        pf_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (has_pfkey()) {
      if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
        pfkey_->clear();
      }
    }
    addupgolden_ = 0;
    challengearenanum_ = 0;
    golden_ = 0;
    accounttype_ = 0;
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WBaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int64 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_localtype;
        break;
      }

      // optional int64 localtype = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_localtype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &localtype_)));
          set_has_localtype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional string name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }

      // optional int32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_profession;
        break;
      }

      // optional int32 profession = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_hatred;
        break;
      }

      // optional int32 hatred = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hatred:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hatred_)));
          set_has_hatred();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_settings;
        break;
      }

      // optional int32 settings = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_settings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settings_)));
          set_has_settings();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_country;
        break;
      }

      // optional int32 country = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_nextTalkTime;
        break;
      }

      // optional int64 nextTalkTime = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nextTalkTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &nexttalktime_)));
          set_has_nexttalktime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_score;
        break;
      }

      // optional int32 score = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_score:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &score_)));
          set_has_score();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_offlinetime;
        break;
      }

      // optional int64 offlinetime = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlinetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_teamid;
        break;
      }

      // optional int64 teamid = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_fightPower;
        break;
      }

      // optional int32 fightPower = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_sex;
        break;
      }

      // optional bool sex = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_countryjob;
        break;
      }

      // optional int32 countryjob = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countryjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countryjob_)));
          set_has_countryjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_contribute;
        break;
      }

      // optional int32 contribute = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_fitchPrize;
        break;
      }

      // optional int32 fitchPrize = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fitchPrize:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fitchprize_)));
          set_has_fitchprize();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_vipLevel;
        break;
      }

      // optional int32 vipLevel = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_magicWeapon;
        break;
      }

      // optional int32 magicWeapon = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicWeapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicweapon_)));
          set_has_magicweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_horseid;
        break;
      }

      // optional int32 horseid = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horseid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horseid_)));
          set_has_horseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(202)) goto parse_openid;
        break;
      }

      // optional string openid = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(210)) goto parse_openkey;
        break;
      }

      // optional string openkey = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openkey().data(), this->openkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_pf;
        break;
      }

      // optional string pf = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pf().data(), this->pf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_pfkey;
        break;
      }

      // optional string pfkey = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pfkey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pfkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pfkey().data(), this->pfkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_addupGolden;
        break;
      }

      // optional int32 addupGolden = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addupGolden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addupgolden_)));
          set_has_addupgolden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_challengeArenaNum;
        break;
      }

      // optional int32 challengeArenaNum = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challengeArenaNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challengearenanum_)));
          set_has_challengearenanum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_golden;
        break;
      }

      // optional int32 golden = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &golden_)));
          set_has_golden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_accountType;
        break;
      }

      // optional int32 accountType = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accounttype_)));
          set_has_accounttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_source;
        break;
      }

      // optional string source = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WBaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int64 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mapid(), output);
  }

  // optional int64 localtype = 3;
  if (has_localtype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->localtype(), output);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->name(), output);
  }

  // optional int32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lv(), output);
  }

  // optional int32 profession = 6;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->profession(), output);
  }

  // optional int32 hatred = 7;
  if (has_hatred()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->hatred(), output);
  }

  // optional int32 settings = 8;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->settings(), output);
  }

  // optional int32 country = 10;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->country(), output);
  }

  // optional int64 nextTalkTime = 12;
  if (has_nexttalktime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->nexttalktime(), output);
  }

  // optional int32 score = 13;
  if (has_score()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->score(), output);
  }

  // optional int64 offlinetime = 14;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->offlinetime(), output);
  }

  // optional int64 teamid = 15;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(15, this->teamid(), output);
  }

  // optional int32 fightPower = 16;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->fightpower(), output);
  }

  // optional bool sex = 17;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->sex(), output);
  }

  // optional int32 countryjob = 19;
  if (has_countryjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->countryjob(), output);
  }

  // optional int32 contribute = 20;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->contribute(), output);
  }

  // optional int32 fitchPrize = 21;
  if (has_fitchprize()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->fitchprize(), output);
  }

  // optional int32 vipLevel = 22;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->viplevel(), output);
  }

  // optional int32 magicWeapon = 23;
  if (has_magicweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->magicweapon(), output);
  }

  // optional int32 horseid = 24;
  if (has_horseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->horseid(), output);
  }

  // optional string openid = 25;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      25, this->openid(), output);
  }

  // optional string openkey = 26;
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      26, this->openkey(), output);
  }

  // optional string pf = 27;
  if (has_pf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pf().data(), this->pf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      27, this->pf(), output);
  }

  // optional string pfkey = 28;
  if (has_pfkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pfkey().data(), this->pfkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->pfkey(), output);
  }

  // optional int32 addupGolden = 29;
  if (has_addupgolden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->addupgolden(), output);
  }

  // optional int32 challengeArenaNum = 30;
  if (has_challengearenanum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->challengearenanum(), output);
  }

  // optional int32 golden = 31;
  if (has_golden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->golden(), output);
  }

  // optional int32 accountType = 32;
  if (has_accounttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->accounttype(), output);
  }

  // optional string source = 33;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WBaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int64 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mapid(), target);
  }

  // optional int64 localtype = 3;
  if (has_localtype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->localtype(), target);
  }

  // optional string name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->name(), target);
  }

  // optional int32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lv(), target);
  }

  // optional int32 profession = 6;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->profession(), target);
  }

  // optional int32 hatred = 7;
  if (has_hatred()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->hatred(), target);
  }

  // optional int32 settings = 8;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->settings(), target);
  }

  // optional int32 country = 10;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->country(), target);
  }

  // optional int64 nextTalkTime = 12;
  if (has_nexttalktime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->nexttalktime(), target);
  }

  // optional int32 score = 13;
  if (has_score()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->score(), target);
  }

  // optional int64 offlinetime = 14;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->offlinetime(), target);
  }

  // optional int64 teamid = 15;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(15, this->teamid(), target);
  }

  // optional int32 fightPower = 16;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->fightpower(), target);
  }

  // optional bool sex = 17;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->sex(), target);
  }

  // optional int32 countryjob = 19;
  if (has_countryjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->countryjob(), target);
  }

  // optional int32 contribute = 20;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->contribute(), target);
  }

  // optional int32 fitchPrize = 21;
  if (has_fitchprize()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->fitchprize(), target);
  }

  // optional int32 vipLevel = 22;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->viplevel(), target);
  }

  // optional int32 magicWeapon = 23;
  if (has_magicweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->magicweapon(), target);
  }

  // optional int32 horseid = 24;
  if (has_horseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->horseid(), target);
  }

  // optional string openid = 25;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        25, this->openid(), target);
  }

  // optional string openkey = 26;
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        26, this->openkey(), target);
  }

  // optional string pf = 27;
  if (has_pf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pf().data(), this->pf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        27, this->pf(), target);
  }

  // optional string pfkey = 28;
  if (has_pfkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pfkey().data(), this->pfkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->pfkey(), target);
  }

  // optional int32 addupGolden = 29;
  if (has_addupgolden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->addupgolden(), target);
  }

  // optional int32 challengeArenaNum = 30;
  if (has_challengearenanum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->challengearenanum(), target);
  }

  // optional int32 golden = 31;
  if (has_golden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->golden(), target);
  }

  // optional int32 accountType = 32;
  if (has_accounttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->accounttype(), target);
  }

  // optional string source = 33;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WBaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int64 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional int64 localtype = 3;
    if (has_localtype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->localtype());
    }

    // optional string name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 profession = 6;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 hatred = 7;
    if (has_hatred()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hatred());
    }

    // optional int32 settings = 8;
    if (has_settings()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settings());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 country = 10;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // optional int64 nextTalkTime = 12;
    if (has_nexttalktime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->nexttalktime());
    }

    // optional int32 score = 13;
    if (has_score()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->score());
    }

    // optional int64 offlinetime = 14;
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offlinetime());
    }

    // optional int64 teamid = 15;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

    // optional int32 fightPower = 16;
    if (has_fightpower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightpower());
    }

    // optional bool sex = 17;
    if (has_sex()) {
      total_size += 2 + 1;
    }

    // optional int32 countryjob = 19;
    if (has_countryjob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryjob());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 contribute = 20;
    if (has_contribute()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }

    // optional int32 fitchPrize = 21;
    if (has_fitchprize()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fitchprize());
    }

    // optional int32 vipLevel = 22;
    if (has_viplevel()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional int32 magicWeapon = 23;
    if (has_magicweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicweapon());
    }

    // optional int32 horseid = 24;
    if (has_horseid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horseid());
    }

    // optional string openid = 25;
    if (has_openid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional string openkey = 26;
    if (has_openkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openkey());
    }

    // optional string pf = 27;
    if (has_pf()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pf());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional string pfkey = 28;
    if (has_pfkey()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pfkey());
    }

    // optional int32 addupGolden = 29;
    if (has_addupgolden()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addupgolden());
    }

    // optional int32 challengeArenaNum = 30;
    if (has_challengearenanum()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challengearenanum());
    }

    // optional int32 golden = 31;
    if (has_golden()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->golden());
    }

    // optional int32 accountType = 32;
    if (has_accounttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accounttype());
    }

    // optional string source = 33;
    if (has_source()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WBaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WBaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WBaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WBaseInfo::MergeFrom(const WBaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_localtype()) {
      set_localtype(from.localtype());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_hatred()) {
      set_hatred(from.hatred());
    }
    if (from.has_settings()) {
      set_settings(from.settings());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_nexttalktime()) {
      set_nexttalktime(from.nexttalktime());
    }
    if (from.has_score()) {
      set_score(from.score());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_countryjob()) {
      set_countryjob(from.countryjob());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_fitchprize()) {
      set_fitchprize(from.fitchprize());
    }
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_magicweapon()) {
      set_magicweapon(from.magicweapon());
    }
    if (from.has_horseid()) {
      set_horseid(from.horseid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_openkey()) {
      set_openkey(from.openkey());
    }
    if (from.has_pf()) {
      set_pf(from.pf());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_pfkey()) {
      set_pfkey(from.pfkey());
    }
    if (from.has_addupgolden()) {
      set_addupgolden(from.addupgolden());
    }
    if (from.has_challengearenanum()) {
      set_challengearenanum(from.challengearenanum());
    }
    if (from.has_golden()) {
      set_golden(from.golden());
    }
    if (from.has_accounttype()) {
      set_accounttype(from.accounttype());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WBaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WBaseInfo::CopyFrom(const WBaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WBaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WBaseInfo::Swap(WBaseInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(mapid_, other->mapid_);
    std::swap(localtype_, other->localtype_);
    std::swap(name_, other->name_);
    std::swap(lv_, other->lv_);
    std::swap(profession_, other->profession_);
    std::swap(hatred_, other->hatred_);
    std::swap(settings_, other->settings_);
    std::swap(country_, other->country_);
    std::swap(nexttalktime_, other->nexttalktime_);
    std::swap(score_, other->score_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(teamid_, other->teamid_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(sex_, other->sex_);
    std::swap(countryjob_, other->countryjob_);
    std::swap(contribute_, other->contribute_);
    std::swap(fitchprize_, other->fitchprize_);
    std::swap(viplevel_, other->viplevel_);
    std::swap(magicweapon_, other->magicweapon_);
    std::swap(horseid_, other->horseid_);
    std::swap(openid_, other->openid_);
    std::swap(openkey_, other->openkey_);
    std::swap(pf_, other->pf_);
    std::swap(pfkey_, other->pfkey_);
    std::swap(addupgolden_, other->addupgolden_);
    std::swap(challengearenanum_, other->challengearenanum_);
    std::swap(golden_, other->golden_);
    std::swap(accounttype_, other->accounttype_);
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WBaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WBaseInfo_descriptor_;
  metadata.reflection = WBaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchToWorldInfo::kCharidFieldNumber;
const int SynchToWorldInfo::kFightFieldNumber;
const int SynchToWorldInfo::kIsYesterdayRewardFieldNumber;
const int SynchToWorldInfo::kMVipLevelFieldNumber;
#endif  // !_MSC_VER

SynchToWorldInfo::SynchToWorldInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchToWorldInfo::InitAsDefaultInstance() {
}

SynchToWorldInfo::SynchToWorldInfo(const SynchToWorldInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchToWorldInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  fight_ = 0;
  isyesterdayreward_ = 0;
  m_viplevel_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchToWorldInfo::~SynchToWorldInfo() {
  SharedDtor();
}

void SynchToWorldInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SynchToWorldInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchToWorldInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchToWorldInfo_descriptor_;
}

const SynchToWorldInfo& SynchToWorldInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

SynchToWorldInfo* SynchToWorldInfo::default_instance_ = NULL;

SynchToWorldInfo* SynchToWorldInfo::New() const {
  return new SynchToWorldInfo;
}

void SynchToWorldInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    fight_ = 0;
    isyesterdayreward_ = 0;
    m_viplevel_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchToWorldInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_fight;
        break;
      }

      // optional int32 fight = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isYesterdayReward;
        break;
      }

      // optional int32 isYesterdayReward = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isYesterdayReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isyesterdayreward_)));
          set_has_isyesterdayreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_m_VipLevel;
        break;
      }

      // optional int32 m_VipLevel = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_m_VipLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &m_viplevel_)));
          set_has_m_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchToWorldInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int32 fight = 2;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->fight(), output);
  }

  // optional int32 isYesterdayReward = 3;
  if (has_isyesterdayreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isyesterdayreward(), output);
  }

  // optional int32 m_VipLevel = 4;
  if (has_m_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->m_viplevel(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchToWorldInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int32 fight = 2;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->fight(), target);
  }

  // optional int32 isYesterdayReward = 3;
  if (has_isyesterdayreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isyesterdayreward(), target);
  }

  // optional int32 m_VipLevel = 4;
  if (has_m_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->m_viplevel(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchToWorldInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 fight = 2;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional int32 isYesterdayReward = 3;
    if (has_isyesterdayreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isyesterdayreward());
    }

    // optional int32 m_VipLevel = 4;
    if (has_m_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->m_viplevel());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchToWorldInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchToWorldInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchToWorldInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchToWorldInfo::MergeFrom(const SynchToWorldInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_isyesterdayreward()) {
      set_isyesterdayreward(from.isyesterdayreward());
    }
    if (from.has_m_viplevel()) {
      set_m_viplevel(from.m_viplevel());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchToWorldInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchToWorldInfo::CopyFrom(const SynchToWorldInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchToWorldInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SynchToWorldInfo::Swap(SynchToWorldInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(fight_, other->fight_);
    std::swap(isyesterdayreward_, other->isyesterdayreward_);
    std::swap(m_viplevel_, other->m_viplevel_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchToWorldInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchToWorldInfo_descriptor_;
  metadata.reflection = SynchToWorldInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SyncMap::kCharidFieldNumber;
const int SyncMap::kMapidFieldNumber;
#endif  // !_MSC_VER

SyncMap::SyncMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SyncMap::InitAsDefaultInstance() {
}

SyncMap::SyncMap(const SyncMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SyncMap::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  mapid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SyncMap::~SyncMap() {
  SharedDtor();
}

void SyncMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SyncMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SyncMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SyncMap_descriptor_;
}

const SyncMap& SyncMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

SyncMap* SyncMap::default_instance_ = NULL;

SyncMap* SyncMap::New() const {
  return new SyncMap;
}

void SyncMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    mapid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SyncMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int64 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SyncMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int64 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SyncMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int64 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SyncMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int64 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SyncMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SyncMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SyncMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SyncMap::MergeFrom(const SyncMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SyncMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SyncMap::CopyFrom(const SyncMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SyncMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SyncMap::Swap(SyncMap* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SyncMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SyncMap_descriptor_;
  metadata.reflection = SyncMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqSeePlayerInfo::kCharidFieldNumber;
#endif  // !_MSC_VER

ReqSeePlayerInfo::ReqSeePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqSeePlayerInfo::InitAsDefaultInstance() {
}

ReqSeePlayerInfo::ReqSeePlayerInfo(const ReqSeePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqSeePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqSeePlayerInfo::~ReqSeePlayerInfo() {
  SharedDtor();
}

void ReqSeePlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqSeePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqSeePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqSeePlayerInfo_descriptor_;
}

const ReqSeePlayerInfo& ReqSeePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

ReqSeePlayerInfo* ReqSeePlayerInfo::default_instance_ = NULL;

ReqSeePlayerInfo* ReqSeePlayerInfo::New() const {
  return new ReqSeePlayerInfo;
}

void ReqSeePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqSeePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqSeePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqSeePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqSeePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqSeePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqSeePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqSeePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqSeePlayerInfo::MergeFrom(const ReqSeePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqSeePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqSeePlayerInfo::CopyFrom(const ReqSeePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqSeePlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqSeePlayerInfo::Swap(ReqSeePlayerInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqSeePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqSeePlayerInfo_descriptor_;
  metadata.reflection = ReqSeePlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SeePlayerInfo::kCharidFieldNumber;
const int SeePlayerInfo::kCharnameFieldNumber;
const int SeePlayerInfo::kProfessionFieldNumber;
const int SeePlayerInfo::kSexFieldNumber;
const int SeePlayerInfo::kHpFieldNumber;
const int SeePlayerInfo::kHpmaxFieldNumber;
const int SeePlayerInfo::kMpFieldNumber;
const int SeePlayerInfo::kMpmaxFieldNumber;
const int SeePlayerInfo::kStrengthFieldNumber;
const int SeePlayerInfo::kCleverpowerFieldNumber;
const int SeePlayerInfo::kCleverairFieldNumber;
const int SeePlayerInfo::kPhysicalpowerFieldNumber;
const int SeePlayerInfo::kPatienceFieldNumber;
const int SeePlayerInfo::kAgilityFieldNumber;
const int SeePlayerInfo::kPowerFieldNumber;
const int SeePlayerInfo::kPhyattackFieldNumber;
const int SeePlayerInfo::kPhyattackmaxFieldNumber;
const int SeePlayerInfo::kPhydefenceFieldNumber;
const int SeePlayerInfo::kMagicattackFieldNumber;
const int SeePlayerInfo::kMagicattackmaxFieldNumber;
const int SeePlayerInfo::kMagicdefenceFieldNumber;
const int SeePlayerInfo::kHitrateFieldNumber;
const int SeePlayerInfo::kAvoidrateFieldNumber;
const int SeePlayerInfo::kBaseluckyFieldNumber;
const int SeePlayerInfo::kCrackdownrateFieldNumber;
const int SeePlayerInfo::kBaserteFieldNumber;
const int SeePlayerInfo::kEquipFieldNumber;
const int SeePlayerInfo::kFightFieldNumber;
const int SeePlayerInfo::kPowermaxFieldNumber;
const int SeePlayerInfo::kExpFieldNumber;
const int SeePlayerInfo::kLvFieldNumber;
const int SeePlayerInfo::kMagicequipidFieldNumber;
const int SeePlayerInfo::kGuildnameFieldNumber;
const int SeePlayerInfo::kGuildjobFieldNumber;
const int SeePlayerInfo::kTitleidFieldNumber;
const int SeePlayerInfo::kPkcountFieldNumber;
const int SeePlayerInfo::kViplvFieldNumber;
#endif  // !_MSC_VER

SeePlayerInfo::SeePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SeePlayerInfo::InitAsDefaultInstance() {
}

SeePlayerInfo::SeePlayerInfo(const SeePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SeePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profession_ = 0;
  sex_ = 0;
  hp_ = 0;
  hpmax_ = 0;
  mp_ = 0;
  mpmax_ = 0;
  strength_ = 0;
  cleverpower_ = 0;
  cleverair_ = 0;
  physicalpower_ = 0;
  patience_ = 0;
  agility_ = 0;
  power_ = 0;
  phyattack_ = 0;
  phyattackmax_ = 0;
  phydefence_ = 0;
  magicattack_ = 0;
  magicattackmax_ = 0;
  magicdefence_ = 0;
  hitrate_ = 0;
  avoidrate_ = 0;
  baselucky_ = 0;
  crackdownrate_ = 0;
  baserte_ = 0;
  fight_ = 0;
  powermax_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  lv_ = 0;
  magicequipid_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildjob_ = 0;
  titleid_ = 0;
  pkcount_ = 0;
  viplv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SeePlayerInfo::~SeePlayerInfo() {
  SharedDtor();
}

void SeePlayerInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void SeePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SeePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SeePlayerInfo_descriptor_;
}

const SeePlayerInfo& SeePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

SeePlayerInfo* SeePlayerInfo::default_instance_ = NULL;

SeePlayerInfo* SeePlayerInfo::New() const {
  return new SeePlayerInfo;
}

void SeePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    profession_ = 0;
    sex_ = 0;
    hp_ = 0;
    hpmax_ = 0;
    mp_ = 0;
    mpmax_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    strength_ = 0;
    cleverpower_ = 0;
    cleverair_ = 0;
    physicalpower_ = 0;
    patience_ = 0;
    agility_ = 0;
    power_ = 0;
    phyattack_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    phyattackmax_ = 0;
    phydefence_ = 0;
    magicattack_ = 0;
    magicattackmax_ = 0;
    magicdefence_ = 0;
    hitrate_ = 0;
    avoidrate_ = 0;
    baselucky_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    crackdownrate_ = 0;
    baserte_ = 0;
    fight_ = 0;
    powermax_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    lv_ = 0;
    magicequipid_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    guildjob_ = 0;
    titleid_ = 0;
    pkcount_ = 0;
    viplv_ = 0;
  }
  equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SeePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // required string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_profession;
        break;
      }

      // required int32 profession = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // required int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // required int32 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hpmax;
        break;
      }

      // required int32 hpmax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mp;
        break;
      }

      // required int32 mp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mpmax;
        break;
      }

      // required int32 mpmax = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mpmax_)));
          set_has_mpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_strength;
        break;
      }

      // required int32 strength = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cleverpower;
        break;
      }

      // required int32 cleverpower = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleverpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleverpower_)));
          set_has_cleverpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cleverair;
        break;
      }

      // optional int32 cleverair = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleverair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleverair_)));
          set_has_cleverair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_physicalpower;
        break;
      }

      // required int32 physicalpower = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physicalpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physicalpower_)));
          set_has_physicalpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_patience;
        break;
      }

      // required int32 patience = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patience_)));
          set_has_patience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_agility;
        break;
      }

      // required int32 agility = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agility_)));
          set_has_agility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_power;
        break;
      }

      // optional int32 power = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_phyattack;
        break;
      }

      // required int32 phyattack = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phyattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phyattack_)));
          set_has_phyattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_phyattackmax;
        break;
      }

      // required int32 phyattackmax = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phyattackmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phyattackmax_)));
          set_has_phyattackmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_phydefence;
        break;
      }

      // required int32 phydefence = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phydefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phydefence_)));
          set_has_phydefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_magicattack;
        break;
      }

      // required int32 magicattack = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicattack_)));
          set_has_magicattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_magicattackmax;
        break;
      }

      // required int32 magicattackmax = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicattackmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicattackmax_)));
          set_has_magicattackmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_magicdefence;
        break;
      }

      // required int32 magicdefence = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicdefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicdefence_)));
          set_has_magicdefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_hitrate;
        break;
      }

      // required int32 hitrate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitrate_)));
          set_has_hitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_avoidrate;
        break;
      }

      // required int32 avoidrate = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avoidrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avoidrate_)));
          set_has_avoidrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_baselucky;
        break;
      }

      // required int32 baselucky = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baselucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baselucky_)));
          set_has_baselucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_crackdownrate;
        break;
      }

      // required int32 crackdownrate = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crackdownrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crackdownrate_)));
          set_has_crackdownrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_baserte;
        break;
      }

      // required int32 baserte = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baserte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baserte_)));
          set_has_baserte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_equip;
        break;
      }

      // repeated .PlayerInfo.ItemInfo equip = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_equip;
        if (input->ExpectTag(224)) goto parse_fight;
        break;
      }

      // required int32 fight = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_powermax;
        break;
      }

      // required int32 powermax = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_powermax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powermax_)));
          set_has_powermax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_exp;
        break;
      }

      // required int64 exp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_lv;
        break;
      }

      // required int32 lv = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_magicequipid;
        break;
      }

      // required int32 magicequipid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicequipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicequipid_)));
          set_has_magicequipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_guildname;
        break;
      }

      // required string guildname = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_guildjob;
        break;
      }

      // required int32 guildjob = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildjob_)));
          set_has_guildjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_titleid;
        break;
      }

      // required int32 titleid = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_pkcount;
        break;
      }

      // required int32 pkcount = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkcount_)));
          set_has_pkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_viplv;
        break;
      }

      // required int32 viplv = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SeePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  // required int32 profession = 3;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->profession(), output);
  }

  // required int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  // required int32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hp(), output);
  }

  // required int32 hpmax = 6;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hpmax(), output);
  }

  // required int32 mp = 7;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mp(), output);
  }

  // required int32 mpmax = 8;
  if (has_mpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mpmax(), output);
  }

  // required int32 strength = 9;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->strength(), output);
  }

  // required int32 cleverpower = 10;
  if (has_cleverpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cleverpower(), output);
  }

  // optional int32 cleverair = 11;
  if (has_cleverair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cleverair(), output);
  }

  // required int32 physicalpower = 12;
  if (has_physicalpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->physicalpower(), output);
  }

  // required int32 patience = 13;
  if (has_patience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->patience(), output);
  }

  // required int32 agility = 14;
  if (has_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->agility(), output);
  }

  // optional int32 power = 15;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->power(), output);
  }

  // required int32 phyattack = 16;
  if (has_phyattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->phyattack(), output);
  }

  // required int32 phyattackmax = 17;
  if (has_phyattackmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->phyattackmax(), output);
  }

  // required int32 phydefence = 18;
  if (has_phydefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->phydefence(), output);
  }

  // required int32 magicattack = 19;
  if (has_magicattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->magicattack(), output);
  }

  // required int32 magicattackmax = 20;
  if (has_magicattackmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->magicattackmax(), output);
  }

  // required int32 magicdefence = 21;
  if (has_magicdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->magicdefence(), output);
  }

  // required int32 hitrate = 22;
  if (has_hitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->hitrate(), output);
  }

  // required int32 avoidrate = 23;
  if (has_avoidrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->avoidrate(), output);
  }

  // required int32 baselucky = 24;
  if (has_baselucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->baselucky(), output);
  }

  // required int32 crackdownrate = 25;
  if (has_crackdownrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->crackdownrate(), output);
  }

  // required int32 baserte = 26;
  if (has_baserte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->baserte(), output);
  }

  // repeated .PlayerInfo.ItemInfo equip = 27;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->equip(i), output);
  }

  // required int32 fight = 28;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->fight(), output);
  }

  // required int32 powermax = 29;
  if (has_powermax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->powermax(), output);
  }

  // required int64 exp = 30;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->exp(), output);
  }

  // required int32 lv = 31;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->lv(), output);
  }

  // required int32 magicequipid = 32;
  if (has_magicequipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->magicequipid(), output);
  }

  // required string guildname = 33;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->guildname(), output);
  }

  // required int32 guildjob = 34;
  if (has_guildjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->guildjob(), output);
  }

  // required int32 titleid = 35;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->titleid(), output);
  }

  // required int32 pkcount = 36;
  if (has_pkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->pkcount(), output);
  }

  // required int32 viplv = 37;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->viplv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SeePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // required int32 profession = 3;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->profession(), target);
  }

  // required int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  // required int32 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hp(), target);
  }

  // required int32 hpmax = 6;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hpmax(), target);
  }

  // required int32 mp = 7;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mp(), target);
  }

  // required int32 mpmax = 8;
  if (has_mpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mpmax(), target);
  }

  // required int32 strength = 9;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->strength(), target);
  }

  // required int32 cleverpower = 10;
  if (has_cleverpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cleverpower(), target);
  }

  // optional int32 cleverair = 11;
  if (has_cleverair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cleverair(), target);
  }

  // required int32 physicalpower = 12;
  if (has_physicalpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->physicalpower(), target);
  }

  // required int32 patience = 13;
  if (has_patience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->patience(), target);
  }

  // required int32 agility = 14;
  if (has_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->agility(), target);
  }

  // optional int32 power = 15;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->power(), target);
  }

  // required int32 phyattack = 16;
  if (has_phyattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->phyattack(), target);
  }

  // required int32 phyattackmax = 17;
  if (has_phyattackmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->phyattackmax(), target);
  }

  // required int32 phydefence = 18;
  if (has_phydefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->phydefence(), target);
  }

  // required int32 magicattack = 19;
  if (has_magicattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->magicattack(), target);
  }

  // required int32 magicattackmax = 20;
  if (has_magicattackmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->magicattackmax(), target);
  }

  // required int32 magicdefence = 21;
  if (has_magicdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->magicdefence(), target);
  }

  // required int32 hitrate = 22;
  if (has_hitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->hitrate(), target);
  }

  // required int32 avoidrate = 23;
  if (has_avoidrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->avoidrate(), target);
  }

  // required int32 baselucky = 24;
  if (has_baselucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->baselucky(), target);
  }

  // required int32 crackdownrate = 25;
  if (has_crackdownrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->crackdownrate(), target);
  }

  // required int32 baserte = 26;
  if (has_baserte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->baserte(), target);
  }

  // repeated .PlayerInfo.ItemInfo equip = 27;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->equip(i), target);
  }

  // required int32 fight = 28;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->fight(), target);
  }

  // required int32 powermax = 29;
  if (has_powermax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->powermax(), target);
  }

  // required int64 exp = 30;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->exp(), target);
  }

  // required int32 lv = 31;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->lv(), target);
  }

  // required int32 magicequipid = 32;
  if (has_magicequipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->magicequipid(), target);
  }

  // required string guildname = 33;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->guildname(), target);
  }

  // required int32 guildjob = 34;
  if (has_guildjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->guildjob(), target);
  }

  // required int32 titleid = 35;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->titleid(), target);
  }

  // required int32 pkcount = 36;
  if (has_pkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->pkcount(), target);
  }

  // required int32 viplv = 37;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->viplv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SeePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required int32 profession = 3;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // required int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // required int32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 hpmax = 6;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

    // required int32 mp = 7;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // required int32 mpmax = 8;
    if (has_mpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mpmax());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 strength = 9;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength());
    }

    // required int32 cleverpower = 10;
    if (has_cleverpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleverpower());
    }

    // optional int32 cleverair = 11;
    if (has_cleverair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleverair());
    }

    // required int32 physicalpower = 12;
    if (has_physicalpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physicalpower());
    }

    // required int32 patience = 13;
    if (has_patience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patience());
    }

    // required int32 agility = 14;
    if (has_agility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agility());
    }

    // optional int32 power = 15;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // required int32 phyattack = 16;
    if (has_phyattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phyattack());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 phyattackmax = 17;
    if (has_phyattackmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phyattackmax());
    }

    // required int32 phydefence = 18;
    if (has_phydefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phydefence());
    }

    // required int32 magicattack = 19;
    if (has_magicattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicattack());
    }

    // required int32 magicattackmax = 20;
    if (has_magicattackmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicattackmax());
    }

    // required int32 magicdefence = 21;
    if (has_magicdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicdefence());
    }

    // required int32 hitrate = 22;
    if (has_hitrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitrate());
    }

    // required int32 avoidrate = 23;
    if (has_avoidrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avoidrate());
    }

    // required int32 baselucky = 24;
    if (has_baselucky()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baselucky());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 crackdownrate = 25;
    if (has_crackdownrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crackdownrate());
    }

    // required int32 baserte = 26;
    if (has_baserte()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baserte());
    }

    // required int32 fight = 28;
    if (has_fight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // required int32 powermax = 29;
    if (has_powermax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->powermax());
    }

    // required int64 exp = 30;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // required int32 lv = 31;
    if (has_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // required int32 magicequipid = 32;
    if (has_magicequipid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicequipid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required string guildname = 33;
    if (has_guildname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // required int32 guildjob = 34;
    if (has_guildjob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildjob());
    }

    // required int32 titleid = 35;
    if (has_titleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // required int32 pkcount = 36;
    if (has_pkcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkcount());
    }

    // required int32 viplv = 37;
    if (has_viplv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

  }
  // repeated .PlayerInfo.ItemInfo equip = 27;
  total_size += 2 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SeePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SeePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SeePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SeePlayerInfo::MergeFrom(const SeePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_mpmax()) {
      set_mpmax(from.mpmax());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_cleverpower()) {
      set_cleverpower(from.cleverpower());
    }
    if (from.has_cleverair()) {
      set_cleverair(from.cleverair());
    }
    if (from.has_physicalpower()) {
      set_physicalpower(from.physicalpower());
    }
    if (from.has_patience()) {
      set_patience(from.patience());
    }
    if (from.has_agility()) {
      set_agility(from.agility());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_phyattack()) {
      set_phyattack(from.phyattack());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_phyattackmax()) {
      set_phyattackmax(from.phyattackmax());
    }
    if (from.has_phydefence()) {
      set_phydefence(from.phydefence());
    }
    if (from.has_magicattack()) {
      set_magicattack(from.magicattack());
    }
    if (from.has_magicattackmax()) {
      set_magicattackmax(from.magicattackmax());
    }
    if (from.has_magicdefence()) {
      set_magicdefence(from.magicdefence());
    }
    if (from.has_hitrate()) {
      set_hitrate(from.hitrate());
    }
    if (from.has_avoidrate()) {
      set_avoidrate(from.avoidrate());
    }
    if (from.has_baselucky()) {
      set_baselucky(from.baselucky());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_crackdownrate()) {
      set_crackdownrate(from.crackdownrate());
    }
    if (from.has_baserte()) {
      set_baserte(from.baserte());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_powermax()) {
      set_powermax(from.powermax());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_magicequipid()) {
      set_magicequipid(from.magicequipid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildjob()) {
      set_guildjob(from.guildjob());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_pkcount()) {
      set_pkcount(from.pkcount());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SeePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SeePlayerInfo::CopyFrom(const SeePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SeePlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xfbffbbff) != 0xfbffbbff) return false;
  if ((_has_bits_[1] & 0x0000001f) != 0x0000001f) return false;

  for (int i = 0; i < equip_size(); i++) {
    if (!this->equip(i).IsInitialized()) return false;
  }
  return true;
}

void SeePlayerInfo::Swap(SeePlayerInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(profession_, other->profession_);
    std::swap(sex_, other->sex_);
    std::swap(hp_, other->hp_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(mp_, other->mp_);
    std::swap(mpmax_, other->mpmax_);
    std::swap(strength_, other->strength_);
    std::swap(cleverpower_, other->cleverpower_);
    std::swap(cleverair_, other->cleverair_);
    std::swap(physicalpower_, other->physicalpower_);
    std::swap(patience_, other->patience_);
    std::swap(agility_, other->agility_);
    std::swap(power_, other->power_);
    std::swap(phyattack_, other->phyattack_);
    std::swap(phyattackmax_, other->phyattackmax_);
    std::swap(phydefence_, other->phydefence_);
    std::swap(magicattack_, other->magicattack_);
    std::swap(magicattackmax_, other->magicattackmax_);
    std::swap(magicdefence_, other->magicdefence_);
    std::swap(hitrate_, other->hitrate_);
    std::swap(avoidrate_, other->avoidrate_);
    std::swap(baselucky_, other->baselucky_);
    std::swap(crackdownrate_, other->crackdownrate_);
    std::swap(baserte_, other->baserte_);
    equip_.Swap(&other->equip_);
    std::swap(fight_, other->fight_);
    std::swap(powermax_, other->powermax_);
    std::swap(exp_, other->exp_);
    std::swap(lv_, other->lv_);
    std::swap(magicequipid_, other->magicequipid_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildjob_, other->guildjob_);
    std::swap(titleid_, other->titleid_);
    std::swap(pkcount_, other->pkcount_);
    std::swap(viplv_, other->viplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SeePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SeePlayerInfo_descriptor_;
  metadata.reflection = SeePlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BeyondPlayerInfo::kCharidFieldNumber;
const int BeyondPlayerInfo::kCharnameFieldNumber;
const int BeyondPlayerInfo::kProfessionFieldNumber;
const int BeyondPlayerInfo::kSexFieldNumber;
const int BeyondPlayerInfo::kHpFieldNumber;
const int BeyondPlayerInfo::kHpmaxFieldNumber;
const int BeyondPlayerInfo::kMpFieldNumber;
const int BeyondPlayerInfo::kMpmaxFieldNumber;
const int BeyondPlayerInfo::kStrengthFieldNumber;
const int BeyondPlayerInfo::kCleverpowerFieldNumber;
const int BeyondPlayerInfo::kCleverairFieldNumber;
const int BeyondPlayerInfo::kPhysicalpowerFieldNumber;
const int BeyondPlayerInfo::kPatienceFieldNumber;
const int BeyondPlayerInfo::kAgilityFieldNumber;
const int BeyondPlayerInfo::kPowerFieldNumber;
const int BeyondPlayerInfo::kPhyattackFieldNumber;
const int BeyondPlayerInfo::kPhyattackmaxFieldNumber;
const int BeyondPlayerInfo::kPhydefenceFieldNumber;
const int BeyondPlayerInfo::kMagicattackFieldNumber;
const int BeyondPlayerInfo::kMagicattackmaxFieldNumber;
const int BeyondPlayerInfo::kMagicdefenceFieldNumber;
const int BeyondPlayerInfo::kHitrateFieldNumber;
const int BeyondPlayerInfo::kAvoidrateFieldNumber;
const int BeyondPlayerInfo::kBaseluckyFieldNumber;
const int BeyondPlayerInfo::kCrackdownrateFieldNumber;
const int BeyondPlayerInfo::kBaserteFieldNumber;
const int BeyondPlayerInfo::kEquipFieldNumber;
const int BeyondPlayerInfo::kFightFieldNumber;
const int BeyondPlayerInfo::kPowermaxFieldNumber;
const int BeyondPlayerInfo::kExpFieldNumber;
const int BeyondPlayerInfo::kLvFieldNumber;
const int BeyondPlayerInfo::kMagicequipidFieldNumber;
const int BeyondPlayerInfo::kGuildnameFieldNumber;
const int BeyondPlayerInfo::kGuildjobFieldNumber;
const int BeyondPlayerInfo::kTitleidFieldNumber;
const int BeyondPlayerInfo::kPkcountFieldNumber;
const int BeyondPlayerInfo::kViplvFieldNumber;
#endif  // !_MSC_VER

BeyondPlayerInfo::BeyondPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BeyondPlayerInfo::InitAsDefaultInstance() {
}

BeyondPlayerInfo::BeyondPlayerInfo(const BeyondPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BeyondPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profession_ = 0;
  sex_ = 0;
  hp_ = 0;
  hpmax_ = 0;
  mp_ = 0;
  mpmax_ = 0;
  strength_ = 0;
  cleverpower_ = 0;
  cleverair_ = 0;
  physicalpower_ = 0;
  patience_ = 0;
  agility_ = 0;
  power_ = 0;
  phyattack_ = 0;
  phyattackmax_ = 0;
  phydefence_ = 0;
  magicattack_ = 0;
  magicattackmax_ = 0;
  magicdefence_ = 0;
  hitrate_ = 0;
  avoidrate_ = 0;
  baselucky_ = 0;
  crackdownrate_ = 0;
  baserte_ = 0;
  fight_ = 0;
  powermax_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  lv_ = 0;
  magicequipid_ = 0;
  guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  guildjob_ = 0;
  titleid_ = 0;
  pkcount_ = 0;
  viplv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BeyondPlayerInfo::~BeyondPlayerInfo() {
  SharedDtor();
}

void BeyondPlayerInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (this != default_instance_) {
  }
}

void BeyondPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BeyondPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BeyondPlayerInfo_descriptor_;
}

const BeyondPlayerInfo& BeyondPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

BeyondPlayerInfo* BeyondPlayerInfo::default_instance_ = NULL;

BeyondPlayerInfo* BeyondPlayerInfo::New() const {
  return new BeyondPlayerInfo;
}

void BeyondPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    profession_ = 0;
    sex_ = 0;
    hp_ = 0;
    hpmax_ = 0;
    mp_ = 0;
    mpmax_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    strength_ = 0;
    cleverpower_ = 0;
    cleverair_ = 0;
    physicalpower_ = 0;
    patience_ = 0;
    agility_ = 0;
    power_ = 0;
    phyattack_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    phyattackmax_ = 0;
    phydefence_ = 0;
    magicattack_ = 0;
    magicattackmax_ = 0;
    magicdefence_ = 0;
    hitrate_ = 0;
    avoidrate_ = 0;
    baselucky_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    crackdownrate_ = 0;
    baserte_ = 0;
    fight_ = 0;
    powermax_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    lv_ = 0;
    magicequipid_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (has_guildname()) {
      if (guildname_ != &::google::protobuf::internal::kEmptyString) {
        guildname_->clear();
      }
    }
    guildjob_ = 0;
    titleid_ = 0;
    pkcount_ = 0;
    viplv_ = 0;
  }
  equip_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BeyondPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_profession;
        break;
      }

      // optional int32 profession = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_sex;
        break;
      }

      // optional int32 sex = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // optional int32 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hpmax;
        break;
      }

      // optional int32 hpmax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mp;
        break;
      }

      // optional int32 mp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_mpmax;
        break;
      }

      // optional int32 mpmax = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mpmax_)));
          set_has_mpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_strength;
        break;
      }

      // optional int32 strength = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_cleverpower;
        break;
      }

      // optional int32 cleverpower = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleverpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleverpower_)));
          set_has_cleverpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_cleverair;
        break;
      }

      // optional int32 cleverair = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleverair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleverair_)));
          set_has_cleverair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_physicalpower;
        break;
      }

      // optional int32 physicalpower = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physicalpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physicalpower_)));
          set_has_physicalpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_patience;
        break;
      }

      // optional int32 patience = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patience_)));
          set_has_patience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_agility;
        break;
      }

      // optional int32 agility = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agility_)));
          set_has_agility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_power;
        break;
      }

      // optional int32 power = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_phyattack;
        break;
      }

      // optional int32 phyattack = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phyattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phyattack_)));
          set_has_phyattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_phyattackmax;
        break;
      }

      // optional int32 phyattackmax = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phyattackmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phyattackmax_)));
          set_has_phyattackmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_phydefence;
        break;
      }

      // optional int32 phydefence = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phydefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phydefence_)));
          set_has_phydefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_magicattack;
        break;
      }

      // optional int32 magicattack = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicattack_)));
          set_has_magicattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_magicattackmax;
        break;
      }

      // optional int32 magicattackmax = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicattackmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicattackmax_)));
          set_has_magicattackmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_magicdefence;
        break;
      }

      // optional int32 magicdefence = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicdefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicdefence_)));
          set_has_magicdefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_hitrate;
        break;
      }

      // optional int32 hitrate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitrate_)));
          set_has_hitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_avoidrate;
        break;
      }

      // optional int32 avoidrate = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avoidrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avoidrate_)));
          set_has_avoidrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_baselucky;
        break;
      }

      // optional int32 baselucky = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baselucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baselucky_)));
          set_has_baselucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_crackdownrate;
        break;
      }

      // optional int32 crackdownrate = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crackdownrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crackdownrate_)));
          set_has_crackdownrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_baserte;
        break;
      }

      // optional int32 baserte = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baserte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baserte_)));
          set_has_baserte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_equip;
        break;
      }

      // repeated .PlayerInfo.ItemInfo equip = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(218)) goto parse_equip;
        if (input->ExpectTag(224)) goto parse_fight;
        break;
      }

      // optional int32 fight = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_powermax;
        break;
      }

      // optional int32 powermax = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_powermax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powermax_)));
          set_has_powermax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_exp;
        break;
      }

      // optional int64 exp = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_lv;
        break;
      }

      // optional int32 lv = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_magicequipid;
        break;
      }

      // optional int32 magicequipid = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicequipid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicequipid_)));
          set_has_magicequipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(266)) goto parse_guildname;
        break;
      }

      // optional string guildname = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_guildname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_guildname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->guildname().data(), this->guildname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_guildjob;
        break;
      }

      // optional int32 guildjob = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guildjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &guildjob_)));
          set_has_guildjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_titleid;
        break;
      }

      // optional int32 titleid = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_pkcount;
        break;
      }

      // optional int32 pkcount = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkcount_)));
          set_has_pkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_viplv;
        break;
      }

      // optional int32 viplv = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BeyondPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  // optional int32 profession = 3;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->profession(), output);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->sex(), output);
  }

  // optional int32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hp(), output);
  }

  // optional int32 hpmax = 6;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hpmax(), output);
  }

  // optional int32 mp = 7;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mp(), output);
  }

  // optional int32 mpmax = 8;
  if (has_mpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->mpmax(), output);
  }

  // optional int32 strength = 9;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->strength(), output);
  }

  // optional int32 cleverpower = 10;
  if (has_cleverpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->cleverpower(), output);
  }

  // optional int32 cleverair = 11;
  if (has_cleverair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->cleverair(), output);
  }

  // optional int32 physicalpower = 12;
  if (has_physicalpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->physicalpower(), output);
  }

  // optional int32 patience = 13;
  if (has_patience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->patience(), output);
  }

  // optional int32 agility = 14;
  if (has_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->agility(), output);
  }

  // optional int32 power = 15;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->power(), output);
  }

  // optional int32 phyattack = 16;
  if (has_phyattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->phyattack(), output);
  }

  // optional int32 phyattackmax = 17;
  if (has_phyattackmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->phyattackmax(), output);
  }

  // optional int32 phydefence = 18;
  if (has_phydefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->phydefence(), output);
  }

  // optional int32 magicattack = 19;
  if (has_magicattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->magicattack(), output);
  }

  // optional int32 magicattackmax = 20;
  if (has_magicattackmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->magicattackmax(), output);
  }

  // optional int32 magicdefence = 21;
  if (has_magicdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->magicdefence(), output);
  }

  // optional int32 hitrate = 22;
  if (has_hitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->hitrate(), output);
  }

  // optional int32 avoidrate = 23;
  if (has_avoidrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->avoidrate(), output);
  }

  // optional int32 baselucky = 24;
  if (has_baselucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->baselucky(), output);
  }

  // optional int32 crackdownrate = 25;
  if (has_crackdownrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->crackdownrate(), output);
  }

  // optional int32 baserte = 26;
  if (has_baserte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->baserte(), output);
  }

  // repeated .PlayerInfo.ItemInfo equip = 27;
  for (int i = 0; i < this->equip_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      27, this->equip(i), output);
  }

  // optional int32 fight = 28;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->fight(), output);
  }

  // optional int32 powermax = 29;
  if (has_powermax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->powermax(), output);
  }

  // optional int64 exp = 30;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(30, this->exp(), output);
  }

  // optional int32 lv = 31;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->lv(), output);
  }

  // optional int32 magicequipid = 32;
  if (has_magicequipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->magicequipid(), output);
  }

  // optional string guildname = 33;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      33, this->guildname(), output);
  }

  // optional int32 guildjob = 34;
  if (has_guildjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->guildjob(), output);
  }

  // optional int32 titleid = 35;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->titleid(), output);
  }

  // optional int32 pkcount = 36;
  if (has_pkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->pkcount(), output);
  }

  // optional int32 viplv = 37;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(37, this->viplv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BeyondPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // optional int32 profession = 3;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->profession(), target);
  }

  // optional int32 sex = 4;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->sex(), target);
  }

  // optional int32 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hp(), target);
  }

  // optional int32 hpmax = 6;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hpmax(), target);
  }

  // optional int32 mp = 7;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mp(), target);
  }

  // optional int32 mpmax = 8;
  if (has_mpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->mpmax(), target);
  }

  // optional int32 strength = 9;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->strength(), target);
  }

  // optional int32 cleverpower = 10;
  if (has_cleverpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->cleverpower(), target);
  }

  // optional int32 cleverair = 11;
  if (has_cleverair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->cleverair(), target);
  }

  // optional int32 physicalpower = 12;
  if (has_physicalpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->physicalpower(), target);
  }

  // optional int32 patience = 13;
  if (has_patience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->patience(), target);
  }

  // optional int32 agility = 14;
  if (has_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->agility(), target);
  }

  // optional int32 power = 15;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->power(), target);
  }

  // optional int32 phyattack = 16;
  if (has_phyattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->phyattack(), target);
  }

  // optional int32 phyattackmax = 17;
  if (has_phyattackmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->phyattackmax(), target);
  }

  // optional int32 phydefence = 18;
  if (has_phydefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->phydefence(), target);
  }

  // optional int32 magicattack = 19;
  if (has_magicattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->magicattack(), target);
  }

  // optional int32 magicattackmax = 20;
  if (has_magicattackmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->magicattackmax(), target);
  }

  // optional int32 magicdefence = 21;
  if (has_magicdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->magicdefence(), target);
  }

  // optional int32 hitrate = 22;
  if (has_hitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->hitrate(), target);
  }

  // optional int32 avoidrate = 23;
  if (has_avoidrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->avoidrate(), target);
  }

  // optional int32 baselucky = 24;
  if (has_baselucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->baselucky(), target);
  }

  // optional int32 crackdownrate = 25;
  if (has_crackdownrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->crackdownrate(), target);
  }

  // optional int32 baserte = 26;
  if (has_baserte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->baserte(), target);
  }

  // repeated .PlayerInfo.ItemInfo equip = 27;
  for (int i = 0; i < this->equip_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        27, this->equip(i), target);
  }

  // optional int32 fight = 28;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->fight(), target);
  }

  // optional int32 powermax = 29;
  if (has_powermax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->powermax(), target);
  }

  // optional int64 exp = 30;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(30, this->exp(), target);
  }

  // optional int32 lv = 31;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->lv(), target);
  }

  // optional int32 magicequipid = 32;
  if (has_magicequipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->magicequipid(), target);
  }

  // optional string guildname = 33;
  if (has_guildname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->guildname().data(), this->guildname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        33, this->guildname(), target);
  }

  // optional int32 guildjob = 34;
  if (has_guildjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->guildjob(), target);
  }

  // optional int32 titleid = 35;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->titleid(), target);
  }

  // optional int32 pkcount = 36;
  if (has_pkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->pkcount(), target);
  }

  // optional int32 viplv = 37;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(37, this->viplv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BeyondPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 profession = 3;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 sex = 4;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 hpmax = 6;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

    // optional int32 mp = 7;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // optional int32 mpmax = 8;
    if (has_mpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mpmax());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 strength = 9;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength());
    }

    // optional int32 cleverpower = 10;
    if (has_cleverpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleverpower());
    }

    // optional int32 cleverair = 11;
    if (has_cleverair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleverair());
    }

    // optional int32 physicalpower = 12;
    if (has_physicalpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physicalpower());
    }

    // optional int32 patience = 13;
    if (has_patience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patience());
    }

    // optional int32 agility = 14;
    if (has_agility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agility());
    }

    // optional int32 power = 15;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 phyattack = 16;
    if (has_phyattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phyattack());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 phyattackmax = 17;
    if (has_phyattackmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phyattackmax());
    }

    // optional int32 phydefence = 18;
    if (has_phydefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phydefence());
    }

    // optional int32 magicattack = 19;
    if (has_magicattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicattack());
    }

    // optional int32 magicattackmax = 20;
    if (has_magicattackmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicattackmax());
    }

    // optional int32 magicdefence = 21;
    if (has_magicdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicdefence());
    }

    // optional int32 hitrate = 22;
    if (has_hitrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitrate());
    }

    // optional int32 avoidrate = 23;
    if (has_avoidrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avoidrate());
    }

    // optional int32 baselucky = 24;
    if (has_baselucky()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baselucky());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 crackdownrate = 25;
    if (has_crackdownrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crackdownrate());
    }

    // optional int32 baserte = 26;
    if (has_baserte()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baserte());
    }

    // optional int32 fight = 28;
    if (has_fight()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // optional int32 powermax = 29;
    if (has_powermax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->powermax());
    }

    // optional int64 exp = 30;
    if (has_exp()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional int32 lv = 31;
    if (has_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 magicequipid = 32;
    if (has_magicequipid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicequipid());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional string guildname = 33;
    if (has_guildname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->guildname());
    }

    // optional int32 guildjob = 34;
    if (has_guildjob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->guildjob());
    }

    // optional int32 titleid = 35;
    if (has_titleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // optional int32 pkcount = 36;
    if (has_pkcount()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkcount());
    }

    // optional int32 viplv = 37;
    if (has_viplv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

  }
  // repeated .PlayerInfo.ItemInfo equip = 27;
  total_size += 2 * this->equip_size();
  for (int i = 0; i < this->equip_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equip(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BeyondPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BeyondPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BeyondPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BeyondPlayerInfo::MergeFrom(const BeyondPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  equip_.MergeFrom(from.equip_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_mpmax()) {
      set_mpmax(from.mpmax());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_cleverpower()) {
      set_cleverpower(from.cleverpower());
    }
    if (from.has_cleverair()) {
      set_cleverair(from.cleverair());
    }
    if (from.has_physicalpower()) {
      set_physicalpower(from.physicalpower());
    }
    if (from.has_patience()) {
      set_patience(from.patience());
    }
    if (from.has_agility()) {
      set_agility(from.agility());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_phyattack()) {
      set_phyattack(from.phyattack());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_phyattackmax()) {
      set_phyattackmax(from.phyattackmax());
    }
    if (from.has_phydefence()) {
      set_phydefence(from.phydefence());
    }
    if (from.has_magicattack()) {
      set_magicattack(from.magicattack());
    }
    if (from.has_magicattackmax()) {
      set_magicattackmax(from.magicattackmax());
    }
    if (from.has_magicdefence()) {
      set_magicdefence(from.magicdefence());
    }
    if (from.has_hitrate()) {
      set_hitrate(from.hitrate());
    }
    if (from.has_avoidrate()) {
      set_avoidrate(from.avoidrate());
    }
    if (from.has_baselucky()) {
      set_baselucky(from.baselucky());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_crackdownrate()) {
      set_crackdownrate(from.crackdownrate());
    }
    if (from.has_baserte()) {
      set_baserte(from.baserte());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_powermax()) {
      set_powermax(from.powermax());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_magicequipid()) {
      set_magicequipid(from.magicequipid());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_guildname()) {
      set_guildname(from.guildname());
    }
    if (from.has_guildjob()) {
      set_guildjob(from.guildjob());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_pkcount()) {
      set_pkcount(from.pkcount());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BeyondPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BeyondPlayerInfo::CopyFrom(const BeyondPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BeyondPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < equip_size(); i++) {
    if (!this->equip(i).IsInitialized()) return false;
  }
  return true;
}

void BeyondPlayerInfo::Swap(BeyondPlayerInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(profession_, other->profession_);
    std::swap(sex_, other->sex_);
    std::swap(hp_, other->hp_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(mp_, other->mp_);
    std::swap(mpmax_, other->mpmax_);
    std::swap(strength_, other->strength_);
    std::swap(cleverpower_, other->cleverpower_);
    std::swap(cleverair_, other->cleverair_);
    std::swap(physicalpower_, other->physicalpower_);
    std::swap(patience_, other->patience_);
    std::swap(agility_, other->agility_);
    std::swap(power_, other->power_);
    std::swap(phyattack_, other->phyattack_);
    std::swap(phyattackmax_, other->phyattackmax_);
    std::swap(phydefence_, other->phydefence_);
    std::swap(magicattack_, other->magicattack_);
    std::swap(magicattackmax_, other->magicattackmax_);
    std::swap(magicdefence_, other->magicdefence_);
    std::swap(hitrate_, other->hitrate_);
    std::swap(avoidrate_, other->avoidrate_);
    std::swap(baselucky_, other->baselucky_);
    std::swap(crackdownrate_, other->crackdownrate_);
    std::swap(baserte_, other->baserte_);
    equip_.Swap(&other->equip_);
    std::swap(fight_, other->fight_);
    std::swap(powermax_, other->powermax_);
    std::swap(exp_, other->exp_);
    std::swap(lv_, other->lv_);
    std::swap(magicequipid_, other->magicequipid_);
    std::swap(guildname_, other->guildname_);
    std::swap(guildjob_, other->guildjob_);
    std::swap(titleid_, other->titleid_);
    std::swap(pkcount_, other->pkcount_);
    std::swap(viplv_, other->viplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BeyondPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BeyondPlayerInfo_descriptor_;
  metadata.reflection = BeyondPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMGetWSAckData::kClanIDFieldNumber;
const int GMGetWSAckData::kClanLevelFieldNumber;
const int GMGetWSAckData::kClanNameFieldNumber;
const int GMGetWSAckData::kFajobFieldNumber;
const int GMGetWSAckData::kClaniconFieldNumber;
const int GMGetWSAckData::kFacontributionFieldNumber;
const int GMGetWSAckData::kTeamidFieldNumber;
const int GMGetWSAckData::kTitleFieldNumber;
const int GMGetWSAckData::kMarryotheridFieldNumber;
const int GMGetWSAckData::kMarryothernameFieldNumber;
const int GMGetWSAckData::kMarryTimeFieldNumber;
const int GMGetWSAckData::kReqClanNumFieldNumber;
const int GMGetWSAckData::kEnvelopeCntFieldNumber;
const int GMGetWSAckData::kCanGetDistRewardFieldNumber;
const int GMGetWSAckData::kCanGetDrawEnveRewardFieldNumber;
const int GMGetWSAckData::kIsAnswerBeginFieldNumber;
const int GMGetWSAckData::kIsProtectKingDoubleFieldNumber;
const int GMGetWSAckData::kIsPvpFightWarBeginFieldNumber;
const int GMGetWSAckData::kIsEscortDoubleBeginFieldNumber;
const int GMGetWSAckData::kIsClanWarBeginFieldNumber;
const int GMGetWSAckData::kWorldBossOpenIDFieldNumber;
const int GMGetWSAckData::kListFieldNumber;
#endif  // !_MSC_VER

GMGetWSAckData::GMGetWSAckData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGetWSAckData::InitAsDefaultInstance() {
  list_ = const_cast< ::CharLogin::ActivityStateList*>(&::CharLogin::ActivityStateList::default_instance());
}

GMGetWSAckData::GMGetWSAckData(const GMGetWSAckData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGetWSAckData::SharedCtor() {
  _cached_size_ = 0;
  clanid_ = 0;
  clanlevel_ = 0;
  clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fajob_ = 0;
  clanicon_ = 0;
  facontribution_ = 0;
  teamid_ = GOOGLE_LONGLONG(0);
  marryotherid_ = GOOGLE_LONGLONG(0);
  marryothername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  marrytime_ = GOOGLE_LONGLONG(0);
  reqclannum_ = 0;
  envelopecnt_ = 0;
  cangetdistreward_ = 0;
  cangetdrawenvereward_ = 0;
  isanswerbegin_ = false;
  isprotectkingdouble_ = false;
  ispvpfightwarbegin_ = false;
  isescortdoublebegin_ = false;
  isclanwarbegin_ = false;
  list_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGetWSAckData::~GMGetWSAckData() {
  SharedDtor();
}

void GMGetWSAckData::SharedDtor() {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (marryothername_ != &::google::protobuf::internal::kEmptyString) {
    delete marryothername_;
  }
  if (this != default_instance_) {
    delete list_;
  }
}

void GMGetWSAckData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGetWSAckData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGetWSAckData_descriptor_;
}

const GMGetWSAckData& GMGetWSAckData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

GMGetWSAckData* GMGetWSAckData::default_instance_ = NULL;

GMGetWSAckData* GMGetWSAckData::New() const {
  return new GMGetWSAckData;
}

void GMGetWSAckData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    clanid_ = 0;
    clanlevel_ = 0;
    if (has_clanname()) {
      if (clanname_ != &::google::protobuf::internal::kEmptyString) {
        clanname_->clear();
      }
    }
    fajob_ = 0;
    clanicon_ = 0;
    facontribution_ = 0;
    teamid_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    marryotherid_ = GOOGLE_LONGLONG(0);
    if (has_marryothername()) {
      if (marryothername_ != &::google::protobuf::internal::kEmptyString) {
        marryothername_->clear();
      }
    }
    marrytime_ = GOOGLE_LONGLONG(0);
    reqclannum_ = 0;
    envelopecnt_ = 0;
    cangetdistreward_ = 0;
    cangetdrawenvereward_ = 0;
    isanswerbegin_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    isprotectkingdouble_ = false;
    ispvpfightwarbegin_ = false;
    isescortdoublebegin_ = false;
    isclanwarbegin_ = false;
    if (has_list()) {
      if (list_ != NULL) list_->::CharLogin::ActivityStateList::Clear();
    }
  }
  title_.Clear();
  worldbossopenid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGetWSAckData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 clanID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanid_)));
          set_has_clanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_clanLevel;
        break;
      }

      // optional int32 clanLevel = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanlevel_)));
          set_has_clanlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_clanName;
        break;
      }

      // optional string clanName = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clanName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clanname().data(), this->clanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_fajob;
        break;
      }

      // optional int32 fajob = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fajob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fajob_)));
          set_has_fajob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_clanicon;
        break;
      }

      // optional int32 clanicon = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanicon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanicon_)));
          set_has_clanicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_facontribution;
        break;
      }

      // optional int32 facontribution = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facontribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facontribution_)));
          set_has_facontribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_teamid;
        break;
      }

      // optional int64 teamid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &teamid_)));
          set_has_teamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_title;
        break;
      }

      // repeated int32 title = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_title:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 64, input, this->mutable_title())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_title())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_title;
        if (input->ExpectTag(72)) goto parse_marryotherid;
        break;
      }

      // optional int64 marryotherid = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marryotherid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marryotherid_)));
          set_has_marryotherid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_marryothername;
        break;
      }

      // optional bytes marryothername = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_marryothername:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_marryothername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_marryTime;
        break;
      }

      // optional int64 marryTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marrytime_)));
          set_has_marrytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_reqClanNum;
        break;
      }

      // optional int32 reqClanNum = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reqClanNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reqclannum_)));
          set_has_reqclannum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_envelopeCnt;
        break;
      }

      // optional int32 envelopeCnt = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_envelopeCnt:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &envelopecnt_)));
          set_has_envelopecnt();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_canGetDistReward;
        break;
      }

      // optional int32 canGetDistReward = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canGetDistReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cangetdistreward_)));
          set_has_cangetdistreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_canGetDrawEnveReward;
        break;
      }

      // optional int32 canGetDrawEnveReward = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_canGetDrawEnveReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cangetdrawenvereward_)));
          set_has_cangetdrawenvereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_isAnswerBegin;
        break;
      }

      // optional bool isAnswerBegin = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAnswerBegin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isanswerbegin_)));
          set_has_isanswerbegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_isProtectKingDouble;
        break;
      }

      // optional bool isProtectKingDouble = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isProtectKingDouble:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isprotectkingdouble_)));
          set_has_isprotectkingdouble();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_isPvpFightWarBegin;
        break;
      }

      // optional bool isPvpFightWarBegin = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isPvpFightWarBegin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ispvpfightwarbegin_)));
          set_has_ispvpfightwarbegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_isEscortDoubleBegin;
        break;
      }

      // optional bool isEscortDoubleBegin = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isEscortDoubleBegin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isescortdoublebegin_)));
          set_has_isescortdoublebegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_isClanWarBegin;
        break;
      }

      // optional bool isClanWarBegin = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isClanWarBegin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isclanwarbegin_)));
          set_has_isclanwarbegin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_worldBossOpenID;
        break;
      }

      // repeated int32 worldBossOpenID = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_worldBossOpenID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 2, 168, input, this->mutable_worldbossopenid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_worldbossopenid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_worldBossOpenID;
        if (input->ExpectTag(178)) goto parse_list;
        break;
      }

      // optional .CharLogin.ActivityStateList list = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGetWSAckData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 clanID = 1;
  if (has_clanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->clanid(), output);
  }

  // optional int32 clanLevel = 2;
  if (has_clanlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->clanlevel(), output);
  }

  // optional string clanName = 3;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->clanname(), output);
  }

  // optional int32 fajob = 4;
  if (has_fajob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->fajob(), output);
  }

  // optional int32 clanicon = 5;
  if (has_clanicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->clanicon(), output);
  }

  // optional int32 facontribution = 6;
  if (has_facontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->facontribution(), output);
  }

  // optional int64 teamid = 7;
  if (has_teamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->teamid(), output);
  }

  // repeated int32 title = 8;
  for (int i = 0; i < this->title_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      8, this->title(i), output);
  }

  // optional int64 marryotherid = 9;
  if (has_marryotherid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->marryotherid(), output);
  }

  // optional bytes marryothername = 10;
  if (has_marryothername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      10, this->marryothername(), output);
  }

  // optional int64 marryTime = 11;
  if (has_marrytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->marrytime(), output);
  }

  // optional int32 reqClanNum = 12;
  if (has_reqclannum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->reqclannum(), output);
  }

  // optional int32 envelopeCnt = 13;
  if (has_envelopecnt()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->envelopecnt(), output);
  }

  // optional int32 canGetDistReward = 14;
  if (has_cangetdistreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->cangetdistreward(), output);
  }

  // optional int32 canGetDrawEnveReward = 15;
  if (has_cangetdrawenvereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->cangetdrawenvereward(), output);
  }

  // optional bool isAnswerBegin = 16;
  if (has_isanswerbegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(16, this->isanswerbegin(), output);
  }

  // optional bool isProtectKingDouble = 17;
  if (has_isprotectkingdouble()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(17, this->isprotectkingdouble(), output);
  }

  // optional bool isPvpFightWarBegin = 18;
  if (has_ispvpfightwarbegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(18, this->ispvpfightwarbegin(), output);
  }

  // optional bool isEscortDoubleBegin = 19;
  if (has_isescortdoublebegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(19, this->isescortdoublebegin(), output);
  }

  // optional bool isClanWarBegin = 20;
  if (has_isclanwarbegin()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(20, this->isclanwarbegin(), output);
  }

  // repeated int32 worldBossOpenID = 21;
  for (int i = 0; i < this->worldbossopenid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      21, this->worldbossopenid(i), output);
  }

  // optional .CharLogin.ActivityStateList list = 22;
  if (has_list()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      22, this->list(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGetWSAckData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 clanID = 1;
  if (has_clanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->clanid(), target);
  }

  // optional int32 clanLevel = 2;
  if (has_clanlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->clanlevel(), target);
  }

  // optional string clanName = 3;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->clanname(), target);
  }

  // optional int32 fajob = 4;
  if (has_fajob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->fajob(), target);
  }

  // optional int32 clanicon = 5;
  if (has_clanicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->clanicon(), target);
  }

  // optional int32 facontribution = 6;
  if (has_facontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->facontribution(), target);
  }

  // optional int64 teamid = 7;
  if (has_teamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->teamid(), target);
  }

  // repeated int32 title = 8;
  for (int i = 0; i < this->title_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(8, this->title(i), target);
  }

  // optional int64 marryotherid = 9;
  if (has_marryotherid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->marryotherid(), target);
  }

  // optional bytes marryothername = 10;
  if (has_marryothername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        10, this->marryothername(), target);
  }

  // optional int64 marryTime = 11;
  if (has_marrytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->marrytime(), target);
  }

  // optional int32 reqClanNum = 12;
  if (has_reqclannum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->reqclannum(), target);
  }

  // optional int32 envelopeCnt = 13;
  if (has_envelopecnt()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->envelopecnt(), target);
  }

  // optional int32 canGetDistReward = 14;
  if (has_cangetdistreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->cangetdistreward(), target);
  }

  // optional int32 canGetDrawEnveReward = 15;
  if (has_cangetdrawenvereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->cangetdrawenvereward(), target);
  }

  // optional bool isAnswerBegin = 16;
  if (has_isanswerbegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(16, this->isanswerbegin(), target);
  }

  // optional bool isProtectKingDouble = 17;
  if (has_isprotectkingdouble()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(17, this->isprotectkingdouble(), target);
  }

  // optional bool isPvpFightWarBegin = 18;
  if (has_ispvpfightwarbegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(18, this->ispvpfightwarbegin(), target);
  }

  // optional bool isEscortDoubleBegin = 19;
  if (has_isescortdoublebegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(19, this->isescortdoublebegin(), target);
  }

  // optional bool isClanWarBegin = 20;
  if (has_isclanwarbegin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(20, this->isclanwarbegin(), target);
  }

  // repeated int32 worldBossOpenID = 21;
  for (int i = 0; i < this->worldbossopenid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(21, this->worldbossopenid(i), target);
  }

  // optional .CharLogin.ActivityStateList list = 22;
  if (has_list()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        22, this->list(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGetWSAckData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 clanID = 1;
    if (has_clanid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanid());
    }

    // optional int32 clanLevel = 2;
    if (has_clanlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanlevel());
    }

    // optional string clanName = 3;
    if (has_clanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clanname());
    }

    // optional int32 fajob = 4;
    if (has_fajob()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fajob());
    }

    // optional int32 clanicon = 5;
    if (has_clanicon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanicon());
    }

    // optional int32 facontribution = 6;
    if (has_facontribution()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->facontribution());
    }

    // optional int64 teamid = 7;
    if (has_teamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->teamid());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 marryotherid = 9;
    if (has_marryotherid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marryotherid());
    }

    // optional bytes marryothername = 10;
    if (has_marryothername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->marryothername());
    }

    // optional int64 marryTime = 11;
    if (has_marrytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marrytime());
    }

    // optional int32 reqClanNum = 12;
    if (has_reqclannum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reqclannum());
    }

    // optional int32 envelopeCnt = 13;
    if (has_envelopecnt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->envelopecnt());
    }

    // optional int32 canGetDistReward = 14;
    if (has_cangetdistreward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cangetdistreward());
    }

    // optional int32 canGetDrawEnveReward = 15;
    if (has_cangetdrawenvereward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cangetdrawenvereward());
    }

    // optional bool isAnswerBegin = 16;
    if (has_isanswerbegin()) {
      total_size += 2 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional bool isProtectKingDouble = 17;
    if (has_isprotectkingdouble()) {
      total_size += 2 + 1;
    }

    // optional bool isPvpFightWarBegin = 18;
    if (has_ispvpfightwarbegin()) {
      total_size += 2 + 1;
    }

    // optional bool isEscortDoubleBegin = 19;
    if (has_isescortdoublebegin()) {
      total_size += 2 + 1;
    }

    // optional bool isClanWarBegin = 20;
    if (has_isclanwarbegin()) {
      total_size += 2 + 1;
    }

    // optional .CharLogin.ActivityStateList list = 22;
    if (has_list()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->list());
    }

  }
  // repeated int32 title = 8;
  {
    int data_size = 0;
    for (int i = 0; i < this->title_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->title(i));
    }
    total_size += 1 * this->title_size() + data_size;
  }

  // repeated int32 worldBossOpenID = 21;
  {
    int data_size = 0;
    for (int i = 0; i < this->worldbossopenid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->worldbossopenid(i));
    }
    total_size += 2 * this->worldbossopenid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGetWSAckData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGetWSAckData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGetWSAckData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGetWSAckData::MergeFrom(const GMGetWSAckData& from) {
  GOOGLE_CHECK_NE(&from, this);
  title_.MergeFrom(from.title_);
  worldbossopenid_.MergeFrom(from.worldbossopenid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_clanid()) {
      set_clanid(from.clanid());
    }
    if (from.has_clanlevel()) {
      set_clanlevel(from.clanlevel());
    }
    if (from.has_clanname()) {
      set_clanname(from.clanname());
    }
    if (from.has_fajob()) {
      set_fajob(from.fajob());
    }
    if (from.has_clanicon()) {
      set_clanicon(from.clanicon());
    }
    if (from.has_facontribution()) {
      set_facontribution(from.facontribution());
    }
    if (from.has_teamid()) {
      set_teamid(from.teamid());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_marryotherid()) {
      set_marryotherid(from.marryotherid());
    }
    if (from.has_marryothername()) {
      set_marryothername(from.marryothername());
    }
    if (from.has_marrytime()) {
      set_marrytime(from.marrytime());
    }
    if (from.has_reqclannum()) {
      set_reqclannum(from.reqclannum());
    }
    if (from.has_envelopecnt()) {
      set_envelopecnt(from.envelopecnt());
    }
    if (from.has_cangetdistreward()) {
      set_cangetdistreward(from.cangetdistreward());
    }
    if (from.has_cangetdrawenvereward()) {
      set_cangetdrawenvereward(from.cangetdrawenvereward());
    }
    if (from.has_isanswerbegin()) {
      set_isanswerbegin(from.isanswerbegin());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_isprotectkingdouble()) {
      set_isprotectkingdouble(from.isprotectkingdouble());
    }
    if (from.has_ispvpfightwarbegin()) {
      set_ispvpfightwarbegin(from.ispvpfightwarbegin());
    }
    if (from.has_isescortdoublebegin()) {
      set_isescortdoublebegin(from.isescortdoublebegin());
    }
    if (from.has_isclanwarbegin()) {
      set_isclanwarbegin(from.isclanwarbegin());
    }
    if (from.has_list()) {
      mutable_list()->::CharLogin::ActivityStateList::MergeFrom(from.list());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGetWSAckData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGetWSAckData::CopyFrom(const GMGetWSAckData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGetWSAckData::IsInitialized() const {

  return true;
}

void GMGetWSAckData::Swap(GMGetWSAckData* other) {
  if (other != this) {
    std::swap(clanid_, other->clanid_);
    std::swap(clanlevel_, other->clanlevel_);
    std::swap(clanname_, other->clanname_);
    std::swap(fajob_, other->fajob_);
    std::swap(clanicon_, other->clanicon_);
    std::swap(facontribution_, other->facontribution_);
    std::swap(teamid_, other->teamid_);
    title_.Swap(&other->title_);
    std::swap(marryotherid_, other->marryotherid_);
    std::swap(marryothername_, other->marryothername_);
    std::swap(marrytime_, other->marrytime_);
    std::swap(reqclannum_, other->reqclannum_);
    std::swap(envelopecnt_, other->envelopecnt_);
    std::swap(cangetdistreward_, other->cangetdistreward_);
    std::swap(cangetdrawenvereward_, other->cangetdrawenvereward_);
    std::swap(isanswerbegin_, other->isanswerbegin_);
    std::swap(isprotectkingdouble_, other->isprotectkingdouble_);
    std::swap(ispvpfightwarbegin_, other->ispvpfightwarbegin_);
    std::swap(isescortdoublebegin_, other->isescortdoublebegin_);
    std::swap(isclanwarbegin_, other->isclanwarbegin_);
    worldbossopenid_.Swap(&other->worldbossopenid_);
    std::swap(list_, other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGetWSAckData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGetWSAckData_descriptor_;
  metadata.reflection = GMGetWSAckData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMGetWSRequestData::kInfoFieldNumber;
#endif  // !_MSC_VER

GMGetWSRequestData::GMGetWSRequestData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMGetWSRequestData::InitAsDefaultInstance() {
  info_ = const_cast< ::CharLogin::WBaseInfo*>(&::CharLogin::WBaseInfo::default_instance());
}

GMGetWSRequestData::GMGetWSRequestData(const GMGetWSRequestData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMGetWSRequestData::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMGetWSRequestData::~GMGetWSRequestData() {
  SharedDtor();
}

void GMGetWSRequestData::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void GMGetWSRequestData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMGetWSRequestData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMGetWSRequestData_descriptor_;
}

const GMGetWSRequestData& GMGetWSRequestData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

GMGetWSRequestData* GMGetWSRequestData::default_instance_ = NULL;

GMGetWSRequestData* GMGetWSRequestData::New() const {
  return new GMGetWSRequestData;
}

void GMGetWSRequestData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::CharLogin::WBaseInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMGetWSRequestData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .CharLogin.WBaseInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMGetWSRequestData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .CharLogin.WBaseInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMGetWSRequestData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .CharLogin.WBaseInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMGetWSRequestData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .CharLogin.WBaseInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMGetWSRequestData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMGetWSRequestData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMGetWSRequestData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMGetWSRequestData::MergeFrom(const GMGetWSRequestData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::CharLogin::WBaseInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMGetWSRequestData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMGetWSRequestData::CopyFrom(const GMGetWSRequestData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMGetWSRequestData::IsInitialized() const {

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void GMGetWSRequestData::Swap(GMGetWSRequestData* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMGetWSRequestData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMGetWSRequestData_descriptor_;
  metadata.reflection = GMGetWSRequestData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityStateList::kStatesFieldNumber;
#endif  // !_MSC_VER

ActivityStateList::ActivityStateList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityStateList::InitAsDefaultInstance() {
}

ActivityStateList::ActivityStateList(const ActivityStateList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityStateList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityStateList::~ActivityStateList() {
  SharedDtor();
}

void ActivityStateList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityStateList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityStateList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityStateList_descriptor_;
}

const ActivityStateList& ActivityStateList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

ActivityStateList* ActivityStateList::default_instance_ = NULL;

ActivityStateList* ActivityStateList::New() const {
  return new ActivityStateList;
}

void ActivityStateList::Clear() {
  states_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityStateList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CharLogin.ActivityState states = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_states:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_states()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_states;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityStateList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CharLogin.ActivityState states = 1;
  for (int i = 0; i < this->states_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->states(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityStateList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CharLogin.ActivityState states = 1;
  for (int i = 0; i < this->states_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->states(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityStateList::ByteSize() const {
  int total_size = 0;

  // repeated .CharLogin.ActivityState states = 1;
  total_size += 1 * this->states_size();
  for (int i = 0; i < this->states_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->states(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityStateList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityStateList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityStateList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityStateList::MergeFrom(const ActivityStateList& from) {
  GOOGLE_CHECK_NE(&from, this);
  states_.MergeFrom(from.states_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityStateList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityStateList::CopyFrom(const ActivityStateList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityStateList::IsInitialized() const {

  return true;
}

void ActivityStateList::Swap(ActivityStateList* other) {
  if (other != this) {
    states_.Swap(&other->states_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityStateList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityStateList_descriptor_;
  metadata.reflection = ActivityStateList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ActivityState::kTypeFieldNumber;
const int ActivityState::kFlagFieldNumber;
const int ActivityState::kNumFieldNumber;
#endif  // !_MSC_VER

ActivityState::ActivityState()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ActivityState::InitAsDefaultInstance() {
}

ActivityState::ActivityState(const ActivityState& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ActivityState::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  flag_ = false;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ActivityState::~ActivityState() {
  SharedDtor();
}

void ActivityState::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ActivityState::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ActivityState::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ActivityState_descriptor_;
}

const ActivityState& ActivityState::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  return *default_instance_;
}

ActivityState* ActivityState::default_instance_ = NULL;

ActivityState* ActivityState::New() const {
  return new ActivityState;
}

void ActivityState::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    flag_ = false;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ActivityState::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ActivityState::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ActivityState::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ActivityState::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ActivityState::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ActivityState* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ActivityState*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ActivityState::MergeFrom(const ActivityState& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ActivityState::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ActivityState::CopyFrom(const ActivityState& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ActivityState::IsInitialized() const {

  return true;
}

void ActivityState::Swap(ActivityState* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(flag_, other->flag_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ActivityState::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ActivityState_descriptor_;
  metadata.reflection = ActivityState_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CharLogin

// @@protoc_insertion_point(global_scope)
