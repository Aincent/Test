// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Group/GroupMessage.proto

#ifndef PROTOBUF_Group_2fGroupMessage_2eproto__INCLUDED
#define PROTOBUF_Group_2fGroupMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace GroupMessage {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

class RetInviteReply;
class RetPlayerStateToTeam;
class RetGetTeamID;
class TeamInfo;
class RetGetTeamMemberInfo;
class MemberInfo;
class RetGetNearbyPlayerInfo;
class NearbyPlayerInfo;
class RetLookforTeamInfo;
class ToClientSysMemberMap;
class RetChangeLeader;
class RetInviteToMember;
class RetKickMember;
class RetLeaveTeam;
class ToLeaderAcquire;
class RetAcquireToTeam;
class SimBroadcastInstanceCreate;
class ReqInstanceMemberApply;
class RetInstanceMemberApply;
class ToClientGroupChat;
class ClickPlayerHead;

// ===================================================================

class RetInviteReply : public ::google::protobuf::Message {
 public:
  RetInviteReply();
  virtual ~RetInviteReply();

  RetInviteReply(const RetInviteReply& from);

  inline RetInviteReply& operator=(const RetInviteReply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetInviteReply& default_instance();

  void Swap(RetInviteReply* other);

  // implements Message ----------------------------------------------

  RetInviteReply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetInviteReply& from);
  void MergeFrom(const RetInviteReply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int64 dwTeamID = 2;
  inline bool has_dwteamid() const;
  inline void clear_dwteamid();
  static const int kDwTeamIDFieldNumber = 2;
  inline ::google::protobuf::int64 dwteamid() const;
  inline void set_dwteamid(::google::protobuf::int64 value);

  // repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 3;
  inline int playerinfo_size() const;
  inline void clear_playerinfo();
  static const int kPlayerInfoFieldNumber = 3;
  inline const ::GroupMessage::RetPlayerStateToTeam& playerinfo(int index) const;
  inline ::GroupMessage::RetPlayerStateToTeam* mutable_playerinfo(int index);
  inline ::GroupMessage::RetPlayerStateToTeam* add_playerinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GroupMessage::RetPlayerStateToTeam >&
      playerinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GroupMessage::RetPlayerStateToTeam >*
      mutable_playerinfo();

  // @@protoc_insertion_point(class_scope:GroupMessage.RetInviteReply)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_dwteamid();
  inline void clear_has_dwteamid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 dwteamid_;
  ::google::protobuf::RepeatedPtrField< ::GroupMessage::RetPlayerStateToTeam > playerinfo_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static RetInviteReply* default_instance_;
};
// -------------------------------------------------------------------

class RetPlayerStateToTeam : public ::google::protobuf::Message {
 public:
  RetPlayerStateToTeam();
  virtual ~RetPlayerStateToTeam();

  RetPlayerStateToTeam(const RetPlayerStateToTeam& from);

  inline RetPlayerStateToTeam& operator=(const RetPlayerStateToTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetPlayerStateToTeam& default_instance();

  void Swap(RetPlayerStateToTeam* other);

  // implements Message ----------------------------------------------

  RetPlayerStateToTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetPlayerStateToTeam& from);
  void MergeFrom(const RetPlayerStateToTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 dwPlayerID = 1;
  inline bool has_dwplayerid() const;
  inline void clear_dwplayerid();
  static const int kDwPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 dwplayerid() const;
  inline void set_dwplayerid(::google::protobuf::int64 value);

  // required int32 dwOutOfRange = 2;
  inline bool has_dwoutofrange() const;
  inline void clear_dwoutofrange();
  static const int kDwOutOfRangeFieldNumber = 2;
  inline ::google::protobuf::int32 dwoutofrange() const;
  inline void set_dwoutofrange(::google::protobuf::int32 value);

  // required int32 dwHorseID = 3;
  inline bool has_dwhorseid() const;
  inline void clear_dwhorseid();
  static const int kDwHorseIDFieldNumber = 3;
  inline ::google::protobuf::int32 dwhorseid() const;
  inline void set_dwhorseid(::google::protobuf::int32 value);

  // required int32 dwEquipID = 4;
  inline bool has_dwequipid() const;
  inline void clear_dwequipid();
  static const int kDwEquipIDFieldNumber = 4;
  inline ::google::protobuf::int32 dwequipid() const;
  inline void set_dwequipid(::google::protobuf::int32 value);

  // required int32 eClassEx = 5;
  inline bool has_eclassex() const;
  inline void clear_eclassex();
  static const int kEClassExFieldNumber = 5;
  inline ::google::protobuf::int32 eclassex() const;
  inline void set_eclassex(::google::protobuf::int32 value);

  // required int32 bySex = 6;
  inline bool has_bysex() const;
  inline void clear_bysex();
  static const int kBySexFieldNumber = 6;
  inline ::google::protobuf::int32 bysex() const;
  inline void set_bysex(::google::protobuf::int32 value);

  // required int32 nLevel = 7;
  inline bool has_nlevel() const;
  inline void clear_nlevel();
  static const int kNLevelFieldNumber = 7;
  inline ::google::protobuf::int32 nlevel() const;
  inline void set_nlevel(::google::protobuf::int32 value);

  // required int32 isCaptain = 8;
  inline bool has_iscaptain() const;
  inline void clear_iscaptain();
  static const int kIsCaptainFieldNumber = 8;
  inline ::google::protobuf::int32 iscaptain() const;
  inline void set_iscaptain(::google::protobuf::int32 value);

  // required string sPlayerName = 9;
  inline bool has_splayername() const;
  inline void clear_splayername();
  static const int kSPlayerNameFieldNumber = 9;
  inline const ::std::string& splayername() const;
  inline void set_splayername(const ::std::string& value);
  inline void set_splayername(const char* value);
  inline void set_splayername(const char* value, size_t size);
  inline ::std::string* mutable_splayername();
  inline ::std::string* release_splayername();
  inline void set_allocated_splayername(::std::string* splayername);

  // required int32 dwPlayerPower = 10;
  inline bool has_dwplayerpower() const;
  inline void clear_dwplayerpower();
  static const int kDwPlayerPowerFieldNumber = 10;
  inline ::google::protobuf::int32 dwplayerpower() const;
  inline void set_dwplayerpower(::google::protobuf::int32 value);

  // required int32 costume = 11;
  inline bool has_costume() const;
  inline void clear_costume();
  static const int kCostumeFieldNumber = 11;
  inline ::google::protobuf::int32 costume() const;
  inline void set_costume(::google::protobuf::int32 value);

  // required int32 mapid = 12;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 12;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // optional int32 fashionID = 13;
  inline bool has_fashionid() const;
  inline void clear_fashionid();
  static const int kFashionIDFieldNumber = 13;
  inline ::google::protobuf::int32 fashionid() const;
  inline void set_fashionid(::google::protobuf::int32 value);

  // optional int32 viplv = 14;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kViplvFieldNumber = 14;
  inline ::google::protobuf::int32 viplv() const;
  inline void set_viplv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GroupMessage.RetPlayerStateToTeam)
 private:
  inline void set_has_dwplayerid();
  inline void clear_has_dwplayerid();
  inline void set_has_dwoutofrange();
  inline void clear_has_dwoutofrange();
  inline void set_has_dwhorseid();
  inline void clear_has_dwhorseid();
  inline void set_has_dwequipid();
  inline void clear_has_dwequipid();
  inline void set_has_eclassex();
  inline void clear_has_eclassex();
  inline void set_has_bysex();
  inline void clear_has_bysex();
  inline void set_has_nlevel();
  inline void clear_has_nlevel();
  inline void set_has_iscaptain();
  inline void clear_has_iscaptain();
  inline void set_has_splayername();
  inline void clear_has_splayername();
  inline void set_has_dwplayerpower();
  inline void clear_has_dwplayerpower();
  inline void set_has_costume();
  inline void clear_has_costume();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_fashionid();
  inline void clear_has_fashionid();
  inline void set_has_viplv();
  inline void clear_has_viplv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 dwplayerid_;
  ::google::protobuf::int32 dwoutofrange_;
  ::google::protobuf::int32 dwhorseid_;
  ::google::protobuf::int32 dwequipid_;
  ::google::protobuf::int32 eclassex_;
  ::google::protobuf::int32 bysex_;
  ::google::protobuf::int32 nlevel_;
  ::std::string* splayername_;
  ::google::protobuf::int32 iscaptain_;
  ::google::protobuf::int32 dwplayerpower_;
  ::google::protobuf::int32 costume_;
  ::google::protobuf::int32 mapid_;
  ::google::protobuf::int32 fashionid_;
  ::google::protobuf::int32 viplv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static RetPlayerStateToTeam* default_instance_;
};
// -------------------------------------------------------------------

class RetGetTeamID : public ::google::protobuf::Message {
 public:
  RetGetTeamID();
  virtual ~RetGetTeamID();

  RetGetTeamID(const RetGetTeamID& from);

  inline RetGetTeamID& operator=(const RetGetTeamID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetGetTeamID& default_instance();

  void Swap(RetGetTeamID* other);

  // implements Message ----------------------------------------------

  RetGetTeamID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetGetTeamID& from);
  void MergeFrom(const RetGetTeamID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated .GroupMessage.TeamInfo teamInfo = 2;
  inline int teaminfo_size() const;
  inline void clear_teaminfo();
  static const int kTeamInfoFieldNumber = 2;
  inline const ::GroupMessage::TeamInfo& teaminfo(int index) const;
  inline ::GroupMessage::TeamInfo* mutable_teaminfo(int index);
  inline ::GroupMessage::TeamInfo* add_teaminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GroupMessage::TeamInfo >&
      teaminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GroupMessage::TeamInfo >*
      mutable_teaminfo();

  // @@protoc_insertion_point(class_scope:GroupMessage.RetGetTeamID)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GroupMessage::TeamInfo > teaminfo_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static RetGetTeamID* default_instance_;
};
// -------------------------------------------------------------------

class TeamInfo : public ::google::protobuf::Message {
 public:
  TeamInfo();
  virtual ~TeamInfo();

  TeamInfo(const TeamInfo& from);

  inline TeamInfo& operator=(const TeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const TeamInfo& default_instance();

  void Swap(TeamInfo* other);

  // implements Message ----------------------------------------------

  TeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const TeamInfo& from);
  void MergeFrom(const TeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 dwTeamID = 1;
  inline bool has_dwteamid() const;
  inline void clear_dwteamid();
  static const int kDwTeamIDFieldNumber = 1;
  inline ::google::protobuf::int64 dwteamid() const;
  inline void set_dwteamid(::google::protobuf::int64 value);

  // optional string sLeaderName = 2;
  inline bool has_sleadername() const;
  inline void clear_sleadername();
  static const int kSLeaderNameFieldNumber = 2;
  inline const ::std::string& sleadername() const;
  inline void set_sleadername(const ::std::string& value);
  inline void set_sleadername(const char* value);
  inline void set_sleadername(const char* value, size_t size);
  inline ::std::string* mutable_sleadername();
  inline ::std::string* release_sleadername();
  inline void set_allocated_sleadername(::std::string* sleadername);

  // optional int32 dwTeamLevel = 3;
  inline bool has_dwteamlevel() const;
  inline void clear_dwteamlevel();
  static const int kDwTeamLevelFieldNumber = 3;
  inline ::google::protobuf::int32 dwteamlevel() const;
  inline void set_dwteamlevel(::google::protobuf::int32 value);

  // optional int32 dwTeamPower = 4;
  inline bool has_dwteampower() const;
  inline void clear_dwteampower();
  static const int kDwTeamPowerFieldNumber = 4;
  inline ::google::protobuf::int32 dwteampower() const;
  inline void set_dwteampower(::google::protobuf::int32 value);

  // optional int32 dwTeamMembers = 5;
  inline bool has_dwteammembers() const;
  inline void clear_dwteammembers();
  static const int kDwTeamMembersFieldNumber = 5;
  inline ::google::protobuf::int32 dwteammembers() const;
  inline void set_dwteammembers(::google::protobuf::int32 value);

  // repeated .GroupMessage.MemberInfo groupMember = 6;
  inline int groupmember_size() const;
  inline void clear_groupmember();
  static const int kGroupMemberFieldNumber = 6;
  inline const ::GroupMessage::MemberInfo& groupmember(int index) const;
  inline ::GroupMessage::MemberInfo* mutable_groupmember(int index);
  inline ::GroupMessage::MemberInfo* add_groupmember();
  inline const ::google::protobuf::RepeatedPtrField< ::GroupMessage::MemberInfo >&
      groupmember() const;
  inline ::google::protobuf::RepeatedPtrField< ::GroupMessage::MemberInfo >*
      mutable_groupmember();

  // @@protoc_insertion_point(class_scope:GroupMessage.TeamInfo)
 private:
  inline void set_has_dwteamid();
  inline void clear_has_dwteamid();
  inline void set_has_sleadername();
  inline void clear_has_sleadername();
  inline void set_has_dwteamlevel();
  inline void clear_has_dwteamlevel();
  inline void set_has_dwteampower();
  inline void clear_has_dwteampower();
  inline void set_has_dwteammembers();
  inline void clear_has_dwteammembers();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 dwteamid_;
  ::std::string* sleadername_;
  ::google::protobuf::int32 dwteamlevel_;
  ::google::protobuf::int32 dwteampower_;
  ::google::protobuf::RepeatedPtrField< ::GroupMessage::MemberInfo > groupmember_;
  ::google::protobuf::int32 dwteammembers_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static TeamInfo* default_instance_;
};
// -------------------------------------------------------------------

class RetGetTeamMemberInfo : public ::google::protobuf::Message {
 public:
  RetGetTeamMemberInfo();
  virtual ~RetGetTeamMemberInfo();

  RetGetTeamMemberInfo(const RetGetTeamMemberInfo& from);

  inline RetGetTeamMemberInfo& operator=(const RetGetTeamMemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetGetTeamMemberInfo& default_instance();

  void Swap(RetGetTeamMemberInfo* other);

  // implements Message ----------------------------------------------

  RetGetTeamMemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetGetTeamMemberInfo& from);
  void MergeFrom(const RetGetTeamMemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated .GroupMessage.MemberInfo teamInfo = 2;
  inline int teaminfo_size() const;
  inline void clear_teaminfo();
  static const int kTeamInfoFieldNumber = 2;
  inline const ::GroupMessage::MemberInfo& teaminfo(int index) const;
  inline ::GroupMessage::MemberInfo* mutable_teaminfo(int index);
  inline ::GroupMessage::MemberInfo* add_teaminfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GroupMessage::MemberInfo >&
      teaminfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GroupMessage::MemberInfo >*
      mutable_teaminfo();

  // @@protoc_insertion_point(class_scope:GroupMessage.RetGetTeamMemberInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GroupMessage::MemberInfo > teaminfo_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static RetGetTeamMemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class MemberInfo : public ::google::protobuf::Message {
 public:
  MemberInfo();
  virtual ~MemberInfo();

  MemberInfo(const MemberInfo& from);

  inline MemberInfo& operator=(const MemberInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MemberInfo& default_instance();

  void Swap(MemberInfo* other);

  // implements Message ----------------------------------------------

  MemberInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MemberInfo& from);
  void MergeFrom(const MemberInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 fight = 3;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 3;
  inline ::google::protobuf::int32 fight() const;
  inline void set_fight(::google::protobuf::int32 value);

  // required int32 profession = 4;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 4;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // required int32 lv = 5;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 5;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // required int32 viplv = 6;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kViplvFieldNumber = 6;
  inline ::google::protobuf::int32 viplv() const;
  inline void set_viplv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GroupMessage.MemberInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_viplv();
  inline void clear_has_viplv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* name_;
  ::google::protobuf::int32 fight_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 viplv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static MemberInfo* default_instance_;
};
// -------------------------------------------------------------------

class RetGetNearbyPlayerInfo : public ::google::protobuf::Message {
 public:
  RetGetNearbyPlayerInfo();
  virtual ~RetGetNearbyPlayerInfo();

  RetGetNearbyPlayerInfo(const RetGetNearbyPlayerInfo& from);

  inline RetGetNearbyPlayerInfo& operator=(const RetGetNearbyPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetGetNearbyPlayerInfo& default_instance();

  void Swap(RetGetNearbyPlayerInfo* other);

  // implements Message ----------------------------------------------

  RetGetNearbyPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetGetNearbyPlayerInfo& from);
  void MergeFrom(const RetGetNearbyPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated .GroupMessage.NearbyPlayerInfo playerInfos = 2;
  inline int playerinfos_size() const;
  inline void clear_playerinfos();
  static const int kPlayerInfosFieldNumber = 2;
  inline const ::GroupMessage::NearbyPlayerInfo& playerinfos(int index) const;
  inline ::GroupMessage::NearbyPlayerInfo* mutable_playerinfos(int index);
  inline ::GroupMessage::NearbyPlayerInfo* add_playerinfos();
  inline const ::google::protobuf::RepeatedPtrField< ::GroupMessage::NearbyPlayerInfo >&
      playerinfos() const;
  inline ::google::protobuf::RepeatedPtrField< ::GroupMessage::NearbyPlayerInfo >*
      mutable_playerinfos();

  // @@protoc_insertion_point(class_scope:GroupMessage.RetGetNearbyPlayerInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GroupMessage::NearbyPlayerInfo > playerinfos_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static RetGetNearbyPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class NearbyPlayerInfo : public ::google::protobuf::Message {
 public:
  NearbyPlayerInfo();
  virtual ~NearbyPlayerInfo();

  NearbyPlayerInfo(const NearbyPlayerInfo& from);

  inline NearbyPlayerInfo& operator=(const NearbyPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NearbyPlayerInfo& default_instance();

  void Swap(NearbyPlayerInfo* other);

  // implements Message ----------------------------------------------

  NearbyPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NearbyPlayerInfo& from);
  void MergeFrom(const NearbyPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 dwPlayerID = 1;
  inline bool has_dwplayerid() const;
  inline void clear_dwplayerid();
  static const int kDwPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 dwplayerid() const;
  inline void set_dwplayerid(::google::protobuf::int64 value);

  // required string sPlayerName = 2;
  inline bool has_splayername() const;
  inline void clear_splayername();
  static const int kSPlayerNameFieldNumber = 2;
  inline const ::std::string& splayername() const;
  inline void set_splayername(const ::std::string& value);
  inline void set_splayername(const char* value);
  inline void set_splayername(const char* value, size_t size);
  inline ::std::string* mutable_splayername();
  inline ::std::string* release_splayername();
  inline void set_allocated_splayername(::std::string* splayername);

  // required int32 nLevel = 3;
  inline bool has_nlevel() const;
  inline void clear_nlevel();
  static const int kNLevelFieldNumber = 3;
  inline ::google::protobuf::int32 nlevel() const;
  inline void set_nlevel(::google::protobuf::int32 value);

  // required int32 eClassEx = 4;
  inline bool has_eclassex() const;
  inline void clear_eclassex();
  static const int kEClassExFieldNumber = 4;
  inline ::google::protobuf::int32 eclassex() const;
  inline void set_eclassex(::google::protobuf::int32 value);

  // required int32 powerNum = 5;
  inline bool has_powernum() const;
  inline void clear_powernum();
  static const int kPowerNumFieldNumber = 5;
  inline ::google::protobuf::int32 powernum() const;
  inline void set_powernum(::google::protobuf::int32 value);

  // required int32 bHasTeam = 6;
  inline bool has_bhasteam() const;
  inline void clear_bhasteam();
  static const int kBHasTeamFieldNumber = 6;
  inline ::google::protobuf::int32 bhasteam() const;
  inline void set_bhasteam(::google::protobuf::int32 value);

  // required int32 viplv = 7;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kViplvFieldNumber = 7;
  inline ::google::protobuf::int32 viplv() const;
  inline void set_viplv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GroupMessage.NearbyPlayerInfo)
 private:
  inline void set_has_dwplayerid();
  inline void clear_has_dwplayerid();
  inline void set_has_splayername();
  inline void clear_has_splayername();
  inline void set_has_nlevel();
  inline void clear_has_nlevel();
  inline void set_has_eclassex();
  inline void clear_has_eclassex();
  inline void set_has_powernum();
  inline void clear_has_powernum();
  inline void set_has_bhasteam();
  inline void clear_has_bhasteam();
  inline void set_has_viplv();
  inline void clear_has_viplv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 dwplayerid_;
  ::std::string* splayername_;
  ::google::protobuf::int32 nlevel_;
  ::google::protobuf::int32 eclassex_;
  ::google::protobuf::int32 powernum_;
  ::google::protobuf::int32 bhasteam_;
  ::google::protobuf::int32 viplv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static NearbyPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class RetLookforTeamInfo : public ::google::protobuf::Message {
 public:
  RetLookforTeamInfo();
  virtual ~RetLookforTeamInfo();

  RetLookforTeamInfo(const RetLookforTeamInfo& from);

  inline RetLookforTeamInfo& operator=(const RetLookforTeamInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetLookforTeamInfo& default_instance();

  void Swap(RetLookforTeamInfo* other);

  // implements Message ----------------------------------------------

  RetLookforTeamInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetLookforTeamInfo& from);
  void MergeFrom(const RetLookforTeamInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 2;
  inline int playerinfo_size() const;
  inline void clear_playerinfo();
  static const int kPlayerInfoFieldNumber = 2;
  inline const ::GroupMessage::RetPlayerStateToTeam& playerinfo(int index) const;
  inline ::GroupMessage::RetPlayerStateToTeam* mutable_playerinfo(int index);
  inline ::GroupMessage::RetPlayerStateToTeam* add_playerinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GroupMessage::RetPlayerStateToTeam >&
      playerinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GroupMessage::RetPlayerStateToTeam >*
      mutable_playerinfo();

  // @@protoc_insertion_point(class_scope:GroupMessage.RetLookforTeamInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GroupMessage::RetPlayerStateToTeam > playerinfo_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static RetLookforTeamInfo* default_instance_;
};
// -------------------------------------------------------------------

class ToClientSysMemberMap : public ::google::protobuf::Message {
 public:
  ToClientSysMemberMap();
  virtual ~ToClientSysMemberMap();

  ToClientSysMemberMap(const ToClientSysMemberMap& from);

  inline ToClientSysMemberMap& operator=(const ToClientSysMemberMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToClientSysMemberMap& default_instance();

  void Swap(ToClientSysMemberMap* other);

  // implements Message ----------------------------------------------

  ToClientSysMemberMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToClientSysMemberMap& from);
  void MergeFrom(const ToClientSysMemberMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated int32 mapid = 2;
  inline int mapid_size() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::int32 mapid(int index) const;
  inline void set_mapid(int index, ::google::protobuf::int32 value);
  inline void add_mapid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      mapid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_mapid();

  // repeated int64 charid = 3;
  inline int charid_size() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 3;
  inline ::google::protobuf::int64 charid(int index) const;
  inline void set_charid(int index, ::google::protobuf::int64 value);
  inline void add_charid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      charid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_charid();

  // @@protoc_insertion_point(class_scope:GroupMessage.ToClientSysMemberMap)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > mapid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > charid_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static ToClientSysMemberMap* default_instance_;
};
// -------------------------------------------------------------------

class RetChangeLeader : public ::google::protobuf::Message {
 public:
  RetChangeLeader();
  virtual ~RetChangeLeader();

  RetChangeLeader(const RetChangeLeader& from);

  inline RetChangeLeader& operator=(const RetChangeLeader& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetChangeLeader& default_instance();

  void Swap(RetChangeLeader* other);

  // implements Message ----------------------------------------------

  RetChangeLeader* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetChangeLeader& from);
  void MergeFrom(const RetChangeLeader& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 dwLeaderID = 1;
  inline bool has_dwleaderid() const;
  inline void clear_dwleaderid();
  static const int kDwLeaderIDFieldNumber = 1;
  inline ::google::protobuf::int64 dwleaderid() const;
  inline void set_dwleaderid(::google::protobuf::int64 value);

  // required int64 dwNewLeaderID = 2;
  inline bool has_dwnewleaderid() const;
  inline void clear_dwnewleaderid();
  static const int kDwNewLeaderIDFieldNumber = 2;
  inline ::google::protobuf::int64 dwnewleaderid() const;
  inline void set_dwnewleaderid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GroupMessage.RetChangeLeader)
 private:
  inline void set_has_dwleaderid();
  inline void clear_has_dwleaderid();
  inline void set_has_dwnewleaderid();
  inline void clear_has_dwnewleaderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 dwleaderid_;
  ::google::protobuf::int64 dwnewleaderid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static RetChangeLeader* default_instance_;
};
// -------------------------------------------------------------------

class RetInviteToMember : public ::google::protobuf::Message {
 public:
  RetInviteToMember();
  virtual ~RetInviteToMember();

  RetInviteToMember(const RetInviteToMember& from);

  inline RetInviteToMember& operator=(const RetInviteToMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetInviteToMember& default_instance();

  void Swap(RetInviteToMember* other);

  // implements Message ----------------------------------------------

  RetInviteToMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetInviteToMember& from);
  void MergeFrom(const RetInviteToMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 dwTeamMemID = 1;
  inline bool has_dwteammemid() const;
  inline void clear_dwteammemid();
  static const int kDwTeamMemIDFieldNumber = 1;
  inline ::google::protobuf::int64 dwteammemid() const;
  inline void set_dwteammemid(::google::protobuf::int64 value);

  // required string sLeaderName = 2;
  inline bool has_sleadername() const;
  inline void clear_sleadername();
  static const int kSLeaderNameFieldNumber = 2;
  inline const ::std::string& sleadername() const;
  inline void set_sleadername(const ::std::string& value);
  inline void set_sleadername(const char* value);
  inline void set_sleadername(const char* value, size_t size);
  inline ::std::string* mutable_sleadername();
  inline ::std::string* release_sleadername();
  inline void set_allocated_sleadername(::std::string* sleadername);

  // @@protoc_insertion_point(class_scope:GroupMessage.RetInviteToMember)
 private:
  inline void set_has_dwteammemid();
  inline void clear_has_dwteammemid();
  inline void set_has_sleadername();
  inline void clear_has_sleadername();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 dwteammemid_;
  ::std::string* sleadername_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static RetInviteToMember* default_instance_;
};
// -------------------------------------------------------------------

class RetKickMember : public ::google::protobuf::Message {
 public:
  RetKickMember();
  virtual ~RetKickMember();

  RetKickMember(const RetKickMember& from);

  inline RetKickMember& operator=(const RetKickMember& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetKickMember& default_instance();

  void Swap(RetKickMember* other);

  // implements Message ----------------------------------------------

  RetKickMember* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetKickMember& from);
  void MergeFrom(const RetKickMember& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 dwDestPlayerID = 1;
  inline bool has_dwdestplayerid() const;
  inline void clear_dwdestplayerid();
  static const int kDwDestPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 dwdestplayerid() const;
  inline void set_dwdestplayerid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GroupMessage.RetKickMember)
 private:
  inline void set_has_dwdestplayerid();
  inline void clear_has_dwdestplayerid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 dwdestplayerid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static RetKickMember* default_instance_;
};
// -------------------------------------------------------------------

class RetLeaveTeam : public ::google::protobuf::Message {
 public:
  RetLeaveTeam();
  virtual ~RetLeaveTeam();

  RetLeaveTeam(const RetLeaveTeam& from);

  inline RetLeaveTeam& operator=(const RetLeaveTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetLeaveTeam& default_instance();

  void Swap(RetLeaveTeam* other);

  // implements Message ----------------------------------------------

  RetLeaveTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetLeaveTeam& from);
  void MergeFrom(const RetLeaveTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 dwPlayerID = 1;
  inline bool has_dwplayerid() const;
  inline void clear_dwplayerid();
  static const int kDwPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 dwplayerid() const;
  inline void set_dwplayerid(::google::protobuf::int64 value);

  // optional int64 dwLeaderID = 2;
  inline bool has_dwleaderid() const;
  inline void clear_dwleaderid();
  static const int kDwLeaderIDFieldNumber = 2;
  inline ::google::protobuf::int64 dwleaderid() const;
  inline void set_dwleaderid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GroupMessage.RetLeaveTeam)
 private:
  inline void set_has_dwplayerid();
  inline void clear_has_dwplayerid();
  inline void set_has_dwleaderid();
  inline void clear_has_dwleaderid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 dwplayerid_;
  ::google::protobuf::int64 dwleaderid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static RetLeaveTeam* default_instance_;
};
// -------------------------------------------------------------------

class ToLeaderAcquire : public ::google::protobuf::Message {
 public:
  ToLeaderAcquire();
  virtual ~ToLeaderAcquire();

  ToLeaderAcquire(const ToLeaderAcquire& from);

  inline ToLeaderAcquire& operator=(const ToLeaderAcquire& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToLeaderAcquire& default_instance();

  void Swap(ToLeaderAcquire* other);

  // implements Message ----------------------------------------------

  ToLeaderAcquire* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToLeaderAcquire& from);
  void MergeFrom(const ToLeaderAcquire& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 dstPlayerID = 1;
  inline bool has_dstplayerid() const;
  inline void clear_dstplayerid();
  static const int kDstPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 dstplayerid() const;
  inline void set_dstplayerid(::google::protobuf::int64 value);

  // required string acquireName = 2;
  inline bool has_acquirename() const;
  inline void clear_acquirename();
  static const int kAcquireNameFieldNumber = 2;
  inline const ::std::string& acquirename() const;
  inline void set_acquirename(const ::std::string& value);
  inline void set_acquirename(const char* value);
  inline void set_acquirename(const char* value, size_t size);
  inline ::std::string* mutable_acquirename();
  inline ::std::string* release_acquirename();
  inline void set_allocated_acquirename(::std::string* acquirename);

  // @@protoc_insertion_point(class_scope:GroupMessage.ToLeaderAcquire)
 private:
  inline void set_has_dstplayerid();
  inline void clear_has_dstplayerid();
  inline void set_has_acquirename();
  inline void clear_has_acquirename();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 dstplayerid_;
  ::std::string* acquirename_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static ToLeaderAcquire* default_instance_;
};
// -------------------------------------------------------------------

class RetAcquireToTeam : public ::google::protobuf::Message {
 public:
  RetAcquireToTeam();
  virtual ~RetAcquireToTeam();

  RetAcquireToTeam(const RetAcquireToTeam& from);

  inline RetAcquireToTeam& operator=(const RetAcquireToTeam& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetAcquireToTeam& default_instance();

  void Swap(RetAcquireToTeam* other);

  // implements Message ----------------------------------------------

  RetAcquireToTeam* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetAcquireToTeam& from);
  void MergeFrom(const RetAcquireToTeam& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dwErrorCode = 1;
  inline bool has_dwerrorcode() const;
  inline void clear_dwerrorcode();
  static const int kDwErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 dwerrorcode() const;
  inline void set_dwerrorcode(::google::protobuf::int32 value);

  // required int32 dwTeamID = 2;
  inline bool has_dwteamid() const;
  inline void clear_dwteamid();
  static const int kDwTeamIDFieldNumber = 2;
  inline ::google::protobuf::int32 dwteamid() const;
  inline void set_dwteamid(::google::protobuf::int32 value);

  // required int32 teamSign = 3;
  inline bool has_teamsign() const;
  inline void clear_teamsign();
  static const int kTeamSignFieldNumber = 3;
  inline ::google::protobuf::int32 teamsign() const;
  inline void set_teamsign(::google::protobuf::int32 value);

  // repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 4;
  inline int playerinfo_size() const;
  inline void clear_playerinfo();
  static const int kPlayerInfoFieldNumber = 4;
  inline const ::GroupMessage::RetPlayerStateToTeam& playerinfo(int index) const;
  inline ::GroupMessage::RetPlayerStateToTeam* mutable_playerinfo(int index);
  inline ::GroupMessage::RetPlayerStateToTeam* add_playerinfo();
  inline const ::google::protobuf::RepeatedPtrField< ::GroupMessage::RetPlayerStateToTeam >&
      playerinfo() const;
  inline ::google::protobuf::RepeatedPtrField< ::GroupMessage::RetPlayerStateToTeam >*
      mutable_playerinfo();

  // @@protoc_insertion_point(class_scope:GroupMessage.RetAcquireToTeam)
 private:
  inline void set_has_dwerrorcode();
  inline void clear_has_dwerrorcode();
  inline void set_has_dwteamid();
  inline void clear_has_dwteamid();
  inline void set_has_teamsign();
  inline void clear_has_teamsign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dwerrorcode_;
  ::google::protobuf::int32 dwteamid_;
  ::google::protobuf::RepeatedPtrField< ::GroupMessage::RetPlayerStateToTeam > playerinfo_;
  ::google::protobuf::int32 teamsign_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static RetAcquireToTeam* default_instance_;
};
// -------------------------------------------------------------------

class SimBroadcastInstanceCreate : public ::google::protobuf::Message {
 public:
  SimBroadcastInstanceCreate();
  virtual ~SimBroadcastInstanceCreate();

  SimBroadcastInstanceCreate(const SimBroadcastInstanceCreate& from);

  inline SimBroadcastInstanceCreate& operator=(const SimBroadcastInstanceCreate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimBroadcastInstanceCreate& default_instance();

  void Swap(SimBroadcastInstanceCreate* other);

  // implements Message ----------------------------------------------

  SimBroadcastInstanceCreate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimBroadcastInstanceCreate& from);
  void MergeFrom(const SimBroadcastInstanceCreate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 teamSign = 1;
  inline bool has_teamsign() const;
  inline void clear_teamsign();
  static const int kTeamSignFieldNumber = 1;
  inline ::google::protobuf::int32 teamsign() const;
  inline void set_teamsign(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GroupMessage.SimBroadcastInstanceCreate)
 private:
  inline void set_has_teamsign();
  inline void clear_has_teamsign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 teamsign_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static SimBroadcastInstanceCreate* default_instance_;
};
// -------------------------------------------------------------------

class ReqInstanceMemberApply : public ::google::protobuf::Message {
 public:
  ReqInstanceMemberApply();
  virtual ~ReqInstanceMemberApply();

  ReqInstanceMemberApply(const ReqInstanceMemberApply& from);

  inline ReqInstanceMemberApply& operator=(const ReqInstanceMemberApply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqInstanceMemberApply& default_instance();

  void Swap(ReqInstanceMemberApply* other);

  // implements Message ----------------------------------------------

  ReqInstanceMemberApply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqInstanceMemberApply& from);
  void MergeFrom(const ReqInstanceMemberApply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 isAgree = 1;
  inline bool has_isagree() const;
  inline void clear_isagree();
  static const int kIsAgreeFieldNumber = 1;
  inline ::google::protobuf::int32 isagree() const;
  inline void set_isagree(::google::protobuf::int32 value);

  // required int32 instanceId = 2;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIdFieldNumber = 2;
  inline ::google::protobuf::int32 instanceid() const;
  inline void set_instanceid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GroupMessage.ReqInstanceMemberApply)
 private:
  inline void set_has_isagree();
  inline void clear_has_isagree();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 isagree_;
  ::google::protobuf::int32 instanceid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static ReqInstanceMemberApply* default_instance_;
};
// -------------------------------------------------------------------

class RetInstanceMemberApply : public ::google::protobuf::Message {
 public:
  RetInstanceMemberApply();
  virtual ~RetInstanceMemberApply();

  RetInstanceMemberApply(const RetInstanceMemberApply& from);

  inline RetInstanceMemberApply& operator=(const RetInstanceMemberApply& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetInstanceMemberApply& default_instance();

  void Swap(RetInstanceMemberApply* other);

  // implements Message ----------------------------------------------

  RetInstanceMemberApply* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetInstanceMemberApply& from);
  void MergeFrom(const RetInstanceMemberApply& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 dwErrorCode = 1;
  inline bool has_dwerrorcode() const;
  inline void clear_dwerrorcode();
  static const int kDwErrorCodeFieldNumber = 1;
  inline ::google::protobuf::int32 dwerrorcode() const;
  inline void set_dwerrorcode(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GroupMessage.RetInstanceMemberApply)
 private:
  inline void set_has_dwerrorcode();
  inline void clear_has_dwerrorcode();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 dwerrorcode_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static RetInstanceMemberApply* default_instance_;
};
// -------------------------------------------------------------------

class ToClientGroupChat : public ::google::protobuf::Message {
 public:
  ToClientGroupChat();
  virtual ~ToClientGroupChat();

  ToClientGroupChat(const ToClientGroupChat& from);

  inline ToClientGroupChat& operator=(const ToClientGroupChat& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToClientGroupChat& default_instance();

  void Swap(ToClientGroupChat* other);

  // implements Message ----------------------------------------------

  ToClientGroupChat* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToClientGroupChat& from);
  void MergeFrom(const ToClientGroupChat& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 instanceId = 3;
  inline bool has_instanceid() const;
  inline void clear_instanceid();
  static const int kInstanceIdFieldNumber = 3;
  inline ::google::protobuf::int32 instanceid() const;
  inline void set_instanceid(::google::protobuf::int32 value);

  // optional int64 guid = 4;
  inline bool has_guid() const;
  inline void clear_guid();
  static const int kGuidFieldNumber = 4;
  inline ::google::protobuf::int64 guid() const;
  inline void set_guid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GroupMessage.ToClientGroupChat)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_instanceid();
  inline void clear_has_instanceid();
  inline void set_has_guid();
  inline void clear_has_guid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 instanceid_;
  ::google::protobuf::int64 guid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static ToClientGroupChat* default_instance_;
};
// -------------------------------------------------------------------

class ClickPlayerHead : public ::google::protobuf::Message {
 public:
  ClickPlayerHead();
  virtual ~ClickPlayerHead();

  ClickPlayerHead(const ClickPlayerHead& from);

  inline ClickPlayerHead& operator=(const ClickPlayerHead& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClickPlayerHead& default_instance();

  void Swap(ClickPlayerHead* other);

  // implements Message ----------------------------------------------

  ClickPlayerHead* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClickPlayerHead& from);
  void MergeFrom(const ClickPlayerHead& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 groupID = 1;
  inline bool has_groupid() const;
  inline void clear_groupid();
  static const int kGroupIDFieldNumber = 1;
  inline ::google::protobuf::int32 groupid() const;
  inline void set_groupid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GroupMessage.ClickPlayerHead)
 private:
  inline void set_has_groupid();
  inline void clear_has_groupid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 groupid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_AssignDesc_Group_2fGroupMessage_2eproto();
  friend void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto();

  void InitAsDefaultInstance();
  static ClickPlayerHead* default_instance_;
};
// ===================================================================


// ===================================================================

// RetInviteReply

// required int32 ret = 1;
inline bool RetInviteReply::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetInviteReply::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetInviteReply::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetInviteReply::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RetInviteReply::ret() const {
  return ret_;
}
inline void RetInviteReply::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int64 dwTeamID = 2;
inline bool RetInviteReply::has_dwteamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetInviteReply::set_has_dwteamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetInviteReply::clear_has_dwteamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetInviteReply::clear_dwteamid() {
  dwteamid_ = GOOGLE_LONGLONG(0);
  clear_has_dwteamid();
}
inline ::google::protobuf::int64 RetInviteReply::dwteamid() const {
  return dwteamid_;
}
inline void RetInviteReply::set_dwteamid(::google::protobuf::int64 value) {
  set_has_dwteamid();
  dwteamid_ = value;
}

// repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 3;
inline int RetInviteReply::playerinfo_size() const {
  return playerinfo_.size();
}
inline void RetInviteReply::clear_playerinfo() {
  playerinfo_.Clear();
}
inline const ::GroupMessage::RetPlayerStateToTeam& RetInviteReply::playerinfo(int index) const {
  return playerinfo_.Get(index);
}
inline ::GroupMessage::RetPlayerStateToTeam* RetInviteReply::mutable_playerinfo(int index) {
  return playerinfo_.Mutable(index);
}
inline ::GroupMessage::RetPlayerStateToTeam* RetInviteReply::add_playerinfo() {
  return playerinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GroupMessage::RetPlayerStateToTeam >&
RetInviteReply::playerinfo() const {
  return playerinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GroupMessage::RetPlayerStateToTeam >*
RetInviteReply::mutable_playerinfo() {
  return &playerinfo_;
}

// -------------------------------------------------------------------

// RetPlayerStateToTeam

// required int64 dwPlayerID = 1;
inline bool RetPlayerStateToTeam::has_dwplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetPlayerStateToTeam::set_has_dwplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetPlayerStateToTeam::clear_has_dwplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetPlayerStateToTeam::clear_dwplayerid() {
  dwplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_dwplayerid();
}
inline ::google::protobuf::int64 RetPlayerStateToTeam::dwplayerid() const {
  return dwplayerid_;
}
inline void RetPlayerStateToTeam::set_dwplayerid(::google::protobuf::int64 value) {
  set_has_dwplayerid();
  dwplayerid_ = value;
}

// required int32 dwOutOfRange = 2;
inline bool RetPlayerStateToTeam::has_dwoutofrange() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetPlayerStateToTeam::set_has_dwoutofrange() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetPlayerStateToTeam::clear_has_dwoutofrange() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetPlayerStateToTeam::clear_dwoutofrange() {
  dwoutofrange_ = 0;
  clear_has_dwoutofrange();
}
inline ::google::protobuf::int32 RetPlayerStateToTeam::dwoutofrange() const {
  return dwoutofrange_;
}
inline void RetPlayerStateToTeam::set_dwoutofrange(::google::protobuf::int32 value) {
  set_has_dwoutofrange();
  dwoutofrange_ = value;
}

// required int32 dwHorseID = 3;
inline bool RetPlayerStateToTeam::has_dwhorseid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RetPlayerStateToTeam::set_has_dwhorseid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RetPlayerStateToTeam::clear_has_dwhorseid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RetPlayerStateToTeam::clear_dwhorseid() {
  dwhorseid_ = 0;
  clear_has_dwhorseid();
}
inline ::google::protobuf::int32 RetPlayerStateToTeam::dwhorseid() const {
  return dwhorseid_;
}
inline void RetPlayerStateToTeam::set_dwhorseid(::google::protobuf::int32 value) {
  set_has_dwhorseid();
  dwhorseid_ = value;
}

// required int32 dwEquipID = 4;
inline bool RetPlayerStateToTeam::has_dwequipid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RetPlayerStateToTeam::set_has_dwequipid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RetPlayerStateToTeam::clear_has_dwequipid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RetPlayerStateToTeam::clear_dwequipid() {
  dwequipid_ = 0;
  clear_has_dwequipid();
}
inline ::google::protobuf::int32 RetPlayerStateToTeam::dwequipid() const {
  return dwequipid_;
}
inline void RetPlayerStateToTeam::set_dwequipid(::google::protobuf::int32 value) {
  set_has_dwequipid();
  dwequipid_ = value;
}

// required int32 eClassEx = 5;
inline bool RetPlayerStateToTeam::has_eclassex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RetPlayerStateToTeam::set_has_eclassex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RetPlayerStateToTeam::clear_has_eclassex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RetPlayerStateToTeam::clear_eclassex() {
  eclassex_ = 0;
  clear_has_eclassex();
}
inline ::google::protobuf::int32 RetPlayerStateToTeam::eclassex() const {
  return eclassex_;
}
inline void RetPlayerStateToTeam::set_eclassex(::google::protobuf::int32 value) {
  set_has_eclassex();
  eclassex_ = value;
}

// required int32 bySex = 6;
inline bool RetPlayerStateToTeam::has_bysex() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RetPlayerStateToTeam::set_has_bysex() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RetPlayerStateToTeam::clear_has_bysex() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RetPlayerStateToTeam::clear_bysex() {
  bysex_ = 0;
  clear_has_bysex();
}
inline ::google::protobuf::int32 RetPlayerStateToTeam::bysex() const {
  return bysex_;
}
inline void RetPlayerStateToTeam::set_bysex(::google::protobuf::int32 value) {
  set_has_bysex();
  bysex_ = value;
}

// required int32 nLevel = 7;
inline bool RetPlayerStateToTeam::has_nlevel() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void RetPlayerStateToTeam::set_has_nlevel() {
  _has_bits_[0] |= 0x00000040u;
}
inline void RetPlayerStateToTeam::clear_has_nlevel() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void RetPlayerStateToTeam::clear_nlevel() {
  nlevel_ = 0;
  clear_has_nlevel();
}
inline ::google::protobuf::int32 RetPlayerStateToTeam::nlevel() const {
  return nlevel_;
}
inline void RetPlayerStateToTeam::set_nlevel(::google::protobuf::int32 value) {
  set_has_nlevel();
  nlevel_ = value;
}

// required int32 isCaptain = 8;
inline bool RetPlayerStateToTeam::has_iscaptain() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void RetPlayerStateToTeam::set_has_iscaptain() {
  _has_bits_[0] |= 0x00000080u;
}
inline void RetPlayerStateToTeam::clear_has_iscaptain() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void RetPlayerStateToTeam::clear_iscaptain() {
  iscaptain_ = 0;
  clear_has_iscaptain();
}
inline ::google::protobuf::int32 RetPlayerStateToTeam::iscaptain() const {
  return iscaptain_;
}
inline void RetPlayerStateToTeam::set_iscaptain(::google::protobuf::int32 value) {
  set_has_iscaptain();
  iscaptain_ = value;
}

// required string sPlayerName = 9;
inline bool RetPlayerStateToTeam::has_splayername() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void RetPlayerStateToTeam::set_has_splayername() {
  _has_bits_[0] |= 0x00000100u;
}
inline void RetPlayerStateToTeam::clear_has_splayername() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void RetPlayerStateToTeam::clear_splayername() {
  if (splayername_ != &::google::protobuf::internal::kEmptyString) {
    splayername_->clear();
  }
  clear_has_splayername();
}
inline const ::std::string& RetPlayerStateToTeam::splayername() const {
  return *splayername_;
}
inline void RetPlayerStateToTeam::set_splayername(const ::std::string& value) {
  set_has_splayername();
  if (splayername_ == &::google::protobuf::internal::kEmptyString) {
    splayername_ = new ::std::string;
  }
  splayername_->assign(value);
}
inline void RetPlayerStateToTeam::set_splayername(const char* value) {
  set_has_splayername();
  if (splayername_ == &::google::protobuf::internal::kEmptyString) {
    splayername_ = new ::std::string;
  }
  splayername_->assign(value);
}
inline void RetPlayerStateToTeam::set_splayername(const char* value, size_t size) {
  set_has_splayername();
  if (splayername_ == &::google::protobuf::internal::kEmptyString) {
    splayername_ = new ::std::string;
  }
  splayername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RetPlayerStateToTeam::mutable_splayername() {
  set_has_splayername();
  if (splayername_ == &::google::protobuf::internal::kEmptyString) {
    splayername_ = new ::std::string;
  }
  return splayername_;
}
inline ::std::string* RetPlayerStateToTeam::release_splayername() {
  clear_has_splayername();
  if (splayername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = splayername_;
    splayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RetPlayerStateToTeam::set_allocated_splayername(::std::string* splayername) {
  if (splayername_ != &::google::protobuf::internal::kEmptyString) {
    delete splayername_;
  }
  if (splayername) {
    set_has_splayername();
    splayername_ = splayername;
  } else {
    clear_has_splayername();
    splayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 dwPlayerPower = 10;
inline bool RetPlayerStateToTeam::has_dwplayerpower() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void RetPlayerStateToTeam::set_has_dwplayerpower() {
  _has_bits_[0] |= 0x00000200u;
}
inline void RetPlayerStateToTeam::clear_has_dwplayerpower() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void RetPlayerStateToTeam::clear_dwplayerpower() {
  dwplayerpower_ = 0;
  clear_has_dwplayerpower();
}
inline ::google::protobuf::int32 RetPlayerStateToTeam::dwplayerpower() const {
  return dwplayerpower_;
}
inline void RetPlayerStateToTeam::set_dwplayerpower(::google::protobuf::int32 value) {
  set_has_dwplayerpower();
  dwplayerpower_ = value;
}

// required int32 costume = 11;
inline bool RetPlayerStateToTeam::has_costume() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void RetPlayerStateToTeam::set_has_costume() {
  _has_bits_[0] |= 0x00000400u;
}
inline void RetPlayerStateToTeam::clear_has_costume() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void RetPlayerStateToTeam::clear_costume() {
  costume_ = 0;
  clear_has_costume();
}
inline ::google::protobuf::int32 RetPlayerStateToTeam::costume() const {
  return costume_;
}
inline void RetPlayerStateToTeam::set_costume(::google::protobuf::int32 value) {
  set_has_costume();
  costume_ = value;
}

// required int32 mapid = 12;
inline bool RetPlayerStateToTeam::has_mapid() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void RetPlayerStateToTeam::set_has_mapid() {
  _has_bits_[0] |= 0x00000800u;
}
inline void RetPlayerStateToTeam::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void RetPlayerStateToTeam::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 RetPlayerStateToTeam::mapid() const {
  return mapid_;
}
inline void RetPlayerStateToTeam::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional int32 fashionID = 13;
inline bool RetPlayerStateToTeam::has_fashionid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void RetPlayerStateToTeam::set_has_fashionid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void RetPlayerStateToTeam::clear_has_fashionid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void RetPlayerStateToTeam::clear_fashionid() {
  fashionid_ = 0;
  clear_has_fashionid();
}
inline ::google::protobuf::int32 RetPlayerStateToTeam::fashionid() const {
  return fashionid_;
}
inline void RetPlayerStateToTeam::set_fashionid(::google::protobuf::int32 value) {
  set_has_fashionid();
  fashionid_ = value;
}

// optional int32 viplv = 14;
inline bool RetPlayerStateToTeam::has_viplv() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void RetPlayerStateToTeam::set_has_viplv() {
  _has_bits_[0] |= 0x00002000u;
}
inline void RetPlayerStateToTeam::clear_has_viplv() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void RetPlayerStateToTeam::clear_viplv() {
  viplv_ = 0;
  clear_has_viplv();
}
inline ::google::protobuf::int32 RetPlayerStateToTeam::viplv() const {
  return viplv_;
}
inline void RetPlayerStateToTeam::set_viplv(::google::protobuf::int32 value) {
  set_has_viplv();
  viplv_ = value;
}

// -------------------------------------------------------------------

// RetGetTeamID

// required int32 ret = 1;
inline bool RetGetTeamID::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetGetTeamID::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetGetTeamID::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetGetTeamID::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RetGetTeamID::ret() const {
  return ret_;
}
inline void RetGetTeamID::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .GroupMessage.TeamInfo teamInfo = 2;
inline int RetGetTeamID::teaminfo_size() const {
  return teaminfo_.size();
}
inline void RetGetTeamID::clear_teaminfo() {
  teaminfo_.Clear();
}
inline const ::GroupMessage::TeamInfo& RetGetTeamID::teaminfo(int index) const {
  return teaminfo_.Get(index);
}
inline ::GroupMessage::TeamInfo* RetGetTeamID::mutable_teaminfo(int index) {
  return teaminfo_.Mutable(index);
}
inline ::GroupMessage::TeamInfo* RetGetTeamID::add_teaminfo() {
  return teaminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GroupMessage::TeamInfo >&
RetGetTeamID::teaminfo() const {
  return teaminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GroupMessage::TeamInfo >*
RetGetTeamID::mutable_teaminfo() {
  return &teaminfo_;
}

// -------------------------------------------------------------------

// TeamInfo

// required int64 dwTeamID = 1;
inline bool TeamInfo::has_dwteamid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void TeamInfo::set_has_dwteamid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void TeamInfo::clear_has_dwteamid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void TeamInfo::clear_dwteamid() {
  dwteamid_ = GOOGLE_LONGLONG(0);
  clear_has_dwteamid();
}
inline ::google::protobuf::int64 TeamInfo::dwteamid() const {
  return dwteamid_;
}
inline void TeamInfo::set_dwteamid(::google::protobuf::int64 value) {
  set_has_dwteamid();
  dwteamid_ = value;
}

// optional string sLeaderName = 2;
inline bool TeamInfo::has_sleadername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void TeamInfo::set_has_sleadername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void TeamInfo::clear_has_sleadername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void TeamInfo::clear_sleadername() {
  if (sleadername_ != &::google::protobuf::internal::kEmptyString) {
    sleadername_->clear();
  }
  clear_has_sleadername();
}
inline const ::std::string& TeamInfo::sleadername() const {
  return *sleadername_;
}
inline void TeamInfo::set_sleadername(const ::std::string& value) {
  set_has_sleadername();
  if (sleadername_ == &::google::protobuf::internal::kEmptyString) {
    sleadername_ = new ::std::string;
  }
  sleadername_->assign(value);
}
inline void TeamInfo::set_sleadername(const char* value) {
  set_has_sleadername();
  if (sleadername_ == &::google::protobuf::internal::kEmptyString) {
    sleadername_ = new ::std::string;
  }
  sleadername_->assign(value);
}
inline void TeamInfo::set_sleadername(const char* value, size_t size) {
  set_has_sleadername();
  if (sleadername_ == &::google::protobuf::internal::kEmptyString) {
    sleadername_ = new ::std::string;
  }
  sleadername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* TeamInfo::mutable_sleadername() {
  set_has_sleadername();
  if (sleadername_ == &::google::protobuf::internal::kEmptyString) {
    sleadername_ = new ::std::string;
  }
  return sleadername_;
}
inline ::std::string* TeamInfo::release_sleadername() {
  clear_has_sleadername();
  if (sleadername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sleadername_;
    sleadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void TeamInfo::set_allocated_sleadername(::std::string* sleadername) {
  if (sleadername_ != &::google::protobuf::internal::kEmptyString) {
    delete sleadername_;
  }
  if (sleadername) {
    set_has_sleadername();
    sleadername_ = sleadername;
  } else {
    clear_has_sleadername();
    sleadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 dwTeamLevel = 3;
inline bool TeamInfo::has_dwteamlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void TeamInfo::set_has_dwteamlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void TeamInfo::clear_has_dwteamlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void TeamInfo::clear_dwteamlevel() {
  dwteamlevel_ = 0;
  clear_has_dwteamlevel();
}
inline ::google::protobuf::int32 TeamInfo::dwteamlevel() const {
  return dwteamlevel_;
}
inline void TeamInfo::set_dwteamlevel(::google::protobuf::int32 value) {
  set_has_dwteamlevel();
  dwteamlevel_ = value;
}

// optional int32 dwTeamPower = 4;
inline bool TeamInfo::has_dwteampower() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void TeamInfo::set_has_dwteampower() {
  _has_bits_[0] |= 0x00000008u;
}
inline void TeamInfo::clear_has_dwteampower() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void TeamInfo::clear_dwteampower() {
  dwteampower_ = 0;
  clear_has_dwteampower();
}
inline ::google::protobuf::int32 TeamInfo::dwteampower() const {
  return dwteampower_;
}
inline void TeamInfo::set_dwteampower(::google::protobuf::int32 value) {
  set_has_dwteampower();
  dwteampower_ = value;
}

// optional int32 dwTeamMembers = 5;
inline bool TeamInfo::has_dwteammembers() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void TeamInfo::set_has_dwteammembers() {
  _has_bits_[0] |= 0x00000010u;
}
inline void TeamInfo::clear_has_dwteammembers() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void TeamInfo::clear_dwteammembers() {
  dwteammembers_ = 0;
  clear_has_dwteammembers();
}
inline ::google::protobuf::int32 TeamInfo::dwteammembers() const {
  return dwteammembers_;
}
inline void TeamInfo::set_dwteammembers(::google::protobuf::int32 value) {
  set_has_dwteammembers();
  dwteammembers_ = value;
}

// repeated .GroupMessage.MemberInfo groupMember = 6;
inline int TeamInfo::groupmember_size() const {
  return groupmember_.size();
}
inline void TeamInfo::clear_groupmember() {
  groupmember_.Clear();
}
inline const ::GroupMessage::MemberInfo& TeamInfo::groupmember(int index) const {
  return groupmember_.Get(index);
}
inline ::GroupMessage::MemberInfo* TeamInfo::mutable_groupmember(int index) {
  return groupmember_.Mutable(index);
}
inline ::GroupMessage::MemberInfo* TeamInfo::add_groupmember() {
  return groupmember_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GroupMessage::MemberInfo >&
TeamInfo::groupmember() const {
  return groupmember_;
}
inline ::google::protobuf::RepeatedPtrField< ::GroupMessage::MemberInfo >*
TeamInfo::mutable_groupmember() {
  return &groupmember_;
}

// -------------------------------------------------------------------

// RetGetTeamMemberInfo

// required int32 ret = 1;
inline bool RetGetTeamMemberInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetGetTeamMemberInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetGetTeamMemberInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetGetTeamMemberInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RetGetTeamMemberInfo::ret() const {
  return ret_;
}
inline void RetGetTeamMemberInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .GroupMessage.MemberInfo teamInfo = 2;
inline int RetGetTeamMemberInfo::teaminfo_size() const {
  return teaminfo_.size();
}
inline void RetGetTeamMemberInfo::clear_teaminfo() {
  teaminfo_.Clear();
}
inline const ::GroupMessage::MemberInfo& RetGetTeamMemberInfo::teaminfo(int index) const {
  return teaminfo_.Get(index);
}
inline ::GroupMessage::MemberInfo* RetGetTeamMemberInfo::mutable_teaminfo(int index) {
  return teaminfo_.Mutable(index);
}
inline ::GroupMessage::MemberInfo* RetGetTeamMemberInfo::add_teaminfo() {
  return teaminfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GroupMessage::MemberInfo >&
RetGetTeamMemberInfo::teaminfo() const {
  return teaminfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GroupMessage::MemberInfo >*
RetGetTeamMemberInfo::mutable_teaminfo() {
  return &teaminfo_;
}

// -------------------------------------------------------------------

// MemberInfo

// required int64 charID = 1;
inline bool MemberInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MemberInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MemberInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MemberInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 MemberInfo::charid() const {
  return charid_;
}
inline void MemberInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required string name = 2;
inline bool MemberInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MemberInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MemberInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MemberInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MemberInfo::name() const {
  return *name_;
}
inline void MemberInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MemberInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MemberInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MemberInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MemberInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MemberInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 fight = 3;
inline bool MemberInfo::has_fight() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MemberInfo::set_has_fight() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MemberInfo::clear_has_fight() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MemberInfo::clear_fight() {
  fight_ = 0;
  clear_has_fight();
}
inline ::google::protobuf::int32 MemberInfo::fight() const {
  return fight_;
}
inline void MemberInfo::set_fight(::google::protobuf::int32 value) {
  set_has_fight();
  fight_ = value;
}

// required int32 profession = 4;
inline bool MemberInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MemberInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MemberInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MemberInfo::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 MemberInfo::profession() const {
  return profession_;
}
inline void MemberInfo::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// required int32 lv = 5;
inline bool MemberInfo::has_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MemberInfo::set_has_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MemberInfo::clear_has_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MemberInfo::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 MemberInfo::lv() const {
  return lv_;
}
inline void MemberInfo::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// required int32 viplv = 6;
inline bool MemberInfo::has_viplv() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MemberInfo::set_has_viplv() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MemberInfo::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MemberInfo::clear_viplv() {
  viplv_ = 0;
  clear_has_viplv();
}
inline ::google::protobuf::int32 MemberInfo::viplv() const {
  return viplv_;
}
inline void MemberInfo::set_viplv(::google::protobuf::int32 value) {
  set_has_viplv();
  viplv_ = value;
}

// -------------------------------------------------------------------

// RetGetNearbyPlayerInfo

// required int32 ret = 1;
inline bool RetGetNearbyPlayerInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetGetNearbyPlayerInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetGetNearbyPlayerInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetGetNearbyPlayerInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RetGetNearbyPlayerInfo::ret() const {
  return ret_;
}
inline void RetGetNearbyPlayerInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .GroupMessage.NearbyPlayerInfo playerInfos = 2;
inline int RetGetNearbyPlayerInfo::playerinfos_size() const {
  return playerinfos_.size();
}
inline void RetGetNearbyPlayerInfo::clear_playerinfos() {
  playerinfos_.Clear();
}
inline const ::GroupMessage::NearbyPlayerInfo& RetGetNearbyPlayerInfo::playerinfos(int index) const {
  return playerinfos_.Get(index);
}
inline ::GroupMessage::NearbyPlayerInfo* RetGetNearbyPlayerInfo::mutable_playerinfos(int index) {
  return playerinfos_.Mutable(index);
}
inline ::GroupMessage::NearbyPlayerInfo* RetGetNearbyPlayerInfo::add_playerinfos() {
  return playerinfos_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GroupMessage::NearbyPlayerInfo >&
RetGetNearbyPlayerInfo::playerinfos() const {
  return playerinfos_;
}
inline ::google::protobuf::RepeatedPtrField< ::GroupMessage::NearbyPlayerInfo >*
RetGetNearbyPlayerInfo::mutable_playerinfos() {
  return &playerinfos_;
}

// -------------------------------------------------------------------

// NearbyPlayerInfo

// required int64 dwPlayerID = 1;
inline bool NearbyPlayerInfo::has_dwplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NearbyPlayerInfo::set_has_dwplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NearbyPlayerInfo::clear_has_dwplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NearbyPlayerInfo::clear_dwplayerid() {
  dwplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_dwplayerid();
}
inline ::google::protobuf::int64 NearbyPlayerInfo::dwplayerid() const {
  return dwplayerid_;
}
inline void NearbyPlayerInfo::set_dwplayerid(::google::protobuf::int64 value) {
  set_has_dwplayerid();
  dwplayerid_ = value;
}

// required string sPlayerName = 2;
inline bool NearbyPlayerInfo::has_splayername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NearbyPlayerInfo::set_has_splayername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NearbyPlayerInfo::clear_has_splayername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NearbyPlayerInfo::clear_splayername() {
  if (splayername_ != &::google::protobuf::internal::kEmptyString) {
    splayername_->clear();
  }
  clear_has_splayername();
}
inline const ::std::string& NearbyPlayerInfo::splayername() const {
  return *splayername_;
}
inline void NearbyPlayerInfo::set_splayername(const ::std::string& value) {
  set_has_splayername();
  if (splayername_ == &::google::protobuf::internal::kEmptyString) {
    splayername_ = new ::std::string;
  }
  splayername_->assign(value);
}
inline void NearbyPlayerInfo::set_splayername(const char* value) {
  set_has_splayername();
  if (splayername_ == &::google::protobuf::internal::kEmptyString) {
    splayername_ = new ::std::string;
  }
  splayername_->assign(value);
}
inline void NearbyPlayerInfo::set_splayername(const char* value, size_t size) {
  set_has_splayername();
  if (splayername_ == &::google::protobuf::internal::kEmptyString) {
    splayername_ = new ::std::string;
  }
  splayername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NearbyPlayerInfo::mutable_splayername() {
  set_has_splayername();
  if (splayername_ == &::google::protobuf::internal::kEmptyString) {
    splayername_ = new ::std::string;
  }
  return splayername_;
}
inline ::std::string* NearbyPlayerInfo::release_splayername() {
  clear_has_splayername();
  if (splayername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = splayername_;
    splayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NearbyPlayerInfo::set_allocated_splayername(::std::string* splayername) {
  if (splayername_ != &::google::protobuf::internal::kEmptyString) {
    delete splayername_;
  }
  if (splayername) {
    set_has_splayername();
    splayername_ = splayername;
  } else {
    clear_has_splayername();
    splayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 nLevel = 3;
inline bool NearbyPlayerInfo::has_nlevel() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void NearbyPlayerInfo::set_has_nlevel() {
  _has_bits_[0] |= 0x00000004u;
}
inline void NearbyPlayerInfo::clear_has_nlevel() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void NearbyPlayerInfo::clear_nlevel() {
  nlevel_ = 0;
  clear_has_nlevel();
}
inline ::google::protobuf::int32 NearbyPlayerInfo::nlevel() const {
  return nlevel_;
}
inline void NearbyPlayerInfo::set_nlevel(::google::protobuf::int32 value) {
  set_has_nlevel();
  nlevel_ = value;
}

// required int32 eClassEx = 4;
inline bool NearbyPlayerInfo::has_eclassex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void NearbyPlayerInfo::set_has_eclassex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void NearbyPlayerInfo::clear_has_eclassex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void NearbyPlayerInfo::clear_eclassex() {
  eclassex_ = 0;
  clear_has_eclassex();
}
inline ::google::protobuf::int32 NearbyPlayerInfo::eclassex() const {
  return eclassex_;
}
inline void NearbyPlayerInfo::set_eclassex(::google::protobuf::int32 value) {
  set_has_eclassex();
  eclassex_ = value;
}

// required int32 powerNum = 5;
inline bool NearbyPlayerInfo::has_powernum() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void NearbyPlayerInfo::set_has_powernum() {
  _has_bits_[0] |= 0x00000010u;
}
inline void NearbyPlayerInfo::clear_has_powernum() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void NearbyPlayerInfo::clear_powernum() {
  powernum_ = 0;
  clear_has_powernum();
}
inline ::google::protobuf::int32 NearbyPlayerInfo::powernum() const {
  return powernum_;
}
inline void NearbyPlayerInfo::set_powernum(::google::protobuf::int32 value) {
  set_has_powernum();
  powernum_ = value;
}

// required int32 bHasTeam = 6;
inline bool NearbyPlayerInfo::has_bhasteam() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void NearbyPlayerInfo::set_has_bhasteam() {
  _has_bits_[0] |= 0x00000020u;
}
inline void NearbyPlayerInfo::clear_has_bhasteam() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void NearbyPlayerInfo::clear_bhasteam() {
  bhasteam_ = 0;
  clear_has_bhasteam();
}
inline ::google::protobuf::int32 NearbyPlayerInfo::bhasteam() const {
  return bhasteam_;
}
inline void NearbyPlayerInfo::set_bhasteam(::google::protobuf::int32 value) {
  set_has_bhasteam();
  bhasteam_ = value;
}

// required int32 viplv = 7;
inline bool NearbyPlayerInfo::has_viplv() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void NearbyPlayerInfo::set_has_viplv() {
  _has_bits_[0] |= 0x00000040u;
}
inline void NearbyPlayerInfo::clear_has_viplv() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void NearbyPlayerInfo::clear_viplv() {
  viplv_ = 0;
  clear_has_viplv();
}
inline ::google::protobuf::int32 NearbyPlayerInfo::viplv() const {
  return viplv_;
}
inline void NearbyPlayerInfo::set_viplv(::google::protobuf::int32 value) {
  set_has_viplv();
  viplv_ = value;
}

// -------------------------------------------------------------------

// RetLookforTeamInfo

// required int32 ret = 1;
inline bool RetLookforTeamInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetLookforTeamInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetLookforTeamInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetLookforTeamInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RetLookforTeamInfo::ret() const {
  return ret_;
}
inline void RetLookforTeamInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 2;
inline int RetLookforTeamInfo::playerinfo_size() const {
  return playerinfo_.size();
}
inline void RetLookforTeamInfo::clear_playerinfo() {
  playerinfo_.Clear();
}
inline const ::GroupMessage::RetPlayerStateToTeam& RetLookforTeamInfo::playerinfo(int index) const {
  return playerinfo_.Get(index);
}
inline ::GroupMessage::RetPlayerStateToTeam* RetLookforTeamInfo::mutable_playerinfo(int index) {
  return playerinfo_.Mutable(index);
}
inline ::GroupMessage::RetPlayerStateToTeam* RetLookforTeamInfo::add_playerinfo() {
  return playerinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GroupMessage::RetPlayerStateToTeam >&
RetLookforTeamInfo::playerinfo() const {
  return playerinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GroupMessage::RetPlayerStateToTeam >*
RetLookforTeamInfo::mutable_playerinfo() {
  return &playerinfo_;
}

// -------------------------------------------------------------------

// ToClientSysMemberMap

// required int32 ret = 1;
inline bool ToClientSysMemberMap::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToClientSysMemberMap::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToClientSysMemberMap::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToClientSysMemberMap::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 ToClientSysMemberMap::ret() const {
  return ret_;
}
inline void ToClientSysMemberMap::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated int32 mapid = 2;
inline int ToClientSysMemberMap::mapid_size() const {
  return mapid_.size();
}
inline void ToClientSysMemberMap::clear_mapid() {
  mapid_.Clear();
}
inline ::google::protobuf::int32 ToClientSysMemberMap::mapid(int index) const {
  return mapid_.Get(index);
}
inline void ToClientSysMemberMap::set_mapid(int index, ::google::protobuf::int32 value) {
  mapid_.Set(index, value);
}
inline void ToClientSysMemberMap::add_mapid(::google::protobuf::int32 value) {
  mapid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ToClientSysMemberMap::mapid() const {
  return mapid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ToClientSysMemberMap::mutable_mapid() {
  return &mapid_;
}

// repeated int64 charid = 3;
inline int ToClientSysMemberMap::charid_size() const {
  return charid_.size();
}
inline void ToClientSysMemberMap::clear_charid() {
  charid_.Clear();
}
inline ::google::protobuf::int64 ToClientSysMemberMap::charid(int index) const {
  return charid_.Get(index);
}
inline void ToClientSysMemberMap::set_charid(int index, ::google::protobuf::int64 value) {
  charid_.Set(index, value);
}
inline void ToClientSysMemberMap::add_charid(::google::protobuf::int64 value) {
  charid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ToClientSysMemberMap::charid() const {
  return charid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ToClientSysMemberMap::mutable_charid() {
  return &charid_;
}

// -------------------------------------------------------------------

// RetChangeLeader

// required int64 dwLeaderID = 1;
inline bool RetChangeLeader::has_dwleaderid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetChangeLeader::set_has_dwleaderid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetChangeLeader::clear_has_dwleaderid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetChangeLeader::clear_dwleaderid() {
  dwleaderid_ = GOOGLE_LONGLONG(0);
  clear_has_dwleaderid();
}
inline ::google::protobuf::int64 RetChangeLeader::dwleaderid() const {
  return dwleaderid_;
}
inline void RetChangeLeader::set_dwleaderid(::google::protobuf::int64 value) {
  set_has_dwleaderid();
  dwleaderid_ = value;
}

// required int64 dwNewLeaderID = 2;
inline bool RetChangeLeader::has_dwnewleaderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetChangeLeader::set_has_dwnewleaderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetChangeLeader::clear_has_dwnewleaderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetChangeLeader::clear_dwnewleaderid() {
  dwnewleaderid_ = GOOGLE_LONGLONG(0);
  clear_has_dwnewleaderid();
}
inline ::google::protobuf::int64 RetChangeLeader::dwnewleaderid() const {
  return dwnewleaderid_;
}
inline void RetChangeLeader::set_dwnewleaderid(::google::protobuf::int64 value) {
  set_has_dwnewleaderid();
  dwnewleaderid_ = value;
}

// -------------------------------------------------------------------

// RetInviteToMember

// required int64 dwTeamMemID = 1;
inline bool RetInviteToMember::has_dwteammemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetInviteToMember::set_has_dwteammemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetInviteToMember::clear_has_dwteammemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetInviteToMember::clear_dwteammemid() {
  dwteammemid_ = GOOGLE_LONGLONG(0);
  clear_has_dwteammemid();
}
inline ::google::protobuf::int64 RetInviteToMember::dwteammemid() const {
  return dwteammemid_;
}
inline void RetInviteToMember::set_dwteammemid(::google::protobuf::int64 value) {
  set_has_dwteammemid();
  dwteammemid_ = value;
}

// required string sLeaderName = 2;
inline bool RetInviteToMember::has_sleadername() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetInviteToMember::set_has_sleadername() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetInviteToMember::clear_has_sleadername() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetInviteToMember::clear_sleadername() {
  if (sleadername_ != &::google::protobuf::internal::kEmptyString) {
    sleadername_->clear();
  }
  clear_has_sleadername();
}
inline const ::std::string& RetInviteToMember::sleadername() const {
  return *sleadername_;
}
inline void RetInviteToMember::set_sleadername(const ::std::string& value) {
  set_has_sleadername();
  if (sleadername_ == &::google::protobuf::internal::kEmptyString) {
    sleadername_ = new ::std::string;
  }
  sleadername_->assign(value);
}
inline void RetInviteToMember::set_sleadername(const char* value) {
  set_has_sleadername();
  if (sleadername_ == &::google::protobuf::internal::kEmptyString) {
    sleadername_ = new ::std::string;
  }
  sleadername_->assign(value);
}
inline void RetInviteToMember::set_sleadername(const char* value, size_t size) {
  set_has_sleadername();
  if (sleadername_ == &::google::protobuf::internal::kEmptyString) {
    sleadername_ = new ::std::string;
  }
  sleadername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RetInviteToMember::mutable_sleadername() {
  set_has_sleadername();
  if (sleadername_ == &::google::protobuf::internal::kEmptyString) {
    sleadername_ = new ::std::string;
  }
  return sleadername_;
}
inline ::std::string* RetInviteToMember::release_sleadername() {
  clear_has_sleadername();
  if (sleadername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sleadername_;
    sleadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RetInviteToMember::set_allocated_sleadername(::std::string* sleadername) {
  if (sleadername_ != &::google::protobuf::internal::kEmptyString) {
    delete sleadername_;
  }
  if (sleadername) {
    set_has_sleadername();
    sleadername_ = sleadername;
  } else {
    clear_has_sleadername();
    sleadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RetKickMember

// required int64 dwDestPlayerID = 1;
inline bool RetKickMember::has_dwdestplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetKickMember::set_has_dwdestplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetKickMember::clear_has_dwdestplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetKickMember::clear_dwdestplayerid() {
  dwdestplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_dwdestplayerid();
}
inline ::google::protobuf::int64 RetKickMember::dwdestplayerid() const {
  return dwdestplayerid_;
}
inline void RetKickMember::set_dwdestplayerid(::google::protobuf::int64 value) {
  set_has_dwdestplayerid();
  dwdestplayerid_ = value;
}

// -------------------------------------------------------------------

// RetLeaveTeam

// required int64 dwPlayerID = 1;
inline bool RetLeaveTeam::has_dwplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetLeaveTeam::set_has_dwplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetLeaveTeam::clear_has_dwplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetLeaveTeam::clear_dwplayerid() {
  dwplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_dwplayerid();
}
inline ::google::protobuf::int64 RetLeaveTeam::dwplayerid() const {
  return dwplayerid_;
}
inline void RetLeaveTeam::set_dwplayerid(::google::protobuf::int64 value) {
  set_has_dwplayerid();
  dwplayerid_ = value;
}

// optional int64 dwLeaderID = 2;
inline bool RetLeaveTeam::has_dwleaderid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetLeaveTeam::set_has_dwleaderid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetLeaveTeam::clear_has_dwleaderid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetLeaveTeam::clear_dwleaderid() {
  dwleaderid_ = GOOGLE_LONGLONG(0);
  clear_has_dwleaderid();
}
inline ::google::protobuf::int64 RetLeaveTeam::dwleaderid() const {
  return dwleaderid_;
}
inline void RetLeaveTeam::set_dwleaderid(::google::protobuf::int64 value) {
  set_has_dwleaderid();
  dwleaderid_ = value;
}

// -------------------------------------------------------------------

// ToLeaderAcquire

// required int64 dstPlayerID = 1;
inline bool ToLeaderAcquire::has_dstplayerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToLeaderAcquire::set_has_dstplayerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToLeaderAcquire::clear_has_dstplayerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToLeaderAcquire::clear_dstplayerid() {
  dstplayerid_ = GOOGLE_LONGLONG(0);
  clear_has_dstplayerid();
}
inline ::google::protobuf::int64 ToLeaderAcquire::dstplayerid() const {
  return dstplayerid_;
}
inline void ToLeaderAcquire::set_dstplayerid(::google::protobuf::int64 value) {
  set_has_dstplayerid();
  dstplayerid_ = value;
}

// required string acquireName = 2;
inline bool ToLeaderAcquire::has_acquirename() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToLeaderAcquire::set_has_acquirename() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToLeaderAcquire::clear_has_acquirename() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToLeaderAcquire::clear_acquirename() {
  if (acquirename_ != &::google::protobuf::internal::kEmptyString) {
    acquirename_->clear();
  }
  clear_has_acquirename();
}
inline const ::std::string& ToLeaderAcquire::acquirename() const {
  return *acquirename_;
}
inline void ToLeaderAcquire::set_acquirename(const ::std::string& value) {
  set_has_acquirename();
  if (acquirename_ == &::google::protobuf::internal::kEmptyString) {
    acquirename_ = new ::std::string;
  }
  acquirename_->assign(value);
}
inline void ToLeaderAcquire::set_acquirename(const char* value) {
  set_has_acquirename();
  if (acquirename_ == &::google::protobuf::internal::kEmptyString) {
    acquirename_ = new ::std::string;
  }
  acquirename_->assign(value);
}
inline void ToLeaderAcquire::set_acquirename(const char* value, size_t size) {
  set_has_acquirename();
  if (acquirename_ == &::google::protobuf::internal::kEmptyString) {
    acquirename_ = new ::std::string;
  }
  acquirename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToLeaderAcquire::mutable_acquirename() {
  set_has_acquirename();
  if (acquirename_ == &::google::protobuf::internal::kEmptyString) {
    acquirename_ = new ::std::string;
  }
  return acquirename_;
}
inline ::std::string* ToLeaderAcquire::release_acquirename() {
  clear_has_acquirename();
  if (acquirename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = acquirename_;
    acquirename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToLeaderAcquire::set_allocated_acquirename(::std::string* acquirename) {
  if (acquirename_ != &::google::protobuf::internal::kEmptyString) {
    delete acquirename_;
  }
  if (acquirename) {
    set_has_acquirename();
    acquirename_ = acquirename;
  } else {
    clear_has_acquirename();
    acquirename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RetAcquireToTeam

// required int32 dwErrorCode = 1;
inline bool RetAcquireToTeam::has_dwerrorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetAcquireToTeam::set_has_dwerrorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetAcquireToTeam::clear_has_dwerrorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetAcquireToTeam::clear_dwerrorcode() {
  dwerrorcode_ = 0;
  clear_has_dwerrorcode();
}
inline ::google::protobuf::int32 RetAcquireToTeam::dwerrorcode() const {
  return dwerrorcode_;
}
inline void RetAcquireToTeam::set_dwerrorcode(::google::protobuf::int32 value) {
  set_has_dwerrorcode();
  dwerrorcode_ = value;
}

// required int32 dwTeamID = 2;
inline bool RetAcquireToTeam::has_dwteamid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetAcquireToTeam::set_has_dwteamid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetAcquireToTeam::clear_has_dwteamid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetAcquireToTeam::clear_dwteamid() {
  dwteamid_ = 0;
  clear_has_dwteamid();
}
inline ::google::protobuf::int32 RetAcquireToTeam::dwteamid() const {
  return dwteamid_;
}
inline void RetAcquireToTeam::set_dwteamid(::google::protobuf::int32 value) {
  set_has_dwteamid();
  dwteamid_ = value;
}

// required int32 teamSign = 3;
inline bool RetAcquireToTeam::has_teamsign() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RetAcquireToTeam::set_has_teamsign() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RetAcquireToTeam::clear_has_teamsign() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RetAcquireToTeam::clear_teamsign() {
  teamsign_ = 0;
  clear_has_teamsign();
}
inline ::google::protobuf::int32 RetAcquireToTeam::teamsign() const {
  return teamsign_;
}
inline void RetAcquireToTeam::set_teamsign(::google::protobuf::int32 value) {
  set_has_teamsign();
  teamsign_ = value;
}

// repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 4;
inline int RetAcquireToTeam::playerinfo_size() const {
  return playerinfo_.size();
}
inline void RetAcquireToTeam::clear_playerinfo() {
  playerinfo_.Clear();
}
inline const ::GroupMessage::RetPlayerStateToTeam& RetAcquireToTeam::playerinfo(int index) const {
  return playerinfo_.Get(index);
}
inline ::GroupMessage::RetPlayerStateToTeam* RetAcquireToTeam::mutable_playerinfo(int index) {
  return playerinfo_.Mutable(index);
}
inline ::GroupMessage::RetPlayerStateToTeam* RetAcquireToTeam::add_playerinfo() {
  return playerinfo_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GroupMessage::RetPlayerStateToTeam >&
RetAcquireToTeam::playerinfo() const {
  return playerinfo_;
}
inline ::google::protobuf::RepeatedPtrField< ::GroupMessage::RetPlayerStateToTeam >*
RetAcquireToTeam::mutable_playerinfo() {
  return &playerinfo_;
}

// -------------------------------------------------------------------

// SimBroadcastInstanceCreate

// required int32 teamSign = 1;
inline bool SimBroadcastInstanceCreate::has_teamsign() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimBroadcastInstanceCreate::set_has_teamsign() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimBroadcastInstanceCreate::clear_has_teamsign() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimBroadcastInstanceCreate::clear_teamsign() {
  teamsign_ = 0;
  clear_has_teamsign();
}
inline ::google::protobuf::int32 SimBroadcastInstanceCreate::teamsign() const {
  return teamsign_;
}
inline void SimBroadcastInstanceCreate::set_teamsign(::google::protobuf::int32 value) {
  set_has_teamsign();
  teamsign_ = value;
}

// -------------------------------------------------------------------

// ReqInstanceMemberApply

// required int32 isAgree = 1;
inline bool ReqInstanceMemberApply::has_isagree() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqInstanceMemberApply::set_has_isagree() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqInstanceMemberApply::clear_has_isagree() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqInstanceMemberApply::clear_isagree() {
  isagree_ = 0;
  clear_has_isagree();
}
inline ::google::protobuf::int32 ReqInstanceMemberApply::isagree() const {
  return isagree_;
}
inline void ReqInstanceMemberApply::set_isagree(::google::protobuf::int32 value) {
  set_has_isagree();
  isagree_ = value;
}

// required int32 instanceId = 2;
inline bool ReqInstanceMemberApply::has_instanceid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqInstanceMemberApply::set_has_instanceid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqInstanceMemberApply::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqInstanceMemberApply::clear_instanceid() {
  instanceid_ = 0;
  clear_has_instanceid();
}
inline ::google::protobuf::int32 ReqInstanceMemberApply::instanceid() const {
  return instanceid_;
}
inline void ReqInstanceMemberApply::set_instanceid(::google::protobuf::int32 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// -------------------------------------------------------------------

// RetInstanceMemberApply

// required int32 dwErrorCode = 1;
inline bool RetInstanceMemberApply::has_dwerrorcode() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetInstanceMemberApply::set_has_dwerrorcode() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetInstanceMemberApply::clear_has_dwerrorcode() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetInstanceMemberApply::clear_dwerrorcode() {
  dwerrorcode_ = 0;
  clear_has_dwerrorcode();
}
inline ::google::protobuf::int32 RetInstanceMemberApply::dwerrorcode() const {
  return dwerrorcode_;
}
inline void RetInstanceMemberApply::set_dwerrorcode(::google::protobuf::int32 value) {
  set_has_dwerrorcode();
  dwerrorcode_ = value;
}

// -------------------------------------------------------------------

// ToClientGroupChat

// required int32 type = 1;
inline bool ToClientGroupChat::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToClientGroupChat::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToClientGroupChat::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToClientGroupChat::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ToClientGroupChat::type() const {
  return type_;
}
inline void ToClientGroupChat::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string name = 2;
inline bool ToClientGroupChat::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToClientGroupChat::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToClientGroupChat::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToClientGroupChat::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ToClientGroupChat::name() const {
  return *name_;
}
inline void ToClientGroupChat::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ToClientGroupChat::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ToClientGroupChat::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToClientGroupChat::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ToClientGroupChat::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToClientGroupChat::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 instanceId = 3;
inline bool ToClientGroupChat::has_instanceid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToClientGroupChat::set_has_instanceid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ToClientGroupChat::clear_has_instanceid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ToClientGroupChat::clear_instanceid() {
  instanceid_ = 0;
  clear_has_instanceid();
}
inline ::google::protobuf::int32 ToClientGroupChat::instanceid() const {
  return instanceid_;
}
inline void ToClientGroupChat::set_instanceid(::google::protobuf::int32 value) {
  set_has_instanceid();
  instanceid_ = value;
}

// optional int64 guid = 4;
inline bool ToClientGroupChat::has_guid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ToClientGroupChat::set_has_guid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ToClientGroupChat::clear_has_guid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ToClientGroupChat::clear_guid() {
  guid_ = GOOGLE_LONGLONG(0);
  clear_has_guid();
}
inline ::google::protobuf::int64 ToClientGroupChat::guid() const {
  return guid_;
}
inline void ToClientGroupChat::set_guid(::google::protobuf::int64 value) {
  set_has_guid();
  guid_ = value;
}

// -------------------------------------------------------------------

// ClickPlayerHead

// optional int32 groupID = 1;
inline bool ClickPlayerHead::has_groupid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClickPlayerHead::set_has_groupid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClickPlayerHead::clear_has_groupid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClickPlayerHead::clear_groupid() {
  groupid_ = 0;
  clear_has_groupid();
}
inline ::google::protobuf::int32 ClickPlayerHead::groupid() const {
  return groupid_;
}
inline void ClickPlayerHead::set_groupid(::google::protobuf::int32 value) {
  set_has_groupid();
  groupid_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GroupMessage

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Group_2fGroupMessage_2eproto__INCLUDED
