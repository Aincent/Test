// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChristmasActivity/NewYearDBPro.proto

#ifndef PROTOBUF_ChristmasActivity_2fNewYearDBPro_2eproto__INCLUDED
#define PROTOBUF_ChristmasActivity_2fNewYearDBPro_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace NewYearDBPro {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ChristmasActivity_2fNewYearDBPro_2eproto();
void protobuf_AssignDesc_ChristmasActivity_2fNewYearDBPro_2eproto();
void protobuf_ShutdownFile_ChristmasActivity_2fNewYearDBPro_2eproto();

class LimitPlayerData;
class NewYearLimitData;

// ===================================================================

class LimitPlayerData : public ::google::protobuf::Message {
 public:
  LimitPlayerData();
  virtual ~LimitPlayerData();

  LimitPlayerData(const LimitPlayerData& from);

  inline LimitPlayerData& operator=(const LimitPlayerData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LimitPlayerData& default_instance();

  void Swap(LimitPlayerData* other);

  // implements Message ----------------------------------------------

  LimitPlayerData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LimitPlayerData& from);
  void MergeFrom(const LimitPlayerData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional int32 counts = 2;
  inline bool has_counts() const;
  inline void clear_counts();
  static const int kCountsFieldNumber = 2;
  inline ::google::protobuf::int32 counts() const;
  inline void set_counts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NewYearDBPro.LimitPlayerData)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_counts();
  inline void clear_has_counts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 counts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ChristmasActivity_2fNewYearDBPro_2eproto();
  friend void protobuf_AssignDesc_ChristmasActivity_2fNewYearDBPro_2eproto();
  friend void protobuf_ShutdownFile_ChristmasActivity_2fNewYearDBPro_2eproto();

  void InitAsDefaultInstance();
  static LimitPlayerData* default_instance_;
};
// -------------------------------------------------------------------

class NewYearLimitData : public ::google::protobuf::Message {
 public:
  NewYearLimitData();
  virtual ~NewYearLimitData();

  NewYearLimitData(const NewYearLimitData& from);

  inline NewYearLimitData& operator=(const NewYearLimitData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NewYearLimitData& default_instance();

  void Swap(NewYearLimitData* other);

  // implements Message ----------------------------------------------

  NewYearLimitData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NewYearLimitData& from);
  void MergeFrom(const NewYearLimitData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .NewYearDBPro.LimitPlayerData datas = 1;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 1;
  inline const ::NewYearDBPro::LimitPlayerData& datas(int index) const;
  inline ::NewYearDBPro::LimitPlayerData* mutable_datas(int index);
  inline ::NewYearDBPro::LimitPlayerData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::NewYearDBPro::LimitPlayerData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::NewYearDBPro::LimitPlayerData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:NewYearDBPro.NewYearLimitData)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::NewYearDBPro::LimitPlayerData > datas_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_ChristmasActivity_2fNewYearDBPro_2eproto();
  friend void protobuf_AssignDesc_ChristmasActivity_2fNewYearDBPro_2eproto();
  friend void protobuf_ShutdownFile_ChristmasActivity_2fNewYearDBPro_2eproto();

  void InitAsDefaultInstance();
  static NewYearLimitData* default_instance_;
};
// ===================================================================


// ===================================================================

// LimitPlayerData

// optional int64 playerID = 1;
inline bool LimitPlayerData::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LimitPlayerData::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LimitPlayerData::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LimitPlayerData::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 LimitPlayerData::playerid() const {
  return playerid_;
}
inline void LimitPlayerData::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional int32 counts = 2;
inline bool LimitPlayerData::has_counts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void LimitPlayerData::set_has_counts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void LimitPlayerData::clear_has_counts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void LimitPlayerData::clear_counts() {
  counts_ = 0;
  clear_has_counts();
}
inline ::google::protobuf::int32 LimitPlayerData::counts() const {
  return counts_;
}
inline void LimitPlayerData::set_counts(::google::protobuf::int32 value) {
  set_has_counts();
  counts_ = value;
}

// -------------------------------------------------------------------

// NewYearLimitData

// repeated .NewYearDBPro.LimitPlayerData datas = 1;
inline int NewYearLimitData::datas_size() const {
  return datas_.size();
}
inline void NewYearLimitData::clear_datas() {
  datas_.Clear();
}
inline const ::NewYearDBPro::LimitPlayerData& NewYearLimitData::datas(int index) const {
  return datas_.Get(index);
}
inline ::NewYearDBPro::LimitPlayerData* NewYearLimitData::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::NewYearDBPro::LimitPlayerData* NewYearLimitData::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NewYearDBPro::LimitPlayerData >&
NewYearLimitData::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::NewYearDBPro::LimitPlayerData >*
NewYearLimitData::mutable_datas() {
  return &datas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NewYearDBPro

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChristmasActivity_2fNewYearDBPro_2eproto__INCLUDED
