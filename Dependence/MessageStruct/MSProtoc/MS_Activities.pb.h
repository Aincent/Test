// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSProtoc/MS_Activities.proto

#ifndef PROTOBUF_MSProtoc_2fMS_5fActivities_2eproto__INCLUDED
#define PROTOBUF_MSProtoc_2fMS_5fActivities_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ActivitiesProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

class ActivitiesOp;
class Activity;
class FirstRecharge;
class RankingInfo;
class RankingTypes;
class Ranking;
class InvistInfo;
class Invist;
class GeneralTypes;
class General;
class RelayRechargeInfo;
class RelayRecharge;
class Compensate;
class ToGMActivityState;
class ActivityStateList;
class ActivityState;

// ===================================================================

class ActivitiesOp : public ::google::protobuf::Message {
 public:
  ActivitiesOp();
  virtual ~ActivitiesOp();

  ActivitiesOp(const ActivitiesOp& from);

  inline ActivitiesOp& operator=(const ActivitiesOp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivitiesOp& default_instance();

  void Swap(ActivitiesOp* other);

  // implements Message ----------------------------------------------

  ActivitiesOp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivitiesOp& from);
  void MergeFrom(const ActivitiesOp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 op = 1;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 1;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated .ActivitiesProto.Activity activityList = 3;
  inline int activitylist_size() const;
  inline void clear_activitylist();
  static const int kActivityListFieldNumber = 3;
  inline const ::ActivitiesProto::Activity& activitylist(int index) const;
  inline ::ActivitiesProto::Activity* mutable_activitylist(int index);
  inline ::ActivitiesProto::Activity* add_activitylist();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::Activity >&
      activitylist() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::Activity >*
      mutable_activitylist();

  // optional int32 totalNumber = 4;
  inline bool has_totalnumber() const;
  inline void clear_totalnumber();
  static const int kTotalNumberFieldNumber = 4;
  inline ::google::protobuf::int32 totalnumber() const;
  inline void set_totalnumber(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ActivitiesProto.ActivitiesOp)
 private:
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_totalnumber();
  inline void clear_has_totalnumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 op_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::Activity > activitylist_;
  ::google::protobuf::int32 totalnumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static ActivitiesOp* default_instance_;
};
// -------------------------------------------------------------------

class Activity : public ::google::protobuf::Message {
 public:
  Activity();
  virtual ~Activity();

  Activity(const Activity& from);

  inline Activity& operator=(const Activity& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Activity& default_instance();

  void Swap(Activity* other);

  // implements Message ----------------------------------------------

  Activity* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Activity& from);
  void MergeFrom(const Activity& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional bytes content = 3;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 3;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:ActivitiesProto.Activity)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 status_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static Activity* default_instance_;
};
// -------------------------------------------------------------------

class FirstRecharge : public ::google::protobuf::Message {
 public:
  FirstRecharge();
  virtual ~FirstRecharge();

  FirstRecharge(const FirstRecharge& from);

  inline FirstRecharge& operator=(const FirstRecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FirstRecharge& default_instance();

  void Swap(FirstRecharge* other);

  // implements Message ----------------------------------------------

  FirstRecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FirstRecharge& from);
  void MergeFrom(const FirstRecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string activityName = 1;
  inline bool has_activityname() const;
  inline void clear_activityname();
  static const int kActivityNameFieldNumber = 1;
  inline const ::std::string& activityname() const;
  inline void set_activityname(const ::std::string& value);
  inline void set_activityname(const char* value);
  inline void set_activityname(const char* value, size_t size);
  inline ::std::string* mutable_activityname();
  inline ::std::string* release_activityname();
  inline void set_allocated_activityname(::std::string* activityname);

  // optional int64 beginTime = 2;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 2;
  inline ::google::protobuf::int64 begintime() const;
  inline void set_begintime(::google::protobuf::int64 value);

  // optional int64 endTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // optional int64 rewardTime = 4;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 4;
  inline ::google::protobuf::int64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::int64 value);

  // optional int32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional string des = 6;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 6;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  inline void set_allocated_des(::std::string* des);

  // required int32 rate = 7;
  inline bool has_rate() const;
  inline void clear_rate();
  static const int kRateFieldNumber = 7;
  inline ::google::protobuf::int32 rate() const;
  inline void set_rate(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ActivitiesProto.FirstRecharge)
 private:
  inline void set_has_activityname();
  inline void clear_has_activityname();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_des();
  inline void clear_has_des();
  inline void set_has_rate();
  inline void clear_has_rate();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* activityname_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int64 rewardtime_;
  ::std::string* des_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 rate_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static FirstRecharge* default_instance_;
};
// -------------------------------------------------------------------

class RankingInfo : public ::google::protobuf::Message {
 public:
  RankingInfo();
  virtual ~RankingInfo();

  RankingInfo(const RankingInfo& from);

  inline RankingInfo& operator=(const RankingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankingInfo& default_instance();

  void Swap(RankingInfo* other);

  // implements Message ----------------------------------------------

  RankingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankingInfo& from);
  void MergeFrom(const RankingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // optional string des = 3;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 3;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  inline void set_allocated_des(::std::string* des);

  // repeated int32 item_id = 4;
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 4;
  inline ::google::protobuf::int32 item_id(int index) const;
  inline void set_item_id(int index, ::google::protobuf::int32 value);
  inline void add_item_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();

  // repeated int32 item_num = 5;
  inline int item_num_size() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 5;
  inline ::google::protobuf::int32 item_num(int index) const;
  inline void set_item_num(int index, ::google::protobuf::int32 value);
  inline void add_item_num(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_num();

  // @@protoc_insertion_point(class_scope:ActivitiesProto.RankingInfo)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_des();
  inline void clear_has_des();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 value_;
  ::std::string* des_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static RankingInfo* default_instance_;
};
// -------------------------------------------------------------------

class RankingTypes : public ::google::protobuf::Message {
 public:
  RankingTypes();
  virtual ~RankingTypes();

  RankingTypes(const RankingTypes& from);

  inline RankingTypes& operator=(const RankingTypes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RankingTypes& default_instance();

  void Swap(RankingTypes* other);

  // implements Message ----------------------------------------------

  RankingTypes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RankingTypes& from);
  void MergeFrom(const RankingTypes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 tinyType = 1;
  inline bool has_tinytype() const;
  inline void clear_tinytype();
  static const int kTinyTypeFieldNumber = 1;
  inline ::google::protobuf::int32 tinytype() const;
  inline void set_tinytype(::google::protobuf::int32 value);

  // optional string des = 2;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 2;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  inline void set_allocated_des(::std::string* des);

  // repeated .ActivitiesProto.RankingInfo info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::ActivitiesProto::RankingInfo& info(int index) const;
  inline ::ActivitiesProto::RankingInfo* mutable_info(int index);
  inline ::ActivitiesProto::RankingInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::RankingInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::RankingInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:ActivitiesProto.RankingTypes)
 private:
  inline void set_has_tinytype();
  inline void clear_has_tinytype();
  inline void set_has_des();
  inline void clear_has_des();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* des_;
  ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::RankingInfo > info_;
  ::google::protobuf::int32 tinytype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static RankingTypes* default_instance_;
};
// -------------------------------------------------------------------

class Ranking : public ::google::protobuf::Message {
 public:
  Ranking();
  virtual ~Ranking();

  Ranking(const Ranking& from);

  inline Ranking& operator=(const Ranking& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Ranking& default_instance();

  void Swap(Ranking* other);

  // implements Message ----------------------------------------------

  Ranking* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Ranking& from);
  void MergeFrom(const Ranking& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string activityName = 1;
  inline bool has_activityname() const;
  inline void clear_activityname();
  static const int kActivityNameFieldNumber = 1;
  inline const ::std::string& activityname() const;
  inline void set_activityname(const ::std::string& value);
  inline void set_activityname(const char* value);
  inline void set_activityname(const char* value, size_t size);
  inline ::std::string* mutable_activityname();
  inline ::std::string* release_activityname();
  inline void set_allocated_activityname(::std::string* activityname);

  // optional int64 beginTime = 2;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 2;
  inline ::google::protobuf::int64 begintime() const;
  inline void set_begintime(::google::protobuf::int64 value);

  // optional int64 endTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // optional int64 rewardTime = 4;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 4;
  inline ::google::protobuf::int64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::int64 value);

  // optional int32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // repeated .ActivitiesProto.RankingTypes data = 6;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 6;
  inline const ::ActivitiesProto::RankingTypes& data(int index) const;
  inline ::ActivitiesProto::RankingTypes* mutable_data(int index);
  inline ::ActivitiesProto::RankingTypes* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::RankingTypes >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::RankingTypes >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ActivitiesProto.Ranking)
 private:
  inline void set_has_activityname();
  inline void clear_has_activityname();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();
  inline void set_has_status();
  inline void clear_has_status();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* activityname_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int64 rewardtime_;
  ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::RankingTypes > data_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static Ranking* default_instance_;
};
// -------------------------------------------------------------------

class InvistInfo : public ::google::protobuf::Message {
 public:
  InvistInfo();
  virtual ~InvistInfo();

  InvistInfo(const InvistInfo& from);

  inline InvistInfo& operator=(const InvistInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvistInfo& default_instance();

  void Swap(InvistInfo* other);

  // implements Message ----------------------------------------------

  InvistInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvistInfo& from);
  void MergeFrom(const InvistInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // optional string des = 3;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 3;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  inline void set_allocated_des(::std::string* des);

  // optional int32 golden = 4;
  inline bool has_golden() const;
  inline void clear_golden();
  static const int kGoldenFieldNumber = 4;
  inline ::google::protobuf::int32 golden() const;
  inline void set_golden(::google::protobuf::int32 value);

  // optional int32 bgolden = 5;
  inline bool has_bgolden() const;
  inline void clear_bgolden();
  static const int kBgoldenFieldNumber = 5;
  inline ::google::protobuf::int32 bgolden() const;
  inline void set_bgolden(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ActivitiesProto.InvistInfo)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_value();
  inline void clear_has_value();
  inline void set_has_des();
  inline void clear_has_des();
  inline void set_has_golden();
  inline void clear_has_golden();
  inline void set_has_bgolden();
  inline void clear_has_bgolden();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 value_;
  ::std::string* des_;
  ::google::protobuf::int32 golden_;
  ::google::protobuf::int32 bgolden_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static InvistInfo* default_instance_;
};
// -------------------------------------------------------------------

class Invist : public ::google::protobuf::Message {
 public:
  Invist();
  virtual ~Invist();

  Invist(const Invist& from);

  inline Invist& operator=(const Invist& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Invist& default_instance();

  void Swap(Invist* other);

  // implements Message ----------------------------------------------

  Invist* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Invist& from);
  void MergeFrom(const Invist& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string des = 1;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 1;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  inline void set_allocated_des(::std::string* des);

  // optional int32 maxGolden = 2;
  inline bool has_maxgolden() const;
  inline void clear_maxgolden();
  static const int kMaxGoldenFieldNumber = 2;
  inline ::google::protobuf::int32 maxgolden() const;
  inline void set_maxgolden(::google::protobuf::int32 value);

  // repeated .ActivitiesProto.InvistInfo info = 3;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 3;
  inline const ::ActivitiesProto::InvistInfo& info(int index) const;
  inline ::ActivitiesProto::InvistInfo* mutable_info(int index);
  inline ::ActivitiesProto::InvistInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::InvistInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::InvistInfo >*
      mutable_info();

  // optional int64 beginTime = 4;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 4;
  inline ::google::protobuf::int64 begintime() const;
  inline void set_begintime(::google::protobuf::int64 value);

  // optional int64 endTime = 5;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 5;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // optional int64 rewardTime = 6;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 6;
  inline ::google::protobuf::int64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::int64 value);

  // optional int32 status = 7;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 7;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional string activityname = 8;
  inline bool has_activityname() const;
  inline void clear_activityname();
  static const int kActivitynameFieldNumber = 8;
  inline const ::std::string& activityname() const;
  inline void set_activityname(const ::std::string& value);
  inline void set_activityname(const char* value);
  inline void set_activityname(const char* value, size_t size);
  inline ::std::string* mutable_activityname();
  inline ::std::string* release_activityname();
  inline void set_allocated_activityname(::std::string* activityname);

  // @@protoc_insertion_point(class_scope:ActivitiesProto.Invist)
 private:
  inline void set_has_des();
  inline void clear_has_des();
  inline void set_has_maxgolden();
  inline void clear_has_maxgolden();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_activityname();
  inline void clear_has_activityname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* des_;
  ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::InvistInfo > info_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int32 maxgolden_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int64 rewardtime_;
  ::std::string* activityname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static Invist* default_instance_;
};
// -------------------------------------------------------------------

class GeneralTypes : public ::google::protobuf::Message {
 public:
  GeneralTypes();
  virtual ~GeneralTypes();

  GeneralTypes(const GeneralTypes& from);

  inline GeneralTypes& operator=(const GeneralTypes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GeneralTypes& default_instance();

  void Swap(GeneralTypes* other);

  // implements Message ----------------------------------------------

  GeneralTypes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GeneralTypes& from);
  void MergeFrom(const GeneralTypes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional string des = 2;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 2;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  inline void set_allocated_des(::std::string* des);

  // optional int32 value = 3;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // repeated int32 item_id = 4;
  inline int item_id_size() const;
  inline void clear_item_id();
  static const int kItemIdFieldNumber = 4;
  inline ::google::protobuf::int32 item_id(int index) const;
  inline void set_item_id(int index, ::google::protobuf::int32 value);
  inline void add_item_id(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_id() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_id();

  // repeated int32 item_num = 5;
  inline int item_num_size() const;
  inline void clear_item_num();
  static const int kItemNumFieldNumber = 5;
  inline ::google::protobuf::int32 item_num(int index) const;
  inline void set_item_num(int index, ::google::protobuf::int32 value);
  inline void add_item_num(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      item_num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_item_num();

  // @@protoc_insertion_point(class_scope:ActivitiesProto.GeneralTypes)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_des();
  inline void clear_has_des();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* des_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 value_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_id_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > item_num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static GeneralTypes* default_instance_;
};
// -------------------------------------------------------------------

class General : public ::google::protobuf::Message {
 public:
  General();
  virtual ~General();

  General(const General& from);

  inline General& operator=(const General& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const General& default_instance();

  void Swap(General* other);

  // implements Message ----------------------------------------------

  General* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const General& from);
  void MergeFrom(const General& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string activityName = 1;
  inline bool has_activityname() const;
  inline void clear_activityname();
  static const int kActivityNameFieldNumber = 1;
  inline const ::std::string& activityname() const;
  inline void set_activityname(const ::std::string& value);
  inline void set_activityname(const char* value);
  inline void set_activityname(const char* value, size_t size);
  inline ::std::string* mutable_activityname();
  inline ::std::string* release_activityname();
  inline void set_allocated_activityname(::std::string* activityname);

  // optional int64 beginTime = 2;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 2;
  inline ::google::protobuf::int64 begintime() const;
  inline void set_begintime(::google::protobuf::int64 value);

  // optional int64 endTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // optional int64 rewardTime = 4;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 4;
  inline ::google::protobuf::int64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::int64 value);

  // optional int32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional string des = 6;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 6;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  inline void set_allocated_des(::std::string* des);

  // repeated .ActivitiesProto.GeneralTypes data = 7;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 7;
  inline const ::ActivitiesProto::GeneralTypes& data(int index) const;
  inline ::ActivitiesProto::GeneralTypes* mutable_data(int index);
  inline ::ActivitiesProto::GeneralTypes* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::GeneralTypes >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::GeneralTypes >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ActivitiesProto.General)
 private:
  inline void set_has_activityname();
  inline void clear_has_activityname();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_des();
  inline void clear_has_des();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* activityname_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int64 rewardtime_;
  ::std::string* des_;
  ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::GeneralTypes > data_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static General* default_instance_;
};
// -------------------------------------------------------------------

class RelayRechargeInfo : public ::google::protobuf::Message {
 public:
  RelayRechargeInfo();
  virtual ~RelayRechargeInfo();

  RelayRechargeInfo(const RelayRechargeInfo& from);

  inline RelayRechargeInfo& operator=(const RelayRechargeInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelayRechargeInfo& default_instance();

  void Swap(RelayRechargeInfo* other);

  // implements Message ----------------------------------------------

  RelayRechargeInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelayRechargeInfo& from);
  void MergeFrom(const RelayRechargeInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // repeated int32 itemId = 2;
  inline int itemid_size() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 2;
  inline ::google::protobuf::int32 itemid(int index) const;
  inline void set_itemid(int index, ::google::protobuf::int32 value);
  inline void add_itemid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      itemid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_itemid();

  // repeated int32 itemNum = 3;
  inline int itemnum_size() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 3;
  inline ::google::protobuf::int32 itemnum(int index) const;
  inline void set_itemnum(int index, ::google::protobuf::int32 value);
  inline void add_itemnum(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      itemnum() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_itemnum();

  // optional int32 rechargegolden = 4;
  inline bool has_rechargegolden() const;
  inline void clear_rechargegolden();
  static const int kRechargegoldenFieldNumber = 4;
  inline ::google::protobuf::int32 rechargegolden() const;
  inline void set_rechargegolden(::google::protobuf::int32 value);

  // optional int32 rechargepeople = 5;
  inline bool has_rechargepeople() const;
  inline void clear_rechargepeople();
  static const int kRechargepeopleFieldNumber = 5;
  inline ::google::protobuf::int32 rechargepeople() const;
  inline void set_rechargepeople(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ActivitiesProto.RelayRechargeInfo)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_rechargegolden();
  inline void clear_has_rechargegolden();
  inline void set_has_rechargepeople();
  inline void clear_has_rechargepeople();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > itemid_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 rechargegolden_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > itemnum_;
  ::google::protobuf::int32 rechargepeople_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static RelayRechargeInfo* default_instance_;
};
// -------------------------------------------------------------------

class RelayRecharge : public ::google::protobuf::Message {
 public:
  RelayRecharge();
  virtual ~RelayRecharge();

  RelayRecharge(const RelayRecharge& from);

  inline RelayRecharge& operator=(const RelayRecharge& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RelayRecharge& default_instance();

  void Swap(RelayRecharge* other);

  // implements Message ----------------------------------------------

  RelayRecharge* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RelayRecharge& from);
  void MergeFrom(const RelayRecharge& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string activityName = 1;
  inline bool has_activityname() const;
  inline void clear_activityname();
  static const int kActivityNameFieldNumber = 1;
  inline const ::std::string& activityname() const;
  inline void set_activityname(const ::std::string& value);
  inline void set_activityname(const char* value);
  inline void set_activityname(const char* value, size_t size);
  inline ::std::string* mutable_activityname();
  inline ::std::string* release_activityname();
  inline void set_allocated_activityname(::std::string* activityname);

  // optional int64 beginTime = 2;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 2;
  inline ::google::protobuf::int64 begintime() const;
  inline void set_begintime(::google::protobuf::int64 value);

  // optional int64 endTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // optional int64 rewardTime = 4;
  inline bool has_rewardtime() const;
  inline void clear_rewardtime();
  static const int kRewardTimeFieldNumber = 4;
  inline ::google::protobuf::int64 rewardtime() const;
  inline void set_rewardtime(::google::protobuf::int64 value);

  // optional int32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional string des = 6;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 6;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  inline void set_allocated_des(::std::string* des);

  // repeated .ActivitiesProto.RelayRechargeInfo data = 7;
  inline int data_size() const;
  inline void clear_data();
  static const int kDataFieldNumber = 7;
  inline const ::ActivitiesProto::RelayRechargeInfo& data(int index) const;
  inline ::ActivitiesProto::RelayRechargeInfo* mutable_data(int index);
  inline ::ActivitiesProto::RelayRechargeInfo* add_data();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::RelayRechargeInfo >&
      data() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::RelayRechargeInfo >*
      mutable_data();

  // @@protoc_insertion_point(class_scope:ActivitiesProto.RelayRecharge)
 private:
  inline void set_has_activityname();
  inline void clear_has_activityname();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_rewardtime();
  inline void clear_has_rewardtime();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_des();
  inline void clear_has_des();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* activityname_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int64 rewardtime_;
  ::std::string* des_;
  ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::RelayRechargeInfo > data_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(7 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static RelayRecharge* default_instance_;
};
// -------------------------------------------------------------------

class Compensate : public ::google::protobuf::Message {
 public:
  Compensate();
  virtual ~Compensate();

  Compensate(const Compensate& from);

  inline Compensate& operator=(const Compensate& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Compensate& default_instance();

  void Swap(Compensate* other);

  // implements Message ----------------------------------------------

  Compensate* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Compensate& from);
  void MergeFrom(const Compensate& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string activityName = 1;
  inline bool has_activityname() const;
  inline void clear_activityname();
  static const int kActivityNameFieldNumber = 1;
  inline const ::std::string& activityname() const;
  inline void set_activityname(const ::std::string& value);
  inline void set_activityname(const char* value);
  inline void set_activityname(const char* value, size_t size);
  inline ::std::string* mutable_activityname();
  inline ::std::string* release_activityname();
  inline void set_allocated_activityname(::std::string* activityname);

  // optional int64 beginTime = 2;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 2;
  inline ::google::protobuf::int64 begintime() const;
  inline void set_begintime(::google::protobuf::int64 value);

  // optional int64 endTime = 3;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 3;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // optional int64 AnnounceTime = 4;
  inline bool has_announcetime() const;
  inline void clear_announcetime();
  static const int kAnnounceTimeFieldNumber = 4;
  inline ::google::protobuf::int64 announcetime() const;
  inline void set_announcetime(::google::protobuf::int64 value);

  // optional int32 status = 5;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 5;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional string des = 6;
  inline bool has_des() const;
  inline void clear_des();
  static const int kDesFieldNumber = 6;
  inline const ::std::string& des() const;
  inline void set_des(const ::std::string& value);
  inline void set_des(const char* value);
  inline void set_des(const char* value, size_t size);
  inline ::std::string* mutable_des();
  inline ::std::string* release_des();
  inline void set_allocated_des(::std::string* des);

  // repeated int32 itemId = 7;
  inline int itemid_size() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 7;
  inline ::google::protobuf::int32 itemid(int index) const;
  inline void set_itemid(int index, ::google::protobuf::int32 value);
  inline void add_itemid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      itemid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_itemid();

  // repeated int32 itemNum = 8;
  inline int itemnum_size() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 8;
  inline ::google::protobuf::int32 itemnum(int index) const;
  inline void set_itemnum(int index, ::google::protobuf::int32 value);
  inline void add_itemnum(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      itemnum() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_itemnum();

  // @@protoc_insertion_point(class_scope:ActivitiesProto.Compensate)
 private:
  inline void set_has_activityname();
  inline void clear_has_activityname();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_announcetime();
  inline void clear_has_announcetime();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_des();
  inline void clear_has_des();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* activityname_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int64 endtime_;
  ::google::protobuf::int64 announcetime_;
  ::std::string* des_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > itemid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > itemnum_;
  ::google::protobuf::int32 status_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static Compensate* default_instance_;
};
// -------------------------------------------------------------------

class ToGMActivityState : public ::google::protobuf::Message {
 public:
  ToGMActivityState();
  virtual ~ToGMActivityState();

  ToGMActivityState(const ToGMActivityState& from);

  inline ToGMActivityState& operator=(const ToGMActivityState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToGMActivityState& default_instance();

  void Swap(ToGMActivityState* other);

  // implements Message ----------------------------------------------

  ToGMActivityState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToGMActivityState& from);
  void MergeFrom(const ToGMActivityState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 charID = 1;
  inline int charid_size() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::int64 charid(int index) const;
  inline void set_charid(int index, ::google::protobuf::int64 value);
  inline void add_charid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      charid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_charid();

  // repeated .ActivitiesProto.ActivityStateList list = 2;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 2;
  inline const ::ActivitiesProto::ActivityStateList& list(int index) const;
  inline ::ActivitiesProto::ActivityStateList* mutable_list(int index);
  inline ::ActivitiesProto::ActivityStateList* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::ActivityStateList >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::ActivityStateList >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:ActivitiesProto.ToGMActivityState)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > charid_;
  ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::ActivityStateList > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static ToGMActivityState* default_instance_;
};
// -------------------------------------------------------------------

class ActivityStateList : public ::google::protobuf::Message {
 public:
  ActivityStateList();
  virtual ~ActivityStateList();

  ActivityStateList(const ActivityStateList& from);

  inline ActivityStateList& operator=(const ActivityStateList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityStateList& default_instance();

  void Swap(ActivityStateList* other);

  // implements Message ----------------------------------------------

  ActivityStateList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityStateList& from);
  void MergeFrom(const ActivityStateList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .ActivitiesProto.ActivityState states = 1;
  inline int states_size() const;
  inline void clear_states();
  static const int kStatesFieldNumber = 1;
  inline const ::ActivitiesProto::ActivityState& states(int index) const;
  inline ::ActivitiesProto::ActivityState* mutable_states(int index);
  inline ::ActivitiesProto::ActivityState* add_states();
  inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::ActivityState >&
      states() const;
  inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::ActivityState >*
      mutable_states();

  // @@protoc_insertion_point(class_scope:ActivitiesProto.ActivityStateList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::ActivityState > states_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static ActivityStateList* default_instance_;
};
// -------------------------------------------------------------------

class ActivityState : public ::google::protobuf::Message {
 public:
  ActivityState();
  virtual ~ActivityState();

  ActivityState(const ActivityState& from);

  inline ActivityState& operator=(const ActivityState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityState& default_instance();

  void Swap(ActivityState* other);

  // implements Message ----------------------------------------------

  ActivityState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityState& from);
  void MergeFrom(const ActivityState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ActivitiesProto.ActivityState)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  bool flag_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fMS_5fActivities_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fMS_5fActivities_2eproto();

  void InitAsDefaultInstance();
  static ActivityState* default_instance_;
};
// ===================================================================


// ===================================================================

// ActivitiesOp

// required int32 op = 1;
inline bool ActivitiesOp::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivitiesOp::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivitiesOp::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivitiesOp::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 ActivitiesOp::op() const {
  return op_;
}
inline void ActivitiesOp::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
}

// required int32 type = 2;
inline bool ActivitiesOp::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivitiesOp::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivitiesOp::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivitiesOp::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ActivitiesOp::type() const {
  return type_;
}
inline void ActivitiesOp::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated .ActivitiesProto.Activity activityList = 3;
inline int ActivitiesOp::activitylist_size() const {
  return activitylist_.size();
}
inline void ActivitiesOp::clear_activitylist() {
  activitylist_.Clear();
}
inline const ::ActivitiesProto::Activity& ActivitiesOp::activitylist(int index) const {
  return activitylist_.Get(index);
}
inline ::ActivitiesProto::Activity* ActivitiesOp::mutable_activitylist(int index) {
  return activitylist_.Mutable(index);
}
inline ::ActivitiesProto::Activity* ActivitiesOp::add_activitylist() {
  return activitylist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::Activity >&
ActivitiesOp::activitylist() const {
  return activitylist_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::Activity >*
ActivitiesOp::mutable_activitylist() {
  return &activitylist_;
}

// optional int32 totalNumber = 4;
inline bool ActivitiesOp::has_totalnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ActivitiesOp::set_has_totalnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ActivitiesOp::clear_has_totalnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ActivitiesOp::clear_totalnumber() {
  totalnumber_ = 0;
  clear_has_totalnumber();
}
inline ::google::protobuf::int32 ActivitiesOp::totalnumber() const {
  return totalnumber_;
}
inline void ActivitiesOp::set_totalnumber(::google::protobuf::int32 value) {
  set_has_totalnumber();
  totalnumber_ = value;
}

// -------------------------------------------------------------------

// Activity

// required int32 type = 1;
inline bool Activity::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Activity::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Activity::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Activity::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Activity::type() const {
  return type_;
}
inline void Activity::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 status = 2;
inline bool Activity::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Activity::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Activity::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Activity::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Activity::status() const {
  return status_;
}
inline void Activity::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional bytes content = 3;
inline bool Activity::has_content() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Activity::set_has_content() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Activity::clear_has_content() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Activity::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& Activity::content() const {
  return *content_;
}
inline void Activity::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Activity::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void Activity::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Activity::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* Activity::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Activity::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FirstRecharge

// required string activityName = 1;
inline bool FirstRecharge::has_activityname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FirstRecharge::set_has_activityname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FirstRecharge::clear_has_activityname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FirstRecharge::clear_activityname() {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    activityname_->clear();
  }
  clear_has_activityname();
}
inline const ::std::string& FirstRecharge::activityname() const {
  return *activityname_;
}
inline void FirstRecharge::set_activityname(const ::std::string& value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void FirstRecharge::set_activityname(const char* value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void FirstRecharge::set_activityname(const char* value, size_t size) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FirstRecharge::mutable_activityname() {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  return activityname_;
}
inline ::std::string* FirstRecharge::release_activityname() {
  clear_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activityname_;
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FirstRecharge::set_allocated_activityname(::std::string* activityname) {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (activityname) {
    set_has_activityname();
    activityname_ = activityname;
  } else {
    clear_has_activityname();
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 beginTime = 2;
inline bool FirstRecharge::has_begintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FirstRecharge::set_has_begintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FirstRecharge::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FirstRecharge::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::int64 FirstRecharge::begintime() const {
  return begintime_;
}
inline void FirstRecharge::set_begintime(::google::protobuf::int64 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional int64 endTime = 3;
inline bool FirstRecharge::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FirstRecharge::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FirstRecharge::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FirstRecharge::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 FirstRecharge::endtime() const {
  return endtime_;
}
inline void FirstRecharge::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional int64 rewardTime = 4;
inline bool FirstRecharge::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FirstRecharge::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FirstRecharge::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FirstRecharge::clear_rewardtime() {
  rewardtime_ = GOOGLE_LONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::int64 FirstRecharge::rewardtime() const {
  return rewardtime_;
}
inline void FirstRecharge::set_rewardtime(::google::protobuf::int64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
}

// optional int32 status = 5;
inline bool FirstRecharge::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FirstRecharge::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FirstRecharge::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FirstRecharge::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 FirstRecharge::status() const {
  return status_;
}
inline void FirstRecharge::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional string des = 6;
inline bool FirstRecharge::has_des() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FirstRecharge::set_has_des() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FirstRecharge::clear_has_des() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FirstRecharge::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& FirstRecharge::des() const {
  return *des_;
}
inline void FirstRecharge::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void FirstRecharge::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void FirstRecharge::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FirstRecharge::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* FirstRecharge::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FirstRecharge::set_allocated_des(::std::string* des) {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (des) {
    set_has_des();
    des_ = des;
  } else {
    clear_has_des();
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 rate = 7;
inline bool FirstRecharge::has_rate() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void FirstRecharge::set_has_rate() {
  _has_bits_[0] |= 0x00000040u;
}
inline void FirstRecharge::clear_has_rate() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void FirstRecharge::clear_rate() {
  rate_ = 0;
  clear_has_rate();
}
inline ::google::protobuf::int32 FirstRecharge::rate() const {
  return rate_;
}
inline void FirstRecharge::set_rate(::google::protobuf::int32 value) {
  set_has_rate();
  rate_ = value;
}

// -------------------------------------------------------------------

// RankingInfo

// optional int32 index = 1;
inline bool RankingInfo::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankingInfo::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankingInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankingInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 RankingInfo::index() const {
  return index_;
}
inline void RankingInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 value = 2;
inline bool RankingInfo::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankingInfo::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankingInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankingInfo::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 RankingInfo::value() const {
  return value_;
}
inline void RankingInfo::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional string des = 3;
inline bool RankingInfo::has_des() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RankingInfo::set_has_des() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RankingInfo::clear_has_des() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RankingInfo::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& RankingInfo::des() const {
  return *des_;
}
inline void RankingInfo::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void RankingInfo::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void RankingInfo::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankingInfo::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* RankingInfo::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankingInfo::set_allocated_des(::std::string* des) {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (des) {
    set_has_des();
    des_ = des;
  } else {
    clear_has_des();
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 item_id = 4;
inline int RankingInfo::item_id_size() const {
  return item_id_.size();
}
inline void RankingInfo::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 RankingInfo::item_id(int index) const {
  return item_id_.Get(index);
}
inline void RankingInfo::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
}
inline void RankingInfo::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RankingInfo::item_id() const {
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RankingInfo::mutable_item_id() {
  return &item_id_;
}

// repeated int32 item_num = 5;
inline int RankingInfo::item_num_size() const {
  return item_num_.size();
}
inline void RankingInfo::clear_item_num() {
  item_num_.Clear();
}
inline ::google::protobuf::int32 RankingInfo::item_num(int index) const {
  return item_num_.Get(index);
}
inline void RankingInfo::set_item_num(int index, ::google::protobuf::int32 value) {
  item_num_.Set(index, value);
}
inline void RankingInfo::add_item_num(::google::protobuf::int32 value) {
  item_num_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RankingInfo::item_num() const {
  return item_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RankingInfo::mutable_item_num() {
  return &item_num_;
}

// -------------------------------------------------------------------

// RankingTypes

// required int32 tinyType = 1;
inline bool RankingTypes::has_tinytype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RankingTypes::set_has_tinytype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RankingTypes::clear_has_tinytype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RankingTypes::clear_tinytype() {
  tinytype_ = 0;
  clear_has_tinytype();
}
inline ::google::protobuf::int32 RankingTypes::tinytype() const {
  return tinytype_;
}
inline void RankingTypes::set_tinytype(::google::protobuf::int32 value) {
  set_has_tinytype();
  tinytype_ = value;
}

// optional string des = 2;
inline bool RankingTypes::has_des() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RankingTypes::set_has_des() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RankingTypes::clear_has_des() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RankingTypes::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& RankingTypes::des() const {
  return *des_;
}
inline void RankingTypes::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void RankingTypes::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void RankingTypes::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RankingTypes::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* RankingTypes::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RankingTypes::set_allocated_des(::std::string* des) {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (des) {
    set_has_des();
    des_ = des;
  } else {
    clear_has_des();
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ActivitiesProto.RankingInfo info = 3;
inline int RankingTypes::info_size() const {
  return info_.size();
}
inline void RankingTypes::clear_info() {
  info_.Clear();
}
inline const ::ActivitiesProto::RankingInfo& RankingTypes::info(int index) const {
  return info_.Get(index);
}
inline ::ActivitiesProto::RankingInfo* RankingTypes::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ActivitiesProto::RankingInfo* RankingTypes::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::RankingInfo >&
RankingTypes::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::RankingInfo >*
RankingTypes::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// Ranking

// required string activityName = 1;
inline bool Ranking::has_activityname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Ranking::set_has_activityname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Ranking::clear_has_activityname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Ranking::clear_activityname() {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    activityname_->clear();
  }
  clear_has_activityname();
}
inline const ::std::string& Ranking::activityname() const {
  return *activityname_;
}
inline void Ranking::set_activityname(const ::std::string& value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void Ranking::set_activityname(const char* value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void Ranking::set_activityname(const char* value, size_t size) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Ranking::mutable_activityname() {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  return activityname_;
}
inline ::std::string* Ranking::release_activityname() {
  clear_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activityname_;
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Ranking::set_allocated_activityname(::std::string* activityname) {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (activityname) {
    set_has_activityname();
    activityname_ = activityname;
  } else {
    clear_has_activityname();
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 beginTime = 2;
inline bool Ranking::has_begintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Ranking::set_has_begintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Ranking::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Ranking::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::int64 Ranking::begintime() const {
  return begintime_;
}
inline void Ranking::set_begintime(::google::protobuf::int64 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional int64 endTime = 3;
inline bool Ranking::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Ranking::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Ranking::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Ranking::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 Ranking::endtime() const {
  return endtime_;
}
inline void Ranking::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional int64 rewardTime = 4;
inline bool Ranking::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Ranking::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Ranking::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Ranking::clear_rewardtime() {
  rewardtime_ = GOOGLE_LONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::int64 Ranking::rewardtime() const {
  return rewardtime_;
}
inline void Ranking::set_rewardtime(::google::protobuf::int64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
}

// optional int32 status = 5;
inline bool Ranking::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Ranking::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Ranking::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Ranking::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Ranking::status() const {
  return status_;
}
inline void Ranking::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// repeated .ActivitiesProto.RankingTypes data = 6;
inline int Ranking::data_size() const {
  return data_.size();
}
inline void Ranking::clear_data() {
  data_.Clear();
}
inline const ::ActivitiesProto::RankingTypes& Ranking::data(int index) const {
  return data_.Get(index);
}
inline ::ActivitiesProto::RankingTypes* Ranking::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::ActivitiesProto::RankingTypes* Ranking::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::RankingTypes >&
Ranking::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::RankingTypes >*
Ranking::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// InvistInfo

// optional int32 index = 1;
inline bool InvistInfo::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InvistInfo::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InvistInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InvistInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 InvistInfo::index() const {
  return index_;
}
inline void InvistInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 value = 2;
inline bool InvistInfo::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InvistInfo::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InvistInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InvistInfo::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 InvistInfo::value() const {
  return value_;
}
inline void InvistInfo::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// optional string des = 3;
inline bool InvistInfo::has_des() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InvistInfo::set_has_des() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InvistInfo::clear_has_des() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InvistInfo::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& InvistInfo::des() const {
  return *des_;
}
inline void InvistInfo::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void InvistInfo::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void InvistInfo::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvistInfo::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* InvistInfo::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvistInfo::set_allocated_des(::std::string* des) {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (des) {
    set_has_des();
    des_ = des;
  } else {
    clear_has_des();
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 golden = 4;
inline bool InvistInfo::has_golden() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void InvistInfo::set_has_golden() {
  _has_bits_[0] |= 0x00000008u;
}
inline void InvistInfo::clear_has_golden() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void InvistInfo::clear_golden() {
  golden_ = 0;
  clear_has_golden();
}
inline ::google::protobuf::int32 InvistInfo::golden() const {
  return golden_;
}
inline void InvistInfo::set_golden(::google::protobuf::int32 value) {
  set_has_golden();
  golden_ = value;
}

// optional int32 bgolden = 5;
inline bool InvistInfo::has_bgolden() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InvistInfo::set_has_bgolden() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InvistInfo::clear_has_bgolden() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InvistInfo::clear_bgolden() {
  bgolden_ = 0;
  clear_has_bgolden();
}
inline ::google::protobuf::int32 InvistInfo::bgolden() const {
  return bgolden_;
}
inline void InvistInfo::set_bgolden(::google::protobuf::int32 value) {
  set_has_bgolden();
  bgolden_ = value;
}

// -------------------------------------------------------------------

// Invist

// optional string des = 1;
inline bool Invist::has_des() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Invist::set_has_des() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Invist::clear_has_des() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Invist::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& Invist::des() const {
  return *des_;
}
inline void Invist::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void Invist::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void Invist::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Invist::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* Invist::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Invist::set_allocated_des(::std::string* des) {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (des) {
    set_has_des();
    des_ = des;
  } else {
    clear_has_des();
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 maxGolden = 2;
inline bool Invist::has_maxgolden() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Invist::set_has_maxgolden() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Invist::clear_has_maxgolden() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Invist::clear_maxgolden() {
  maxgolden_ = 0;
  clear_has_maxgolden();
}
inline ::google::protobuf::int32 Invist::maxgolden() const {
  return maxgolden_;
}
inline void Invist::set_maxgolden(::google::protobuf::int32 value) {
  set_has_maxgolden();
  maxgolden_ = value;
}

// repeated .ActivitiesProto.InvistInfo info = 3;
inline int Invist::info_size() const {
  return info_.size();
}
inline void Invist::clear_info() {
  info_.Clear();
}
inline const ::ActivitiesProto::InvistInfo& Invist::info(int index) const {
  return info_.Get(index);
}
inline ::ActivitiesProto::InvistInfo* Invist::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::ActivitiesProto::InvistInfo* Invist::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::InvistInfo >&
Invist::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::InvistInfo >*
Invist::mutable_info() {
  return &info_;
}

// optional int64 beginTime = 4;
inline bool Invist::has_begintime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Invist::set_has_begintime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Invist::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Invist::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::int64 Invist::begintime() const {
  return begintime_;
}
inline void Invist::set_begintime(::google::protobuf::int64 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional int64 endTime = 5;
inline bool Invist::has_endtime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Invist::set_has_endtime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Invist::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Invist::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 Invist::endtime() const {
  return endtime_;
}
inline void Invist::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional int64 rewardTime = 6;
inline bool Invist::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Invist::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Invist::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Invist::clear_rewardtime() {
  rewardtime_ = GOOGLE_LONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::int64 Invist::rewardtime() const {
  return rewardtime_;
}
inline void Invist::set_rewardtime(::google::protobuf::int64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
}

// optional int32 status = 7;
inline bool Invist::has_status() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Invist::set_has_status() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Invist::clear_has_status() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Invist::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Invist::status() const {
  return status_;
}
inline void Invist::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional string activityname = 8;
inline bool Invist::has_activityname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Invist::set_has_activityname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Invist::clear_has_activityname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Invist::clear_activityname() {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    activityname_->clear();
  }
  clear_has_activityname();
}
inline const ::std::string& Invist::activityname() const {
  return *activityname_;
}
inline void Invist::set_activityname(const ::std::string& value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void Invist::set_activityname(const char* value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void Invist::set_activityname(const char* value, size_t size) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Invist::mutable_activityname() {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  return activityname_;
}
inline ::std::string* Invist::release_activityname() {
  clear_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activityname_;
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Invist::set_allocated_activityname(::std::string* activityname) {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (activityname) {
    set_has_activityname();
    activityname_ = activityname;
  } else {
    clear_has_activityname();
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// GeneralTypes

// optional int32 index = 1;
inline bool GeneralTypes::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GeneralTypes::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GeneralTypes::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GeneralTypes::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 GeneralTypes::index() const {
  return index_;
}
inline void GeneralTypes::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional string des = 2;
inline bool GeneralTypes::has_des() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GeneralTypes::set_has_des() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GeneralTypes::clear_has_des() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GeneralTypes::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& GeneralTypes::des() const {
  return *des_;
}
inline void GeneralTypes::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void GeneralTypes::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void GeneralTypes::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GeneralTypes::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* GeneralTypes::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GeneralTypes::set_allocated_des(::std::string* des) {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (des) {
    set_has_des();
    des_ = des;
  } else {
    clear_has_des();
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 value = 3;
inline bool GeneralTypes::has_value() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GeneralTypes::set_has_value() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GeneralTypes::clear_has_value() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GeneralTypes::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 GeneralTypes::value() const {
  return value_;
}
inline void GeneralTypes::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// repeated int32 item_id = 4;
inline int GeneralTypes::item_id_size() const {
  return item_id_.size();
}
inline void GeneralTypes::clear_item_id() {
  item_id_.Clear();
}
inline ::google::protobuf::int32 GeneralTypes::item_id(int index) const {
  return item_id_.Get(index);
}
inline void GeneralTypes::set_item_id(int index, ::google::protobuf::int32 value) {
  item_id_.Set(index, value);
}
inline void GeneralTypes::add_item_id(::google::protobuf::int32 value) {
  item_id_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GeneralTypes::item_id() const {
  return item_id_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GeneralTypes::mutable_item_id() {
  return &item_id_;
}

// repeated int32 item_num = 5;
inline int GeneralTypes::item_num_size() const {
  return item_num_.size();
}
inline void GeneralTypes::clear_item_num() {
  item_num_.Clear();
}
inline ::google::protobuf::int32 GeneralTypes::item_num(int index) const {
  return item_num_.Get(index);
}
inline void GeneralTypes::set_item_num(int index, ::google::protobuf::int32 value) {
  item_num_.Set(index, value);
}
inline void GeneralTypes::add_item_num(::google::protobuf::int32 value) {
  item_num_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GeneralTypes::item_num() const {
  return item_num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GeneralTypes::mutable_item_num() {
  return &item_num_;
}

// -------------------------------------------------------------------

// General

// required string activityName = 1;
inline bool General::has_activityname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void General::set_has_activityname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void General::clear_has_activityname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void General::clear_activityname() {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    activityname_->clear();
  }
  clear_has_activityname();
}
inline const ::std::string& General::activityname() const {
  return *activityname_;
}
inline void General::set_activityname(const ::std::string& value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void General::set_activityname(const char* value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void General::set_activityname(const char* value, size_t size) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* General::mutable_activityname() {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  return activityname_;
}
inline ::std::string* General::release_activityname() {
  clear_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activityname_;
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void General::set_allocated_activityname(::std::string* activityname) {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (activityname) {
    set_has_activityname();
    activityname_ = activityname;
  } else {
    clear_has_activityname();
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 beginTime = 2;
inline bool General::has_begintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void General::set_has_begintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void General::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void General::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::int64 General::begintime() const {
  return begintime_;
}
inline void General::set_begintime(::google::protobuf::int64 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional int64 endTime = 3;
inline bool General::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void General::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void General::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void General::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 General::endtime() const {
  return endtime_;
}
inline void General::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional int64 rewardTime = 4;
inline bool General::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void General::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void General::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void General::clear_rewardtime() {
  rewardtime_ = GOOGLE_LONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::int64 General::rewardtime() const {
  return rewardtime_;
}
inline void General::set_rewardtime(::google::protobuf::int64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
}

// optional int32 status = 5;
inline bool General::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void General::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void General::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void General::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 General::status() const {
  return status_;
}
inline void General::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional string des = 6;
inline bool General::has_des() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void General::set_has_des() {
  _has_bits_[0] |= 0x00000020u;
}
inline void General::clear_has_des() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void General::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& General::des() const {
  return *des_;
}
inline void General::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void General::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void General::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* General::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* General::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void General::set_allocated_des(::std::string* des) {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (des) {
    set_has_des();
    des_ = des;
  } else {
    clear_has_des();
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ActivitiesProto.GeneralTypes data = 7;
inline int General::data_size() const {
  return data_.size();
}
inline void General::clear_data() {
  data_.Clear();
}
inline const ::ActivitiesProto::GeneralTypes& General::data(int index) const {
  return data_.Get(index);
}
inline ::ActivitiesProto::GeneralTypes* General::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::ActivitiesProto::GeneralTypes* General::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::GeneralTypes >&
General::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::GeneralTypes >*
General::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// RelayRechargeInfo

// optional int32 index = 1;
inline bool RelayRechargeInfo::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelayRechargeInfo::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelayRechargeInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelayRechargeInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 RelayRechargeInfo::index() const {
  return index_;
}
inline void RelayRechargeInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// repeated int32 itemId = 2;
inline int RelayRechargeInfo::itemid_size() const {
  return itemid_.size();
}
inline void RelayRechargeInfo::clear_itemid() {
  itemid_.Clear();
}
inline ::google::protobuf::int32 RelayRechargeInfo::itemid(int index) const {
  return itemid_.Get(index);
}
inline void RelayRechargeInfo::set_itemid(int index, ::google::protobuf::int32 value) {
  itemid_.Set(index, value);
}
inline void RelayRechargeInfo::add_itemid(::google::protobuf::int32 value) {
  itemid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RelayRechargeInfo::itemid() const {
  return itemid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RelayRechargeInfo::mutable_itemid() {
  return &itemid_;
}

// repeated int32 itemNum = 3;
inline int RelayRechargeInfo::itemnum_size() const {
  return itemnum_.size();
}
inline void RelayRechargeInfo::clear_itemnum() {
  itemnum_.Clear();
}
inline ::google::protobuf::int32 RelayRechargeInfo::itemnum(int index) const {
  return itemnum_.Get(index);
}
inline void RelayRechargeInfo::set_itemnum(int index, ::google::protobuf::int32 value) {
  itemnum_.Set(index, value);
}
inline void RelayRechargeInfo::add_itemnum(::google::protobuf::int32 value) {
  itemnum_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
RelayRechargeInfo::itemnum() const {
  return itemnum_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
RelayRechargeInfo::mutable_itemnum() {
  return &itemnum_;
}

// optional int32 rechargegolden = 4;
inline bool RelayRechargeInfo::has_rechargegolden() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RelayRechargeInfo::set_has_rechargegolden() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RelayRechargeInfo::clear_has_rechargegolden() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RelayRechargeInfo::clear_rechargegolden() {
  rechargegolden_ = 0;
  clear_has_rechargegolden();
}
inline ::google::protobuf::int32 RelayRechargeInfo::rechargegolden() const {
  return rechargegolden_;
}
inline void RelayRechargeInfo::set_rechargegolden(::google::protobuf::int32 value) {
  set_has_rechargegolden();
  rechargegolden_ = value;
}

// optional int32 rechargepeople = 5;
inline bool RelayRechargeInfo::has_rechargepeople() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RelayRechargeInfo::set_has_rechargepeople() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RelayRechargeInfo::clear_has_rechargepeople() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RelayRechargeInfo::clear_rechargepeople() {
  rechargepeople_ = 0;
  clear_has_rechargepeople();
}
inline ::google::protobuf::int32 RelayRechargeInfo::rechargepeople() const {
  return rechargepeople_;
}
inline void RelayRechargeInfo::set_rechargepeople(::google::protobuf::int32 value) {
  set_has_rechargepeople();
  rechargepeople_ = value;
}

// -------------------------------------------------------------------

// RelayRecharge

// required string activityName = 1;
inline bool RelayRecharge::has_activityname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RelayRecharge::set_has_activityname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RelayRecharge::clear_has_activityname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RelayRecharge::clear_activityname() {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    activityname_->clear();
  }
  clear_has_activityname();
}
inline const ::std::string& RelayRecharge::activityname() const {
  return *activityname_;
}
inline void RelayRecharge::set_activityname(const ::std::string& value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void RelayRecharge::set_activityname(const char* value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void RelayRecharge::set_activityname(const char* value, size_t size) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RelayRecharge::mutable_activityname() {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  return activityname_;
}
inline ::std::string* RelayRecharge::release_activityname() {
  clear_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activityname_;
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RelayRecharge::set_allocated_activityname(::std::string* activityname) {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (activityname) {
    set_has_activityname();
    activityname_ = activityname;
  } else {
    clear_has_activityname();
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 beginTime = 2;
inline bool RelayRecharge::has_begintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RelayRecharge::set_has_begintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RelayRecharge::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RelayRecharge::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::int64 RelayRecharge::begintime() const {
  return begintime_;
}
inline void RelayRecharge::set_begintime(::google::protobuf::int64 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional int64 endTime = 3;
inline bool RelayRecharge::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RelayRecharge::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RelayRecharge::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RelayRecharge::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 RelayRecharge::endtime() const {
  return endtime_;
}
inline void RelayRecharge::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional int64 rewardTime = 4;
inline bool RelayRecharge::has_rewardtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RelayRecharge::set_has_rewardtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RelayRecharge::clear_has_rewardtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RelayRecharge::clear_rewardtime() {
  rewardtime_ = GOOGLE_LONGLONG(0);
  clear_has_rewardtime();
}
inline ::google::protobuf::int64 RelayRecharge::rewardtime() const {
  return rewardtime_;
}
inline void RelayRecharge::set_rewardtime(::google::protobuf::int64 value) {
  set_has_rewardtime();
  rewardtime_ = value;
}

// optional int32 status = 5;
inline bool RelayRecharge::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void RelayRecharge::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void RelayRecharge::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void RelayRecharge::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 RelayRecharge::status() const {
  return status_;
}
inline void RelayRecharge::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional string des = 6;
inline bool RelayRecharge::has_des() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void RelayRecharge::set_has_des() {
  _has_bits_[0] |= 0x00000020u;
}
inline void RelayRecharge::clear_has_des() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void RelayRecharge::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& RelayRecharge::des() const {
  return *des_;
}
inline void RelayRecharge::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void RelayRecharge::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void RelayRecharge::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RelayRecharge::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* RelayRecharge::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RelayRecharge::set_allocated_des(::std::string* des) {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (des) {
    set_has_des();
    des_ = des;
  } else {
    clear_has_des();
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated .ActivitiesProto.RelayRechargeInfo data = 7;
inline int RelayRecharge::data_size() const {
  return data_.size();
}
inline void RelayRecharge::clear_data() {
  data_.Clear();
}
inline const ::ActivitiesProto::RelayRechargeInfo& RelayRecharge::data(int index) const {
  return data_.Get(index);
}
inline ::ActivitiesProto::RelayRechargeInfo* RelayRecharge::mutable_data(int index) {
  return data_.Mutable(index);
}
inline ::ActivitiesProto::RelayRechargeInfo* RelayRecharge::add_data() {
  return data_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::RelayRechargeInfo >&
RelayRecharge::data() const {
  return data_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::RelayRechargeInfo >*
RelayRecharge::mutable_data() {
  return &data_;
}

// -------------------------------------------------------------------

// Compensate

// required string activityName = 1;
inline bool Compensate::has_activityname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Compensate::set_has_activityname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Compensate::clear_has_activityname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Compensate::clear_activityname() {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    activityname_->clear();
  }
  clear_has_activityname();
}
inline const ::std::string& Compensate::activityname() const {
  return *activityname_;
}
inline void Compensate::set_activityname(const ::std::string& value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void Compensate::set_activityname(const char* value) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(value);
}
inline void Compensate::set_activityname(const char* value, size_t size) {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  activityname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Compensate::mutable_activityname() {
  set_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    activityname_ = new ::std::string;
  }
  return activityname_;
}
inline ::std::string* Compensate::release_activityname() {
  clear_has_activityname();
  if (activityname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = activityname_;
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Compensate::set_allocated_activityname(::std::string* activityname) {
  if (activityname_ != &::google::protobuf::internal::kEmptyString) {
    delete activityname_;
  }
  if (activityname) {
    set_has_activityname();
    activityname_ = activityname;
  } else {
    clear_has_activityname();
    activityname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 beginTime = 2;
inline bool Compensate::has_begintime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Compensate::set_has_begintime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Compensate::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Compensate::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::int64 Compensate::begintime() const {
  return begintime_;
}
inline void Compensate::set_begintime(::google::protobuf::int64 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional int64 endTime = 3;
inline bool Compensate::has_endtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Compensate::set_has_endtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Compensate::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Compensate::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 Compensate::endtime() const {
  return endtime_;
}
inline void Compensate::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional int64 AnnounceTime = 4;
inline bool Compensate::has_announcetime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Compensate::set_has_announcetime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Compensate::clear_has_announcetime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Compensate::clear_announcetime() {
  announcetime_ = GOOGLE_LONGLONG(0);
  clear_has_announcetime();
}
inline ::google::protobuf::int64 Compensate::announcetime() const {
  return announcetime_;
}
inline void Compensate::set_announcetime(::google::protobuf::int64 value) {
  set_has_announcetime();
  announcetime_ = value;
}

// optional int32 status = 5;
inline bool Compensate::has_status() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Compensate::set_has_status() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Compensate::clear_has_status() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Compensate::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 Compensate::status() const {
  return status_;
}
inline void Compensate::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional string des = 6;
inline bool Compensate::has_des() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Compensate::set_has_des() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Compensate::clear_has_des() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Compensate::clear_des() {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    des_->clear();
  }
  clear_has_des();
}
inline const ::std::string& Compensate::des() const {
  return *des_;
}
inline void Compensate::set_des(const ::std::string& value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void Compensate::set_des(const char* value) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(value);
}
inline void Compensate::set_des(const char* value, size_t size) {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  des_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Compensate::mutable_des() {
  set_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    des_ = new ::std::string;
  }
  return des_;
}
inline ::std::string* Compensate::release_des() {
  clear_has_des();
  if (des_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = des_;
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Compensate::set_allocated_des(::std::string* des) {
  if (des_ != &::google::protobuf::internal::kEmptyString) {
    delete des_;
  }
  if (des) {
    set_has_des();
    des_ = des;
  } else {
    clear_has_des();
    des_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated int32 itemId = 7;
inline int Compensate::itemid_size() const {
  return itemid_.size();
}
inline void Compensate::clear_itemid() {
  itemid_.Clear();
}
inline ::google::protobuf::int32 Compensate::itemid(int index) const {
  return itemid_.Get(index);
}
inline void Compensate::set_itemid(int index, ::google::protobuf::int32 value) {
  itemid_.Set(index, value);
}
inline void Compensate::add_itemid(::google::protobuf::int32 value) {
  itemid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Compensate::itemid() const {
  return itemid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Compensate::mutable_itemid() {
  return &itemid_;
}

// repeated int32 itemNum = 8;
inline int Compensate::itemnum_size() const {
  return itemnum_.size();
}
inline void Compensate::clear_itemnum() {
  itemnum_.Clear();
}
inline ::google::protobuf::int32 Compensate::itemnum(int index) const {
  return itemnum_.Get(index);
}
inline void Compensate::set_itemnum(int index, ::google::protobuf::int32 value) {
  itemnum_.Set(index, value);
}
inline void Compensate::add_itemnum(::google::protobuf::int32 value) {
  itemnum_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
Compensate::itemnum() const {
  return itemnum_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
Compensate::mutable_itemnum() {
  return &itemnum_;
}

// -------------------------------------------------------------------

// ToGMActivityState

// repeated int64 charID = 1;
inline int ToGMActivityState::charid_size() const {
  return charid_.size();
}
inline void ToGMActivityState::clear_charid() {
  charid_.Clear();
}
inline ::google::protobuf::int64 ToGMActivityState::charid(int index) const {
  return charid_.Get(index);
}
inline void ToGMActivityState::set_charid(int index, ::google::protobuf::int64 value) {
  charid_.Set(index, value);
}
inline void ToGMActivityState::add_charid(::google::protobuf::int64 value) {
  charid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ToGMActivityState::charid() const {
  return charid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ToGMActivityState::mutable_charid() {
  return &charid_;
}

// repeated .ActivitiesProto.ActivityStateList list = 2;
inline int ToGMActivityState::list_size() const {
  return list_.size();
}
inline void ToGMActivityState::clear_list() {
  list_.Clear();
}
inline const ::ActivitiesProto::ActivityStateList& ToGMActivityState::list(int index) const {
  return list_.Get(index);
}
inline ::ActivitiesProto::ActivityStateList* ToGMActivityState::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::ActivitiesProto::ActivityStateList* ToGMActivityState::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::ActivityStateList >&
ToGMActivityState::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::ActivityStateList >*
ToGMActivityState::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// ActivityStateList

// repeated .ActivitiesProto.ActivityState states = 1;
inline int ActivityStateList::states_size() const {
  return states_.size();
}
inline void ActivityStateList::clear_states() {
  states_.Clear();
}
inline const ::ActivitiesProto::ActivityState& ActivityStateList::states(int index) const {
  return states_.Get(index);
}
inline ::ActivitiesProto::ActivityState* ActivityStateList::mutable_states(int index) {
  return states_.Mutable(index);
}
inline ::ActivitiesProto::ActivityState* ActivityStateList::add_states() {
  return states_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::ActivityState >&
ActivityStateList::states() const {
  return states_;
}
inline ::google::protobuf::RepeatedPtrField< ::ActivitiesProto::ActivityState >*
ActivityStateList::mutable_states() {
  return &states_;
}

// -------------------------------------------------------------------

// ActivityState

// optional int32 type = 1;
inline bool ActivityState::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityState::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityState::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityState::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ActivityState::type() const {
  return type_;
}
inline void ActivityState::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional bool flag = 2;
inline bool ActivityState::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityState::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityState::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityState::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool ActivityState::flag() const {
  return flag_;
}
inline void ActivityState::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// optional int32 num = 3;
inline bool ActivityState::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityState::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityState::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityState::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ActivityState::num() const {
  return num_;
}
inline void ActivityState::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ActivitiesProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MSProtoc_2fMS_5fActivities_2eproto__INCLUDED
