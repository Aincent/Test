// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/Monitor.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharLogin/Monitor.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Monitor {

namespace {

const ::google::protobuf::Descriptor* SaveMonitor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SaveMonitor_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToGMSaveMonitor_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToGMSaveMonitor_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharLogin_2fMonitor_2eproto() {
  protobuf_AddDesc_CharLogin_2fMonitor_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharLogin/Monitor.proto");
  GOOGLE_CHECK(file != NULL);
  SaveMonitor_descriptor_ = file->message_type(0);
  static const int SaveMonitor_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMonitor, info_),
  };
  SaveMonitor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SaveMonitor_descriptor_,
      SaveMonitor::default_instance_,
      SaveMonitor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMonitor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SaveMonitor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SaveMonitor));
  ToGMSaveMonitor_descriptor_ = file->message_type(1);
  static const int ToGMSaveMonitor_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMSaveMonitor, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMSaveMonitor, monitor_),
  };
  ToGMSaveMonitor_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToGMSaveMonitor_descriptor_,
      ToGMSaveMonitor::default_instance_,
      ToGMSaveMonitor_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMSaveMonitor, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToGMSaveMonitor, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToGMSaveMonitor));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharLogin_2fMonitor_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SaveMonitor_descriptor_, &SaveMonitor::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToGMSaveMonitor_descriptor_, &ToGMSaveMonitor::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharLogin_2fMonitor_2eproto() {
  delete SaveMonitor::default_instance_;
  delete SaveMonitor_reflection_;
  delete ToGMSaveMonitor::default_instance_;
  delete ToGMSaveMonitor_reflection_;
}

void protobuf_AddDesc_CharLogin_2fMonitor_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::PlayerInfo::protobuf_AddDesc_CharLogin_2fPlayerInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\027CharLogin/Monitor.proto\022\007Monitor\032\032Char"
    "Login/PlayerInfo.proto\"4\n\013SaveMonitor\022%\n"
    "\004info\030\001 \001(\0132\027.PlayerInfo.MonitorInfo\"H\n\017"
    "ToGMSaveMonitor\022\016\n\006charid\030\001 \002(\003\022%\n\007monit"
    "or\030\002 \001(\0132\024.Monitor.SaveMonitor", 190);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharLogin/Monitor.proto", &protobuf_RegisterTypes);
  SaveMonitor::default_instance_ = new SaveMonitor();
  ToGMSaveMonitor::default_instance_ = new ToGMSaveMonitor();
  SaveMonitor::default_instance_->InitAsDefaultInstance();
  ToGMSaveMonitor::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharLogin_2fMonitor_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharLogin_2fMonitor_2eproto {
  StaticDescriptorInitializer_CharLogin_2fMonitor_2eproto() {
    protobuf_AddDesc_CharLogin_2fMonitor_2eproto();
  }
} static_descriptor_initializer_CharLogin_2fMonitor_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int SaveMonitor::kInfoFieldNumber;
#endif  // !_MSC_VER

SaveMonitor::SaveMonitor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SaveMonitor::InitAsDefaultInstance() {
  info_ = const_cast< ::PlayerInfo::MonitorInfo*>(&::PlayerInfo::MonitorInfo::default_instance());
}

SaveMonitor::SaveMonitor(const SaveMonitor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SaveMonitor::SharedCtor() {
  _cached_size_ = 0;
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SaveMonitor::~SaveMonitor() {
  SharedDtor();
}

void SaveMonitor::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SaveMonitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SaveMonitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SaveMonitor_descriptor_;
}

const SaveMonitor& SaveMonitor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMonitor_2eproto();
  return *default_instance_;
}

SaveMonitor* SaveMonitor::default_instance_ = NULL;

SaveMonitor* SaveMonitor::New() const {
  return new SaveMonitor;
}

void SaveMonitor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerInfo::MonitorInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SaveMonitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional .PlayerInfo.MonitorInfo info = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SaveMonitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional .PlayerInfo.MonitorInfo info = 1;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SaveMonitor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional .PlayerInfo.MonitorInfo info = 1;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SaveMonitor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional .PlayerInfo.MonitorInfo info = 1;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SaveMonitor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SaveMonitor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SaveMonitor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SaveMonitor::MergeFrom(const SaveMonitor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_info()) {
      mutable_info()->::PlayerInfo::MonitorInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SaveMonitor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SaveMonitor::CopyFrom(const SaveMonitor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SaveMonitor::IsInitialized() const {

  return true;
}

void SaveMonitor::Swap(SaveMonitor* other) {
  if (other != this) {
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SaveMonitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SaveMonitor_descriptor_;
  metadata.reflection = SaveMonitor_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToGMSaveMonitor::kCharidFieldNumber;
const int ToGMSaveMonitor::kMonitorFieldNumber;
#endif  // !_MSC_VER

ToGMSaveMonitor::ToGMSaveMonitor()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToGMSaveMonitor::InitAsDefaultInstance() {
  monitor_ = const_cast< ::Monitor::SaveMonitor*>(&::Monitor::SaveMonitor::default_instance());
}

ToGMSaveMonitor::ToGMSaveMonitor(const ToGMSaveMonitor& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToGMSaveMonitor::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  monitor_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToGMSaveMonitor::~ToGMSaveMonitor() {
  SharedDtor();
}

void ToGMSaveMonitor::SharedDtor() {
  if (this != default_instance_) {
    delete monitor_;
  }
}

void ToGMSaveMonitor::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToGMSaveMonitor::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToGMSaveMonitor_descriptor_;
}

const ToGMSaveMonitor& ToGMSaveMonitor::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fMonitor_2eproto();
  return *default_instance_;
}

ToGMSaveMonitor* ToGMSaveMonitor::default_instance_ = NULL;

ToGMSaveMonitor* ToGMSaveMonitor::New() const {
  return new ToGMSaveMonitor;
}

void ToGMSaveMonitor::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_monitor()) {
      if (monitor_ != NULL) monitor_->::Monitor::SaveMonitor::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToGMSaveMonitor::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monitor;
        break;
      }

      // optional .Monitor.SaveMonitor monitor = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monitor:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_monitor()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToGMSaveMonitor::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional .Monitor.SaveMonitor monitor = 2;
  if (has_monitor()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monitor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToGMSaveMonitor::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional .Monitor.SaveMonitor monitor = 2;
  if (has_monitor()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monitor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToGMSaveMonitor::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional .Monitor.SaveMonitor monitor = 2;
    if (has_monitor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->monitor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToGMSaveMonitor::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToGMSaveMonitor* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToGMSaveMonitor*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToGMSaveMonitor::MergeFrom(const ToGMSaveMonitor& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_monitor()) {
      mutable_monitor()->::Monitor::SaveMonitor::MergeFrom(from.monitor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToGMSaveMonitor::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToGMSaveMonitor::CopyFrom(const ToGMSaveMonitor& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToGMSaveMonitor::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToGMSaveMonitor::Swap(ToGMSaveMonitor* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(monitor_, other->monitor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToGMSaveMonitor::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToGMSaveMonitor_descriptor_;
  metadata.reflection = ToGMSaveMonitor_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Monitor

// @@protoc_insertion_point(global_scope)
