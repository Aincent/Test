// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/NpcTrade.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharLogin/NpcTrade.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NpcTrade {

namespace {

const ::google::protobuf::Descriptor* ClientReqBuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqBuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqSellItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqSellItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTAckToCSellItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTAckToCSellItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqBuyBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqBuyBack_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTtoGMReqBuyItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTtoGMReqBuyItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTtoGMReqSellItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTtoGMReqSellItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMAckToGTSellItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMAckToGTSellItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTtoGMReqBuyBack_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTtoGMReqBuyBack_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharLogin_2fNpcTrade_2eproto() {
  protobuf_AddDesc_CharLogin_2fNpcTrade_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharLogin/NpcTrade.proto");
  GOOGLE_CHECK(file != NULL);
  ClientReqBuyItem_descriptor_ = file->message_type(0);
  static const int ClientReqBuyItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBuyItem, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBuyItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBuyItem, itemnum_),
  };
  ClientReqBuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqBuyItem_descriptor_,
      ClientReqBuyItem::default_instance_,
      ClientReqBuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqBuyItem));
  ClientReqSellItem_descriptor_ = file->message_type(1);
  static const int ClientReqSellItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqSellItem, packetgridid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqSellItem, besuresell_),
  };
  ClientReqSellItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqSellItem_descriptor_,
      ClientReqSellItem::default_instance_,
      ClientReqSellItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqSellItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqSellItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqSellItem));
  GTAckToCSellItem_descriptor_ = file->message_type(2);
  static const int GTAckToCSellItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCSellItem, statusid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCSellItem, iteminfo_),
  };
  GTAckToCSellItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTAckToCSellItem_descriptor_,
      GTAckToCSellItem::default_instance_,
      GTAckToCSellItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCSellItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToCSellItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTAckToCSellItem));
  ClientReqBuyBack_descriptor_ = file->message_type(3);
  static const int ClientReqBuyBack_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBuyBack, buybackindex_),
  };
  ClientReqBuyBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqBuyBack_descriptor_,
      ClientReqBuyBack::default_instance_,
      ClientReqBuyBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBuyBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBuyBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqBuyBack));
  GTtoGMReqBuyItem_descriptor_ = file->message_type(4);
  static const int GTtoGMReqBuyItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqBuyItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqBuyItem, npcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqBuyItem, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqBuyItem, itemnum_),
  };
  GTtoGMReqBuyItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTtoGMReqBuyItem_descriptor_,
      GTtoGMReqBuyItem::default_instance_,
      GTtoGMReqBuyItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqBuyItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqBuyItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTtoGMReqBuyItem));
  GTtoGMReqSellItem_descriptor_ = file->message_type(5);
  static const int GTtoGMReqSellItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqSellItem, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqSellItem, packetgridid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqSellItem, besuresell_),
  };
  GTtoGMReqSellItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTtoGMReqSellItem_descriptor_,
      GTtoGMReqSellItem::default_instance_,
      GTtoGMReqSellItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqSellItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqSellItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTtoGMReqSellItem));
  GMAckToGTSellItem_descriptor_ = file->message_type(6);
  static const int GMAckToGTSellItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAckToGTSellItem, statusid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAckToGTSellItem, iteminfo_),
  };
  GMAckToGTSellItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMAckToGTSellItem_descriptor_,
      GMAckToGTSellItem::default_instance_,
      GMAckToGTSellItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAckToGTSellItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMAckToGTSellItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMAckToGTSellItem));
  GTtoGMReqBuyBack_descriptor_ = file->message_type(7);
  static const int GTtoGMReqBuyBack_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqBuyBack, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqBuyBack, buybackindex_),
  };
  GTtoGMReqBuyBack_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTtoGMReqBuyBack_descriptor_,
      GTtoGMReqBuyBack::default_instance_,
      GTtoGMReqBuyBack_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqBuyBack, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqBuyBack, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTtoGMReqBuyBack));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharLogin_2fNpcTrade_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqBuyItem_descriptor_, &ClientReqBuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqSellItem_descriptor_, &ClientReqSellItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTAckToCSellItem_descriptor_, &GTAckToCSellItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqBuyBack_descriptor_, &ClientReqBuyBack::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTtoGMReqBuyItem_descriptor_, &GTtoGMReqBuyItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTtoGMReqSellItem_descriptor_, &GTtoGMReqSellItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMAckToGTSellItem_descriptor_, &GMAckToGTSellItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTtoGMReqBuyBack_descriptor_, &GTtoGMReqBuyBack::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharLogin_2fNpcTrade_2eproto() {
  delete ClientReqBuyItem::default_instance_;
  delete ClientReqBuyItem_reflection_;
  delete ClientReqSellItem::default_instance_;
  delete ClientReqSellItem_reflection_;
  delete GTAckToCSellItem::default_instance_;
  delete GTAckToCSellItem_reflection_;
  delete ClientReqBuyBack::default_instance_;
  delete ClientReqBuyBack_reflection_;
  delete GTtoGMReqBuyItem::default_instance_;
  delete GTtoGMReqBuyItem_reflection_;
  delete GTtoGMReqSellItem::default_instance_;
  delete GTtoGMReqSellItem_reflection_;
  delete GMAckToGTSellItem::default_instance_;
  delete GMAckToGTSellItem_reflection_;
  delete GTtoGMReqBuyBack::default_instance_;
  delete GTtoGMReqBuyBack_reflection_;
}

void protobuf_AddDesc_CharLogin_2fNpcTrade_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CharLogin::protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030CharLogin/NpcTrade.proto\022\010NpcTrade\032\034Ch"
    "arLogin/CharBaseInfo.proto\"B\n\020ClientReqB"
    "uyItem\022\r\n\005NpcID\030\001 \002(\005\022\016\n\006itemID\030\002 \002(\005\022\017\n"
    "\007itemNum\030\003 \002(\005\"=\n\021ClientReqSellItem\022\024\n\014P"
    "acketGridID\030\001 \002(\005\022\022\n\nBeSureSell\030\002 \001(\005\"Q\n"
    "\020GTAckToCSellItem\022\020\n\010StatusID\030\001 \002(\005\022+\n\010i"
    "temInfo\030\002 \001(\0132\031.CharLogin.ClientItemInfo"
    "\"(\n\020ClientReqBuyBack\022\024\n\014buyBackIndex\030\001 \002"
    "(\005\"R\n\020GTtoGMReqBuyItem\022\016\n\006charid\030\001 \002(\003\022\r"
    "\n\005NpcID\030\002 \002(\005\022\016\n\006itemID\030\003 \002(\005\022\017\n\007itemNum"
    "\030\004 \002(\005\"M\n\021GTtoGMReqSellItem\022\016\n\006charid\030\001 "
    "\002(\003\022\024\n\014PacketGridID\030\002 \002(\005\022\022\n\nBeSureSell\030"
    "\003 \001(\005\"R\n\021GMAckToGTSellItem\022\020\n\010StatusID\030\002"
    " \002(\005\022+\n\010itemInfo\030\003 \002(\0132\031.CharLogin.Clien"
    "tItemInfo\"8\n\020GTtoGMReqBuyBack\022\016\n\006charid\030"
    "\001 \002(\003\022\024\n\014buyBackIndex\030\002 \002(\005", 627);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharLogin/NpcTrade.proto", &protobuf_RegisterTypes);
  ClientReqBuyItem::default_instance_ = new ClientReqBuyItem();
  ClientReqSellItem::default_instance_ = new ClientReqSellItem();
  GTAckToCSellItem::default_instance_ = new GTAckToCSellItem();
  ClientReqBuyBack::default_instance_ = new ClientReqBuyBack();
  GTtoGMReqBuyItem::default_instance_ = new GTtoGMReqBuyItem();
  GTtoGMReqSellItem::default_instance_ = new GTtoGMReqSellItem();
  GMAckToGTSellItem::default_instance_ = new GMAckToGTSellItem();
  GTtoGMReqBuyBack::default_instance_ = new GTtoGMReqBuyBack();
  ClientReqBuyItem::default_instance_->InitAsDefaultInstance();
  ClientReqSellItem::default_instance_->InitAsDefaultInstance();
  GTAckToCSellItem::default_instance_->InitAsDefaultInstance();
  ClientReqBuyBack::default_instance_->InitAsDefaultInstance();
  GTtoGMReqBuyItem::default_instance_->InitAsDefaultInstance();
  GTtoGMReqSellItem::default_instance_->InitAsDefaultInstance();
  GMAckToGTSellItem::default_instance_->InitAsDefaultInstance();
  GTtoGMReqBuyBack::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharLogin_2fNpcTrade_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharLogin_2fNpcTrade_2eproto {
  StaticDescriptorInitializer_CharLogin_2fNpcTrade_2eproto() {
    protobuf_AddDesc_CharLogin_2fNpcTrade_2eproto();
  }
} static_descriptor_initializer_CharLogin_2fNpcTrade_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientReqBuyItem::kNpcIDFieldNumber;
const int ClientReqBuyItem::kItemIDFieldNumber;
const int ClientReqBuyItem::kItemNumFieldNumber;
#endif  // !_MSC_VER

ClientReqBuyItem::ClientReqBuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqBuyItem::InitAsDefaultInstance() {
}

ClientReqBuyItem::ClientReqBuyItem(const ClientReqBuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqBuyItem::SharedCtor() {
  _cached_size_ = 0;
  npcid_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqBuyItem::~ClientReqBuyItem() {
  SharedDtor();
}

void ClientReqBuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqBuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqBuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqBuyItem_descriptor_;
}

const ClientReqBuyItem& ClientReqBuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fNpcTrade_2eproto();
  return *default_instance_;
}

ClientReqBuyItem* ClientReqBuyItem::default_instance_ = NULL;

ClientReqBuyItem* ClientReqBuyItem::New() const {
  return new ClientReqBuyItem;
}

void ClientReqBuyItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    npcid_ = 0;
    itemid_ = 0;
    itemnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 NpcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemID;
        break;
      }

      // required int32 itemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemNum;
        break;
      }

      // required int32 itemNum = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 NpcID = 1;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->npcid(), output);
  }

  // required int32 itemID = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // required int32 itemNum = 3;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqBuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 NpcID = 1;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->npcid(), target);
  }

  // required int32 itemID = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // required int32 itemNum = 3;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqBuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 NpcID = 1;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcid());
    }

    // required int32 itemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 itemNum = 3;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqBuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqBuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqBuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqBuyItem::MergeFrom(const ClientReqBuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqBuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqBuyItem::CopyFrom(const ClientReqBuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqBuyItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientReqBuyItem::Swap(ClientReqBuyItem* other) {
  if (other != this) {
    std::swap(npcid_, other->npcid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqBuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqBuyItem_descriptor_;
  metadata.reflection = ClientReqBuyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqSellItem::kPacketGridIDFieldNumber;
const int ClientReqSellItem::kBeSureSellFieldNumber;
#endif  // !_MSC_VER

ClientReqSellItem::ClientReqSellItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqSellItem::InitAsDefaultInstance() {
}

ClientReqSellItem::ClientReqSellItem(const ClientReqSellItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqSellItem::SharedCtor() {
  _cached_size_ = 0;
  packetgridid_ = 0;
  besuresell_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqSellItem::~ClientReqSellItem() {
  SharedDtor();
}

void ClientReqSellItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqSellItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqSellItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqSellItem_descriptor_;
}

const ClientReqSellItem& ClientReqSellItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fNpcTrade_2eproto();
  return *default_instance_;
}

ClientReqSellItem* ClientReqSellItem::default_instance_ = NULL;

ClientReqSellItem* ClientReqSellItem::New() const {
  return new ClientReqSellItem;
}

void ClientReqSellItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    packetgridid_ = 0;
    besuresell_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqSellItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 PacketGridID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetgridid_)));
          set_has_packetgridid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_BeSureSell;
        break;
      }

      // optional int32 BeSureSell = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeSureSell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &besuresell_)));
          set_has_besuresell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqSellItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 PacketGridID = 1;
  if (has_packetgridid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->packetgridid(), output);
  }

  // optional int32 BeSureSell = 2;
  if (has_besuresell()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->besuresell(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqSellItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 PacketGridID = 1;
  if (has_packetgridid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->packetgridid(), target);
  }

  // optional int32 BeSureSell = 2;
  if (has_besuresell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->besuresell(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqSellItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 PacketGridID = 1;
    if (has_packetgridid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packetgridid());
    }

    // optional int32 BeSureSell = 2;
    if (has_besuresell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->besuresell());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqSellItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqSellItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqSellItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqSellItem::MergeFrom(const ClientReqSellItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_packetgridid()) {
      set_packetgridid(from.packetgridid());
    }
    if (from.has_besuresell()) {
      set_besuresell(from.besuresell());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqSellItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqSellItem::CopyFrom(const ClientReqSellItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqSellItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqSellItem::Swap(ClientReqSellItem* other) {
  if (other != this) {
    std::swap(packetgridid_, other->packetgridid_);
    std::swap(besuresell_, other->besuresell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqSellItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqSellItem_descriptor_;
  metadata.reflection = ClientReqSellItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTAckToCSellItem::kStatusIDFieldNumber;
const int GTAckToCSellItem::kItemInfoFieldNumber;
#endif  // !_MSC_VER

GTAckToCSellItem::GTAckToCSellItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTAckToCSellItem::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::CharLogin::ClientItemInfo*>(&::CharLogin::ClientItemInfo::default_instance());
}

GTAckToCSellItem::GTAckToCSellItem(const GTAckToCSellItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTAckToCSellItem::SharedCtor() {
  _cached_size_ = 0;
  statusid_ = 0;
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTAckToCSellItem::~GTAckToCSellItem() {
  SharedDtor();
}

void GTAckToCSellItem::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void GTAckToCSellItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTAckToCSellItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTAckToCSellItem_descriptor_;
}

const GTAckToCSellItem& GTAckToCSellItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fNpcTrade_2eproto();
  return *default_instance_;
}

GTAckToCSellItem* GTAckToCSellItem::default_instance_ = NULL;

GTAckToCSellItem* GTAckToCSellItem::New() const {
  return new GTAckToCSellItem;
}

void GTAckToCSellItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statusid_ = 0;
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::CharLogin::ClientItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTAckToCSellItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 StatusID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statusid_)));
          set_has_statusid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_itemInfo;
        break;
      }

      // optional .CharLogin.ClientItemInfo itemInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTAckToCSellItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 StatusID = 1;
  if (has_statusid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->statusid(), output);
  }

  // optional .CharLogin.ClientItemInfo itemInfo = 2;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTAckToCSellItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 StatusID = 1;
  if (has_statusid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->statusid(), target);
  }

  // optional .CharLogin.ClientItemInfo itemInfo = 2;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTAckToCSellItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 StatusID = 1;
    if (has_statusid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statusid());
    }

    // optional .CharLogin.ClientItemInfo itemInfo = 2;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTAckToCSellItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTAckToCSellItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTAckToCSellItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTAckToCSellItem::MergeFrom(const GTAckToCSellItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statusid()) {
      set_statusid(from.statusid());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::CharLogin::ClientItemInfo::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTAckToCSellItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAckToCSellItem::CopyFrom(const GTAckToCSellItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTAckToCSellItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_iteminfo()) {
    if (!this->iteminfo().IsInitialized()) return false;
  }
  return true;
}

void GTAckToCSellItem::Swap(GTAckToCSellItem* other) {
  if (other != this) {
    std::swap(statusid_, other->statusid_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTAckToCSellItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTAckToCSellItem_descriptor_;
  metadata.reflection = GTAckToCSellItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqBuyBack::kBuyBackIndexFieldNumber;
#endif  // !_MSC_VER

ClientReqBuyBack::ClientReqBuyBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqBuyBack::InitAsDefaultInstance() {
}

ClientReqBuyBack::ClientReqBuyBack(const ClientReqBuyBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqBuyBack::SharedCtor() {
  _cached_size_ = 0;
  buybackindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqBuyBack::~ClientReqBuyBack() {
  SharedDtor();
}

void ClientReqBuyBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqBuyBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqBuyBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqBuyBack_descriptor_;
}

const ClientReqBuyBack& ClientReqBuyBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fNpcTrade_2eproto();
  return *default_instance_;
}

ClientReqBuyBack* ClientReqBuyBack::default_instance_ = NULL;

ClientReqBuyBack* ClientReqBuyBack::New() const {
  return new ClientReqBuyBack;
}

void ClientReqBuyBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    buybackindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqBuyBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 buyBackIndex = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buybackindex_)));
          set_has_buybackindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqBuyBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 buyBackIndex = 1;
  if (has_buybackindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->buybackindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqBuyBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 buyBackIndex = 1;
  if (has_buybackindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->buybackindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqBuyBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 buyBackIndex = 1;
    if (has_buybackindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buybackindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqBuyBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqBuyBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqBuyBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqBuyBack::MergeFrom(const ClientReqBuyBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_buybackindex()) {
      set_buybackindex(from.buybackindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqBuyBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqBuyBack::CopyFrom(const ClientReqBuyBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqBuyBack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqBuyBack::Swap(ClientReqBuyBack* other) {
  if (other != this) {
    std::swap(buybackindex_, other->buybackindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqBuyBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqBuyBack_descriptor_;
  metadata.reflection = ClientReqBuyBack_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTtoGMReqBuyItem::kCharidFieldNumber;
const int GTtoGMReqBuyItem::kNpcIDFieldNumber;
const int GTtoGMReqBuyItem::kItemIDFieldNumber;
const int GTtoGMReqBuyItem::kItemNumFieldNumber;
#endif  // !_MSC_VER

GTtoGMReqBuyItem::GTtoGMReqBuyItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTtoGMReqBuyItem::InitAsDefaultInstance() {
}

GTtoGMReqBuyItem::GTtoGMReqBuyItem(const GTtoGMReqBuyItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTtoGMReqBuyItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  npcid_ = 0;
  itemid_ = 0;
  itemnum_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTtoGMReqBuyItem::~GTtoGMReqBuyItem() {
  SharedDtor();
}

void GTtoGMReqBuyItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTtoGMReqBuyItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTtoGMReqBuyItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTtoGMReqBuyItem_descriptor_;
}

const GTtoGMReqBuyItem& GTtoGMReqBuyItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fNpcTrade_2eproto();
  return *default_instance_;
}

GTtoGMReqBuyItem* GTtoGMReqBuyItem::default_instance_ = NULL;

GTtoGMReqBuyItem* GTtoGMReqBuyItem::New() const {
  return new GTtoGMReqBuyItem;
}

void GTtoGMReqBuyItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    npcid_ = 0;
    itemid_ = 0;
    itemnum_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTtoGMReqBuyItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_NpcID;
        break;
      }

      // required int32 NpcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_NpcID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &npcid_)));
          set_has_npcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemID;
        break;
      }

      // required int32 itemID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemNum;
        break;
      }

      // required int32 itemNum = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemnum_)));
          set_has_itemnum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTtoGMReqBuyItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 NpcID = 2;
  if (has_npcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->npcid(), output);
  }

  // required int32 itemID = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // required int32 itemNum = 4;
  if (has_itemnum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->itemnum(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTtoGMReqBuyItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 NpcID = 2;
  if (has_npcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->npcid(), target);
  }

  // required int32 itemID = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // required int32 itemNum = 4;
  if (has_itemnum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->itemnum(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTtoGMReqBuyItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 NpcID = 2;
    if (has_npcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->npcid());
    }

    // required int32 itemID = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 itemNum = 4;
    if (has_itemnum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemnum());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTtoGMReqBuyItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTtoGMReqBuyItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTtoGMReqBuyItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTtoGMReqBuyItem::MergeFrom(const GTtoGMReqBuyItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_npcid()) {
      set_npcid(from.npcid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_itemnum()) {
      set_itemnum(from.itemnum());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTtoGMReqBuyItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTtoGMReqBuyItem::CopyFrom(const GTtoGMReqBuyItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTtoGMReqBuyItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000f) != 0x0000000f) return false;

  return true;
}

void GTtoGMReqBuyItem::Swap(GTtoGMReqBuyItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(npcid_, other->npcid_);
    std::swap(itemid_, other->itemid_);
    std::swap(itemnum_, other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTtoGMReqBuyItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTtoGMReqBuyItem_descriptor_;
  metadata.reflection = GTtoGMReqBuyItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTtoGMReqSellItem::kCharidFieldNumber;
const int GTtoGMReqSellItem::kPacketGridIDFieldNumber;
const int GTtoGMReqSellItem::kBeSureSellFieldNumber;
#endif  // !_MSC_VER

GTtoGMReqSellItem::GTtoGMReqSellItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTtoGMReqSellItem::InitAsDefaultInstance() {
}

GTtoGMReqSellItem::GTtoGMReqSellItem(const GTtoGMReqSellItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTtoGMReqSellItem::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  packetgridid_ = 0;
  besuresell_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTtoGMReqSellItem::~GTtoGMReqSellItem() {
  SharedDtor();
}

void GTtoGMReqSellItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTtoGMReqSellItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTtoGMReqSellItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTtoGMReqSellItem_descriptor_;
}

const GTtoGMReqSellItem& GTtoGMReqSellItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fNpcTrade_2eproto();
  return *default_instance_;
}

GTtoGMReqSellItem* GTtoGMReqSellItem::default_instance_ = NULL;

GTtoGMReqSellItem* GTtoGMReqSellItem::New() const {
  return new GTtoGMReqSellItem;
}

void GTtoGMReqSellItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    packetgridid_ = 0;
    besuresell_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTtoGMReqSellItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_PacketGridID;
        break;
      }

      // required int32 PacketGridID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_PacketGridID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &packetgridid_)));
          set_has_packetgridid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_BeSureSell;
        break;
      }

      // optional int32 BeSureSell = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_BeSureSell:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &besuresell_)));
          set_has_besuresell();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTtoGMReqSellItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 PacketGridID = 2;
  if (has_packetgridid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->packetgridid(), output);
  }

  // optional int32 BeSureSell = 3;
  if (has_besuresell()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->besuresell(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTtoGMReqSellItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 PacketGridID = 2;
  if (has_packetgridid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->packetgridid(), target);
  }

  // optional int32 BeSureSell = 3;
  if (has_besuresell()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->besuresell(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTtoGMReqSellItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 PacketGridID = 2;
    if (has_packetgridid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->packetgridid());
    }

    // optional int32 BeSureSell = 3;
    if (has_besuresell()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->besuresell());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTtoGMReqSellItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTtoGMReqSellItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTtoGMReqSellItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTtoGMReqSellItem::MergeFrom(const GTtoGMReqSellItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_packetgridid()) {
      set_packetgridid(from.packetgridid());
    }
    if (from.has_besuresell()) {
      set_besuresell(from.besuresell());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTtoGMReqSellItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTtoGMReqSellItem::CopyFrom(const GTtoGMReqSellItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTtoGMReqSellItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GTtoGMReqSellItem::Swap(GTtoGMReqSellItem* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(packetgridid_, other->packetgridid_);
    std::swap(besuresell_, other->besuresell_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTtoGMReqSellItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTtoGMReqSellItem_descriptor_;
  metadata.reflection = GTtoGMReqSellItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMAckToGTSellItem::kStatusIDFieldNumber;
const int GMAckToGTSellItem::kItemInfoFieldNumber;
#endif  // !_MSC_VER

GMAckToGTSellItem::GMAckToGTSellItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMAckToGTSellItem::InitAsDefaultInstance() {
  iteminfo_ = const_cast< ::CharLogin::ClientItemInfo*>(&::CharLogin::ClientItemInfo::default_instance());
}

GMAckToGTSellItem::GMAckToGTSellItem(const GMAckToGTSellItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMAckToGTSellItem::SharedCtor() {
  _cached_size_ = 0;
  statusid_ = 0;
  iteminfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMAckToGTSellItem::~GMAckToGTSellItem() {
  SharedDtor();
}

void GMAckToGTSellItem::SharedDtor() {
  if (this != default_instance_) {
    delete iteminfo_;
  }
}

void GMAckToGTSellItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMAckToGTSellItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMAckToGTSellItem_descriptor_;
}

const GMAckToGTSellItem& GMAckToGTSellItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fNpcTrade_2eproto();
  return *default_instance_;
}

GMAckToGTSellItem* GMAckToGTSellItem::default_instance_ = NULL;

GMAckToGTSellItem* GMAckToGTSellItem::New() const {
  return new GMAckToGTSellItem;
}

void GMAckToGTSellItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    statusid_ = 0;
    if (has_iteminfo()) {
      if (iteminfo_ != NULL) iteminfo_->::CharLogin::ClientItemInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMAckToGTSellItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 StatusID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statusid_)));
          set_has_statusid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_itemInfo;
        break;
      }

      // required .CharLogin.ClientItemInfo itemInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_iteminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMAckToGTSellItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 StatusID = 2;
  if (has_statusid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->statusid(), output);
  }

  // required .CharLogin.ClientItemInfo itemInfo = 3;
  if (has_iteminfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->iteminfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMAckToGTSellItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 StatusID = 2;
  if (has_statusid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->statusid(), target);
  }

  // required .CharLogin.ClientItemInfo itemInfo = 3;
  if (has_iteminfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->iteminfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMAckToGTSellItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 StatusID = 2;
    if (has_statusid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statusid());
    }

    // required .CharLogin.ClientItemInfo itemInfo = 3;
    if (has_iteminfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->iteminfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMAckToGTSellItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMAckToGTSellItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMAckToGTSellItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMAckToGTSellItem::MergeFrom(const GMAckToGTSellItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_statusid()) {
      set_statusid(from.statusid());
    }
    if (from.has_iteminfo()) {
      mutable_iteminfo()->::CharLogin::ClientItemInfo::MergeFrom(from.iteminfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMAckToGTSellItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMAckToGTSellItem::CopyFrom(const GMAckToGTSellItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMAckToGTSellItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_iteminfo()) {
    if (!this->iteminfo().IsInitialized()) return false;
  }
  return true;
}

void GMAckToGTSellItem::Swap(GMAckToGTSellItem* other) {
  if (other != this) {
    std::swap(statusid_, other->statusid_);
    std::swap(iteminfo_, other->iteminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMAckToGTSellItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMAckToGTSellItem_descriptor_;
  metadata.reflection = GMAckToGTSellItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTtoGMReqBuyBack::kCharidFieldNumber;
const int GTtoGMReqBuyBack::kBuyBackIndexFieldNumber;
#endif  // !_MSC_VER

GTtoGMReqBuyBack::GTtoGMReqBuyBack()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTtoGMReqBuyBack::InitAsDefaultInstance() {
}

GTtoGMReqBuyBack::GTtoGMReqBuyBack(const GTtoGMReqBuyBack& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTtoGMReqBuyBack::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  buybackindex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTtoGMReqBuyBack::~GTtoGMReqBuyBack() {
  SharedDtor();
}

void GTtoGMReqBuyBack::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTtoGMReqBuyBack::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTtoGMReqBuyBack::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTtoGMReqBuyBack_descriptor_;
}

const GTtoGMReqBuyBack& GTtoGMReqBuyBack::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fNpcTrade_2eproto();
  return *default_instance_;
}

GTtoGMReqBuyBack* GTtoGMReqBuyBack::default_instance_ = NULL;

GTtoGMReqBuyBack* GTtoGMReqBuyBack::New() const {
  return new GTtoGMReqBuyBack;
}

void GTtoGMReqBuyBack::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    buybackindex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTtoGMReqBuyBack::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_buyBackIndex;
        break;
      }

      // required int32 buyBackIndex = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyBackIndex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buybackindex_)));
          set_has_buybackindex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTtoGMReqBuyBack::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 buyBackIndex = 2;
  if (has_buybackindex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->buybackindex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTtoGMReqBuyBack::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 buyBackIndex = 2;
  if (has_buybackindex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->buybackindex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTtoGMReqBuyBack::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 buyBackIndex = 2;
    if (has_buybackindex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buybackindex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTtoGMReqBuyBack::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTtoGMReqBuyBack* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTtoGMReqBuyBack*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTtoGMReqBuyBack::MergeFrom(const GTtoGMReqBuyBack& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_buybackindex()) {
      set_buybackindex(from.buybackindex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTtoGMReqBuyBack::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTtoGMReqBuyBack::CopyFrom(const GTtoGMReqBuyBack& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTtoGMReqBuyBack::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GTtoGMReqBuyBack::Swap(GTtoGMReqBuyBack* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(buybackindex_, other->buybackindex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTtoGMReqBuyBack::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTtoGMReqBuyBack_descriptor_;
  metadata.reflection = GTtoGMReqBuyBack_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NpcTrade

// @@protoc_insertion_point(global_scope)
