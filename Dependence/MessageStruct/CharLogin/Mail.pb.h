// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/Mail.proto

#ifndef PROTOBUF_CharLogin_2fMail_2eproto__INCLUDED
#define PROTOBUF_CharLogin_2fMail_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CharLogin/CharBaseInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace MailInfo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CharLogin_2fMail_2eproto();
void protobuf_AssignDesc_CharLogin_2fMail_2eproto();
void protobuf_ShutdownFile_CharLogin_2fMail_2eproto();

class SpecialItem;
class SpecialMailItemList;
class MailItems;
class MailItemInfo;
class ReqGoodsInfo;
class ResGoodsInfo;
class RetGoodsInfo;
class SimDBSendMail;
class MailItemAndName;
class MSSimDBSendMail;

// ===================================================================

class SpecialItem : public ::google::protobuf::Message {
 public:
  SpecialItem();
  virtual ~SpecialItem();

  SpecialItem(const SpecialItem& from);

  inline SpecialItem& operator=(const SpecialItem& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecialItem& default_instance();

  void Swap(SpecialItem* other);

  // implements Message ----------------------------------------------

  SpecialItem* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpecialItem& from);
  void MergeFrom(const SpecialItem& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // required int32 num = 2;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 2;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MailInfo.SpecialItem)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fMail_2eproto();

  void InitAsDefaultInstance();
  static SpecialItem* default_instance_;
};
// -------------------------------------------------------------------

class SpecialMailItemList : public ::google::protobuf::Message {
 public:
  SpecialMailItemList();
  virtual ~SpecialMailItemList();

  SpecialMailItemList(const SpecialMailItemList& from);

  inline SpecialMailItemList& operator=(const SpecialMailItemList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SpecialMailItemList& default_instance();

  void Swap(SpecialMailItemList* other);

  // implements Message ----------------------------------------------

  SpecialMailItemList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SpecialMailItemList& from);
  void MergeFrom(const SpecialMailItemList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MailInfo.SpecialItem itemList = 1;
  inline int itemlist_size() const;
  inline void clear_itemlist();
  static const int kItemListFieldNumber = 1;
  inline const ::MailInfo::SpecialItem& itemlist(int index) const;
  inline ::MailInfo::SpecialItem* mutable_itemlist(int index);
  inline ::MailInfo::SpecialItem* add_itemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::MailInfo::SpecialItem >&
      itemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::MailInfo::SpecialItem >*
      mutable_itemlist();

  // @@protoc_insertion_point(class_scope:MailInfo.SpecialMailItemList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MailInfo::SpecialItem > itemlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fMail_2eproto();

  void InitAsDefaultInstance();
  static SpecialMailItemList* default_instance_;
};
// -------------------------------------------------------------------

class MailItems : public ::google::protobuf::Message {
 public:
  MailItems();
  virtual ~MailItems();

  MailItems(const MailItems& from);

  inline MailItems& operator=(const MailItems& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailItems& default_instance();

  void Swap(MailItems* other);

  // implements Message ----------------------------------------------

  MailItems* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailItems& from);
  void MergeFrom(const MailItems& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MailInfo.MailItemInfo info = 1;
  inline int info_size() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::MailInfo::MailItemInfo& info(int index) const;
  inline ::MailInfo::MailItemInfo* mutable_info(int index);
  inline ::MailInfo::MailItemInfo* add_info();
  inline const ::google::protobuf::RepeatedPtrField< ::MailInfo::MailItemInfo >&
      info() const;
  inline ::google::protobuf::RepeatedPtrField< ::MailInfo::MailItemInfo >*
      mutable_info();

  // @@protoc_insertion_point(class_scope:MailInfo.MailItems)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MailInfo::MailItemInfo > info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fMail_2eproto();

  void InitAsDefaultInstance();
  static MailItems* default_instance_;
};
// -------------------------------------------------------------------

class MailItemInfo : public ::google::protobuf::Message {
 public:
  MailItemInfo();
  virtual ~MailItemInfo();

  MailItemInfo(const MailItemInfo& from);

  inline MailItemInfo& operator=(const MailItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailItemInfo& default_instance();

  void Swap(MailItemInfo* other);

  // implements Message ----------------------------------------------

  MailItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailItemInfo& from);
  void MergeFrom(const MailItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required bool isopened = 1;
  inline bool has_isopened() const;
  inline void clear_isopened();
  static const int kIsopenedFieldNumber = 1;
  inline bool isopened() const;
  inline void set_isopened(bool value);

  // required string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required string theme = 3;
  inline bool has_theme() const;
  inline void clear_theme();
  static const int kThemeFieldNumber = 3;
  inline const ::std::string& theme() const;
  inline void set_theme(const ::std::string& value);
  inline void set_theme(const char* value);
  inline void set_theme(const char* value, size_t size);
  inline ::std::string* mutable_theme();
  inline ::std::string* release_theme();
  inline void set_allocated_theme(::std::string* theme);

  // required string substance = 4;
  inline bool has_substance() const;
  inline void clear_substance();
  static const int kSubstanceFieldNumber = 4;
  inline const ::std::string& substance() const;
  inline void set_substance(const ::std::string& value);
  inline void set_substance(const char* value);
  inline void set_substance(const char* value, size_t size);
  inline ::std::string* mutable_substance();
  inline ::std::string* release_substance();
  inline void set_allocated_substance(::std::string* substance);

  // required int64 index = 5;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 5;
  inline ::google::protobuf::int64 index() const;
  inline void set_index(::google::protobuf::int64 value);

  // required int32 sendtime = 6;
  inline bool has_sendtime() const;
  inline void clear_sendtime();
  static const int kSendtimeFieldNumber = 6;
  inline ::google::protobuf::int32 sendtime() const;
  inline void set_sendtime(::google::protobuf::int32 value);

  // required int32 day = 7;
  inline bool has_day() const;
  inline void clear_day();
  static const int kDayFieldNumber = 7;
  inline ::google::protobuf::int32 day() const;
  inline void set_day(::google::protobuf::int32 value);

  // optional .MailInfo.SpecialMailItemList itemList = 8;
  inline bool has_itemlist() const;
  inline void clear_itemlist();
  static const int kItemListFieldNumber = 8;
  inline const ::MailInfo::SpecialMailItemList& itemlist() const;
  inline ::MailInfo::SpecialMailItemList* mutable_itemlist();
  inline ::MailInfo::SpecialMailItemList* release_itemlist();
  inline void set_allocated_itemlist(::MailInfo::SpecialMailItemList* itemlist);

  // @@protoc_insertion_point(class_scope:MailInfo.MailItemInfo)
 private:
  inline void set_has_isopened();
  inline void clear_has_isopened();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_theme();
  inline void clear_has_theme();
  inline void set_has_substance();
  inline void clear_has_substance();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_sendtime();
  inline void clear_has_sendtime();
  inline void set_has_day();
  inline void clear_has_day();
  inline void set_has_itemlist();
  inline void clear_has_itemlist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::std::string* theme_;
  bool isopened_;
  ::google::protobuf::int32 sendtime_;
  ::std::string* substance_;
  ::google::protobuf::int64 index_;
  ::MailInfo::SpecialMailItemList* itemlist_;
  ::google::protobuf::int32 day_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fMail_2eproto();

  void InitAsDefaultInstance();
  static MailItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqGoodsInfo : public ::google::protobuf::Message {
 public:
  ReqGoodsInfo();
  virtual ~ReqGoodsInfo();

  ReqGoodsInfo(const ReqGoodsInfo& from);

  inline ReqGoodsInfo& operator=(const ReqGoodsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGoodsInfo& default_instance();

  void Swap(ReqGoodsInfo* other);

  // implements Message ----------------------------------------------

  ReqGoodsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqGoodsInfo& from);
  void MergeFrom(const ReqGoodsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 MailId = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::int64 mailid() const;
  inline void set_mailid(::google::protobuf::int64 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MailInfo.ReqGoodsInfo)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 mailid_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fMail_2eproto();

  void InitAsDefaultInstance();
  static ReqGoodsInfo* default_instance_;
};
// -------------------------------------------------------------------

class ResGoodsInfo : public ::google::protobuf::Message {
 public:
  ResGoodsInfo();
  virtual ~ResGoodsInfo();

  ResGoodsInfo(const ResGoodsInfo& from);

  inline ResGoodsInfo& operator=(const ResGoodsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResGoodsInfo& default_instance();

  void Swap(ResGoodsInfo* other);

  // implements Message ----------------------------------------------

  ResGoodsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResGoodsInfo& from);
  void MergeFrom(const ResGoodsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 MailId = 1;
  inline bool has_mailid() const;
  inline void clear_mailid();
  static const int kMailIdFieldNumber = 1;
  inline ::google::protobuf::int64 mailid() const;
  inline void set_mailid(::google::protobuf::int64 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MailInfo.ResGoodsInfo)
 private:
  inline void set_has_mailid();
  inline void clear_has_mailid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 mailid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fMail_2eproto();

  void InitAsDefaultInstance();
  static ResGoodsInfo* default_instance_;
};
// -------------------------------------------------------------------

class RetGoodsInfo : public ::google::protobuf::Message {
 public:
  RetGoodsInfo();
  virtual ~RetGoodsInfo();

  RetGoodsInfo(const RetGoodsInfo& from);

  inline RetGoodsInfo& operator=(const RetGoodsInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetGoodsInfo& default_instance();

  void Swap(RetGoodsInfo* other);

  // implements Message ----------------------------------------------

  RetGoodsInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetGoodsInfo& from);
  void MergeFrom(const RetGoodsInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required .MailInfo.ResGoodsInfo ret = 2;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 2;
  inline const ::MailInfo::ResGoodsInfo& ret() const;
  inline ::MailInfo::ResGoodsInfo* mutable_ret();
  inline ::MailInfo::ResGoodsInfo* release_ret();
  inline void set_allocated_ret(::MailInfo::ResGoodsInfo* ret);

  // optional .MailInfo.SpecialMailItemList itemList = 3;
  inline bool has_itemlist() const;
  inline void clear_itemlist();
  static const int kItemListFieldNumber = 3;
  inline const ::MailInfo::SpecialMailItemList& itemlist() const;
  inline ::MailInfo::SpecialMailItemList* mutable_itemlist();
  inline ::MailInfo::SpecialMailItemList* release_itemlist();
  inline void set_allocated_itemlist(::MailInfo::SpecialMailItemList* itemlist);

  // @@protoc_insertion_point(class_scope:MailInfo.RetGoodsInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_itemlist();
  inline void clear_has_itemlist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::MailInfo::ResGoodsInfo* ret_;
  ::MailInfo::SpecialMailItemList* itemlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fMail_2eproto();

  void InitAsDefaultInstance();
  static RetGoodsInfo* default_instance_;
};
// -------------------------------------------------------------------

class SimDBSendMail : public ::google::protobuf::Message {
 public:
  SimDBSendMail();
  virtual ~SimDBSendMail();

  SimDBSendMail(const SimDBSendMail& from);

  inline SimDBSendMail& operator=(const SimDBSendMail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SimDBSendMail& default_instance();

  void Swap(SimDBSendMail* other);

  // implements Message ----------------------------------------------

  SimDBSendMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SimDBSendMail& from);
  void MergeFrom(const SimDBSendMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sendname = 1;
  inline bool has_sendname() const;
  inline void clear_sendname();
  static const int kSendnameFieldNumber = 1;
  inline const ::std::string& sendname() const;
  inline void set_sendname(const ::std::string& value);
  inline void set_sendname(const char* value);
  inline void set_sendname(const char* value, size_t size);
  inline ::std::string* mutable_sendname();
  inline ::std::string* release_sendname();
  inline void set_allocated_sendname(::std::string* sendname);

  // required int64 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required string endname = 3;
  inline bool has_endname() const;
  inline void clear_endname();
  static const int kEndnameFieldNumber = 3;
  inline const ::std::string& endname() const;
  inline void set_endname(const ::std::string& value);
  inline void set_endname(const char* value);
  inline void set_endname(const char* value, size_t size);
  inline ::std::string* mutable_endname();
  inline ::std::string* release_endname();
  inline void set_allocated_endname(::std::string* endname);

  // required string theme = 4;
  inline bool has_theme() const;
  inline void clear_theme();
  static const int kThemeFieldNumber = 4;
  inline const ::std::string& theme() const;
  inline void set_theme(const ::std::string& value);
  inline void set_theme(const char* value);
  inline void set_theme(const char* value, size_t size);
  inline ::std::string* mutable_theme();
  inline ::std::string* release_theme();
  inline void set_allocated_theme(::std::string* theme);

  // required string substance = 5;
  inline bool has_substance() const;
  inline void clear_substance();
  static const int kSubstanceFieldNumber = 5;
  inline const ::std::string& substance() const;
  inline void set_substance(const ::std::string& value);
  inline void set_substance(const char* value);
  inline void set_substance(const char* value, size_t size);
  inline ::std::string* mutable_substance();
  inline ::std::string* release_substance();
  inline void set_allocated_substance(::std::string* substance);

  // optional .MailInfo.SpecialMailItemList itemList = 6;
  inline bool has_itemlist() const;
  inline void clear_itemlist();
  static const int kItemListFieldNumber = 6;
  inline const ::MailInfo::SpecialMailItemList& itemlist() const;
  inline ::MailInfo::SpecialMailItemList* mutable_itemlist();
  inline ::MailInfo::SpecialMailItemList* release_itemlist();
  inline void set_allocated_itemlist(::MailInfo::SpecialMailItemList* itemlist);

  // @@protoc_insertion_point(class_scope:MailInfo.SimDBSendMail)
 private:
  inline void set_has_sendname();
  inline void clear_has_sendname();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_endname();
  inline void clear_has_endname();
  inline void set_has_theme();
  inline void clear_has_theme();
  inline void set_has_substance();
  inline void clear_has_substance();
  inline void set_has_itemlist();
  inline void clear_has_itemlist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sendname_;
  ::google::protobuf::int64 charid_;
  ::std::string* endname_;
  ::std::string* theme_;
  ::std::string* substance_;
  ::MailInfo::SpecialMailItemList* itemlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fMail_2eproto();

  void InitAsDefaultInstance();
  static SimDBSendMail* default_instance_;
};
// -------------------------------------------------------------------

class MailItemAndName : public ::google::protobuf::Message {
 public:
  MailItemAndName();
  virtual ~MailItemAndName();

  MailItemAndName(const MailItemAndName& from);

  inline MailItemAndName& operator=(const MailItemAndName& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MailItemAndName& default_instance();

  void Swap(MailItemAndName* other);

  // implements Message ----------------------------------------------

  MailItemAndName* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MailItemAndName& from);
  void MergeFrom(const MailItemAndName& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string name = 1;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 1;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required .MailInfo.MailItemInfo item = 2;
  inline bool has_item() const;
  inline void clear_item();
  static const int kItemFieldNumber = 2;
  inline const ::MailInfo::MailItemInfo& item() const;
  inline ::MailInfo::MailItemInfo* mutable_item();
  inline ::MailInfo::MailItemInfo* release_item();
  inline void set_allocated_item(::MailInfo::MailItemInfo* item);

  // @@protoc_insertion_point(class_scope:MailInfo.MailItemAndName)
 private:
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_item();
  inline void clear_has_item();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::MailInfo::MailItemInfo* item_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fMail_2eproto();

  void InitAsDefaultInstance();
  static MailItemAndName* default_instance_;
};
// -------------------------------------------------------------------

class MSSimDBSendMail : public ::google::protobuf::Message {
 public:
  MSSimDBSendMail();
  virtual ~MSSimDBSendMail();

  MSSimDBSendMail(const MSSimDBSendMail& from);

  inline MSSimDBSendMail& operator=(const MSSimDBSendMail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MSSimDBSendMail& default_instance();

  void Swap(MSSimDBSendMail* other);

  // implements Message ----------------------------------------------

  MSSimDBSendMail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MSSimDBSendMail& from);
  void MergeFrom(const MSSimDBSendMail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string sendname = 1;
  inline bool has_sendname() const;
  inline void clear_sendname();
  static const int kSendnameFieldNumber = 1;
  inline const ::std::string& sendname() const;
  inline void set_sendname(const ::std::string& value);
  inline void set_sendname(const char* value);
  inline void set_sendname(const char* value, size_t size);
  inline ::std::string* mutable_sendname();
  inline ::std::string* release_sendname();
  inline void set_allocated_sendname(::std::string* sendname);

  // repeated string endname = 2;
  inline int endname_size() const;
  inline void clear_endname();
  static const int kEndnameFieldNumber = 2;
  inline const ::std::string& endname(int index) const;
  inline ::std::string* mutable_endname(int index);
  inline void set_endname(int index, const ::std::string& value);
  inline void set_endname(int index, const char* value);
  inline void set_endname(int index, const char* value, size_t size);
  inline ::std::string* add_endname();
  inline void add_endname(const ::std::string& value);
  inline void add_endname(const char* value);
  inline void add_endname(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& endname() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_endname();

  // required string theme = 3;
  inline bool has_theme() const;
  inline void clear_theme();
  static const int kThemeFieldNumber = 3;
  inline const ::std::string& theme() const;
  inline void set_theme(const ::std::string& value);
  inline void set_theme(const char* value);
  inline void set_theme(const char* value, size_t size);
  inline ::std::string* mutable_theme();
  inline ::std::string* release_theme();
  inline void set_allocated_theme(::std::string* theme);

  // required string substance = 4;
  inline bool has_substance() const;
  inline void clear_substance();
  static const int kSubstanceFieldNumber = 4;
  inline const ::std::string& substance() const;
  inline void set_substance(const ::std::string& value);
  inline void set_substance(const char* value);
  inline void set_substance(const char* value, size_t size);
  inline ::std::string* mutable_substance();
  inline ::std::string* release_substance();
  inline void set_allocated_substance(::std::string* substance);

  // optional .MailInfo.SpecialMailItemList itemList = 5;
  inline bool has_itemlist() const;
  inline void clear_itemlist();
  static const int kItemListFieldNumber = 5;
  inline const ::MailInfo::SpecialMailItemList& itemlist() const;
  inline ::MailInfo::SpecialMailItemList* mutable_itemlist();
  inline ::MailInfo::SpecialMailItemList* release_itemlist();
  inline void set_allocated_itemlist(::MailInfo::SpecialMailItemList* itemlist);

  // @@protoc_insertion_point(class_scope:MailInfo.MSSimDBSendMail)
 private:
  inline void set_has_sendname();
  inline void clear_has_sendname();
  inline void set_has_theme();
  inline void clear_has_theme();
  inline void set_has_substance();
  inline void clear_has_substance();
  inline void set_has_itemlist();
  inline void clear_has_itemlist();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* sendname_;
  ::google::protobuf::RepeatedPtrField< ::std::string> endname_;
  ::std::string* theme_;
  ::std::string* substance_;
  ::MailInfo::SpecialMailItemList* itemlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fMail_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fMail_2eproto();

  void InitAsDefaultInstance();
  static MSSimDBSendMail* default_instance_;
};
// ===================================================================


// ===================================================================

// SpecialItem

// required int32 itemID = 1;
inline bool SpecialItem::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SpecialItem::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SpecialItem::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SpecialItem::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 SpecialItem::itemid() const {
  return itemid_;
}
inline void SpecialItem::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// required int32 num = 2;
inline bool SpecialItem::has_num() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SpecialItem::set_has_num() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SpecialItem::clear_has_num() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SpecialItem::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 SpecialItem::num() const {
  return num_;
}
inline void SpecialItem::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// SpecialMailItemList

// repeated .MailInfo.SpecialItem itemList = 1;
inline int SpecialMailItemList::itemlist_size() const {
  return itemlist_.size();
}
inline void SpecialMailItemList::clear_itemlist() {
  itemlist_.Clear();
}
inline const ::MailInfo::SpecialItem& SpecialMailItemList::itemlist(int index) const {
  return itemlist_.Get(index);
}
inline ::MailInfo::SpecialItem* SpecialMailItemList::mutable_itemlist(int index) {
  return itemlist_.Mutable(index);
}
inline ::MailInfo::SpecialItem* SpecialMailItemList::add_itemlist() {
  return itemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MailInfo::SpecialItem >&
SpecialMailItemList::itemlist() const {
  return itemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::MailInfo::SpecialItem >*
SpecialMailItemList::mutable_itemlist() {
  return &itemlist_;
}

// -------------------------------------------------------------------

// MailItems

// repeated .MailInfo.MailItemInfo info = 1;
inline int MailItems::info_size() const {
  return info_.size();
}
inline void MailItems::clear_info() {
  info_.Clear();
}
inline const ::MailInfo::MailItemInfo& MailItems::info(int index) const {
  return info_.Get(index);
}
inline ::MailInfo::MailItemInfo* MailItems::mutable_info(int index) {
  return info_.Mutable(index);
}
inline ::MailInfo::MailItemInfo* MailItems::add_info() {
  return info_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MailInfo::MailItemInfo >&
MailItems::info() const {
  return info_;
}
inline ::google::protobuf::RepeatedPtrField< ::MailInfo::MailItemInfo >*
MailItems::mutable_info() {
  return &info_;
}

// -------------------------------------------------------------------

// MailItemInfo

// required bool isopened = 1;
inline bool MailItemInfo::has_isopened() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailItemInfo::set_has_isopened() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailItemInfo::clear_has_isopened() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailItemInfo::clear_isopened() {
  isopened_ = false;
  clear_has_isopened();
}
inline bool MailItemInfo::isopened() const {
  return isopened_;
}
inline void MailItemInfo::set_isopened(bool value) {
  set_has_isopened();
  isopened_ = value;
}

// required string name = 2;
inline bool MailItemInfo::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailItemInfo::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailItemInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailItemInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MailItemInfo::name() const {
  return *name_;
}
inline void MailItemInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MailItemInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MailItemInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailItemInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MailItemInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailItemInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string theme = 3;
inline bool MailItemInfo::has_theme() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MailItemInfo::set_has_theme() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MailItemInfo::clear_has_theme() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MailItemInfo::clear_theme() {
  if (theme_ != &::google::protobuf::internal::kEmptyString) {
    theme_->clear();
  }
  clear_has_theme();
}
inline const ::std::string& MailItemInfo::theme() const {
  return *theme_;
}
inline void MailItemInfo::set_theme(const ::std::string& value) {
  set_has_theme();
  if (theme_ == &::google::protobuf::internal::kEmptyString) {
    theme_ = new ::std::string;
  }
  theme_->assign(value);
}
inline void MailItemInfo::set_theme(const char* value) {
  set_has_theme();
  if (theme_ == &::google::protobuf::internal::kEmptyString) {
    theme_ = new ::std::string;
  }
  theme_->assign(value);
}
inline void MailItemInfo::set_theme(const char* value, size_t size) {
  set_has_theme();
  if (theme_ == &::google::protobuf::internal::kEmptyString) {
    theme_ = new ::std::string;
  }
  theme_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailItemInfo::mutable_theme() {
  set_has_theme();
  if (theme_ == &::google::protobuf::internal::kEmptyString) {
    theme_ = new ::std::string;
  }
  return theme_;
}
inline ::std::string* MailItemInfo::release_theme() {
  clear_has_theme();
  if (theme_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = theme_;
    theme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailItemInfo::set_allocated_theme(::std::string* theme) {
  if (theme_ != &::google::protobuf::internal::kEmptyString) {
    delete theme_;
  }
  if (theme) {
    set_has_theme();
    theme_ = theme;
  } else {
    clear_has_theme();
    theme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string substance = 4;
inline bool MailItemInfo::has_substance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MailItemInfo::set_has_substance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MailItemInfo::clear_has_substance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MailItemInfo::clear_substance() {
  if (substance_ != &::google::protobuf::internal::kEmptyString) {
    substance_->clear();
  }
  clear_has_substance();
}
inline const ::std::string& MailItemInfo::substance() const {
  return *substance_;
}
inline void MailItemInfo::set_substance(const ::std::string& value) {
  set_has_substance();
  if (substance_ == &::google::protobuf::internal::kEmptyString) {
    substance_ = new ::std::string;
  }
  substance_->assign(value);
}
inline void MailItemInfo::set_substance(const char* value) {
  set_has_substance();
  if (substance_ == &::google::protobuf::internal::kEmptyString) {
    substance_ = new ::std::string;
  }
  substance_->assign(value);
}
inline void MailItemInfo::set_substance(const char* value, size_t size) {
  set_has_substance();
  if (substance_ == &::google::protobuf::internal::kEmptyString) {
    substance_ = new ::std::string;
  }
  substance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailItemInfo::mutable_substance() {
  set_has_substance();
  if (substance_ == &::google::protobuf::internal::kEmptyString) {
    substance_ = new ::std::string;
  }
  return substance_;
}
inline ::std::string* MailItemInfo::release_substance() {
  clear_has_substance();
  if (substance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = substance_;
    substance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailItemInfo::set_allocated_substance(::std::string* substance) {
  if (substance_ != &::google::protobuf::internal::kEmptyString) {
    delete substance_;
  }
  if (substance) {
    set_has_substance();
    substance_ = substance;
  } else {
    clear_has_substance();
    substance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 index = 5;
inline bool MailItemInfo::has_index() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MailItemInfo::set_has_index() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MailItemInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MailItemInfo::clear_index() {
  index_ = GOOGLE_LONGLONG(0);
  clear_has_index();
}
inline ::google::protobuf::int64 MailItemInfo::index() const {
  return index_;
}
inline void MailItemInfo::set_index(::google::protobuf::int64 value) {
  set_has_index();
  index_ = value;
}

// required int32 sendtime = 6;
inline bool MailItemInfo::has_sendtime() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MailItemInfo::set_has_sendtime() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MailItemInfo::clear_has_sendtime() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MailItemInfo::clear_sendtime() {
  sendtime_ = 0;
  clear_has_sendtime();
}
inline ::google::protobuf::int32 MailItemInfo::sendtime() const {
  return sendtime_;
}
inline void MailItemInfo::set_sendtime(::google::protobuf::int32 value) {
  set_has_sendtime();
  sendtime_ = value;
}

// required int32 day = 7;
inline bool MailItemInfo::has_day() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MailItemInfo::set_has_day() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MailItemInfo::clear_has_day() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MailItemInfo::clear_day() {
  day_ = 0;
  clear_has_day();
}
inline ::google::protobuf::int32 MailItemInfo::day() const {
  return day_;
}
inline void MailItemInfo::set_day(::google::protobuf::int32 value) {
  set_has_day();
  day_ = value;
}

// optional .MailInfo.SpecialMailItemList itemList = 8;
inline bool MailItemInfo::has_itemlist() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MailItemInfo::set_has_itemlist() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MailItemInfo::clear_has_itemlist() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MailItemInfo::clear_itemlist() {
  if (itemlist_ != NULL) itemlist_->::MailInfo::SpecialMailItemList::Clear();
  clear_has_itemlist();
}
inline const ::MailInfo::SpecialMailItemList& MailItemInfo::itemlist() const {
  return itemlist_ != NULL ? *itemlist_ : *default_instance_->itemlist_;
}
inline ::MailInfo::SpecialMailItemList* MailItemInfo::mutable_itemlist() {
  set_has_itemlist();
  if (itemlist_ == NULL) itemlist_ = new ::MailInfo::SpecialMailItemList;
  return itemlist_;
}
inline ::MailInfo::SpecialMailItemList* MailItemInfo::release_itemlist() {
  clear_has_itemlist();
  ::MailInfo::SpecialMailItemList* temp = itemlist_;
  itemlist_ = NULL;
  return temp;
}
inline void MailItemInfo::set_allocated_itemlist(::MailInfo::SpecialMailItemList* itemlist) {
  delete itemlist_;
  itemlist_ = itemlist;
  if (itemlist) {
    set_has_itemlist();
  } else {
    clear_has_itemlist();
  }
}

// -------------------------------------------------------------------

// ReqGoodsInfo

// required int64 MailId = 1;
inline bool ReqGoodsInfo::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqGoodsInfo::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqGoodsInfo::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqGoodsInfo::clear_mailid() {
  mailid_ = GOOGLE_LONGLONG(0);
  clear_has_mailid();
}
inline ::google::protobuf::int64 ReqGoodsInfo::mailid() const {
  return mailid_;
}
inline void ReqGoodsInfo::set_mailid(::google::protobuf::int64 value) {
  set_has_mailid();
  mailid_ = value;
}

// required int32 type = 2;
inline bool ReqGoodsInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReqGoodsInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReqGoodsInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReqGoodsInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ReqGoodsInfo::type() const {
  return type_;
}
inline void ReqGoodsInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// ResGoodsInfo

// required int64 MailId = 1;
inline bool ResGoodsInfo::has_mailid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResGoodsInfo::set_has_mailid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResGoodsInfo::clear_has_mailid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResGoodsInfo::clear_mailid() {
  mailid_ = GOOGLE_LONGLONG(0);
  clear_has_mailid();
}
inline ::google::protobuf::int64 ResGoodsInfo::mailid() const {
  return mailid_;
}
inline void ResGoodsInfo::set_mailid(::google::protobuf::int64 value) {
  set_has_mailid();
  mailid_ = value;
}

// required int32 type = 2;
inline bool ResGoodsInfo::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResGoodsInfo::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResGoodsInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResGoodsInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ResGoodsInfo::type() const {
  return type_;
}
inline void ResGoodsInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 ret = 3;
inline bool ResGoodsInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ResGoodsInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ResGoodsInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ResGoodsInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 ResGoodsInfo::ret() const {
  return ret_;
}
inline void ResGoodsInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// RetGoodsInfo

// required int64 charid = 1;
inline bool RetGoodsInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetGoodsInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetGoodsInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetGoodsInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 RetGoodsInfo::charid() const {
  return charid_;
}
inline void RetGoodsInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required .MailInfo.ResGoodsInfo ret = 2;
inline bool RetGoodsInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetGoodsInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetGoodsInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetGoodsInfo::clear_ret() {
  if (ret_ != NULL) ret_->::MailInfo::ResGoodsInfo::Clear();
  clear_has_ret();
}
inline const ::MailInfo::ResGoodsInfo& RetGoodsInfo::ret() const {
  return ret_ != NULL ? *ret_ : *default_instance_->ret_;
}
inline ::MailInfo::ResGoodsInfo* RetGoodsInfo::mutable_ret() {
  set_has_ret();
  if (ret_ == NULL) ret_ = new ::MailInfo::ResGoodsInfo;
  return ret_;
}
inline ::MailInfo::ResGoodsInfo* RetGoodsInfo::release_ret() {
  clear_has_ret();
  ::MailInfo::ResGoodsInfo* temp = ret_;
  ret_ = NULL;
  return temp;
}
inline void RetGoodsInfo::set_allocated_ret(::MailInfo::ResGoodsInfo* ret) {
  delete ret_;
  ret_ = ret;
  if (ret) {
    set_has_ret();
  } else {
    clear_has_ret();
  }
}

// optional .MailInfo.SpecialMailItemList itemList = 3;
inline bool RetGoodsInfo::has_itemlist() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RetGoodsInfo::set_has_itemlist() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RetGoodsInfo::clear_has_itemlist() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RetGoodsInfo::clear_itemlist() {
  if (itemlist_ != NULL) itemlist_->::MailInfo::SpecialMailItemList::Clear();
  clear_has_itemlist();
}
inline const ::MailInfo::SpecialMailItemList& RetGoodsInfo::itemlist() const {
  return itemlist_ != NULL ? *itemlist_ : *default_instance_->itemlist_;
}
inline ::MailInfo::SpecialMailItemList* RetGoodsInfo::mutable_itemlist() {
  set_has_itemlist();
  if (itemlist_ == NULL) itemlist_ = new ::MailInfo::SpecialMailItemList;
  return itemlist_;
}
inline ::MailInfo::SpecialMailItemList* RetGoodsInfo::release_itemlist() {
  clear_has_itemlist();
  ::MailInfo::SpecialMailItemList* temp = itemlist_;
  itemlist_ = NULL;
  return temp;
}
inline void RetGoodsInfo::set_allocated_itemlist(::MailInfo::SpecialMailItemList* itemlist) {
  delete itemlist_;
  itemlist_ = itemlist;
  if (itemlist) {
    set_has_itemlist();
  } else {
    clear_has_itemlist();
  }
}

// -------------------------------------------------------------------

// SimDBSendMail

// required string sendname = 1;
inline bool SimDBSendMail::has_sendname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SimDBSendMail::set_has_sendname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SimDBSendMail::clear_has_sendname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SimDBSendMail::clear_sendname() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    sendname_->clear();
  }
  clear_has_sendname();
}
inline const ::std::string& SimDBSendMail::sendname() const {
  return *sendname_;
}
inline void SimDBSendMail::set_sendname(const ::std::string& value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void SimDBSendMail::set_sendname(const char* value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void SimDBSendMail::set_sendname(const char* value, size_t size) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimDBSendMail::mutable_sendname() {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  return sendname_;
}
inline ::std::string* SimDBSendMail::release_sendname() {
  clear_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendname_;
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SimDBSendMail::set_allocated_sendname(::std::string* sendname) {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (sendname) {
    set_has_sendname();
    sendname_ = sendname;
  } else {
    clear_has_sendname();
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int64 charid = 2;
inline bool SimDBSendMail::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SimDBSendMail::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SimDBSendMail::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SimDBSendMail::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 SimDBSendMail::charid() const {
  return charid_;
}
inline void SimDBSendMail::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required string endname = 3;
inline bool SimDBSendMail::has_endname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SimDBSendMail::set_has_endname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SimDBSendMail::clear_has_endname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SimDBSendMail::clear_endname() {
  if (endname_ != &::google::protobuf::internal::kEmptyString) {
    endname_->clear();
  }
  clear_has_endname();
}
inline const ::std::string& SimDBSendMail::endname() const {
  return *endname_;
}
inline void SimDBSendMail::set_endname(const ::std::string& value) {
  set_has_endname();
  if (endname_ == &::google::protobuf::internal::kEmptyString) {
    endname_ = new ::std::string;
  }
  endname_->assign(value);
}
inline void SimDBSendMail::set_endname(const char* value) {
  set_has_endname();
  if (endname_ == &::google::protobuf::internal::kEmptyString) {
    endname_ = new ::std::string;
  }
  endname_->assign(value);
}
inline void SimDBSendMail::set_endname(const char* value, size_t size) {
  set_has_endname();
  if (endname_ == &::google::protobuf::internal::kEmptyString) {
    endname_ = new ::std::string;
  }
  endname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimDBSendMail::mutable_endname() {
  set_has_endname();
  if (endname_ == &::google::protobuf::internal::kEmptyString) {
    endname_ = new ::std::string;
  }
  return endname_;
}
inline ::std::string* SimDBSendMail::release_endname() {
  clear_has_endname();
  if (endname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = endname_;
    endname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SimDBSendMail::set_allocated_endname(::std::string* endname) {
  if (endname_ != &::google::protobuf::internal::kEmptyString) {
    delete endname_;
  }
  if (endname) {
    set_has_endname();
    endname_ = endname;
  } else {
    clear_has_endname();
    endname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string theme = 4;
inline bool SimDBSendMail::has_theme() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SimDBSendMail::set_has_theme() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SimDBSendMail::clear_has_theme() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SimDBSendMail::clear_theme() {
  if (theme_ != &::google::protobuf::internal::kEmptyString) {
    theme_->clear();
  }
  clear_has_theme();
}
inline const ::std::string& SimDBSendMail::theme() const {
  return *theme_;
}
inline void SimDBSendMail::set_theme(const ::std::string& value) {
  set_has_theme();
  if (theme_ == &::google::protobuf::internal::kEmptyString) {
    theme_ = new ::std::string;
  }
  theme_->assign(value);
}
inline void SimDBSendMail::set_theme(const char* value) {
  set_has_theme();
  if (theme_ == &::google::protobuf::internal::kEmptyString) {
    theme_ = new ::std::string;
  }
  theme_->assign(value);
}
inline void SimDBSendMail::set_theme(const char* value, size_t size) {
  set_has_theme();
  if (theme_ == &::google::protobuf::internal::kEmptyString) {
    theme_ = new ::std::string;
  }
  theme_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimDBSendMail::mutable_theme() {
  set_has_theme();
  if (theme_ == &::google::protobuf::internal::kEmptyString) {
    theme_ = new ::std::string;
  }
  return theme_;
}
inline ::std::string* SimDBSendMail::release_theme() {
  clear_has_theme();
  if (theme_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = theme_;
    theme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SimDBSendMail::set_allocated_theme(::std::string* theme) {
  if (theme_ != &::google::protobuf::internal::kEmptyString) {
    delete theme_;
  }
  if (theme) {
    set_has_theme();
    theme_ = theme;
  } else {
    clear_has_theme();
    theme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string substance = 5;
inline bool SimDBSendMail::has_substance() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SimDBSendMail::set_has_substance() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SimDBSendMail::clear_has_substance() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SimDBSendMail::clear_substance() {
  if (substance_ != &::google::protobuf::internal::kEmptyString) {
    substance_->clear();
  }
  clear_has_substance();
}
inline const ::std::string& SimDBSendMail::substance() const {
  return *substance_;
}
inline void SimDBSendMail::set_substance(const ::std::string& value) {
  set_has_substance();
  if (substance_ == &::google::protobuf::internal::kEmptyString) {
    substance_ = new ::std::string;
  }
  substance_->assign(value);
}
inline void SimDBSendMail::set_substance(const char* value) {
  set_has_substance();
  if (substance_ == &::google::protobuf::internal::kEmptyString) {
    substance_ = new ::std::string;
  }
  substance_->assign(value);
}
inline void SimDBSendMail::set_substance(const char* value, size_t size) {
  set_has_substance();
  if (substance_ == &::google::protobuf::internal::kEmptyString) {
    substance_ = new ::std::string;
  }
  substance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SimDBSendMail::mutable_substance() {
  set_has_substance();
  if (substance_ == &::google::protobuf::internal::kEmptyString) {
    substance_ = new ::std::string;
  }
  return substance_;
}
inline ::std::string* SimDBSendMail::release_substance() {
  clear_has_substance();
  if (substance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = substance_;
    substance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SimDBSendMail::set_allocated_substance(::std::string* substance) {
  if (substance_ != &::google::protobuf::internal::kEmptyString) {
    delete substance_;
  }
  if (substance) {
    set_has_substance();
    substance_ = substance;
  } else {
    clear_has_substance();
    substance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .MailInfo.SpecialMailItemList itemList = 6;
inline bool SimDBSendMail::has_itemlist() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SimDBSendMail::set_has_itemlist() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SimDBSendMail::clear_has_itemlist() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SimDBSendMail::clear_itemlist() {
  if (itemlist_ != NULL) itemlist_->::MailInfo::SpecialMailItemList::Clear();
  clear_has_itemlist();
}
inline const ::MailInfo::SpecialMailItemList& SimDBSendMail::itemlist() const {
  return itemlist_ != NULL ? *itemlist_ : *default_instance_->itemlist_;
}
inline ::MailInfo::SpecialMailItemList* SimDBSendMail::mutable_itemlist() {
  set_has_itemlist();
  if (itemlist_ == NULL) itemlist_ = new ::MailInfo::SpecialMailItemList;
  return itemlist_;
}
inline ::MailInfo::SpecialMailItemList* SimDBSendMail::release_itemlist() {
  clear_has_itemlist();
  ::MailInfo::SpecialMailItemList* temp = itemlist_;
  itemlist_ = NULL;
  return temp;
}
inline void SimDBSendMail::set_allocated_itemlist(::MailInfo::SpecialMailItemList* itemlist) {
  delete itemlist_;
  itemlist_ = itemlist;
  if (itemlist) {
    set_has_itemlist();
  } else {
    clear_has_itemlist();
  }
}

// -------------------------------------------------------------------

// MailItemAndName

// required string name = 1;
inline bool MailItemAndName::has_name() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MailItemAndName::set_has_name() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MailItemAndName::clear_has_name() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MailItemAndName::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MailItemAndName::name() const {
  return *name_;
}
inline void MailItemAndName::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MailItemAndName::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MailItemAndName::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MailItemAndName::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MailItemAndName::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MailItemAndName::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required .MailInfo.MailItemInfo item = 2;
inline bool MailItemAndName::has_item() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MailItemAndName::set_has_item() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MailItemAndName::clear_has_item() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MailItemAndName::clear_item() {
  if (item_ != NULL) item_->::MailInfo::MailItemInfo::Clear();
  clear_has_item();
}
inline const ::MailInfo::MailItemInfo& MailItemAndName::item() const {
  return item_ != NULL ? *item_ : *default_instance_->item_;
}
inline ::MailInfo::MailItemInfo* MailItemAndName::mutable_item() {
  set_has_item();
  if (item_ == NULL) item_ = new ::MailInfo::MailItemInfo;
  return item_;
}
inline ::MailInfo::MailItemInfo* MailItemAndName::release_item() {
  clear_has_item();
  ::MailInfo::MailItemInfo* temp = item_;
  item_ = NULL;
  return temp;
}
inline void MailItemAndName::set_allocated_item(::MailInfo::MailItemInfo* item) {
  delete item_;
  item_ = item;
  if (item) {
    set_has_item();
  } else {
    clear_has_item();
  }
}

// -------------------------------------------------------------------

// MSSimDBSendMail

// required string sendname = 1;
inline bool MSSimDBSendMail::has_sendname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MSSimDBSendMail::set_has_sendname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MSSimDBSendMail::clear_has_sendname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MSSimDBSendMail::clear_sendname() {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    sendname_->clear();
  }
  clear_has_sendname();
}
inline const ::std::string& MSSimDBSendMail::sendname() const {
  return *sendname_;
}
inline void MSSimDBSendMail::set_sendname(const ::std::string& value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void MSSimDBSendMail::set_sendname(const char* value) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(value);
}
inline void MSSimDBSendMail::set_sendname(const char* value, size_t size) {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  sendname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSSimDBSendMail::mutable_sendname() {
  set_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    sendname_ = new ::std::string;
  }
  return sendname_;
}
inline ::std::string* MSSimDBSendMail::release_sendname() {
  clear_has_sendname();
  if (sendname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sendname_;
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MSSimDBSendMail::set_allocated_sendname(::std::string* sendname) {
  if (sendname_ != &::google::protobuf::internal::kEmptyString) {
    delete sendname_;
  }
  if (sendname) {
    set_has_sendname();
    sendname_ = sendname;
  } else {
    clear_has_sendname();
    sendname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// repeated string endname = 2;
inline int MSSimDBSendMail::endname_size() const {
  return endname_.size();
}
inline void MSSimDBSendMail::clear_endname() {
  endname_.Clear();
}
inline const ::std::string& MSSimDBSendMail::endname(int index) const {
  return endname_.Get(index);
}
inline ::std::string* MSSimDBSendMail::mutable_endname(int index) {
  return endname_.Mutable(index);
}
inline void MSSimDBSendMail::set_endname(int index, const ::std::string& value) {
  endname_.Mutable(index)->assign(value);
}
inline void MSSimDBSendMail::set_endname(int index, const char* value) {
  endname_.Mutable(index)->assign(value);
}
inline void MSSimDBSendMail::set_endname(int index, const char* value, size_t size) {
  endname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSSimDBSendMail::add_endname() {
  return endname_.Add();
}
inline void MSSimDBSendMail::add_endname(const ::std::string& value) {
  endname_.Add()->assign(value);
}
inline void MSSimDBSendMail::add_endname(const char* value) {
  endname_.Add()->assign(value);
}
inline void MSSimDBSendMail::add_endname(const char* value, size_t size) {
  endname_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
MSSimDBSendMail::endname() const {
  return endname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
MSSimDBSendMail::mutable_endname() {
  return &endname_;
}

// required string theme = 3;
inline bool MSSimDBSendMail::has_theme() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MSSimDBSendMail::set_has_theme() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MSSimDBSendMail::clear_has_theme() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MSSimDBSendMail::clear_theme() {
  if (theme_ != &::google::protobuf::internal::kEmptyString) {
    theme_->clear();
  }
  clear_has_theme();
}
inline const ::std::string& MSSimDBSendMail::theme() const {
  return *theme_;
}
inline void MSSimDBSendMail::set_theme(const ::std::string& value) {
  set_has_theme();
  if (theme_ == &::google::protobuf::internal::kEmptyString) {
    theme_ = new ::std::string;
  }
  theme_->assign(value);
}
inline void MSSimDBSendMail::set_theme(const char* value) {
  set_has_theme();
  if (theme_ == &::google::protobuf::internal::kEmptyString) {
    theme_ = new ::std::string;
  }
  theme_->assign(value);
}
inline void MSSimDBSendMail::set_theme(const char* value, size_t size) {
  set_has_theme();
  if (theme_ == &::google::protobuf::internal::kEmptyString) {
    theme_ = new ::std::string;
  }
  theme_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSSimDBSendMail::mutable_theme() {
  set_has_theme();
  if (theme_ == &::google::protobuf::internal::kEmptyString) {
    theme_ = new ::std::string;
  }
  return theme_;
}
inline ::std::string* MSSimDBSendMail::release_theme() {
  clear_has_theme();
  if (theme_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = theme_;
    theme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MSSimDBSendMail::set_allocated_theme(::std::string* theme) {
  if (theme_ != &::google::protobuf::internal::kEmptyString) {
    delete theme_;
  }
  if (theme) {
    set_has_theme();
    theme_ = theme;
  } else {
    clear_has_theme();
    theme_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string substance = 4;
inline bool MSSimDBSendMail::has_substance() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MSSimDBSendMail::set_has_substance() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MSSimDBSendMail::clear_has_substance() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MSSimDBSendMail::clear_substance() {
  if (substance_ != &::google::protobuf::internal::kEmptyString) {
    substance_->clear();
  }
  clear_has_substance();
}
inline const ::std::string& MSSimDBSendMail::substance() const {
  return *substance_;
}
inline void MSSimDBSendMail::set_substance(const ::std::string& value) {
  set_has_substance();
  if (substance_ == &::google::protobuf::internal::kEmptyString) {
    substance_ = new ::std::string;
  }
  substance_->assign(value);
}
inline void MSSimDBSendMail::set_substance(const char* value) {
  set_has_substance();
  if (substance_ == &::google::protobuf::internal::kEmptyString) {
    substance_ = new ::std::string;
  }
  substance_->assign(value);
}
inline void MSSimDBSendMail::set_substance(const char* value, size_t size) {
  set_has_substance();
  if (substance_ == &::google::protobuf::internal::kEmptyString) {
    substance_ = new ::std::string;
  }
  substance_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MSSimDBSendMail::mutable_substance() {
  set_has_substance();
  if (substance_ == &::google::protobuf::internal::kEmptyString) {
    substance_ = new ::std::string;
  }
  return substance_;
}
inline ::std::string* MSSimDBSendMail::release_substance() {
  clear_has_substance();
  if (substance_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = substance_;
    substance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MSSimDBSendMail::set_allocated_substance(::std::string* substance) {
  if (substance_ != &::google::protobuf::internal::kEmptyString) {
    delete substance_;
  }
  if (substance) {
    set_has_substance();
    substance_ = substance;
  } else {
    clear_has_substance();
    substance_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional .MailInfo.SpecialMailItemList itemList = 5;
inline bool MSSimDBSendMail::has_itemlist() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MSSimDBSendMail::set_has_itemlist() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MSSimDBSendMail::clear_has_itemlist() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MSSimDBSendMail::clear_itemlist() {
  if (itemlist_ != NULL) itemlist_->::MailInfo::SpecialMailItemList::Clear();
  clear_has_itemlist();
}
inline const ::MailInfo::SpecialMailItemList& MSSimDBSendMail::itemlist() const {
  return itemlist_ != NULL ? *itemlist_ : *default_instance_->itemlist_;
}
inline ::MailInfo::SpecialMailItemList* MSSimDBSendMail::mutable_itemlist() {
  set_has_itemlist();
  if (itemlist_ == NULL) itemlist_ = new ::MailInfo::SpecialMailItemList;
  return itemlist_;
}
inline ::MailInfo::SpecialMailItemList* MSSimDBSendMail::release_itemlist() {
  clear_has_itemlist();
  ::MailInfo::SpecialMailItemList* temp = itemlist_;
  itemlist_ = NULL;
  return temp;
}
inline void MSSimDBSendMail::set_allocated_itemlist(::MailInfo::SpecialMailItemList* itemlist) {
  delete itemlist_;
  itemlist_ = itemlist;
  if (itemlist) {
    set_has_itemlist();
  } else {
    clear_has_itemlist();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MailInfo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CharLogin_2fMail_2eproto__INCLUDED
