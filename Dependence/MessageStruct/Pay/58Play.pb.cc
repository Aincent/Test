// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pay/58Play.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Pay/58Play.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Pay58PlayInfo {

namespace {

const ::google::protobuf::Descriptor* From58PlayReqAskPayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  From58PlayReqAskPayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* To58PlayReqAskPayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  To58PlayReqAskPayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Sys58PlayPayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Sys58PlayPayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InviteFriend58Play_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InviteFriend58Play_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetInviteFriend58Play_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetInviteFriend58Play_reflection_ = NULL;
const ::google::protobuf::Descriptor* FbLikeFeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FbLikeFeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetFbLikeFeed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetFbLikeFeed_reflection_ = NULL;
const ::google::protobuf::Descriptor* FBReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FBReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardList_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysFBReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysFBReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetSysFBReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetSysFBReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetFBLike_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetFBLike_reflection_ = NULL;
const ::google::protobuf::Descriptor* FBRewardInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FBRewardInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RewardListInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RewardListInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Pay_2f58Play_2eproto() {
  protobuf_AddDesc_Pay_2f58Play_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Pay/58Play.proto");
  GOOGLE_CHECK(file != NULL);
  From58PlayReqAskPayInfo_descriptor_ = file->message_type(0);
  static const int From58PlayReqAskPayInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From58PlayReqAskPayInfo, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From58PlayReqAskPayInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From58PlayReqAskPayInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From58PlayReqAskPayInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From58PlayReqAskPayInfo, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From58PlayReqAskPayInfo, sig_),
  };
  From58PlayReqAskPayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      From58PlayReqAskPayInfo_descriptor_,
      From58PlayReqAskPayInfo::default_instance_,
      From58PlayReqAskPayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From58PlayReqAskPayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(From58PlayReqAskPayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(From58PlayReqAskPayInfo));
  To58PlayReqAskPayInfo_descriptor_ = file->message_type(1);
  static const int To58PlayReqAskPayInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(To58PlayReqAskPayInfo, ret_),
  };
  To58PlayReqAskPayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      To58PlayReqAskPayInfo_descriptor_,
      To58PlayReqAskPayInfo::default_instance_,
      To58PlayReqAskPayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(To58PlayReqAskPayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(To58PlayReqAskPayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(To58PlayReqAskPayInfo));
  Sys58PlayPayInfo_descriptor_ = file->message_type(2);
  static const int Sys58PlayPayInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys58PlayPayInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys58PlayPayInfo, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys58PlayPayInfo, orderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys58PlayPayInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys58PlayPayInfo, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys58PlayPayInfo, sig_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys58PlayPayInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys58PlayPayInfo, flag_),
  };
  Sys58PlayPayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Sys58PlayPayInfo_descriptor_,
      Sys58PlayPayInfo::default_instance_,
      Sys58PlayPayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys58PlayPayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Sys58PlayPayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Sys58PlayPayInfo));
  InviteFriend58Play_descriptor_ = file->message_type(3);
  static const int InviteFriend58Play_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriend58Play, num_),
  };
  InviteFriend58Play_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InviteFriend58Play_descriptor_,
      InviteFriend58Play::default_instance_,
      InviteFriend58Play_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriend58Play, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InviteFriend58Play, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InviteFriend58Play));
  RetInviteFriend58Play_descriptor_ = file->message_type(4);
  static const int RetInviteFriend58Play_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteFriend58Play, ret_),
  };
  RetInviteFriend58Play_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetInviteFriend58Play_descriptor_,
      RetInviteFriend58Play::default_instance_,
      RetInviteFriend58Play_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteFriend58Play, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteFriend58Play, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetInviteFriend58Play));
  FbLikeFeed_descriptor_ = file->message_type(5);
  static const int FbLikeFeed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FbLikeFeed, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FbLikeFeed, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FbLikeFeed, sig_),
  };
  FbLikeFeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FbLikeFeed_descriptor_,
      FbLikeFeed::default_instance_,
      FbLikeFeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FbLikeFeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FbLikeFeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FbLikeFeed));
  RetFbLikeFeed_descriptor_ = file->message_type(6);
  static const int RetFbLikeFeed_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetFbLikeFeed, ret_),
  };
  RetFbLikeFeed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetFbLikeFeed_descriptor_,
      RetFbLikeFeed::default_instance_,
      RetFbLikeFeed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetFbLikeFeed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetFbLikeFeed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetFbLikeFeed));
  FBReward_descriptor_ = file->message_type(7);
  static const int FBReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FBReward, fblike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FBReward, nday_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FBReward, rlist_),
  };
  FBReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FBReward_descriptor_,
      FBReward::default_instance_,
      FBReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FBReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FBReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FBReward));
  RewardList_descriptor_ = file->message_type(8);
  static const int RewardList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardList, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardList, statue_),
  };
  RewardList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardList_descriptor_,
      RewardList::default_instance_,
      RewardList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardList));
  GetReward_descriptor_ = file->message_type(9);
  static const int GetReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReward, type_),
  };
  GetReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetReward_descriptor_,
      GetReward::default_instance_,
      GetReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetReward));
  RetReward_descriptor_ = file->message_type(10);
  static const int RetReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetReward, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetReward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetReward, type_),
  };
  RetReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetReward_descriptor_,
      RetReward::default_instance_,
      RetReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetReward));
  SysFBReward_descriptor_ = file->message_type(11);
  static const int SysFBReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysFBReward, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysFBReward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysFBReward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysFBReward, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysFBReward, itemnum_),
  };
  SysFBReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysFBReward_descriptor_,
      SysFBReward::default_instance_,
      SysFBReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysFBReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysFBReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysFBReward));
  RetSysFBReward_descriptor_ = file->message_type(12);
  static const int RetSysFBReward_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSysFBReward, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSysFBReward, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSysFBReward, ret_),
  };
  RetSysFBReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetSysFBReward_descriptor_,
      RetSysFBReward::default_instance_,
      RetSysFBReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSysFBReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetSysFBReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetSysFBReward));
  RetFBLike_descriptor_ = file->message_type(13);
  static const int RetFBLike_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetFBLike, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetFBLike, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetFBLike, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetFBLike, sig_),
  };
  RetFBLike_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetFBLike_descriptor_,
      RetFBLike::default_instance_,
      RetFBLike_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetFBLike, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetFBLike, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetFBLike));
  FBRewardInfo_descriptor_ = file->message_type(14);
  static const int FBRewardInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FBRewardInfo, fblike_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FBRewardInfo, ntime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FBRewardInfo, rlist_),
  };
  FBRewardInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FBRewardInfo_descriptor_,
      FBRewardInfo::default_instance_,
      FBRewardInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FBRewardInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FBRewardInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FBRewardInfo));
  RewardListInfo_descriptor_ = file->message_type(15);
  static const int RewardListInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardListInfo, invit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardListInfo, status_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardListInfo, index_),
  };
  RewardListInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RewardListInfo_descriptor_,
      RewardListInfo::default_instance_,
      RewardListInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardListInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RewardListInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RewardListInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Pay_2f58Play_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    From58PlayReqAskPayInfo_descriptor_, &From58PlayReqAskPayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    To58PlayReqAskPayInfo_descriptor_, &To58PlayReqAskPayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Sys58PlayPayInfo_descriptor_, &Sys58PlayPayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InviteFriend58Play_descriptor_, &InviteFriend58Play::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetInviteFriend58Play_descriptor_, &RetInviteFriend58Play::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FbLikeFeed_descriptor_, &FbLikeFeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetFbLikeFeed_descriptor_, &RetFbLikeFeed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FBReward_descriptor_, &FBReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardList_descriptor_, &RewardList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetReward_descriptor_, &GetReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetReward_descriptor_, &RetReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysFBReward_descriptor_, &SysFBReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetSysFBReward_descriptor_, &RetSysFBReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetFBLike_descriptor_, &RetFBLike::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FBRewardInfo_descriptor_, &FBRewardInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RewardListInfo_descriptor_, &RewardListInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Pay_2f58Play_2eproto() {
  delete From58PlayReqAskPayInfo::default_instance_;
  delete From58PlayReqAskPayInfo_reflection_;
  delete To58PlayReqAskPayInfo::default_instance_;
  delete To58PlayReqAskPayInfo_reflection_;
  delete Sys58PlayPayInfo::default_instance_;
  delete Sys58PlayPayInfo_reflection_;
  delete InviteFriend58Play::default_instance_;
  delete InviteFriend58Play_reflection_;
  delete RetInviteFriend58Play::default_instance_;
  delete RetInviteFriend58Play_reflection_;
  delete FbLikeFeed::default_instance_;
  delete FbLikeFeed_reflection_;
  delete RetFbLikeFeed::default_instance_;
  delete RetFbLikeFeed_reflection_;
  delete FBReward::default_instance_;
  delete FBReward_reflection_;
  delete RewardList::default_instance_;
  delete RewardList_reflection_;
  delete GetReward::default_instance_;
  delete GetReward_reflection_;
  delete RetReward::default_instance_;
  delete RetReward_reflection_;
  delete SysFBReward::default_instance_;
  delete SysFBReward_reflection_;
  delete RetSysFBReward::default_instance_;
  delete RetSysFBReward_reflection_;
  delete RetFBLike::default_instance_;
  delete RetFBLike_reflection_;
  delete FBRewardInfo::default_instance_;
  delete FBRewardInfo_reflection_;
  delete RewardListInfo::default_instance_;
  delete RewardListInfo_reflection_;
}

void protobuf_AddDesc_Pay_2f58Play_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\020Pay/58Play.proto\022\rPay58PlayInfo\"{\n\027Fro"
    "m58PlayReqAskPayInfo\022\016\n\006openid\030\001 \002(\t\022\020\n\010"
    "serverid\030\002 \002(\r\022\017\n\007orderid\030\003 \002(\t\022\r\n\005money"
    "\030\004 \002(\r\022\021\n\ttimestamp\030\005 \002(\004\022\013\n\003sig\030\006 \002(\t\"$"
    "\n\025To58PlayReqAskPayInfo\022\013\n\003ret\030\001 \002(\005\"\215\001\n"
    "\020Sys58PlayPayInfo\022\016\n\006charid\030\001 \002(\003\022\016\n\006ope"
    "nid\030\002 \002(\t\022\017\n\007orderid\030\003 \002(\t\022\r\n\005money\030\004 \002("
    "\r\022\021\n\ttimestamp\030\005 \002(\004\022\013\n\003sig\030\006 \002(\t\022\013\n\003ret"
    "\030\007 \002(\005\022\014\n\004flag\030\010 \002(\005\"!\n\022InviteFriend58Pl"
    "ay\022\013\n\003num\030\001 \002(\r\"$\n\025RetInviteFriend58Play"
    "\022\013\n\003ret\030\001 \002(\005\";\n\nFbLikeFeed\022\016\n\006openid\030\001 "
    "\002(\t\022\020\n\010serverid\030\002 \002(\r\022\013\n\003sig\030\003 \002(\t\"\034\n\rRe"
    "tFbLikeFeed\022\013\n\003ret\030\001 \002(\005\"R\n\010FBReward\022\016\n\006"
    "fblike\030\001 \002(\005\022\014\n\004nday\030\002 \001(\005\022(\n\005rlist\030\003 \003("
    "\0132\031.Pay58PlayInfo.RewardList\"+\n\nRewardLi"
    "st\022\r\n\005index\030\001 \002(\005\022\016\n\006statue\030\002 \001(\005\"(\n\tGet"
    "Reward\022\r\n\005index\030\001 \002(\005\022\014\n\004type\030\002 \001(\005\"5\n\tR"
    "etReward\022\013\n\003ret\030\001 \002(\005\022\r\n\005index\030\002 \002(\005\022\014\n\004"
    "type\030\003 \001(\005\"[\n\013SysFBReward\022\016\n\006charid\030\001 \002("
    "\003\022\r\n\005index\030\002 \002(\005\022\014\n\004type\030\003 \001(\005\022\016\n\006itemId"
    "\030\004 \003(\005\022\017\n\007itemNum\030\005 \003(\005\":\n\016RetSysFBRewar"
    "d\022\r\n\005index\030\001 \002(\005\022\014\n\004type\030\002 \001(\005\022\013\n\003ret\030\003 "
    "\002(\005\"G\n\tRetFBLike\022\013\n\003ret\030\001 \002(\005\022\016\n\006openid\030"
    "\002 \001(\t\022\020\n\010serverid\030\003 \001(\r\022\013\n\003sig\030\004 \001(\t\"[\n\014"
    "FBRewardInfo\022\016\n\006fblike\030\001 \002(\005\022\r\n\005ntime\030\002 "
    "\001(\003\022,\n\005rlist\030\003 \003(\0132\035.Pay58PlayInfo.Rewar"
    "dListInfo\">\n\016RewardListInfo\022\r\n\005invit\030\001 \001"
    "(\005\022\016\n\006status\030\002 \001(\005\022\r\n\005index\030\003 \001(\005", 1113);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Pay/58Play.proto", &protobuf_RegisterTypes);
  From58PlayReqAskPayInfo::default_instance_ = new From58PlayReqAskPayInfo();
  To58PlayReqAskPayInfo::default_instance_ = new To58PlayReqAskPayInfo();
  Sys58PlayPayInfo::default_instance_ = new Sys58PlayPayInfo();
  InviteFriend58Play::default_instance_ = new InviteFriend58Play();
  RetInviteFriend58Play::default_instance_ = new RetInviteFriend58Play();
  FbLikeFeed::default_instance_ = new FbLikeFeed();
  RetFbLikeFeed::default_instance_ = new RetFbLikeFeed();
  FBReward::default_instance_ = new FBReward();
  RewardList::default_instance_ = new RewardList();
  GetReward::default_instance_ = new GetReward();
  RetReward::default_instance_ = new RetReward();
  SysFBReward::default_instance_ = new SysFBReward();
  RetSysFBReward::default_instance_ = new RetSysFBReward();
  RetFBLike::default_instance_ = new RetFBLike();
  FBRewardInfo::default_instance_ = new FBRewardInfo();
  RewardListInfo::default_instance_ = new RewardListInfo();
  From58PlayReqAskPayInfo::default_instance_->InitAsDefaultInstance();
  To58PlayReqAskPayInfo::default_instance_->InitAsDefaultInstance();
  Sys58PlayPayInfo::default_instance_->InitAsDefaultInstance();
  InviteFriend58Play::default_instance_->InitAsDefaultInstance();
  RetInviteFriend58Play::default_instance_->InitAsDefaultInstance();
  FbLikeFeed::default_instance_->InitAsDefaultInstance();
  RetFbLikeFeed::default_instance_->InitAsDefaultInstance();
  FBReward::default_instance_->InitAsDefaultInstance();
  RewardList::default_instance_->InitAsDefaultInstance();
  GetReward::default_instance_->InitAsDefaultInstance();
  RetReward::default_instance_->InitAsDefaultInstance();
  SysFBReward::default_instance_->InitAsDefaultInstance();
  RetSysFBReward::default_instance_->InitAsDefaultInstance();
  RetFBLike::default_instance_->InitAsDefaultInstance();
  FBRewardInfo::default_instance_->InitAsDefaultInstance();
  RewardListInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Pay_2f58Play_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Pay_2f58Play_2eproto {
  StaticDescriptorInitializer_Pay_2f58Play_2eproto() {
    protobuf_AddDesc_Pay_2f58Play_2eproto();
  }
} static_descriptor_initializer_Pay_2f58Play_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int From58PlayReqAskPayInfo::kOpenidFieldNumber;
const int From58PlayReqAskPayInfo::kServeridFieldNumber;
const int From58PlayReqAskPayInfo::kOrderidFieldNumber;
const int From58PlayReqAskPayInfo::kMoneyFieldNumber;
const int From58PlayReqAskPayInfo::kTimestampFieldNumber;
const int From58PlayReqAskPayInfo::kSigFieldNumber;
#endif  // !_MSC_VER

From58PlayReqAskPayInfo::From58PlayReqAskPayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void From58PlayReqAskPayInfo::InitAsDefaultInstance() {
}

From58PlayReqAskPayInfo::From58PlayReqAskPayInfo(const From58PlayReqAskPayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void From58PlayReqAskPayInfo::SharedCtor() {
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

From58PlayReqAskPayInfo::~From58PlayReqAskPayInfo() {
  SharedDtor();
}

void From58PlayReqAskPayInfo::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (this != default_instance_) {
  }
}

void From58PlayReqAskPayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* From58PlayReqAskPayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return From58PlayReqAskPayInfo_descriptor_;
}

const From58PlayReqAskPayInfo& From58PlayReqAskPayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

From58PlayReqAskPayInfo* From58PlayReqAskPayInfo::default_instance_ = NULL;

From58PlayReqAskPayInfo* From58PlayReqAskPayInfo::New() const {
  return new From58PlayReqAskPayInfo;
}

void From58PlayReqAskPayInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    serverid_ = 0u;
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    money_ = 0u;
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::kEmptyString) {
        sig_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool From58PlayReqAskPayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string openid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orderid;
        break;
      }

      // required string orderid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // required uint32 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sig;
        break;
      }

      // required string sig = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sig().data(), this->sig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void From58PlayReqAskPayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->openid(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // required string orderid = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderid(), output);
  }

  // required uint32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->money(), output);
  }

  // required uint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // required string sig = 6;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* From58PlayReqAskPayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // required string orderid = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderid(), target);
  }

  // required uint32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->money(), target);
  }

  // required uint64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // required string sig = 6;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int From58PlayReqAskPayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string openid = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required string orderid = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // required uint32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // required uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required string sig = 6;
    if (has_sig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void From58PlayReqAskPayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const From58PlayReqAskPayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const From58PlayReqAskPayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void From58PlayReqAskPayInfo::MergeFrom(const From58PlayReqAskPayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void From58PlayReqAskPayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void From58PlayReqAskPayInfo::CopyFrom(const From58PlayReqAskPayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool From58PlayReqAskPayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003f) != 0x0000003f) return false;

  return true;
}

void From58PlayReqAskPayInfo::Swap(From58PlayReqAskPayInfo* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(serverid_, other->serverid_);
    std::swap(orderid_, other->orderid_);
    std::swap(money_, other->money_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(sig_, other->sig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata From58PlayReqAskPayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = From58PlayReqAskPayInfo_descriptor_;
  metadata.reflection = From58PlayReqAskPayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int To58PlayReqAskPayInfo::kRetFieldNumber;
#endif  // !_MSC_VER

To58PlayReqAskPayInfo::To58PlayReqAskPayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void To58PlayReqAskPayInfo::InitAsDefaultInstance() {
}

To58PlayReqAskPayInfo::To58PlayReqAskPayInfo(const To58PlayReqAskPayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void To58PlayReqAskPayInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

To58PlayReqAskPayInfo::~To58PlayReqAskPayInfo() {
  SharedDtor();
}

void To58PlayReqAskPayInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void To58PlayReqAskPayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* To58PlayReqAskPayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return To58PlayReqAskPayInfo_descriptor_;
}

const To58PlayReqAskPayInfo& To58PlayReqAskPayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

To58PlayReqAskPayInfo* To58PlayReqAskPayInfo::default_instance_ = NULL;

To58PlayReqAskPayInfo* To58PlayReqAskPayInfo::New() const {
  return new To58PlayReqAskPayInfo;
}

void To58PlayReqAskPayInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool To58PlayReqAskPayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void To58PlayReqAskPayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* To58PlayReqAskPayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int To58PlayReqAskPayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void To58PlayReqAskPayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const To58PlayReqAskPayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const To58PlayReqAskPayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void To58PlayReqAskPayInfo::MergeFrom(const To58PlayReqAskPayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void To58PlayReqAskPayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void To58PlayReqAskPayInfo::CopyFrom(const To58PlayReqAskPayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool To58PlayReqAskPayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void To58PlayReqAskPayInfo::Swap(To58PlayReqAskPayInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata To58PlayReqAskPayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = To58PlayReqAskPayInfo_descriptor_;
  metadata.reflection = To58PlayReqAskPayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Sys58PlayPayInfo::kCharidFieldNumber;
const int Sys58PlayPayInfo::kOpenidFieldNumber;
const int Sys58PlayPayInfo::kOrderidFieldNumber;
const int Sys58PlayPayInfo::kMoneyFieldNumber;
const int Sys58PlayPayInfo::kTimestampFieldNumber;
const int Sys58PlayPayInfo::kSigFieldNumber;
const int Sys58PlayPayInfo::kRetFieldNumber;
const int Sys58PlayPayInfo::kFlagFieldNumber;
#endif  // !_MSC_VER

Sys58PlayPayInfo::Sys58PlayPayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Sys58PlayPayInfo::InitAsDefaultInstance() {
}

Sys58PlayPayInfo::Sys58PlayPayInfo(const Sys58PlayPayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Sys58PlayPayInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  money_ = 0u;
  timestamp_ = GOOGLE_ULONGLONG(0);
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ret_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Sys58PlayPayInfo::~Sys58PlayPayInfo() {
  SharedDtor();
}

void Sys58PlayPayInfo::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (this != default_instance_) {
  }
}

void Sys58PlayPayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Sys58PlayPayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Sys58PlayPayInfo_descriptor_;
}

const Sys58PlayPayInfo& Sys58PlayPayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

Sys58PlayPayInfo* Sys58PlayPayInfo::default_instance_ = NULL;

Sys58PlayPayInfo* Sys58PlayPayInfo::New() const {
  return new Sys58PlayPayInfo;
}

void Sys58PlayPayInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    if (has_orderid()) {
      if (orderid_ != &::google::protobuf::internal::kEmptyString) {
        orderid_->clear();
      }
    }
    money_ = 0u;
    timestamp_ = GOOGLE_ULONGLONG(0);
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::kEmptyString) {
        sig_->clear();
      }
    }
    ret_ = 0;
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Sys58PlayPayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // required string openid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_orderid;
        break;
      }

      // required string orderid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_orderid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_orderid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->orderid().data(), this->orderid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_money;
        break;
      }

      // required uint32 money = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_timestamp;
        break;
      }

      // required uint64 timestamp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_sig;
        break;
      }

      // required string sig = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sig().data(), this->sig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_ret;
        break;
      }

      // required int32 ret = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_flag;
        break;
      }

      // required int32 flag = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Sys58PlayPayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid(), output);
  }

  // required string orderid = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->orderid(), output);
  }

  // required uint32 money = 4;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->money(), output);
  }

  // required uint64 timestamp = 5;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(5, this->timestamp(), output);
  }

  // required string sig = 6;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->sig(), output);
  }

  // required int32 ret = 7;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->ret(), output);
  }

  // required int32 flag = 8;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Sys58PlayPayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  // required string orderid = 3;
  if (has_orderid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->orderid().data(), this->orderid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->orderid(), target);
  }

  // required uint32 money = 4;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->money(), target);
  }

  // required uint64 timestamp = 5;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(5, this->timestamp(), target);
  }

  // required string sig = 6;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->sig(), target);
  }

  // required int32 ret = 7;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->ret(), target);
  }

  // required int32 flag = 8;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Sys58PlayPayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required string orderid = 3;
    if (has_orderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->orderid());
    }

    // required uint32 money = 4;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->money());
    }

    // required uint64 timestamp = 5;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->timestamp());
    }

    // required string sig = 6;
    if (has_sig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sig());
    }

    // required int32 ret = 7;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 flag = 8;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Sys58PlayPayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Sys58PlayPayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Sys58PlayPayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Sys58PlayPayInfo::MergeFrom(const Sys58PlayPayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_orderid()) {
      set_orderid(from.orderid());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Sys58PlayPayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Sys58PlayPayInfo::CopyFrom(const Sys58PlayPayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Sys58PlayPayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x000000ff) != 0x000000ff) return false;

  return true;
}

void Sys58PlayPayInfo::Swap(Sys58PlayPayInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(openid_, other->openid_);
    std::swap(orderid_, other->orderid_);
    std::swap(money_, other->money_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(sig_, other->sig_);
    std::swap(ret_, other->ret_);
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Sys58PlayPayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Sys58PlayPayInfo_descriptor_;
  metadata.reflection = Sys58PlayPayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InviteFriend58Play::kNumFieldNumber;
#endif  // !_MSC_VER

InviteFriend58Play::InviteFriend58Play()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InviteFriend58Play::InitAsDefaultInstance() {
}

InviteFriend58Play::InviteFriend58Play(const InviteFriend58Play& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InviteFriend58Play::SharedCtor() {
  _cached_size_ = 0;
  num_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InviteFriend58Play::~InviteFriend58Play() {
  SharedDtor();
}

void InviteFriend58Play::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InviteFriend58Play::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InviteFriend58Play::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InviteFriend58Play_descriptor_;
}

const InviteFriend58Play& InviteFriend58Play::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

InviteFriend58Play* InviteFriend58Play::default_instance_ = NULL;

InviteFriend58Play* InviteFriend58Play::New() const {
  return new InviteFriend58Play;
}

void InviteFriend58Play::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    num_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InviteFriend58Play::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required uint32 num = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InviteFriend58Play::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required uint32 num = 1;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(1, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InviteFriend58Play::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required uint32 num = 1;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(1, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InviteFriend58Play::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required uint32 num = 1;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InviteFriend58Play::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InviteFriend58Play* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InviteFriend58Play*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InviteFriend58Play::MergeFrom(const InviteFriend58Play& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InviteFriend58Play::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InviteFriend58Play::CopyFrom(const InviteFriend58Play& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InviteFriend58Play::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InviteFriend58Play::Swap(InviteFriend58Play* other) {
  if (other != this) {
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InviteFriend58Play::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InviteFriend58Play_descriptor_;
  metadata.reflection = InviteFriend58Play_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetInviteFriend58Play::kRetFieldNumber;
#endif  // !_MSC_VER

RetInviteFriend58Play::RetInviteFriend58Play()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetInviteFriend58Play::InitAsDefaultInstance() {
}

RetInviteFriend58Play::RetInviteFriend58Play(const RetInviteFriend58Play& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetInviteFriend58Play::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetInviteFriend58Play::~RetInviteFriend58Play() {
  SharedDtor();
}

void RetInviteFriend58Play::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetInviteFriend58Play::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetInviteFriend58Play::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetInviteFriend58Play_descriptor_;
}

const RetInviteFriend58Play& RetInviteFriend58Play::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

RetInviteFriend58Play* RetInviteFriend58Play::default_instance_ = NULL;

RetInviteFriend58Play* RetInviteFriend58Play::New() const {
  return new RetInviteFriend58Play;
}

void RetInviteFriend58Play::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetInviteFriend58Play::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetInviteFriend58Play::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetInviteFriend58Play::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetInviteFriend58Play::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetInviteFriend58Play::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetInviteFriend58Play* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetInviteFriend58Play*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetInviteFriend58Play::MergeFrom(const RetInviteFriend58Play& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetInviteFriend58Play::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetInviteFriend58Play::CopyFrom(const RetInviteFriend58Play& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetInviteFriend58Play::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetInviteFriend58Play::Swap(RetInviteFriend58Play* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetInviteFriend58Play::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetInviteFriend58Play_descriptor_;
  metadata.reflection = RetInviteFriend58Play_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FbLikeFeed::kOpenidFieldNumber;
const int FbLikeFeed::kServeridFieldNumber;
const int FbLikeFeed::kSigFieldNumber;
#endif  // !_MSC_VER

FbLikeFeed::FbLikeFeed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FbLikeFeed::InitAsDefaultInstance() {
}

FbLikeFeed::FbLikeFeed(const FbLikeFeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FbLikeFeed::SharedCtor() {
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FbLikeFeed::~FbLikeFeed() {
  SharedDtor();
}

void FbLikeFeed::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (this != default_instance_) {
  }
}

void FbLikeFeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FbLikeFeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FbLikeFeed_descriptor_;
}

const FbLikeFeed& FbLikeFeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

FbLikeFeed* FbLikeFeed::default_instance_ = NULL;

FbLikeFeed* FbLikeFeed::New() const {
  return new FbLikeFeed;
}

void FbLikeFeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    serverid_ = 0u;
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::kEmptyString) {
        sig_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FbLikeFeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string openid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_serverid;
        break;
      }

      // required uint32 serverid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_sig;
        break;
      }

      // required string sig = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sig().data(), this->sig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FbLikeFeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->openid(), output);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->serverid(), output);
  }

  // required string sig = 3;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->sig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FbLikeFeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  // required uint32 serverid = 2;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->serverid(), target);
  }

  // required string sig = 3;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->sig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FbLikeFeed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string openid = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required uint32 serverid = 2;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // required string sig = 3;
    if (has_sig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FbLikeFeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FbLikeFeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FbLikeFeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FbLikeFeed::MergeFrom(const FbLikeFeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FbLikeFeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FbLikeFeed::CopyFrom(const FbLikeFeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FbLikeFeed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void FbLikeFeed::Swap(FbLikeFeed* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(serverid_, other->serverid_);
    std::swap(sig_, other->sig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FbLikeFeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FbLikeFeed_descriptor_;
  metadata.reflection = FbLikeFeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetFbLikeFeed::kRetFieldNumber;
#endif  // !_MSC_VER

RetFbLikeFeed::RetFbLikeFeed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetFbLikeFeed::InitAsDefaultInstance() {
}

RetFbLikeFeed::RetFbLikeFeed(const RetFbLikeFeed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetFbLikeFeed::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetFbLikeFeed::~RetFbLikeFeed() {
  SharedDtor();
}

void RetFbLikeFeed::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetFbLikeFeed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetFbLikeFeed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetFbLikeFeed_descriptor_;
}

const RetFbLikeFeed& RetFbLikeFeed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

RetFbLikeFeed* RetFbLikeFeed::default_instance_ = NULL;

RetFbLikeFeed* RetFbLikeFeed::New() const {
  return new RetFbLikeFeed;
}

void RetFbLikeFeed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetFbLikeFeed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetFbLikeFeed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetFbLikeFeed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetFbLikeFeed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetFbLikeFeed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetFbLikeFeed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetFbLikeFeed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetFbLikeFeed::MergeFrom(const RetFbLikeFeed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetFbLikeFeed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetFbLikeFeed::CopyFrom(const RetFbLikeFeed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetFbLikeFeed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetFbLikeFeed::Swap(RetFbLikeFeed* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetFbLikeFeed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetFbLikeFeed_descriptor_;
  metadata.reflection = RetFbLikeFeed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FBReward::kFblikeFieldNumber;
const int FBReward::kNdayFieldNumber;
const int FBReward::kRlistFieldNumber;
#endif  // !_MSC_VER

FBReward::FBReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FBReward::InitAsDefaultInstance() {
}

FBReward::FBReward(const FBReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FBReward::SharedCtor() {
  _cached_size_ = 0;
  fblike_ = 0;
  nday_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FBReward::~FBReward() {
  SharedDtor();
}

void FBReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FBReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FBReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FBReward_descriptor_;
}

const FBReward& FBReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

FBReward* FBReward::default_instance_ = NULL;

FBReward* FBReward::New() const {
  return new FBReward;
}

void FBReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fblike_ = 0;
    nday_ = 0;
  }
  rlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FBReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fblike = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fblike_)));
          set_has_fblike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nday;
        break;
      }

      // optional int32 nday = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nday:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nday_)));
          set_has_nday();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rlist;
        break;
      }

      // repeated .Pay58PlayInfo.RewardList rlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FBReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fblike = 1;
  if (has_fblike()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fblike(), output);
  }

  // optional int32 nday = 2;
  if (has_nday()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nday(), output);
  }

  // repeated .Pay58PlayInfo.RewardList rlist = 3;
  for (int i = 0; i < this->rlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FBReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fblike = 1;
  if (has_fblike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fblike(), target);
  }

  // optional int32 nday = 2;
  if (has_nday()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nday(), target);
  }

  // repeated .Pay58PlayInfo.RewardList rlist = 3;
  for (int i = 0; i < this->rlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FBReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fblike = 1;
    if (has_fblike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fblike());
    }

    // optional int32 nday = 2;
    if (has_nday()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nday());
    }

  }
  // repeated .Pay58PlayInfo.RewardList rlist = 3;
  total_size += 1 * this->rlist_size();
  for (int i = 0; i < this->rlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FBReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FBReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FBReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FBReward::MergeFrom(const FBReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  rlist_.MergeFrom(from.rlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fblike()) {
      set_fblike(from.fblike());
    }
    if (from.has_nday()) {
      set_nday(from.nday());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FBReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FBReward::CopyFrom(const FBReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FBReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < rlist_size(); i++) {
    if (!this->rlist(i).IsInitialized()) return false;
  }
  return true;
}

void FBReward::Swap(FBReward* other) {
  if (other != this) {
    std::swap(fblike_, other->fblike_);
    std::swap(nday_, other->nday_);
    rlist_.Swap(&other->rlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FBReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FBReward_descriptor_;
  metadata.reflection = FBReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardList::kIndexFieldNumber;
const int RewardList::kStatueFieldNumber;
#endif  // !_MSC_VER

RewardList::RewardList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewardList::InitAsDefaultInstance() {
}

RewardList::RewardList(const RewardList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewardList::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  statue_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardList::~RewardList() {
  SharedDtor();
}

void RewardList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardList_descriptor_;
}

const RewardList& RewardList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

RewardList* RewardList::default_instance_ = NULL;

RewardList* RewardList::New() const {
  return new RewardList;
}

void RewardList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    statue_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_statue;
        break;
      }

      // optional int32 statue = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_statue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &statue_)));
          set_has_statue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewardList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 statue = 2;
  if (has_statue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->statue(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewardList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 statue = 2;
  if (has_statue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->statue(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewardList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 statue = 2;
    if (has_statue()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->statue());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardList::MergeFrom(const RewardList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_statue()) {
      set_statue(from.statue());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardList::CopyFrom(const RewardList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RewardList::Swap(RewardList* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(statue_, other->statue_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardList_descriptor_;
  metadata.reflection = RewardList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetReward::kIndexFieldNumber;
const int GetReward::kTypeFieldNumber;
#endif  // !_MSC_VER

GetReward::GetReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetReward::InitAsDefaultInstance() {
}

GetReward::GetReward(const GetReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetReward::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetReward::~GetReward() {
  SharedDtor();
}

void GetReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetReward_descriptor_;
}

const GetReward& GetReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

GetReward* GetReward::default_instance_ = NULL;

GetReward* GetReward::New() const {
  return new GetReward;
}

void GetReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetReward::MergeFrom(const GetReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetReward::CopyFrom(const GetReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetReward::Swap(GetReward* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetReward_descriptor_;
  metadata.reflection = GetReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetReward::kRetFieldNumber;
const int RetReward::kIndexFieldNumber;
const int RetReward::kTypeFieldNumber;
#endif  // !_MSC_VER

RetReward::RetReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetReward::InitAsDefaultInstance() {
}

RetReward::RetReward(const RetReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetReward::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  index_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetReward::~RetReward() {
  SharedDtor();
}

void RetReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetReward_descriptor_;
}

const RetReward& RetReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

RetReward* RetReward::default_instance_ = NULL;

RetReward* RetReward::New() const {
  return new RetReward;
}

void RetReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    index_ = 0;
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetReward::MergeFrom(const RetReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetReward::CopyFrom(const RetReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RetReward::Swap(RetReward* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(index_, other->index_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetReward_descriptor_;
  metadata.reflection = RetReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysFBReward::kCharidFieldNumber;
const int SysFBReward::kIndexFieldNumber;
const int SysFBReward::kTypeFieldNumber;
const int SysFBReward::kItemIdFieldNumber;
const int SysFBReward::kItemNumFieldNumber;
#endif  // !_MSC_VER

SysFBReward::SysFBReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysFBReward::InitAsDefaultInstance() {
}

SysFBReward::SysFBReward(const SysFBReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysFBReward::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  index_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysFBReward::~SysFBReward() {
  SharedDtor();
}

void SysFBReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysFBReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysFBReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysFBReward_descriptor_;
}

const SysFBReward& SysFBReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

SysFBReward* SysFBReward::default_instance_ = NULL;

SysFBReward* SysFBReward::New() const {
  return new SysFBReward;
}

void SysFBReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    index_ = 0;
    type_ = 0;
  }
  itemid_.Clear();
  itemnum_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysFBReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_index;
        break;
      }

      // required int32 index = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_type;
        break;
      }

      // optional int32 type = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemId;
        break;
      }

      // repeated int32 itemId = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_itemId;
        if (input->ExpectTag(40)) goto parse_itemNum;
        break;
      }

      // repeated int32 itemNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 40, input, this->mutable_itemnum())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemnum())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_itemNum;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysFBReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 index = 2;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->index(), output);
  }

  // optional int32 type = 3;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->type(), output);
  }

  // repeated int32 itemId = 4;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->itemid(i), output);
  }

  // repeated int32 itemNum = 5;
  for (int i = 0; i < this->itemnum_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      5, this->itemnum(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysFBReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 index = 2;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->index(), target);
  }

  // optional int32 type = 3;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->type(), target);
  }

  // repeated int32 itemId = 4;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->itemid(i), target);
  }

  // repeated int32 itemNum = 5;
  for (int i = 0; i < this->itemnum_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(5, this->itemnum(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysFBReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 index = 2;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 type = 3;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated int32 itemId = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  // repeated int32 itemNum = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemnum_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemnum(i));
    }
    total_size += 1 * this->itemnum_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysFBReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysFBReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysFBReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysFBReward::MergeFrom(const SysFBReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  itemnum_.MergeFrom(from.itemnum_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysFBReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysFBReward::CopyFrom(const SysFBReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysFBReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SysFBReward::Swap(SysFBReward* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(index_, other->index_);
    std::swap(type_, other->type_);
    itemid_.Swap(&other->itemid_);
    itemnum_.Swap(&other->itemnum_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysFBReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysFBReward_descriptor_;
  metadata.reflection = SysFBReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetSysFBReward::kIndexFieldNumber;
const int RetSysFBReward::kTypeFieldNumber;
const int RetSysFBReward::kRetFieldNumber;
#endif  // !_MSC_VER

RetSysFBReward::RetSysFBReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetSysFBReward::InitAsDefaultInstance() {
}

RetSysFBReward::RetSysFBReward(const RetSysFBReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetSysFBReward::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  type_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetSysFBReward::~RetSysFBReward() {
  SharedDtor();
}

void RetSysFBReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetSysFBReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetSysFBReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetSysFBReward_descriptor_;
}

const RetSysFBReward& RetSysFBReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

RetSysFBReward* RetSysFBReward::default_instance_ = NULL;

RetSysFBReward* RetSysFBReward::New() const {
  return new RetSysFBReward;
}

void RetSysFBReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    type_ = 0;
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetSysFBReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // optional int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ret;
        break;
      }

      // required int32 ret = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ret:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetSysFBReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 ret = 3;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetSysFBReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 ret = 3;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetSysFBReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 ret = 3;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetSysFBReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetSysFBReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetSysFBReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetSysFBReward::MergeFrom(const RetSysFBReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetSysFBReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetSysFBReward::CopyFrom(const RetSysFBReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetSysFBReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void RetSysFBReward::Swap(RetSysFBReward* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(type_, other->type_);
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetSysFBReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetSysFBReward_descriptor_;
  metadata.reflection = RetSysFBReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetFBLike::kRetFieldNumber;
const int RetFBLike::kOpenidFieldNumber;
const int RetFBLike::kServeridFieldNumber;
const int RetFBLike::kSigFieldNumber;
#endif  // !_MSC_VER

RetFBLike::RetFBLike()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetFBLike::InitAsDefaultInstance() {
}

RetFBLike::RetFBLike(const RetFBLike& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetFBLike::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0u;
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetFBLike::~RetFBLike() {
  SharedDtor();
}

void RetFBLike::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (this != default_instance_) {
  }
}

void RetFBLike::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetFBLike::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetFBLike_descriptor_;
}

const RetFBLike& RetFBLike::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

RetFBLike* RetFBLike::default_instance_ = NULL;

RetFBLike* RetFBLike::New() const {
  return new RetFBLike;
}

void RetFBLike::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    serverid_ = 0u;
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::kEmptyString) {
        sig_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetFBLike::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // optional string openid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_serverid;
        break;
      }

      // optional uint32 serverid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_sig;
        break;
      }

      // optional string sig = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sig().data(), this->sig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetFBLike::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid(), output);
  }

  // optional uint32 serverid = 3;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(3, this->serverid(), output);
  }

  // optional string sig = 4;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->sig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetFBLike::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  // optional uint32 serverid = 3;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(3, this->serverid(), target);
  }

  // optional string sig = 4;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->sig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetFBLike::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional uint32 serverid = 3;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->serverid());
    }

    // optional string sig = 4;
    if (has_sig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetFBLike::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetFBLike* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetFBLike*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetFBLike::MergeFrom(const RetFBLike& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetFBLike::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetFBLike::CopyFrom(const RetFBLike& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetFBLike::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetFBLike::Swap(RetFBLike* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(openid_, other->openid_);
    std::swap(serverid_, other->serverid_);
    std::swap(sig_, other->sig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetFBLike::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetFBLike_descriptor_;
  metadata.reflection = RetFBLike_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FBRewardInfo::kFblikeFieldNumber;
const int FBRewardInfo::kNtimeFieldNumber;
const int FBRewardInfo::kRlistFieldNumber;
#endif  // !_MSC_VER

FBRewardInfo::FBRewardInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FBRewardInfo::InitAsDefaultInstance() {
}

FBRewardInfo::FBRewardInfo(const FBRewardInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FBRewardInfo::SharedCtor() {
  _cached_size_ = 0;
  fblike_ = 0;
  ntime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FBRewardInfo::~FBRewardInfo() {
  SharedDtor();
}

void FBRewardInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FBRewardInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FBRewardInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FBRewardInfo_descriptor_;
}

const FBRewardInfo& FBRewardInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

FBRewardInfo* FBRewardInfo::default_instance_ = NULL;

FBRewardInfo* FBRewardInfo::New() const {
  return new FBRewardInfo;
}

void FBRewardInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    fblike_ = 0;
    ntime_ = GOOGLE_LONGLONG(0);
  }
  rlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FBRewardInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 fblike = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fblike_)));
          set_has_fblike();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ntime;
        break;
      }

      // optional int64 ntime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ntime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ntime_)));
          set_has_ntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rlist;
        break;
      }

      // repeated .Pay58PlayInfo.RewardListInfo rlist = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_rlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_rlist;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FBRewardInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 fblike = 1;
  if (has_fblike()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->fblike(), output);
  }

  // optional int64 ntime = 2;
  if (has_ntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ntime(), output);
  }

  // repeated .Pay58PlayInfo.RewardListInfo rlist = 3;
  for (int i = 0; i < this->rlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->rlist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FBRewardInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 fblike = 1;
  if (has_fblike()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->fblike(), target);
  }

  // optional int64 ntime = 2;
  if (has_ntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ntime(), target);
  }

  // repeated .Pay58PlayInfo.RewardListInfo rlist = 3;
  for (int i = 0; i < this->rlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->rlist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FBRewardInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 fblike = 1;
    if (has_fblike()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fblike());
    }

    // optional int64 ntime = 2;
    if (has_ntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ntime());
    }

  }
  // repeated .Pay58PlayInfo.RewardListInfo rlist = 3;
  total_size += 1 * this->rlist_size();
  for (int i = 0; i < this->rlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->rlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FBRewardInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FBRewardInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FBRewardInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FBRewardInfo::MergeFrom(const FBRewardInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rlist_.MergeFrom(from.rlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_fblike()) {
      set_fblike(from.fblike());
    }
    if (from.has_ntime()) {
      set_ntime(from.ntime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FBRewardInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FBRewardInfo::CopyFrom(const FBRewardInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FBRewardInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FBRewardInfo::Swap(FBRewardInfo* other) {
  if (other != this) {
    std::swap(fblike_, other->fblike_);
    std::swap(ntime_, other->ntime_);
    rlist_.Swap(&other->rlist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FBRewardInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FBRewardInfo_descriptor_;
  metadata.reflection = FBRewardInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RewardListInfo::kInvitFieldNumber;
const int RewardListInfo::kStatusFieldNumber;
const int RewardListInfo::kIndexFieldNumber;
#endif  // !_MSC_VER

RewardListInfo::RewardListInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RewardListInfo::InitAsDefaultInstance() {
}

RewardListInfo::RewardListInfo(const RewardListInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RewardListInfo::SharedCtor() {
  _cached_size_ = 0;
  invit_ = 0;
  status_ = 0;
  index_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RewardListInfo::~RewardListInfo() {
  SharedDtor();
}

void RewardListInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RewardListInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RewardListInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RewardListInfo_descriptor_;
}

const RewardListInfo& RewardListInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2f58Play_2eproto();
  return *default_instance_;
}

RewardListInfo* RewardListInfo::default_instance_ = NULL;

RewardListInfo* RewardListInfo::New() const {
  return new RewardListInfo;
}

void RewardListInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    invit_ = 0;
    status_ = 0;
    index_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RewardListInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 invit = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &invit_)));
          set_has_invit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // optional int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_index;
        break;
      }

      // optional int32 index = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_index:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RewardListInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 invit = 1;
  if (has_invit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->invit(), output);
  }

  // optional int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  // optional int32 index = 3;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->index(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RewardListInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 invit = 1;
  if (has_invit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->invit(), target);
  }

  // optional int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  // optional int32 index = 3;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->index(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RewardListInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 invit = 1;
    if (has_invit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->invit());
    }

    // optional int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

    // optional int32 index = 3;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RewardListInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RewardListInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RewardListInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RewardListInfo::MergeFrom(const RewardListInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_invit()) {
      set_invit(from.invit());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
    if (from.has_index()) {
      set_index(from.index());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RewardListInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RewardListInfo::CopyFrom(const RewardListInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RewardListInfo::IsInitialized() const {

  return true;
}

void RewardListInfo::Swap(RewardListInfo* other) {
  if (other != this) {
    std::swap(invit_, other->invit_);
    std::swap(status_, other->status_);
    std::swap(index_, other->index_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RewardListInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RewardListInfo_descriptor_;
  metadata.reflection = RewardListInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pay58PlayInfo

// @@protoc_insertion_point(global_scope)
