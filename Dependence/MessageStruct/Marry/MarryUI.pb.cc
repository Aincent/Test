// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Marry/MarryUI.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Marry/MarryUI.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MarryUI {

namespace {

const ::google::protobuf::Descriptor* MarryFriendInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryFriendInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnOpenNotMarryUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnOpenNotMarryUI_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryOtherInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryOtherInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReturnOpenHaveMarryUI_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReturnOpenHaveMarryUI_reflection_ = NULL;
const ::google::protobuf::Descriptor* NoticeRequestMarry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NoticeRequestMarry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ResultRequestMarry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ResultRequestMarry_reflection_ = NULL;
const ::google::protobuf::Descriptor* GiveFlower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GiveFlower_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReceiveFlower_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReceiveFlower_reflection_ = NULL;
const ::google::protobuf::Descriptor* RingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RequestAdvanceMarryRing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RequestAdvanceMarryRing_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryCritType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryCritType_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryItemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpMarryStepReturn_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpMarryStepReturn_reflection_ = NULL;
const ::google::protobuf::Descriptor* UpdateMarryOtherInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  UpdateMarryOtherInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Marry_2fMarryUI_2eproto() {
  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Marry/MarryUI.proto");
  GOOGLE_CHECK(file != NULL);
  MarryFriendInfo_descriptor_ = file->message_type(0);
  static const int MarryFriendInfo_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryFriendInfo, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryFriendInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryFriendInfo, fighting_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryFriendInfo, isonline_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryFriendInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryFriendInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryFriendInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryFriendInfo, cohesion_),
  };
  MarryFriendInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryFriendInfo_descriptor_,
      MarryFriendInfo::default_instance_,
      MarryFriendInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryFriendInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryFriendInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryFriendInfo));
  ReturnOpenNotMarryUI_descriptor_ = file->message_type(1);
  static const int ReturnOpenNotMarryUI_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnOpenNotMarryUI, friendinfolist_),
  };
  ReturnOpenNotMarryUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnOpenNotMarryUI_descriptor_,
      ReturnOpenNotMarryUI::default_instance_,
      ReturnOpenNotMarryUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnOpenNotMarryUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnOpenNotMarryUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnOpenNotMarryUI));
  MarryOtherInfo_descriptor_ = file->message_type(2);
  static const int MarryOtherInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryOtherInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryOtherInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryOtherInfo, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryOtherInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryOtherInfo, sex_),
  };
  MarryOtherInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryOtherInfo_descriptor_,
      MarryOtherInfo::default_instance_,
      MarryOtherInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryOtherInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryOtherInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryOtherInfo));
  ReturnOpenHaveMarryUI_descriptor_ = file->message_type(3);
  static const int ReturnOpenHaveMarryUI_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnOpenHaveMarryUI, receiveinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnOpenHaveMarryUI, marrytime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnOpenHaveMarryUI, proposeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnOpenHaveMarryUI, otherinfo_),
  };
  ReturnOpenHaveMarryUI_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReturnOpenHaveMarryUI_descriptor_,
      ReturnOpenHaveMarryUI::default_instance_,
      ReturnOpenHaveMarryUI_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnOpenHaveMarryUI, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReturnOpenHaveMarryUI, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReturnOpenHaveMarryUI));
  NoticeRequestMarry_descriptor_ = file->message_type(4);
  static const int NoticeRequestMarry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeRequestMarry, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeRequestMarry, name_),
  };
  NoticeRequestMarry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NoticeRequestMarry_descriptor_,
      NoticeRequestMarry::default_instance_,
      NoticeRequestMarry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeRequestMarry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NoticeRequestMarry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NoticeRequestMarry));
  ResultRequestMarry_descriptor_ = file->message_type(5);
  static const int ResultRequestMarry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultRequestMarry, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultRequestMarry, isagree_),
  };
  ResultRequestMarry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ResultRequestMarry_descriptor_,
      ResultRequestMarry::default_instance_,
      ResultRequestMarry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultRequestMarry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ResultRequestMarry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ResultRequestMarry));
  GiveFlower_descriptor_ = file->message_type(6);
  static const int GiveFlower_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveFlower, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveFlower, itemid_),
  };
  GiveFlower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GiveFlower_descriptor_,
      GiveFlower::default_instance_,
      GiveFlower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveFlower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GiveFlower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GiveFlower));
  ReceiveFlower_descriptor_ = file->message_type(7);
  static const int ReceiveFlower_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveFlower, viplevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveFlower, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveFlower, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveFlower, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveFlower, time_),
  };
  ReceiveFlower_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReceiveFlower_descriptor_,
      ReceiveFlower::default_instance_,
      ReceiveFlower_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveFlower, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReceiveFlower, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReceiveFlower));
  RingInfo_descriptor_ = file->message_type(8);
  static const int RingInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingInfo, currentexp_),
  };
  RingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RingInfo_descriptor_,
      RingInfo::default_instance_,
      RingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RingInfo));
  RequestAdvanceMarryRing_descriptor_ = file->message_type(9);
  static const int RequestAdvanceMarryRing_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAdvanceMarryRing, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAdvanceMarryRing, isautobuy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAdvanceMarryRing, id_),
  };
  RequestAdvanceMarryRing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RequestAdvanceMarryRing_descriptor_,
      RequestAdvanceMarryRing::default_instance_,
      RequestAdvanceMarryRing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAdvanceMarryRing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RequestAdvanceMarryRing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RequestAdvanceMarryRing));
  MarryCritType_descriptor_ = file->message_type(10);
  static const int MarryCritType_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryCritType, crittype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryCritType, counts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryCritType, exp_),
  };
  MarryCritType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryCritType_descriptor_,
      MarryCritType::default_instance_,
      MarryCritType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryCritType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryCritType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryCritType));
  MarryItemList_descriptor_ = file->message_type(11);
  static const int MarryItemList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryItemList, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryItemList, counts_),
  };
  MarryItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryItemList_descriptor_,
      MarryItemList::default_instance_,
      MarryItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryItemList));
  UpMarryStepReturn_descriptor_ = file->message_type(12);
  static const int UpMarryStepReturn_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMarryStepReturn, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMarryStepReturn, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMarryStepReturn, currentexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMarryStepReturn, addexp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMarryStepReturn, crittypelist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMarryStepReturn, golden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMarryStepReturn, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMarryStepReturn, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMarryStepReturn, error_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMarryStepReturn, stoperror_),
  };
  UpMarryStepReturn_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpMarryStepReturn_descriptor_,
      UpMarryStepReturn::default_instance_,
      UpMarryStepReturn_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMarryStepReturn, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpMarryStepReturn, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpMarryStepReturn));
  UpdateMarryOtherInfo_descriptor_ = file->message_type(13);
  static const int UpdateMarryOtherInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMarryOtherInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMarryOtherInfo, value_),
  };
  UpdateMarryOtherInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      UpdateMarryOtherInfo_descriptor_,
      UpdateMarryOtherInfo::default_instance_,
      UpdateMarryOtherInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMarryOtherInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(UpdateMarryOtherInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(UpdateMarryOtherInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Marry_2fMarryUI_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryFriendInfo_descriptor_, &MarryFriendInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnOpenNotMarryUI_descriptor_, &ReturnOpenNotMarryUI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryOtherInfo_descriptor_, &MarryOtherInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReturnOpenHaveMarryUI_descriptor_, &ReturnOpenHaveMarryUI::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NoticeRequestMarry_descriptor_, &NoticeRequestMarry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ResultRequestMarry_descriptor_, &ResultRequestMarry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GiveFlower_descriptor_, &GiveFlower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReceiveFlower_descriptor_, &ReceiveFlower::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RingInfo_descriptor_, &RingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RequestAdvanceMarryRing_descriptor_, &RequestAdvanceMarryRing::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryCritType_descriptor_, &MarryCritType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryItemList_descriptor_, &MarryItemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpMarryStepReturn_descriptor_, &UpMarryStepReturn::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    UpdateMarryOtherInfo_descriptor_, &UpdateMarryOtherInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto() {
  delete MarryFriendInfo::default_instance_;
  delete MarryFriendInfo_reflection_;
  delete ReturnOpenNotMarryUI::default_instance_;
  delete ReturnOpenNotMarryUI_reflection_;
  delete MarryOtherInfo::default_instance_;
  delete MarryOtherInfo_reflection_;
  delete ReturnOpenHaveMarryUI::default_instance_;
  delete ReturnOpenHaveMarryUI_reflection_;
  delete NoticeRequestMarry::default_instance_;
  delete NoticeRequestMarry_reflection_;
  delete ResultRequestMarry::default_instance_;
  delete ResultRequestMarry_reflection_;
  delete GiveFlower::default_instance_;
  delete GiveFlower_reflection_;
  delete ReceiveFlower::default_instance_;
  delete ReceiveFlower_reflection_;
  delete RingInfo::default_instance_;
  delete RingInfo_reflection_;
  delete RequestAdvanceMarryRing::default_instance_;
  delete RequestAdvanceMarryRing_reflection_;
  delete MarryCritType::default_instance_;
  delete MarryCritType_reflection_;
  delete MarryItemList::default_instance_;
  delete MarryItemList_reflection_;
  delete UpMarryStepReturn::default_instance_;
  delete UpMarryStepReturn_reflection_;
  delete UpdateMarryOtherInfo::default_instance_;
  delete UpdateMarryOtherInfo_reflection_;
}

void protobuf_AddDesc_Marry_2fMarryUI_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023Marry/MarryUI.proto\022\007MarryUI\"\227\001\n\017Marry"
    "FriendInfo\022\020\n\010playerID\030\001 \001(\003\022\r\n\005level\030\002 "
    "\001(\005\022\020\n\010fighting\030\003 \001(\005\022\020\n\010isOnline\030\004 \001(\010\022"
    "\014\n\004name\030\005 \001(\014\022\022\n\nprofession\030\006 \001(\005\022\013\n\003sex"
    "\030\007 \001(\005\022\020\n\010cohesion\030\010 \001(\005\"H\n\024ReturnOpenNo"
    "tMarryUI\0220\n\016friendInfoList\030\001 \003(\0132\030.Marry"
    "UI.MarryFriendInfo\"c\n\016MarryOtherInfo\022\022\n\n"
    "profession\030\001 \001(\005\022\r\n\005level\030\002 \001(\005\022\023\n\013offli"
    "neTime\030\003 \001(\003\022\014\n\004name\030\004 \001(\014\022\013\n\003sex\030\005 \001(\005\""
    "~\n\025ReturnOpenHaveMarryUI\022\023\n\013receiveInfo\030"
    "\001 \001(\005\022\021\n\tmarryTime\030\002 \001(\003\022\021\n\tproposeID\030\003 "
    "\001(\003\022*\n\totherInfo\030\004 \001(\0132\027.MarryUI.MarryOt"
    "herInfo\"4\n\022NoticeRequestMarry\022\020\n\010playerI"
    "D\030\001 \001(\003\022\014\n\004name\030\002 \001(\014\"7\n\022ResultRequestMa"
    "rry\022\020\n\010playerID\030\001 \001(\003\022\017\n\007isAgree\030\002 \001(\010\"."
    "\n\nGiveFlower\022\020\n\010playerID\030\001 \001(\003\022\016\n\006itemID"
    "\030\002 \001(\005\"_\n\rReceiveFlower\022\020\n\010vipLevel\030\001 \001("
    "\005\022\014\n\004name\030\002 \001(\014\022\016\n\006itemID\030\003 \001(\005\022\020\n\010playe"
    "rID\030\004 \001(\003\022\014\n\004time\030\005 \001(\003\"*\n\010RingInfo\022\n\n\002I"
    "D\030\001 \001(\005\022\022\n\ncurrentExp\030\002 \001(\005\"F\n\027RequestAd"
    "vanceMarryRing\022\014\n\004type\030\001 \001(\005\022\021\n\tisAutoBu"
    "y\030\002 \001(\010\022\n\n\002id\030\003 \001(\005\">\n\rMarryCritType\022\020\n\010"
    "critType\030\001 \001(\005\022\016\n\006counts\030\002 \001(\005\022\013\n\003exp\030\003 "
    "\001(\005\"/\n\rMarryItemList\022\016\n\006itemID\030\001 \001(\005\022\016\n\006"
    "counts\030\002 \001(\005\"\352\001\n\021UpMarryStepReturn\022\014\n\004ty"
    "pe\030\001 \001(\005\022\n\n\002id\030\002 \001(\005\022\022\n\ncurrentExp\030\003 \001(\005"
    "\022\016\n\006addExp\030\004 \001(\005\022,\n\014critTypeList\030\005 \003(\0132\026"
    ".MarryUI.MarryCritType\022\016\n\006golden\030\006 \001(\005\022\r"
    "\n\005money\030\007 \001(\005\022(\n\010itemList\030\010 \003(\0132\026.MarryU"
    "I.MarryItemList\022\r\n\005error\030\t \001(\005\022\021\n\tstopEr"
    "ror\030\n \001(\005\"3\n\024UpdateMarryOtherInfo\022\014\n\004typ"
    "e\030\001 \001(\005\022\r\n\005value\030\002 \001(\003", 1262);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Marry/MarryUI.proto", &protobuf_RegisterTypes);
  MarryFriendInfo::default_instance_ = new MarryFriendInfo();
  ReturnOpenNotMarryUI::default_instance_ = new ReturnOpenNotMarryUI();
  MarryOtherInfo::default_instance_ = new MarryOtherInfo();
  ReturnOpenHaveMarryUI::default_instance_ = new ReturnOpenHaveMarryUI();
  NoticeRequestMarry::default_instance_ = new NoticeRequestMarry();
  ResultRequestMarry::default_instance_ = new ResultRequestMarry();
  GiveFlower::default_instance_ = new GiveFlower();
  ReceiveFlower::default_instance_ = new ReceiveFlower();
  RingInfo::default_instance_ = new RingInfo();
  RequestAdvanceMarryRing::default_instance_ = new RequestAdvanceMarryRing();
  MarryCritType::default_instance_ = new MarryCritType();
  MarryItemList::default_instance_ = new MarryItemList();
  UpMarryStepReturn::default_instance_ = new UpMarryStepReturn();
  UpdateMarryOtherInfo::default_instance_ = new UpdateMarryOtherInfo();
  MarryFriendInfo::default_instance_->InitAsDefaultInstance();
  ReturnOpenNotMarryUI::default_instance_->InitAsDefaultInstance();
  MarryOtherInfo::default_instance_->InitAsDefaultInstance();
  ReturnOpenHaveMarryUI::default_instance_->InitAsDefaultInstance();
  NoticeRequestMarry::default_instance_->InitAsDefaultInstance();
  ResultRequestMarry::default_instance_->InitAsDefaultInstance();
  GiveFlower::default_instance_->InitAsDefaultInstance();
  ReceiveFlower::default_instance_->InitAsDefaultInstance();
  RingInfo::default_instance_->InitAsDefaultInstance();
  RequestAdvanceMarryRing::default_instance_->InitAsDefaultInstance();
  MarryCritType::default_instance_->InitAsDefaultInstance();
  MarryItemList::default_instance_->InitAsDefaultInstance();
  UpMarryStepReturn::default_instance_->InitAsDefaultInstance();
  UpdateMarryOtherInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Marry_2fMarryUI_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Marry_2fMarryUI_2eproto {
  StaticDescriptorInitializer_Marry_2fMarryUI_2eproto() {
    protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  }
} static_descriptor_initializer_Marry_2fMarryUI_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int MarryFriendInfo::kPlayerIDFieldNumber;
const int MarryFriendInfo::kLevelFieldNumber;
const int MarryFriendInfo::kFightingFieldNumber;
const int MarryFriendInfo::kIsOnlineFieldNumber;
const int MarryFriendInfo::kNameFieldNumber;
const int MarryFriendInfo::kProfessionFieldNumber;
const int MarryFriendInfo::kSexFieldNumber;
const int MarryFriendInfo::kCohesionFieldNumber;
#endif  // !_MSC_VER

MarryFriendInfo::MarryFriendInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryFriendInfo::InitAsDefaultInstance() {
}

MarryFriendInfo::MarryFriendInfo(const MarryFriendInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryFriendInfo::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  fighting_ = 0;
  isonline_ = false;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  profession_ = 0;
  sex_ = 0;
  cohesion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryFriendInfo::~MarryFriendInfo() {
  SharedDtor();
}

void MarryFriendInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MarryFriendInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryFriendInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryFriendInfo_descriptor_;
}

const MarryFriendInfo& MarryFriendInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  return *default_instance_;
}

MarryFriendInfo* MarryFriendInfo::default_instance_ = NULL;

MarryFriendInfo* MarryFriendInfo::New() const {
  return new MarryFriendInfo;
}

void MarryFriendInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    fighting_ = 0;
    isonline_ = false;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    profession_ = 0;
    sex_ = 0;
    cohesion_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryFriendInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fighting;
        break;
      }

      // optional int32 fighting = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fighting:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fighting_)));
          set_has_fighting();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isOnline;
        break;
      }

      // optional bool isOnline = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isOnline:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isonline_)));
          set_has_isonline();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_name;
        break;
      }

      // optional bytes name = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_profession;
        break;
      }

      // optional int32 profession = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_sex;
        break;
      }

      // optional int32 sex = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cohesion;
        break;
      }

      // optional int32 cohesion = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cohesion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cohesion_)));
          set_has_cohesion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryFriendInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 fighting = 3;
  if (has_fighting()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fighting(), output);
  }

  // optional bool isOnline = 4;
  if (has_isonline()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isonline(), output);
  }

  // optional bytes name = 5;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->name(), output);
  }

  // optional int32 profession = 6;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->profession(), output);
  }

  // optional int32 sex = 7;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->sex(), output);
  }

  // optional int32 cohesion = 8;
  if (has_cohesion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cohesion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryFriendInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 fighting = 3;
  if (has_fighting()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fighting(), target);
  }

  // optional bool isOnline = 4;
  if (has_isonline()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isonline(), target);
  }

  // optional bytes name = 5;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->name(), target);
  }

  // optional int32 profession = 6;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->profession(), target);
  }

  // optional int32 sex = 7;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->sex(), target);
  }

  // optional int32 cohesion = 8;
  if (has_cohesion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cohesion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryFriendInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 fighting = 3;
    if (has_fighting()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fighting());
    }

    // optional bool isOnline = 4;
    if (has_isonline()) {
      total_size += 1 + 1;
    }

    // optional bytes name = 5;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 profession = 6;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 sex = 7;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int32 cohesion = 8;
    if (has_cohesion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cohesion());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryFriendInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryFriendInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryFriendInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryFriendInfo::MergeFrom(const MarryFriendInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_fighting()) {
      set_fighting(from.fighting());
    }
    if (from.has_isonline()) {
      set_isonline(from.isonline());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_cohesion()) {
      set_cohesion(from.cohesion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryFriendInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryFriendInfo::CopyFrom(const MarryFriendInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryFriendInfo::IsInitialized() const {

  return true;
}

void MarryFriendInfo::Swap(MarryFriendInfo* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(level_, other->level_);
    std::swap(fighting_, other->fighting_);
    std::swap(isonline_, other->isonline_);
    std::swap(name_, other->name_);
    std::swap(profession_, other->profession_);
    std::swap(sex_, other->sex_);
    std::swap(cohesion_, other->cohesion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryFriendInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryFriendInfo_descriptor_;
  metadata.reflection = MarryFriendInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnOpenNotMarryUI::kFriendInfoListFieldNumber;
#endif  // !_MSC_VER

ReturnOpenNotMarryUI::ReturnOpenNotMarryUI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnOpenNotMarryUI::InitAsDefaultInstance() {
}

ReturnOpenNotMarryUI::ReturnOpenNotMarryUI(const ReturnOpenNotMarryUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnOpenNotMarryUI::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnOpenNotMarryUI::~ReturnOpenNotMarryUI() {
  SharedDtor();
}

void ReturnOpenNotMarryUI::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReturnOpenNotMarryUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnOpenNotMarryUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnOpenNotMarryUI_descriptor_;
}

const ReturnOpenNotMarryUI& ReturnOpenNotMarryUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  return *default_instance_;
}

ReturnOpenNotMarryUI* ReturnOpenNotMarryUI::default_instance_ = NULL;

ReturnOpenNotMarryUI* ReturnOpenNotMarryUI::New() const {
  return new ReturnOpenNotMarryUI;
}

void ReturnOpenNotMarryUI::Clear() {
  friendinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnOpenNotMarryUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .MarryUI.MarryFriendInfo friendInfoList = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_friendInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_friendinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_friendInfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnOpenNotMarryUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .MarryUI.MarryFriendInfo friendInfoList = 1;
  for (int i = 0; i < this->friendinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->friendinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnOpenNotMarryUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .MarryUI.MarryFriendInfo friendInfoList = 1;
  for (int i = 0; i < this->friendinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->friendinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnOpenNotMarryUI::ByteSize() const {
  int total_size = 0;

  // repeated .MarryUI.MarryFriendInfo friendInfoList = 1;
  total_size += 1 * this->friendinfolist_size();
  for (int i = 0; i < this->friendinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->friendinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnOpenNotMarryUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnOpenNotMarryUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnOpenNotMarryUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnOpenNotMarryUI::MergeFrom(const ReturnOpenNotMarryUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  friendinfolist_.MergeFrom(from.friendinfolist_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnOpenNotMarryUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnOpenNotMarryUI::CopyFrom(const ReturnOpenNotMarryUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnOpenNotMarryUI::IsInitialized() const {

  return true;
}

void ReturnOpenNotMarryUI::Swap(ReturnOpenNotMarryUI* other) {
  if (other != this) {
    friendinfolist_.Swap(&other->friendinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnOpenNotMarryUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnOpenNotMarryUI_descriptor_;
  metadata.reflection = ReturnOpenNotMarryUI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryOtherInfo::kProfessionFieldNumber;
const int MarryOtherInfo::kLevelFieldNumber;
const int MarryOtherInfo::kOfflineTimeFieldNumber;
const int MarryOtherInfo::kNameFieldNumber;
const int MarryOtherInfo::kSexFieldNumber;
#endif  // !_MSC_VER

MarryOtherInfo::MarryOtherInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryOtherInfo::InitAsDefaultInstance() {
}

MarryOtherInfo::MarryOtherInfo(const MarryOtherInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryOtherInfo::SharedCtor() {
  _cached_size_ = 0;
  profession_ = 0;
  level_ = 0;
  offlinetime_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sex_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryOtherInfo::~MarryOtherInfo() {
  SharedDtor();
}

void MarryOtherInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MarryOtherInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryOtherInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryOtherInfo_descriptor_;
}

const MarryOtherInfo& MarryOtherInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  return *default_instance_;
}

MarryOtherInfo* MarryOtherInfo::default_instance_ = NULL;

MarryOtherInfo* MarryOtherInfo::New() const {
  return new MarryOtherInfo;
}

void MarryOtherInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    profession_ = 0;
    level_ = 0;
    offlinetime_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    sex_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryOtherInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 profession = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_offlineTime;
        break;
      }

      // optional int64 offlineTime = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_name;
        break;
      }

      // optional bytes name = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_sex;
        break;
      }

      // optional int32 sex = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryOtherInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 profession = 1;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->profession(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int64 offlineTime = 3;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->offlinetime(), output);
  }

  // optional bytes name = 4;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->name(), output);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->sex(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryOtherInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 profession = 1;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->profession(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int64 offlineTime = 3;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->offlinetime(), target);
  }

  // optional bytes name = 4;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->name(), target);
  }

  // optional int32 sex = 5;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->sex(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryOtherInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 profession = 1;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int64 offlineTime = 3;
    if (has_offlinetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offlinetime());
    }

    // optional bytes name = 4;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 sex = 5;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryOtherInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryOtherInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryOtherInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryOtherInfo::MergeFrom(const MarryOtherInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryOtherInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryOtherInfo::CopyFrom(const MarryOtherInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryOtherInfo::IsInitialized() const {

  return true;
}

void MarryOtherInfo::Swap(MarryOtherInfo* other) {
  if (other != this) {
    std::swap(profession_, other->profession_);
    std::swap(level_, other->level_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(name_, other->name_);
    std::swap(sex_, other->sex_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryOtherInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryOtherInfo_descriptor_;
  metadata.reflection = MarryOtherInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReturnOpenHaveMarryUI::kReceiveInfoFieldNumber;
const int ReturnOpenHaveMarryUI::kMarryTimeFieldNumber;
const int ReturnOpenHaveMarryUI::kProposeIDFieldNumber;
const int ReturnOpenHaveMarryUI::kOtherInfoFieldNumber;
#endif  // !_MSC_VER

ReturnOpenHaveMarryUI::ReturnOpenHaveMarryUI()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReturnOpenHaveMarryUI::InitAsDefaultInstance() {
  otherinfo_ = const_cast< ::MarryUI::MarryOtherInfo*>(&::MarryUI::MarryOtherInfo::default_instance());
}

ReturnOpenHaveMarryUI::ReturnOpenHaveMarryUI(const ReturnOpenHaveMarryUI& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReturnOpenHaveMarryUI::SharedCtor() {
  _cached_size_ = 0;
  receiveinfo_ = 0;
  marrytime_ = GOOGLE_LONGLONG(0);
  proposeid_ = GOOGLE_LONGLONG(0);
  otherinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReturnOpenHaveMarryUI::~ReturnOpenHaveMarryUI() {
  SharedDtor();
}

void ReturnOpenHaveMarryUI::SharedDtor() {
  if (this != default_instance_) {
    delete otherinfo_;
  }
}

void ReturnOpenHaveMarryUI::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReturnOpenHaveMarryUI::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReturnOpenHaveMarryUI_descriptor_;
}

const ReturnOpenHaveMarryUI& ReturnOpenHaveMarryUI::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  return *default_instance_;
}

ReturnOpenHaveMarryUI* ReturnOpenHaveMarryUI::default_instance_ = NULL;

ReturnOpenHaveMarryUI* ReturnOpenHaveMarryUI::New() const {
  return new ReturnOpenHaveMarryUI;
}

void ReturnOpenHaveMarryUI::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    receiveinfo_ = 0;
    marrytime_ = GOOGLE_LONGLONG(0);
    proposeid_ = GOOGLE_LONGLONG(0);
    if (has_otherinfo()) {
      if (otherinfo_ != NULL) otherinfo_->::MarryUI::MarryOtherInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReturnOpenHaveMarryUI::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 receiveInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &receiveinfo_)));
          set_has_receiveinfo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_marryTime;
        break;
      }

      // optional int64 marryTime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_marryTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marrytime_)));
          set_has_marrytime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_proposeID;
        break;
      }

      // optional int64 proposeID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_proposeID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &proposeid_)));
          set_has_proposeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_otherInfo;
        break;
      }

      // optional .MarryUI.MarryOtherInfo otherInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_otherInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_otherinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReturnOpenHaveMarryUI::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 receiveInfo = 1;
  if (has_receiveinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->receiveinfo(), output);
  }

  // optional int64 marryTime = 2;
  if (has_marrytime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->marrytime(), output);
  }

  // optional int64 proposeID = 3;
  if (has_proposeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->proposeid(), output);
  }

  // optional .MarryUI.MarryOtherInfo otherInfo = 4;
  if (has_otherinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->otherinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReturnOpenHaveMarryUI::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 receiveInfo = 1;
  if (has_receiveinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->receiveinfo(), target);
  }

  // optional int64 marryTime = 2;
  if (has_marrytime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->marrytime(), target);
  }

  // optional int64 proposeID = 3;
  if (has_proposeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->proposeid(), target);
  }

  // optional .MarryUI.MarryOtherInfo otherInfo = 4;
  if (has_otherinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->otherinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReturnOpenHaveMarryUI::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 receiveInfo = 1;
    if (has_receiveinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->receiveinfo());
    }

    // optional int64 marryTime = 2;
    if (has_marrytime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marrytime());
    }

    // optional int64 proposeID = 3;
    if (has_proposeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->proposeid());
    }

    // optional .MarryUI.MarryOtherInfo otherInfo = 4;
    if (has_otherinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->otherinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReturnOpenHaveMarryUI::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReturnOpenHaveMarryUI* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReturnOpenHaveMarryUI*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReturnOpenHaveMarryUI::MergeFrom(const ReturnOpenHaveMarryUI& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_receiveinfo()) {
      set_receiveinfo(from.receiveinfo());
    }
    if (from.has_marrytime()) {
      set_marrytime(from.marrytime());
    }
    if (from.has_proposeid()) {
      set_proposeid(from.proposeid());
    }
    if (from.has_otherinfo()) {
      mutable_otherinfo()->::MarryUI::MarryOtherInfo::MergeFrom(from.otherinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReturnOpenHaveMarryUI::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReturnOpenHaveMarryUI::CopyFrom(const ReturnOpenHaveMarryUI& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReturnOpenHaveMarryUI::IsInitialized() const {

  return true;
}

void ReturnOpenHaveMarryUI::Swap(ReturnOpenHaveMarryUI* other) {
  if (other != this) {
    std::swap(receiveinfo_, other->receiveinfo_);
    std::swap(marrytime_, other->marrytime_);
    std::swap(proposeid_, other->proposeid_);
    std::swap(otherinfo_, other->otherinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReturnOpenHaveMarryUI::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReturnOpenHaveMarryUI_descriptor_;
  metadata.reflection = ReturnOpenHaveMarryUI_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NoticeRequestMarry::kPlayerIDFieldNumber;
const int NoticeRequestMarry::kNameFieldNumber;
#endif  // !_MSC_VER

NoticeRequestMarry::NoticeRequestMarry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NoticeRequestMarry::InitAsDefaultInstance() {
}

NoticeRequestMarry::NoticeRequestMarry(const NoticeRequestMarry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NoticeRequestMarry::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NoticeRequestMarry::~NoticeRequestMarry() {
  SharedDtor();
}

void NoticeRequestMarry::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void NoticeRequestMarry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NoticeRequestMarry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NoticeRequestMarry_descriptor_;
}

const NoticeRequestMarry& NoticeRequestMarry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  return *default_instance_;
}

NoticeRequestMarry* NoticeRequestMarry::default_instance_ = NULL;

NoticeRequestMarry* NoticeRequestMarry::New() const {
  return new NoticeRequestMarry;
}

void NoticeRequestMarry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NoticeRequestMarry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NoticeRequestMarry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NoticeRequestMarry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NoticeRequestMarry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NoticeRequestMarry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NoticeRequestMarry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NoticeRequestMarry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NoticeRequestMarry::MergeFrom(const NoticeRequestMarry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NoticeRequestMarry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NoticeRequestMarry::CopyFrom(const NoticeRequestMarry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NoticeRequestMarry::IsInitialized() const {

  return true;
}

void NoticeRequestMarry::Swap(NoticeRequestMarry* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NoticeRequestMarry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NoticeRequestMarry_descriptor_;
  metadata.reflection = NoticeRequestMarry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ResultRequestMarry::kPlayerIDFieldNumber;
const int ResultRequestMarry::kIsAgreeFieldNumber;
#endif  // !_MSC_VER

ResultRequestMarry::ResultRequestMarry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ResultRequestMarry::InitAsDefaultInstance() {
}

ResultRequestMarry::ResultRequestMarry(const ResultRequestMarry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ResultRequestMarry::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  isagree_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ResultRequestMarry::~ResultRequestMarry() {
  SharedDtor();
}

void ResultRequestMarry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ResultRequestMarry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ResultRequestMarry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ResultRequestMarry_descriptor_;
}

const ResultRequestMarry& ResultRequestMarry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  return *default_instance_;
}

ResultRequestMarry* ResultRequestMarry::default_instance_ = NULL;

ResultRequestMarry* ResultRequestMarry::New() const {
  return new ResultRequestMarry;
}

void ResultRequestMarry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    isagree_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ResultRequestMarry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isAgree;
        break;
      }

      // optional bool isAgree = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAgree:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isagree_)));
          set_has_isagree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ResultRequestMarry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional bool isAgree = 2;
  if (has_isagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isagree(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ResultRequestMarry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional bool isAgree = 2;
  if (has_isagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isagree(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ResultRequestMarry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional bool isAgree = 2;
    if (has_isagree()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ResultRequestMarry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ResultRequestMarry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ResultRequestMarry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ResultRequestMarry::MergeFrom(const ResultRequestMarry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_isagree()) {
      set_isagree(from.isagree());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ResultRequestMarry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ResultRequestMarry::CopyFrom(const ResultRequestMarry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ResultRequestMarry::IsInitialized() const {

  return true;
}

void ResultRequestMarry::Swap(ResultRequestMarry* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(isagree_, other->isagree_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ResultRequestMarry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ResultRequestMarry_descriptor_;
  metadata.reflection = ResultRequestMarry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GiveFlower::kPlayerIDFieldNumber;
const int GiveFlower::kItemIDFieldNumber;
#endif  // !_MSC_VER

GiveFlower::GiveFlower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GiveFlower::InitAsDefaultInstance() {
}

GiveFlower::GiveFlower(const GiveFlower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GiveFlower::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  itemid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GiveFlower::~GiveFlower() {
  SharedDtor();
}

void GiveFlower::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GiveFlower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GiveFlower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GiveFlower_descriptor_;
}

const GiveFlower& GiveFlower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  return *default_instance_;
}

GiveFlower* GiveFlower::default_instance_ = NULL;

GiveFlower* GiveFlower::New() const {
  return new GiveFlower;
}

void GiveFlower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
    itemid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GiveFlower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemID;
        break;
      }

      // optional int32 itemID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GiveFlower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // optional int32 itemID = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GiveFlower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerID = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // optional int32 itemID = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GiveFlower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerID = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int32 itemID = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GiveFlower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GiveFlower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GiveFlower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GiveFlower::MergeFrom(const GiveFlower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GiveFlower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GiveFlower::CopyFrom(const GiveFlower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GiveFlower::IsInitialized() const {

  return true;
}

void GiveFlower::Swap(GiveFlower* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    std::swap(itemid_, other->itemid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GiveFlower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GiveFlower_descriptor_;
  metadata.reflection = GiveFlower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReceiveFlower::kVipLevelFieldNumber;
const int ReceiveFlower::kNameFieldNumber;
const int ReceiveFlower::kItemIDFieldNumber;
const int ReceiveFlower::kPlayerIDFieldNumber;
const int ReceiveFlower::kTimeFieldNumber;
#endif  // !_MSC_VER

ReceiveFlower::ReceiveFlower()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReceiveFlower::InitAsDefaultInstance() {
}

ReceiveFlower::ReceiveFlower(const ReceiveFlower& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReceiveFlower::SharedCtor() {
  _cached_size_ = 0;
  viplevel_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  itemid_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReceiveFlower::~ReceiveFlower() {
  SharedDtor();
}

void ReceiveFlower::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ReceiveFlower::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReceiveFlower::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReceiveFlower_descriptor_;
}

const ReceiveFlower& ReceiveFlower::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  return *default_instance_;
}

ReceiveFlower* ReceiveFlower::default_instance_ = NULL;

ReceiveFlower* ReceiveFlower::New() const {
  return new ReceiveFlower;
}

void ReceiveFlower::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    viplevel_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    itemid_ = 0;
    playerid_ = GOOGLE_LONGLONG(0);
    time_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReceiveFlower::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 vipLevel = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplevel_)));
          set_has_viplevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemID;
        break;
      }

      // optional int32 itemID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_playerID;
        break;
      }

      // optional int64 playerID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_playerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_time;
        break;
      }

      // optional int64 time = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReceiveFlower::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 vipLevel = 1;
  if (has_viplevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->viplevel(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 itemID = 3;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->itemid(), output);
  }

  // optional int64 playerID = 4;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->playerid(), output);
  }

  // optional int64 time = 5;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReceiveFlower::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 vipLevel = 1;
  if (has_viplevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->viplevel(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 itemID = 3;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->itemid(), target);
  }

  // optional int64 playerID = 4;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->playerid(), target);
  }

  // optional int64 time = 5;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReceiveFlower::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 vipLevel = 1;
    if (has_viplevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplevel());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 itemID = 3;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int64 playerID = 4;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

    // optional int64 time = 5;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReceiveFlower::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReceiveFlower* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReceiveFlower*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReceiveFlower::MergeFrom(const ReceiveFlower& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_viplevel()) {
      set_viplevel(from.viplevel());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReceiveFlower::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReceiveFlower::CopyFrom(const ReceiveFlower& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReceiveFlower::IsInitialized() const {

  return true;
}

void ReceiveFlower::Swap(ReceiveFlower* other) {
  if (other != this) {
    std::swap(viplevel_, other->viplevel_);
    std::swap(name_, other->name_);
    std::swap(itemid_, other->itemid_);
    std::swap(playerid_, other->playerid_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReceiveFlower::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReceiveFlower_descriptor_;
  metadata.reflection = ReceiveFlower_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RingInfo::kIDFieldNumber;
const int RingInfo::kCurrentExpFieldNumber;
#endif  // !_MSC_VER

RingInfo::RingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RingInfo::InitAsDefaultInstance() {
}

RingInfo::RingInfo(const RingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RingInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  currentexp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RingInfo::~RingInfo() {
  SharedDtor();
}

void RingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RingInfo_descriptor_;
}

const RingInfo& RingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  return *default_instance_;
}

RingInfo* RingInfo::default_instance_ = NULL;

RingInfo* RingInfo::New() const {
  return new RingInfo;
}

void RingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    currentexp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 ID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_currentExp;
        break;
      }

      // optional int32 currentExp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentexp_)));
          set_has_currentexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 ID = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 currentExp = 2;
  if (has_currentexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->currentexp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 ID = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 currentExp = 2;
  if (has_currentexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->currentexp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 ID = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 currentExp = 2;
    if (has_currentexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentexp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RingInfo::MergeFrom(const RingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_currentexp()) {
      set_currentexp(from.currentexp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RingInfo::CopyFrom(const RingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RingInfo::IsInitialized() const {

  return true;
}

void RingInfo::Swap(RingInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(currentexp_, other->currentexp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RingInfo_descriptor_;
  metadata.reflection = RingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RequestAdvanceMarryRing::kTypeFieldNumber;
const int RequestAdvanceMarryRing::kIsAutoBuyFieldNumber;
const int RequestAdvanceMarryRing::kIdFieldNumber;
#endif  // !_MSC_VER

RequestAdvanceMarryRing::RequestAdvanceMarryRing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RequestAdvanceMarryRing::InitAsDefaultInstance() {
}

RequestAdvanceMarryRing::RequestAdvanceMarryRing(const RequestAdvanceMarryRing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RequestAdvanceMarryRing::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  isautobuy_ = false;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RequestAdvanceMarryRing::~RequestAdvanceMarryRing() {
  SharedDtor();
}

void RequestAdvanceMarryRing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RequestAdvanceMarryRing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RequestAdvanceMarryRing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RequestAdvanceMarryRing_descriptor_;
}

const RequestAdvanceMarryRing& RequestAdvanceMarryRing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  return *default_instance_;
}

RequestAdvanceMarryRing* RequestAdvanceMarryRing::default_instance_ = NULL;

RequestAdvanceMarryRing* RequestAdvanceMarryRing::New() const {
  return new RequestAdvanceMarryRing;
}

void RequestAdvanceMarryRing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    isautobuy_ = false;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RequestAdvanceMarryRing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_isAutoBuy;
        break;
      }

      // optional bool isAutoBuy = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAutoBuy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isautobuy_)));
          set_has_isautobuy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RequestAdvanceMarryRing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional bool isAutoBuy = 2;
  if (has_isautobuy()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->isautobuy(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RequestAdvanceMarryRing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional bool isAutoBuy = 2;
  if (has_isautobuy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->isautobuy(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RequestAdvanceMarryRing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional bool isAutoBuy = 2;
    if (has_isautobuy()) {
      total_size += 1 + 1;
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RequestAdvanceMarryRing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RequestAdvanceMarryRing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RequestAdvanceMarryRing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RequestAdvanceMarryRing::MergeFrom(const RequestAdvanceMarryRing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isautobuy()) {
      set_isautobuy(from.isautobuy());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RequestAdvanceMarryRing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RequestAdvanceMarryRing::CopyFrom(const RequestAdvanceMarryRing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RequestAdvanceMarryRing::IsInitialized() const {

  return true;
}

void RequestAdvanceMarryRing::Swap(RequestAdvanceMarryRing* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(isautobuy_, other->isautobuy_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RequestAdvanceMarryRing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RequestAdvanceMarryRing_descriptor_;
  metadata.reflection = RequestAdvanceMarryRing_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryCritType::kCritTypeFieldNumber;
const int MarryCritType::kCountsFieldNumber;
const int MarryCritType::kExpFieldNumber;
#endif  // !_MSC_VER

MarryCritType::MarryCritType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryCritType::InitAsDefaultInstance() {
}

MarryCritType::MarryCritType(const MarryCritType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryCritType::SharedCtor() {
  _cached_size_ = 0;
  crittype_ = 0;
  counts_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryCritType::~MarryCritType() {
  SharedDtor();
}

void MarryCritType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryCritType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryCritType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryCritType_descriptor_;
}

const MarryCritType& MarryCritType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  return *default_instance_;
}

MarryCritType* MarryCritType::default_instance_ = NULL;

MarryCritType* MarryCritType::New() const {
  return new MarryCritType;
}

void MarryCritType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    crittype_ = 0;
    counts_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryCritType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 critType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crittype_)));
          set_has_crittype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional int32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryCritType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 critType = 1;
  if (has_crittype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->crittype(), output);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->counts(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryCritType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 critType = 1;
  if (has_crittype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->crittype(), target);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->counts(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryCritType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 critType = 1;
    if (has_crittype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crittype());
    }

    // optional int32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryCritType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryCritType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryCritType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryCritType::MergeFrom(const MarryCritType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_crittype()) {
      set_crittype(from.crittype());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryCritType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryCritType::CopyFrom(const MarryCritType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryCritType::IsInitialized() const {

  return true;
}

void MarryCritType::Swap(MarryCritType* other) {
  if (other != this) {
    std::swap(crittype_, other->crittype_);
    std::swap(counts_, other->counts_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryCritType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryCritType_descriptor_;
  metadata.reflection = MarryCritType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryItemList::kItemIDFieldNumber;
const int MarryItemList::kCountsFieldNumber;
#endif  // !_MSC_VER

MarryItemList::MarryItemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryItemList::InitAsDefaultInstance() {
}

MarryItemList::MarryItemList(const MarryItemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryItemList::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  counts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryItemList::~MarryItemList() {
  SharedDtor();
}

void MarryItemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryItemList_descriptor_;
}

const MarryItemList& MarryItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  return *default_instance_;
}

MarryItemList* MarryItemList::default_instance_ = NULL;

MarryItemList* MarryItemList::New() const {
  return new MarryItemList;
}

void MarryItemList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    counts_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 itemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_counts;
        break;
      }

      // optional int32 counts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_counts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &counts_)));
          set_has_counts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 itemID = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->counts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 itemID = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // optional int32 counts = 2;
  if (has_counts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->counts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryItemList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 itemID = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // optional int32 counts = 2;
    if (has_counts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->counts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryItemList::MergeFrom(const MarryItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_counts()) {
      set_counts(from.counts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryItemList::CopyFrom(const MarryItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryItemList::IsInitialized() const {

  return true;
}

void MarryItemList::Swap(MarryItemList* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(counts_, other->counts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryItemList_descriptor_;
  metadata.reflection = MarryItemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpMarryStepReturn::kTypeFieldNumber;
const int UpMarryStepReturn::kIdFieldNumber;
const int UpMarryStepReturn::kCurrentExpFieldNumber;
const int UpMarryStepReturn::kAddExpFieldNumber;
const int UpMarryStepReturn::kCritTypeListFieldNumber;
const int UpMarryStepReturn::kGoldenFieldNumber;
const int UpMarryStepReturn::kMoneyFieldNumber;
const int UpMarryStepReturn::kItemListFieldNumber;
const int UpMarryStepReturn::kErrorFieldNumber;
const int UpMarryStepReturn::kStopErrorFieldNumber;
#endif  // !_MSC_VER

UpMarryStepReturn::UpMarryStepReturn()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpMarryStepReturn::InitAsDefaultInstance() {
}

UpMarryStepReturn::UpMarryStepReturn(const UpMarryStepReturn& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpMarryStepReturn::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  currentexp_ = 0;
  addexp_ = 0;
  golden_ = 0;
  money_ = 0;
  error_ = 0;
  stoperror_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpMarryStepReturn::~UpMarryStepReturn() {
  SharedDtor();
}

void UpMarryStepReturn::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpMarryStepReturn::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpMarryStepReturn::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpMarryStepReturn_descriptor_;
}

const UpMarryStepReturn& UpMarryStepReturn::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  return *default_instance_;
}

UpMarryStepReturn* UpMarryStepReturn::default_instance_ = NULL;

UpMarryStepReturn* UpMarryStepReturn::New() const {
  return new UpMarryStepReturn;
}

void UpMarryStepReturn::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    currentexp_ = 0;
    addexp_ = 0;
    golden_ = 0;
    money_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    error_ = 0;
    stoperror_ = 0;
  }
  crittypelist_.Clear();
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpMarryStepReturn::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_currentExp;
        break;
      }

      // optional int32 currentExp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_currentExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currentexp_)));
          set_has_currentexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_addExp;
        break;
      }

      // optional int32 addExp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addExp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addexp_)));
          set_has_addexp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_critTypeList;
        break;
      }

      // repeated .MarryUI.MarryCritType critTypeList = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_critTypeList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_crittypelist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_critTypeList;
        if (input->ExpectTag(48)) goto parse_golden;
        break;
      }

      // optional int32 golden = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &golden_)));
          set_has_golden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_money;
        break;
      }

      // optional int32 money = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_itemList;
        break;
      }

      // repeated .MarryUI.MarryItemList itemList = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_itemList;
        if (input->ExpectTag(72)) goto parse_error;
        break;
      }

      // optional int32 error = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_error:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &error_)));
          set_has_error();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_stopError;
        break;
      }

      // optional int32 stopError = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_stopError:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &stoperror_)));
          set_has_stoperror();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpMarryStepReturn::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 currentExp = 3;
  if (has_currentexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currentexp(), output);
  }

  // optional int32 addExp = 4;
  if (has_addexp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->addexp(), output);
  }

  // repeated .MarryUI.MarryCritType critTypeList = 5;
  for (int i = 0; i < this->crittypelist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->crittypelist(i), output);
  }

  // optional int32 golden = 6;
  if (has_golden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->golden(), output);
  }

  // optional int32 money = 7;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->money(), output);
  }

  // repeated .MarryUI.MarryItemList itemList = 8;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->itemlist(i), output);
  }

  // optional int32 error = 9;
  if (has_error()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->error(), output);
  }

  // optional int32 stopError = 10;
  if (has_stoperror()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->stoperror(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpMarryStepReturn::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 currentExp = 3;
  if (has_currentexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currentexp(), target);
  }

  // optional int32 addExp = 4;
  if (has_addexp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->addexp(), target);
  }

  // repeated .MarryUI.MarryCritType critTypeList = 5;
  for (int i = 0; i < this->crittypelist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->crittypelist(i), target);
  }

  // optional int32 golden = 6;
  if (has_golden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->golden(), target);
  }

  // optional int32 money = 7;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->money(), target);
  }

  // repeated .MarryUI.MarryItemList itemList = 8;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->itemlist(i), target);
  }

  // optional int32 error = 9;
  if (has_error()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->error(), target);
  }

  // optional int32 stopError = 10;
  if (has_stoperror()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->stoperror(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpMarryStepReturn::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 currentExp = 3;
    if (has_currentexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currentexp());
    }

    // optional int32 addExp = 4;
    if (has_addexp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addexp());
    }

    // optional int32 golden = 6;
    if (has_golden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->golden());
    }

    // optional int32 money = 7;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 error = 9;
    if (has_error()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->error());
    }

    // optional int32 stopError = 10;
    if (has_stoperror()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->stoperror());
    }

  }
  // repeated .MarryUI.MarryCritType critTypeList = 5;
  total_size += 1 * this->crittypelist_size();
  for (int i = 0; i < this->crittypelist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->crittypelist(i));
  }

  // repeated .MarryUI.MarryItemList itemList = 8;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpMarryStepReturn::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpMarryStepReturn* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpMarryStepReturn*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpMarryStepReturn::MergeFrom(const UpMarryStepReturn& from) {
  GOOGLE_CHECK_NE(&from, this);
  crittypelist_.MergeFrom(from.crittypelist_);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_currentexp()) {
      set_currentexp(from.currentexp());
    }
    if (from.has_addexp()) {
      set_addexp(from.addexp());
    }
    if (from.has_golden()) {
      set_golden(from.golden());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_error()) {
      set_error(from.error());
    }
    if (from.has_stoperror()) {
      set_stoperror(from.stoperror());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpMarryStepReturn::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpMarryStepReturn::CopyFrom(const UpMarryStepReturn& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpMarryStepReturn::IsInitialized() const {

  return true;
}

void UpMarryStepReturn::Swap(UpMarryStepReturn* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(currentexp_, other->currentexp_);
    std::swap(addexp_, other->addexp_);
    crittypelist_.Swap(&other->crittypelist_);
    std::swap(golden_, other->golden_);
    std::swap(money_, other->money_);
    itemlist_.Swap(&other->itemlist_);
    std::swap(error_, other->error_);
    std::swap(stoperror_, other->stoperror_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpMarryStepReturn::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpMarryStepReturn_descriptor_;
  metadata.reflection = UpMarryStepReturn_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int UpdateMarryOtherInfo::kTypeFieldNumber;
const int UpdateMarryOtherInfo::kValueFieldNumber;
#endif  // !_MSC_VER

UpdateMarryOtherInfo::UpdateMarryOtherInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void UpdateMarryOtherInfo::InitAsDefaultInstance() {
}

UpdateMarryOtherInfo::UpdateMarryOtherInfo(const UpdateMarryOtherInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void UpdateMarryOtherInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  value_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

UpdateMarryOtherInfo::~UpdateMarryOtherInfo() {
  SharedDtor();
}

void UpdateMarryOtherInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void UpdateMarryOtherInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* UpdateMarryOtherInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return UpdateMarryOtherInfo_descriptor_;
}

const UpdateMarryOtherInfo& UpdateMarryOtherInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  return *default_instance_;
}

UpdateMarryOtherInfo* UpdateMarryOtherInfo::default_instance_ = NULL;

UpdateMarryOtherInfo* UpdateMarryOtherInfo::New() const {
  return new UpdateMarryOtherInfo;
}

void UpdateMarryOtherInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    value_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool UpdateMarryOtherInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_value;
        break;
      }

      // optional int64 value = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void UpdateMarryOtherInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 value = 2;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* UpdateMarryOtherInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 value = 2;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int UpdateMarryOtherInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 value = 2;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void UpdateMarryOtherInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const UpdateMarryOtherInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const UpdateMarryOtherInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void UpdateMarryOtherInfo::MergeFrom(const UpdateMarryOtherInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void UpdateMarryOtherInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void UpdateMarryOtherInfo::CopyFrom(const UpdateMarryOtherInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool UpdateMarryOtherInfo::IsInitialized() const {

  return true;
}

void UpdateMarryOtherInfo::Swap(UpdateMarryOtherInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata UpdateMarryOtherInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = UpdateMarryOtherInfo_descriptor_;
  metadata.reflection = UpdateMarryOtherInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MarryUI

// @@protoc_insertion_point(global_scope)
