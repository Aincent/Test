// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/GetCharID.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharLogin/GetCharID.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CharLogin {

namespace {

const ::google::protobuf::Descriptor* GetCharID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetCharID_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetGetCharID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetGetCharID_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharLogin_2fGetCharID_2eproto() {
  protobuf_AddDesc_CharLogin_2fGetCharID_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharLogin/GetCharID.proto");
  GOOGLE_CHECK(file != NULL);
  GetCharID_descriptor_ = file->message_type(0);
  static const int GetCharID_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharID, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharID, headid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharID, openkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharID, pf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharID, pfkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharID, seqid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharID, isadult_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharID, payname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharID, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharID, clienttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharID, timestamp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharID, source_),
  };
  GetCharID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetCharID_descriptor_,
      GetCharID::default_instance_,
      GetCharID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetCharID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetCharID));
  RetGetCharID_descriptor_ = file->message_type(1);
  static const int RetGetCharID_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetCharID, isrole_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetCharID, err_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetCharID, clienttype_),
  };
  RetGetCharID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetGetCharID_descriptor_,
      RetGetCharID::default_instance_,
      RetGetCharID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetCharID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetCharID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetGetCharID));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharLogin_2fGetCharID_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetCharID_descriptor_, &GetCharID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetGetCharID_descriptor_, &RetGetCharID::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharLogin_2fGetCharID_2eproto() {
  delete GetCharID::default_instance_;
  delete GetCharID_reflection_;
  delete RetGetCharID::default_instance_;
  delete RetGetCharID_reflection_;
}

void protobuf_AddDesc_CharLogin_2fGetCharID_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031CharLogin/GetCharID.proto\022\tCharLogin\"\327"
    "\001\n\tGetCharID\022\016\n\006openID\030\001 \002(\t\022\021\n\006headid\030\002"
    " \001(\005:\0011\022\017\n\007openKey\030\003 \001(\t\022\n\n\002pf\030\004 \001(\t\022\r\n\005"
    "pfKey\030\005 \001(\t\022\r\n\005seqid\030\006 \001(\t\022\017\n\007isAdult\030\007 "
    "\001(\005\022\017\n\007payname\030\010 \001(\005\022\020\n\010serverId\030\t \001(\005\022\025"
    "\n\nclientType\030\n \001(\005:\0011\022\021\n\ttimestamp\030\013 \001(\003"
    "\022\016\n\006source\030\014 \001(\t\"B\n\014RetGetCharID\022\016\n\006isRo"
    "le\030\001 \002(\005\022\013\n\003err\030\002 \002(\005\022\025\n\nclientType\030\003 \001("
    "\005:\0011", 324);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharLogin/GetCharID.proto", &protobuf_RegisterTypes);
  GetCharID::default_instance_ = new GetCharID();
  RetGetCharID::default_instance_ = new RetGetCharID();
  GetCharID::default_instance_->InitAsDefaultInstance();
  RetGetCharID::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharLogin_2fGetCharID_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharLogin_2fGetCharID_2eproto {
  StaticDescriptorInitializer_CharLogin_2fGetCharID_2eproto() {
    protobuf_AddDesc_CharLogin_2fGetCharID_2eproto();
  }
} static_descriptor_initializer_CharLogin_2fGetCharID_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int GetCharID::kOpenIDFieldNumber;
const int GetCharID::kHeadidFieldNumber;
const int GetCharID::kOpenKeyFieldNumber;
const int GetCharID::kPfFieldNumber;
const int GetCharID::kPfKeyFieldNumber;
const int GetCharID::kSeqidFieldNumber;
const int GetCharID::kIsAdultFieldNumber;
const int GetCharID::kPaynameFieldNumber;
const int GetCharID::kServerIdFieldNumber;
const int GetCharID::kClientTypeFieldNumber;
const int GetCharID::kTimestampFieldNumber;
const int GetCharID::kSourceFieldNumber;
#endif  // !_MSC_VER

GetCharID::GetCharID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetCharID::InitAsDefaultInstance() {
}

GetCharID::GetCharID(const GetCharID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetCharID::SharedCtor() {
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  headid_ = 1;
  openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  seqid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  isadult_ = 0;
  payname_ = 0;
  serverid_ = 0;
  clienttype_ = 1;
  timestamp_ = GOOGLE_LONGLONG(0);
  source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetCharID::~GetCharID() {
  SharedDtor();
}

void GetCharID::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    delete openkey_;
  }
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    delete pf_;
  }
  if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pfkey_;
  }
  if (seqid_ != &::google::protobuf::internal::kEmptyString) {
    delete seqid_;
  }
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (this != default_instance_) {
  }
}

void GetCharID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetCharID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetCharID_descriptor_;
}

const GetCharID& GetCharID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGetCharID_2eproto();
  return *default_instance_;
}

GetCharID* GetCharID::default_instance_ = NULL;

GetCharID* GetCharID::New() const {
  return new GetCharID;
}

void GetCharID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    headid_ = 1;
    if (has_openkey()) {
      if (openkey_ != &::google::protobuf::internal::kEmptyString) {
        openkey_->clear();
      }
    }
    if (has_pf()) {
      if (pf_ != &::google::protobuf::internal::kEmptyString) {
        pf_->clear();
      }
    }
    if (has_pfkey()) {
      if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
        pfkey_->clear();
      }
    }
    if (has_seqid()) {
      if (seqid_ != &::google::protobuf::internal::kEmptyString) {
        seqid_->clear();
      }
    }
    isadult_ = 0;
    payname_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    serverid_ = 0;
    clienttype_ = 1;
    timestamp_ = GOOGLE_LONGLONG(0);
    if (has_source()) {
      if (source_ != &::google::protobuf::internal::kEmptyString) {
        source_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetCharID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string openID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_headid;
        break;
      }

      // optional int32 headid = 2 [default = 1];
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_headid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &headid_)));
          set_has_headid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_openKey;
        break;
      }

      // optional string openKey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openkey().data(), this->openkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pf;
        break;
      }

      // optional string pf = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pf().data(), this->pf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_pfKey;
        break;
      }

      // optional string pfKey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pfKey:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pfkey()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pfkey().data(), this->pfkey().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_seqid;
        break;
      }

      // optional string seqid = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_seqid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_seqid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->seqid().data(), this->seqid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_isAdult;
        break;
      }

      // optional int32 isAdult = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isAdult:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isadult_)));
          set_has_isadult();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_payname;
        break;
      }

      // optional int32 payname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_payname:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &payname_)));
          set_has_payname();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_serverId;
        break;
      }

      // optional int32 serverId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_clientType;
        break;
      }

      // optional int32 clientType = 10 [default = 1];
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clienttype_)));
          set_has_clienttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_timestamp;
        break;
      }

      // optional int64 timestamp = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timestamp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &timestamp_)));
          set_has_timestamp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_source;
        break;
      }

      // optional string source = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_source:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->source().data(), this->source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetCharID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string openID = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->openid(), output);
  }

  // optional int32 headid = 2 [default = 1];
  if (has_headid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->headid(), output);
  }

  // optional string openKey = 3;
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->openkey(), output);
  }

  // optional string pf = 4;
  if (has_pf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pf().data(), this->pf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pf(), output);
  }

  // optional string pfKey = 5;
  if (has_pfkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pfkey().data(), this->pfkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->pfkey(), output);
  }

  // optional string seqid = 6;
  if (has_seqid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seqid().data(), this->seqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->seqid(), output);
  }

  // optional int32 isAdult = 7;
  if (has_isadult()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->isadult(), output);
  }

  // optional int32 payname = 8;
  if (has_payname()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->payname(), output);
  }

  // optional int32 serverId = 9;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->serverid(), output);
  }

  // optional int32 clientType = 10 [default = 1];
  if (has_clienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->clienttype(), output);
  }

  // optional int64 timestamp = 11;
  if (has_timestamp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->timestamp(), output);
  }

  // optional string source = 12;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->source(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetCharID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string openID = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  // optional int32 headid = 2 [default = 1];
  if (has_headid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->headid(), target);
  }

  // optional string openKey = 3;
  if (has_openkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openkey().data(), this->openkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->openkey(), target);
  }

  // optional string pf = 4;
  if (has_pf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pf().data(), this->pf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pf(), target);
  }

  // optional string pfKey = 5;
  if (has_pfkey()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pfkey().data(), this->pfkey().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->pfkey(), target);
  }

  // optional string seqid = 6;
  if (has_seqid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->seqid().data(), this->seqid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->seqid(), target);
  }

  // optional int32 isAdult = 7;
  if (has_isadult()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->isadult(), target);
  }

  // optional int32 payname = 8;
  if (has_payname()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->payname(), target);
  }

  // optional int32 serverId = 9;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->serverid(), target);
  }

  // optional int32 clientType = 10 [default = 1];
  if (has_clienttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->clienttype(), target);
  }

  // optional int64 timestamp = 11;
  if (has_timestamp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->timestamp(), target);
  }

  // optional string source = 12;
  if (has_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->source().data(), this->source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->source(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetCharID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string openID = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // optional int32 headid = 2 [default = 1];
    if (has_headid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->headid());
    }

    // optional string openKey = 3;
    if (has_openkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openkey());
    }

    // optional string pf = 4;
    if (has_pf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pf());
    }

    // optional string pfKey = 5;
    if (has_pfkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pfkey());
    }

    // optional string seqid = 6;
    if (has_seqid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->seqid());
    }

    // optional int32 isAdult = 7;
    if (has_isadult()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isadult());
    }

    // optional int32 payname = 8;
    if (has_payname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->payname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 serverId = 9;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional int32 clientType = 10 [default = 1];
    if (has_clienttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clienttype());
    }

    // optional int64 timestamp = 11;
    if (has_timestamp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->timestamp());
    }

    // optional string source = 12;
    if (has_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->source());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetCharID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetCharID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetCharID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetCharID::MergeFrom(const GetCharID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_headid()) {
      set_headid(from.headid());
    }
    if (from.has_openkey()) {
      set_openkey(from.openkey());
    }
    if (from.has_pf()) {
      set_pf(from.pf());
    }
    if (from.has_pfkey()) {
      set_pfkey(from.pfkey());
    }
    if (from.has_seqid()) {
      set_seqid(from.seqid());
    }
    if (from.has_isadult()) {
      set_isadult(from.isadult());
    }
    if (from.has_payname()) {
      set_payname(from.payname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_clienttype()) {
      set_clienttype(from.clienttype());
    }
    if (from.has_timestamp()) {
      set_timestamp(from.timestamp());
    }
    if (from.has_source()) {
      set_source(from.source());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetCharID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetCharID::CopyFrom(const GetCharID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetCharID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetCharID::Swap(GetCharID* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(headid_, other->headid_);
    std::swap(openkey_, other->openkey_);
    std::swap(pf_, other->pf_);
    std::swap(pfkey_, other->pfkey_);
    std::swap(seqid_, other->seqid_);
    std::swap(isadult_, other->isadult_);
    std::swap(payname_, other->payname_);
    std::swap(serverid_, other->serverid_);
    std::swap(clienttype_, other->clienttype_);
    std::swap(timestamp_, other->timestamp_);
    std::swap(source_, other->source_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetCharID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetCharID_descriptor_;
  metadata.reflection = GetCharID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetGetCharID::kIsRoleFieldNumber;
const int RetGetCharID::kErrFieldNumber;
const int RetGetCharID::kClientTypeFieldNumber;
#endif  // !_MSC_VER

RetGetCharID::RetGetCharID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetGetCharID::InitAsDefaultInstance() {
}

RetGetCharID::RetGetCharID(const RetGetCharID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetGetCharID::SharedCtor() {
  _cached_size_ = 0;
  isrole_ = 0;
  err_ = 0;
  clienttype_ = 1;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetGetCharID::~RetGetCharID() {
  SharedDtor();
}

void RetGetCharID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetGetCharID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetGetCharID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetGetCharID_descriptor_;
}

const RetGetCharID& RetGetCharID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fGetCharID_2eproto();
  return *default_instance_;
}

RetGetCharID* RetGetCharID::default_instance_ = NULL;

RetGetCharID* RetGetCharID::New() const {
  return new RetGetCharID;
}

void RetGetCharID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isrole_ = 0;
    err_ = 0;
    clienttype_ = 1;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetGetCharID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isRole = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isrole_)));
          set_has_isrole();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_err;
        break;
      }

      // required int32 err = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_err:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &err_)));
          set_has_err();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_clientType;
        break;
      }

      // optional int32 clientType = 3 [default = 1];
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clientType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clienttype_)));
          set_has_clienttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetGetCharID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isRole = 1;
  if (has_isrole()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isrole(), output);
  }

  // required int32 err = 2;
  if (has_err()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->err(), output);
  }

  // optional int32 clientType = 3 [default = 1];
  if (has_clienttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->clienttype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetGetCharID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isRole = 1;
  if (has_isrole()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isrole(), target);
  }

  // required int32 err = 2;
  if (has_err()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->err(), target);
  }

  // optional int32 clientType = 3 [default = 1];
  if (has_clienttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->clienttype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetGetCharID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isRole = 1;
    if (has_isrole()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isrole());
    }

    // required int32 err = 2;
    if (has_err()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->err());
    }

    // optional int32 clientType = 3 [default = 1];
    if (has_clienttype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clienttype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetGetCharID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetGetCharID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetGetCharID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetGetCharID::MergeFrom(const RetGetCharID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isrole()) {
      set_isrole(from.isrole());
    }
    if (from.has_err()) {
      set_err(from.err());
    }
    if (from.has_clienttype()) {
      set_clienttype(from.clienttype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetGetCharID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGetCharID::CopyFrom(const RetGetCharID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGetCharID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RetGetCharID::Swap(RetGetCharID* other) {
  if (other != this) {
    std::swap(isrole_, other->isrole_);
    std::swap(err_, other->err_);
    std::swap(clienttype_, other->clienttype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetGetCharID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetGetCharID_descriptor_;
  metadata.reflection = RetGetCharID_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CharLogin

// @@protoc_insertion_point(global_scope)
