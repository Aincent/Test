// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSProtoc/OpenIDSomething.proto

#ifndef PROTOBUF_MSProtoc_2fOpenIDSomething_2eproto__INCLUDED
#define PROTOBUF_MSProtoc_2fOpenIDSomething_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MS_OpenIDSomething {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_MSProtoc_2fOpenIDSomething_2eproto();
void protobuf_AssignDesc_MSProtoc_2fOpenIDSomething_2eproto();
void protobuf_ShutdownFile_MSProtoc_2fOpenIDSomething_2eproto();

class Admin_GetAllLockOpenID;
class InLockTimeRole;
class Admin_TalkThing;
class Aimin_Forbidden;

// ===================================================================

class Admin_GetAllLockOpenID : public ::google::protobuf::Message {
 public:
  Admin_GetAllLockOpenID();
  virtual ~Admin_GetAllLockOpenID();

  Admin_GetAllLockOpenID(const Admin_GetAllLockOpenID& from);

  inline Admin_GetAllLockOpenID& operator=(const Admin_GetAllLockOpenID& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_GetAllLockOpenID& default_instance();

  void Swap(Admin_GetAllLockOpenID* other);

  // implements Message ----------------------------------------------

  Admin_GetAllLockOpenID* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_GetAllLockOpenID& from);
  void MergeFrom(const Admin_GetAllLockOpenID& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional string charName = 1;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharNameFieldNumber = 1;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional int64 charID = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 2;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int32 beginCount = 3;
  inline bool has_begincount() const;
  inline void clear_begincount();
  static const int kBeginCountFieldNumber = 3;
  inline ::google::protobuf::int32 begincount() const;
  inline void set_begincount(::google::protobuf::int32 value);

  // optional int32 endCount = 4;
  inline bool has_endcount() const;
  inline void clear_endcount();
  static const int kEndCountFieldNumber = 4;
  inline ::google::protobuf::int32 endcount() const;
  inline void set_endcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MS_OpenIDSomething.Admin_GetAllLockOpenID)
 private:
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_begincount();
  inline void clear_has_begincount();
  inline void set_has_endcount();
  inline void clear_has_endcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* charname_;
  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 begincount_;
  ::google::protobuf::int32 endcount_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fOpenIDSomething_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fOpenIDSomething_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fOpenIDSomething_2eproto();

  void InitAsDefaultInstance();
  static Admin_GetAllLockOpenID* default_instance_;
};
// -------------------------------------------------------------------

class InLockTimeRole : public ::google::protobuf::Message {
 public:
  InLockTimeRole();
  virtual ~InLockTimeRole();

  InLockTimeRole(const InLockTimeRole& from);

  inline InLockTimeRole& operator=(const InLockTimeRole& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InLockTimeRole& default_instance();

  void Swap(InLockTimeRole* other);

  // implements Message ----------------------------------------------

  InLockTimeRole* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InLockTimeRole& from);
  void MergeFrom(const InLockTimeRole& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated string charName = 2;
  inline int charname_size() const;
  inline void clear_charname();
  static const int kCharNameFieldNumber = 2;
  inline const ::std::string& charname(int index) const;
  inline ::std::string* mutable_charname(int index);
  inline void set_charname(int index, const ::std::string& value);
  inline void set_charname(int index, const char* value);
  inline void set_charname(int index, const char* value, size_t size);
  inline ::std::string* add_charname();
  inline void add_charname(const ::std::string& value);
  inline void add_charname(const char* value);
  inline void add_charname(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& charname() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_charname();

  // repeated int64 charID = 3;
  inline int charid_size() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 3;
  inline ::google::protobuf::int64 charid(int index) const;
  inline void set_charid(int index, ::google::protobuf::int64 value);
  inline void add_charid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      charid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_charid();

  // repeated string reasonString = 4;
  inline int reasonstring_size() const;
  inline void clear_reasonstring();
  static const int kReasonStringFieldNumber = 4;
  inline const ::std::string& reasonstring(int index) const;
  inline ::std::string* mutable_reasonstring(int index);
  inline void set_reasonstring(int index, const ::std::string& value);
  inline void set_reasonstring(int index, const char* value);
  inline void set_reasonstring(int index, const char* value, size_t size);
  inline ::std::string* add_reasonstring();
  inline void add_reasonstring(const ::std::string& value);
  inline void add_reasonstring(const char* value);
  inline void add_reasonstring(const char* value, size_t size);
  inline const ::google::protobuf::RepeatedPtrField< ::std::string>& reasonstring() const;
  inline ::google::protobuf::RepeatedPtrField< ::std::string>* mutable_reasonstring();

  // optional int32 sumCount = 5;
  inline bool has_sumcount() const;
  inline void clear_sumcount();
  static const int kSumCountFieldNumber = 5;
  inline ::google::protobuf::int32 sumcount() const;
  inline void set_sumcount(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MS_OpenIDSomething.InLockTimeRole)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_sumcount();
  inline void clear_has_sumcount();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::std::string> charname_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > charid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 sumcount_;
  ::google::protobuf::RepeatedPtrField< ::std::string> reasonstring_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fOpenIDSomething_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fOpenIDSomething_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fOpenIDSomething_2eproto();

  void InitAsDefaultInstance();
  static InLockTimeRole* default_instance_;
};
// -------------------------------------------------------------------

class Admin_TalkThing : public ::google::protobuf::Message {
 public:
  Admin_TalkThing();
  virtual ~Admin_TalkThing();

  Admin_TalkThing(const Admin_TalkThing& from);

  inline Admin_TalkThing& operator=(const Admin_TalkThing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Admin_TalkThing& default_instance();

  void Swap(Admin_TalkThing* other);

  // implements Message ----------------------------------------------

  Admin_TalkThing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Admin_TalkThing& from);
  void MergeFrom(const Admin_TalkThing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional string reasonString = 4;
  inline bool has_reasonstring() const;
  inline void clear_reasonstring();
  static const int kReasonStringFieldNumber = 4;
  inline const ::std::string& reasonstring() const;
  inline void set_reasonstring(const ::std::string& value);
  inline void set_reasonstring(const char* value);
  inline void set_reasonstring(const char* value, size_t size);
  inline ::std::string* mutable_reasonstring();
  inline ::std::string* release_reasonstring();
  inline void set_allocated_reasonstring(::std::string* reasonstring);

  // optional int32 dotm = 5;
  inline bool has_dotm() const;
  inline void clear_dotm();
  static const int kDotmFieldNumber = 5;
  inline ::google::protobuf::int32 dotm() const;
  inline void set_dotm(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MS_OpenIDSomething.Admin_TalkThing)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_reasonstring();
  inline void clear_has_reasonstring();
  inline void set_has_dotm();
  inline void clear_has_dotm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* reasonstring_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 dotm_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fOpenIDSomething_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fOpenIDSomething_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fOpenIDSomething_2eproto();

  void InitAsDefaultInstance();
  static Admin_TalkThing* default_instance_;
};
// -------------------------------------------------------------------

class Aimin_Forbidden : public ::google::protobuf::Message {
 public:
  Aimin_Forbidden();
  virtual ~Aimin_Forbidden();

  Aimin_Forbidden(const Aimin_Forbidden& from);

  inline Aimin_Forbidden& operator=(const Aimin_Forbidden& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Aimin_Forbidden& default_instance();

  void Swap(Aimin_Forbidden* other);

  // implements Message ----------------------------------------------

  Aimin_Forbidden* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Aimin_Forbidden& from);
  void MergeFrom(const Aimin_Forbidden& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charID = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIDFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 op = 3;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 3;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MS_OpenIDSomething.Aimin_Forbidden)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_op();
  inline void clear_has_op();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 op_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_MSProtoc_2fOpenIDSomething_2eproto();
  friend void protobuf_AssignDesc_MSProtoc_2fOpenIDSomething_2eproto();
  friend void protobuf_ShutdownFile_MSProtoc_2fOpenIDSomething_2eproto();

  void InitAsDefaultInstance();
  static Aimin_Forbidden* default_instance_;
};
// ===================================================================


// ===================================================================

// Admin_GetAllLockOpenID

// optional string charName = 1;
inline bool Admin_GetAllLockOpenID::has_charname() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_GetAllLockOpenID::set_has_charname() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_GetAllLockOpenID::clear_has_charname() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_GetAllLockOpenID::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& Admin_GetAllLockOpenID::charname() const {
  return *charname_;
}
inline void Admin_GetAllLockOpenID::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Admin_GetAllLockOpenID::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void Admin_GetAllLockOpenID::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_GetAllLockOpenID::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* Admin_GetAllLockOpenID::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_GetAllLockOpenID::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 charID = 2;
inline bool Admin_GetAllLockOpenID::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_GetAllLockOpenID::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_GetAllLockOpenID::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_GetAllLockOpenID::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 Admin_GetAllLockOpenID::charid() const {
  return charid_;
}
inline void Admin_GetAllLockOpenID::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 beginCount = 3;
inline bool Admin_GetAllLockOpenID::has_begincount() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_GetAllLockOpenID::set_has_begincount() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_GetAllLockOpenID::clear_has_begincount() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_GetAllLockOpenID::clear_begincount() {
  begincount_ = 0;
  clear_has_begincount();
}
inline ::google::protobuf::int32 Admin_GetAllLockOpenID::begincount() const {
  return begincount_;
}
inline void Admin_GetAllLockOpenID::set_begincount(::google::protobuf::int32 value) {
  set_has_begincount();
  begincount_ = value;
}

// optional int32 endCount = 4;
inline bool Admin_GetAllLockOpenID::has_endcount() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Admin_GetAllLockOpenID::set_has_endcount() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Admin_GetAllLockOpenID::clear_has_endcount() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Admin_GetAllLockOpenID::clear_endcount() {
  endcount_ = 0;
  clear_has_endcount();
}
inline ::google::protobuf::int32 Admin_GetAllLockOpenID::endcount() const {
  return endcount_;
}
inline void Admin_GetAllLockOpenID::set_endcount(::google::protobuf::int32 value) {
  set_has_endcount();
  endcount_ = value;
}

// -------------------------------------------------------------------

// InLockTimeRole

// required int32 ret = 1;
inline bool InLockTimeRole::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InLockTimeRole::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InLockTimeRole::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InLockTimeRole::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 InLockTimeRole::ret() const {
  return ret_;
}
inline void InLockTimeRole::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated string charName = 2;
inline int InLockTimeRole::charname_size() const {
  return charname_.size();
}
inline void InLockTimeRole::clear_charname() {
  charname_.Clear();
}
inline const ::std::string& InLockTimeRole::charname(int index) const {
  return charname_.Get(index);
}
inline ::std::string* InLockTimeRole::mutable_charname(int index) {
  return charname_.Mutable(index);
}
inline void InLockTimeRole::set_charname(int index, const ::std::string& value) {
  charname_.Mutable(index)->assign(value);
}
inline void InLockTimeRole::set_charname(int index, const char* value) {
  charname_.Mutable(index)->assign(value);
}
inline void InLockTimeRole::set_charname(int index, const char* value, size_t size) {
  charname_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InLockTimeRole::add_charname() {
  return charname_.Add();
}
inline void InLockTimeRole::add_charname(const ::std::string& value) {
  charname_.Add()->assign(value);
}
inline void InLockTimeRole::add_charname(const char* value) {
  charname_.Add()->assign(value);
}
inline void InLockTimeRole::add_charname(const char* value, size_t size) {
  charname_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
InLockTimeRole::charname() const {
  return charname_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
InLockTimeRole::mutable_charname() {
  return &charname_;
}

// repeated int64 charID = 3;
inline int InLockTimeRole::charid_size() const {
  return charid_.size();
}
inline void InLockTimeRole::clear_charid() {
  charid_.Clear();
}
inline ::google::protobuf::int64 InLockTimeRole::charid(int index) const {
  return charid_.Get(index);
}
inline void InLockTimeRole::set_charid(int index, ::google::protobuf::int64 value) {
  charid_.Set(index, value);
}
inline void InLockTimeRole::add_charid(::google::protobuf::int64 value) {
  charid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
InLockTimeRole::charid() const {
  return charid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
InLockTimeRole::mutable_charid() {
  return &charid_;
}

// repeated string reasonString = 4;
inline int InLockTimeRole::reasonstring_size() const {
  return reasonstring_.size();
}
inline void InLockTimeRole::clear_reasonstring() {
  reasonstring_.Clear();
}
inline const ::std::string& InLockTimeRole::reasonstring(int index) const {
  return reasonstring_.Get(index);
}
inline ::std::string* InLockTimeRole::mutable_reasonstring(int index) {
  return reasonstring_.Mutable(index);
}
inline void InLockTimeRole::set_reasonstring(int index, const ::std::string& value) {
  reasonstring_.Mutable(index)->assign(value);
}
inline void InLockTimeRole::set_reasonstring(int index, const char* value) {
  reasonstring_.Mutable(index)->assign(value);
}
inline void InLockTimeRole::set_reasonstring(int index, const char* value, size_t size) {
  reasonstring_.Mutable(index)->assign(
    reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InLockTimeRole::add_reasonstring() {
  return reasonstring_.Add();
}
inline void InLockTimeRole::add_reasonstring(const ::std::string& value) {
  reasonstring_.Add()->assign(value);
}
inline void InLockTimeRole::add_reasonstring(const char* value) {
  reasonstring_.Add()->assign(value);
}
inline void InLockTimeRole::add_reasonstring(const char* value, size_t size) {
  reasonstring_.Add()->assign(reinterpret_cast<const char*>(value), size);
}
inline const ::google::protobuf::RepeatedPtrField< ::std::string>&
InLockTimeRole::reasonstring() const {
  return reasonstring_;
}
inline ::google::protobuf::RepeatedPtrField< ::std::string>*
InLockTimeRole::mutable_reasonstring() {
  return &reasonstring_;
}

// optional int32 sumCount = 5;
inline bool InLockTimeRole::has_sumcount() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void InLockTimeRole::set_has_sumcount() {
  _has_bits_[0] |= 0x00000010u;
}
inline void InLockTimeRole::clear_has_sumcount() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void InLockTimeRole::clear_sumcount() {
  sumcount_ = 0;
  clear_has_sumcount();
}
inline ::google::protobuf::int32 InLockTimeRole::sumcount() const {
  return sumcount_;
}
inline void InLockTimeRole::set_sumcount(::google::protobuf::int32 value) {
  set_has_sumcount();
  sumcount_ = value;
}

// -------------------------------------------------------------------

// Admin_TalkThing

// required int64 charID = 1;
inline bool Admin_TalkThing::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Admin_TalkThing::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Admin_TalkThing::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Admin_TalkThing::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 Admin_TalkThing::charid() const {
  return charid_;
}
inline void Admin_TalkThing::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 type = 3;
inline bool Admin_TalkThing::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Admin_TalkThing::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Admin_TalkThing::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Admin_TalkThing::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Admin_TalkThing::type() const {
  return type_;
}
inline void Admin_TalkThing::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional string reasonString = 4;
inline bool Admin_TalkThing::has_reasonstring() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Admin_TalkThing::set_has_reasonstring() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Admin_TalkThing::clear_has_reasonstring() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Admin_TalkThing::clear_reasonstring() {
  if (reasonstring_ != &::google::protobuf::internal::kEmptyString) {
    reasonstring_->clear();
  }
  clear_has_reasonstring();
}
inline const ::std::string& Admin_TalkThing::reasonstring() const {
  return *reasonstring_;
}
inline void Admin_TalkThing::set_reasonstring(const ::std::string& value) {
  set_has_reasonstring();
  if (reasonstring_ == &::google::protobuf::internal::kEmptyString) {
    reasonstring_ = new ::std::string;
  }
  reasonstring_->assign(value);
}
inline void Admin_TalkThing::set_reasonstring(const char* value) {
  set_has_reasonstring();
  if (reasonstring_ == &::google::protobuf::internal::kEmptyString) {
    reasonstring_ = new ::std::string;
  }
  reasonstring_->assign(value);
}
inline void Admin_TalkThing::set_reasonstring(const char* value, size_t size) {
  set_has_reasonstring();
  if (reasonstring_ == &::google::protobuf::internal::kEmptyString) {
    reasonstring_ = new ::std::string;
  }
  reasonstring_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Admin_TalkThing::mutable_reasonstring() {
  set_has_reasonstring();
  if (reasonstring_ == &::google::protobuf::internal::kEmptyString) {
    reasonstring_ = new ::std::string;
  }
  return reasonstring_;
}
inline ::std::string* Admin_TalkThing::release_reasonstring() {
  clear_has_reasonstring();
  if (reasonstring_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = reasonstring_;
    reasonstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Admin_TalkThing::set_allocated_reasonstring(::std::string* reasonstring) {
  if (reasonstring_ != &::google::protobuf::internal::kEmptyString) {
    delete reasonstring_;
  }
  if (reasonstring) {
    set_has_reasonstring();
    reasonstring_ = reasonstring;
  } else {
    clear_has_reasonstring();
    reasonstring_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 dotm = 5;
inline bool Admin_TalkThing::has_dotm() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Admin_TalkThing::set_has_dotm() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Admin_TalkThing::clear_has_dotm() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Admin_TalkThing::clear_dotm() {
  dotm_ = 0;
  clear_has_dotm();
}
inline ::google::protobuf::int32 Admin_TalkThing::dotm() const {
  return dotm_;
}
inline void Admin_TalkThing::set_dotm(::google::protobuf::int32 value) {
  set_has_dotm();
  dotm_ = value;
}

// -------------------------------------------------------------------

// Aimin_Forbidden

// required int64 charID = 1;
inline bool Aimin_Forbidden::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Aimin_Forbidden::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Aimin_Forbidden::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Aimin_Forbidden::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 Aimin_Forbidden::charid() const {
  return charid_;
}
inline void Aimin_Forbidden::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 type = 2;
inline bool Aimin_Forbidden::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Aimin_Forbidden::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Aimin_Forbidden::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Aimin_Forbidden::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 Aimin_Forbidden::type() const {
  return type_;
}
inline void Aimin_Forbidden::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 op = 3;
inline bool Aimin_Forbidden::has_op() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Aimin_Forbidden::set_has_op() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Aimin_Forbidden::clear_has_op() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Aimin_Forbidden::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 Aimin_Forbidden::op() const {
  return op_;
}
inline void Aimin_Forbidden::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MS_OpenIDSomething

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_MSProtoc_2fOpenIDSomething_2eproto__INCLUDED
