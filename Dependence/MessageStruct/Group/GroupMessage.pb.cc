// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Group/GroupMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Group/GroupMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace GroupMessage {

namespace {

const ::google::protobuf::Descriptor* RetInviteReply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetInviteReply_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetPlayerStateToTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetPlayerStateToTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetGetTeamID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetGetTeamID_reflection_ = NULL;
const ::google::protobuf::Descriptor* TeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetGetTeamMemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetGetTeamMemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MemberInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MemberInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetGetNearbyPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetGetNearbyPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* NearbyPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  NearbyPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetLookforTeamInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetLookforTeamInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClientSysMemberMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClientSysMemberMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetChangeLeader_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetChangeLeader_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetInviteToMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetInviteToMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetKickMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetKickMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetLeaveTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetLeaveTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToLeaderAcquire_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToLeaderAcquire_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetAcquireToTeam_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetAcquireToTeam_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimBroadcastInstanceCreate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimBroadcastInstanceCreate_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqInstanceMemberApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqInstanceMemberApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetInstanceMemberApply_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetInstanceMemberApply_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClientGroupChat_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClientGroupChat_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClickPlayerHead_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClickPlayerHead_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Group_2fGroupMessage_2eproto() {
  protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Group/GroupMessage.proto");
  GOOGLE_CHECK(file != NULL);
  RetInviteReply_descriptor_ = file->message_type(0);
  static const int RetInviteReply_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteReply, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteReply, dwteamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteReply, playerinfo_),
  };
  RetInviteReply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetInviteReply_descriptor_,
      RetInviteReply::default_instance_,
      RetInviteReply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteReply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteReply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetInviteReply));
  RetPlayerStateToTeam_descriptor_ = file->message_type(1);
  static const int RetPlayerStateToTeam_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, dwplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, dwoutofrange_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, dwhorseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, dwequipid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, eclassex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, bysex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, nlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, iscaptain_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, splayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, dwplayerpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, costume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, fashionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, viplv_),
  };
  RetPlayerStateToTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetPlayerStateToTeam_descriptor_,
      RetPlayerStateToTeam::default_instance_,
      RetPlayerStateToTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetPlayerStateToTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetPlayerStateToTeam));
  RetGetTeamID_descriptor_ = file->message_type(2);
  static const int RetGetTeamID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetTeamID, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetTeamID, teaminfo_),
  };
  RetGetTeamID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetGetTeamID_descriptor_,
      RetGetTeamID::default_instance_,
      RetGetTeamID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetTeamID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetTeamID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetGetTeamID));
  TeamInfo_descriptor_ = file->message_type(3);
  static const int TeamInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, dwteamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, sleadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, dwteamlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, dwteampower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, dwteammembers_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, groupmember_),
  };
  TeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TeamInfo_descriptor_,
      TeamInfo::default_instance_,
      TeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TeamInfo));
  RetGetTeamMemberInfo_descriptor_ = file->message_type(4);
  static const int RetGetTeamMemberInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetTeamMemberInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetTeamMemberInfo, teaminfo_),
  };
  RetGetTeamMemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetGetTeamMemberInfo_descriptor_,
      RetGetTeamMemberInfo::default_instance_,
      RetGetTeamMemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetTeamMemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetTeamMemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetGetTeamMemberInfo));
  MemberInfo_descriptor_ = file->message_type(5);
  static const int MemberInfo_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, fight_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, viplv_),
  };
  MemberInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MemberInfo_descriptor_,
      MemberInfo::default_instance_,
      MemberInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MemberInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MemberInfo));
  RetGetNearbyPlayerInfo_descriptor_ = file->message_type(6);
  static const int RetGetNearbyPlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetNearbyPlayerInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetNearbyPlayerInfo, playerinfos_),
  };
  RetGetNearbyPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetGetNearbyPlayerInfo_descriptor_,
      RetGetNearbyPlayerInfo::default_instance_,
      RetGetNearbyPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetNearbyPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetNearbyPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetGetNearbyPlayerInfo));
  NearbyPlayerInfo_descriptor_ = file->message_type(7);
  static const int NearbyPlayerInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyPlayerInfo, dwplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyPlayerInfo, splayername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyPlayerInfo, nlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyPlayerInfo, eclassex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyPlayerInfo, powernum_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyPlayerInfo, bhasteam_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyPlayerInfo, viplv_),
  };
  NearbyPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      NearbyPlayerInfo_descriptor_,
      NearbyPlayerInfo::default_instance_,
      NearbyPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(NearbyPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(NearbyPlayerInfo));
  RetLookforTeamInfo_descriptor_ = file->message_type(8);
  static const int RetLookforTeamInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLookforTeamInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLookforTeamInfo, playerinfo_),
  };
  RetLookforTeamInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetLookforTeamInfo_descriptor_,
      RetLookforTeamInfo::default_instance_,
      RetLookforTeamInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLookforTeamInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLookforTeamInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetLookforTeamInfo));
  ToClientSysMemberMap_descriptor_ = file->message_type(9);
  static const int ToClientSysMemberMap_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientSysMemberMap, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientSysMemberMap, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientSysMemberMap, charid_),
  };
  ToClientSysMemberMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClientSysMemberMap_descriptor_,
      ToClientSysMemberMap::default_instance_,
      ToClientSysMemberMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientSysMemberMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientSysMemberMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClientSysMemberMap));
  RetChangeLeader_descriptor_ = file->message_type(10);
  static const int RetChangeLeader_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetChangeLeader, dwleaderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetChangeLeader, dwnewleaderid_),
  };
  RetChangeLeader_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetChangeLeader_descriptor_,
      RetChangeLeader::default_instance_,
      RetChangeLeader_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetChangeLeader, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetChangeLeader, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetChangeLeader));
  RetInviteToMember_descriptor_ = file->message_type(11);
  static const int RetInviteToMember_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteToMember, dwteammemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteToMember, sleadername_),
  };
  RetInviteToMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetInviteToMember_descriptor_,
      RetInviteToMember::default_instance_,
      RetInviteToMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteToMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInviteToMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetInviteToMember));
  RetKickMember_descriptor_ = file->message_type(12);
  static const int RetKickMember_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetKickMember, dwdestplayerid_),
  };
  RetKickMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetKickMember_descriptor_,
      RetKickMember::default_instance_,
      RetKickMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetKickMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetKickMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetKickMember));
  RetLeaveTeam_descriptor_ = file->message_type(13);
  static const int RetLeaveTeam_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLeaveTeam, dwplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLeaveTeam, dwleaderid_),
  };
  RetLeaveTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetLeaveTeam_descriptor_,
      RetLeaveTeam::default_instance_,
      RetLeaveTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLeaveTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLeaveTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetLeaveTeam));
  ToLeaderAcquire_descriptor_ = file->message_type(14);
  static const int ToLeaderAcquire_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToLeaderAcquire, dstplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToLeaderAcquire, acquirename_),
  };
  ToLeaderAcquire_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToLeaderAcquire_descriptor_,
      ToLeaderAcquire::default_instance_,
      ToLeaderAcquire_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToLeaderAcquire, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToLeaderAcquire, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToLeaderAcquire));
  RetAcquireToTeam_descriptor_ = file->message_type(15);
  static const int RetAcquireToTeam_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAcquireToTeam, dwerrorcode_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAcquireToTeam, dwteamid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAcquireToTeam, teamsign_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAcquireToTeam, playerinfo_),
  };
  RetAcquireToTeam_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetAcquireToTeam_descriptor_,
      RetAcquireToTeam::default_instance_,
      RetAcquireToTeam_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAcquireToTeam, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAcquireToTeam, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetAcquireToTeam));
  SimBroadcastInstanceCreate_descriptor_ = file->message_type(16);
  static const int SimBroadcastInstanceCreate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimBroadcastInstanceCreate, teamsign_),
  };
  SimBroadcastInstanceCreate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimBroadcastInstanceCreate_descriptor_,
      SimBroadcastInstanceCreate::default_instance_,
      SimBroadcastInstanceCreate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimBroadcastInstanceCreate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimBroadcastInstanceCreate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimBroadcastInstanceCreate));
  ReqInstanceMemberApply_descriptor_ = file->message_type(17);
  static const int ReqInstanceMemberApply_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceMemberApply, isagree_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceMemberApply, instanceid_),
  };
  ReqInstanceMemberApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqInstanceMemberApply_descriptor_,
      ReqInstanceMemberApply::default_instance_,
      ReqInstanceMemberApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceMemberApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceMemberApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqInstanceMemberApply));
  RetInstanceMemberApply_descriptor_ = file->message_type(18);
  static const int RetInstanceMemberApply_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceMemberApply, dwerrorcode_),
  };
  RetInstanceMemberApply_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetInstanceMemberApply_descriptor_,
      RetInstanceMemberApply::default_instance_,
      RetInstanceMemberApply_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceMemberApply, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceMemberApply, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetInstanceMemberApply));
  ToClientGroupChat_descriptor_ = file->message_type(19);
  static const int ToClientGroupChat_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientGroupChat, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientGroupChat, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientGroupChat, instanceid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientGroupChat, guid_),
  };
  ToClientGroupChat_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClientGroupChat_descriptor_,
      ToClientGroupChat::default_instance_,
      ToClientGroupChat_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientGroupChat, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientGroupChat, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClientGroupChat));
  ClickPlayerHead_descriptor_ = file->message_type(20);
  static const int ClickPlayerHead_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickPlayerHead, groupid_),
  };
  ClickPlayerHead_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClickPlayerHead_descriptor_,
      ClickPlayerHead::default_instance_,
      ClickPlayerHead_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickPlayerHead, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClickPlayerHead, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClickPlayerHead));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Group_2fGroupMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetInviteReply_descriptor_, &RetInviteReply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetPlayerStateToTeam_descriptor_, &RetPlayerStateToTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetGetTeamID_descriptor_, &RetGetTeamID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TeamInfo_descriptor_, &TeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetGetTeamMemberInfo_descriptor_, &RetGetTeamMemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MemberInfo_descriptor_, &MemberInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetGetNearbyPlayerInfo_descriptor_, &RetGetNearbyPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    NearbyPlayerInfo_descriptor_, &NearbyPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetLookforTeamInfo_descriptor_, &RetLookforTeamInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClientSysMemberMap_descriptor_, &ToClientSysMemberMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetChangeLeader_descriptor_, &RetChangeLeader::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetInviteToMember_descriptor_, &RetInviteToMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetKickMember_descriptor_, &RetKickMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetLeaveTeam_descriptor_, &RetLeaveTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToLeaderAcquire_descriptor_, &ToLeaderAcquire::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetAcquireToTeam_descriptor_, &RetAcquireToTeam::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimBroadcastInstanceCreate_descriptor_, &SimBroadcastInstanceCreate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqInstanceMemberApply_descriptor_, &ReqInstanceMemberApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetInstanceMemberApply_descriptor_, &RetInstanceMemberApply::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClientGroupChat_descriptor_, &ToClientGroupChat::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClickPlayerHead_descriptor_, &ClickPlayerHead::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Group_2fGroupMessage_2eproto() {
  delete RetInviteReply::default_instance_;
  delete RetInviteReply_reflection_;
  delete RetPlayerStateToTeam::default_instance_;
  delete RetPlayerStateToTeam_reflection_;
  delete RetGetTeamID::default_instance_;
  delete RetGetTeamID_reflection_;
  delete TeamInfo::default_instance_;
  delete TeamInfo_reflection_;
  delete RetGetTeamMemberInfo::default_instance_;
  delete RetGetTeamMemberInfo_reflection_;
  delete MemberInfo::default_instance_;
  delete MemberInfo_reflection_;
  delete RetGetNearbyPlayerInfo::default_instance_;
  delete RetGetNearbyPlayerInfo_reflection_;
  delete NearbyPlayerInfo::default_instance_;
  delete NearbyPlayerInfo_reflection_;
  delete RetLookforTeamInfo::default_instance_;
  delete RetLookforTeamInfo_reflection_;
  delete ToClientSysMemberMap::default_instance_;
  delete ToClientSysMemberMap_reflection_;
  delete RetChangeLeader::default_instance_;
  delete RetChangeLeader_reflection_;
  delete RetInviteToMember::default_instance_;
  delete RetInviteToMember_reflection_;
  delete RetKickMember::default_instance_;
  delete RetKickMember_reflection_;
  delete RetLeaveTeam::default_instance_;
  delete RetLeaveTeam_reflection_;
  delete ToLeaderAcquire::default_instance_;
  delete ToLeaderAcquire_reflection_;
  delete RetAcquireToTeam::default_instance_;
  delete RetAcquireToTeam_reflection_;
  delete SimBroadcastInstanceCreate::default_instance_;
  delete SimBroadcastInstanceCreate_reflection_;
  delete ReqInstanceMemberApply::default_instance_;
  delete ReqInstanceMemberApply_reflection_;
  delete RetInstanceMemberApply::default_instance_;
  delete RetInstanceMemberApply_reflection_;
  delete ToClientGroupChat::default_instance_;
  delete ToClientGroupChat_reflection_;
  delete ClickPlayerHead::default_instance_;
  delete ClickPlayerHead_reflection_;
}

void protobuf_AddDesc_Group_2fGroupMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030Group/GroupMessage.proto\022\014GroupMessage"
    "\"g\n\016RetInviteReply\022\013\n\003ret\030\001 \002(\005\022\020\n\010dwTea"
    "mID\030\002 \002(\003\0226\n\nplayerInfo\030\003 \003(\0132\".GroupMes"
    "sage.RetPlayerStateToTeam\"\230\002\n\024RetPlayerS"
    "tateToTeam\022\022\n\ndwPlayerID\030\001 \002(\003\022\024\n\014dwOutO"
    "fRange\030\002 \002(\005\022\021\n\tdwHorseID\030\003 \002(\005\022\021\n\tdwEqu"
    "ipID\030\004 \002(\005\022\020\n\010eClassEx\030\005 \002(\005\022\r\n\005bySex\030\006 "
    "\002(\005\022\016\n\006nLevel\030\007 \002(\005\022\021\n\tisCaptain\030\010 \002(\005\022\023"
    "\n\013sPlayerName\030\t \002(\t\022\025\n\rdwPlayerPower\030\n \002"
    "(\005\022\017\n\007costume\030\013 \002(\005\022\r\n\005mapid\030\014 \002(\005\022\021\n\tfa"
    "shionID\030\r \001(\005\022\r\n\005viplv\030\016 \001(\005\"E\n\014RetGetTe"
    "amID\022\013\n\003ret\030\001 \002(\005\022(\n\010teamInfo\030\002 \003(\0132\026.Gr"
    "oupMessage.TeamInfo\"\241\001\n\010TeamInfo\022\020\n\010dwTe"
    "amID\030\001 \002(\003\022\023\n\013sLeaderName\030\002 \001(\t\022\023\n\013dwTea"
    "mLevel\030\003 \001(\005\022\023\n\013dwTeamPower\030\004 \001(\005\022\025\n\rdwT"
    "eamMembers\030\005 \001(\005\022-\n\013groupMember\030\006 \003(\0132\030."
    "GroupMessage.MemberInfo\"O\n\024RetGetTeamMem"
    "berInfo\022\013\n\003ret\030\001 \002(\005\022*\n\010teamInfo\030\002 \003(\0132\030"
    ".GroupMessage.MemberInfo\"h\n\nMemberInfo\022\016"
    "\n\006charID\030\001 \002(\003\022\014\n\004name\030\002 \002(\t\022\r\n\005fight\030\003 "
    "\001(\005\022\022\n\nprofession\030\004 \002(\005\022\n\n\002lv\030\005 \002(\005\022\r\n\005v"
    "iplv\030\006 \002(\005\"Z\n\026RetGetNearbyPlayerInfo\022\013\n\003"
    "ret\030\001 \002(\005\0223\n\013playerInfos\030\002 \003(\0132\036.GroupMe"
    "ssage.NearbyPlayerInfo\"\220\001\n\020NearbyPlayerI"
    "nfo\022\022\n\ndwPlayerID\030\001 \002(\003\022\023\n\013sPlayerName\030\002"
    " \002(\t\022\016\n\006nLevel\030\003 \002(\005\022\020\n\010eClassEx\030\004 \002(\005\022\020"
    "\n\010powerNum\030\005 \002(\005\022\020\n\010bHasTeam\030\006 \002(\005\022\r\n\005vi"
    "plv\030\007 \002(\005\"Y\n\022RetLookforTeamInfo\022\013\n\003ret\030\001"
    " \002(\005\0226\n\nplayerInfo\030\002 \003(\0132\".GroupMessage."
    "RetPlayerStateToTeam\"B\n\024ToClientSysMembe"
    "rMap\022\013\n\003ret\030\001 \002(\005\022\r\n\005mapid\030\002 \003(\005\022\016\n\006char"
    "id\030\003 \003(\003\"<\n\017RetChangeLeader\022\022\n\ndwLeaderI"
    "D\030\001 \002(\003\022\025\n\rdwNewLeaderID\030\002 \002(\003\"=\n\021RetInv"
    "iteToMember\022\023\n\013dwTeamMemID\030\001 \002(\003\022\023\n\013sLea"
    "derName\030\002 \002(\t\"\'\n\rRetKickMember\022\026\n\016dwDest"
    "PlayerID\030\001 \002(\003\"6\n\014RetLeaveTeam\022\022\n\ndwPlay"
    "erID\030\001 \002(\003\022\022\n\ndwLeaderID\030\002 \001(\003\";\n\017ToLead"
    "erAcquire\022\023\n\013dstPlayerID\030\001 \002(\003\022\023\n\013acquir"
    "eName\030\002 \002(\t\"\203\001\n\020RetAcquireToTeam\022\023\n\013dwEr"
    "rorCode\030\001 \002(\005\022\020\n\010dwTeamID\030\002 \002(\005\022\020\n\010teamS"
    "ign\030\003 \002(\005\0226\n\nplayerInfo\030\004 \003(\0132\".GroupMes"
    "sage.RetPlayerStateToTeam\".\n\032SimBroadcas"
    "tInstanceCreate\022\020\n\010teamSign\030\001 \002(\005\"=\n\026Req"
    "InstanceMemberApply\022\017\n\007isAgree\030\001 \002(\005\022\022\n\n"
    "instanceId\030\002 \002(\005\"-\n\026RetInstanceMemberApp"
    "ly\022\023\n\013dwErrorCode\030\001 \002(\005\"Q\n\021ToClientGroup"
    "Chat\022\014\n\004type\030\001 \002(\005\022\014\n\004name\030\002 \001(\t\022\022\n\ninst"
    "anceId\030\003 \001(\005\022\014\n\004guid\030\004 \001(\003\"\"\n\017ClickPlaye"
    "rHead\022\017\n\007groupID\030\001 \001(\005", 1942);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Group/GroupMessage.proto", &protobuf_RegisterTypes);
  RetInviteReply::default_instance_ = new RetInviteReply();
  RetPlayerStateToTeam::default_instance_ = new RetPlayerStateToTeam();
  RetGetTeamID::default_instance_ = new RetGetTeamID();
  TeamInfo::default_instance_ = new TeamInfo();
  RetGetTeamMemberInfo::default_instance_ = new RetGetTeamMemberInfo();
  MemberInfo::default_instance_ = new MemberInfo();
  RetGetNearbyPlayerInfo::default_instance_ = new RetGetNearbyPlayerInfo();
  NearbyPlayerInfo::default_instance_ = new NearbyPlayerInfo();
  RetLookforTeamInfo::default_instance_ = new RetLookforTeamInfo();
  ToClientSysMemberMap::default_instance_ = new ToClientSysMemberMap();
  RetChangeLeader::default_instance_ = new RetChangeLeader();
  RetInviteToMember::default_instance_ = new RetInviteToMember();
  RetKickMember::default_instance_ = new RetKickMember();
  RetLeaveTeam::default_instance_ = new RetLeaveTeam();
  ToLeaderAcquire::default_instance_ = new ToLeaderAcquire();
  RetAcquireToTeam::default_instance_ = new RetAcquireToTeam();
  SimBroadcastInstanceCreate::default_instance_ = new SimBroadcastInstanceCreate();
  ReqInstanceMemberApply::default_instance_ = new ReqInstanceMemberApply();
  RetInstanceMemberApply::default_instance_ = new RetInstanceMemberApply();
  ToClientGroupChat::default_instance_ = new ToClientGroupChat();
  ClickPlayerHead::default_instance_ = new ClickPlayerHead();
  RetInviteReply::default_instance_->InitAsDefaultInstance();
  RetPlayerStateToTeam::default_instance_->InitAsDefaultInstance();
  RetGetTeamID::default_instance_->InitAsDefaultInstance();
  TeamInfo::default_instance_->InitAsDefaultInstance();
  RetGetTeamMemberInfo::default_instance_->InitAsDefaultInstance();
  MemberInfo::default_instance_->InitAsDefaultInstance();
  RetGetNearbyPlayerInfo::default_instance_->InitAsDefaultInstance();
  NearbyPlayerInfo::default_instance_->InitAsDefaultInstance();
  RetLookforTeamInfo::default_instance_->InitAsDefaultInstance();
  ToClientSysMemberMap::default_instance_->InitAsDefaultInstance();
  RetChangeLeader::default_instance_->InitAsDefaultInstance();
  RetInviteToMember::default_instance_->InitAsDefaultInstance();
  RetKickMember::default_instance_->InitAsDefaultInstance();
  RetLeaveTeam::default_instance_->InitAsDefaultInstance();
  ToLeaderAcquire::default_instance_->InitAsDefaultInstance();
  RetAcquireToTeam::default_instance_->InitAsDefaultInstance();
  SimBroadcastInstanceCreate::default_instance_->InitAsDefaultInstance();
  ReqInstanceMemberApply::default_instance_->InitAsDefaultInstance();
  RetInstanceMemberApply::default_instance_->InitAsDefaultInstance();
  ToClientGroupChat::default_instance_->InitAsDefaultInstance();
  ClickPlayerHead::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Group_2fGroupMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Group_2fGroupMessage_2eproto {
  StaticDescriptorInitializer_Group_2fGroupMessage_2eproto() {
    protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  }
} static_descriptor_initializer_Group_2fGroupMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int RetInviteReply::kRetFieldNumber;
const int RetInviteReply::kDwTeamIDFieldNumber;
const int RetInviteReply::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

RetInviteReply::RetInviteReply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetInviteReply::InitAsDefaultInstance() {
}

RetInviteReply::RetInviteReply(const RetInviteReply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetInviteReply::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  dwteamid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetInviteReply::~RetInviteReply() {
  SharedDtor();
}

void RetInviteReply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetInviteReply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetInviteReply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetInviteReply_descriptor_;
}

const RetInviteReply& RetInviteReply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

RetInviteReply* RetInviteReply::default_instance_ = NULL;

RetInviteReply* RetInviteReply::New() const {
  return new RetInviteReply;
}

void RetInviteReply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    dwteamid_ = GOOGLE_LONGLONG(0);
  }
  playerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetInviteReply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwTeamID;
        break;
      }

      // required int64 dwTeamID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwTeamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwteamid_)));
          set_has_dwteamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerInfo;
        break;
      }

      // repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_playerInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetInviteReply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int64 dwTeamID = 2;
  if (has_dwteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dwteamid(), output);
  }

  // repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 3;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->playerinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetInviteReply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int64 dwTeamID = 2;
  if (has_dwteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dwteamid(), target);
  }

  // repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 3;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->playerinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetInviteReply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int64 dwTeamID = 2;
    if (has_dwteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwteamid());
    }

  }
  // repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 3;
  total_size += 1 * this->playerinfo_size();
  for (int i = 0; i < this->playerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetInviteReply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetInviteReply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetInviteReply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetInviteReply::MergeFrom(const RetInviteReply& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerinfo_.MergeFrom(from.playerinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_dwteamid()) {
      set_dwteamid(from.dwteamid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetInviteReply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetInviteReply::CopyFrom(const RetInviteReply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetInviteReply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < playerinfo_size(); i++) {
    if (!this->playerinfo(i).IsInitialized()) return false;
  }
  return true;
}

void RetInviteReply::Swap(RetInviteReply* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(dwteamid_, other->dwteamid_);
    playerinfo_.Swap(&other->playerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetInviteReply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetInviteReply_descriptor_;
  metadata.reflection = RetInviteReply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetPlayerStateToTeam::kDwPlayerIDFieldNumber;
const int RetPlayerStateToTeam::kDwOutOfRangeFieldNumber;
const int RetPlayerStateToTeam::kDwHorseIDFieldNumber;
const int RetPlayerStateToTeam::kDwEquipIDFieldNumber;
const int RetPlayerStateToTeam::kEClassExFieldNumber;
const int RetPlayerStateToTeam::kBySexFieldNumber;
const int RetPlayerStateToTeam::kNLevelFieldNumber;
const int RetPlayerStateToTeam::kIsCaptainFieldNumber;
const int RetPlayerStateToTeam::kSPlayerNameFieldNumber;
const int RetPlayerStateToTeam::kDwPlayerPowerFieldNumber;
const int RetPlayerStateToTeam::kCostumeFieldNumber;
const int RetPlayerStateToTeam::kMapidFieldNumber;
const int RetPlayerStateToTeam::kFashionIDFieldNumber;
const int RetPlayerStateToTeam::kViplvFieldNumber;
#endif  // !_MSC_VER

RetPlayerStateToTeam::RetPlayerStateToTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetPlayerStateToTeam::InitAsDefaultInstance() {
}

RetPlayerStateToTeam::RetPlayerStateToTeam(const RetPlayerStateToTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetPlayerStateToTeam::SharedCtor() {
  _cached_size_ = 0;
  dwplayerid_ = GOOGLE_LONGLONG(0);
  dwoutofrange_ = 0;
  dwhorseid_ = 0;
  dwequipid_ = 0;
  eclassex_ = 0;
  bysex_ = 0;
  nlevel_ = 0;
  iscaptain_ = 0;
  splayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dwplayerpower_ = 0;
  costume_ = 0;
  mapid_ = 0;
  fashionid_ = 0;
  viplv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetPlayerStateToTeam::~RetPlayerStateToTeam() {
  SharedDtor();
}

void RetPlayerStateToTeam::SharedDtor() {
  if (splayername_ != &::google::protobuf::internal::kEmptyString) {
    delete splayername_;
  }
  if (this != default_instance_) {
  }
}

void RetPlayerStateToTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetPlayerStateToTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetPlayerStateToTeam_descriptor_;
}

const RetPlayerStateToTeam& RetPlayerStateToTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

RetPlayerStateToTeam* RetPlayerStateToTeam::default_instance_ = NULL;

RetPlayerStateToTeam* RetPlayerStateToTeam::New() const {
  return new RetPlayerStateToTeam;
}

void RetPlayerStateToTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwplayerid_ = GOOGLE_LONGLONG(0);
    dwoutofrange_ = 0;
    dwhorseid_ = 0;
    dwequipid_ = 0;
    eclassex_ = 0;
    bysex_ = 0;
    nlevel_ = 0;
    iscaptain_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_splayername()) {
      if (splayername_ != &::google::protobuf::internal::kEmptyString) {
        splayername_->clear();
      }
    }
    dwplayerpower_ = 0;
    costume_ = 0;
    mapid_ = 0;
    fashionid_ = 0;
    viplv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetPlayerStateToTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwPlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwplayerid_)));
          set_has_dwplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwOutOfRange;
        break;
      }

      // required int32 dwOutOfRange = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwOutOfRange:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwoutofrange_)));
          set_has_dwoutofrange();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dwHorseID;
        break;
      }

      // required int32 dwHorseID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwHorseID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwhorseid_)));
          set_has_dwhorseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dwEquipID;
        break;
      }

      // required int32 dwEquipID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwEquipID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwequipid_)));
          set_has_dwequipid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_eClassEx;
        break;
      }

      // required int32 eClassEx = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eClassEx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eclassex_)));
          set_has_eclassex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bySex;
        break;
      }

      // required int32 bySex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bySex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bysex_)));
          set_has_bysex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_nLevel;
        break;
      }

      // required int32 nLevel = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlevel_)));
          set_has_nlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_isCaptain;
        break;
      }

      // required int32 isCaptain = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isCaptain:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &iscaptain_)));
          set_has_iscaptain();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_sPlayerName;
        break;
      }

      // required string sPlayerName = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_splayername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->splayername().data(), this->splayername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_dwPlayerPower;
        break;
      }

      // required int32 dwPlayerPower = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwPlayerPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwplayerpower_)));
          set_has_dwplayerpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_costume;
        break;
      }

      // required int32 costume = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costume_)));
          set_has_costume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_mapid;
        break;
      }

      // required int32 mapid = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_fashionID;
        break;
      }

      // optional int32 fashionID = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashionid_)));
          set_has_fashionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_viplv;
        break;
      }

      // optional int32 viplv = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetPlayerStateToTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dwPlayerID = 1;
  if (has_dwplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwplayerid(), output);
  }

  // required int32 dwOutOfRange = 2;
  if (has_dwoutofrange()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwoutofrange(), output);
  }

  // required int32 dwHorseID = 3;
  if (has_dwhorseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dwhorseid(), output);
  }

  // required int32 dwEquipID = 4;
  if (has_dwequipid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dwequipid(), output);
  }

  // required int32 eClassEx = 5;
  if (has_eclassex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->eclassex(), output);
  }

  // required int32 bySex = 6;
  if (has_bysex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bysex(), output);
  }

  // required int32 nLevel = 7;
  if (has_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->nlevel(), output);
  }

  // required int32 isCaptain = 8;
  if (has_iscaptain()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->iscaptain(), output);
  }

  // required string sPlayerName = 9;
  if (has_splayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->splayername().data(), this->splayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->splayername(), output);
  }

  // required int32 dwPlayerPower = 10;
  if (has_dwplayerpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->dwplayerpower(), output);
  }

  // required int32 costume = 11;
  if (has_costume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->costume(), output);
  }

  // required int32 mapid = 12;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->mapid(), output);
  }

  // optional int32 fashionID = 13;
  if (has_fashionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->fashionid(), output);
  }

  // optional int32 viplv = 14;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->viplv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetPlayerStateToTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dwPlayerID = 1;
  if (has_dwplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dwplayerid(), target);
  }

  // required int32 dwOutOfRange = 2;
  if (has_dwoutofrange()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwoutofrange(), target);
  }

  // required int32 dwHorseID = 3;
  if (has_dwhorseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dwhorseid(), target);
  }

  // required int32 dwEquipID = 4;
  if (has_dwequipid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dwequipid(), target);
  }

  // required int32 eClassEx = 5;
  if (has_eclassex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->eclassex(), target);
  }

  // required int32 bySex = 6;
  if (has_bysex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bysex(), target);
  }

  // required int32 nLevel = 7;
  if (has_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->nlevel(), target);
  }

  // required int32 isCaptain = 8;
  if (has_iscaptain()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->iscaptain(), target);
  }

  // required string sPlayerName = 9;
  if (has_splayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->splayername().data(), this->splayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->splayername(), target);
  }

  // required int32 dwPlayerPower = 10;
  if (has_dwplayerpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->dwplayerpower(), target);
  }

  // required int32 costume = 11;
  if (has_costume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->costume(), target);
  }

  // required int32 mapid = 12;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->mapid(), target);
  }

  // optional int32 fashionID = 13;
  if (has_fashionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->fashionid(), target);
  }

  // optional int32 viplv = 14;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->viplv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetPlayerStateToTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwPlayerID = 1;
    if (has_dwplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwplayerid());
    }

    // required int32 dwOutOfRange = 2;
    if (has_dwoutofrange()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwoutofrange());
    }

    // required int32 dwHorseID = 3;
    if (has_dwhorseid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwhorseid());
    }

    // required int32 dwEquipID = 4;
    if (has_dwequipid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwequipid());
    }

    // required int32 eClassEx = 5;
    if (has_eclassex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eclassex());
    }

    // required int32 bySex = 6;
    if (has_bysex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bysex());
    }

    // required int32 nLevel = 7;
    if (has_nlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlevel());
    }

    // required int32 isCaptain = 8;
    if (has_iscaptain()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->iscaptain());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string sPlayerName = 9;
    if (has_splayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->splayername());
    }

    // required int32 dwPlayerPower = 10;
    if (has_dwplayerpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwplayerpower());
    }

    // required int32 costume = 11;
    if (has_costume()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costume());
    }

    // required int32 mapid = 12;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

    // optional int32 fashionID = 13;
    if (has_fashionid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashionid());
    }

    // optional int32 viplv = 14;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetPlayerStateToTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetPlayerStateToTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetPlayerStateToTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetPlayerStateToTeam::MergeFrom(const RetPlayerStateToTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwplayerid()) {
      set_dwplayerid(from.dwplayerid());
    }
    if (from.has_dwoutofrange()) {
      set_dwoutofrange(from.dwoutofrange());
    }
    if (from.has_dwhorseid()) {
      set_dwhorseid(from.dwhorseid());
    }
    if (from.has_dwequipid()) {
      set_dwequipid(from.dwequipid());
    }
    if (from.has_eclassex()) {
      set_eclassex(from.eclassex());
    }
    if (from.has_bysex()) {
      set_bysex(from.bysex());
    }
    if (from.has_nlevel()) {
      set_nlevel(from.nlevel());
    }
    if (from.has_iscaptain()) {
      set_iscaptain(from.iscaptain());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_splayername()) {
      set_splayername(from.splayername());
    }
    if (from.has_dwplayerpower()) {
      set_dwplayerpower(from.dwplayerpower());
    }
    if (from.has_costume()) {
      set_costume(from.costume());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_fashionid()) {
      set_fashionid(from.fashionid());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetPlayerStateToTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetPlayerStateToTeam::CopyFrom(const RetPlayerStateToTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetPlayerStateToTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void RetPlayerStateToTeam::Swap(RetPlayerStateToTeam* other) {
  if (other != this) {
    std::swap(dwplayerid_, other->dwplayerid_);
    std::swap(dwoutofrange_, other->dwoutofrange_);
    std::swap(dwhorseid_, other->dwhorseid_);
    std::swap(dwequipid_, other->dwequipid_);
    std::swap(eclassex_, other->eclassex_);
    std::swap(bysex_, other->bysex_);
    std::swap(nlevel_, other->nlevel_);
    std::swap(iscaptain_, other->iscaptain_);
    std::swap(splayername_, other->splayername_);
    std::swap(dwplayerpower_, other->dwplayerpower_);
    std::swap(costume_, other->costume_);
    std::swap(mapid_, other->mapid_);
    std::swap(fashionid_, other->fashionid_);
    std::swap(viplv_, other->viplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetPlayerStateToTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetPlayerStateToTeam_descriptor_;
  metadata.reflection = RetPlayerStateToTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetGetTeamID::kRetFieldNumber;
const int RetGetTeamID::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

RetGetTeamID::RetGetTeamID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetGetTeamID::InitAsDefaultInstance() {
}

RetGetTeamID::RetGetTeamID(const RetGetTeamID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetGetTeamID::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetGetTeamID::~RetGetTeamID() {
  SharedDtor();
}

void RetGetTeamID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetGetTeamID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetGetTeamID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetGetTeamID_descriptor_;
}

const RetGetTeamID& RetGetTeamID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

RetGetTeamID* RetGetTeamID::default_instance_ = NULL;

RetGetTeamID* RetGetTeamID::New() const {
  return new RetGetTeamID;
}

void RetGetTeamID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  teaminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetGetTeamID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teamInfo;
        break;
      }

      // repeated .GroupMessage.TeamInfo teamInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teaminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teamInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetGetTeamID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .GroupMessage.TeamInfo teamInfo = 2;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teaminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetGetTeamID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .GroupMessage.TeamInfo teamInfo = 2;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teaminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetGetTeamID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .GroupMessage.TeamInfo teamInfo = 2;
  total_size += 1 * this->teaminfo_size();
  for (int i = 0; i < this->teaminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teaminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetGetTeamID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetGetTeamID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetGetTeamID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetGetTeamID::MergeFrom(const RetGetTeamID& from) {
  GOOGLE_CHECK_NE(&from, this);
  teaminfo_.MergeFrom(from.teaminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetGetTeamID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGetTeamID::CopyFrom(const RetGetTeamID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGetTeamID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < teaminfo_size(); i++) {
    if (!this->teaminfo(i).IsInitialized()) return false;
  }
  return true;
}

void RetGetTeamID::Swap(RetGetTeamID* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    teaminfo_.Swap(&other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetGetTeamID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetGetTeamID_descriptor_;
  metadata.reflection = RetGetTeamID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TeamInfo::kDwTeamIDFieldNumber;
const int TeamInfo::kSLeaderNameFieldNumber;
const int TeamInfo::kDwTeamLevelFieldNumber;
const int TeamInfo::kDwTeamPowerFieldNumber;
const int TeamInfo::kDwTeamMembersFieldNumber;
const int TeamInfo::kGroupMemberFieldNumber;
#endif  // !_MSC_VER

TeamInfo::TeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TeamInfo::InitAsDefaultInstance() {
}

TeamInfo::TeamInfo(const TeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TeamInfo::SharedCtor() {
  _cached_size_ = 0;
  dwteamid_ = GOOGLE_LONGLONG(0);
  sleadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  dwteamlevel_ = 0;
  dwteampower_ = 0;
  dwteammembers_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TeamInfo::~TeamInfo() {
  SharedDtor();
}

void TeamInfo::SharedDtor() {
  if (sleadername_ != &::google::protobuf::internal::kEmptyString) {
    delete sleadername_;
  }
  if (this != default_instance_) {
  }
}

void TeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TeamInfo_descriptor_;
}

const TeamInfo& TeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

TeamInfo* TeamInfo::default_instance_ = NULL;

TeamInfo* TeamInfo::New() const {
  return new TeamInfo;
}

void TeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwteamid_ = GOOGLE_LONGLONG(0);
    if (has_sleadername()) {
      if (sleadername_ != &::google::protobuf::internal::kEmptyString) {
        sleadername_->clear();
      }
    }
    dwteamlevel_ = 0;
    dwteampower_ = 0;
    dwteammembers_ = 0;
  }
  groupmember_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwTeamID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwteamid_)));
          set_has_dwteamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sLeaderName;
        break;
      }

      // optional string sLeaderName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sLeaderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sleadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sleadername().data(), this->sleadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dwTeamLevel;
        break;
      }

      // optional int32 dwTeamLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwTeamLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwteamlevel_)));
          set_has_dwteamlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_dwTeamPower;
        break;
      }

      // optional int32 dwTeamPower = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwTeamPower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwteampower_)));
          set_has_dwteampower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_dwTeamMembers;
        break;
      }

      // optional int32 dwTeamMembers = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwTeamMembers:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwteammembers_)));
          set_has_dwteammembers();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_groupMember;
        break;
      }

      // repeated .GroupMessage.MemberInfo groupMember = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_groupMember:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_groupmember()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_groupMember;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dwTeamID = 1;
  if (has_dwteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwteamid(), output);
  }

  // optional string sLeaderName = 2;
  if (has_sleadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sleadername().data(), this->sleadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sleadername(), output);
  }

  // optional int32 dwTeamLevel = 3;
  if (has_dwteamlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dwteamlevel(), output);
  }

  // optional int32 dwTeamPower = 4;
  if (has_dwteampower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dwteampower(), output);
  }

  // optional int32 dwTeamMembers = 5;
  if (has_dwteammembers()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->dwteammembers(), output);
  }

  // repeated .GroupMessage.MemberInfo groupMember = 6;
  for (int i = 0; i < this->groupmember_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->groupmember(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dwTeamID = 1;
  if (has_dwteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dwteamid(), target);
  }

  // optional string sLeaderName = 2;
  if (has_sleadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sleadername().data(), this->sleadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sleadername(), target);
  }

  // optional int32 dwTeamLevel = 3;
  if (has_dwteamlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dwteamlevel(), target);
  }

  // optional int32 dwTeamPower = 4;
  if (has_dwteampower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dwteampower(), target);
  }

  // optional int32 dwTeamMembers = 5;
  if (has_dwteammembers()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->dwteammembers(), target);
  }

  // repeated .GroupMessage.MemberInfo groupMember = 6;
  for (int i = 0; i < this->groupmember_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->groupmember(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwTeamID = 1;
    if (has_dwteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwteamid());
    }

    // optional string sLeaderName = 2;
    if (has_sleadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sleadername());
    }

    // optional int32 dwTeamLevel = 3;
    if (has_dwteamlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwteamlevel());
    }

    // optional int32 dwTeamPower = 4;
    if (has_dwteampower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwteampower());
    }

    // optional int32 dwTeamMembers = 5;
    if (has_dwteammembers()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwteammembers());
    }

  }
  // repeated .GroupMessage.MemberInfo groupMember = 6;
  total_size += 1 * this->groupmember_size();
  for (int i = 0; i < this->groupmember_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->groupmember(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TeamInfo::MergeFrom(const TeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  groupmember_.MergeFrom(from.groupmember_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwteamid()) {
      set_dwteamid(from.dwteamid());
    }
    if (from.has_sleadername()) {
      set_sleadername(from.sleadername());
    }
    if (from.has_dwteamlevel()) {
      set_dwteamlevel(from.dwteamlevel());
    }
    if (from.has_dwteampower()) {
      set_dwteampower(from.dwteampower());
    }
    if (from.has_dwteammembers()) {
      set_dwteammembers(from.dwteammembers());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TeamInfo::CopyFrom(const TeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < groupmember_size(); i++) {
    if (!this->groupmember(i).IsInitialized()) return false;
  }
  return true;
}

void TeamInfo::Swap(TeamInfo* other) {
  if (other != this) {
    std::swap(dwteamid_, other->dwteamid_);
    std::swap(sleadername_, other->sleadername_);
    std::swap(dwteamlevel_, other->dwteamlevel_);
    std::swap(dwteampower_, other->dwteampower_);
    std::swap(dwteammembers_, other->dwteammembers_);
    groupmember_.Swap(&other->groupmember_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TeamInfo_descriptor_;
  metadata.reflection = TeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetGetTeamMemberInfo::kRetFieldNumber;
const int RetGetTeamMemberInfo::kTeamInfoFieldNumber;
#endif  // !_MSC_VER

RetGetTeamMemberInfo::RetGetTeamMemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetGetTeamMemberInfo::InitAsDefaultInstance() {
}

RetGetTeamMemberInfo::RetGetTeamMemberInfo(const RetGetTeamMemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetGetTeamMemberInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetGetTeamMemberInfo::~RetGetTeamMemberInfo() {
  SharedDtor();
}

void RetGetTeamMemberInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetGetTeamMemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetGetTeamMemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetGetTeamMemberInfo_descriptor_;
}

const RetGetTeamMemberInfo& RetGetTeamMemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

RetGetTeamMemberInfo* RetGetTeamMemberInfo::default_instance_ = NULL;

RetGetTeamMemberInfo* RetGetTeamMemberInfo::New() const {
  return new RetGetTeamMemberInfo;
}

void RetGetTeamMemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  teaminfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetGetTeamMemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teamInfo;
        break;
      }

      // repeated .GroupMessage.MemberInfo teamInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_teamInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_teaminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_teamInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetGetTeamMemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .GroupMessage.MemberInfo teamInfo = 2;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->teaminfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetGetTeamMemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .GroupMessage.MemberInfo teamInfo = 2;
  for (int i = 0; i < this->teaminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->teaminfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetGetTeamMemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .GroupMessage.MemberInfo teamInfo = 2;
  total_size += 1 * this->teaminfo_size();
  for (int i = 0; i < this->teaminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->teaminfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetGetTeamMemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetGetTeamMemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetGetTeamMemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetGetTeamMemberInfo::MergeFrom(const RetGetTeamMemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  teaminfo_.MergeFrom(from.teaminfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetGetTeamMemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGetTeamMemberInfo::CopyFrom(const RetGetTeamMemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGetTeamMemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < teaminfo_size(); i++) {
    if (!this->teaminfo(i).IsInitialized()) return false;
  }
  return true;
}

void RetGetTeamMemberInfo::Swap(RetGetTeamMemberInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    teaminfo_.Swap(&other->teaminfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetGetTeamMemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetGetTeamMemberInfo_descriptor_;
  metadata.reflection = RetGetTeamMemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MemberInfo::kCharIDFieldNumber;
const int MemberInfo::kNameFieldNumber;
const int MemberInfo::kFightFieldNumber;
const int MemberInfo::kProfessionFieldNumber;
const int MemberInfo::kLvFieldNumber;
const int MemberInfo::kViplvFieldNumber;
#endif  // !_MSC_VER

MemberInfo::MemberInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MemberInfo::InitAsDefaultInstance() {
}

MemberInfo::MemberInfo(const MemberInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MemberInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  fight_ = 0;
  profession_ = 0;
  lv_ = 0;
  viplv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MemberInfo::~MemberInfo() {
  SharedDtor();
}

void MemberInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void MemberInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MemberInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MemberInfo_descriptor_;
}

const MemberInfo& MemberInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

MemberInfo* MemberInfo::default_instance_ = NULL;

MemberInfo* MemberInfo::New() const {
  return new MemberInfo;
}

void MemberInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    fight_ = 0;
    profession_ = 0;
    lv_ = 0;
    viplv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MemberInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // required string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fight;
        break;
      }

      // optional int32 fight = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // required int32 profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_lv;
        break;
      }

      // required int32 lv = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_viplv;
        break;
      }

      // required int32 viplv = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MemberInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 fight = 3;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fight(), output);
  }

  // required int32 profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->profession(), output);
  }

  // required int32 lv = 5;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->lv(), output);
  }

  // required int32 viplv = 6;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->viplv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MemberInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 fight = 3;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fight(), target);
  }

  // required int32 profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->profession(), target);
  }

  // required int32 lv = 5;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->lv(), target);
  }

  // required int32 viplv = 6;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->viplv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MemberInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 fight = 3;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

    // required int32 profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // required int32 lv = 5;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // required int32 viplv = 6;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MemberInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MemberInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MemberInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MemberInfo::MergeFrom(const MemberInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MemberInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MemberInfo::CopyFrom(const MemberInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MemberInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000003b) != 0x0000003b) return false;

  return true;
}

void MemberInfo::Swap(MemberInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(fight_, other->fight_);
    std::swap(profession_, other->profession_);
    std::swap(lv_, other->lv_);
    std::swap(viplv_, other->viplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MemberInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MemberInfo_descriptor_;
  metadata.reflection = MemberInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetGetNearbyPlayerInfo::kRetFieldNumber;
const int RetGetNearbyPlayerInfo::kPlayerInfosFieldNumber;
#endif  // !_MSC_VER

RetGetNearbyPlayerInfo::RetGetNearbyPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetGetNearbyPlayerInfo::InitAsDefaultInstance() {
}

RetGetNearbyPlayerInfo::RetGetNearbyPlayerInfo(const RetGetNearbyPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetGetNearbyPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetGetNearbyPlayerInfo::~RetGetNearbyPlayerInfo() {
  SharedDtor();
}

void RetGetNearbyPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetGetNearbyPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetGetNearbyPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetGetNearbyPlayerInfo_descriptor_;
}

const RetGetNearbyPlayerInfo& RetGetNearbyPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

RetGetNearbyPlayerInfo* RetGetNearbyPlayerInfo::default_instance_ = NULL;

RetGetNearbyPlayerInfo* RetGetNearbyPlayerInfo::New() const {
  return new RetGetNearbyPlayerInfo;
}

void RetGetNearbyPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  playerinfos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetGetNearbyPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerInfos;
        break;
      }

      // repeated .GroupMessage.NearbyPlayerInfo playerInfos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerinfos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerInfos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetGetNearbyPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .GroupMessage.NearbyPlayerInfo playerInfos = 2;
  for (int i = 0; i < this->playerinfos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerinfos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetGetNearbyPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .GroupMessage.NearbyPlayerInfo playerInfos = 2;
  for (int i = 0; i < this->playerinfos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerinfos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetGetNearbyPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .GroupMessage.NearbyPlayerInfo playerInfos = 2;
  total_size += 1 * this->playerinfos_size();
  for (int i = 0; i < this->playerinfos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerinfos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetGetNearbyPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetGetNearbyPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetGetNearbyPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetGetNearbyPlayerInfo::MergeFrom(const RetGetNearbyPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerinfos_.MergeFrom(from.playerinfos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetGetNearbyPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGetNearbyPlayerInfo::CopyFrom(const RetGetNearbyPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGetNearbyPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < playerinfos_size(); i++) {
    if (!this->playerinfos(i).IsInitialized()) return false;
  }
  return true;
}

void RetGetNearbyPlayerInfo::Swap(RetGetNearbyPlayerInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    playerinfos_.Swap(&other->playerinfos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetGetNearbyPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetGetNearbyPlayerInfo_descriptor_;
  metadata.reflection = RetGetNearbyPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int NearbyPlayerInfo::kDwPlayerIDFieldNumber;
const int NearbyPlayerInfo::kSPlayerNameFieldNumber;
const int NearbyPlayerInfo::kNLevelFieldNumber;
const int NearbyPlayerInfo::kEClassExFieldNumber;
const int NearbyPlayerInfo::kPowerNumFieldNumber;
const int NearbyPlayerInfo::kBHasTeamFieldNumber;
const int NearbyPlayerInfo::kViplvFieldNumber;
#endif  // !_MSC_VER

NearbyPlayerInfo::NearbyPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void NearbyPlayerInfo::InitAsDefaultInstance() {
}

NearbyPlayerInfo::NearbyPlayerInfo(const NearbyPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void NearbyPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  dwplayerid_ = GOOGLE_LONGLONG(0);
  splayername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  nlevel_ = 0;
  eclassex_ = 0;
  powernum_ = 0;
  bhasteam_ = 0;
  viplv_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

NearbyPlayerInfo::~NearbyPlayerInfo() {
  SharedDtor();
}

void NearbyPlayerInfo::SharedDtor() {
  if (splayername_ != &::google::protobuf::internal::kEmptyString) {
    delete splayername_;
  }
  if (this != default_instance_) {
  }
}

void NearbyPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* NearbyPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return NearbyPlayerInfo_descriptor_;
}

const NearbyPlayerInfo& NearbyPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

NearbyPlayerInfo* NearbyPlayerInfo::default_instance_ = NULL;

NearbyPlayerInfo* NearbyPlayerInfo::New() const {
  return new NearbyPlayerInfo;
}

void NearbyPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwplayerid_ = GOOGLE_LONGLONG(0);
    if (has_splayername()) {
      if (splayername_ != &::google::protobuf::internal::kEmptyString) {
        splayername_->clear();
      }
    }
    nlevel_ = 0;
    eclassex_ = 0;
    powernum_ = 0;
    bhasteam_ = 0;
    viplv_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool NearbyPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwPlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwplayerid_)));
          set_has_dwplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sPlayerName;
        break;
      }

      // required string sPlayerName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sPlayerName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_splayername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->splayername().data(), this->splayername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_nLevel;
        break;
      }

      // required int32 nLevel = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nlevel_)));
          set_has_nlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_eClassEx;
        break;
      }

      // required int32 eClassEx = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_eClassEx:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &eclassex_)));
          set_has_eclassex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_powerNum;
        break;
      }

      // required int32 powerNum = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_powerNum:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powernum_)));
          set_has_powernum();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_bHasTeam;
        break;
      }

      // required int32 bHasTeam = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bHasTeam:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bhasteam_)));
          set_has_bhasteam();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_viplv;
        break;
      }

      // required int32 viplv = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void NearbyPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dwPlayerID = 1;
  if (has_dwplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwplayerid(), output);
  }

  // required string sPlayerName = 2;
  if (has_splayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->splayername().data(), this->splayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->splayername(), output);
  }

  // required int32 nLevel = 3;
  if (has_nlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->nlevel(), output);
  }

  // required int32 eClassEx = 4;
  if (has_eclassex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->eclassex(), output);
  }

  // required int32 powerNum = 5;
  if (has_powernum()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->powernum(), output);
  }

  // required int32 bHasTeam = 6;
  if (has_bhasteam()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->bhasteam(), output);
  }

  // required int32 viplv = 7;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->viplv(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* NearbyPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dwPlayerID = 1;
  if (has_dwplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dwplayerid(), target);
  }

  // required string sPlayerName = 2;
  if (has_splayername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->splayername().data(), this->splayername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->splayername(), target);
  }

  // required int32 nLevel = 3;
  if (has_nlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->nlevel(), target);
  }

  // required int32 eClassEx = 4;
  if (has_eclassex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->eclassex(), target);
  }

  // required int32 powerNum = 5;
  if (has_powernum()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->powernum(), target);
  }

  // required int32 bHasTeam = 6;
  if (has_bhasteam()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->bhasteam(), target);
  }

  // required int32 viplv = 7;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->viplv(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int NearbyPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwPlayerID = 1;
    if (has_dwplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwplayerid());
    }

    // required string sPlayerName = 2;
    if (has_splayername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->splayername());
    }

    // required int32 nLevel = 3;
    if (has_nlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nlevel());
    }

    // required int32 eClassEx = 4;
    if (has_eclassex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->eclassex());
    }

    // required int32 powerNum = 5;
    if (has_powernum()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->powernum());
    }

    // required int32 bHasTeam = 6;
    if (has_bhasteam()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bhasteam());
    }

    // required int32 viplv = 7;
    if (has_viplv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void NearbyPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const NearbyPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const NearbyPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void NearbyPlayerInfo::MergeFrom(const NearbyPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwplayerid()) {
      set_dwplayerid(from.dwplayerid());
    }
    if (from.has_splayername()) {
      set_splayername(from.splayername());
    }
    if (from.has_nlevel()) {
      set_nlevel(from.nlevel());
    }
    if (from.has_eclassex()) {
      set_eclassex(from.eclassex());
    }
    if (from.has_powernum()) {
      set_powernum(from.powernum());
    }
    if (from.has_bhasteam()) {
      set_bhasteam(from.bhasteam());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void NearbyPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void NearbyPlayerInfo::CopyFrom(const NearbyPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool NearbyPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000007f) != 0x0000007f) return false;

  return true;
}

void NearbyPlayerInfo::Swap(NearbyPlayerInfo* other) {
  if (other != this) {
    std::swap(dwplayerid_, other->dwplayerid_);
    std::swap(splayername_, other->splayername_);
    std::swap(nlevel_, other->nlevel_);
    std::swap(eclassex_, other->eclassex_);
    std::swap(powernum_, other->powernum_);
    std::swap(bhasteam_, other->bhasteam_);
    std::swap(viplv_, other->viplv_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata NearbyPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = NearbyPlayerInfo_descriptor_;
  metadata.reflection = NearbyPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetLookforTeamInfo::kRetFieldNumber;
const int RetLookforTeamInfo::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

RetLookforTeamInfo::RetLookforTeamInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetLookforTeamInfo::InitAsDefaultInstance() {
}

RetLookforTeamInfo::RetLookforTeamInfo(const RetLookforTeamInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetLookforTeamInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetLookforTeamInfo::~RetLookforTeamInfo() {
  SharedDtor();
}

void RetLookforTeamInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetLookforTeamInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetLookforTeamInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetLookforTeamInfo_descriptor_;
}

const RetLookforTeamInfo& RetLookforTeamInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

RetLookforTeamInfo* RetLookforTeamInfo::default_instance_ = NULL;

RetLookforTeamInfo* RetLookforTeamInfo::New() const {
  return new RetLookforTeamInfo;
}

void RetLookforTeamInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  playerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetLookforTeamInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerInfo;
        break;
      }

      // repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_playerInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetLookforTeamInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 2;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->playerinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetLookforTeamInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 2;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->playerinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetLookforTeamInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 2;
  total_size += 1 * this->playerinfo_size();
  for (int i = 0; i < this->playerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetLookforTeamInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetLookforTeamInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetLookforTeamInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetLookforTeamInfo::MergeFrom(const RetLookforTeamInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerinfo_.MergeFrom(from.playerinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetLookforTeamInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetLookforTeamInfo::CopyFrom(const RetLookforTeamInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetLookforTeamInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < playerinfo_size(); i++) {
    if (!this->playerinfo(i).IsInitialized()) return false;
  }
  return true;
}

void RetLookforTeamInfo::Swap(RetLookforTeamInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    playerinfo_.Swap(&other->playerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetLookforTeamInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetLookforTeamInfo_descriptor_;
  metadata.reflection = RetLookforTeamInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClientSysMemberMap::kRetFieldNumber;
const int ToClientSysMemberMap::kMapidFieldNumber;
const int ToClientSysMemberMap::kCharidFieldNumber;
#endif  // !_MSC_VER

ToClientSysMemberMap::ToClientSysMemberMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClientSysMemberMap::InitAsDefaultInstance() {
}

ToClientSysMemberMap::ToClientSysMemberMap(const ToClientSysMemberMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClientSysMemberMap::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClientSysMemberMap::~ToClientSysMemberMap() {
  SharedDtor();
}

void ToClientSysMemberMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClientSysMemberMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClientSysMemberMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClientSysMemberMap_descriptor_;
}

const ToClientSysMemberMap& ToClientSysMemberMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

ToClientSysMemberMap* ToClientSysMemberMap::default_instance_ = NULL;

ToClientSysMemberMap* ToClientSysMemberMap::New() const {
  return new ToClientSysMemberMap;
}

void ToClientSysMemberMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  mapid_.Clear();
  charid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClientSysMemberMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // repeated int32 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_mapid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_mapid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        if (input->ExpectTag(24)) goto parse_charid;
        break;
      }

      // repeated int64 charid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_charid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_charid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charid;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClientSysMemberMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated int32 mapid = 2;
  for (int i = 0; i < this->mapid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->mapid(i), output);
  }

  // repeated int64 charid = 3;
  for (int i = 0; i < this->charid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->charid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClientSysMemberMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated int32 mapid = 2;
  for (int i = 0; i < this->mapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->mapid(i), target);
  }

  // repeated int64 charid = 3;
  for (int i = 0; i < this->charid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->charid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClientSysMemberMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated int32 mapid = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->mapid(i));
    }
    total_size += 1 * this->mapid_size() + data_size;
  }

  // repeated int64 charid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->charid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->charid(i));
    }
    total_size += 1 * this->charid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClientSysMemberMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClientSysMemberMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClientSysMemberMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClientSysMemberMap::MergeFrom(const ToClientSysMemberMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapid_.MergeFrom(from.mapid_);
  charid_.MergeFrom(from.charid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClientSysMemberMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClientSysMemberMap::CopyFrom(const ToClientSysMemberMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClientSysMemberMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToClientSysMemberMap::Swap(ToClientSysMemberMap* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    mapid_.Swap(&other->mapid_);
    charid_.Swap(&other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClientSysMemberMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClientSysMemberMap_descriptor_;
  metadata.reflection = ToClientSysMemberMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetChangeLeader::kDwLeaderIDFieldNumber;
const int RetChangeLeader::kDwNewLeaderIDFieldNumber;
#endif  // !_MSC_VER

RetChangeLeader::RetChangeLeader()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetChangeLeader::InitAsDefaultInstance() {
}

RetChangeLeader::RetChangeLeader(const RetChangeLeader& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetChangeLeader::SharedCtor() {
  _cached_size_ = 0;
  dwleaderid_ = GOOGLE_LONGLONG(0);
  dwnewleaderid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetChangeLeader::~RetChangeLeader() {
  SharedDtor();
}

void RetChangeLeader::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetChangeLeader::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetChangeLeader::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetChangeLeader_descriptor_;
}

const RetChangeLeader& RetChangeLeader::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

RetChangeLeader* RetChangeLeader::default_instance_ = NULL;

RetChangeLeader* RetChangeLeader::New() const {
  return new RetChangeLeader;
}

void RetChangeLeader::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwleaderid_ = GOOGLE_LONGLONG(0);
    dwnewleaderid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetChangeLeader::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwLeaderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwleaderid_)));
          set_has_dwleaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwNewLeaderID;
        break;
      }

      // required int64 dwNewLeaderID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwNewLeaderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwnewleaderid_)));
          set_has_dwnewleaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetChangeLeader::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dwLeaderID = 1;
  if (has_dwleaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwleaderid(), output);
  }

  // required int64 dwNewLeaderID = 2;
  if (has_dwnewleaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dwnewleaderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetChangeLeader::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dwLeaderID = 1;
  if (has_dwleaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dwleaderid(), target);
  }

  // required int64 dwNewLeaderID = 2;
  if (has_dwnewleaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dwnewleaderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetChangeLeader::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwLeaderID = 1;
    if (has_dwleaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwleaderid());
    }

    // required int64 dwNewLeaderID = 2;
    if (has_dwnewleaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwnewleaderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetChangeLeader::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetChangeLeader* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetChangeLeader*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetChangeLeader::MergeFrom(const RetChangeLeader& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwleaderid()) {
      set_dwleaderid(from.dwleaderid());
    }
    if (from.has_dwnewleaderid()) {
      set_dwnewleaderid(from.dwnewleaderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetChangeLeader::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetChangeLeader::CopyFrom(const RetChangeLeader& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetChangeLeader::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RetChangeLeader::Swap(RetChangeLeader* other) {
  if (other != this) {
    std::swap(dwleaderid_, other->dwleaderid_);
    std::swap(dwnewleaderid_, other->dwnewleaderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetChangeLeader::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetChangeLeader_descriptor_;
  metadata.reflection = RetChangeLeader_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetInviteToMember::kDwTeamMemIDFieldNumber;
const int RetInviteToMember::kSLeaderNameFieldNumber;
#endif  // !_MSC_VER

RetInviteToMember::RetInviteToMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetInviteToMember::InitAsDefaultInstance() {
}

RetInviteToMember::RetInviteToMember(const RetInviteToMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetInviteToMember::SharedCtor() {
  _cached_size_ = 0;
  dwteammemid_ = GOOGLE_LONGLONG(0);
  sleadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetInviteToMember::~RetInviteToMember() {
  SharedDtor();
}

void RetInviteToMember::SharedDtor() {
  if (sleadername_ != &::google::protobuf::internal::kEmptyString) {
    delete sleadername_;
  }
  if (this != default_instance_) {
  }
}

void RetInviteToMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetInviteToMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetInviteToMember_descriptor_;
}

const RetInviteToMember& RetInviteToMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

RetInviteToMember* RetInviteToMember::default_instance_ = NULL;

RetInviteToMember* RetInviteToMember::New() const {
  return new RetInviteToMember;
}

void RetInviteToMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwteammemid_ = GOOGLE_LONGLONG(0);
    if (has_sleadername()) {
      if (sleadername_ != &::google::protobuf::internal::kEmptyString) {
        sleadername_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetInviteToMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwTeamMemID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwteammemid_)));
          set_has_dwteammemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_sLeaderName;
        break;
      }

      // required string sLeaderName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sLeaderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sleadername()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sleadername().data(), this->sleadername().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetInviteToMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dwTeamMemID = 1;
  if (has_dwteammemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwteammemid(), output);
  }

  // required string sLeaderName = 2;
  if (has_sleadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sleadername().data(), this->sleadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->sleadername(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetInviteToMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dwTeamMemID = 1;
  if (has_dwteammemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dwteammemid(), target);
  }

  // required string sLeaderName = 2;
  if (has_sleadername()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sleadername().data(), this->sleadername().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->sleadername(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetInviteToMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwTeamMemID = 1;
    if (has_dwteammemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwteammemid());
    }

    // required string sLeaderName = 2;
    if (has_sleadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sleadername());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetInviteToMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetInviteToMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetInviteToMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetInviteToMember::MergeFrom(const RetInviteToMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwteammemid()) {
      set_dwteammemid(from.dwteammemid());
    }
    if (from.has_sleadername()) {
      set_sleadername(from.sleadername());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetInviteToMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetInviteToMember::CopyFrom(const RetInviteToMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetInviteToMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void RetInviteToMember::Swap(RetInviteToMember* other) {
  if (other != this) {
    std::swap(dwteammemid_, other->dwteammemid_);
    std::swap(sleadername_, other->sleadername_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetInviteToMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetInviteToMember_descriptor_;
  metadata.reflection = RetInviteToMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetKickMember::kDwDestPlayerIDFieldNumber;
#endif  // !_MSC_VER

RetKickMember::RetKickMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetKickMember::InitAsDefaultInstance() {
}

RetKickMember::RetKickMember(const RetKickMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetKickMember::SharedCtor() {
  _cached_size_ = 0;
  dwdestplayerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetKickMember::~RetKickMember() {
  SharedDtor();
}

void RetKickMember::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetKickMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetKickMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetKickMember_descriptor_;
}

const RetKickMember& RetKickMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

RetKickMember* RetKickMember::default_instance_ = NULL;

RetKickMember* RetKickMember::New() const {
  return new RetKickMember;
}

void RetKickMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwdestplayerid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetKickMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwDestPlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwdestplayerid_)));
          set_has_dwdestplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetKickMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dwDestPlayerID = 1;
  if (has_dwdestplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwdestplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetKickMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dwDestPlayerID = 1;
  if (has_dwdestplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dwdestplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetKickMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwDestPlayerID = 1;
    if (has_dwdestplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwdestplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetKickMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetKickMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetKickMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetKickMember::MergeFrom(const RetKickMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwdestplayerid()) {
      set_dwdestplayerid(from.dwdestplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetKickMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetKickMember::CopyFrom(const RetKickMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetKickMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetKickMember::Swap(RetKickMember* other) {
  if (other != this) {
    std::swap(dwdestplayerid_, other->dwdestplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetKickMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetKickMember_descriptor_;
  metadata.reflection = RetKickMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetLeaveTeam::kDwPlayerIDFieldNumber;
const int RetLeaveTeam::kDwLeaderIDFieldNumber;
#endif  // !_MSC_VER

RetLeaveTeam::RetLeaveTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetLeaveTeam::InitAsDefaultInstance() {
}

RetLeaveTeam::RetLeaveTeam(const RetLeaveTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetLeaveTeam::SharedCtor() {
  _cached_size_ = 0;
  dwplayerid_ = GOOGLE_LONGLONG(0);
  dwleaderid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetLeaveTeam::~RetLeaveTeam() {
  SharedDtor();
}

void RetLeaveTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetLeaveTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetLeaveTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetLeaveTeam_descriptor_;
}

const RetLeaveTeam& RetLeaveTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

RetLeaveTeam* RetLeaveTeam::default_instance_ = NULL;

RetLeaveTeam* RetLeaveTeam::New() const {
  return new RetLeaveTeam;
}

void RetLeaveTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwplayerid_ = GOOGLE_LONGLONG(0);
    dwleaderid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetLeaveTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwPlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwplayerid_)));
          set_has_dwplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwLeaderID;
        break;
      }

      // optional int64 dwLeaderID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwLeaderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwleaderid_)));
          set_has_dwleaderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetLeaveTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dwPlayerID = 1;
  if (has_dwplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwplayerid(), output);
  }

  // optional int64 dwLeaderID = 2;
  if (has_dwleaderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->dwleaderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetLeaveTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dwPlayerID = 1;
  if (has_dwplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dwplayerid(), target);
  }

  // optional int64 dwLeaderID = 2;
  if (has_dwleaderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->dwleaderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetLeaveTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwPlayerID = 1;
    if (has_dwplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwplayerid());
    }

    // optional int64 dwLeaderID = 2;
    if (has_dwleaderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwleaderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetLeaveTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetLeaveTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetLeaveTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetLeaveTeam::MergeFrom(const RetLeaveTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwplayerid()) {
      set_dwplayerid(from.dwplayerid());
    }
    if (from.has_dwleaderid()) {
      set_dwleaderid(from.dwleaderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetLeaveTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetLeaveTeam::CopyFrom(const RetLeaveTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetLeaveTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetLeaveTeam::Swap(RetLeaveTeam* other) {
  if (other != this) {
    std::swap(dwplayerid_, other->dwplayerid_);
    std::swap(dwleaderid_, other->dwleaderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetLeaveTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetLeaveTeam_descriptor_;
  metadata.reflection = RetLeaveTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToLeaderAcquire::kDstPlayerIDFieldNumber;
const int ToLeaderAcquire::kAcquireNameFieldNumber;
#endif  // !_MSC_VER

ToLeaderAcquire::ToLeaderAcquire()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToLeaderAcquire::InitAsDefaultInstance() {
}

ToLeaderAcquire::ToLeaderAcquire(const ToLeaderAcquire& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToLeaderAcquire::SharedCtor() {
  _cached_size_ = 0;
  dstplayerid_ = GOOGLE_LONGLONG(0);
  acquirename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToLeaderAcquire::~ToLeaderAcquire() {
  SharedDtor();
}

void ToLeaderAcquire::SharedDtor() {
  if (acquirename_ != &::google::protobuf::internal::kEmptyString) {
    delete acquirename_;
  }
  if (this != default_instance_) {
  }
}

void ToLeaderAcquire::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToLeaderAcquire::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToLeaderAcquire_descriptor_;
}

const ToLeaderAcquire& ToLeaderAcquire::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

ToLeaderAcquire* ToLeaderAcquire::default_instance_ = NULL;

ToLeaderAcquire* ToLeaderAcquire::New() const {
  return new ToLeaderAcquire;
}

void ToLeaderAcquire::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dstplayerid_ = GOOGLE_LONGLONG(0);
    if (has_acquirename()) {
      if (acquirename_ != &::google::protobuf::internal::kEmptyString) {
        acquirename_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToLeaderAcquire::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dstPlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dstplayerid_)));
          set_has_dstplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_acquireName;
        break;
      }

      // required string acquireName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_acquireName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_acquirename()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->acquirename().data(), this->acquirename().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToLeaderAcquire::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dstPlayerID = 1;
  if (has_dstplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dstplayerid(), output);
  }

  // required string acquireName = 2;
  if (has_acquirename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acquirename().data(), this->acquirename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->acquirename(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToLeaderAcquire::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dstPlayerID = 1;
  if (has_dstplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dstplayerid(), target);
  }

  // required string acquireName = 2;
  if (has_acquirename()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->acquirename().data(), this->acquirename().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->acquirename(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToLeaderAcquire::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dstPlayerID = 1;
    if (has_dstplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dstplayerid());
    }

    // required string acquireName = 2;
    if (has_acquirename()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->acquirename());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToLeaderAcquire::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToLeaderAcquire* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToLeaderAcquire*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToLeaderAcquire::MergeFrom(const ToLeaderAcquire& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dstplayerid()) {
      set_dstplayerid(from.dstplayerid());
    }
    if (from.has_acquirename()) {
      set_acquirename(from.acquirename());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToLeaderAcquire::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToLeaderAcquire::CopyFrom(const ToLeaderAcquire& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToLeaderAcquire::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ToLeaderAcquire::Swap(ToLeaderAcquire* other) {
  if (other != this) {
    std::swap(dstplayerid_, other->dstplayerid_);
    std::swap(acquirename_, other->acquirename_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToLeaderAcquire::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToLeaderAcquire_descriptor_;
  metadata.reflection = ToLeaderAcquire_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetAcquireToTeam::kDwErrorCodeFieldNumber;
const int RetAcquireToTeam::kDwTeamIDFieldNumber;
const int RetAcquireToTeam::kTeamSignFieldNumber;
const int RetAcquireToTeam::kPlayerInfoFieldNumber;
#endif  // !_MSC_VER

RetAcquireToTeam::RetAcquireToTeam()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetAcquireToTeam::InitAsDefaultInstance() {
}

RetAcquireToTeam::RetAcquireToTeam(const RetAcquireToTeam& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetAcquireToTeam::SharedCtor() {
  _cached_size_ = 0;
  dwerrorcode_ = 0;
  dwteamid_ = 0;
  teamsign_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetAcquireToTeam::~RetAcquireToTeam() {
  SharedDtor();
}

void RetAcquireToTeam::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetAcquireToTeam::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetAcquireToTeam::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetAcquireToTeam_descriptor_;
}

const RetAcquireToTeam& RetAcquireToTeam::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

RetAcquireToTeam* RetAcquireToTeam::default_instance_ = NULL;

RetAcquireToTeam* RetAcquireToTeam::New() const {
  return new RetAcquireToTeam;
}

void RetAcquireToTeam::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwerrorcode_ = 0;
    dwteamid_ = 0;
    teamsign_ = 0;
  }
  playerinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetAcquireToTeam::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwErrorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwerrorcode_)));
          set_has_dwerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwTeamID;
        break;
      }

      // required int32 dwTeamID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwTeamID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwteamid_)));
          set_has_dwteamid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_teamSign;
        break;
      }

      // required int32 teamSign = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_teamSign:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamsign_)));
          set_has_teamsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_playerInfo;
        break;
      }

      // repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_playerInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_playerinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_playerInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetAcquireToTeam::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwerrorcode(), output);
  }

  // required int32 dwTeamID = 2;
  if (has_dwteamid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwteamid(), output);
  }

  // required int32 teamSign = 3;
  if (has_teamsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->teamsign(), output);
  }

  // repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 4;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->playerinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetAcquireToTeam::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwerrorcode(), target);
  }

  // required int32 dwTeamID = 2;
  if (has_dwteamid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwteamid(), target);
  }

  // required int32 teamSign = 3;
  if (has_teamsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->teamsign(), target);
  }

  // repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 4;
  for (int i = 0; i < this->playerinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->playerinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetAcquireToTeam::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwErrorCode = 1;
    if (has_dwerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwerrorcode());
    }

    // required int32 dwTeamID = 2;
    if (has_dwteamid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwteamid());
    }

    // required int32 teamSign = 3;
    if (has_teamsign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamsign());
    }

  }
  // repeated .GroupMessage.RetPlayerStateToTeam playerInfo = 4;
  total_size += 1 * this->playerinfo_size();
  for (int i = 0; i < this->playerinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->playerinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetAcquireToTeam::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetAcquireToTeam* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetAcquireToTeam*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetAcquireToTeam::MergeFrom(const RetAcquireToTeam& from) {
  GOOGLE_CHECK_NE(&from, this);
  playerinfo_.MergeFrom(from.playerinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwerrorcode()) {
      set_dwerrorcode(from.dwerrorcode());
    }
    if (from.has_dwteamid()) {
      set_dwteamid(from.dwteamid());
    }
    if (from.has_teamsign()) {
      set_teamsign(from.teamsign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetAcquireToTeam::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetAcquireToTeam::CopyFrom(const RetAcquireToTeam& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetAcquireToTeam::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < playerinfo_size(); i++) {
    if (!this->playerinfo(i).IsInitialized()) return false;
  }
  return true;
}

void RetAcquireToTeam::Swap(RetAcquireToTeam* other) {
  if (other != this) {
    std::swap(dwerrorcode_, other->dwerrorcode_);
    std::swap(dwteamid_, other->dwteamid_);
    std::swap(teamsign_, other->teamsign_);
    playerinfo_.Swap(&other->playerinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetAcquireToTeam::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetAcquireToTeam_descriptor_;
  metadata.reflection = RetAcquireToTeam_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimBroadcastInstanceCreate::kTeamSignFieldNumber;
#endif  // !_MSC_VER

SimBroadcastInstanceCreate::SimBroadcastInstanceCreate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimBroadcastInstanceCreate::InitAsDefaultInstance() {
}

SimBroadcastInstanceCreate::SimBroadcastInstanceCreate(const SimBroadcastInstanceCreate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimBroadcastInstanceCreate::SharedCtor() {
  _cached_size_ = 0;
  teamsign_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimBroadcastInstanceCreate::~SimBroadcastInstanceCreate() {
  SharedDtor();
}

void SimBroadcastInstanceCreate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimBroadcastInstanceCreate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimBroadcastInstanceCreate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimBroadcastInstanceCreate_descriptor_;
}

const SimBroadcastInstanceCreate& SimBroadcastInstanceCreate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

SimBroadcastInstanceCreate* SimBroadcastInstanceCreate::default_instance_ = NULL;

SimBroadcastInstanceCreate* SimBroadcastInstanceCreate::New() const {
  return new SimBroadcastInstanceCreate;
}

void SimBroadcastInstanceCreate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    teamsign_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimBroadcastInstanceCreate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 teamSign = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &teamsign_)));
          set_has_teamsign();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimBroadcastInstanceCreate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 teamSign = 1;
  if (has_teamsign()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->teamsign(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimBroadcastInstanceCreate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 teamSign = 1;
  if (has_teamsign()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->teamsign(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimBroadcastInstanceCreate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 teamSign = 1;
    if (has_teamsign()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->teamsign());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimBroadcastInstanceCreate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimBroadcastInstanceCreate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimBroadcastInstanceCreate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimBroadcastInstanceCreate::MergeFrom(const SimBroadcastInstanceCreate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_teamsign()) {
      set_teamsign(from.teamsign());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimBroadcastInstanceCreate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimBroadcastInstanceCreate::CopyFrom(const SimBroadcastInstanceCreate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimBroadcastInstanceCreate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SimBroadcastInstanceCreate::Swap(SimBroadcastInstanceCreate* other) {
  if (other != this) {
    std::swap(teamsign_, other->teamsign_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimBroadcastInstanceCreate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimBroadcastInstanceCreate_descriptor_;
  metadata.reflection = SimBroadcastInstanceCreate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqInstanceMemberApply::kIsAgreeFieldNumber;
const int ReqInstanceMemberApply::kInstanceIdFieldNumber;
#endif  // !_MSC_VER

ReqInstanceMemberApply::ReqInstanceMemberApply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqInstanceMemberApply::InitAsDefaultInstance() {
}

ReqInstanceMemberApply::ReqInstanceMemberApply(const ReqInstanceMemberApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqInstanceMemberApply::SharedCtor() {
  _cached_size_ = 0;
  isagree_ = 0;
  instanceid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqInstanceMemberApply::~ReqInstanceMemberApply() {
  SharedDtor();
}

void ReqInstanceMemberApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqInstanceMemberApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqInstanceMemberApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqInstanceMemberApply_descriptor_;
}

const ReqInstanceMemberApply& ReqInstanceMemberApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

ReqInstanceMemberApply* ReqInstanceMemberApply::default_instance_ = NULL;

ReqInstanceMemberApply* ReqInstanceMemberApply::New() const {
  return new ReqInstanceMemberApply;
}

void ReqInstanceMemberApply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    isagree_ = 0;
    instanceid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqInstanceMemberApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 isAgree = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isagree_)));
          set_has_isagree();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instanceId;
        break;
      }

      // required int32 instanceId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqInstanceMemberApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 isAgree = 1;
  if (has_isagree()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->isagree(), output);
  }

  // required int32 instanceId = 2;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->instanceid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqInstanceMemberApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 isAgree = 1;
  if (has_isagree()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->isagree(), target);
  }

  // required int32 instanceId = 2;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->instanceid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqInstanceMemberApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 isAgree = 1;
    if (has_isagree()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isagree());
    }

    // required int32 instanceId = 2;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInstanceMemberApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqInstanceMemberApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqInstanceMemberApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqInstanceMemberApply::MergeFrom(const ReqInstanceMemberApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_isagree()) {
      set_isagree(from.isagree());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqInstanceMemberApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInstanceMemberApply::CopyFrom(const ReqInstanceMemberApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInstanceMemberApply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ReqInstanceMemberApply::Swap(ReqInstanceMemberApply* other) {
  if (other != this) {
    std::swap(isagree_, other->isagree_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqInstanceMemberApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqInstanceMemberApply_descriptor_;
  metadata.reflection = ReqInstanceMemberApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetInstanceMemberApply::kDwErrorCodeFieldNumber;
#endif  // !_MSC_VER

RetInstanceMemberApply::RetInstanceMemberApply()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetInstanceMemberApply::InitAsDefaultInstance() {
}

RetInstanceMemberApply::RetInstanceMemberApply(const RetInstanceMemberApply& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetInstanceMemberApply::SharedCtor() {
  _cached_size_ = 0;
  dwerrorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetInstanceMemberApply::~RetInstanceMemberApply() {
  SharedDtor();
}

void RetInstanceMemberApply::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetInstanceMemberApply::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetInstanceMemberApply::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetInstanceMemberApply_descriptor_;
}

const RetInstanceMemberApply& RetInstanceMemberApply::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

RetInstanceMemberApply* RetInstanceMemberApply::default_instance_ = NULL;

RetInstanceMemberApply* RetInstanceMemberApply::New() const {
  return new RetInstanceMemberApply;
}

void RetInstanceMemberApply::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwerrorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetInstanceMemberApply::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwErrorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwerrorcode_)));
          set_has_dwerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetInstanceMemberApply::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwerrorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetInstanceMemberApply::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwerrorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetInstanceMemberApply::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwErrorCode = 1;
    if (has_dwerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwerrorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetInstanceMemberApply::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetInstanceMemberApply* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetInstanceMemberApply*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetInstanceMemberApply::MergeFrom(const RetInstanceMemberApply& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwerrorcode()) {
      set_dwerrorcode(from.dwerrorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetInstanceMemberApply::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetInstanceMemberApply::CopyFrom(const RetInstanceMemberApply& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetInstanceMemberApply::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetInstanceMemberApply::Swap(RetInstanceMemberApply* other) {
  if (other != this) {
    std::swap(dwerrorcode_, other->dwerrorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetInstanceMemberApply::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetInstanceMemberApply_descriptor_;
  metadata.reflection = RetInstanceMemberApply_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClientGroupChat::kTypeFieldNumber;
const int ToClientGroupChat::kNameFieldNumber;
const int ToClientGroupChat::kInstanceIdFieldNumber;
const int ToClientGroupChat::kGuidFieldNumber;
#endif  // !_MSC_VER

ToClientGroupChat::ToClientGroupChat()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClientGroupChat::InitAsDefaultInstance() {
}

ToClientGroupChat::ToClientGroupChat(const ToClientGroupChat& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClientGroupChat::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  instanceid_ = 0;
  guid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClientGroupChat::~ToClientGroupChat() {
  SharedDtor();
}

void ToClientGroupChat::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ToClientGroupChat::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClientGroupChat::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClientGroupChat_descriptor_;
}

const ToClientGroupChat& ToClientGroupChat::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

ToClientGroupChat* ToClientGroupChat::default_instance_ = NULL;

ToClientGroupChat* ToClientGroupChat::New() const {
  return new ToClientGroupChat;
}

void ToClientGroupChat::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    instanceid_ = 0;
    guid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClientGroupChat::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_instanceId;
        break;
      }

      // optional int32 instanceId = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instanceId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &instanceid_)));
          set_has_instanceid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_guid;
        break;
      }

      // optional int64 guid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_guid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &guid_)));
          set_has_guid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClientGroupChat::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  // optional int32 instanceId = 3;
  if (has_instanceid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->instanceid(), output);
  }

  // optional int64 guid = 4;
  if (has_guid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->guid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClientGroupChat::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  // optional int32 instanceId = 3;
  if (has_instanceid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->instanceid(), target);
  }

  // optional int64 guid = 4;
  if (has_guid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->guid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClientGroupChat::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional int32 instanceId = 3;
    if (has_instanceid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->instanceid());
    }

    // optional int64 guid = 4;
    if (has_guid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->guid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClientGroupChat::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClientGroupChat* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClientGroupChat*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClientGroupChat::MergeFrom(const ToClientGroupChat& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_instanceid()) {
      set_instanceid(from.instanceid());
    }
    if (from.has_guid()) {
      set_guid(from.guid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClientGroupChat::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClientGroupChat::CopyFrom(const ToClientGroupChat& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClientGroupChat::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToClientGroupChat::Swap(ToClientGroupChat* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(name_, other->name_);
    std::swap(instanceid_, other->instanceid_);
    std::swap(guid_, other->guid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClientGroupChat::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClientGroupChat_descriptor_;
  metadata.reflection = ToClientGroupChat_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClickPlayerHead::kGroupIDFieldNumber;
#endif  // !_MSC_VER

ClickPlayerHead::ClickPlayerHead()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClickPlayerHead::InitAsDefaultInstance() {
}

ClickPlayerHead::ClickPlayerHead(const ClickPlayerHead& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClickPlayerHead::SharedCtor() {
  _cached_size_ = 0;
  groupid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClickPlayerHead::~ClickPlayerHead() {
  SharedDtor();
}

void ClickPlayerHead::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClickPlayerHead::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClickPlayerHead::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClickPlayerHead_descriptor_;
}

const ClickPlayerHead& ClickPlayerHead::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Group_2fGroupMessage_2eproto();
  return *default_instance_;
}

ClickPlayerHead* ClickPlayerHead::default_instance_ = NULL;

ClickPlayerHead* ClickPlayerHead::New() const {
  return new ClickPlayerHead;
}

void ClickPlayerHead::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    groupid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClickPlayerHead::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 groupID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &groupid_)));
          set_has_groupid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClickPlayerHead::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 groupID = 1;
  if (has_groupid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->groupid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClickPlayerHead::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 groupID = 1;
  if (has_groupid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->groupid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClickPlayerHead::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 groupID = 1;
    if (has_groupid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->groupid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClickPlayerHead::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClickPlayerHead* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClickPlayerHead*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClickPlayerHead::MergeFrom(const ClickPlayerHead& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_groupid()) {
      set_groupid(from.groupid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClickPlayerHead::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClickPlayerHead::CopyFrom(const ClickPlayerHead& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClickPlayerHead::IsInitialized() const {

  return true;
}

void ClickPlayerHead::Swap(ClickPlayerHead* other) {
  if (other != this) {
    std::swap(groupid_, other->groupid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClickPlayerHead::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClickPlayerHead_descriptor_;
  metadata.reflection = ClickPlayerHead_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GroupMessage

// @@protoc_insertion_point(global_scope)
