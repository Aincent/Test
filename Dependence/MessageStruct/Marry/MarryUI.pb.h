// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Marry/MarryUI.proto

#ifndef PROTOBUF_Marry_2fMarryUI_2eproto__INCLUDED
#define PROTOBUF_Marry_2fMarryUI_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MarryUI {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
void protobuf_AssignDesc_Marry_2fMarryUI_2eproto();
void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto();

class MarryFriendInfo;
class ReturnOpenNotMarryUI;
class MarryOtherInfo;
class ReturnOpenHaveMarryUI;
class NoticeRequestMarry;
class ResultRequestMarry;
class GiveFlower;
class ReceiveFlower;
class RingInfo;
class RequestAdvanceMarryRing;
class MarryCritType;
class MarryItemList;
class UpMarryStepReturn;
class UpdateMarryOtherInfo;

// ===================================================================

class MarryFriendInfo : public ::google::protobuf::Message {
 public:
  MarryFriendInfo();
  virtual ~MarryFriendInfo();

  MarryFriendInfo(const MarryFriendInfo& from);

  inline MarryFriendInfo& operator=(const MarryFriendInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarryFriendInfo& default_instance();

  void Swap(MarryFriendInfo* other);

  // implements Message ----------------------------------------------

  MarryFriendInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarryFriendInfo& from);
  void MergeFrom(const MarryFriendInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int32 fighting = 3;
  inline bool has_fighting() const;
  inline void clear_fighting();
  static const int kFightingFieldNumber = 3;
  inline ::google::protobuf::int32 fighting() const;
  inline void set_fighting(::google::protobuf::int32 value);

  // optional bool isOnline = 4;
  inline bool has_isonline() const;
  inline void clear_isonline();
  static const int kIsOnlineFieldNumber = 4;
  inline bool isonline() const;
  inline void set_isonline(bool value);

  // optional bytes name = 5;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 5;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 profession = 6;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 6;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int32 sex = 7;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 7;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 cohesion = 8;
  inline bool has_cohesion() const;
  inline void clear_cohesion();
  static const int kCohesionFieldNumber = 8;
  inline ::google::protobuf::int32 cohesion() const;
  inline void set_cohesion(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryUI.MarryFriendInfo)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_fighting();
  inline void clear_has_fighting();
  inline void set_has_isonline();
  inline void clear_has_isonline();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_cohesion();
  inline void clear_has_cohesion();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 fighting_;
  ::std::string* name_;
  bool isonline_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 cohesion_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto();

  void InitAsDefaultInstance();
  static MarryFriendInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReturnOpenNotMarryUI : public ::google::protobuf::Message {
 public:
  ReturnOpenNotMarryUI();
  virtual ~ReturnOpenNotMarryUI();

  ReturnOpenNotMarryUI(const ReturnOpenNotMarryUI& from);

  inline ReturnOpenNotMarryUI& operator=(const ReturnOpenNotMarryUI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReturnOpenNotMarryUI& default_instance();

  void Swap(ReturnOpenNotMarryUI* other);

  // implements Message ----------------------------------------------

  ReturnOpenNotMarryUI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReturnOpenNotMarryUI& from);
  void MergeFrom(const ReturnOpenNotMarryUI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .MarryUI.MarryFriendInfo friendInfoList = 1;
  inline int friendinfolist_size() const;
  inline void clear_friendinfolist();
  static const int kFriendInfoListFieldNumber = 1;
  inline const ::MarryUI::MarryFriendInfo& friendinfolist(int index) const;
  inline ::MarryUI::MarryFriendInfo* mutable_friendinfolist(int index);
  inline ::MarryUI::MarryFriendInfo* add_friendinfolist();
  inline const ::google::protobuf::RepeatedPtrField< ::MarryUI::MarryFriendInfo >&
      friendinfolist() const;
  inline ::google::protobuf::RepeatedPtrField< ::MarryUI::MarryFriendInfo >*
      mutable_friendinfolist();

  // @@protoc_insertion_point(class_scope:MarryUI.ReturnOpenNotMarryUI)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MarryUI::MarryFriendInfo > friendinfolist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto();

  void InitAsDefaultInstance();
  static ReturnOpenNotMarryUI* default_instance_;
};
// -------------------------------------------------------------------

class MarryOtherInfo : public ::google::protobuf::Message {
 public:
  MarryOtherInfo();
  virtual ~MarryOtherInfo();

  MarryOtherInfo(const MarryOtherInfo& from);

  inline MarryOtherInfo& operator=(const MarryOtherInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarryOtherInfo& default_instance();

  void Swap(MarryOtherInfo* other);

  // implements Message ----------------------------------------------

  MarryOtherInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarryOtherInfo& from);
  void MergeFrom(const MarryOtherInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 profession = 1;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 1;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int32 level = 2;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 2;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // optional int64 offlineTime = 3;
  inline bool has_offlinetime() const;
  inline void clear_offlinetime();
  static const int kOfflineTimeFieldNumber = 3;
  inline ::google::protobuf::int64 offlinetime() const;
  inline void set_offlinetime(::google::protobuf::int64 value);

  // optional bytes name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 sex = 5;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 5;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryUI.MarryOtherInfo)
 private:
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_offlinetime();
  inline void clear_has_offlinetime();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_sex();
  inline void clear_has_sex();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int64 offlinetime_;
  ::std::string* name_;
  ::google::protobuf::int32 sex_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto();

  void InitAsDefaultInstance();
  static MarryOtherInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReturnOpenHaveMarryUI : public ::google::protobuf::Message {
 public:
  ReturnOpenHaveMarryUI();
  virtual ~ReturnOpenHaveMarryUI();

  ReturnOpenHaveMarryUI(const ReturnOpenHaveMarryUI& from);

  inline ReturnOpenHaveMarryUI& operator=(const ReturnOpenHaveMarryUI& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReturnOpenHaveMarryUI& default_instance();

  void Swap(ReturnOpenHaveMarryUI* other);

  // implements Message ----------------------------------------------

  ReturnOpenHaveMarryUI* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReturnOpenHaveMarryUI& from);
  void MergeFrom(const ReturnOpenHaveMarryUI& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 receiveInfo = 1;
  inline bool has_receiveinfo() const;
  inline void clear_receiveinfo();
  static const int kReceiveInfoFieldNumber = 1;
  inline ::google::protobuf::int32 receiveinfo() const;
  inline void set_receiveinfo(::google::protobuf::int32 value);

  // optional int64 marryTime = 2;
  inline bool has_marrytime() const;
  inline void clear_marrytime();
  static const int kMarryTimeFieldNumber = 2;
  inline ::google::protobuf::int64 marrytime() const;
  inline void set_marrytime(::google::protobuf::int64 value);

  // optional int64 proposeID = 3;
  inline bool has_proposeid() const;
  inline void clear_proposeid();
  static const int kProposeIDFieldNumber = 3;
  inline ::google::protobuf::int64 proposeid() const;
  inline void set_proposeid(::google::protobuf::int64 value);

  // optional .MarryUI.MarryOtherInfo otherInfo = 4;
  inline bool has_otherinfo() const;
  inline void clear_otherinfo();
  static const int kOtherInfoFieldNumber = 4;
  inline const ::MarryUI::MarryOtherInfo& otherinfo() const;
  inline ::MarryUI::MarryOtherInfo* mutable_otherinfo();
  inline ::MarryUI::MarryOtherInfo* release_otherinfo();
  inline void set_allocated_otherinfo(::MarryUI::MarryOtherInfo* otherinfo);

  // @@protoc_insertion_point(class_scope:MarryUI.ReturnOpenHaveMarryUI)
 private:
  inline void set_has_receiveinfo();
  inline void clear_has_receiveinfo();
  inline void set_has_marrytime();
  inline void clear_has_marrytime();
  inline void set_has_proposeid();
  inline void clear_has_proposeid();
  inline void set_has_otherinfo();
  inline void clear_has_otherinfo();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marrytime_;
  ::google::protobuf::int64 proposeid_;
  ::MarryUI::MarryOtherInfo* otherinfo_;
  ::google::protobuf::int32 receiveinfo_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto();

  void InitAsDefaultInstance();
  static ReturnOpenHaveMarryUI* default_instance_;
};
// -------------------------------------------------------------------

class NoticeRequestMarry : public ::google::protobuf::Message {
 public:
  NoticeRequestMarry();
  virtual ~NoticeRequestMarry();

  NoticeRequestMarry(const NoticeRequestMarry& from);

  inline NoticeRequestMarry& operator=(const NoticeRequestMarry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const NoticeRequestMarry& default_instance();

  void Swap(NoticeRequestMarry* other);

  // implements Message ----------------------------------------------

  NoticeRequestMarry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const NoticeRequestMarry& from);
  void MergeFrom(const NoticeRequestMarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:MarryUI.NoticeRequestMarry)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto();

  void InitAsDefaultInstance();
  static NoticeRequestMarry* default_instance_;
};
// -------------------------------------------------------------------

class ResultRequestMarry : public ::google::protobuf::Message {
 public:
  ResultRequestMarry();
  virtual ~ResultRequestMarry();

  ResultRequestMarry(const ResultRequestMarry& from);

  inline ResultRequestMarry& operator=(const ResultRequestMarry& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ResultRequestMarry& default_instance();

  void Swap(ResultRequestMarry* other);

  // implements Message ----------------------------------------------

  ResultRequestMarry* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ResultRequestMarry& from);
  void MergeFrom(const ResultRequestMarry& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional bool isAgree = 2;
  inline bool has_isagree() const;
  inline void clear_isagree();
  static const int kIsAgreeFieldNumber = 2;
  inline bool isagree() const;
  inline void set_isagree(bool value);

  // @@protoc_insertion_point(class_scope:MarryUI.ResultRequestMarry)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_isagree();
  inline void clear_has_isagree();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  bool isagree_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto();

  void InitAsDefaultInstance();
  static ResultRequestMarry* default_instance_;
};
// -------------------------------------------------------------------

class GiveFlower : public ::google::protobuf::Message {
 public:
  GiveFlower();
  virtual ~GiveFlower();

  GiveFlower(const GiveFlower& from);

  inline GiveFlower& operator=(const GiveFlower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GiveFlower& default_instance();

  void Swap(GiveFlower* other);

  // implements Message ----------------------------------------------

  GiveFlower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GiveFlower& from);
  void MergeFrom(const GiveFlower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 playerID = 1;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 1;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional int32 itemID = 2;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 2;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryUI.GiveFlower)
 private:
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_itemid();
  inline void clear_has_itemid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int32 itemid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto();

  void InitAsDefaultInstance();
  static GiveFlower* default_instance_;
};
// -------------------------------------------------------------------

class ReceiveFlower : public ::google::protobuf::Message {
 public:
  ReceiveFlower();
  virtual ~ReceiveFlower();

  ReceiveFlower(const ReceiveFlower& from);

  inline ReceiveFlower& operator=(const ReceiveFlower& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReceiveFlower& default_instance();

  void Swap(ReceiveFlower* other);

  // implements Message ----------------------------------------------

  ReceiveFlower* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReceiveFlower& from);
  void MergeFrom(const ReceiveFlower& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 vipLevel = 1;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 1;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional bytes name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const void* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 itemID = 3;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 3;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int64 playerID = 4;
  inline bool has_playerid() const;
  inline void clear_playerid();
  static const int kPlayerIDFieldNumber = 4;
  inline ::google::protobuf::int64 playerid() const;
  inline void set_playerid(::google::protobuf::int64 value);

  // optional int64 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MarryUI.ReceiveFlower)
 private:
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_playerid();
  inline void clear_has_playerid();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* name_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int64 playerid_;
  ::google::protobuf::int64 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto();

  void InitAsDefaultInstance();
  static ReceiveFlower* default_instance_;
};
// -------------------------------------------------------------------

class RingInfo : public ::google::protobuf::Message {
 public:
  RingInfo();
  virtual ~RingInfo();

  RingInfo(const RingInfo& from);

  inline RingInfo& operator=(const RingInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RingInfo& default_instance();

  void Swap(RingInfo* other);

  // implements Message ----------------------------------------------

  RingInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RingInfo& from);
  void MergeFrom(const RingInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 ID = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIDFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 currentExp = 2;
  inline bool has_currentexp() const;
  inline void clear_currentexp();
  static const int kCurrentExpFieldNumber = 2;
  inline ::google::protobuf::int32 currentexp() const;
  inline void set_currentexp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryUI.RingInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_currentexp();
  inline void clear_has_currentexp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 currentexp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto();

  void InitAsDefaultInstance();
  static RingInfo* default_instance_;
};
// -------------------------------------------------------------------

class RequestAdvanceMarryRing : public ::google::protobuf::Message {
 public:
  RequestAdvanceMarryRing();
  virtual ~RequestAdvanceMarryRing();

  RequestAdvanceMarryRing(const RequestAdvanceMarryRing& from);

  inline RequestAdvanceMarryRing& operator=(const RequestAdvanceMarryRing& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RequestAdvanceMarryRing& default_instance();

  void Swap(RequestAdvanceMarryRing* other);

  // implements Message ----------------------------------------------

  RequestAdvanceMarryRing* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RequestAdvanceMarryRing& from);
  void MergeFrom(const RequestAdvanceMarryRing& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bool isAutoBuy = 2;
  inline bool has_isautobuy() const;
  inline void clear_isautobuy();
  static const int kIsAutoBuyFieldNumber = 2;
  inline bool isautobuy() const;
  inline void set_isautobuy(bool value);

  // optional int32 id = 3;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 3;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryUI.RequestAdvanceMarryRing)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_isautobuy();
  inline void clear_has_isautobuy();
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  bool isautobuy_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto();

  void InitAsDefaultInstance();
  static RequestAdvanceMarryRing* default_instance_;
};
// -------------------------------------------------------------------

class MarryCritType : public ::google::protobuf::Message {
 public:
  MarryCritType();
  virtual ~MarryCritType();

  MarryCritType(const MarryCritType& from);

  inline MarryCritType& operator=(const MarryCritType& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarryCritType& default_instance();

  void Swap(MarryCritType* other);

  // implements Message ----------------------------------------------

  MarryCritType* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarryCritType& from);
  void MergeFrom(const MarryCritType& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 critType = 1;
  inline bool has_crittype() const;
  inline void clear_crittype();
  static const int kCritTypeFieldNumber = 1;
  inline ::google::protobuf::int32 crittype() const;
  inline void set_crittype(::google::protobuf::int32 value);

  // optional int32 counts = 2;
  inline bool has_counts() const;
  inline void clear_counts();
  static const int kCountsFieldNumber = 2;
  inline ::google::protobuf::int32 counts() const;
  inline void set_counts(::google::protobuf::int32 value);

  // optional int32 exp = 3;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 3;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryUI.MarryCritType)
 private:
  inline void set_has_crittype();
  inline void clear_has_crittype();
  inline void set_has_counts();
  inline void clear_has_counts();
  inline void set_has_exp();
  inline void clear_has_exp();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 crittype_;
  ::google::protobuf::int32 counts_;
  ::google::protobuf::int32 exp_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto();

  void InitAsDefaultInstance();
  static MarryCritType* default_instance_;
};
// -------------------------------------------------------------------

class MarryItemList : public ::google::protobuf::Message {
 public:
  MarryItemList();
  virtual ~MarryItemList();

  MarryItemList(const MarryItemList& from);

  inline MarryItemList& operator=(const MarryItemList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarryItemList& default_instance();

  void Swap(MarryItemList* other);

  // implements Message ----------------------------------------------

  MarryItemList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarryItemList& from);
  void MergeFrom(const MarryItemList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 itemID = 1;
  inline bool has_itemid() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 1;
  inline ::google::protobuf::int32 itemid() const;
  inline void set_itemid(::google::protobuf::int32 value);

  // optional int32 counts = 2;
  inline bool has_counts() const;
  inline void clear_counts();
  static const int kCountsFieldNumber = 2;
  inline ::google::protobuf::int32 counts() const;
  inline void set_counts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryUI.MarryItemList)
 private:
  inline void set_has_itemid();
  inline void clear_has_itemid();
  inline void set_has_counts();
  inline void clear_has_counts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 itemid_;
  ::google::protobuf::int32 counts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto();

  void InitAsDefaultInstance();
  static MarryItemList* default_instance_;
};
// -------------------------------------------------------------------

class UpMarryStepReturn : public ::google::protobuf::Message {
 public:
  UpMarryStepReturn();
  virtual ~UpMarryStepReturn();

  UpMarryStepReturn(const UpMarryStepReturn& from);

  inline UpMarryStepReturn& operator=(const UpMarryStepReturn& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpMarryStepReturn& default_instance();

  void Swap(UpMarryStepReturn* other);

  // implements Message ----------------------------------------------

  UpMarryStepReturn* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpMarryStepReturn& from);
  void MergeFrom(const UpMarryStepReturn& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int32 id = 2;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 2;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 currentExp = 3;
  inline bool has_currentexp() const;
  inline void clear_currentexp();
  static const int kCurrentExpFieldNumber = 3;
  inline ::google::protobuf::int32 currentexp() const;
  inline void set_currentexp(::google::protobuf::int32 value);

  // optional int32 addExp = 4;
  inline bool has_addexp() const;
  inline void clear_addexp();
  static const int kAddExpFieldNumber = 4;
  inline ::google::protobuf::int32 addexp() const;
  inline void set_addexp(::google::protobuf::int32 value);

  // repeated .MarryUI.MarryCritType critTypeList = 5;
  inline int crittypelist_size() const;
  inline void clear_crittypelist();
  static const int kCritTypeListFieldNumber = 5;
  inline const ::MarryUI::MarryCritType& crittypelist(int index) const;
  inline ::MarryUI::MarryCritType* mutable_crittypelist(int index);
  inline ::MarryUI::MarryCritType* add_crittypelist();
  inline const ::google::protobuf::RepeatedPtrField< ::MarryUI::MarryCritType >&
      crittypelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::MarryUI::MarryCritType >*
      mutable_crittypelist();

  // optional int32 golden = 6;
  inline bool has_golden() const;
  inline void clear_golden();
  static const int kGoldenFieldNumber = 6;
  inline ::google::protobuf::int32 golden() const;
  inline void set_golden(::google::protobuf::int32 value);

  // optional int32 money = 7;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 7;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // repeated .MarryUI.MarryItemList itemList = 8;
  inline int itemlist_size() const;
  inline void clear_itemlist();
  static const int kItemListFieldNumber = 8;
  inline const ::MarryUI::MarryItemList& itemlist(int index) const;
  inline ::MarryUI::MarryItemList* mutable_itemlist(int index);
  inline ::MarryUI::MarryItemList* add_itemlist();
  inline const ::google::protobuf::RepeatedPtrField< ::MarryUI::MarryItemList >&
      itemlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::MarryUI::MarryItemList >*
      mutable_itemlist();

  // optional int32 error = 9;
  inline bool has_error() const;
  inline void clear_error();
  static const int kErrorFieldNumber = 9;
  inline ::google::protobuf::int32 error() const;
  inline void set_error(::google::protobuf::int32 value);

  // optional int32 stopError = 10;
  inline bool has_stoperror() const;
  inline void clear_stoperror();
  static const int kStopErrorFieldNumber = 10;
  inline ::google::protobuf::int32 stoperror() const;
  inline void set_stoperror(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryUI.UpMarryStepReturn)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_currentexp();
  inline void clear_has_currentexp();
  inline void set_has_addexp();
  inline void clear_has_addexp();
  inline void set_has_golden();
  inline void clear_has_golden();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_error();
  inline void clear_has_error();
  inline void set_has_stoperror();
  inline void clear_has_stoperror();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 currentexp_;
  ::google::protobuf::int32 addexp_;
  ::google::protobuf::RepeatedPtrField< ::MarryUI::MarryCritType > crittypelist_;
  ::google::protobuf::int32 golden_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::RepeatedPtrField< ::MarryUI::MarryItemList > itemlist_;
  ::google::protobuf::int32 error_;
  ::google::protobuf::int32 stoperror_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(10 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto();

  void InitAsDefaultInstance();
  static UpMarryStepReturn* default_instance_;
};
// -------------------------------------------------------------------

class UpdateMarryOtherInfo : public ::google::protobuf::Message {
 public:
  UpdateMarryOtherInfo();
  virtual ~UpdateMarryOtherInfo();

  UpdateMarryOtherInfo(const UpdateMarryOtherInfo& from);

  inline UpdateMarryOtherInfo& operator=(const UpdateMarryOtherInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UpdateMarryOtherInfo& default_instance();

  void Swap(UpdateMarryOtherInfo* other);

  // implements Message ----------------------------------------------

  UpdateMarryOtherInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UpdateMarryOtherInfo& from);
  void MergeFrom(const UpdateMarryOtherInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional int64 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int64 value() const;
  inline void set_value(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MarryUI.UpdateMarryOtherInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 value_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryUI_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryUI_2eproto();

  void InitAsDefaultInstance();
  static UpdateMarryOtherInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// MarryFriendInfo

// optional int64 playerID = 1;
inline bool MarryFriendInfo::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarryFriendInfo::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarryFriendInfo::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarryFriendInfo::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 MarryFriendInfo::playerid() const {
  return playerid_;
}
inline void MarryFriendInfo::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional int32 level = 2;
inline bool MarryFriendInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarryFriendInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarryFriendInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarryFriendInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 MarryFriendInfo::level() const {
  return level_;
}
inline void MarryFriendInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int32 fighting = 3;
inline bool MarryFriendInfo::has_fighting() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarryFriendInfo::set_has_fighting() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarryFriendInfo::clear_has_fighting() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarryFriendInfo::clear_fighting() {
  fighting_ = 0;
  clear_has_fighting();
}
inline ::google::protobuf::int32 MarryFriendInfo::fighting() const {
  return fighting_;
}
inline void MarryFriendInfo::set_fighting(::google::protobuf::int32 value) {
  set_has_fighting();
  fighting_ = value;
}

// optional bool isOnline = 4;
inline bool MarryFriendInfo::has_isonline() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarryFriendInfo::set_has_isonline() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarryFriendInfo::clear_has_isonline() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarryFriendInfo::clear_isonline() {
  isonline_ = false;
  clear_has_isonline();
}
inline bool MarryFriendInfo::isonline() const {
  return isonline_;
}
inline void MarryFriendInfo::set_isonline(bool value) {
  set_has_isonline();
  isonline_ = value;
}

// optional bytes name = 5;
inline bool MarryFriendInfo::has_name() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarryFriendInfo::set_has_name() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarryFriendInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarryFriendInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MarryFriendInfo::name() const {
  return *name_;
}
inline void MarryFriendInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MarryFriendInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MarryFriendInfo::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarryFriendInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MarryFriendInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarryFriendInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 profession = 6;
inline bool MarryFriendInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void MarryFriendInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000020u;
}
inline void MarryFriendInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void MarryFriendInfo::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 MarryFriendInfo::profession() const {
  return profession_;
}
inline void MarryFriendInfo::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional int32 sex = 7;
inline bool MarryFriendInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void MarryFriendInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000040u;
}
inline void MarryFriendInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void MarryFriendInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 MarryFriendInfo::sex() const {
  return sex_;
}
inline void MarryFriendInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 cohesion = 8;
inline bool MarryFriendInfo::has_cohesion() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void MarryFriendInfo::set_has_cohesion() {
  _has_bits_[0] |= 0x00000080u;
}
inline void MarryFriendInfo::clear_has_cohesion() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void MarryFriendInfo::clear_cohesion() {
  cohesion_ = 0;
  clear_has_cohesion();
}
inline ::google::protobuf::int32 MarryFriendInfo::cohesion() const {
  return cohesion_;
}
inline void MarryFriendInfo::set_cohesion(::google::protobuf::int32 value) {
  set_has_cohesion();
  cohesion_ = value;
}

// -------------------------------------------------------------------

// ReturnOpenNotMarryUI

// repeated .MarryUI.MarryFriendInfo friendInfoList = 1;
inline int ReturnOpenNotMarryUI::friendinfolist_size() const {
  return friendinfolist_.size();
}
inline void ReturnOpenNotMarryUI::clear_friendinfolist() {
  friendinfolist_.Clear();
}
inline const ::MarryUI::MarryFriendInfo& ReturnOpenNotMarryUI::friendinfolist(int index) const {
  return friendinfolist_.Get(index);
}
inline ::MarryUI::MarryFriendInfo* ReturnOpenNotMarryUI::mutable_friendinfolist(int index) {
  return friendinfolist_.Mutable(index);
}
inline ::MarryUI::MarryFriendInfo* ReturnOpenNotMarryUI::add_friendinfolist() {
  return friendinfolist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MarryUI::MarryFriendInfo >&
ReturnOpenNotMarryUI::friendinfolist() const {
  return friendinfolist_;
}
inline ::google::protobuf::RepeatedPtrField< ::MarryUI::MarryFriendInfo >*
ReturnOpenNotMarryUI::mutable_friendinfolist() {
  return &friendinfolist_;
}

// -------------------------------------------------------------------

// MarryOtherInfo

// optional int32 profession = 1;
inline bool MarryOtherInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarryOtherInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarryOtherInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarryOtherInfo::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 MarryOtherInfo::profession() const {
  return profession_;
}
inline void MarryOtherInfo::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional int32 level = 2;
inline bool MarryOtherInfo::has_level() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarryOtherInfo::set_has_level() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarryOtherInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarryOtherInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 MarryOtherInfo::level() const {
  return level_;
}
inline void MarryOtherInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// optional int64 offlineTime = 3;
inline bool MarryOtherInfo::has_offlinetime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarryOtherInfo::set_has_offlinetime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarryOtherInfo::clear_has_offlinetime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarryOtherInfo::clear_offlinetime() {
  offlinetime_ = GOOGLE_LONGLONG(0);
  clear_has_offlinetime();
}
inline ::google::protobuf::int64 MarryOtherInfo::offlinetime() const {
  return offlinetime_;
}
inline void MarryOtherInfo::set_offlinetime(::google::protobuf::int64 value) {
  set_has_offlinetime();
  offlinetime_ = value;
}

// optional bytes name = 4;
inline bool MarryOtherInfo::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarryOtherInfo::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarryOtherInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarryOtherInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& MarryOtherInfo::name() const {
  return *name_;
}
inline void MarryOtherInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MarryOtherInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void MarryOtherInfo::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* MarryOtherInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* MarryOtherInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void MarryOtherInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 sex = 5;
inline bool MarryOtherInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void MarryOtherInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000010u;
}
inline void MarryOtherInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void MarryOtherInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 MarryOtherInfo::sex() const {
  return sex_;
}
inline void MarryOtherInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// -------------------------------------------------------------------

// ReturnOpenHaveMarryUI

// optional int32 receiveInfo = 1;
inline bool ReturnOpenHaveMarryUI::has_receiveinfo() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReturnOpenHaveMarryUI::set_has_receiveinfo() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReturnOpenHaveMarryUI::clear_has_receiveinfo() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReturnOpenHaveMarryUI::clear_receiveinfo() {
  receiveinfo_ = 0;
  clear_has_receiveinfo();
}
inline ::google::protobuf::int32 ReturnOpenHaveMarryUI::receiveinfo() const {
  return receiveinfo_;
}
inline void ReturnOpenHaveMarryUI::set_receiveinfo(::google::protobuf::int32 value) {
  set_has_receiveinfo();
  receiveinfo_ = value;
}

// optional int64 marryTime = 2;
inline bool ReturnOpenHaveMarryUI::has_marrytime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReturnOpenHaveMarryUI::set_has_marrytime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReturnOpenHaveMarryUI::clear_has_marrytime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReturnOpenHaveMarryUI::clear_marrytime() {
  marrytime_ = GOOGLE_LONGLONG(0);
  clear_has_marrytime();
}
inline ::google::protobuf::int64 ReturnOpenHaveMarryUI::marrytime() const {
  return marrytime_;
}
inline void ReturnOpenHaveMarryUI::set_marrytime(::google::protobuf::int64 value) {
  set_has_marrytime();
  marrytime_ = value;
}

// optional int64 proposeID = 3;
inline bool ReturnOpenHaveMarryUI::has_proposeid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReturnOpenHaveMarryUI::set_has_proposeid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReturnOpenHaveMarryUI::clear_has_proposeid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReturnOpenHaveMarryUI::clear_proposeid() {
  proposeid_ = GOOGLE_LONGLONG(0);
  clear_has_proposeid();
}
inline ::google::protobuf::int64 ReturnOpenHaveMarryUI::proposeid() const {
  return proposeid_;
}
inline void ReturnOpenHaveMarryUI::set_proposeid(::google::protobuf::int64 value) {
  set_has_proposeid();
  proposeid_ = value;
}

// optional .MarryUI.MarryOtherInfo otherInfo = 4;
inline bool ReturnOpenHaveMarryUI::has_otherinfo() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReturnOpenHaveMarryUI::set_has_otherinfo() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReturnOpenHaveMarryUI::clear_has_otherinfo() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReturnOpenHaveMarryUI::clear_otherinfo() {
  if (otherinfo_ != NULL) otherinfo_->::MarryUI::MarryOtherInfo::Clear();
  clear_has_otherinfo();
}
inline const ::MarryUI::MarryOtherInfo& ReturnOpenHaveMarryUI::otherinfo() const {
  return otherinfo_ != NULL ? *otherinfo_ : *default_instance_->otherinfo_;
}
inline ::MarryUI::MarryOtherInfo* ReturnOpenHaveMarryUI::mutable_otherinfo() {
  set_has_otherinfo();
  if (otherinfo_ == NULL) otherinfo_ = new ::MarryUI::MarryOtherInfo;
  return otherinfo_;
}
inline ::MarryUI::MarryOtherInfo* ReturnOpenHaveMarryUI::release_otherinfo() {
  clear_has_otherinfo();
  ::MarryUI::MarryOtherInfo* temp = otherinfo_;
  otherinfo_ = NULL;
  return temp;
}
inline void ReturnOpenHaveMarryUI::set_allocated_otherinfo(::MarryUI::MarryOtherInfo* otherinfo) {
  delete otherinfo_;
  otherinfo_ = otherinfo;
  if (otherinfo) {
    set_has_otherinfo();
  } else {
    clear_has_otherinfo();
  }
}

// -------------------------------------------------------------------

// NoticeRequestMarry

// optional int64 playerID = 1;
inline bool NoticeRequestMarry::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void NoticeRequestMarry::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void NoticeRequestMarry::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void NoticeRequestMarry::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 NoticeRequestMarry::playerid() const {
  return playerid_;
}
inline void NoticeRequestMarry::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional bytes name = 2;
inline bool NoticeRequestMarry::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void NoticeRequestMarry::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void NoticeRequestMarry::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void NoticeRequestMarry::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& NoticeRequestMarry::name() const {
  return *name_;
}
inline void NoticeRequestMarry::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NoticeRequestMarry::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void NoticeRequestMarry::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* NoticeRequestMarry::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* NoticeRequestMarry::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void NoticeRequestMarry::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ResultRequestMarry

// optional int64 playerID = 1;
inline bool ResultRequestMarry::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ResultRequestMarry::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ResultRequestMarry::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ResultRequestMarry::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 ResultRequestMarry::playerid() const {
  return playerid_;
}
inline void ResultRequestMarry::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional bool isAgree = 2;
inline bool ResultRequestMarry::has_isagree() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ResultRequestMarry::set_has_isagree() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ResultRequestMarry::clear_has_isagree() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ResultRequestMarry::clear_isagree() {
  isagree_ = false;
  clear_has_isagree();
}
inline bool ResultRequestMarry::isagree() const {
  return isagree_;
}
inline void ResultRequestMarry::set_isagree(bool value) {
  set_has_isagree();
  isagree_ = value;
}

// -------------------------------------------------------------------

// GiveFlower

// optional int64 playerID = 1;
inline bool GiveFlower::has_playerid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GiveFlower::set_has_playerid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GiveFlower::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GiveFlower::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 GiveFlower::playerid() const {
  return playerid_;
}
inline void GiveFlower::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional int32 itemID = 2;
inline bool GiveFlower::has_itemid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GiveFlower::set_has_itemid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GiveFlower::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GiveFlower::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 GiveFlower::itemid() const {
  return itemid_;
}
inline void GiveFlower::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// -------------------------------------------------------------------

// ReceiveFlower

// optional int32 vipLevel = 1;
inline bool ReceiveFlower::has_viplevel() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReceiveFlower::set_has_viplevel() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReceiveFlower::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReceiveFlower::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 ReceiveFlower::viplevel() const {
  return viplevel_;
}
inline void ReceiveFlower::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional bytes name = 2;
inline bool ReceiveFlower::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ReceiveFlower::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ReceiveFlower::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ReceiveFlower::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ReceiveFlower::name() const {
  return *name_;
}
inline void ReceiveFlower::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReceiveFlower::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ReceiveFlower::set_name(const void* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ReceiveFlower::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ReceiveFlower::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ReceiveFlower::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 itemID = 3;
inline bool ReceiveFlower::has_itemid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ReceiveFlower::set_has_itemid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ReceiveFlower::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ReceiveFlower::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 ReceiveFlower::itemid() const {
  return itemid_;
}
inline void ReceiveFlower::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int64 playerID = 4;
inline bool ReceiveFlower::has_playerid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ReceiveFlower::set_has_playerid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ReceiveFlower::clear_has_playerid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ReceiveFlower::clear_playerid() {
  playerid_ = GOOGLE_LONGLONG(0);
  clear_has_playerid();
}
inline ::google::protobuf::int64 ReceiveFlower::playerid() const {
  return playerid_;
}
inline void ReceiveFlower::set_playerid(::google::protobuf::int64 value) {
  set_has_playerid();
  playerid_ = value;
}

// optional int64 time = 5;
inline bool ReceiveFlower::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ReceiveFlower::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ReceiveFlower::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ReceiveFlower::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 ReceiveFlower::time() const {
  return time_;
}
inline void ReceiveFlower::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// RingInfo

// optional int32 ID = 1;
inline bool RingInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RingInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RingInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RingInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RingInfo::id() const {
  return id_;
}
inline void RingInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 currentExp = 2;
inline bool RingInfo::has_currentexp() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RingInfo::set_has_currentexp() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RingInfo::clear_has_currentexp() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RingInfo::clear_currentexp() {
  currentexp_ = 0;
  clear_has_currentexp();
}
inline ::google::protobuf::int32 RingInfo::currentexp() const {
  return currentexp_;
}
inline void RingInfo::set_currentexp(::google::protobuf::int32 value) {
  set_has_currentexp();
  currentexp_ = value;
}

// -------------------------------------------------------------------

// RequestAdvanceMarryRing

// optional int32 type = 1;
inline bool RequestAdvanceMarryRing::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RequestAdvanceMarryRing::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RequestAdvanceMarryRing::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RequestAdvanceMarryRing::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RequestAdvanceMarryRing::type() const {
  return type_;
}
inline void RequestAdvanceMarryRing::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional bool isAutoBuy = 2;
inline bool RequestAdvanceMarryRing::has_isautobuy() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RequestAdvanceMarryRing::set_has_isautobuy() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RequestAdvanceMarryRing::clear_has_isautobuy() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RequestAdvanceMarryRing::clear_isautobuy() {
  isautobuy_ = false;
  clear_has_isautobuy();
}
inline bool RequestAdvanceMarryRing::isautobuy() const {
  return isautobuy_;
}
inline void RequestAdvanceMarryRing::set_isautobuy(bool value) {
  set_has_isautobuy();
  isautobuy_ = value;
}

// optional int32 id = 3;
inline bool RequestAdvanceMarryRing::has_id() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RequestAdvanceMarryRing::set_has_id() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RequestAdvanceMarryRing::clear_has_id() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RequestAdvanceMarryRing::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 RequestAdvanceMarryRing::id() const {
  return id_;
}
inline void RequestAdvanceMarryRing::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// MarryCritType

// optional int32 critType = 1;
inline bool MarryCritType::has_crittype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarryCritType::set_has_crittype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarryCritType::clear_has_crittype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarryCritType::clear_crittype() {
  crittype_ = 0;
  clear_has_crittype();
}
inline ::google::protobuf::int32 MarryCritType::crittype() const {
  return crittype_;
}
inline void MarryCritType::set_crittype(::google::protobuf::int32 value) {
  set_has_crittype();
  crittype_ = value;
}

// optional int32 counts = 2;
inline bool MarryCritType::has_counts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarryCritType::set_has_counts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarryCritType::clear_has_counts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarryCritType::clear_counts() {
  counts_ = 0;
  clear_has_counts();
}
inline ::google::protobuf::int32 MarryCritType::counts() const {
  return counts_;
}
inline void MarryCritType::set_counts(::google::protobuf::int32 value) {
  set_has_counts();
  counts_ = value;
}

// optional int32 exp = 3;
inline bool MarryCritType::has_exp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarryCritType::set_has_exp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarryCritType::clear_has_exp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarryCritType::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 MarryCritType::exp() const {
  return exp_;
}
inline void MarryCritType::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// -------------------------------------------------------------------

// MarryItemList

// optional int32 itemID = 1;
inline bool MarryItemList::has_itemid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarryItemList::set_has_itemid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarryItemList::clear_has_itemid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarryItemList::clear_itemid() {
  itemid_ = 0;
  clear_has_itemid();
}
inline ::google::protobuf::int32 MarryItemList::itemid() const {
  return itemid_;
}
inline void MarryItemList::set_itemid(::google::protobuf::int32 value) {
  set_has_itemid();
  itemid_ = value;
}

// optional int32 counts = 2;
inline bool MarryItemList::has_counts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarryItemList::set_has_counts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarryItemList::clear_has_counts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarryItemList::clear_counts() {
  counts_ = 0;
  clear_has_counts();
}
inline ::google::protobuf::int32 MarryItemList::counts() const {
  return counts_;
}
inline void MarryItemList::set_counts(::google::protobuf::int32 value) {
  set_has_counts();
  counts_ = value;
}

// -------------------------------------------------------------------

// UpMarryStepReturn

// optional int32 type = 1;
inline bool UpMarryStepReturn::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpMarryStepReturn::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpMarryStepReturn::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpMarryStepReturn::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UpMarryStepReturn::type() const {
  return type_;
}
inline void UpMarryStepReturn::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int32 id = 2;
inline bool UpMarryStepReturn::has_id() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpMarryStepReturn::set_has_id() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpMarryStepReturn::clear_has_id() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpMarryStepReturn::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 UpMarryStepReturn::id() const {
  return id_;
}
inline void UpMarryStepReturn::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 currentExp = 3;
inline bool UpMarryStepReturn::has_currentexp() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void UpMarryStepReturn::set_has_currentexp() {
  _has_bits_[0] |= 0x00000004u;
}
inline void UpMarryStepReturn::clear_has_currentexp() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void UpMarryStepReturn::clear_currentexp() {
  currentexp_ = 0;
  clear_has_currentexp();
}
inline ::google::protobuf::int32 UpMarryStepReturn::currentexp() const {
  return currentexp_;
}
inline void UpMarryStepReturn::set_currentexp(::google::protobuf::int32 value) {
  set_has_currentexp();
  currentexp_ = value;
}

// optional int32 addExp = 4;
inline bool UpMarryStepReturn::has_addexp() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void UpMarryStepReturn::set_has_addexp() {
  _has_bits_[0] |= 0x00000008u;
}
inline void UpMarryStepReturn::clear_has_addexp() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void UpMarryStepReturn::clear_addexp() {
  addexp_ = 0;
  clear_has_addexp();
}
inline ::google::protobuf::int32 UpMarryStepReturn::addexp() const {
  return addexp_;
}
inline void UpMarryStepReturn::set_addexp(::google::protobuf::int32 value) {
  set_has_addexp();
  addexp_ = value;
}

// repeated .MarryUI.MarryCritType critTypeList = 5;
inline int UpMarryStepReturn::crittypelist_size() const {
  return crittypelist_.size();
}
inline void UpMarryStepReturn::clear_crittypelist() {
  crittypelist_.Clear();
}
inline const ::MarryUI::MarryCritType& UpMarryStepReturn::crittypelist(int index) const {
  return crittypelist_.Get(index);
}
inline ::MarryUI::MarryCritType* UpMarryStepReturn::mutable_crittypelist(int index) {
  return crittypelist_.Mutable(index);
}
inline ::MarryUI::MarryCritType* UpMarryStepReturn::add_crittypelist() {
  return crittypelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MarryUI::MarryCritType >&
UpMarryStepReturn::crittypelist() const {
  return crittypelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::MarryUI::MarryCritType >*
UpMarryStepReturn::mutable_crittypelist() {
  return &crittypelist_;
}

// optional int32 golden = 6;
inline bool UpMarryStepReturn::has_golden() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void UpMarryStepReturn::set_has_golden() {
  _has_bits_[0] |= 0x00000020u;
}
inline void UpMarryStepReturn::clear_has_golden() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void UpMarryStepReturn::clear_golden() {
  golden_ = 0;
  clear_has_golden();
}
inline ::google::protobuf::int32 UpMarryStepReturn::golden() const {
  return golden_;
}
inline void UpMarryStepReturn::set_golden(::google::protobuf::int32 value) {
  set_has_golden();
  golden_ = value;
}

// optional int32 money = 7;
inline bool UpMarryStepReturn::has_money() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void UpMarryStepReturn::set_has_money() {
  _has_bits_[0] |= 0x00000040u;
}
inline void UpMarryStepReturn::clear_has_money() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void UpMarryStepReturn::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 UpMarryStepReturn::money() const {
  return money_;
}
inline void UpMarryStepReturn::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// repeated .MarryUI.MarryItemList itemList = 8;
inline int UpMarryStepReturn::itemlist_size() const {
  return itemlist_.size();
}
inline void UpMarryStepReturn::clear_itemlist() {
  itemlist_.Clear();
}
inline const ::MarryUI::MarryItemList& UpMarryStepReturn::itemlist(int index) const {
  return itemlist_.Get(index);
}
inline ::MarryUI::MarryItemList* UpMarryStepReturn::mutable_itemlist(int index) {
  return itemlist_.Mutable(index);
}
inline ::MarryUI::MarryItemList* UpMarryStepReturn::add_itemlist() {
  return itemlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MarryUI::MarryItemList >&
UpMarryStepReturn::itemlist() const {
  return itemlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::MarryUI::MarryItemList >*
UpMarryStepReturn::mutable_itemlist() {
  return &itemlist_;
}

// optional int32 error = 9;
inline bool UpMarryStepReturn::has_error() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void UpMarryStepReturn::set_has_error() {
  _has_bits_[0] |= 0x00000100u;
}
inline void UpMarryStepReturn::clear_has_error() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void UpMarryStepReturn::clear_error() {
  error_ = 0;
  clear_has_error();
}
inline ::google::protobuf::int32 UpMarryStepReturn::error() const {
  return error_;
}
inline void UpMarryStepReturn::set_error(::google::protobuf::int32 value) {
  set_has_error();
  error_ = value;
}

// optional int32 stopError = 10;
inline bool UpMarryStepReturn::has_stoperror() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void UpMarryStepReturn::set_has_stoperror() {
  _has_bits_[0] |= 0x00000200u;
}
inline void UpMarryStepReturn::clear_has_stoperror() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void UpMarryStepReturn::clear_stoperror() {
  stoperror_ = 0;
  clear_has_stoperror();
}
inline ::google::protobuf::int32 UpMarryStepReturn::stoperror() const {
  return stoperror_;
}
inline void UpMarryStepReturn::set_stoperror(::google::protobuf::int32 value) {
  set_has_stoperror();
  stoperror_ = value;
}

// -------------------------------------------------------------------

// UpdateMarryOtherInfo

// optional int32 type = 1;
inline bool UpdateMarryOtherInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UpdateMarryOtherInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UpdateMarryOtherInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UpdateMarryOtherInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UpdateMarryOtherInfo::type() const {
  return type_;
}
inline void UpdateMarryOtherInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional int64 value = 2;
inline bool UpdateMarryOtherInfo::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UpdateMarryOtherInfo::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UpdateMarryOtherInfo::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UpdateMarryOtherInfo::clear_value() {
  value_ = GOOGLE_LONGLONG(0);
  clear_has_value();
}
inline ::google::protobuf::int64 UpdateMarryOtherInfo::value() const {
  return value_;
}
inline void UpdateMarryOtherInfo::set_value(::google::protobuf::int64 value) {
  set_has_value();
  value_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MarryUI

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Marry_2fMarryUI_2eproto__INCLUDED
