// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/Monitor.proto

#ifndef PROTOBUF_CharLogin_2fMonitor_2eproto__INCLUDED
#define PROTOBUF_CharLogin_2fMonitor_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CharLogin/PlayerInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace Monitor {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CharLogin_2fMonitor_2eproto();
void protobuf_AssignDesc_CharLogin_2fMonitor_2eproto();
void protobuf_ShutdownFile_CharLogin_2fMonitor_2eproto();

class SaveMonitor;
class ToGMSaveMonitor;

// ===================================================================

class SaveMonitor : public ::google::protobuf::Message {
 public:
  SaveMonitor();
  virtual ~SaveMonitor();

  SaveMonitor(const SaveMonitor& from);

  inline SaveMonitor& operator=(const SaveMonitor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SaveMonitor& default_instance();

  void Swap(SaveMonitor* other);

  // implements Message ----------------------------------------------

  SaveMonitor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SaveMonitor& from);
  void MergeFrom(const SaveMonitor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .PlayerInfo.MonitorInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::PlayerInfo::MonitorInfo& info() const;
  inline ::PlayerInfo::MonitorInfo* mutable_info();
  inline ::PlayerInfo::MonitorInfo* release_info();
  inline void set_allocated_info(::PlayerInfo::MonitorInfo* info);

  // @@protoc_insertion_point(class_scope:Monitor.SaveMonitor)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::PlayerInfo::MonitorInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fMonitor_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fMonitor_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fMonitor_2eproto();

  void InitAsDefaultInstance();
  static SaveMonitor* default_instance_;
};
// -------------------------------------------------------------------

class ToGMSaveMonitor : public ::google::protobuf::Message {
 public:
  ToGMSaveMonitor();
  virtual ~ToGMSaveMonitor();

  ToGMSaveMonitor(const ToGMSaveMonitor& from);

  inline ToGMSaveMonitor& operator=(const ToGMSaveMonitor& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToGMSaveMonitor& default_instance();

  void Swap(ToGMSaveMonitor* other);

  // implements Message ----------------------------------------------

  ToGMSaveMonitor* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToGMSaveMonitor& from);
  void MergeFrom(const ToGMSaveMonitor& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional .Monitor.SaveMonitor monitor = 2;
  inline bool has_monitor() const;
  inline void clear_monitor();
  static const int kMonitorFieldNumber = 2;
  inline const ::Monitor::SaveMonitor& monitor() const;
  inline ::Monitor::SaveMonitor* mutable_monitor();
  inline ::Monitor::SaveMonitor* release_monitor();
  inline void set_allocated_monitor(::Monitor::SaveMonitor* monitor);

  // @@protoc_insertion_point(class_scope:Monitor.ToGMSaveMonitor)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_monitor();
  inline void clear_has_monitor();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::Monitor::SaveMonitor* monitor_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fMonitor_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fMonitor_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fMonitor_2eproto();

  void InitAsDefaultInstance();
  static ToGMSaveMonitor* default_instance_;
};
// ===================================================================


// ===================================================================

// SaveMonitor

// optional .PlayerInfo.MonitorInfo info = 1;
inline bool SaveMonitor::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SaveMonitor::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SaveMonitor::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SaveMonitor::clear_info() {
  if (info_ != NULL) info_->::PlayerInfo::MonitorInfo::Clear();
  clear_has_info();
}
inline const ::PlayerInfo::MonitorInfo& SaveMonitor::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::PlayerInfo::MonitorInfo* SaveMonitor::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::PlayerInfo::MonitorInfo;
  return info_;
}
inline ::PlayerInfo::MonitorInfo* SaveMonitor::release_info() {
  clear_has_info();
  ::PlayerInfo::MonitorInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void SaveMonitor::set_allocated_info(::PlayerInfo::MonitorInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// ToGMSaveMonitor

// required int64 charid = 1;
inline bool ToGMSaveMonitor::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToGMSaveMonitor::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToGMSaveMonitor::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToGMSaveMonitor::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 ToGMSaveMonitor::charid() const {
  return charid_;
}
inline void ToGMSaveMonitor::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional .Monitor.SaveMonitor monitor = 2;
inline bool ToGMSaveMonitor::has_monitor() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToGMSaveMonitor::set_has_monitor() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToGMSaveMonitor::clear_has_monitor() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToGMSaveMonitor::clear_monitor() {
  if (monitor_ != NULL) monitor_->::Monitor::SaveMonitor::Clear();
  clear_has_monitor();
}
inline const ::Monitor::SaveMonitor& ToGMSaveMonitor::monitor() const {
  return monitor_ != NULL ? *monitor_ : *default_instance_->monitor_;
}
inline ::Monitor::SaveMonitor* ToGMSaveMonitor::mutable_monitor() {
  set_has_monitor();
  if (monitor_ == NULL) monitor_ = new ::Monitor::SaveMonitor;
  return monitor_;
}
inline ::Monitor::SaveMonitor* ToGMSaveMonitor::release_monitor() {
  clear_has_monitor();
  ::Monitor::SaveMonitor* temp = monitor_;
  monitor_ = NULL;
  return temp;
}
inline void ToGMSaveMonitor::set_allocated_monitor(::Monitor::SaveMonitor* monitor) {
  delete monitor_;
  monitor_ = monitor;
  if (monitor) {
    set_has_monitor();
  } else {
    clear_has_monitor();
  }
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Monitor

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CharLogin_2fMonitor_2eproto__INCLUDED
