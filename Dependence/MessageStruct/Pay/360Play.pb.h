// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pay/360Play.proto

#ifndef PROTOBUF_Pay_2f360Play_2eproto__INCLUDED
#define PROTOBUF_Pay_2f360Play_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Pay360PlayInfo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Pay_2f360Play_2eproto();
void protobuf_AssignDesc_Pay_2f360Play_2eproto();
void protobuf_ShutdownFile_Pay_2f360Play_2eproto();

class From360PlayReqAskPayInfo;
class To360PlayReqAskPayInfo;
class Sys360PlayPayInfo;

// ===================================================================

class From360PlayReqAskPayInfo : public ::google::protobuf::Message {
 public:
  From360PlayReqAskPayInfo();
  virtual ~From360PlayReqAskPayInfo();

  From360PlayReqAskPayInfo(const From360PlayReqAskPayInfo& from);

  inline From360PlayReqAskPayInfo& operator=(const From360PlayReqAskPayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const From360PlayReqAskPayInfo& default_instance();

  void Swap(From360PlayReqAskPayInfo* other);

  // implements Message ----------------------------------------------

  From360PlayReqAskPayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const From360PlayReqAskPayInfo& from);
  void MergeFrom(const From360PlayReqAskPayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string uid = 1;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 1;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional int64 roleid = 2;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 2;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional string rolename = 3;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRolenameFieldNumber = 3;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional string platform = 4;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 4;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional string gkey = 5;
  inline bool has_gkey() const;
  inline void clear_gkey();
  static const int kGkeyFieldNumber = 5;
  inline const ::std::string& gkey() const;
  inline void set_gkey(const ::std::string& value);
  inline void set_gkey(const char* value);
  inline void set_gkey(const char* value, size_t size);
  inline ::std::string* mutable_gkey();
  inline ::std::string* release_gkey();
  inline void set_allocated_gkey(::std::string* gkey);

  // optional int32 skey = 6;
  inline bool has_skey() const;
  inline void clear_skey();
  static const int kSkeyFieldNumber = 6;
  inline ::google::protobuf::int32 skey() const;
  inline void set_skey(::google::protobuf::int32 value);

  // optional string orderid = 7;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 7;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // optional int32 coins = 8;
  inline bool has_coins() const;
  inline void clear_coins();
  static const int kCoinsFieldNumber = 8;
  inline ::google::protobuf::int32 coins() const;
  inline void set_coins(::google::protobuf::int32 value);

  // optional int32 moneys = 9;
  inline bool has_moneys() const;
  inline void clear_moneys();
  static const int kMoneysFieldNumber = 9;
  inline ::google::protobuf::int32 moneys() const;
  inline void set_moneys(::google::protobuf::int32 value);

  // optional int64 time = 10;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 10;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional string sign = 11;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 11;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:Pay360PlayInfo.From360PlayReqAskPayInfo)
 private:
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_gkey();
  inline void clear_has_gkey();
  inline void set_has_skey();
  inline void clear_has_skey();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_coins();
  inline void clear_has_coins();
  inline void set_has_moneys();
  inline void clear_has_moneys();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::google::protobuf::int64 roleid_;
  ::std::string* rolename_;
  ::std::string* platform_;
  ::std::string* gkey_;
  ::std::string* orderid_;
  ::google::protobuf::int32 skey_;
  ::google::protobuf::int32 coins_;
  ::google::protobuf::int64 time_;
  ::std::string* sign_;
  ::google::protobuf::int32 moneys_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f360Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f360Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f360Play_2eproto();

  void InitAsDefaultInstance();
  static From360PlayReqAskPayInfo* default_instance_;
};
// -------------------------------------------------------------------

class To360PlayReqAskPayInfo : public ::google::protobuf::Message {
 public:
  To360PlayReqAskPayInfo();
  virtual ~To360PlayReqAskPayInfo();

  To360PlayReqAskPayInfo(const To360PlayReqAskPayInfo& from);

  inline To360PlayReqAskPayInfo& operator=(const To360PlayReqAskPayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const To360PlayReqAskPayInfo& default_instance();

  void Swap(To360PlayReqAskPayInfo* other);

  // implements Message ----------------------------------------------

  To360PlayReqAskPayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const To360PlayReqAskPayInfo& from);
  void MergeFrom(const To360PlayReqAskPayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional string uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional int64 roleid = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 3;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional string rolename = 4;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRolenameFieldNumber = 4;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional string platform = 5;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 5;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional string gkey = 6;
  inline bool has_gkey() const;
  inline void clear_gkey();
  static const int kGkeyFieldNumber = 6;
  inline const ::std::string& gkey() const;
  inline void set_gkey(const ::std::string& value);
  inline void set_gkey(const char* value);
  inline void set_gkey(const char* value, size_t size);
  inline ::std::string* mutable_gkey();
  inline ::std::string* release_gkey();
  inline void set_allocated_gkey(::std::string* gkey);

  // optional int32 skey = 7;
  inline bool has_skey() const;
  inline void clear_skey();
  static const int kSkeyFieldNumber = 7;
  inline ::google::protobuf::int32 skey() const;
  inline void set_skey(::google::protobuf::int32 value);

  // optional string orderid = 8;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 8;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // optional int32 coins = 9;
  inline bool has_coins() const;
  inline void clear_coins();
  static const int kCoinsFieldNumber = 9;
  inline ::google::protobuf::int32 coins() const;
  inline void set_coins(::google::protobuf::int32 value);

  // optional int32 moneys = 10;
  inline bool has_moneys() const;
  inline void clear_moneys();
  static const int kMoneysFieldNumber = 10;
  inline ::google::protobuf::int32 moneys() const;
  inline void set_moneys(::google::protobuf::int32 value);

  // optional int64 time = 11;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 11;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional string sign = 12;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 12;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // @@protoc_insertion_point(class_scope:Pay360PlayInfo.To360PlayReqAskPayInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_gkey();
  inline void clear_has_gkey();
  inline void set_has_skey();
  inline void clear_has_skey();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_coins();
  inline void clear_has_coins();
  inline void set_has_moneys();
  inline void clear_has_moneys();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sign();
  inline void clear_has_sign();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* uid_;
  ::google::protobuf::int64 roleid_;
  ::std::string* rolename_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 skey_;
  ::std::string* platform_;
  ::std::string* gkey_;
  ::std::string* orderid_;
  ::google::protobuf::int32 coins_;
  ::google::protobuf::int32 moneys_;
  ::google::protobuf::int64 time_;
  ::std::string* sign_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(12 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f360Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f360Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f360Play_2eproto();

  void InitAsDefaultInstance();
  static To360PlayReqAskPayInfo* default_instance_;
};
// -------------------------------------------------------------------

class Sys360PlayPayInfo : public ::google::protobuf::Message {
 public:
  Sys360PlayPayInfo();
  virtual ~Sys360PlayPayInfo();

  Sys360PlayPayInfo(const Sys360PlayPayInfo& from);

  inline Sys360PlayPayInfo& operator=(const Sys360PlayPayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sys360PlayPayInfo& default_instance();

  void Swap(Sys360PlayPayInfo* other);

  // implements Message ----------------------------------------------

  Sys360PlayPayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sys360PlayPayInfo& from);
  void MergeFrom(const Sys360PlayPayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional string uid = 2;
  inline bool has_uid() const;
  inline void clear_uid();
  static const int kUidFieldNumber = 2;
  inline const ::std::string& uid() const;
  inline void set_uid(const ::std::string& value);
  inline void set_uid(const char* value);
  inline void set_uid(const char* value, size_t size);
  inline ::std::string* mutable_uid();
  inline ::std::string* release_uid();
  inline void set_allocated_uid(::std::string* uid);

  // optional int64 roleid = 3;
  inline bool has_roleid() const;
  inline void clear_roleid();
  static const int kRoleidFieldNumber = 3;
  inline ::google::protobuf::int64 roleid() const;
  inline void set_roleid(::google::protobuf::int64 value);

  // optional string rolename = 4;
  inline bool has_rolename() const;
  inline void clear_rolename();
  static const int kRolenameFieldNumber = 4;
  inline const ::std::string& rolename() const;
  inline void set_rolename(const ::std::string& value);
  inline void set_rolename(const char* value);
  inline void set_rolename(const char* value, size_t size);
  inline ::std::string* mutable_rolename();
  inline ::std::string* release_rolename();
  inline void set_allocated_rolename(::std::string* rolename);

  // optional string platform = 5;
  inline bool has_platform() const;
  inline void clear_platform();
  static const int kPlatformFieldNumber = 5;
  inline const ::std::string& platform() const;
  inline void set_platform(const ::std::string& value);
  inline void set_platform(const char* value);
  inline void set_platform(const char* value, size_t size);
  inline ::std::string* mutable_platform();
  inline ::std::string* release_platform();
  inline void set_allocated_platform(::std::string* platform);

  // optional string gkey = 6;
  inline bool has_gkey() const;
  inline void clear_gkey();
  static const int kGkeyFieldNumber = 6;
  inline const ::std::string& gkey() const;
  inline void set_gkey(const ::std::string& value);
  inline void set_gkey(const char* value);
  inline void set_gkey(const char* value, size_t size);
  inline ::std::string* mutable_gkey();
  inline ::std::string* release_gkey();
  inline void set_allocated_gkey(::std::string* gkey);

  // optional int32 skey = 7;
  inline bool has_skey() const;
  inline void clear_skey();
  static const int kSkeyFieldNumber = 7;
  inline ::google::protobuf::int32 skey() const;
  inline void set_skey(::google::protobuf::int32 value);

  // optional string orderid = 8;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 8;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // optional int32 coins = 9;
  inline bool has_coins() const;
  inline void clear_coins();
  static const int kCoinsFieldNumber = 9;
  inline ::google::protobuf::int32 coins() const;
  inline void set_coins(::google::protobuf::int32 value);

  // optional int32 moneys = 10;
  inline bool has_moneys() const;
  inline void clear_moneys();
  static const int kMoneysFieldNumber = 10;
  inline ::google::protobuf::int32 moneys() const;
  inline void set_moneys(::google::protobuf::int32 value);

  // optional int64 time = 11;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 11;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional string sign = 12;
  inline bool has_sign() const;
  inline void clear_sign();
  static const int kSignFieldNumber = 12;
  inline const ::std::string& sign() const;
  inline void set_sign(const ::std::string& value);
  inline void set_sign(const char* value);
  inline void set_sign(const char* value, size_t size);
  inline ::std::string* mutable_sign();
  inline ::std::string* release_sign();
  inline void set_allocated_sign(::std::string* sign);

  // optional int32 ret = 13;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 13;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 flag = 14;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 14;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pay360PlayInfo.Sys360PlayPayInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_uid();
  inline void clear_has_uid();
  inline void set_has_roleid();
  inline void clear_has_roleid();
  inline void set_has_rolename();
  inline void clear_has_rolename();
  inline void set_has_platform();
  inline void clear_has_platform();
  inline void set_has_gkey();
  inline void clear_has_gkey();
  inline void set_has_skey();
  inline void clear_has_skey();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_coins();
  inline void clear_has_coins();
  inline void set_has_moneys();
  inline void clear_has_moneys();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_sign();
  inline void clear_has_sign();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* uid_;
  ::google::protobuf::int64 roleid_;
  ::std::string* rolename_;
  ::std::string* platform_;
  ::std::string* gkey_;
  ::std::string* orderid_;
  ::google::protobuf::int32 skey_;
  ::google::protobuf::int32 coins_;
  ::google::protobuf::int64 time_;
  ::google::protobuf::int32 moneys_;
  ::google::protobuf::int32 ret_;
  ::std::string* sign_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(14 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f360Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f360Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f360Play_2eproto();

  void InitAsDefaultInstance();
  static Sys360PlayPayInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// From360PlayReqAskPayInfo

// required string uid = 1;
inline bool From360PlayReqAskPayInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void From360PlayReqAskPayInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void From360PlayReqAskPayInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void From360PlayReqAskPayInfo::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& From360PlayReqAskPayInfo::uid() const {
  return *uid_;
}
inline void From360PlayReqAskPayInfo::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void From360PlayReqAskPayInfo::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void From360PlayReqAskPayInfo::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* From360PlayReqAskPayInfo::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* From360PlayReqAskPayInfo::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void From360PlayReqAskPayInfo::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 roleid = 2;
inline bool From360PlayReqAskPayInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void From360PlayReqAskPayInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void From360PlayReqAskPayInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void From360PlayReqAskPayInfo::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 From360PlayReqAskPayInfo::roleid() const {
  return roleid_;
}
inline void From360PlayReqAskPayInfo::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string rolename = 3;
inline bool From360PlayReqAskPayInfo::has_rolename() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void From360PlayReqAskPayInfo::set_has_rolename() {
  _has_bits_[0] |= 0x00000004u;
}
inline void From360PlayReqAskPayInfo::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void From360PlayReqAskPayInfo::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& From360PlayReqAskPayInfo::rolename() const {
  return *rolename_;
}
inline void From360PlayReqAskPayInfo::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void From360PlayReqAskPayInfo::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void From360PlayReqAskPayInfo::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* From360PlayReqAskPayInfo::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* From360PlayReqAskPayInfo::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void From360PlayReqAskPayInfo::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string platform = 4;
inline bool From360PlayReqAskPayInfo::has_platform() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void From360PlayReqAskPayInfo::set_has_platform() {
  _has_bits_[0] |= 0x00000008u;
}
inline void From360PlayReqAskPayInfo::clear_has_platform() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void From360PlayReqAskPayInfo::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& From360PlayReqAskPayInfo::platform() const {
  return *platform_;
}
inline void From360PlayReqAskPayInfo::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void From360PlayReqAskPayInfo::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void From360PlayReqAskPayInfo::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* From360PlayReqAskPayInfo::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* From360PlayReqAskPayInfo::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void From360PlayReqAskPayInfo::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string gkey = 5;
inline bool From360PlayReqAskPayInfo::has_gkey() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void From360PlayReqAskPayInfo::set_has_gkey() {
  _has_bits_[0] |= 0x00000010u;
}
inline void From360PlayReqAskPayInfo::clear_has_gkey() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void From360PlayReqAskPayInfo::clear_gkey() {
  if (gkey_ != &::google::protobuf::internal::kEmptyString) {
    gkey_->clear();
  }
  clear_has_gkey();
}
inline const ::std::string& From360PlayReqAskPayInfo::gkey() const {
  return *gkey_;
}
inline void From360PlayReqAskPayInfo::set_gkey(const ::std::string& value) {
  set_has_gkey();
  if (gkey_ == &::google::protobuf::internal::kEmptyString) {
    gkey_ = new ::std::string;
  }
  gkey_->assign(value);
}
inline void From360PlayReqAskPayInfo::set_gkey(const char* value) {
  set_has_gkey();
  if (gkey_ == &::google::protobuf::internal::kEmptyString) {
    gkey_ = new ::std::string;
  }
  gkey_->assign(value);
}
inline void From360PlayReqAskPayInfo::set_gkey(const char* value, size_t size) {
  set_has_gkey();
  if (gkey_ == &::google::protobuf::internal::kEmptyString) {
    gkey_ = new ::std::string;
  }
  gkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* From360PlayReqAskPayInfo::mutable_gkey() {
  set_has_gkey();
  if (gkey_ == &::google::protobuf::internal::kEmptyString) {
    gkey_ = new ::std::string;
  }
  return gkey_;
}
inline ::std::string* From360PlayReqAskPayInfo::release_gkey() {
  clear_has_gkey();
  if (gkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gkey_;
    gkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void From360PlayReqAskPayInfo::set_allocated_gkey(::std::string* gkey) {
  if (gkey_ != &::google::protobuf::internal::kEmptyString) {
    delete gkey_;
  }
  if (gkey) {
    set_has_gkey();
    gkey_ = gkey;
  } else {
    clear_has_gkey();
    gkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 skey = 6;
inline bool From360PlayReqAskPayInfo::has_skey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void From360PlayReqAskPayInfo::set_has_skey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void From360PlayReqAskPayInfo::clear_has_skey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void From360PlayReqAskPayInfo::clear_skey() {
  skey_ = 0;
  clear_has_skey();
}
inline ::google::protobuf::int32 From360PlayReqAskPayInfo::skey() const {
  return skey_;
}
inline void From360PlayReqAskPayInfo::set_skey(::google::protobuf::int32 value) {
  set_has_skey();
  skey_ = value;
}

// optional string orderid = 7;
inline bool From360PlayReqAskPayInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void From360PlayReqAskPayInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void From360PlayReqAskPayInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void From360PlayReqAskPayInfo::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& From360PlayReqAskPayInfo::orderid() const {
  return *orderid_;
}
inline void From360PlayReqAskPayInfo::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void From360PlayReqAskPayInfo::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void From360PlayReqAskPayInfo::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* From360PlayReqAskPayInfo::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* From360PlayReqAskPayInfo::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void From360PlayReqAskPayInfo::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 coins = 8;
inline bool From360PlayReqAskPayInfo::has_coins() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void From360PlayReqAskPayInfo::set_has_coins() {
  _has_bits_[0] |= 0x00000080u;
}
inline void From360PlayReqAskPayInfo::clear_has_coins() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void From360PlayReqAskPayInfo::clear_coins() {
  coins_ = 0;
  clear_has_coins();
}
inline ::google::protobuf::int32 From360PlayReqAskPayInfo::coins() const {
  return coins_;
}
inline void From360PlayReqAskPayInfo::set_coins(::google::protobuf::int32 value) {
  set_has_coins();
  coins_ = value;
}

// optional int32 moneys = 9;
inline bool From360PlayReqAskPayInfo::has_moneys() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void From360PlayReqAskPayInfo::set_has_moneys() {
  _has_bits_[0] |= 0x00000100u;
}
inline void From360PlayReqAskPayInfo::clear_has_moneys() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void From360PlayReqAskPayInfo::clear_moneys() {
  moneys_ = 0;
  clear_has_moneys();
}
inline ::google::protobuf::int32 From360PlayReqAskPayInfo::moneys() const {
  return moneys_;
}
inline void From360PlayReqAskPayInfo::set_moneys(::google::protobuf::int32 value) {
  set_has_moneys();
  moneys_ = value;
}

// optional int64 time = 10;
inline bool From360PlayReqAskPayInfo::has_time() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void From360PlayReqAskPayInfo::set_has_time() {
  _has_bits_[0] |= 0x00000200u;
}
inline void From360PlayReqAskPayInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void From360PlayReqAskPayInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 From360PlayReqAskPayInfo::time() const {
  return time_;
}
inline void From360PlayReqAskPayInfo::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional string sign = 11;
inline bool From360PlayReqAskPayInfo::has_sign() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void From360PlayReqAskPayInfo::set_has_sign() {
  _has_bits_[0] |= 0x00000400u;
}
inline void From360PlayReqAskPayInfo::clear_has_sign() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void From360PlayReqAskPayInfo::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& From360PlayReqAskPayInfo::sign() const {
  return *sign_;
}
inline void From360PlayReqAskPayInfo::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void From360PlayReqAskPayInfo::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void From360PlayReqAskPayInfo::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* From360PlayReqAskPayInfo::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* From360PlayReqAskPayInfo::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void From360PlayReqAskPayInfo::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// To360PlayReqAskPayInfo

// required int32 ret = 1;
inline bool To360PlayReqAskPayInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void To360PlayReqAskPayInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void To360PlayReqAskPayInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void To360PlayReqAskPayInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 To360PlayReqAskPayInfo::ret() const {
  return ret_;
}
inline void To360PlayReqAskPayInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional string uid = 2;
inline bool To360PlayReqAskPayInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void To360PlayReqAskPayInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void To360PlayReqAskPayInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void To360PlayReqAskPayInfo::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& To360PlayReqAskPayInfo::uid() const {
  return *uid_;
}
inline void To360PlayReqAskPayInfo::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void To360PlayReqAskPayInfo::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void To360PlayReqAskPayInfo::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* To360PlayReqAskPayInfo::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* To360PlayReqAskPayInfo::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void To360PlayReqAskPayInfo::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 roleid = 3;
inline bool To360PlayReqAskPayInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void To360PlayReqAskPayInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void To360PlayReqAskPayInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void To360PlayReqAskPayInfo::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 To360PlayReqAskPayInfo::roleid() const {
  return roleid_;
}
inline void To360PlayReqAskPayInfo::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string rolename = 4;
inline bool To360PlayReqAskPayInfo::has_rolename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void To360PlayReqAskPayInfo::set_has_rolename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void To360PlayReqAskPayInfo::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void To360PlayReqAskPayInfo::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& To360PlayReqAskPayInfo::rolename() const {
  return *rolename_;
}
inline void To360PlayReqAskPayInfo::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void To360PlayReqAskPayInfo::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void To360PlayReqAskPayInfo::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* To360PlayReqAskPayInfo::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* To360PlayReqAskPayInfo::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void To360PlayReqAskPayInfo::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string platform = 5;
inline bool To360PlayReqAskPayInfo::has_platform() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void To360PlayReqAskPayInfo::set_has_platform() {
  _has_bits_[0] |= 0x00000010u;
}
inline void To360PlayReqAskPayInfo::clear_has_platform() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void To360PlayReqAskPayInfo::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& To360PlayReqAskPayInfo::platform() const {
  return *platform_;
}
inline void To360PlayReqAskPayInfo::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void To360PlayReqAskPayInfo::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void To360PlayReqAskPayInfo::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* To360PlayReqAskPayInfo::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* To360PlayReqAskPayInfo::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void To360PlayReqAskPayInfo::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string gkey = 6;
inline bool To360PlayReqAskPayInfo::has_gkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void To360PlayReqAskPayInfo::set_has_gkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void To360PlayReqAskPayInfo::clear_has_gkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void To360PlayReqAskPayInfo::clear_gkey() {
  if (gkey_ != &::google::protobuf::internal::kEmptyString) {
    gkey_->clear();
  }
  clear_has_gkey();
}
inline const ::std::string& To360PlayReqAskPayInfo::gkey() const {
  return *gkey_;
}
inline void To360PlayReqAskPayInfo::set_gkey(const ::std::string& value) {
  set_has_gkey();
  if (gkey_ == &::google::protobuf::internal::kEmptyString) {
    gkey_ = new ::std::string;
  }
  gkey_->assign(value);
}
inline void To360PlayReqAskPayInfo::set_gkey(const char* value) {
  set_has_gkey();
  if (gkey_ == &::google::protobuf::internal::kEmptyString) {
    gkey_ = new ::std::string;
  }
  gkey_->assign(value);
}
inline void To360PlayReqAskPayInfo::set_gkey(const char* value, size_t size) {
  set_has_gkey();
  if (gkey_ == &::google::protobuf::internal::kEmptyString) {
    gkey_ = new ::std::string;
  }
  gkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* To360PlayReqAskPayInfo::mutable_gkey() {
  set_has_gkey();
  if (gkey_ == &::google::protobuf::internal::kEmptyString) {
    gkey_ = new ::std::string;
  }
  return gkey_;
}
inline ::std::string* To360PlayReqAskPayInfo::release_gkey() {
  clear_has_gkey();
  if (gkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gkey_;
    gkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void To360PlayReqAskPayInfo::set_allocated_gkey(::std::string* gkey) {
  if (gkey_ != &::google::protobuf::internal::kEmptyString) {
    delete gkey_;
  }
  if (gkey) {
    set_has_gkey();
    gkey_ = gkey;
  } else {
    clear_has_gkey();
    gkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 skey = 7;
inline bool To360PlayReqAskPayInfo::has_skey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void To360PlayReqAskPayInfo::set_has_skey() {
  _has_bits_[0] |= 0x00000040u;
}
inline void To360PlayReqAskPayInfo::clear_has_skey() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void To360PlayReqAskPayInfo::clear_skey() {
  skey_ = 0;
  clear_has_skey();
}
inline ::google::protobuf::int32 To360PlayReqAskPayInfo::skey() const {
  return skey_;
}
inline void To360PlayReqAskPayInfo::set_skey(::google::protobuf::int32 value) {
  set_has_skey();
  skey_ = value;
}

// optional string orderid = 8;
inline bool To360PlayReqAskPayInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void To360PlayReqAskPayInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void To360PlayReqAskPayInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void To360PlayReqAskPayInfo::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& To360PlayReqAskPayInfo::orderid() const {
  return *orderid_;
}
inline void To360PlayReqAskPayInfo::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void To360PlayReqAskPayInfo::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void To360PlayReqAskPayInfo::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* To360PlayReqAskPayInfo::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* To360PlayReqAskPayInfo::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void To360PlayReqAskPayInfo::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 coins = 9;
inline bool To360PlayReqAskPayInfo::has_coins() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void To360PlayReqAskPayInfo::set_has_coins() {
  _has_bits_[0] |= 0x00000100u;
}
inline void To360PlayReqAskPayInfo::clear_has_coins() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void To360PlayReqAskPayInfo::clear_coins() {
  coins_ = 0;
  clear_has_coins();
}
inline ::google::protobuf::int32 To360PlayReqAskPayInfo::coins() const {
  return coins_;
}
inline void To360PlayReqAskPayInfo::set_coins(::google::protobuf::int32 value) {
  set_has_coins();
  coins_ = value;
}

// optional int32 moneys = 10;
inline bool To360PlayReqAskPayInfo::has_moneys() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void To360PlayReqAskPayInfo::set_has_moneys() {
  _has_bits_[0] |= 0x00000200u;
}
inline void To360PlayReqAskPayInfo::clear_has_moneys() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void To360PlayReqAskPayInfo::clear_moneys() {
  moneys_ = 0;
  clear_has_moneys();
}
inline ::google::protobuf::int32 To360PlayReqAskPayInfo::moneys() const {
  return moneys_;
}
inline void To360PlayReqAskPayInfo::set_moneys(::google::protobuf::int32 value) {
  set_has_moneys();
  moneys_ = value;
}

// optional int64 time = 11;
inline bool To360PlayReqAskPayInfo::has_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void To360PlayReqAskPayInfo::set_has_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void To360PlayReqAskPayInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void To360PlayReqAskPayInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 To360PlayReqAskPayInfo::time() const {
  return time_;
}
inline void To360PlayReqAskPayInfo::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional string sign = 12;
inline bool To360PlayReqAskPayInfo::has_sign() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void To360PlayReqAskPayInfo::set_has_sign() {
  _has_bits_[0] |= 0x00000800u;
}
inline void To360PlayReqAskPayInfo::clear_has_sign() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void To360PlayReqAskPayInfo::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& To360PlayReqAskPayInfo::sign() const {
  return *sign_;
}
inline void To360PlayReqAskPayInfo::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void To360PlayReqAskPayInfo::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void To360PlayReqAskPayInfo::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* To360PlayReqAskPayInfo::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* To360PlayReqAskPayInfo::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void To360PlayReqAskPayInfo::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// Sys360PlayPayInfo

// required int64 charid = 1;
inline bool Sys360PlayPayInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sys360PlayPayInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sys360PlayPayInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sys360PlayPayInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 Sys360PlayPayInfo::charid() const {
  return charid_;
}
inline void Sys360PlayPayInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional string uid = 2;
inline bool Sys360PlayPayInfo::has_uid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sys360PlayPayInfo::set_has_uid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sys360PlayPayInfo::clear_has_uid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sys360PlayPayInfo::clear_uid() {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    uid_->clear();
  }
  clear_has_uid();
}
inline const ::std::string& Sys360PlayPayInfo::uid() const {
  return *uid_;
}
inline void Sys360PlayPayInfo::set_uid(const ::std::string& value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void Sys360PlayPayInfo::set_uid(const char* value) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(value);
}
inline void Sys360PlayPayInfo::set_uid(const char* value, size_t size) {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  uid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sys360PlayPayInfo::mutable_uid() {
  set_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    uid_ = new ::std::string;
  }
  return uid_;
}
inline ::std::string* Sys360PlayPayInfo::release_uid() {
  clear_has_uid();
  if (uid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = uid_;
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sys360PlayPayInfo::set_allocated_uid(::std::string* uid) {
  if (uid_ != &::google::protobuf::internal::kEmptyString) {
    delete uid_;
  }
  if (uid) {
    set_has_uid();
    uid_ = uid;
  } else {
    clear_has_uid();
    uid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 roleid = 3;
inline bool Sys360PlayPayInfo::has_roleid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sys360PlayPayInfo::set_has_roleid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sys360PlayPayInfo::clear_has_roleid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sys360PlayPayInfo::clear_roleid() {
  roleid_ = GOOGLE_LONGLONG(0);
  clear_has_roleid();
}
inline ::google::protobuf::int64 Sys360PlayPayInfo::roleid() const {
  return roleid_;
}
inline void Sys360PlayPayInfo::set_roleid(::google::protobuf::int64 value) {
  set_has_roleid();
  roleid_ = value;
}

// optional string rolename = 4;
inline bool Sys360PlayPayInfo::has_rolename() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sys360PlayPayInfo::set_has_rolename() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sys360PlayPayInfo::clear_has_rolename() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sys360PlayPayInfo::clear_rolename() {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    rolename_->clear();
  }
  clear_has_rolename();
}
inline const ::std::string& Sys360PlayPayInfo::rolename() const {
  return *rolename_;
}
inline void Sys360PlayPayInfo::set_rolename(const ::std::string& value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void Sys360PlayPayInfo::set_rolename(const char* value) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(value);
}
inline void Sys360PlayPayInfo::set_rolename(const char* value, size_t size) {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  rolename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sys360PlayPayInfo::mutable_rolename() {
  set_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    rolename_ = new ::std::string;
  }
  return rolename_;
}
inline ::std::string* Sys360PlayPayInfo::release_rolename() {
  clear_has_rolename();
  if (rolename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = rolename_;
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sys360PlayPayInfo::set_allocated_rolename(::std::string* rolename) {
  if (rolename_ != &::google::protobuf::internal::kEmptyString) {
    delete rolename_;
  }
  if (rolename) {
    set_has_rolename();
    rolename_ = rolename;
  } else {
    clear_has_rolename();
    rolename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string platform = 5;
inline bool Sys360PlayPayInfo::has_platform() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Sys360PlayPayInfo::set_has_platform() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Sys360PlayPayInfo::clear_has_platform() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Sys360PlayPayInfo::clear_platform() {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    platform_->clear();
  }
  clear_has_platform();
}
inline const ::std::string& Sys360PlayPayInfo::platform() const {
  return *platform_;
}
inline void Sys360PlayPayInfo::set_platform(const ::std::string& value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void Sys360PlayPayInfo::set_platform(const char* value) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(value);
}
inline void Sys360PlayPayInfo::set_platform(const char* value, size_t size) {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  platform_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sys360PlayPayInfo::mutable_platform() {
  set_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    platform_ = new ::std::string;
  }
  return platform_;
}
inline ::std::string* Sys360PlayPayInfo::release_platform() {
  clear_has_platform();
  if (platform_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = platform_;
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sys360PlayPayInfo::set_allocated_platform(::std::string* platform) {
  if (platform_ != &::google::protobuf::internal::kEmptyString) {
    delete platform_;
  }
  if (platform) {
    set_has_platform();
    platform_ = platform;
  } else {
    clear_has_platform();
    platform_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string gkey = 6;
inline bool Sys360PlayPayInfo::has_gkey() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Sys360PlayPayInfo::set_has_gkey() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Sys360PlayPayInfo::clear_has_gkey() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Sys360PlayPayInfo::clear_gkey() {
  if (gkey_ != &::google::protobuf::internal::kEmptyString) {
    gkey_->clear();
  }
  clear_has_gkey();
}
inline const ::std::string& Sys360PlayPayInfo::gkey() const {
  return *gkey_;
}
inline void Sys360PlayPayInfo::set_gkey(const ::std::string& value) {
  set_has_gkey();
  if (gkey_ == &::google::protobuf::internal::kEmptyString) {
    gkey_ = new ::std::string;
  }
  gkey_->assign(value);
}
inline void Sys360PlayPayInfo::set_gkey(const char* value) {
  set_has_gkey();
  if (gkey_ == &::google::protobuf::internal::kEmptyString) {
    gkey_ = new ::std::string;
  }
  gkey_->assign(value);
}
inline void Sys360PlayPayInfo::set_gkey(const char* value, size_t size) {
  set_has_gkey();
  if (gkey_ == &::google::protobuf::internal::kEmptyString) {
    gkey_ = new ::std::string;
  }
  gkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sys360PlayPayInfo::mutable_gkey() {
  set_has_gkey();
  if (gkey_ == &::google::protobuf::internal::kEmptyString) {
    gkey_ = new ::std::string;
  }
  return gkey_;
}
inline ::std::string* Sys360PlayPayInfo::release_gkey() {
  clear_has_gkey();
  if (gkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = gkey_;
    gkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sys360PlayPayInfo::set_allocated_gkey(::std::string* gkey) {
  if (gkey_ != &::google::protobuf::internal::kEmptyString) {
    delete gkey_;
  }
  if (gkey) {
    set_has_gkey();
    gkey_ = gkey;
  } else {
    clear_has_gkey();
    gkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 skey = 7;
inline bool Sys360PlayPayInfo::has_skey() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Sys360PlayPayInfo::set_has_skey() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Sys360PlayPayInfo::clear_has_skey() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Sys360PlayPayInfo::clear_skey() {
  skey_ = 0;
  clear_has_skey();
}
inline ::google::protobuf::int32 Sys360PlayPayInfo::skey() const {
  return skey_;
}
inline void Sys360PlayPayInfo::set_skey(::google::protobuf::int32 value) {
  set_has_skey();
  skey_ = value;
}

// optional string orderid = 8;
inline bool Sys360PlayPayInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Sys360PlayPayInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Sys360PlayPayInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Sys360PlayPayInfo::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& Sys360PlayPayInfo::orderid() const {
  return *orderid_;
}
inline void Sys360PlayPayInfo::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void Sys360PlayPayInfo::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void Sys360PlayPayInfo::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sys360PlayPayInfo::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* Sys360PlayPayInfo::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sys360PlayPayInfo::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 coins = 9;
inline bool Sys360PlayPayInfo::has_coins() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void Sys360PlayPayInfo::set_has_coins() {
  _has_bits_[0] |= 0x00000100u;
}
inline void Sys360PlayPayInfo::clear_has_coins() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void Sys360PlayPayInfo::clear_coins() {
  coins_ = 0;
  clear_has_coins();
}
inline ::google::protobuf::int32 Sys360PlayPayInfo::coins() const {
  return coins_;
}
inline void Sys360PlayPayInfo::set_coins(::google::protobuf::int32 value) {
  set_has_coins();
  coins_ = value;
}

// optional int32 moneys = 10;
inline bool Sys360PlayPayInfo::has_moneys() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void Sys360PlayPayInfo::set_has_moneys() {
  _has_bits_[0] |= 0x00000200u;
}
inline void Sys360PlayPayInfo::clear_has_moneys() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void Sys360PlayPayInfo::clear_moneys() {
  moneys_ = 0;
  clear_has_moneys();
}
inline ::google::protobuf::int32 Sys360PlayPayInfo::moneys() const {
  return moneys_;
}
inline void Sys360PlayPayInfo::set_moneys(::google::protobuf::int32 value) {
  set_has_moneys();
  moneys_ = value;
}

// optional int64 time = 11;
inline bool Sys360PlayPayInfo::has_time() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void Sys360PlayPayInfo::set_has_time() {
  _has_bits_[0] |= 0x00000400u;
}
inline void Sys360PlayPayInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void Sys360PlayPayInfo::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 Sys360PlayPayInfo::time() const {
  return time_;
}
inline void Sys360PlayPayInfo::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional string sign = 12;
inline bool Sys360PlayPayInfo::has_sign() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void Sys360PlayPayInfo::set_has_sign() {
  _has_bits_[0] |= 0x00000800u;
}
inline void Sys360PlayPayInfo::clear_has_sign() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void Sys360PlayPayInfo::clear_sign() {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    sign_->clear();
  }
  clear_has_sign();
}
inline const ::std::string& Sys360PlayPayInfo::sign() const {
  return *sign_;
}
inline void Sys360PlayPayInfo::set_sign(const ::std::string& value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void Sys360PlayPayInfo::set_sign(const char* value) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(value);
}
inline void Sys360PlayPayInfo::set_sign(const char* value, size_t size) {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  sign_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sys360PlayPayInfo::mutable_sign() {
  set_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    sign_ = new ::std::string;
  }
  return sign_;
}
inline ::std::string* Sys360PlayPayInfo::release_sign() {
  clear_has_sign();
  if (sign_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sign_;
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sys360PlayPayInfo::set_allocated_sign(::std::string* sign) {
  if (sign_ != &::google::protobuf::internal::kEmptyString) {
    delete sign_;
  }
  if (sign) {
    set_has_sign();
    sign_ = sign;
  } else {
    clear_has_sign();
    sign_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ret = 13;
inline bool Sys360PlayPayInfo::has_ret() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void Sys360PlayPayInfo::set_has_ret() {
  _has_bits_[0] |= 0x00001000u;
}
inline void Sys360PlayPayInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void Sys360PlayPayInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Sys360PlayPayInfo::ret() const {
  return ret_;
}
inline void Sys360PlayPayInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 flag = 14;
inline bool Sys360PlayPayInfo::has_flag() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void Sys360PlayPayInfo::set_has_flag() {
  _has_bits_[0] |= 0x00002000u;
}
inline void Sys360PlayPayInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void Sys360PlayPayInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 Sys360PlayPayInfo::flag() const {
  return flag_;
}
inline void Sys360PlayPayInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pay360PlayInfo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Pay_2f360Play_2eproto__INCLUDED
