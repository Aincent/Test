// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: SystemNotice/SystemNotice.proto

#ifndef PROTOBUF_SystemNotice_2fSystemNotice_2eproto__INCLUDED
#define PROTOBUF_SystemNotice_2fSystemNotice_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SystemNoticeProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
void protobuf_AssignDesc_SystemNotice_2fSystemNotice_2eproto();
void protobuf_ShutdownFile_SystemNotice_2fSystemNotice_2eproto();

class SystemNotice;
class SystemNoticeOp;
class ClientNoticeUIHL;
class UIHighLight;
class ToClientUIHL;
class UIHL;
class ClientNotice;
class ToClientNotice;
class ToClientNoticeArena;
class HintClientTaskPanel;

// ===================================================================

class SystemNotice : public ::google::protobuf::Message {
 public:
  SystemNotice();
  virtual ~SystemNotice();

  SystemNotice(const SystemNotice& from);

  inline SystemNotice& operator=(const SystemNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemNotice& default_instance();

  void Swap(SystemNotice* other);

  // implements Message ----------------------------------------------

  SystemNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemNotice& from);
  void MergeFrom(const SystemNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 showType = 2;
  inline bool has_showtype() const;
  inline void clear_showtype();
  static const int kShowTypeFieldNumber = 2;
  inline ::google::protobuf::int32 showtype() const;
  inline void set_showtype(::google::protobuf::int32 value);

  // optional int64 beginTime = 3;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 3;
  inline ::google::protobuf::int64 begintime() const;
  inline void set_begintime(::google::protobuf::int64 value);

  // optional int64 endTime = 4;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 4;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // optional int32 intervalTime = 5;
  inline bool has_intervaltime() const;
  inline void clear_intervaltime();
  static const int kIntervalTimeFieldNumber = 5;
  inline ::google::protobuf::int32 intervaltime() const;
  inline void set_intervaltime(::google::protobuf::int32 value);

  // optional string content = 6;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 6;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // optional string url = 7;
  inline bool has_url() const;
  inline void clear_url();
  static const int kUrlFieldNumber = 7;
  inline const ::std::string& url() const;
  inline void set_url(const ::std::string& value);
  inline void set_url(const char* value);
  inline void set_url(const char* value, size_t size);
  inline ::std::string* mutable_url();
  inline ::std::string* release_url();
  inline void set_allocated_url(::std::string* url);

  // optional int32 state = 8;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 8;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional string title = 9;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 9;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // @@protoc_insertion_point(class_scope:SystemNoticeProto.SystemNotice)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_showtype();
  inline void clear_has_showtype();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();
  inline void set_has_intervaltime();
  inline void clear_has_intervaltime();
  inline void set_has_content();
  inline void clear_has_content();
  inline void set_has_url();
  inline void clear_has_url();
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_title();
  inline void clear_has_title();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 showtype_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int64 endtime_;
  ::std::string* content_;
  ::google::protobuf::int32 intervaltime_;
  ::google::protobuf::int32 state_;
  ::std::string* url_;
  ::std::string* title_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(9 + 31) / 32];

  friend void  protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_AssignDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_ShutdownFile_SystemNotice_2fSystemNotice_2eproto();

  void InitAsDefaultInstance();
  static SystemNotice* default_instance_;
};
// -------------------------------------------------------------------

class SystemNoticeOp : public ::google::protobuf::Message {
 public:
  SystemNoticeOp();
  virtual ~SystemNoticeOp();

  SystemNoticeOp(const SystemNoticeOp& from);

  inline SystemNoticeOp& operator=(const SystemNoticeOp& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SystemNoticeOp& default_instance();

  void Swap(SystemNoticeOp* other);

  // implements Message ----------------------------------------------

  SystemNoticeOp* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SystemNoticeOp& from);
  void MergeFrom(const SystemNoticeOp& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 op = 1;
  inline bool has_op() const;
  inline void clear_op();
  static const int kOpFieldNumber = 1;
  inline ::google::protobuf::int32 op() const;
  inline void set_op(::google::protobuf::int32 value);

  // repeated .SystemNoticeProto.SystemNotice noticeList = 2;
  inline int noticelist_size() const;
  inline void clear_noticelist();
  static const int kNoticeListFieldNumber = 2;
  inline const ::SystemNoticeProto::SystemNotice& noticelist(int index) const;
  inline ::SystemNoticeProto::SystemNotice* mutable_noticelist(int index);
  inline ::SystemNoticeProto::SystemNotice* add_noticelist();
  inline const ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::SystemNotice >&
      noticelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::SystemNotice >*
      mutable_noticelist();

  // optional int32 startNumber = 3;
  inline bool has_startnumber() const;
  inline void clear_startnumber();
  static const int kStartNumberFieldNumber = 3;
  inline ::google::protobuf::int32 startnumber() const;
  inline void set_startnumber(::google::protobuf::int32 value);

  // optional int32 endNumber = 4;
  inline bool has_endnumber() const;
  inline void clear_endnumber();
  static const int kEndNumberFieldNumber = 4;
  inline ::google::protobuf::int32 endnumber() const;
  inline void set_endnumber(::google::protobuf::int32 value);

  // optional int32 totalNumber = 5;
  inline bool has_totalnumber() const;
  inline void clear_totalnumber();
  static const int kTotalNumberFieldNumber = 5;
  inline ::google::protobuf::int32 totalnumber() const;
  inline void set_totalnumber(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SystemNoticeProto.SystemNoticeOp)
 private:
  inline void set_has_op();
  inline void clear_has_op();
  inline void set_has_startnumber();
  inline void clear_has_startnumber();
  inline void set_has_endnumber();
  inline void clear_has_endnumber();
  inline void set_has_totalnumber();
  inline void clear_has_totalnumber();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::SystemNotice > noticelist_;
  ::google::protobuf::int32 op_;
  ::google::protobuf::int32 startnumber_;
  ::google::protobuf::int32 endnumber_;
  ::google::protobuf::int32 totalnumber_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_AssignDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_ShutdownFile_SystemNotice_2fSystemNotice_2eproto();

  void InitAsDefaultInstance();
  static SystemNoticeOp* default_instance_;
};
// -------------------------------------------------------------------

class ClientNoticeUIHL : public ::google::protobuf::Message {
 public:
  ClientNoticeUIHL();
  virtual ~ClientNoticeUIHL();

  ClientNoticeUIHL(const ClientNoticeUIHL& from);

  inline ClientNoticeUIHL& operator=(const ClientNoticeUIHL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientNoticeUIHL& default_instance();

  void Swap(ClientNoticeUIHL* other);

  // implements Message ----------------------------------------------

  ClientNoticeUIHL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientNoticeUIHL& from);
  void MergeFrom(const ClientNoticeUIHL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SystemNoticeProto.UIHighLight list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::SystemNoticeProto::UIHighLight& list(int index) const;
  inline ::SystemNoticeProto::UIHighLight* mutable_list(int index);
  inline ::SystemNoticeProto::UIHighLight* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::UIHighLight >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::UIHighLight >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:SystemNoticeProto.ClientNoticeUIHL)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::UIHighLight > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_AssignDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_ShutdownFile_SystemNotice_2fSystemNotice_2eproto();

  void InitAsDefaultInstance();
  static ClientNoticeUIHL* default_instance_;
};
// -------------------------------------------------------------------

class UIHighLight : public ::google::protobuf::Message {
 public:
  UIHighLight();
  virtual ~UIHighLight();

  UIHighLight(const UIHighLight& from);

  inline UIHighLight& operator=(const UIHighLight& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UIHighLight& default_instance();

  void Swap(UIHighLight* other);

  // implements Message ----------------------------------------------

  UIHighLight* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UIHighLight& from);
  void MergeFrom(const UIHighLight& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 value = 2;
  inline bool has_value() const;
  inline void clear_value();
  static const int kValueFieldNumber = 2;
  inline ::google::protobuf::int32 value() const;
  inline void set_value(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SystemNoticeProto.UIHighLight)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_value();
  inline void clear_has_value();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 value_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_AssignDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_ShutdownFile_SystemNotice_2fSystemNotice_2eproto();

  void InitAsDefaultInstance();
  static UIHighLight* default_instance_;
};
// -------------------------------------------------------------------

class ToClientUIHL : public ::google::protobuf::Message {
 public:
  ToClientUIHL();
  virtual ~ToClientUIHL();

  ToClientUIHL(const ToClientUIHL& from);

  inline ToClientUIHL& operator=(const ToClientUIHL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToClientUIHL& default_instance();

  void Swap(ToClientUIHL* other);

  // implements Message ----------------------------------------------

  ToClientUIHL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToClientUIHL& from);
  void MergeFrom(const ToClientUIHL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SystemNoticeProto.UIHL list = 1;
  inline int list_size() const;
  inline void clear_list();
  static const int kListFieldNumber = 1;
  inline const ::SystemNoticeProto::UIHL& list(int index) const;
  inline ::SystemNoticeProto::UIHL* mutable_list(int index);
  inline ::SystemNoticeProto::UIHL* add_list();
  inline const ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::UIHL >&
      list() const;
  inline ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::UIHL >*
      mutable_list();

  // @@protoc_insertion_point(class_scope:SystemNoticeProto.ToClientUIHL)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::UIHL > list_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_AssignDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_ShutdownFile_SystemNotice_2fSystemNotice_2eproto();

  void InitAsDefaultInstance();
  static ToClientUIHL* default_instance_;
};
// -------------------------------------------------------------------

class UIHL : public ::google::protobuf::Message {
 public:
  UIHL();
  virtual ~UIHL();

  UIHL(const UIHL& from);

  inline UIHL& operator=(const UIHL& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const UIHL& default_instance();

  void Swap(UIHL* other);

  // implements Message ----------------------------------------------

  UIHL* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const UIHL& from);
  void MergeFrom(const UIHL& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 bigType = 1;
  inline bool has_bigtype() const;
  inline void clear_bigtype();
  static const int kBigTypeFieldNumber = 1;
  inline ::google::protobuf::int32 bigtype() const;
  inline void set_bigtype(::google::protobuf::int32 value);

  // repeated int32 smallType = 2;
  inline int smalltype_size() const;
  inline void clear_smalltype();
  static const int kSmallTypeFieldNumber = 2;
  inline ::google::protobuf::int32 smalltype(int index) const;
  inline void set_smalltype(int index, ::google::protobuf::int32 value);
  inline void add_smalltype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      smalltype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_smalltype();

  // repeated int32 value = 3;
  inline int value_size() const;
  inline void clear_value();
  static const int kValueFieldNumber = 3;
  inline ::google::protobuf::int32 value(int index) const;
  inline void set_value(int index, ::google::protobuf::int32 value);
  inline void add_value(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      value() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_value();

  // @@protoc_insertion_point(class_scope:SystemNoticeProto.UIHL)
 private:
  inline void set_has_bigtype();
  inline void clear_has_bigtype();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > smalltype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > value_;
  ::google::protobuf::int32 bigtype_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_AssignDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_ShutdownFile_SystemNotice_2fSystemNotice_2eproto();

  void InitAsDefaultInstance();
  static UIHL* default_instance_;
};
// -------------------------------------------------------------------

class ClientNotice : public ::google::protobuf::Message {
 public:
  ClientNotice();
  virtual ~ClientNotice();

  ClientNotice(const ClientNotice& from);

  inline ClientNotice& operator=(const ClientNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientNotice& default_instance();

  void Swap(ClientNotice* other);

  // implements Message ----------------------------------------------

  ClientNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientNotice& from);
  void MergeFrom(const ClientNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string title = 1;
  inline bool has_title() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 1;
  inline const ::std::string& title() const;
  inline void set_title(const ::std::string& value);
  inline void set_title(const char* value);
  inline void set_title(const char* value, size_t size);
  inline ::std::string* mutable_title();
  inline ::std::string* release_title();
  inline void set_allocated_title(::std::string* title);

  // optional string content = 2;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 2;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const char* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:SystemNoticeProto.ClientNotice)
 private:
  inline void set_has_title();
  inline void clear_has_title();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* title_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_AssignDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_ShutdownFile_SystemNotice_2fSystemNotice_2eproto();

  void InitAsDefaultInstance();
  static ClientNotice* default_instance_;
};
// -------------------------------------------------------------------

class ToClientNotice : public ::google::protobuf::Message {
 public:
  ToClientNotice();
  virtual ~ToClientNotice();

  ToClientNotice(const ToClientNotice& from);

  inline ToClientNotice& operator=(const ToClientNotice& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToClientNotice& default_instance();

  void Swap(ToClientNotice* other);

  // implements Message ----------------------------------------------

  ToClientNotice* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToClientNotice& from);
  void MergeFrom(const ToClientNotice& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .SystemNoticeProto.ClientNotice noticeList = 1;
  inline int noticelist_size() const;
  inline void clear_noticelist();
  static const int kNoticeListFieldNumber = 1;
  inline const ::SystemNoticeProto::ClientNotice& noticelist(int index) const;
  inline ::SystemNoticeProto::ClientNotice* mutable_noticelist(int index);
  inline ::SystemNoticeProto::ClientNotice* add_noticelist();
  inline const ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::ClientNotice >&
      noticelist() const;
  inline ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::ClientNotice >*
      mutable_noticelist();

  // @@protoc_insertion_point(class_scope:SystemNoticeProto.ToClientNotice)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::ClientNotice > noticelist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_AssignDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_ShutdownFile_SystemNotice_2fSystemNotice_2eproto();

  void InitAsDefaultInstance();
  static ToClientNotice* default_instance_;
};
// -------------------------------------------------------------------

class ToClientNoticeArena : public ::google::protobuf::Message {
 public:
  ToClientNoticeArena();
  virtual ~ToClientNoticeArena();

  ToClientNoticeArena(const ToClientNoticeArena& from);

  inline ToClientNoticeArena& operator=(const ToClientNoticeArena& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToClientNoticeArena& default_instance();

  void Swap(ToClientNoticeArena* other);

  // implements Message ----------------------------------------------

  ToClientNoticeArena* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToClientNoticeArena& from);
  void MergeFrom(const ToClientNoticeArena& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int64 time = 1;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 1;
  inline ::google::protobuf::int64 time() const;
  inline void set_time(::google::protobuf::int64 value);

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 flag = 3;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 3;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // optional int32 ranking = 4;
  inline bool has_ranking() const;
  inline void clear_ranking();
  static const int kRankingFieldNumber = 4;
  inline ::google::protobuf::int32 ranking() const;
  inline void set_ranking(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SystemNoticeProto.ToClientNoticeArena)
 private:
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_ranking();
  inline void clear_has_ranking();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 time_;
  ::std::string* name_;
  ::google::protobuf::int32 flag_;
  ::google::protobuf::int32 ranking_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_AssignDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_ShutdownFile_SystemNotice_2fSystemNotice_2eproto();

  void InitAsDefaultInstance();
  static ToClientNoticeArena* default_instance_;
};
// -------------------------------------------------------------------

class HintClientTaskPanel : public ::google::protobuf::Message {
 public:
  HintClientTaskPanel();
  virtual ~HintClientTaskPanel();

  HintClientTaskPanel(const HintClientTaskPanel& from);

  inline HintClientTaskPanel& operator=(const HintClientTaskPanel& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const HintClientTaskPanel& default_instance();

  void Swap(HintClientTaskPanel* other);

  // implements Message ----------------------------------------------

  HintClientTaskPanel* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const HintClientTaskPanel& from);
  void MergeFrom(const HintClientTaskPanel& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 bigType = 1;
  inline int bigtype_size() const;
  inline void clear_bigtype();
  static const int kBigTypeFieldNumber = 1;
  inline ::google::protobuf::int32 bigtype(int index) const;
  inline void set_bigtype(int index, ::google::protobuf::int32 value);
  inline void add_bigtype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      bigtype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_bigtype();

  // repeated int32 smallType = 2;
  inline int smalltype_size() const;
  inline void clear_smalltype();
  static const int kSmallTypeFieldNumber = 2;
  inline ::google::protobuf::int32 smalltype(int index) const;
  inline void set_smalltype(int index, ::google::protobuf::int32 value);
  inline void add_smalltype(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      smalltype() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_smalltype();

  // repeated int32 fValue = 3;
  inline int fvalue_size() const;
  inline void clear_fvalue();
  static const int kFValueFieldNumber = 3;
  inline ::google::protobuf::int32 fvalue(int index) const;
  inline void set_fvalue(int index, ::google::protobuf::int32 value);
  inline void add_fvalue(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      fvalue() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_fvalue();

  // repeated int32 sValue = 4;
  inline int svalue_size() const;
  inline void clear_svalue();
  static const int kSValueFieldNumber = 4;
  inline ::google::protobuf::int32 svalue(int index) const;
  inline void set_svalue(int index, ::google::protobuf::int32 value);
  inline void add_svalue(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      svalue() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_svalue();

  // @@protoc_insertion_point(class_scope:SystemNoticeProto.HintClientTaskPanel)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > bigtype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > smalltype_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > fvalue_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > svalue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_AssignDesc_SystemNotice_2fSystemNotice_2eproto();
  friend void protobuf_ShutdownFile_SystemNotice_2fSystemNotice_2eproto();

  void InitAsDefaultInstance();
  static HintClientTaskPanel* default_instance_;
};
// ===================================================================


// ===================================================================

// SystemNotice

// optional int32 id = 1;
inline bool SystemNotice::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemNotice::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemNotice::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemNotice::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 SystemNotice::id() const {
  return id_;
}
inline void SystemNotice::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 showType = 2;
inline bool SystemNotice::has_showtype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SystemNotice::set_has_showtype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SystemNotice::clear_has_showtype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SystemNotice::clear_showtype() {
  showtype_ = 0;
  clear_has_showtype();
}
inline ::google::protobuf::int32 SystemNotice::showtype() const {
  return showtype_;
}
inline void SystemNotice::set_showtype(::google::protobuf::int32 value) {
  set_has_showtype();
  showtype_ = value;
}

// optional int64 beginTime = 3;
inline bool SystemNotice::has_begintime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemNotice::set_has_begintime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SystemNotice::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SystemNotice::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::int64 SystemNotice::begintime() const {
  return begintime_;
}
inline void SystemNotice::set_begintime(::google::protobuf::int64 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional int64 endTime = 4;
inline bool SystemNotice::has_endtime() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemNotice::set_has_endtime() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SystemNotice::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SystemNotice::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 SystemNotice::endtime() const {
  return endtime_;
}
inline void SystemNotice::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// optional int32 intervalTime = 5;
inline bool SystemNotice::has_intervaltime() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemNotice::set_has_intervaltime() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SystemNotice::clear_has_intervaltime() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SystemNotice::clear_intervaltime() {
  intervaltime_ = 0;
  clear_has_intervaltime();
}
inline ::google::protobuf::int32 SystemNotice::intervaltime() const {
  return intervaltime_;
}
inline void SystemNotice::set_intervaltime(::google::protobuf::int32 value) {
  set_has_intervaltime();
  intervaltime_ = value;
}

// optional string content = 6;
inline bool SystemNotice::has_content() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SystemNotice::set_has_content() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SystemNotice::clear_has_content() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SystemNotice::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& SystemNotice::content() const {
  return *content_;
}
inline void SystemNotice::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SystemNotice::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void SystemNotice::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemNotice::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* SystemNotice::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SystemNotice::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string url = 7;
inline bool SystemNotice::has_url() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SystemNotice::set_has_url() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SystemNotice::clear_has_url() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SystemNotice::clear_url() {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    url_->clear();
  }
  clear_has_url();
}
inline const ::std::string& SystemNotice::url() const {
  return *url_;
}
inline void SystemNotice::set_url(const ::std::string& value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void SystemNotice::set_url(const char* value) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(value);
}
inline void SystemNotice::set_url(const char* value, size_t size) {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  url_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemNotice::mutable_url() {
  set_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    url_ = new ::std::string;
  }
  return url_;
}
inline ::std::string* SystemNotice::release_url() {
  clear_has_url();
  if (url_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = url_;
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SystemNotice::set_allocated_url(::std::string* url) {
  if (url_ != &::google::protobuf::internal::kEmptyString) {
    delete url_;
  }
  if (url) {
    set_has_url();
    url_ = url;
  } else {
    clear_has_url();
    url_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 state = 8;
inline bool SystemNotice::has_state() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SystemNotice::set_has_state() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SystemNotice::clear_has_state() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SystemNotice::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 SystemNotice::state() const {
  return state_;
}
inline void SystemNotice::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional string title = 9;
inline bool SystemNotice::has_title() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SystemNotice::set_has_title() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SystemNotice::clear_has_title() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SystemNotice::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& SystemNotice::title() const {
  return *title_;
}
inline void SystemNotice::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SystemNotice::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void SystemNotice::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SystemNotice::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* SystemNotice::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SystemNotice::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SystemNoticeOp

// required int32 op = 1;
inline bool SystemNoticeOp::has_op() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SystemNoticeOp::set_has_op() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SystemNoticeOp::clear_has_op() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SystemNoticeOp::clear_op() {
  op_ = 0;
  clear_has_op();
}
inline ::google::protobuf::int32 SystemNoticeOp::op() const {
  return op_;
}
inline void SystemNoticeOp::set_op(::google::protobuf::int32 value) {
  set_has_op();
  op_ = value;
}

// repeated .SystemNoticeProto.SystemNotice noticeList = 2;
inline int SystemNoticeOp::noticelist_size() const {
  return noticelist_.size();
}
inline void SystemNoticeOp::clear_noticelist() {
  noticelist_.Clear();
}
inline const ::SystemNoticeProto::SystemNotice& SystemNoticeOp::noticelist(int index) const {
  return noticelist_.Get(index);
}
inline ::SystemNoticeProto::SystemNotice* SystemNoticeOp::mutable_noticelist(int index) {
  return noticelist_.Mutable(index);
}
inline ::SystemNoticeProto::SystemNotice* SystemNoticeOp::add_noticelist() {
  return noticelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::SystemNotice >&
SystemNoticeOp::noticelist() const {
  return noticelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::SystemNotice >*
SystemNoticeOp::mutable_noticelist() {
  return &noticelist_;
}

// optional int32 startNumber = 3;
inline bool SystemNoticeOp::has_startnumber() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SystemNoticeOp::set_has_startnumber() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SystemNoticeOp::clear_has_startnumber() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SystemNoticeOp::clear_startnumber() {
  startnumber_ = 0;
  clear_has_startnumber();
}
inline ::google::protobuf::int32 SystemNoticeOp::startnumber() const {
  return startnumber_;
}
inline void SystemNoticeOp::set_startnumber(::google::protobuf::int32 value) {
  set_has_startnumber();
  startnumber_ = value;
}

// optional int32 endNumber = 4;
inline bool SystemNoticeOp::has_endnumber() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SystemNoticeOp::set_has_endnumber() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SystemNoticeOp::clear_has_endnumber() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SystemNoticeOp::clear_endnumber() {
  endnumber_ = 0;
  clear_has_endnumber();
}
inline ::google::protobuf::int32 SystemNoticeOp::endnumber() const {
  return endnumber_;
}
inline void SystemNoticeOp::set_endnumber(::google::protobuf::int32 value) {
  set_has_endnumber();
  endnumber_ = value;
}

// optional int32 totalNumber = 5;
inline bool SystemNoticeOp::has_totalnumber() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SystemNoticeOp::set_has_totalnumber() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SystemNoticeOp::clear_has_totalnumber() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SystemNoticeOp::clear_totalnumber() {
  totalnumber_ = 0;
  clear_has_totalnumber();
}
inline ::google::protobuf::int32 SystemNoticeOp::totalnumber() const {
  return totalnumber_;
}
inline void SystemNoticeOp::set_totalnumber(::google::protobuf::int32 value) {
  set_has_totalnumber();
  totalnumber_ = value;
}

// -------------------------------------------------------------------

// ClientNoticeUIHL

// repeated .SystemNoticeProto.UIHighLight list = 1;
inline int ClientNoticeUIHL::list_size() const {
  return list_.size();
}
inline void ClientNoticeUIHL::clear_list() {
  list_.Clear();
}
inline const ::SystemNoticeProto::UIHighLight& ClientNoticeUIHL::list(int index) const {
  return list_.Get(index);
}
inline ::SystemNoticeProto::UIHighLight* ClientNoticeUIHL::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::SystemNoticeProto::UIHighLight* ClientNoticeUIHL::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::UIHighLight >&
ClientNoticeUIHL::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::UIHighLight >*
ClientNoticeUIHL::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// UIHighLight

// required int32 type = 1;
inline bool UIHighLight::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UIHighLight::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UIHighLight::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UIHighLight::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 UIHighLight::type() const {
  return type_;
}
inline void UIHighLight::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 value = 2;
inline bool UIHighLight::has_value() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void UIHighLight::set_has_value() {
  _has_bits_[0] |= 0x00000002u;
}
inline void UIHighLight::clear_has_value() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void UIHighLight::clear_value() {
  value_ = 0;
  clear_has_value();
}
inline ::google::protobuf::int32 UIHighLight::value() const {
  return value_;
}
inline void UIHighLight::set_value(::google::protobuf::int32 value) {
  set_has_value();
  value_ = value;
}

// -------------------------------------------------------------------

// ToClientUIHL

// repeated .SystemNoticeProto.UIHL list = 1;
inline int ToClientUIHL::list_size() const {
  return list_.size();
}
inline void ToClientUIHL::clear_list() {
  list_.Clear();
}
inline const ::SystemNoticeProto::UIHL& ToClientUIHL::list(int index) const {
  return list_.Get(index);
}
inline ::SystemNoticeProto::UIHL* ToClientUIHL::mutable_list(int index) {
  return list_.Mutable(index);
}
inline ::SystemNoticeProto::UIHL* ToClientUIHL::add_list() {
  return list_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::UIHL >&
ToClientUIHL::list() const {
  return list_;
}
inline ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::UIHL >*
ToClientUIHL::mutable_list() {
  return &list_;
}

// -------------------------------------------------------------------

// UIHL

// optional int32 bigType = 1;
inline bool UIHL::has_bigtype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void UIHL::set_has_bigtype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void UIHL::clear_has_bigtype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void UIHL::clear_bigtype() {
  bigtype_ = 0;
  clear_has_bigtype();
}
inline ::google::protobuf::int32 UIHL::bigtype() const {
  return bigtype_;
}
inline void UIHL::set_bigtype(::google::protobuf::int32 value) {
  set_has_bigtype();
  bigtype_ = value;
}

// repeated int32 smallType = 2;
inline int UIHL::smalltype_size() const {
  return smalltype_.size();
}
inline void UIHL::clear_smalltype() {
  smalltype_.Clear();
}
inline ::google::protobuf::int32 UIHL::smalltype(int index) const {
  return smalltype_.Get(index);
}
inline void UIHL::set_smalltype(int index, ::google::protobuf::int32 value) {
  smalltype_.Set(index, value);
}
inline void UIHL::add_smalltype(::google::protobuf::int32 value) {
  smalltype_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UIHL::smalltype() const {
  return smalltype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UIHL::mutable_smalltype() {
  return &smalltype_;
}

// repeated int32 value = 3;
inline int UIHL::value_size() const {
  return value_.size();
}
inline void UIHL::clear_value() {
  value_.Clear();
}
inline ::google::protobuf::int32 UIHL::value(int index) const {
  return value_.Get(index);
}
inline void UIHL::set_value(int index, ::google::protobuf::int32 value) {
  value_.Set(index, value);
}
inline void UIHL::add_value(::google::protobuf::int32 value) {
  value_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
UIHL::value() const {
  return value_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
UIHL::mutable_value() {
  return &value_;
}

// -------------------------------------------------------------------

// ClientNotice

// required string title = 1;
inline bool ClientNotice::has_title() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientNotice::set_has_title() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientNotice::clear_has_title() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientNotice::clear_title() {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    title_->clear();
  }
  clear_has_title();
}
inline const ::std::string& ClientNotice::title() const {
  return *title_;
}
inline void ClientNotice::set_title(const ::std::string& value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ClientNotice::set_title(const char* value) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(value);
}
inline void ClientNotice::set_title(const char* value, size_t size) {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  title_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientNotice::mutable_title() {
  set_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    title_ = new ::std::string;
  }
  return title_;
}
inline ::std::string* ClientNotice::release_title() {
  clear_has_title();
  if (title_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = title_;
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientNotice::set_allocated_title(::std::string* title) {
  if (title_ != &::google::protobuf::internal::kEmptyString) {
    delete title_;
  }
  if (title) {
    set_has_title();
    title_ = title;
  } else {
    clear_has_title();
    title_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string content = 2;
inline bool ClientNotice::has_content() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientNotice::set_has_content() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientNotice::clear_has_content() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientNotice::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& ClientNotice::content() const {
  return *content_;
}
inline void ClientNotice::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ClientNotice::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void ClientNotice::set_content(const char* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientNotice::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* ClientNotice::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientNotice::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ToClientNotice

// repeated .SystemNoticeProto.ClientNotice noticeList = 1;
inline int ToClientNotice::noticelist_size() const {
  return noticelist_.size();
}
inline void ToClientNotice::clear_noticelist() {
  noticelist_.Clear();
}
inline const ::SystemNoticeProto::ClientNotice& ToClientNotice::noticelist(int index) const {
  return noticelist_.Get(index);
}
inline ::SystemNoticeProto::ClientNotice* ToClientNotice::mutable_noticelist(int index) {
  return noticelist_.Mutable(index);
}
inline ::SystemNoticeProto::ClientNotice* ToClientNotice::add_noticelist() {
  return noticelist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::ClientNotice >&
ToClientNotice::noticelist() const {
  return noticelist_;
}
inline ::google::protobuf::RepeatedPtrField< ::SystemNoticeProto::ClientNotice >*
ToClientNotice::mutable_noticelist() {
  return &noticelist_;
}

// -------------------------------------------------------------------

// ToClientNoticeArena

// optional int64 time = 1;
inline bool ToClientNoticeArena::has_time() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToClientNoticeArena::set_has_time() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToClientNoticeArena::clear_has_time() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToClientNoticeArena::clear_time() {
  time_ = GOOGLE_LONGLONG(0);
  clear_has_time();
}
inline ::google::protobuf::int64 ToClientNoticeArena::time() const {
  return time_;
}
inline void ToClientNoticeArena::set_time(::google::protobuf::int64 value) {
  set_has_time();
  time_ = value;
}

// optional string name = 2;
inline bool ToClientNoticeArena::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToClientNoticeArena::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToClientNoticeArena::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToClientNoticeArena::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ToClientNoticeArena::name() const {
  return *name_;
}
inline void ToClientNoticeArena::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ToClientNoticeArena::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ToClientNoticeArena::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ToClientNoticeArena::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ToClientNoticeArena::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ToClientNoticeArena::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 flag = 3;
inline bool ToClientNoticeArena::has_flag() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ToClientNoticeArena::set_has_flag() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ToClientNoticeArena::clear_has_flag() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ToClientNoticeArena::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 ToClientNoticeArena::flag() const {
  return flag_;
}
inline void ToClientNoticeArena::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// optional int32 ranking = 4;
inline bool ToClientNoticeArena::has_ranking() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ToClientNoticeArena::set_has_ranking() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ToClientNoticeArena::clear_has_ranking() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ToClientNoticeArena::clear_ranking() {
  ranking_ = 0;
  clear_has_ranking();
}
inline ::google::protobuf::int32 ToClientNoticeArena::ranking() const {
  return ranking_;
}
inline void ToClientNoticeArena::set_ranking(::google::protobuf::int32 value) {
  set_has_ranking();
  ranking_ = value;
}

// -------------------------------------------------------------------

// HintClientTaskPanel

// repeated int32 bigType = 1;
inline int HintClientTaskPanel::bigtype_size() const {
  return bigtype_.size();
}
inline void HintClientTaskPanel::clear_bigtype() {
  bigtype_.Clear();
}
inline ::google::protobuf::int32 HintClientTaskPanel::bigtype(int index) const {
  return bigtype_.Get(index);
}
inline void HintClientTaskPanel::set_bigtype(int index, ::google::protobuf::int32 value) {
  bigtype_.Set(index, value);
}
inline void HintClientTaskPanel::add_bigtype(::google::protobuf::int32 value) {
  bigtype_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HintClientTaskPanel::bigtype() const {
  return bigtype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HintClientTaskPanel::mutable_bigtype() {
  return &bigtype_;
}

// repeated int32 smallType = 2;
inline int HintClientTaskPanel::smalltype_size() const {
  return smalltype_.size();
}
inline void HintClientTaskPanel::clear_smalltype() {
  smalltype_.Clear();
}
inline ::google::protobuf::int32 HintClientTaskPanel::smalltype(int index) const {
  return smalltype_.Get(index);
}
inline void HintClientTaskPanel::set_smalltype(int index, ::google::protobuf::int32 value) {
  smalltype_.Set(index, value);
}
inline void HintClientTaskPanel::add_smalltype(::google::protobuf::int32 value) {
  smalltype_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HintClientTaskPanel::smalltype() const {
  return smalltype_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HintClientTaskPanel::mutable_smalltype() {
  return &smalltype_;
}

// repeated int32 fValue = 3;
inline int HintClientTaskPanel::fvalue_size() const {
  return fvalue_.size();
}
inline void HintClientTaskPanel::clear_fvalue() {
  fvalue_.Clear();
}
inline ::google::protobuf::int32 HintClientTaskPanel::fvalue(int index) const {
  return fvalue_.Get(index);
}
inline void HintClientTaskPanel::set_fvalue(int index, ::google::protobuf::int32 value) {
  fvalue_.Set(index, value);
}
inline void HintClientTaskPanel::add_fvalue(::google::protobuf::int32 value) {
  fvalue_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HintClientTaskPanel::fvalue() const {
  return fvalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HintClientTaskPanel::mutable_fvalue() {
  return &fvalue_;
}

// repeated int32 sValue = 4;
inline int HintClientTaskPanel::svalue_size() const {
  return svalue_.size();
}
inline void HintClientTaskPanel::clear_svalue() {
  svalue_.Clear();
}
inline ::google::protobuf::int32 HintClientTaskPanel::svalue(int index) const {
  return svalue_.Get(index);
}
inline void HintClientTaskPanel::set_svalue(int index, ::google::protobuf::int32 value) {
  svalue_.Set(index, value);
}
inline void HintClientTaskPanel::add_svalue(::google::protobuf::int32 value) {
  svalue_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
HintClientTaskPanel::svalue() const {
  return svalue_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
HintClientTaskPanel::mutable_svalue() {
  return &svalue_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SystemNoticeProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_SystemNotice_2fSystemNotice_2eproto__INCLUDED
