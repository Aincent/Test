// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Marry/MarryInstance.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Marry/MarryInstance.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MarryInstanceInfo {

namespace {

const ::google::protobuf::Descriptor* vocativepartner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  vocativepartner_reflection_ = NULL;
const ::google::protobuf::Descriptor* TellAnothervocativepartner_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TellAnothervocativepartner_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReadyChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReadyChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetReadyChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetReadyChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* TellAnotherReadyChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TellAnotherReadyChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* StopChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StopChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetStopChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetStopChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* TellAnotherStopChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TellAnotherStopChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysMarryInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysMarryInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* StartChallenge_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  StartChallenge_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskJumpPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskJumpPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetAskJumpPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetAskJumpPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMForceClientJumpMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMForceClientJumpMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskDownPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskDownPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetAskDownPoint_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetAskDownPoint_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMForceClientDownMap_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMForceClientDownMap_reflection_ = NULL;
const ::google::protobuf::Descriptor* AskSupportOther_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AskSupportOther_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetAskSupportOther_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetAskSupportOther_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMToWSDelMarryCarbon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMToWSDelMarryCarbon_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Marry_2fMarryInstance_2eproto() {
  protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Marry/MarryInstance.proto");
  GOOGLE_CHECK(file != NULL);
  vocativepartner_descriptor_ = file->message_type(0);
  static const int vocativepartner_offsets_[1] = {
  };
  vocativepartner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      vocativepartner_descriptor_,
      vocativepartner::default_instance_,
      vocativepartner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vocativepartner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(vocativepartner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(vocativepartner));
  TellAnothervocativepartner_descriptor_ = file->message_type(1);
  static const int TellAnothervocativepartner_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellAnothervocativepartner, charid_),
  };
  TellAnothervocativepartner_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TellAnothervocativepartner_descriptor_,
      TellAnothervocativepartner::default_instance_,
      TellAnothervocativepartner_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellAnothervocativepartner, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellAnothervocativepartner, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TellAnothervocativepartner));
  ReadyChallenge_descriptor_ = file->message_type(2);
  static const int ReadyChallenge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyChallenge, mapid_),
  };
  ReadyChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReadyChallenge_descriptor_,
      ReadyChallenge::default_instance_,
      ReadyChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReadyChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReadyChallenge));
  RetReadyChallenge_descriptor_ = file->message_type(3);
  static const int RetReadyChallenge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetReadyChallenge, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetReadyChallenge, coutdowntime_),
  };
  RetReadyChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetReadyChallenge_descriptor_,
      RetReadyChallenge::default_instance_,
      RetReadyChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetReadyChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetReadyChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetReadyChallenge));
  TellAnotherReadyChallenge_descriptor_ = file->message_type(4);
  static const int TellAnotherReadyChallenge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellAnotherReadyChallenge, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellAnotherReadyChallenge, coutdowntime_),
  };
  TellAnotherReadyChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TellAnotherReadyChallenge_descriptor_,
      TellAnotherReadyChallenge::default_instance_,
      TellAnotherReadyChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellAnotherReadyChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellAnotherReadyChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TellAnotherReadyChallenge));
  StopChallenge_descriptor_ = file->message_type(5);
  static const int StopChallenge_offsets_[1] = {
  };
  StopChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StopChallenge_descriptor_,
      StopChallenge::default_instance_,
      StopChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StopChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StopChallenge));
  RetStopChallenge_descriptor_ = file->message_type(6);
  static const int RetStopChallenge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetStopChallenge, ret_),
  };
  RetStopChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetStopChallenge_descriptor_,
      RetStopChallenge::default_instance_,
      RetStopChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetStopChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetStopChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetStopChallenge));
  TellAnotherStopChallenge_descriptor_ = file->message_type(7);
  static const int TellAnotherStopChallenge_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellAnotherStopChallenge, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellAnotherStopChallenge, charid_),
  };
  TellAnotherStopChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TellAnotherStopChallenge_descriptor_,
      TellAnotherStopChallenge::default_instance_,
      TellAnotherStopChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellAnotherStopChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TellAnotherStopChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TellAnotherStopChallenge));
  SysMarryInstance_descriptor_ = file->message_type(8);
  static const int SysMarryInstance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMarryInstance, id_),
  };
  SysMarryInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysMarryInstance_descriptor_,
      SysMarryInstance::default_instance_,
      SysMarryInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMarryInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMarryInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysMarryInstance));
  StartChallenge_descriptor_ = file->message_type(9);
  static const int StartChallenge_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartChallenge, coutdowntime_),
  };
  StartChallenge_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      StartChallenge_descriptor_,
      StartChallenge::default_instance_,
      StartChallenge_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartChallenge, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(StartChallenge, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(StartChallenge));
  AskJumpPoint_descriptor_ = file->message_type(10);
  static const int AskJumpPoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskJumpPoint, id_),
  };
  AskJumpPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskJumpPoint_descriptor_,
      AskJumpPoint::default_instance_,
      AskJumpPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskJumpPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskJumpPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskJumpPoint));
  RetAskJumpPoint_descriptor_ = file->message_type(11);
  static const int RetAskJumpPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAskJumpPoint, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAskJumpPoint, id_),
  };
  RetAskJumpPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetAskJumpPoint_descriptor_,
      RetAskJumpPoint::default_instance_,
      RetAskJumpPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAskJumpPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAskJumpPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetAskJumpPoint));
  GMForceClientJumpMap_descriptor_ = file->message_type(12);
  static const int GMForceClientJumpMap_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientJumpMap, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientJumpMap, id_),
  };
  GMForceClientJumpMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMForceClientJumpMap_descriptor_,
      GMForceClientJumpMap::default_instance_,
      GMForceClientJumpMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientJumpMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientJumpMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMForceClientJumpMap));
  AskDownPoint_descriptor_ = file->message_type(13);
  static const int AskDownPoint_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskDownPoint, id_),
  };
  AskDownPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskDownPoint_descriptor_,
      AskDownPoint::default_instance_,
      AskDownPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskDownPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskDownPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskDownPoint));
  RetAskDownPoint_descriptor_ = file->message_type(14);
  static const int RetAskDownPoint_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAskDownPoint, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAskDownPoint, id_),
  };
  RetAskDownPoint_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetAskDownPoint_descriptor_,
      RetAskDownPoint::default_instance_,
      RetAskDownPoint_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAskDownPoint, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAskDownPoint, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetAskDownPoint));
  GMForceClientDownMap_descriptor_ = file->message_type(15);
  static const int GMForceClientDownMap_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientDownMap, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientDownMap, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientDownMap, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientDownMap, ypos_),
  };
  GMForceClientDownMap_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMForceClientDownMap_descriptor_,
      GMForceClientDownMap::default_instance_,
      GMForceClientDownMap_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientDownMap, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMForceClientDownMap, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMForceClientDownMap));
  AskSupportOther_descriptor_ = file->message_type(16);
  static const int AskSupportOther_offsets_[1] = {
  };
  AskSupportOther_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AskSupportOther_descriptor_,
      AskSupportOther::default_instance_,
      AskSupportOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSupportOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AskSupportOther, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AskSupportOther));
  RetAskSupportOther_descriptor_ = file->message_type(17);
  static const int RetAskSupportOther_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAskSupportOther, ret_),
  };
  RetAskSupportOther_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetAskSupportOther_descriptor_,
      RetAskSupportOther::default_instance_,
      RetAskSupportOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAskSupportOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetAskSupportOther, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetAskSupportOther));
  GMToWSDelMarryCarbon_descriptor_ = file->message_type(18);
  static const int GMToWSDelMarryCarbon_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToWSDelMarryCarbon, charidf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToWSDelMarryCarbon, charids_),
  };
  GMToWSDelMarryCarbon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMToWSDelMarryCarbon_descriptor_,
      GMToWSDelMarryCarbon::default_instance_,
      GMToWSDelMarryCarbon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToWSDelMarryCarbon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToWSDelMarryCarbon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMToWSDelMarryCarbon));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Marry_2fMarryInstance_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    vocativepartner_descriptor_, &vocativepartner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TellAnothervocativepartner_descriptor_, &TellAnothervocativepartner::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReadyChallenge_descriptor_, &ReadyChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetReadyChallenge_descriptor_, &RetReadyChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TellAnotherReadyChallenge_descriptor_, &TellAnotherReadyChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StopChallenge_descriptor_, &StopChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetStopChallenge_descriptor_, &RetStopChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TellAnotherStopChallenge_descriptor_, &TellAnotherStopChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysMarryInstance_descriptor_, &SysMarryInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    StartChallenge_descriptor_, &StartChallenge::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskJumpPoint_descriptor_, &AskJumpPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetAskJumpPoint_descriptor_, &RetAskJumpPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMForceClientJumpMap_descriptor_, &GMForceClientJumpMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskDownPoint_descriptor_, &AskDownPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetAskDownPoint_descriptor_, &RetAskDownPoint::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMForceClientDownMap_descriptor_, &GMForceClientDownMap::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AskSupportOther_descriptor_, &AskSupportOther::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetAskSupportOther_descriptor_, &RetAskSupportOther::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMToWSDelMarryCarbon_descriptor_, &GMToWSDelMarryCarbon::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Marry_2fMarryInstance_2eproto() {
  delete vocativepartner::default_instance_;
  delete vocativepartner_reflection_;
  delete TellAnothervocativepartner::default_instance_;
  delete TellAnothervocativepartner_reflection_;
  delete ReadyChallenge::default_instance_;
  delete ReadyChallenge_reflection_;
  delete RetReadyChallenge::default_instance_;
  delete RetReadyChallenge_reflection_;
  delete TellAnotherReadyChallenge::default_instance_;
  delete TellAnotherReadyChallenge_reflection_;
  delete StopChallenge::default_instance_;
  delete StopChallenge_reflection_;
  delete RetStopChallenge::default_instance_;
  delete RetStopChallenge_reflection_;
  delete TellAnotherStopChallenge::default_instance_;
  delete TellAnotherStopChallenge_reflection_;
  delete SysMarryInstance::default_instance_;
  delete SysMarryInstance_reflection_;
  delete StartChallenge::default_instance_;
  delete StartChallenge_reflection_;
  delete AskJumpPoint::default_instance_;
  delete AskJumpPoint_reflection_;
  delete RetAskJumpPoint::default_instance_;
  delete RetAskJumpPoint_reflection_;
  delete GMForceClientJumpMap::default_instance_;
  delete GMForceClientJumpMap_reflection_;
  delete AskDownPoint::default_instance_;
  delete AskDownPoint_reflection_;
  delete RetAskDownPoint::default_instance_;
  delete RetAskDownPoint_reflection_;
  delete GMForceClientDownMap::default_instance_;
  delete GMForceClientDownMap_reflection_;
  delete AskSupportOther::default_instance_;
  delete AskSupportOther_reflection_;
  delete RetAskSupportOther::default_instance_;
  delete RetAskSupportOther_reflection_;
  delete GMToWSDelMarryCarbon::default_instance_;
  delete GMToWSDelMarryCarbon_reflection_;
}

void protobuf_AddDesc_Marry_2fMarryInstance_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031Marry/MarryInstance.proto\022\021MarryInstan"
    "ceInfo\"\021\n\017vocativepartner\",\n\032TellAnother"
    "vocativepartner\022\016\n\006charid\030\001 \002(\003\"\037\n\016Ready"
    "Challenge\022\r\n\005mapid\030\001 \002(\005\"6\n\021RetReadyChal"
    "lenge\022\013\n\003ret\030\001 \002(\005\022\024\n\014coutdowntime\030\002 \001(\005"
    "\"A\n\031TellAnotherReadyChallenge\022\016\n\006charid\030"
    "\001 \002(\003\022\024\n\014coutdowntime\030\002 \001(\005\"\017\n\rStopChall"
    "enge\"\037\n\020RetStopChallenge\022\013\n\003ret\030\001 \002(\005\"7\n"
    "\030TellAnotherStopChallenge\022\013\n\003ret\030\001 \002(\005\022\016"
    "\n\006charid\030\002 \001(\003\"\036\n\020SysMarryInstance\022\n\n\002id"
    "\030\001 \002(\003\"&\n\016StartChallenge\022\024\n\014coutdowntime"
    "\030\001 \001(\005\"\032\n\014AskJumpPoint\022\n\n\002id\030\001 \002(\005\"*\n\017Re"
    "tAskJumpPoint\022\013\n\003ret\030\001 \002(\005\022\n\n\002id\030\002 \001(\005\"2"
    "\n\024GMForceClientJumpMap\022\016\n\006charid\030\001 \002(\003\022\n"
    "\n\002id\030\002 \001(\005\"\032\n\014AskDownPoint\022\n\n\002id\030\001 \002(\005\"*"
    "\n\017RetAskDownPoint\022\013\n\003ret\030\001 \002(\005\022\n\n\002id\030\002 \001"
    "(\005\"Q\n\024GMForceClientDownMap\022\016\n\006charid\030\001 \002"
    "(\003\022\r\n\005mapid\030\002 \001(\003\022\014\n\004xpos\030\003 \001(\005\022\014\n\004ypos\030"
    "\004 \001(\005\"\021\n\017AskSupportOther\"!\n\022RetAskSuppor"
    "tOther\022\013\n\003ret\030\001 \002(\005\"8\n\024GMToWSDelMarryCar"
    "bon\022\017\n\007charidf\030\001 \002(\003\022\017\n\007charids\030\002 \002(\003", 837);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Marry/MarryInstance.proto", &protobuf_RegisterTypes);
  vocativepartner::default_instance_ = new vocativepartner();
  TellAnothervocativepartner::default_instance_ = new TellAnothervocativepartner();
  ReadyChallenge::default_instance_ = new ReadyChallenge();
  RetReadyChallenge::default_instance_ = new RetReadyChallenge();
  TellAnotherReadyChallenge::default_instance_ = new TellAnotherReadyChallenge();
  StopChallenge::default_instance_ = new StopChallenge();
  RetStopChallenge::default_instance_ = new RetStopChallenge();
  TellAnotherStopChallenge::default_instance_ = new TellAnotherStopChallenge();
  SysMarryInstance::default_instance_ = new SysMarryInstance();
  StartChallenge::default_instance_ = new StartChallenge();
  AskJumpPoint::default_instance_ = new AskJumpPoint();
  RetAskJumpPoint::default_instance_ = new RetAskJumpPoint();
  GMForceClientJumpMap::default_instance_ = new GMForceClientJumpMap();
  AskDownPoint::default_instance_ = new AskDownPoint();
  RetAskDownPoint::default_instance_ = new RetAskDownPoint();
  GMForceClientDownMap::default_instance_ = new GMForceClientDownMap();
  AskSupportOther::default_instance_ = new AskSupportOther();
  RetAskSupportOther::default_instance_ = new RetAskSupportOther();
  GMToWSDelMarryCarbon::default_instance_ = new GMToWSDelMarryCarbon();
  vocativepartner::default_instance_->InitAsDefaultInstance();
  TellAnothervocativepartner::default_instance_->InitAsDefaultInstance();
  ReadyChallenge::default_instance_->InitAsDefaultInstance();
  RetReadyChallenge::default_instance_->InitAsDefaultInstance();
  TellAnotherReadyChallenge::default_instance_->InitAsDefaultInstance();
  StopChallenge::default_instance_->InitAsDefaultInstance();
  RetStopChallenge::default_instance_->InitAsDefaultInstance();
  TellAnotherStopChallenge::default_instance_->InitAsDefaultInstance();
  SysMarryInstance::default_instance_->InitAsDefaultInstance();
  StartChallenge::default_instance_->InitAsDefaultInstance();
  AskJumpPoint::default_instance_->InitAsDefaultInstance();
  RetAskJumpPoint::default_instance_->InitAsDefaultInstance();
  GMForceClientJumpMap::default_instance_->InitAsDefaultInstance();
  AskDownPoint::default_instance_->InitAsDefaultInstance();
  RetAskDownPoint::default_instance_->InitAsDefaultInstance();
  GMForceClientDownMap::default_instance_->InitAsDefaultInstance();
  AskSupportOther::default_instance_->InitAsDefaultInstance();
  RetAskSupportOther::default_instance_->InitAsDefaultInstance();
  GMToWSDelMarryCarbon::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Marry_2fMarryInstance_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Marry_2fMarryInstance_2eproto {
  StaticDescriptorInitializer_Marry_2fMarryInstance_2eproto() {
    protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  }
} static_descriptor_initializer_Marry_2fMarryInstance_2eproto_;

// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

vocativepartner::vocativepartner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void vocativepartner::InitAsDefaultInstance() {
}

vocativepartner::vocativepartner(const vocativepartner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void vocativepartner::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

vocativepartner::~vocativepartner() {
  SharedDtor();
}

void vocativepartner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void vocativepartner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* vocativepartner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return vocativepartner_descriptor_;
}

const vocativepartner& vocativepartner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

vocativepartner* vocativepartner::default_instance_ = NULL;

vocativepartner* vocativepartner::New() const {
  return new vocativepartner;
}

void vocativepartner::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool vocativepartner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void vocativepartner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* vocativepartner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int vocativepartner::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void vocativepartner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const vocativepartner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const vocativepartner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void vocativepartner::MergeFrom(const vocativepartner& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void vocativepartner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void vocativepartner::CopyFrom(const vocativepartner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool vocativepartner::IsInitialized() const {

  return true;
}

void vocativepartner::Swap(vocativepartner* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata vocativepartner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = vocativepartner_descriptor_;
  metadata.reflection = vocativepartner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TellAnothervocativepartner::kCharidFieldNumber;
#endif  // !_MSC_VER

TellAnothervocativepartner::TellAnothervocativepartner()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TellAnothervocativepartner::InitAsDefaultInstance() {
}

TellAnothervocativepartner::TellAnothervocativepartner(const TellAnothervocativepartner& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TellAnothervocativepartner::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TellAnothervocativepartner::~TellAnothervocativepartner() {
  SharedDtor();
}

void TellAnothervocativepartner::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TellAnothervocativepartner::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TellAnothervocativepartner::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TellAnothervocativepartner_descriptor_;
}

const TellAnothervocativepartner& TellAnothervocativepartner::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

TellAnothervocativepartner* TellAnothervocativepartner::default_instance_ = NULL;

TellAnothervocativepartner* TellAnothervocativepartner::New() const {
  return new TellAnothervocativepartner;
}

void TellAnothervocativepartner::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TellAnothervocativepartner::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TellAnothervocativepartner::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TellAnothervocativepartner::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TellAnothervocativepartner::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TellAnothervocativepartner::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TellAnothervocativepartner* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TellAnothervocativepartner*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TellAnothervocativepartner::MergeFrom(const TellAnothervocativepartner& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TellAnothervocativepartner::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TellAnothervocativepartner::CopyFrom(const TellAnothervocativepartner& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TellAnothervocativepartner::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TellAnothervocativepartner::Swap(TellAnothervocativepartner* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TellAnothervocativepartner::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TellAnothervocativepartner_descriptor_;
  metadata.reflection = TellAnothervocativepartner_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReadyChallenge::kMapidFieldNumber;
#endif  // !_MSC_VER

ReadyChallenge::ReadyChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReadyChallenge::InitAsDefaultInstance() {
}

ReadyChallenge::ReadyChallenge(const ReadyChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReadyChallenge::SharedCtor() {
  _cached_size_ = 0;
  mapid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReadyChallenge::~ReadyChallenge() {
  SharedDtor();
}

void ReadyChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReadyChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReadyChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReadyChallenge_descriptor_;
}

const ReadyChallenge& ReadyChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

ReadyChallenge* ReadyChallenge::default_instance_ = NULL;

ReadyChallenge* ReadyChallenge::New() const {
  return new ReadyChallenge;
}

void ReadyChallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mapid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReadyChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReadyChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->mapid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReadyChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 mapid = 1;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->mapid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReadyChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 mapid = 1;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mapid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReadyChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReadyChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReadyChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReadyChallenge::MergeFrom(const ReadyChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReadyChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReadyChallenge::CopyFrom(const ReadyChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReadyChallenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReadyChallenge::Swap(ReadyChallenge* other) {
  if (other != this) {
    std::swap(mapid_, other->mapid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReadyChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReadyChallenge_descriptor_;
  metadata.reflection = ReadyChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetReadyChallenge::kRetFieldNumber;
const int RetReadyChallenge::kCoutdowntimeFieldNumber;
#endif  // !_MSC_VER

RetReadyChallenge::RetReadyChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetReadyChallenge::InitAsDefaultInstance() {
}

RetReadyChallenge::RetReadyChallenge(const RetReadyChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetReadyChallenge::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  coutdowntime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetReadyChallenge::~RetReadyChallenge() {
  SharedDtor();
}

void RetReadyChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetReadyChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetReadyChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetReadyChallenge_descriptor_;
}

const RetReadyChallenge& RetReadyChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

RetReadyChallenge* RetReadyChallenge::default_instance_ = NULL;

RetReadyChallenge* RetReadyChallenge::New() const {
  return new RetReadyChallenge;
}

void RetReadyChallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    coutdowntime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetReadyChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coutdowntime;
        break;
      }

      // optional int32 coutdowntime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coutdowntime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coutdowntime_)));
          set_has_coutdowntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetReadyChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 coutdowntime = 2;
  if (has_coutdowntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coutdowntime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetReadyChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 coutdowntime = 2;
  if (has_coutdowntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coutdowntime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetReadyChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 coutdowntime = 2;
    if (has_coutdowntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coutdowntime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetReadyChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetReadyChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetReadyChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetReadyChallenge::MergeFrom(const RetReadyChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_coutdowntime()) {
      set_coutdowntime(from.coutdowntime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetReadyChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetReadyChallenge::CopyFrom(const RetReadyChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetReadyChallenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetReadyChallenge::Swap(RetReadyChallenge* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(coutdowntime_, other->coutdowntime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetReadyChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetReadyChallenge_descriptor_;
  metadata.reflection = RetReadyChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TellAnotherReadyChallenge::kCharidFieldNumber;
const int TellAnotherReadyChallenge::kCoutdowntimeFieldNumber;
#endif  // !_MSC_VER

TellAnotherReadyChallenge::TellAnotherReadyChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TellAnotherReadyChallenge::InitAsDefaultInstance() {
}

TellAnotherReadyChallenge::TellAnotherReadyChallenge(const TellAnotherReadyChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TellAnotherReadyChallenge::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  coutdowntime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TellAnotherReadyChallenge::~TellAnotherReadyChallenge() {
  SharedDtor();
}

void TellAnotherReadyChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TellAnotherReadyChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TellAnotherReadyChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TellAnotherReadyChallenge_descriptor_;
}

const TellAnotherReadyChallenge& TellAnotherReadyChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

TellAnotherReadyChallenge* TellAnotherReadyChallenge::default_instance_ = NULL;

TellAnotherReadyChallenge* TellAnotherReadyChallenge::New() const {
  return new TellAnotherReadyChallenge;
}

void TellAnotherReadyChallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    coutdowntime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TellAnotherReadyChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_coutdowntime;
        break;
      }

      // optional int32 coutdowntime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_coutdowntime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coutdowntime_)));
          set_has_coutdowntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TellAnotherReadyChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int32 coutdowntime = 2;
  if (has_coutdowntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->coutdowntime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TellAnotherReadyChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int32 coutdowntime = 2;
  if (has_coutdowntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->coutdowntime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TellAnotherReadyChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 coutdowntime = 2;
    if (has_coutdowntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coutdowntime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TellAnotherReadyChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TellAnotherReadyChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TellAnotherReadyChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TellAnotherReadyChallenge::MergeFrom(const TellAnotherReadyChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_coutdowntime()) {
      set_coutdowntime(from.coutdowntime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TellAnotherReadyChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TellAnotherReadyChallenge::CopyFrom(const TellAnotherReadyChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TellAnotherReadyChallenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TellAnotherReadyChallenge::Swap(TellAnotherReadyChallenge* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(coutdowntime_, other->coutdowntime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TellAnotherReadyChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TellAnotherReadyChallenge_descriptor_;
  metadata.reflection = TellAnotherReadyChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

StopChallenge::StopChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StopChallenge::InitAsDefaultInstance() {
}

StopChallenge::StopChallenge(const StopChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StopChallenge::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StopChallenge::~StopChallenge() {
  SharedDtor();
}

void StopChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StopChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StopChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StopChallenge_descriptor_;
}

const StopChallenge& StopChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

StopChallenge* StopChallenge::default_instance_ = NULL;

StopChallenge* StopChallenge::New() const {
  return new StopChallenge;
}

void StopChallenge::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StopChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void StopChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StopChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StopChallenge::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StopChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StopChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StopChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StopChallenge::MergeFrom(const StopChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StopChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StopChallenge::CopyFrom(const StopChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StopChallenge::IsInitialized() const {

  return true;
}

void StopChallenge::Swap(StopChallenge* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StopChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StopChallenge_descriptor_;
  metadata.reflection = StopChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetStopChallenge::kRetFieldNumber;
#endif  // !_MSC_VER

RetStopChallenge::RetStopChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetStopChallenge::InitAsDefaultInstance() {
}

RetStopChallenge::RetStopChallenge(const RetStopChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetStopChallenge::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetStopChallenge::~RetStopChallenge() {
  SharedDtor();
}

void RetStopChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetStopChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetStopChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetStopChallenge_descriptor_;
}

const RetStopChallenge& RetStopChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

RetStopChallenge* RetStopChallenge::default_instance_ = NULL;

RetStopChallenge* RetStopChallenge::New() const {
  return new RetStopChallenge;
}

void RetStopChallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetStopChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetStopChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetStopChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetStopChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetStopChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetStopChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetStopChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetStopChallenge::MergeFrom(const RetStopChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetStopChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetStopChallenge::CopyFrom(const RetStopChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetStopChallenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetStopChallenge::Swap(RetStopChallenge* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetStopChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetStopChallenge_descriptor_;
  metadata.reflection = RetStopChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TellAnotherStopChallenge::kRetFieldNumber;
const int TellAnotherStopChallenge::kCharidFieldNumber;
#endif  // !_MSC_VER

TellAnotherStopChallenge::TellAnotherStopChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TellAnotherStopChallenge::InitAsDefaultInstance() {
}

TellAnotherStopChallenge::TellAnotherStopChallenge(const TellAnotherStopChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TellAnotherStopChallenge::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TellAnotherStopChallenge::~TellAnotherStopChallenge() {
  SharedDtor();
}

void TellAnotherStopChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TellAnotherStopChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TellAnotherStopChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TellAnotherStopChallenge_descriptor_;
}

const TellAnotherStopChallenge& TellAnotherStopChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

TellAnotherStopChallenge* TellAnotherStopChallenge::default_instance_ = NULL;

TellAnotherStopChallenge* TellAnotherStopChallenge::New() const {
  return new TellAnotherStopChallenge;
}

void TellAnotherStopChallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TellAnotherStopChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional int64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TellAnotherStopChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TellAnotherStopChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TellAnotherStopChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TellAnotherStopChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TellAnotherStopChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TellAnotherStopChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TellAnotherStopChallenge::MergeFrom(const TellAnotherStopChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TellAnotherStopChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TellAnotherStopChallenge::CopyFrom(const TellAnotherStopChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TellAnotherStopChallenge::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TellAnotherStopChallenge::Swap(TellAnotherStopChallenge* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TellAnotherStopChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TellAnotherStopChallenge_descriptor_;
  metadata.reflection = TellAnotherStopChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysMarryInstance::kIdFieldNumber;
#endif  // !_MSC_VER

SysMarryInstance::SysMarryInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysMarryInstance::InitAsDefaultInstance() {
}

SysMarryInstance::SysMarryInstance(const SysMarryInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysMarryInstance::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysMarryInstance::~SysMarryInstance() {
  SharedDtor();
}

void SysMarryInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysMarryInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysMarryInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysMarryInstance_descriptor_;
}

const SysMarryInstance& SysMarryInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

SysMarryInstance* SysMarryInstance::default_instance_ = NULL;

SysMarryInstance* SysMarryInstance::New() const {
  return new SysMarryInstance;
}

void SysMarryInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysMarryInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysMarryInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysMarryInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysMarryInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysMarryInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysMarryInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysMarryInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysMarryInstance::MergeFrom(const SysMarryInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysMarryInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysMarryInstance::CopyFrom(const SysMarryInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysMarryInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SysMarryInstance::Swap(SysMarryInstance* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysMarryInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysMarryInstance_descriptor_;
  metadata.reflection = SysMarryInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int StartChallenge::kCoutdowntimeFieldNumber;
#endif  // !_MSC_VER

StartChallenge::StartChallenge()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void StartChallenge::InitAsDefaultInstance() {
}

StartChallenge::StartChallenge(const StartChallenge& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void StartChallenge::SharedCtor() {
  _cached_size_ = 0;
  coutdowntime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

StartChallenge::~StartChallenge() {
  SharedDtor();
}

void StartChallenge::SharedDtor() {
  if (this != default_instance_) {
  }
}

void StartChallenge::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* StartChallenge::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return StartChallenge_descriptor_;
}

const StartChallenge& StartChallenge::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

StartChallenge* StartChallenge::default_instance_ = NULL;

StartChallenge* StartChallenge::New() const {
  return new StartChallenge;
}

void StartChallenge::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    coutdowntime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool StartChallenge::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 coutdowntime = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &coutdowntime_)));
          set_has_coutdowntime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void StartChallenge::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 coutdowntime = 1;
  if (has_coutdowntime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->coutdowntime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* StartChallenge::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 coutdowntime = 1;
  if (has_coutdowntime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->coutdowntime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int StartChallenge::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 coutdowntime = 1;
    if (has_coutdowntime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->coutdowntime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void StartChallenge::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const StartChallenge* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const StartChallenge*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void StartChallenge::MergeFrom(const StartChallenge& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_coutdowntime()) {
      set_coutdowntime(from.coutdowntime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void StartChallenge::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void StartChallenge::CopyFrom(const StartChallenge& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool StartChallenge::IsInitialized() const {

  return true;
}

void StartChallenge::Swap(StartChallenge* other) {
  if (other != this) {
    std::swap(coutdowntime_, other->coutdowntime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata StartChallenge::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = StartChallenge_descriptor_;
  metadata.reflection = StartChallenge_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskJumpPoint::kIdFieldNumber;
#endif  // !_MSC_VER

AskJumpPoint::AskJumpPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskJumpPoint::InitAsDefaultInstance() {
}

AskJumpPoint::AskJumpPoint(const AskJumpPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskJumpPoint::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskJumpPoint::~AskJumpPoint() {
  SharedDtor();
}

void AskJumpPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskJumpPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskJumpPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskJumpPoint_descriptor_;
}

const AskJumpPoint& AskJumpPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

AskJumpPoint* AskJumpPoint::default_instance_ = NULL;

AskJumpPoint* AskJumpPoint::New() const {
  return new AskJumpPoint;
}

void AskJumpPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskJumpPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AskJumpPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskJumpPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskJumpPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskJumpPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskJumpPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskJumpPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskJumpPoint::MergeFrom(const AskJumpPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskJumpPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskJumpPoint::CopyFrom(const AskJumpPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskJumpPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AskJumpPoint::Swap(AskJumpPoint* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskJumpPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskJumpPoint_descriptor_;
  metadata.reflection = AskJumpPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetAskJumpPoint::kRetFieldNumber;
const int RetAskJumpPoint::kIdFieldNumber;
#endif  // !_MSC_VER

RetAskJumpPoint::RetAskJumpPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetAskJumpPoint::InitAsDefaultInstance() {
}

RetAskJumpPoint::RetAskJumpPoint(const RetAskJumpPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetAskJumpPoint::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetAskJumpPoint::~RetAskJumpPoint() {
  SharedDtor();
}

void RetAskJumpPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetAskJumpPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetAskJumpPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetAskJumpPoint_descriptor_;
}

const RetAskJumpPoint& RetAskJumpPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

RetAskJumpPoint* RetAskJumpPoint::default_instance_ = NULL;

RetAskJumpPoint* RetAskJumpPoint::New() const {
  return new RetAskJumpPoint;
}

void RetAskJumpPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetAskJumpPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetAskJumpPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetAskJumpPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetAskJumpPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetAskJumpPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetAskJumpPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetAskJumpPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetAskJumpPoint::MergeFrom(const RetAskJumpPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetAskJumpPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetAskJumpPoint::CopyFrom(const RetAskJumpPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetAskJumpPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetAskJumpPoint::Swap(RetAskJumpPoint* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetAskJumpPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetAskJumpPoint_descriptor_;
  metadata.reflection = RetAskJumpPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMForceClientJumpMap::kCharidFieldNumber;
const int GMForceClientJumpMap::kIdFieldNumber;
#endif  // !_MSC_VER

GMForceClientJumpMap::GMForceClientJumpMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMForceClientJumpMap::InitAsDefaultInstance() {
}

GMForceClientJumpMap::GMForceClientJumpMap(const GMForceClientJumpMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMForceClientJumpMap::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMForceClientJumpMap::~GMForceClientJumpMap() {
  SharedDtor();
}

void GMForceClientJumpMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMForceClientJumpMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMForceClientJumpMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMForceClientJumpMap_descriptor_;
}

const GMForceClientJumpMap& GMForceClientJumpMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

GMForceClientJumpMap* GMForceClientJumpMap::default_instance_ = NULL;

GMForceClientJumpMap* GMForceClientJumpMap::New() const {
  return new GMForceClientJumpMap;
}

void GMForceClientJumpMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMForceClientJumpMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMForceClientJumpMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMForceClientJumpMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMForceClientJumpMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMForceClientJumpMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMForceClientJumpMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMForceClientJumpMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMForceClientJumpMap::MergeFrom(const GMForceClientJumpMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMForceClientJumpMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMForceClientJumpMap::CopyFrom(const GMForceClientJumpMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMForceClientJumpMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMForceClientJumpMap::Swap(GMForceClientJumpMap* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMForceClientJumpMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMForceClientJumpMap_descriptor_;
  metadata.reflection = GMForceClientJumpMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AskDownPoint::kIdFieldNumber;
#endif  // !_MSC_VER

AskDownPoint::AskDownPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskDownPoint::InitAsDefaultInstance() {
}

AskDownPoint::AskDownPoint(const AskDownPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskDownPoint::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskDownPoint::~AskDownPoint() {
  SharedDtor();
}

void AskDownPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskDownPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskDownPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskDownPoint_descriptor_;
}

const AskDownPoint& AskDownPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

AskDownPoint* AskDownPoint::default_instance_ = NULL;

AskDownPoint* AskDownPoint::New() const {
  return new AskDownPoint;
}

void AskDownPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskDownPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AskDownPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskDownPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskDownPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskDownPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskDownPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskDownPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskDownPoint::MergeFrom(const AskDownPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskDownPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskDownPoint::CopyFrom(const AskDownPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskDownPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AskDownPoint::Swap(AskDownPoint* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskDownPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskDownPoint_descriptor_;
  metadata.reflection = AskDownPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetAskDownPoint::kRetFieldNumber;
const int RetAskDownPoint::kIdFieldNumber;
#endif  // !_MSC_VER

RetAskDownPoint::RetAskDownPoint()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetAskDownPoint::InitAsDefaultInstance() {
}

RetAskDownPoint::RetAskDownPoint(const RetAskDownPoint& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetAskDownPoint::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetAskDownPoint::~RetAskDownPoint() {
  SharedDtor();
}

void RetAskDownPoint::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetAskDownPoint::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetAskDownPoint::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetAskDownPoint_descriptor_;
}

const RetAskDownPoint& RetAskDownPoint::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

RetAskDownPoint* RetAskDownPoint::default_instance_ = NULL;

RetAskDownPoint* RetAskDownPoint::New() const {
  return new RetAskDownPoint;
}

void RetAskDownPoint::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    id_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetAskDownPoint::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetAskDownPoint::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetAskDownPoint::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetAskDownPoint::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetAskDownPoint::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetAskDownPoint* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetAskDownPoint*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetAskDownPoint::MergeFrom(const RetAskDownPoint& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetAskDownPoint::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetAskDownPoint::CopyFrom(const RetAskDownPoint& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetAskDownPoint::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetAskDownPoint::Swap(RetAskDownPoint* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetAskDownPoint::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetAskDownPoint_descriptor_;
  metadata.reflection = RetAskDownPoint_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMForceClientDownMap::kCharidFieldNumber;
const int GMForceClientDownMap::kMapidFieldNumber;
const int GMForceClientDownMap::kXposFieldNumber;
const int GMForceClientDownMap::kYposFieldNumber;
#endif  // !_MSC_VER

GMForceClientDownMap::GMForceClientDownMap()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMForceClientDownMap::InitAsDefaultInstance() {
}

GMForceClientDownMap::GMForceClientDownMap(const GMForceClientDownMap& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMForceClientDownMap::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  mapid_ = GOOGLE_LONGLONG(0);
  xpos_ = 0;
  ypos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMForceClientDownMap::~GMForceClientDownMap() {
  SharedDtor();
}

void GMForceClientDownMap::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMForceClientDownMap::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMForceClientDownMap::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMForceClientDownMap_descriptor_;
}

const GMForceClientDownMap& GMForceClientDownMap::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

GMForceClientDownMap* GMForceClientDownMap::default_instance_ = NULL;

GMForceClientDownMap* GMForceClientDownMap::New() const {
  return new GMForceClientDownMap;
}

void GMForceClientDownMap::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    mapid_ = GOOGLE_LONGLONG(0);
    xpos_ = 0;
    ypos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMForceClientDownMap::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mapid;
        break;
      }

      // optional int64 mapid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_xpos;
        break;
      }

      // optional int32 xpos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_ypos;
        break;
      }

      // optional int32 ypos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMForceClientDownMap::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int64 mapid = 2;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->mapid(), output);
  }

  // optional int32 xpos = 3;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->xpos(), output);
  }

  // optional int32 ypos = 4;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->ypos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMForceClientDownMap::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int64 mapid = 2;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->mapid(), target);
  }

  // optional int32 xpos = 3;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->xpos(), target);
  }

  // optional int32 ypos = 4;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->ypos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMForceClientDownMap::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int64 mapid = 2;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // optional int32 xpos = 3;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

    // optional int32 ypos = 4;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMForceClientDownMap::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMForceClientDownMap* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMForceClientDownMap*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMForceClientDownMap::MergeFrom(const GMForceClientDownMap& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMForceClientDownMap::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMForceClientDownMap::CopyFrom(const GMForceClientDownMap& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMForceClientDownMap::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMForceClientDownMap::Swap(GMForceClientDownMap* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(mapid_, other->mapid_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMForceClientDownMap::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMForceClientDownMap_descriptor_;
  metadata.reflection = GMForceClientDownMap_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

AskSupportOther::AskSupportOther()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AskSupportOther::InitAsDefaultInstance() {
}

AskSupportOther::AskSupportOther(const AskSupportOther& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AskSupportOther::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AskSupportOther::~AskSupportOther() {
  SharedDtor();
}

void AskSupportOther::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AskSupportOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AskSupportOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AskSupportOther_descriptor_;
}

const AskSupportOther& AskSupportOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

AskSupportOther* AskSupportOther::default_instance_ = NULL;

AskSupportOther* AskSupportOther::New() const {
  return new AskSupportOther;
}

void AskSupportOther::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AskSupportOther::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void AskSupportOther::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AskSupportOther::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AskSupportOther::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AskSupportOther::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AskSupportOther* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AskSupportOther*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AskSupportOther::MergeFrom(const AskSupportOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AskSupportOther::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AskSupportOther::CopyFrom(const AskSupportOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AskSupportOther::IsInitialized() const {

  return true;
}

void AskSupportOther::Swap(AskSupportOther* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AskSupportOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AskSupportOther_descriptor_;
  metadata.reflection = AskSupportOther_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetAskSupportOther::kRetFieldNumber;
#endif  // !_MSC_VER

RetAskSupportOther::RetAskSupportOther()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetAskSupportOther::InitAsDefaultInstance() {
}

RetAskSupportOther::RetAskSupportOther(const RetAskSupportOther& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetAskSupportOther::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetAskSupportOther::~RetAskSupportOther() {
  SharedDtor();
}

void RetAskSupportOther::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetAskSupportOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetAskSupportOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetAskSupportOther_descriptor_;
}

const RetAskSupportOther& RetAskSupportOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

RetAskSupportOther* RetAskSupportOther::default_instance_ = NULL;

RetAskSupportOther* RetAskSupportOther::New() const {
  return new RetAskSupportOther;
}

void RetAskSupportOther::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetAskSupportOther::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetAskSupportOther::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetAskSupportOther::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetAskSupportOther::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetAskSupportOther::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetAskSupportOther* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetAskSupportOther*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetAskSupportOther::MergeFrom(const RetAskSupportOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetAskSupportOther::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetAskSupportOther::CopyFrom(const RetAskSupportOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetAskSupportOther::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void RetAskSupportOther::Swap(RetAskSupportOther* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetAskSupportOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetAskSupportOther_descriptor_;
  metadata.reflection = RetAskSupportOther_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMToWSDelMarryCarbon::kCharidfFieldNumber;
const int GMToWSDelMarryCarbon::kCharidsFieldNumber;
#endif  // !_MSC_VER

GMToWSDelMarryCarbon::GMToWSDelMarryCarbon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMToWSDelMarryCarbon::InitAsDefaultInstance() {
}

GMToWSDelMarryCarbon::GMToWSDelMarryCarbon(const GMToWSDelMarryCarbon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMToWSDelMarryCarbon::SharedCtor() {
  _cached_size_ = 0;
  charidf_ = GOOGLE_LONGLONG(0);
  charids_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMToWSDelMarryCarbon::~GMToWSDelMarryCarbon() {
  SharedDtor();
}

void GMToWSDelMarryCarbon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMToWSDelMarryCarbon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMToWSDelMarryCarbon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMToWSDelMarryCarbon_descriptor_;
}

const GMToWSDelMarryCarbon& GMToWSDelMarryCarbon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryInstance_2eproto();
  return *default_instance_;
}

GMToWSDelMarryCarbon* GMToWSDelMarryCarbon::default_instance_ = NULL;

GMToWSDelMarryCarbon* GMToWSDelMarryCarbon::New() const {
  return new GMToWSDelMarryCarbon;
}

void GMToWSDelMarryCarbon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charidf_ = GOOGLE_LONGLONG(0);
    charids_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMToWSDelMarryCarbon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charidf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charidf_)));
          set_has_charidf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charids;
        break;
      }

      // required int64 charids = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charids:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charids_)));
          set_has_charids();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMToWSDelMarryCarbon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charidf = 1;
  if (has_charidf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charidf(), output);
  }

  // required int64 charids = 2;
  if (has_charids()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charids(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMToWSDelMarryCarbon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charidf = 1;
  if (has_charidf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charidf(), target);
  }

  // required int64 charids = 2;
  if (has_charids()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charids(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMToWSDelMarryCarbon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charidf = 1;
    if (has_charidf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charidf());
    }

    // required int64 charids = 2;
    if (has_charids()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charids());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMToWSDelMarryCarbon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMToWSDelMarryCarbon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMToWSDelMarryCarbon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMToWSDelMarryCarbon::MergeFrom(const GMToWSDelMarryCarbon& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charidf()) {
      set_charidf(from.charidf());
    }
    if (from.has_charids()) {
      set_charids(from.charids());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMToWSDelMarryCarbon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMToWSDelMarryCarbon::CopyFrom(const GMToWSDelMarryCarbon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMToWSDelMarryCarbon::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GMToWSDelMarryCarbon::Swap(GMToWSDelMarryCarbon* other) {
  if (other != this) {
    std::swap(charidf_, other->charidf_);
    std::swap(charids_, other->charids_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMToWSDelMarryCarbon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMToWSDelMarryCarbon_descriptor_;
  metadata.reflection = GMToWSDelMarryCarbon_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MarryInstanceInfo

// @@protoc_insertion_point(global_scope)
