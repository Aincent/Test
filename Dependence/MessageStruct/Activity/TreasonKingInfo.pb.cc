// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Activity/TreasonKingInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Activity/TreasonKingInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TreasonKingInfo {

namespace {

const ::google::protobuf::Descriptor* ToClentTreasonInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClentTreasonInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* FromClientDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  FromClientDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClientDrop_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClientDrop_reflection_ = NULL;
const ::google::protobuf::Descriptor* GetTreasonKingReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GetTreasonKingReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClientTreasonKingReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClientTreasonKingReward_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Activity_2fTreasonKingInfo_2eproto() {
  protobuf_AddDesc_Activity_2fTreasonKingInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Activity/TreasonKingInfo.proto");
  GOOGLE_CHECK(file != NULL);
  ToClentTreasonInfo_descriptor_ = file->message_type(0);
  static const int ToClentTreasonInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentTreasonInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentTreasonInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentTreasonInfo, enter_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentTreasonInfo, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentTreasonInfo, passmaxlevel_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentTreasonInfo, reset_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentTreasonInfo, treasonkingbesttime_),
  };
  ToClentTreasonInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClentTreasonInfo_descriptor_,
      ToClentTreasonInfo::default_instance_,
      ToClentTreasonInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentTreasonInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClentTreasonInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClentTreasonInfo));
  FromClientDrop_descriptor_ = file->message_type(1);
  static const int FromClientDrop_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FromClientDrop, bossid_),
  };
  FromClientDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      FromClientDrop_descriptor_,
      FromClientDrop::default_instance_,
      FromClientDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FromClientDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(FromClientDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(FromClientDrop));
  ToClientDrop_descriptor_ = file->message_type(2);
  static const int ToClientDrop_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientDrop, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientDrop, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientDrop, num_),
  };
  ToClientDrop_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClientDrop_descriptor_,
      ToClientDrop::default_instance_,
      ToClientDrop_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientDrop, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientDrop, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClientDrop));
  GetTreasonKingReward_descriptor_ = file->message_type(3);
  static const int GetTreasonKingReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTreasonKingReward, level_),
  };
  GetTreasonKingReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GetTreasonKingReward_descriptor_,
      GetTreasonKingReward::default_instance_,
      GetTreasonKingReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTreasonKingReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GetTreasonKingReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GetTreasonKingReward));
  ToClientTreasonKingReward_descriptor_ = file->message_type(4);
  static const int ToClientTreasonKingReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientTreasonKingReward, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientTreasonKingReward, level_),
  };
  ToClientTreasonKingReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClientTreasonKingReward_descriptor_,
      ToClientTreasonKingReward::default_instance_,
      ToClientTreasonKingReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientTreasonKingReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientTreasonKingReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClientTreasonKingReward));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Activity_2fTreasonKingInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClentTreasonInfo_descriptor_, &ToClentTreasonInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    FromClientDrop_descriptor_, &FromClientDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClientDrop_descriptor_, &ToClientDrop::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GetTreasonKingReward_descriptor_, &GetTreasonKingReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClientTreasonKingReward_descriptor_, &ToClientTreasonKingReward::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Activity_2fTreasonKingInfo_2eproto() {
  delete ToClentTreasonInfo::default_instance_;
  delete ToClentTreasonInfo_reflection_;
  delete FromClientDrop::default_instance_;
  delete FromClientDrop_reflection_;
  delete ToClientDrop::default_instance_;
  delete ToClientDrop_reflection_;
  delete GetTreasonKingReward::default_instance_;
  delete GetTreasonKingReward_reflection_;
  delete ToClientTreasonKingReward::default_instance_;
  delete ToClientTreasonKingReward_reflection_;
}

void protobuf_AddDesc_Activity_2fTreasonKingInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036Activity/TreasonKingInfo.proto\022\017Treaso"
    "nKingInfo\"\221\001\n\022ToClentTreasonInfo\022\013\n\003ret\030"
    "\001 \002(\005\022\r\n\005level\030\002 \001(\005\022\r\n\005enter\030\003 \001(\005\022\016\n\006r"
    "eward\030\004 \001(\005\022\024\n\014passMaxLevel\030\005 \001(\005\022\r\n\005res"
    "et\030\006 \001(\005\022\033\n\023TreasonKingBestTime\030\007 \003(\005\" \n"
    "\016FromClientDrop\022\016\n\006bossid\030\001 \002(\005\"8\n\014ToCli"
    "entDrop\022\013\n\003ret\030\001 \002(\005\022\016\n\006reward\030\002 \001(\005\022\013\n\003"
    "num\030\003 \001(\005\"%\n\024GetTreasonKingReward\022\r\n\005lev"
    "el\030\001 \002(\005\"7\n\031ToClientTreasonKingReward\022\013\n"
    "\003ret\030\001 \002(\005\022\r\n\005level\030\002 \001(\005", 385);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Activity/TreasonKingInfo.proto", &protobuf_RegisterTypes);
  ToClentTreasonInfo::default_instance_ = new ToClentTreasonInfo();
  FromClientDrop::default_instance_ = new FromClientDrop();
  ToClientDrop::default_instance_ = new ToClientDrop();
  GetTreasonKingReward::default_instance_ = new GetTreasonKingReward();
  ToClientTreasonKingReward::default_instance_ = new ToClientTreasonKingReward();
  ToClentTreasonInfo::default_instance_->InitAsDefaultInstance();
  FromClientDrop::default_instance_->InitAsDefaultInstance();
  ToClientDrop::default_instance_->InitAsDefaultInstance();
  GetTreasonKingReward::default_instance_->InitAsDefaultInstance();
  ToClientTreasonKingReward::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Activity_2fTreasonKingInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Activity_2fTreasonKingInfo_2eproto {
  StaticDescriptorInitializer_Activity_2fTreasonKingInfo_2eproto() {
    protobuf_AddDesc_Activity_2fTreasonKingInfo_2eproto();
  }
} static_descriptor_initializer_Activity_2fTreasonKingInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ToClentTreasonInfo::kRetFieldNumber;
const int ToClentTreasonInfo::kLevelFieldNumber;
const int ToClentTreasonInfo::kEnterFieldNumber;
const int ToClentTreasonInfo::kRewardFieldNumber;
const int ToClentTreasonInfo::kPassMaxLevelFieldNumber;
const int ToClentTreasonInfo::kResetFieldNumber;
const int ToClentTreasonInfo::kTreasonKingBestTimeFieldNumber;
#endif  // !_MSC_VER

ToClentTreasonInfo::ToClentTreasonInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClentTreasonInfo::InitAsDefaultInstance() {
}

ToClentTreasonInfo::ToClentTreasonInfo(const ToClentTreasonInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClentTreasonInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  level_ = 0;
  enter_ = 0;
  reward_ = 0;
  passmaxlevel_ = 0;
  reset_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClentTreasonInfo::~ToClentTreasonInfo() {
  SharedDtor();
}

void ToClentTreasonInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClentTreasonInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClentTreasonInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClentTreasonInfo_descriptor_;
}

const ToClentTreasonInfo& ToClentTreasonInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fTreasonKingInfo_2eproto();
  return *default_instance_;
}

ToClentTreasonInfo* ToClentTreasonInfo::default_instance_ = NULL;

ToClentTreasonInfo* ToClentTreasonInfo::New() const {
  return new ToClentTreasonInfo;
}

void ToClentTreasonInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    level_ = 0;
    enter_ = 0;
    reward_ = 0;
    passmaxlevel_ = 0;
    reset_ = 0;
  }
  treasonkingbesttime_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClentTreasonInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enter;
        break;
      }

      // optional int32 enter = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enter:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enter_)));
          set_has_enter();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reward;
        break;
      }

      // optional int32 reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_passMaxLevel;
        break;
      }

      // optional int32 passMaxLevel = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_passMaxLevel:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &passmaxlevel_)));
          set_has_passmaxlevel();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_reset;
        break;
      }

      // optional int32 reset = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reset:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reset_)));
          set_has_reset();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_TreasonKingBestTime;
        break;
      }

      // repeated int32 TreasonKingBestTime = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_TreasonKingBestTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 56, input, this->mutable_treasonkingbesttime())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_treasonkingbesttime())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_TreasonKingBestTime;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClentTreasonInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int32 enter = 3;
  if (has_enter()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enter(), output);
  }

  // optional int32 reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->reward(), output);
  }

  // optional int32 passMaxLevel = 5;
  if (has_passmaxlevel()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->passmaxlevel(), output);
  }

  // optional int32 reset = 6;
  if (has_reset()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->reset(), output);
  }

  // repeated int32 TreasonKingBestTime = 7;
  for (int i = 0; i < this->treasonkingbesttime_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      7, this->treasonkingbesttime(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClentTreasonInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int32 enter = 3;
  if (has_enter()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->enter(), target);
  }

  // optional int32 reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->reward(), target);
  }

  // optional int32 passMaxLevel = 5;
  if (has_passmaxlevel()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->passmaxlevel(), target);
  }

  // optional int32 reset = 6;
  if (has_reset()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->reset(), target);
  }

  // repeated int32 TreasonKingBestTime = 7;
  for (int i = 0; i < this->treasonkingbesttime_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(7, this->treasonkingbesttime(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClentTreasonInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 enter = 3;
    if (has_enter()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enter());
    }

    // optional int32 reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward());
    }

    // optional int32 passMaxLevel = 5;
    if (has_passmaxlevel()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->passmaxlevel());
    }

    // optional int32 reset = 6;
    if (has_reset()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reset());
    }

  }
  // repeated int32 TreasonKingBestTime = 7;
  {
    int data_size = 0;
    for (int i = 0; i < this->treasonkingbesttime_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->treasonkingbesttime(i));
    }
    total_size += 1 * this->treasonkingbesttime_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClentTreasonInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClentTreasonInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClentTreasonInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClentTreasonInfo::MergeFrom(const ToClentTreasonInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  treasonkingbesttime_.MergeFrom(from.treasonkingbesttime_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_enter()) {
      set_enter(from.enter());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_passmaxlevel()) {
      set_passmaxlevel(from.passmaxlevel());
    }
    if (from.has_reset()) {
      set_reset(from.reset());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClentTreasonInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClentTreasonInfo::CopyFrom(const ToClentTreasonInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClentTreasonInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToClentTreasonInfo::Swap(ToClentTreasonInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(level_, other->level_);
    std::swap(enter_, other->enter_);
    std::swap(reward_, other->reward_);
    std::swap(passmaxlevel_, other->passmaxlevel_);
    std::swap(reset_, other->reset_);
    treasonkingbesttime_.Swap(&other->treasonkingbesttime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClentTreasonInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClentTreasonInfo_descriptor_;
  metadata.reflection = ToClentTreasonInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int FromClientDrop::kBossidFieldNumber;
#endif  // !_MSC_VER

FromClientDrop::FromClientDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void FromClientDrop::InitAsDefaultInstance() {
}

FromClientDrop::FromClientDrop(const FromClientDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void FromClientDrop::SharedCtor() {
  _cached_size_ = 0;
  bossid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

FromClientDrop::~FromClientDrop() {
  SharedDtor();
}

void FromClientDrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void FromClientDrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* FromClientDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return FromClientDrop_descriptor_;
}

const FromClientDrop& FromClientDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fTreasonKingInfo_2eproto();
  return *default_instance_;
}

FromClientDrop* FromClientDrop::default_instance_ = NULL;

FromClientDrop* FromClientDrop::New() const {
  return new FromClientDrop;
}

void FromClientDrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    bossid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool FromClientDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 bossid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bossid_)));
          set_has_bossid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void FromClientDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 bossid = 1;
  if (has_bossid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->bossid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* FromClientDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 bossid = 1;
  if (has_bossid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->bossid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int FromClientDrop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 bossid = 1;
    if (has_bossid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bossid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void FromClientDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const FromClientDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const FromClientDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void FromClientDrop::MergeFrom(const FromClientDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_bossid()) {
      set_bossid(from.bossid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void FromClientDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void FromClientDrop::CopyFrom(const FromClientDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool FromClientDrop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void FromClientDrop::Swap(FromClientDrop* other) {
  if (other != this) {
    std::swap(bossid_, other->bossid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata FromClientDrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = FromClientDrop_descriptor_;
  metadata.reflection = FromClientDrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClientDrop::kRetFieldNumber;
const int ToClientDrop::kRewardFieldNumber;
const int ToClientDrop::kNumFieldNumber;
#endif  // !_MSC_VER

ToClientDrop::ToClientDrop()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClientDrop::InitAsDefaultInstance() {
}

ToClientDrop::ToClientDrop(const ToClientDrop& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClientDrop::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  reward_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClientDrop::~ToClientDrop() {
  SharedDtor();
}

void ToClientDrop::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClientDrop::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClientDrop::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClientDrop_descriptor_;
}

const ToClientDrop& ToClientDrop::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fTreasonKingInfo_2eproto();
  return *default_instance_;
}

ToClientDrop* ToClientDrop::default_instance_ = NULL;

ToClientDrop* ToClientDrop::New() const {
  return new ToClientDrop;
}

void ToClientDrop::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    reward_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClientDrop::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reward;
        break;
      }

      // optional int32 reward = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClientDrop::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 reward = 2;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->reward(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClientDrop::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 reward = 2;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->reward(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClientDrop::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 reward = 2;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->reward());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClientDrop::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClientDrop* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClientDrop*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClientDrop::MergeFrom(const ToClientDrop& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClientDrop::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClientDrop::CopyFrom(const ToClientDrop& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClientDrop::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToClientDrop::Swap(ToClientDrop* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(reward_, other->reward_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClientDrop::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClientDrop_descriptor_;
  metadata.reflection = ToClientDrop_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GetTreasonKingReward::kLevelFieldNumber;
#endif  // !_MSC_VER

GetTreasonKingReward::GetTreasonKingReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GetTreasonKingReward::InitAsDefaultInstance() {
}

GetTreasonKingReward::GetTreasonKingReward(const GetTreasonKingReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GetTreasonKingReward::SharedCtor() {
  _cached_size_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GetTreasonKingReward::~GetTreasonKingReward() {
  SharedDtor();
}

void GetTreasonKingReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GetTreasonKingReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GetTreasonKingReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GetTreasonKingReward_descriptor_;
}

const GetTreasonKingReward& GetTreasonKingReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fTreasonKingInfo_2eproto();
  return *default_instance_;
}

GetTreasonKingReward* GetTreasonKingReward::default_instance_ = NULL;

GetTreasonKingReward* GetTreasonKingReward::New() const {
  return new GetTreasonKingReward;
}

void GetTreasonKingReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GetTreasonKingReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 level = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GetTreasonKingReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 level = 1;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GetTreasonKingReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 level = 1;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GetTreasonKingReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 level = 1;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GetTreasonKingReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GetTreasonKingReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GetTreasonKingReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GetTreasonKingReward::MergeFrom(const GetTreasonKingReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GetTreasonKingReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GetTreasonKingReward::CopyFrom(const GetTreasonKingReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GetTreasonKingReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GetTreasonKingReward::Swap(GetTreasonKingReward* other) {
  if (other != this) {
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GetTreasonKingReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GetTreasonKingReward_descriptor_;
  metadata.reflection = GetTreasonKingReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClientTreasonKingReward::kRetFieldNumber;
const int ToClientTreasonKingReward::kLevelFieldNumber;
#endif  // !_MSC_VER

ToClientTreasonKingReward::ToClientTreasonKingReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClientTreasonKingReward::InitAsDefaultInstance() {
}

ToClientTreasonKingReward::ToClientTreasonKingReward(const ToClientTreasonKingReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClientTreasonKingReward::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClientTreasonKingReward::~ToClientTreasonKingReward() {
  SharedDtor();
}

void ToClientTreasonKingReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClientTreasonKingReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClientTreasonKingReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClientTreasonKingReward_descriptor_;
}

const ToClientTreasonKingReward& ToClientTreasonKingReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fTreasonKingInfo_2eproto();
  return *default_instance_;
}

ToClientTreasonKingReward* ToClientTreasonKingReward::default_instance_ = NULL;

ToClientTreasonKingReward* ToClientTreasonKingReward::New() const {
  return new ToClientTreasonKingReward;
}

void ToClientTreasonKingReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClientTreasonKingReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClientTreasonKingReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClientTreasonKingReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClientTreasonKingReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClientTreasonKingReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClientTreasonKingReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClientTreasonKingReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClientTreasonKingReward::MergeFrom(const ToClientTreasonKingReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClientTreasonKingReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClientTreasonKingReward::CopyFrom(const ToClientTreasonKingReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClientTreasonKingReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToClientTreasonKingReward::Swap(ToClientTreasonKingReward* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClientTreasonKingReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClientTreasonKingReward_descriptor_;
  metadata.reflection = ToClientTreasonKingReward_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TreasonKingInfo

// @@protoc_insertion_point(global_scope)
