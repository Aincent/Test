// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChristmasActivity/NewYearPro.proto

#ifndef PROTOBUF_ChristmasActivity_2fNewYearPro_2eproto__INCLUDED
#define PROTOBUF_ChristmasActivity_2fNewYearPro_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace NewYearPro {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_ChristmasActivity_2fNewYearPro_2eproto();
void protobuf_AssignDesc_ChristmasActivity_2fNewYearPro_2eproto();
void protobuf_ShutdownFile_ChristmasActivity_2fNewYearPro_2eproto();

class OneLimitData;
class LimiDatatPro;

// ===================================================================

class OneLimitData : public ::google::protobuf::Message {
 public:
  OneLimitData();
  virtual ~OneLimitData();

  OneLimitData(const OneLimitData& from);

  inline OneLimitData& operator=(const OneLimitData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const OneLimitData& default_instance();

  void Swap(OneLimitData* other);

  // implements Message ----------------------------------------------

  OneLimitData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const OneLimitData& from);
  void MergeFrom(const OneLimitData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 surplusCounts = 2;
  inline bool has_surpluscounts() const;
  inline void clear_surpluscounts();
  static const int kSurplusCountsFieldNumber = 2;
  inline ::google::protobuf::int32 surpluscounts() const;
  inline void set_surpluscounts(::google::protobuf::int32 value);

  // optional int32 buyCounts = 3;
  inline bool has_buycounts() const;
  inline void clear_buycounts();
  static const int kBuyCountsFieldNumber = 3;
  inline ::google::protobuf::int32 buycounts() const;
  inline void set_buycounts(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:NewYearPro.OneLimitData)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_surpluscounts();
  inline void clear_has_surpluscounts();
  inline void set_has_buycounts();
  inline void clear_has_buycounts();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 surpluscounts_;
  ::google::protobuf::int32 buycounts_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_ChristmasActivity_2fNewYearPro_2eproto();
  friend void protobuf_AssignDesc_ChristmasActivity_2fNewYearPro_2eproto();
  friend void protobuf_ShutdownFile_ChristmasActivity_2fNewYearPro_2eproto();

  void InitAsDefaultInstance();
  static OneLimitData* default_instance_;
};
// -------------------------------------------------------------------

class LimiDatatPro : public ::google::protobuf::Message {
 public:
  LimiDatatPro();
  virtual ~LimiDatatPro();

  LimiDatatPro(const LimiDatatPro& from);

  inline LimiDatatPro& operator=(const LimiDatatPro& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const LimiDatatPro& default_instance();

  void Swap(LimiDatatPro* other);

  // implements Message ----------------------------------------------

  LimiDatatPro* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const LimiDatatPro& from);
  void MergeFrom(const LimiDatatPro& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional bool horseReceive = 1;
  inline bool has_horsereceive() const;
  inline void clear_horsereceive();
  static const int kHorseReceiveFieldNumber = 1;
  inline bool horsereceive() const;
  inline void set_horsereceive(bool value);

  // repeated .NewYearPro.OneLimitData datas = 2;
  inline int datas_size() const;
  inline void clear_datas();
  static const int kDatasFieldNumber = 2;
  inline const ::NewYearPro::OneLimitData& datas(int index) const;
  inline ::NewYearPro::OneLimitData* mutable_datas(int index);
  inline ::NewYearPro::OneLimitData* add_datas();
  inline const ::google::protobuf::RepeatedPtrField< ::NewYearPro::OneLimitData >&
      datas() const;
  inline ::google::protobuf::RepeatedPtrField< ::NewYearPro::OneLimitData >*
      mutable_datas();

  // @@protoc_insertion_point(class_scope:NewYearPro.LimiDatatPro)
 private:
  inline void set_has_horsereceive();
  inline void clear_has_horsereceive();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::NewYearPro::OneLimitData > datas_;
  bool horsereceive_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_ChristmasActivity_2fNewYearPro_2eproto();
  friend void protobuf_AssignDesc_ChristmasActivity_2fNewYearPro_2eproto();
  friend void protobuf_ShutdownFile_ChristmasActivity_2fNewYearPro_2eproto();

  void InitAsDefaultInstance();
  static LimiDatatPro* default_instance_;
};
// ===================================================================


// ===================================================================

// OneLimitData

// optional int32 id = 1;
inline bool OneLimitData::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void OneLimitData::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void OneLimitData::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void OneLimitData::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 OneLimitData::id() const {
  return id_;
}
inline void OneLimitData::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 surplusCounts = 2;
inline bool OneLimitData::has_surpluscounts() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void OneLimitData::set_has_surpluscounts() {
  _has_bits_[0] |= 0x00000002u;
}
inline void OneLimitData::clear_has_surpluscounts() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void OneLimitData::clear_surpluscounts() {
  surpluscounts_ = 0;
  clear_has_surpluscounts();
}
inline ::google::protobuf::int32 OneLimitData::surpluscounts() const {
  return surpluscounts_;
}
inline void OneLimitData::set_surpluscounts(::google::protobuf::int32 value) {
  set_has_surpluscounts();
  surpluscounts_ = value;
}

// optional int32 buyCounts = 3;
inline bool OneLimitData::has_buycounts() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void OneLimitData::set_has_buycounts() {
  _has_bits_[0] |= 0x00000004u;
}
inline void OneLimitData::clear_has_buycounts() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void OneLimitData::clear_buycounts() {
  buycounts_ = 0;
  clear_has_buycounts();
}
inline ::google::protobuf::int32 OneLimitData::buycounts() const {
  return buycounts_;
}
inline void OneLimitData::set_buycounts(::google::protobuf::int32 value) {
  set_has_buycounts();
  buycounts_ = value;
}

// -------------------------------------------------------------------

// LimiDatatPro

// optional bool horseReceive = 1;
inline bool LimiDatatPro::has_horsereceive() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void LimiDatatPro::set_has_horsereceive() {
  _has_bits_[0] |= 0x00000001u;
}
inline void LimiDatatPro::clear_has_horsereceive() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void LimiDatatPro::clear_horsereceive() {
  horsereceive_ = false;
  clear_has_horsereceive();
}
inline bool LimiDatatPro::horsereceive() const {
  return horsereceive_;
}
inline void LimiDatatPro::set_horsereceive(bool value) {
  set_has_horsereceive();
  horsereceive_ = value;
}

// repeated .NewYearPro.OneLimitData datas = 2;
inline int LimiDatatPro::datas_size() const {
  return datas_.size();
}
inline void LimiDatatPro::clear_datas() {
  datas_.Clear();
}
inline const ::NewYearPro::OneLimitData& LimiDatatPro::datas(int index) const {
  return datas_.Get(index);
}
inline ::NewYearPro::OneLimitData* LimiDatatPro::mutable_datas(int index) {
  return datas_.Mutable(index);
}
inline ::NewYearPro::OneLimitData* LimiDatatPro::add_datas() {
  return datas_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::NewYearPro::OneLimitData >&
LimiDatatPro::datas() const {
  return datas_;
}
inline ::google::protobuf::RepeatedPtrField< ::NewYearPro::OneLimitData >*
LimiDatatPro::mutable_datas() {
  return &datas_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NewYearPro

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_ChristmasActivity_2fNewYearPro_2eproto__INCLUDED
