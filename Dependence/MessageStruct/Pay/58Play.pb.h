// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pay/58Play.proto

#ifndef PROTOBUF_Pay_2f58Play_2eproto__INCLUDED
#define PROTOBUF_Pay_2f58Play_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace Pay58PlayInfo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Pay_2f58Play_2eproto();
void protobuf_AssignDesc_Pay_2f58Play_2eproto();
void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

class From58PlayReqAskPayInfo;
class To58PlayReqAskPayInfo;
class Sys58PlayPayInfo;
class InviteFriend58Play;
class RetInviteFriend58Play;
class FbLikeFeed;
class RetFbLikeFeed;
class FBReward;
class RewardList;
class GetReward;
class RetReward;
class SysFBReward;
class RetSysFBReward;
class RetFBLike;
class FBRewardInfo;
class RewardListInfo;

// ===================================================================

class From58PlayReqAskPayInfo : public ::google::protobuf::Message {
 public:
  From58PlayReqAskPayInfo();
  virtual ~From58PlayReqAskPayInfo();

  From58PlayReqAskPayInfo(const From58PlayReqAskPayInfo& from);

  inline From58PlayReqAskPayInfo& operator=(const From58PlayReqAskPayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const From58PlayReqAskPayInfo& default_instance();

  void Swap(From58PlayReqAskPayInfo* other);

  // implements Message ----------------------------------------------

  From58PlayReqAskPayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const From58PlayReqAskPayInfo& from);
  void MergeFrom(const From58PlayReqAskPayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string openid = 1;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 1;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required uint32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required string orderid = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 3;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // required uint32 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // required uint64 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // required string sig = 6;
  inline bool has_sig() const;
  inline void clear_sig();
  static const int kSigFieldNumber = 6;
  inline const ::std::string& sig() const;
  inline void set_sig(const ::std::string& value);
  inline void set_sig(const char* value);
  inline void set_sig(const char* value, size_t size);
  inline ::std::string* mutable_sig();
  inline ::std::string* release_sig();
  inline void set_allocated_sig(::std::string* sig);

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.From58PlayReqAskPayInfo)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_sig();
  inline void clear_has_sig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* openid_;
  ::std::string* orderid_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint64 timestamp_;
  ::std::string* sig_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static From58PlayReqAskPayInfo* default_instance_;
};
// -------------------------------------------------------------------

class To58PlayReqAskPayInfo : public ::google::protobuf::Message {
 public:
  To58PlayReqAskPayInfo();
  virtual ~To58PlayReqAskPayInfo();

  To58PlayReqAskPayInfo(const To58PlayReqAskPayInfo& from);

  inline To58PlayReqAskPayInfo& operator=(const To58PlayReqAskPayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const To58PlayReqAskPayInfo& default_instance();

  void Swap(To58PlayReqAskPayInfo* other);

  // implements Message ----------------------------------------------

  To58PlayReqAskPayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const To58PlayReqAskPayInfo& from);
  void MergeFrom(const To58PlayReqAskPayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.To58PlayReqAskPayInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static To58PlayReqAskPayInfo* default_instance_;
};
// -------------------------------------------------------------------

class Sys58PlayPayInfo : public ::google::protobuf::Message {
 public:
  Sys58PlayPayInfo();
  virtual ~Sys58PlayPayInfo();

  Sys58PlayPayInfo(const Sys58PlayPayInfo& from);

  inline Sys58PlayPayInfo& operator=(const Sys58PlayPayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const Sys58PlayPayInfo& default_instance();

  void Swap(Sys58PlayPayInfo* other);

  // implements Message ----------------------------------------------

  Sys58PlayPayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const Sys58PlayPayInfo& from);
  void MergeFrom(const Sys58PlayPayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required string openid = 2;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 2;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required string orderid = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 3;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // required uint32 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // required uint64 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // required string sig = 6;
  inline bool has_sig() const;
  inline void clear_sig();
  static const int kSigFieldNumber = 6;
  inline const ::std::string& sig() const;
  inline void set_sig(const ::std::string& value);
  inline void set_sig(const char* value);
  inline void set_sig(const char* value, size_t size);
  inline ::std::string* mutable_sig();
  inline ::std::string* release_sig();
  inline void set_allocated_sig(::std::string* sig);

  // required int32 ret = 7;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 7;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 flag = 8;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 8;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.Sys58PlayPayInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_sig();
  inline void clear_has_sig();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* openid_;
  ::std::string* orderid_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::int32 ret_;
  ::std::string* sig_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static Sys58PlayPayInfo* default_instance_;
};
// -------------------------------------------------------------------

class InviteFriend58Play : public ::google::protobuf::Message {
 public:
  InviteFriend58Play();
  virtual ~InviteFriend58Play();

  InviteFriend58Play(const InviteFriend58Play& from);

  inline InviteFriend58Play& operator=(const InviteFriend58Play& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InviteFriend58Play& default_instance();

  void Swap(InviteFriend58Play* other);

  // implements Message ----------------------------------------------

  InviteFriend58Play* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InviteFriend58Play& from);
  void MergeFrom(const InviteFriend58Play& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required uint32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.InviteFriend58Play)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::uint32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static InviteFriend58Play* default_instance_;
};
// -------------------------------------------------------------------

class RetInviteFriend58Play : public ::google::protobuf::Message {
 public:
  RetInviteFriend58Play();
  virtual ~RetInviteFriend58Play();

  RetInviteFriend58Play(const RetInviteFriend58Play& from);

  inline RetInviteFriend58Play& operator=(const RetInviteFriend58Play& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetInviteFriend58Play& default_instance();

  void Swap(RetInviteFriend58Play* other);

  // implements Message ----------------------------------------------

  RetInviteFriend58Play* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetInviteFriend58Play& from);
  void MergeFrom(const RetInviteFriend58Play& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.RetInviteFriend58Play)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static RetInviteFriend58Play* default_instance_;
};
// -------------------------------------------------------------------

class FbLikeFeed : public ::google::protobuf::Message {
 public:
  FbLikeFeed();
  virtual ~FbLikeFeed();

  FbLikeFeed(const FbLikeFeed& from);

  inline FbLikeFeed& operator=(const FbLikeFeed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FbLikeFeed& default_instance();

  void Swap(FbLikeFeed* other);

  // implements Message ----------------------------------------------

  FbLikeFeed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FbLikeFeed& from);
  void MergeFrom(const FbLikeFeed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string openid = 1;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 1;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required uint32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required string sig = 3;
  inline bool has_sig() const;
  inline void clear_sig();
  static const int kSigFieldNumber = 3;
  inline const ::std::string& sig() const;
  inline void set_sig(const ::std::string& value);
  inline void set_sig(const char* value);
  inline void set_sig(const char* value, size_t size);
  inline ::std::string* mutable_sig();
  inline ::std::string* release_sig();
  inline void set_allocated_sig(::std::string* sig);

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.FbLikeFeed)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_sig();
  inline void clear_has_sig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* openid_;
  ::std::string* sig_;
  ::google::protobuf::uint32 serverid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static FbLikeFeed* default_instance_;
};
// -------------------------------------------------------------------

class RetFbLikeFeed : public ::google::protobuf::Message {
 public:
  RetFbLikeFeed();
  virtual ~RetFbLikeFeed();

  RetFbLikeFeed(const RetFbLikeFeed& from);

  inline RetFbLikeFeed& operator=(const RetFbLikeFeed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetFbLikeFeed& default_instance();

  void Swap(RetFbLikeFeed* other);

  // implements Message ----------------------------------------------

  RetFbLikeFeed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetFbLikeFeed& from);
  void MergeFrom(const RetFbLikeFeed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.RetFbLikeFeed)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static RetFbLikeFeed* default_instance_;
};
// -------------------------------------------------------------------

class FBReward : public ::google::protobuf::Message {
 public:
  FBReward();
  virtual ~FBReward();

  FBReward(const FBReward& from);

  inline FBReward& operator=(const FBReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FBReward& default_instance();

  void Swap(FBReward* other);

  // implements Message ----------------------------------------------

  FBReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FBReward& from);
  void MergeFrom(const FBReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fblike = 1;
  inline bool has_fblike() const;
  inline void clear_fblike();
  static const int kFblikeFieldNumber = 1;
  inline ::google::protobuf::int32 fblike() const;
  inline void set_fblike(::google::protobuf::int32 value);

  // optional int32 nday = 2;
  inline bool has_nday() const;
  inline void clear_nday();
  static const int kNdayFieldNumber = 2;
  inline ::google::protobuf::int32 nday() const;
  inline void set_nday(::google::protobuf::int32 value);

  // repeated .Pay58PlayInfo.RewardList rlist = 3;
  inline int rlist_size() const;
  inline void clear_rlist();
  static const int kRlistFieldNumber = 3;
  inline const ::Pay58PlayInfo::RewardList& rlist(int index) const;
  inline ::Pay58PlayInfo::RewardList* mutable_rlist(int index);
  inline ::Pay58PlayInfo::RewardList* add_rlist();
  inline const ::google::protobuf::RepeatedPtrField< ::Pay58PlayInfo::RewardList >&
      rlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pay58PlayInfo::RewardList >*
      mutable_rlist();

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.FBReward)
 private:
  inline void set_has_fblike();
  inline void clear_has_fblike();
  inline void set_has_nday();
  inline void clear_has_nday();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 fblike_;
  ::google::protobuf::int32 nday_;
  ::google::protobuf::RepeatedPtrField< ::Pay58PlayInfo::RewardList > rlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static FBReward* default_instance_;
};
// -------------------------------------------------------------------

class RewardList : public ::google::protobuf::Message {
 public:
  RewardList();
  virtual ~RewardList();

  RewardList(const RewardList& from);

  inline RewardList& operator=(const RewardList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardList& default_instance();

  void Swap(RewardList* other);

  // implements Message ----------------------------------------------

  RewardList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardList& from);
  void MergeFrom(const RewardList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 statue = 2;
  inline bool has_statue() const;
  inline void clear_statue();
  static const int kStatueFieldNumber = 2;
  inline ::google::protobuf::int32 statue() const;
  inline void set_statue(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.RewardList)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_statue();
  inline void clear_has_statue();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 statue_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static RewardList* default_instance_;
};
// -------------------------------------------------------------------

class GetReward : public ::google::protobuf::Message {
 public:
  GetReward();
  virtual ~GetReward();

  GetReward(const GetReward& from);

  inline GetReward& operator=(const GetReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GetReward& default_instance();

  void Swap(GetReward* other);

  // implements Message ----------------------------------------------

  GetReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GetReward& from);
  void MergeFrom(const GetReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.GetReward)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static GetReward* default_instance_;
};
// -------------------------------------------------------------------

class RetReward : public ::google::protobuf::Message {
 public:
  RetReward();
  virtual ~RetReward();

  RetReward(const RetReward& from);

  inline RetReward& operator=(const RetReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetReward& default_instance();

  void Swap(RetReward* other);

  // implements Message ----------------------------------------------

  RetReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetReward& from);
  void MergeFrom(const RetReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.RetReward)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static RetReward* default_instance_;
};
// -------------------------------------------------------------------

class SysFBReward : public ::google::protobuf::Message {
 public:
  SysFBReward();
  virtual ~SysFBReward();

  SysFBReward(const SysFBReward& from);

  inline SysFBReward& operator=(const SysFBReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SysFBReward& default_instance();

  void Swap(SysFBReward* other);

  // implements Message ----------------------------------------------

  SysFBReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SysFBReward& from);
  void MergeFrom(const SysFBReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required int32 index = 2;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 2;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 type = 3;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 3;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // repeated int32 itemId = 4;
  inline int itemid_size() const;
  inline void clear_itemid();
  static const int kItemIdFieldNumber = 4;
  inline ::google::protobuf::int32 itemid(int index) const;
  inline void set_itemid(int index, ::google::protobuf::int32 value);
  inline void add_itemid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      itemid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_itemid();

  // repeated int32 itemNum = 5;
  inline int itemnum_size() const;
  inline void clear_itemnum();
  static const int kItemNumFieldNumber = 5;
  inline ::google::protobuf::int32 itemnum(int index) const;
  inline void set_itemnum(int index, ::google::protobuf::int32 value);
  inline void add_itemnum(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      itemnum() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_itemnum();

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.SysFBReward)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > itemid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > itemnum_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static SysFBReward* default_instance_;
};
// -------------------------------------------------------------------

class RetSysFBReward : public ::google::protobuf::Message {
 public:
  RetSysFBReward();
  virtual ~RetSysFBReward();

  RetSysFBReward(const RetSysFBReward& from);

  inline RetSysFBReward& operator=(const RetSysFBReward& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetSysFBReward& default_instance();

  void Swap(RetSysFBReward* other);

  // implements Message ----------------------------------------------

  RetSysFBReward* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetSysFBReward& from);
  void MergeFrom(const RetSysFBReward& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 index = 1;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 1;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // optional int32 type = 2;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 2;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 ret = 3;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 3;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.RetSysFBReward)
 private:
  inline void set_has_index();
  inline void clear_has_index();
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 index_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static RetSysFBReward* default_instance_;
};
// -------------------------------------------------------------------

class RetFBLike : public ::google::protobuf::Message {
 public:
  RetFBLike();
  virtual ~RetFBLike();

  RetFBLike(const RetFBLike& from);

  inline RetFBLike& operator=(const RetFBLike& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RetFBLike& default_instance();

  void Swap(RetFBLike* other);

  // implements Message ----------------------------------------------

  RetFBLike* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RetFBLike& from);
  void MergeFrom(const RetFBLike& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional string openid = 2;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 2;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // optional uint32 serverid = 3;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 3;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // optional string sig = 4;
  inline bool has_sig() const;
  inline void clear_sig();
  static const int kSigFieldNumber = 4;
  inline const ::std::string& sig() const;
  inline void set_sig(const ::std::string& value);
  inline void set_sig(const char* value);
  inline void set_sig(const char* value, size_t size);
  inline ::std::string* mutable_sig();
  inline ::std::string* release_sig();
  inline void set_allocated_sig(::std::string* sig);

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.RetFBLike)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_sig();
  inline void clear_has_sig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* openid_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::uint32 serverid_;
  ::std::string* sig_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static RetFBLike* default_instance_;
};
// -------------------------------------------------------------------

class FBRewardInfo : public ::google::protobuf::Message {
 public:
  FBRewardInfo();
  virtual ~FBRewardInfo();

  FBRewardInfo(const FBRewardInfo& from);

  inline FBRewardInfo& operator=(const FBRewardInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FBRewardInfo& default_instance();

  void Swap(FBRewardInfo* other);

  // implements Message ----------------------------------------------

  FBRewardInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FBRewardInfo& from);
  void MergeFrom(const FBRewardInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 fblike = 1;
  inline bool has_fblike() const;
  inline void clear_fblike();
  static const int kFblikeFieldNumber = 1;
  inline ::google::protobuf::int32 fblike() const;
  inline void set_fblike(::google::protobuf::int32 value);

  // optional int64 ntime = 2;
  inline bool has_ntime() const;
  inline void clear_ntime();
  static const int kNtimeFieldNumber = 2;
  inline ::google::protobuf::int64 ntime() const;
  inline void set_ntime(::google::protobuf::int64 value);

  // repeated .Pay58PlayInfo.RewardListInfo rlist = 3;
  inline int rlist_size() const;
  inline void clear_rlist();
  static const int kRlistFieldNumber = 3;
  inline const ::Pay58PlayInfo::RewardListInfo& rlist(int index) const;
  inline ::Pay58PlayInfo::RewardListInfo* mutable_rlist(int index);
  inline ::Pay58PlayInfo::RewardListInfo* add_rlist();
  inline const ::google::protobuf::RepeatedPtrField< ::Pay58PlayInfo::RewardListInfo >&
      rlist() const;
  inline ::google::protobuf::RepeatedPtrField< ::Pay58PlayInfo::RewardListInfo >*
      mutable_rlist();

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.FBRewardInfo)
 private:
  inline void set_has_fblike();
  inline void clear_has_fblike();
  inline void set_has_ntime();
  inline void clear_has_ntime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 ntime_;
  ::google::protobuf::RepeatedPtrField< ::Pay58PlayInfo::RewardListInfo > rlist_;
  ::google::protobuf::int32 fblike_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static FBRewardInfo* default_instance_;
};
// -------------------------------------------------------------------

class RewardListInfo : public ::google::protobuf::Message {
 public:
  RewardListInfo();
  virtual ~RewardListInfo();

  RewardListInfo(const RewardListInfo& from);

  inline RewardListInfo& operator=(const RewardListInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const RewardListInfo& default_instance();

  void Swap(RewardListInfo* other);

  // implements Message ----------------------------------------------

  RewardListInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const RewardListInfo& from);
  void MergeFrom(const RewardListInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 invit = 1;
  inline bool has_invit() const;
  inline void clear_invit();
  static const int kInvitFieldNumber = 1;
  inline ::google::protobuf::int32 invit() const;
  inline void set_invit(::google::protobuf::int32 value);

  // optional int32 status = 2;
  inline bool has_status() const;
  inline void clear_status();
  static const int kStatusFieldNumber = 2;
  inline ::google::protobuf::int32 status() const;
  inline void set_status(::google::protobuf::int32 value);

  // optional int32 index = 3;
  inline bool has_index() const;
  inline void clear_index();
  static const int kIndexFieldNumber = 3;
  inline ::google::protobuf::int32 index() const;
  inline void set_index(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:Pay58PlayInfo.RewardListInfo)
 private:
  inline void set_has_invit();
  inline void clear_has_invit();
  inline void set_has_status();
  inline void clear_has_status();
  inline void set_has_index();
  inline void clear_has_index();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 invit_;
  ::google::protobuf::int32 status_;
  ::google::protobuf::int32 index_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2f58Play_2eproto();
  friend void protobuf_AssignDesc_Pay_2f58Play_2eproto();
  friend void protobuf_ShutdownFile_Pay_2f58Play_2eproto();

  void InitAsDefaultInstance();
  static RewardListInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// From58PlayReqAskPayInfo

// required string openid = 1;
inline bool From58PlayReqAskPayInfo::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void From58PlayReqAskPayInfo::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void From58PlayReqAskPayInfo::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void From58PlayReqAskPayInfo::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& From58PlayReqAskPayInfo::openid() const {
  return *openid_;
}
inline void From58PlayReqAskPayInfo::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void From58PlayReqAskPayInfo::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void From58PlayReqAskPayInfo::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* From58PlayReqAskPayInfo::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* From58PlayReqAskPayInfo::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void From58PlayReqAskPayInfo::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 serverid = 2;
inline bool From58PlayReqAskPayInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void From58PlayReqAskPayInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void From58PlayReqAskPayInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void From58PlayReqAskPayInfo::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 From58PlayReqAskPayInfo::serverid() const {
  return serverid_;
}
inline void From58PlayReqAskPayInfo::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required string orderid = 3;
inline bool From58PlayReqAskPayInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void From58PlayReqAskPayInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void From58PlayReqAskPayInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void From58PlayReqAskPayInfo::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& From58PlayReqAskPayInfo::orderid() const {
  return *orderid_;
}
inline void From58PlayReqAskPayInfo::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void From58PlayReqAskPayInfo::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void From58PlayReqAskPayInfo::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* From58PlayReqAskPayInfo::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* From58PlayReqAskPayInfo::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void From58PlayReqAskPayInfo::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 money = 4;
inline bool From58PlayReqAskPayInfo::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void From58PlayReqAskPayInfo::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void From58PlayReqAskPayInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void From58PlayReqAskPayInfo::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 From58PlayReqAskPayInfo::money() const {
  return money_;
}
inline void From58PlayReqAskPayInfo::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// required uint64 timestamp = 5;
inline bool From58PlayReqAskPayInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void From58PlayReqAskPayInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void From58PlayReqAskPayInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void From58PlayReqAskPayInfo::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 From58PlayReqAskPayInfo::timestamp() const {
  return timestamp_;
}
inline void From58PlayReqAskPayInfo::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required string sig = 6;
inline bool From58PlayReqAskPayInfo::has_sig() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void From58PlayReqAskPayInfo::set_has_sig() {
  _has_bits_[0] |= 0x00000020u;
}
inline void From58PlayReqAskPayInfo::clear_has_sig() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void From58PlayReqAskPayInfo::clear_sig() {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    sig_->clear();
  }
  clear_has_sig();
}
inline const ::std::string& From58PlayReqAskPayInfo::sig() const {
  return *sig_;
}
inline void From58PlayReqAskPayInfo::set_sig(const ::std::string& value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void From58PlayReqAskPayInfo::set_sig(const char* value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void From58PlayReqAskPayInfo::set_sig(const char* value, size_t size) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* From58PlayReqAskPayInfo::mutable_sig() {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  return sig_;
}
inline ::std::string* From58PlayReqAskPayInfo::release_sig() {
  clear_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sig_;
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void From58PlayReqAskPayInfo::set_allocated_sig(::std::string* sig) {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (sig) {
    set_has_sig();
    sig_ = sig;
  } else {
    clear_has_sig();
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// To58PlayReqAskPayInfo

// required int32 ret = 1;
inline bool To58PlayReqAskPayInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void To58PlayReqAskPayInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void To58PlayReqAskPayInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void To58PlayReqAskPayInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 To58PlayReqAskPayInfo::ret() const {
  return ret_;
}
inline void To58PlayReqAskPayInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// Sys58PlayPayInfo

// required int64 charid = 1;
inline bool Sys58PlayPayInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void Sys58PlayPayInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void Sys58PlayPayInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void Sys58PlayPayInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 Sys58PlayPayInfo::charid() const {
  return charid_;
}
inline void Sys58PlayPayInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required string openid = 2;
inline bool Sys58PlayPayInfo::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void Sys58PlayPayInfo::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void Sys58PlayPayInfo::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void Sys58PlayPayInfo::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& Sys58PlayPayInfo::openid() const {
  return *openid_;
}
inline void Sys58PlayPayInfo::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void Sys58PlayPayInfo::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void Sys58PlayPayInfo::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sys58PlayPayInfo::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* Sys58PlayPayInfo::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sys58PlayPayInfo::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string orderid = 3;
inline bool Sys58PlayPayInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void Sys58PlayPayInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void Sys58PlayPayInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void Sys58PlayPayInfo::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& Sys58PlayPayInfo::orderid() const {
  return *orderid_;
}
inline void Sys58PlayPayInfo::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void Sys58PlayPayInfo::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void Sys58PlayPayInfo::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sys58PlayPayInfo::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* Sys58PlayPayInfo::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sys58PlayPayInfo::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 money = 4;
inline bool Sys58PlayPayInfo::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void Sys58PlayPayInfo::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void Sys58PlayPayInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void Sys58PlayPayInfo::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 Sys58PlayPayInfo::money() const {
  return money_;
}
inline void Sys58PlayPayInfo::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// required uint64 timestamp = 5;
inline bool Sys58PlayPayInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void Sys58PlayPayInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void Sys58PlayPayInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void Sys58PlayPayInfo::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 Sys58PlayPayInfo::timestamp() const {
  return timestamp_;
}
inline void Sys58PlayPayInfo::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required string sig = 6;
inline bool Sys58PlayPayInfo::has_sig() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void Sys58PlayPayInfo::set_has_sig() {
  _has_bits_[0] |= 0x00000020u;
}
inline void Sys58PlayPayInfo::clear_has_sig() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void Sys58PlayPayInfo::clear_sig() {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    sig_->clear();
  }
  clear_has_sig();
}
inline const ::std::string& Sys58PlayPayInfo::sig() const {
  return *sig_;
}
inline void Sys58PlayPayInfo::set_sig(const ::std::string& value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void Sys58PlayPayInfo::set_sig(const char* value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void Sys58PlayPayInfo::set_sig(const char* value, size_t size) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* Sys58PlayPayInfo::mutable_sig() {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  return sig_;
}
inline ::std::string* Sys58PlayPayInfo::release_sig() {
  clear_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sig_;
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void Sys58PlayPayInfo::set_allocated_sig(::std::string* sig) {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (sig) {
    set_has_sig();
    sig_ = sig;
  } else {
    clear_has_sig();
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 ret = 7;
inline bool Sys58PlayPayInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void Sys58PlayPayInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000040u;
}
inline void Sys58PlayPayInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void Sys58PlayPayInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 Sys58PlayPayInfo::ret() const {
  return ret_;
}
inline void Sys58PlayPayInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 flag = 8;
inline bool Sys58PlayPayInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void Sys58PlayPayInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void Sys58PlayPayInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void Sys58PlayPayInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 Sys58PlayPayInfo::flag() const {
  return flag_;
}
inline void Sys58PlayPayInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}

// -------------------------------------------------------------------

// InviteFriend58Play

// required uint32 num = 1;
inline bool InviteFriend58Play::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InviteFriend58Play::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InviteFriend58Play::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InviteFriend58Play::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 InviteFriend58Play::num() const {
  return num_;
}
inline void InviteFriend58Play::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// RetInviteFriend58Play

// required int32 ret = 1;
inline bool RetInviteFriend58Play::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetInviteFriend58Play::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetInviteFriend58Play::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetInviteFriend58Play::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RetInviteFriend58Play::ret() const {
  return ret_;
}
inline void RetInviteFriend58Play::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// FbLikeFeed

// required string openid = 1;
inline bool FbLikeFeed::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FbLikeFeed::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FbLikeFeed::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FbLikeFeed::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& FbLikeFeed::openid() const {
  return *openid_;
}
inline void FbLikeFeed::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void FbLikeFeed::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void FbLikeFeed::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FbLikeFeed::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* FbLikeFeed::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FbLikeFeed::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 serverid = 2;
inline bool FbLikeFeed::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FbLikeFeed::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FbLikeFeed::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FbLikeFeed::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 FbLikeFeed::serverid() const {
  return serverid_;
}
inline void FbLikeFeed::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required string sig = 3;
inline bool FbLikeFeed::has_sig() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FbLikeFeed::set_has_sig() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FbLikeFeed::clear_has_sig() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FbLikeFeed::clear_sig() {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    sig_->clear();
  }
  clear_has_sig();
}
inline const ::std::string& FbLikeFeed::sig() const {
  return *sig_;
}
inline void FbLikeFeed::set_sig(const ::std::string& value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void FbLikeFeed::set_sig(const char* value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void FbLikeFeed::set_sig(const char* value, size_t size) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FbLikeFeed::mutable_sig() {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  return sig_;
}
inline ::std::string* FbLikeFeed::release_sig() {
  clear_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sig_;
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FbLikeFeed::set_allocated_sig(::std::string* sig) {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (sig) {
    set_has_sig();
    sig_ = sig;
  } else {
    clear_has_sig();
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// RetFbLikeFeed

// required int32 ret = 1;
inline bool RetFbLikeFeed::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetFbLikeFeed::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetFbLikeFeed::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetFbLikeFeed::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RetFbLikeFeed::ret() const {
  return ret_;
}
inline void RetFbLikeFeed::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// FBReward

// required int32 fblike = 1;
inline bool FBReward::has_fblike() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FBReward::set_has_fblike() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FBReward::clear_has_fblike() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FBReward::clear_fblike() {
  fblike_ = 0;
  clear_has_fblike();
}
inline ::google::protobuf::int32 FBReward::fblike() const {
  return fblike_;
}
inline void FBReward::set_fblike(::google::protobuf::int32 value) {
  set_has_fblike();
  fblike_ = value;
}

// optional int32 nday = 2;
inline bool FBReward::has_nday() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FBReward::set_has_nday() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FBReward::clear_has_nday() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FBReward::clear_nday() {
  nday_ = 0;
  clear_has_nday();
}
inline ::google::protobuf::int32 FBReward::nday() const {
  return nday_;
}
inline void FBReward::set_nday(::google::protobuf::int32 value) {
  set_has_nday();
  nday_ = value;
}

// repeated .Pay58PlayInfo.RewardList rlist = 3;
inline int FBReward::rlist_size() const {
  return rlist_.size();
}
inline void FBReward::clear_rlist() {
  rlist_.Clear();
}
inline const ::Pay58PlayInfo::RewardList& FBReward::rlist(int index) const {
  return rlist_.Get(index);
}
inline ::Pay58PlayInfo::RewardList* FBReward::mutable_rlist(int index) {
  return rlist_.Mutable(index);
}
inline ::Pay58PlayInfo::RewardList* FBReward::add_rlist() {
  return rlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pay58PlayInfo::RewardList >&
FBReward::rlist() const {
  return rlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pay58PlayInfo::RewardList >*
FBReward::mutable_rlist() {
  return &rlist_;
}

// -------------------------------------------------------------------

// RewardList

// required int32 index = 1;
inline bool RewardList::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardList::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardList::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardList::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 RewardList::index() const {
  return index_;
}
inline void RewardList::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 statue = 2;
inline bool RewardList::has_statue() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardList::set_has_statue() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardList::clear_has_statue() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardList::clear_statue() {
  statue_ = 0;
  clear_has_statue();
}
inline ::google::protobuf::int32 RewardList::statue() const {
  return statue_;
}
inline void RewardList::set_statue(::google::protobuf::int32 value) {
  set_has_statue();
  statue_ = value;
}

// -------------------------------------------------------------------

// GetReward

// required int32 index = 1;
inline bool GetReward::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GetReward::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GetReward::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GetReward::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 GetReward::index() const {
  return index_;
}
inline void GetReward::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 type = 2;
inline bool GetReward::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GetReward::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GetReward::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GetReward::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GetReward::type() const {
  return type_;
}
inline void GetReward::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// RetReward

// required int32 ret = 1;
inline bool RetReward::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetReward::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetReward::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetReward::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RetReward::ret() const {
  return ret_;
}
inline void RetReward::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 index = 2;
inline bool RetReward::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetReward::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetReward::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetReward::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 RetReward::index() const {
  return index_;
}
inline void RetReward::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 type = 3;
inline bool RetReward::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RetReward::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RetReward::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RetReward::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RetReward::type() const {
  return type_;
}
inline void RetReward::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// SysFBReward

// required int64 charid = 1;
inline bool SysFBReward::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SysFBReward::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SysFBReward::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SysFBReward::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 SysFBReward::charid() const {
  return charid_;
}
inline void SysFBReward::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 index = 2;
inline bool SysFBReward::has_index() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SysFBReward::set_has_index() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SysFBReward::clear_has_index() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SysFBReward::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 SysFBReward::index() const {
  return index_;
}
inline void SysFBReward::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 type = 3;
inline bool SysFBReward::has_type() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SysFBReward::set_has_type() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SysFBReward::clear_has_type() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SysFBReward::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 SysFBReward::type() const {
  return type_;
}
inline void SysFBReward::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// repeated int32 itemId = 4;
inline int SysFBReward::itemid_size() const {
  return itemid_.size();
}
inline void SysFBReward::clear_itemid() {
  itemid_.Clear();
}
inline ::google::protobuf::int32 SysFBReward::itemid(int index) const {
  return itemid_.Get(index);
}
inline void SysFBReward::set_itemid(int index, ::google::protobuf::int32 value) {
  itemid_.Set(index, value);
}
inline void SysFBReward::add_itemid(::google::protobuf::int32 value) {
  itemid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SysFBReward::itemid() const {
  return itemid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SysFBReward::mutable_itemid() {
  return &itemid_;
}

// repeated int32 itemNum = 5;
inline int SysFBReward::itemnum_size() const {
  return itemnum_.size();
}
inline void SysFBReward::clear_itemnum() {
  itemnum_.Clear();
}
inline ::google::protobuf::int32 SysFBReward::itemnum(int index) const {
  return itemnum_.Get(index);
}
inline void SysFBReward::set_itemnum(int index, ::google::protobuf::int32 value) {
  itemnum_.Set(index, value);
}
inline void SysFBReward::add_itemnum(::google::protobuf::int32 value) {
  itemnum_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
SysFBReward::itemnum() const {
  return itemnum_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
SysFBReward::mutable_itemnum() {
  return &itemnum_;
}

// -------------------------------------------------------------------

// RetSysFBReward

// required int32 index = 1;
inline bool RetSysFBReward::has_index() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetSysFBReward::set_has_index() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetSysFBReward::clear_has_index() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetSysFBReward::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 RetSysFBReward::index() const {
  return index_;
}
inline void RetSysFBReward::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}

// optional int32 type = 2;
inline bool RetSysFBReward::has_type() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetSysFBReward::set_has_type() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetSysFBReward::clear_has_type() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetSysFBReward::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 RetSysFBReward::type() const {
  return type_;
}
inline void RetSysFBReward::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 ret = 3;
inline bool RetSysFBReward::has_ret() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RetSysFBReward::set_has_ret() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RetSysFBReward::clear_has_ret() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RetSysFBReward::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RetSysFBReward::ret() const {
  return ret_;
}
inline void RetSysFBReward::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// RetFBLike

// required int32 ret = 1;
inline bool RetFBLike::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RetFBLike::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RetFBLike::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RetFBLike::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 RetFBLike::ret() const {
  return ret_;
}
inline void RetFBLike::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional string openid = 2;
inline bool RetFBLike::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RetFBLike::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RetFBLike::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RetFBLike::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& RetFBLike::openid() const {
  return *openid_;
}
inline void RetFBLike::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void RetFBLike::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void RetFBLike::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RetFBLike::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* RetFBLike::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RetFBLike::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional uint32 serverid = 3;
inline bool RetFBLike::has_serverid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RetFBLike::set_has_serverid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RetFBLike::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RetFBLike::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 RetFBLike::serverid() const {
  return serverid_;
}
inline void RetFBLike::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// optional string sig = 4;
inline bool RetFBLike::has_sig() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void RetFBLike::set_has_sig() {
  _has_bits_[0] |= 0x00000008u;
}
inline void RetFBLike::clear_has_sig() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void RetFBLike::clear_sig() {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    sig_->clear();
  }
  clear_has_sig();
}
inline const ::std::string& RetFBLike::sig() const {
  return *sig_;
}
inline void RetFBLike::set_sig(const ::std::string& value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void RetFBLike::set_sig(const char* value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void RetFBLike::set_sig(const char* value, size_t size) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* RetFBLike::mutable_sig() {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  return sig_;
}
inline ::std::string* RetFBLike::release_sig() {
  clear_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sig_;
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void RetFBLike::set_allocated_sig(::std::string* sig) {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (sig) {
    set_has_sig();
    sig_ = sig;
  } else {
    clear_has_sig();
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// FBRewardInfo

// required int32 fblike = 1;
inline bool FBRewardInfo::has_fblike() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FBRewardInfo::set_has_fblike() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FBRewardInfo::clear_has_fblike() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FBRewardInfo::clear_fblike() {
  fblike_ = 0;
  clear_has_fblike();
}
inline ::google::protobuf::int32 FBRewardInfo::fblike() const {
  return fblike_;
}
inline void FBRewardInfo::set_fblike(::google::protobuf::int32 value) {
  set_has_fblike();
  fblike_ = value;
}

// optional int64 ntime = 2;
inline bool FBRewardInfo::has_ntime() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FBRewardInfo::set_has_ntime() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FBRewardInfo::clear_has_ntime() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FBRewardInfo::clear_ntime() {
  ntime_ = GOOGLE_LONGLONG(0);
  clear_has_ntime();
}
inline ::google::protobuf::int64 FBRewardInfo::ntime() const {
  return ntime_;
}
inline void FBRewardInfo::set_ntime(::google::protobuf::int64 value) {
  set_has_ntime();
  ntime_ = value;
}

// repeated .Pay58PlayInfo.RewardListInfo rlist = 3;
inline int FBRewardInfo::rlist_size() const {
  return rlist_.size();
}
inline void FBRewardInfo::clear_rlist() {
  rlist_.Clear();
}
inline const ::Pay58PlayInfo::RewardListInfo& FBRewardInfo::rlist(int index) const {
  return rlist_.Get(index);
}
inline ::Pay58PlayInfo::RewardListInfo* FBRewardInfo::mutable_rlist(int index) {
  return rlist_.Mutable(index);
}
inline ::Pay58PlayInfo::RewardListInfo* FBRewardInfo::add_rlist() {
  return rlist_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::Pay58PlayInfo::RewardListInfo >&
FBRewardInfo::rlist() const {
  return rlist_;
}
inline ::google::protobuf::RepeatedPtrField< ::Pay58PlayInfo::RewardListInfo >*
FBRewardInfo::mutable_rlist() {
  return &rlist_;
}

// -------------------------------------------------------------------

// RewardListInfo

// optional int32 invit = 1;
inline bool RewardListInfo::has_invit() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void RewardListInfo::set_has_invit() {
  _has_bits_[0] |= 0x00000001u;
}
inline void RewardListInfo::clear_has_invit() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void RewardListInfo::clear_invit() {
  invit_ = 0;
  clear_has_invit();
}
inline ::google::protobuf::int32 RewardListInfo::invit() const {
  return invit_;
}
inline void RewardListInfo::set_invit(::google::protobuf::int32 value) {
  set_has_invit();
  invit_ = value;
}

// optional int32 status = 2;
inline bool RewardListInfo::has_status() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void RewardListInfo::set_has_status() {
  _has_bits_[0] |= 0x00000002u;
}
inline void RewardListInfo::clear_has_status() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void RewardListInfo::clear_status() {
  status_ = 0;
  clear_has_status();
}
inline ::google::protobuf::int32 RewardListInfo::status() const {
  return status_;
}
inline void RewardListInfo::set_status(::google::protobuf::int32 value) {
  set_has_status();
  status_ = value;
}

// optional int32 index = 3;
inline bool RewardListInfo::has_index() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void RewardListInfo::set_has_index() {
  _has_bits_[0] |= 0x00000004u;
}
inline void RewardListInfo::clear_has_index() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void RewardListInfo::clear_index() {
  index_ = 0;
  clear_has_index();
}
inline ::google::protobuf::int32 RewardListInfo::index() const {
  return index_;
}
inline void RewardListInfo::set_index(::google::protobuf::int32 value) {
  set_has_index();
  index_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Pay58PlayInfo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Pay_2f58Play_2eproto__INCLUDED
