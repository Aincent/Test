// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Marry/MarryMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Marry/MarryMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace MarryMessInfo {

namespace {

const ::google::protobuf::Descriptor* ClientReqPropose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqPropose_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientPropose_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientPropose_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientNoteProposed_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientNoteProposed_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientSimProposedAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientSimProposedAnswer_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientProposedAnswer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientProposedAnswer_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientProposedResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientProposedResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientMarryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientMarryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqOrderWedding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqOrderWedding_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientOrderWedding_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientOrderWedding_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientInvitationIssuedInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientInvitationIssuedInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* InvitationIssued_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InvitationIssued_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqInvitationIssued_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqInvitationIssued_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientInvitationIssued_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientInvitationIssued_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqDeleteInvitation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqDeleteInvitation_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientDeleteInvitation_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientDeleteInvitation_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientInvitationSend_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientInvitationSend_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientMarryInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientMarryInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqCelebration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqCelebration_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientCelebration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientCelebration_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMToClientCelebration_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMToClientCelebration_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMToClientCeleTimes_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMToClientCeleTimes_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientDeleteInvite_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientDeleteInvite_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientWddingOver_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientWddingOver_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarryInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarryInstance_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto() {
  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Marry/MarryMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ClientReqPropose_descriptor_ = file->message_type(0);
  static const int ClientReqPropose_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqPropose, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqPropose, declaration_),
  };
  ClientReqPropose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqPropose_descriptor_,
      ClientReqPropose::default_instance_,
      ClientReqPropose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqPropose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqPropose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqPropose));
  WSToClientPropose_descriptor_ = file->message_type(1);
  static const int WSToClientPropose_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientPropose, ret_),
  };
  WSToClientPropose_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientPropose_descriptor_,
      WSToClientPropose::default_instance_,
      WSToClientPropose_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientPropose, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientPropose, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientPropose));
  WSToClientNoteProposed_descriptor_ = file->message_type(2);
  static const int WSToClientNoteProposed_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientNoteProposed, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientNoteProposed, declaration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientNoteProposed, charname_),
  };
  WSToClientNoteProposed_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientNoteProposed_descriptor_,
      WSToClientNoteProposed::default_instance_,
      WSToClientNoteProposed_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientNoteProposed, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientNoteProposed, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientNoteProposed));
  ClientSimProposedAnswer_descriptor_ = file->message_type(3);
  static const int ClientSimProposedAnswer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSimProposedAnswer, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSimProposedAnswer, willing_),
  };
  ClientSimProposedAnswer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientSimProposedAnswer_descriptor_,
      ClientSimProposedAnswer::default_instance_,
      ClientSimProposedAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSimProposedAnswer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientSimProposedAnswer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientSimProposedAnswer));
  WSToClientProposedAnswer_descriptor_ = file->message_type(4);
  static const int WSToClientProposedAnswer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientProposedAnswer, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientProposedAnswer, willing_),
  };
  WSToClientProposedAnswer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientProposedAnswer_descriptor_,
      WSToClientProposedAnswer::default_instance_,
      WSToClientProposedAnswer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientProposedAnswer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientProposedAnswer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientProposedAnswer));
  WSToClientProposedResult_descriptor_ = file->message_type(5);
  static const int WSToClientProposedResult_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientProposedResult, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientProposedResult, willing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientProposedResult, charname_),
  };
  WSToClientProposedResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientProposedResult_descriptor_,
      WSToClientProposedResult::default_instance_,
      WSToClientProposedResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientProposedResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientProposedResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientProposedResult));
  WSToClientMarryInfo_descriptor_ = file->message_type(6);
  static const int WSToClientMarryInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientMarryInfo, state_),
  };
  WSToClientMarryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientMarryInfo_descriptor_,
      WSToClientMarryInfo::default_instance_,
      WSToClientMarryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientMarryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientMarryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientMarryInfo));
  ClientReqOrderWedding_descriptor_ = file->message_type(7);
  static const int ClientReqOrderWedding_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqOrderWedding, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqOrderWedding, timeid_),
  };
  ClientReqOrderWedding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqOrderWedding_descriptor_,
      ClientReqOrderWedding::default_instance_,
      ClientReqOrderWedding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqOrderWedding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqOrderWedding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqOrderWedding));
  WSToClientOrderWedding_descriptor_ = file->message_type(8);
  static const int WSToClientOrderWedding_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientOrderWedding, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientOrderWedding, invited_),
  };
  WSToClientOrderWedding_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientOrderWedding_descriptor_,
      WSToClientOrderWedding::default_instance_,
      WSToClientOrderWedding_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientOrderWedding, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientOrderWedding, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientOrderWedding));
  WSToClientInvitationIssuedInfo_descriptor_ = file->message_type(9);
  static const int WSToClientInvitationIssuedInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationIssuedInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationIssuedInfo, timeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationIssuedInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationIssuedInfo, invited_),
  };
  WSToClientInvitationIssuedInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientInvitationIssuedInfo_descriptor_,
      WSToClientInvitationIssuedInfo::default_instance_,
      WSToClientInvitationIssuedInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationIssuedInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationIssuedInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientInvitationIssuedInfo));
  InvitationIssued_descriptor_ = file->message_type(10);
  static const int InvitationIssued_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationIssued, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationIssued, per_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationIssued, name_),
  };
  InvitationIssued_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InvitationIssued_descriptor_,
      InvitationIssued::default_instance_,
      InvitationIssued_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationIssued, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InvitationIssued, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InvitationIssued));
  ClientReqInvitationIssued_descriptor_ = file->message_type(11);
  static const int ClientReqInvitationIssued_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqInvitationIssued, invited_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqInvitationIssued, name_),
  };
  ClientReqInvitationIssued_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqInvitationIssued_descriptor_,
      ClientReqInvitationIssued::default_instance_,
      ClientReqInvitationIssued_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqInvitationIssued, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqInvitationIssued, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqInvitationIssued));
  WSToClientInvitationIssued_descriptor_ = file->message_type(12);
  static const int WSToClientInvitationIssued_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationIssued, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationIssued, invited_),
  };
  WSToClientInvitationIssued_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientInvitationIssued_descriptor_,
      WSToClientInvitationIssued::default_instance_,
      WSToClientInvitationIssued_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationIssued, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationIssued, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientInvitationIssued));
  ClientReqDeleteInvitation_descriptor_ = file->message_type(13);
  static const int ClientReqDeleteInvitation_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqDeleteInvitation, invited_),
  };
  ClientReqDeleteInvitation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqDeleteInvitation_descriptor_,
      ClientReqDeleteInvitation::default_instance_,
      ClientReqDeleteInvitation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqDeleteInvitation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqDeleteInvitation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqDeleteInvitation));
  WSToClientDeleteInvitation_descriptor_ = file->message_type(14);
  static const int WSToClientDeleteInvitation_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientDeleteInvitation, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientDeleteInvitation, invited_),
  };
  WSToClientDeleteInvitation_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientDeleteInvitation_descriptor_,
      WSToClientDeleteInvitation::default_instance_,
      WSToClientDeleteInvitation_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientDeleteInvitation, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientDeleteInvitation, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientDeleteInvitation));
  WSToClientInvitationSend_descriptor_ = file->message_type(15);
  static const int WSToClientInvitationSend_offsets_[11] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationSend, marryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationSend, timeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationSend, fpre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationSend, wpre_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationSend, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationSend, instance_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationSend, fname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationSend, wname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationSend, ringid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationSend, begintime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationSend, endtime_),
  };
  WSToClientInvitationSend_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientInvitationSend_descriptor_,
      WSToClientInvitationSend::default_instance_,
      WSToClientInvitationSend_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationSend, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInvitationSend, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientInvitationSend));
  WSToClientMarryInstance_descriptor_ = file->message_type(16);
  static const int WSToClientMarryInstance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientMarryInstance, marryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientMarryInstance, instance_),
  };
  WSToClientMarryInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientMarryInstance_descriptor_,
      WSToClientMarryInstance::default_instance_,
      WSToClientMarryInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientMarryInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientMarryInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientMarryInstance));
  ClientReqCelebration_descriptor_ = file->message_type(17);
  static const int ClientReqCelebration_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCelebration, type_),
  };
  ClientReqCelebration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqCelebration_descriptor_,
      ClientReqCelebration::default_instance_,
      ClientReqCelebration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCelebration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCelebration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqCelebration));
  WSToClientCelebration_descriptor_ = file->message_type(18);
  static const int WSToClientCelebration_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientCelebration, ret_),
  };
  WSToClientCelebration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientCelebration_descriptor_,
      WSToClientCelebration::default_instance_,
      WSToClientCelebration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientCelebration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientCelebration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientCelebration));
  GMToClientCelebration_descriptor_ = file->message_type(19);
  static const int GMToClientCelebration_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCelebration, type_),
  };
  GMToClientCelebration_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMToClientCelebration_descriptor_,
      GMToClientCelebration::default_instance_,
      GMToClientCelebration_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCelebration, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCelebration, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMToClientCelebration));
  GMToClientCeleTimes_descriptor_ = file->message_type(20);
  static const int GMToClientCeleTimes_offsets_[8] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCeleTimes, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCeleTimes, retype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCeleTimes, cd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCeleTimes, firs_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCeleTimes, light_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCeleTimes, wine_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCeleTimes, star_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCeleTimes, time_),
  };
  GMToClientCeleTimes_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMToClientCeleTimes_descriptor_,
      GMToClientCeleTimes::default_instance_,
      GMToClientCeleTimes_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCeleTimes, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToClientCeleTimes, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMToClientCeleTimes));
  WSToClientDeleteInvite_descriptor_ = file->message_type(21);
  static const int WSToClientDeleteInvite_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientDeleteInvite, marryid_),
  };
  WSToClientDeleteInvite_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientDeleteInvite_descriptor_,
      WSToClientDeleteInvite::default_instance_,
      WSToClientDeleteInvite_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientDeleteInvite, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientDeleteInvite, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientDeleteInvite));
  WSToClientWddingOver_descriptor_ = file->message_type(22);
  static const int WSToClientWddingOver_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientWddingOver, marryid_),
  };
  WSToClientWddingOver_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientWddingOver_descriptor_,
      WSToClientWddingOver::default_instance_,
      WSToClientWddingOver_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientWddingOver, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientWddingOver, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientWddingOver));
  MarryInstance_descriptor_ = file->message_type(23);
  static const int MarryInstance_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInstance, retf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInstance, rets_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInstance, fchaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInstance, wchaid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInstance, rett_),
  };
  MarryInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarryInstance_descriptor_,
      MarryInstance::default_instance_,
      MarryInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarryInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarryInstance));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Marry_2fMarryMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqPropose_descriptor_, &ClientReqPropose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientPropose_descriptor_, &WSToClientPropose::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientNoteProposed_descriptor_, &WSToClientNoteProposed::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientSimProposedAnswer_descriptor_, &ClientSimProposedAnswer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientProposedAnswer_descriptor_, &WSToClientProposedAnswer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientProposedResult_descriptor_, &WSToClientProposedResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientMarryInfo_descriptor_, &WSToClientMarryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqOrderWedding_descriptor_, &ClientReqOrderWedding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientOrderWedding_descriptor_, &WSToClientOrderWedding::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientInvitationIssuedInfo_descriptor_, &WSToClientInvitationIssuedInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InvitationIssued_descriptor_, &InvitationIssued::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqInvitationIssued_descriptor_, &ClientReqInvitationIssued::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientInvitationIssued_descriptor_, &WSToClientInvitationIssued::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqDeleteInvitation_descriptor_, &ClientReqDeleteInvitation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientDeleteInvitation_descriptor_, &WSToClientDeleteInvitation::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientInvitationSend_descriptor_, &WSToClientInvitationSend::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientMarryInstance_descriptor_, &WSToClientMarryInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqCelebration_descriptor_, &ClientReqCelebration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientCelebration_descriptor_, &WSToClientCelebration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMToClientCelebration_descriptor_, &GMToClientCelebration::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMToClientCeleTimes_descriptor_, &GMToClientCeleTimes::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientDeleteInvite_descriptor_, &WSToClientDeleteInvite::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientWddingOver_descriptor_, &WSToClientWddingOver::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarryInstance_descriptor_, &MarryInstance::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto() {
  delete ClientReqPropose::default_instance_;
  delete ClientReqPropose_reflection_;
  delete WSToClientPropose::default_instance_;
  delete WSToClientPropose_reflection_;
  delete WSToClientNoteProposed::default_instance_;
  delete WSToClientNoteProposed_reflection_;
  delete ClientSimProposedAnswer::default_instance_;
  delete ClientSimProposedAnswer_reflection_;
  delete WSToClientProposedAnswer::default_instance_;
  delete WSToClientProposedAnswer_reflection_;
  delete WSToClientProposedResult::default_instance_;
  delete WSToClientProposedResult_reflection_;
  delete WSToClientMarryInfo::default_instance_;
  delete WSToClientMarryInfo_reflection_;
  delete ClientReqOrderWedding::default_instance_;
  delete ClientReqOrderWedding_reflection_;
  delete WSToClientOrderWedding::default_instance_;
  delete WSToClientOrderWedding_reflection_;
  delete WSToClientInvitationIssuedInfo::default_instance_;
  delete WSToClientInvitationIssuedInfo_reflection_;
  delete InvitationIssued::default_instance_;
  delete InvitationIssued_reflection_;
  delete ClientReqInvitationIssued::default_instance_;
  delete ClientReqInvitationIssued_reflection_;
  delete WSToClientInvitationIssued::default_instance_;
  delete WSToClientInvitationIssued_reflection_;
  delete ClientReqDeleteInvitation::default_instance_;
  delete ClientReqDeleteInvitation_reflection_;
  delete WSToClientDeleteInvitation::default_instance_;
  delete WSToClientDeleteInvitation_reflection_;
  delete WSToClientInvitationSend::default_instance_;
  delete WSToClientInvitationSend_reflection_;
  delete WSToClientMarryInstance::default_instance_;
  delete WSToClientMarryInstance_reflection_;
  delete ClientReqCelebration::default_instance_;
  delete ClientReqCelebration_reflection_;
  delete WSToClientCelebration::default_instance_;
  delete WSToClientCelebration_reflection_;
  delete GMToClientCelebration::default_instance_;
  delete GMToClientCelebration_reflection_;
  delete GMToClientCeleTimes::default_instance_;
  delete GMToClientCeleTimes_reflection_;
  delete WSToClientDeleteInvite::default_instance_;
  delete WSToClientDeleteInvite_reflection_;
  delete WSToClientWddingOver::default_instance_;
  delete WSToClientWddingOver_reflection_;
  delete MarryInstance::default_instance_;
  delete MarryInstance_reflection_;
}

void protobuf_AddDesc_Marry_2fMarryMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\030Marry/MarryMessage.proto\022\rMarryMessInf"
    "o\"7\n\020ClientReqPropose\022\016\n\006charId\030\001 \002(\003\022\023\n"
    "\013declaration\030\002 \001(\t\" \n\021WSToClientPropose\022"
    "\013\n\003ret\030\001 \002(\005\"O\n\026WSToClientNoteProposed\022\016"
    "\n\006charId\030\001 \002(\003\022\023\n\013declaration\030\002 \001(\t\022\020\n\010c"
    "harname\030\003 \001(\t\":\n\027ClientSimProposedAnswer"
    "\022\016\n\006charId\030\001 \002(\003\022\017\n\007willing\030\002 \001(\010\"8\n\030WST"
    "oClientProposedAnswer\022\013\n\003ret\030\001 \002(\005\022\017\n\007wi"
    "lling\030\002 \001(\010\"M\n\030WSToClientProposedResult\022"
    "\016\n\006charId\030\001 \002(\003\022\017\n\007willing\030\002 \001(\010\022\020\n\010char"
    "name\030\003 \001(\t\"$\n\023WSToClientMarryInfo\022\r\n\005sta"
    "te\030\001 \002(\005\"3\n\025ClientReqOrderWedding\022\n\n\002id\030"
    "\001 \002(\005\022\016\n\006timeid\030\002 \001(\005\"_\n\026WSToClientOrder"
    "Wedding\022\013\n\003ret\030\001 \002(\005\0228\n\007invited\030\002 \001(\0132\'."
    "MarryMessInfo.WSToClientInvitationSend\"{"
    "\n\036WSToClientInvitationIssuedInfo\022\n\n\002id\030\001"
    " \002(\005\022\016\n\006timeid\030\002 \001(\005\022\013\n\003num\030\003 \001(\005\0220\n\007inv"
    "ited\030\004 \003(\0132\037.MarryMessInfo.InvitationIss"
    "ued\"=\n\020InvitationIssued\022\016\n\006charId\030\001 \002(\003\022"
    "\013\n\003per\030\002 \001(\005\022\014\n\004name\030\003 \001(\t\":\n\031ClientReqI"
    "nvitationIssued\022\017\n\007invited\030\001 \003(\003\022\014\n\004name"
    "\030\002 \001(\t\"[\n\032WSToClientInvitationIssued\022\013\n\003"
    "ret\030\001 \002(\005\0220\n\007invited\030\002 \003(\0132\037.MarryMessIn"
    "fo.InvitationIssued\",\n\031ClientReqDeleteIn"
    "vitation\022\017\n\007invited\030\001 \003(\003\":\n\032WSToClientD"
    "eleteInvitation\022\013\n\003ret\030\001 \002(\005\022\017\n\007invited\030"
    "\002 \003(\003\"\310\001\n\030WSToClientInvitationSend\022\017\n\007ma"
    "rryid\030\001 \002(\003\022\016\n\006timeid\030\002 \001(\005\022\014\n\004fpre\030\003 \001("
    "\005\022\014\n\004wpre\030\004 \001(\005\022\013\n\003num\030\005 \001(\003\022\020\n\010instance"
    "\030\006 \001(\003\022\r\n\005fname\030\007 \001(\t\022\r\n\005wname\030\010 \001(\t\022\016\n\006"
    "ringId\030\t \001(\005\022\021\n\tbeginTime\030\n \001(\003\022\017\n\007endTi"
    "me\030\013 \001(\003\"<\n\027WSToClientMarryInstance\022\017\n\007m"
    "arryid\030\001 \002(\003\022\020\n\010instance\030\002 \001(\003\"$\n\024Client"
    "ReqCelebration\022\014\n\004type\030\001 \002(\005\"$\n\025WSToClie"
    "ntCelebration\022\013\n\003ret\030\001 \002(\005\"%\n\025GMToClient"
    "Celebration\022\014\n\004type\030\001 \002(\005\"\207\001\n\023GMToClient"
    "CeleTimes\022\r\n\005state\030\001 \002(\005\022\016\n\006reType\030\002 \001(\005"
    "\022\n\n\002cd\030\003 \001(\001\022\014\n\004firs\030\004 \001(\005\022\r\n\005light\030\005 \001("
    "\005\022\014\n\004wine\030\006 \001(\005\022\014\n\004star\030\007 \001(\005\022\014\n\004time\030\010 "
    "\001(\001\")\n\026WSToClientDeleteInvite\022\017\n\007marryid"
    "\030\001 \002(\003\"\'\n\024WSToClientWddingOver\022\017\n\007marryi"
    "d\030\001 \002(\003\"Y\n\rMarryInstance\022\014\n\004retf\030\001 \002(\003\022\014"
    "\n\004rets\030\002 \001(\003\022\016\n\006fChaid\030\003 \001(\003\022\016\n\006WChaid\030\004"
    " \001(\003\022\014\n\004rett\030\005 \003(\003", 1738);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Marry/MarryMessage.proto", &protobuf_RegisterTypes);
  ClientReqPropose::default_instance_ = new ClientReqPropose();
  WSToClientPropose::default_instance_ = new WSToClientPropose();
  WSToClientNoteProposed::default_instance_ = new WSToClientNoteProposed();
  ClientSimProposedAnswer::default_instance_ = new ClientSimProposedAnswer();
  WSToClientProposedAnswer::default_instance_ = new WSToClientProposedAnswer();
  WSToClientProposedResult::default_instance_ = new WSToClientProposedResult();
  WSToClientMarryInfo::default_instance_ = new WSToClientMarryInfo();
  ClientReqOrderWedding::default_instance_ = new ClientReqOrderWedding();
  WSToClientOrderWedding::default_instance_ = new WSToClientOrderWedding();
  WSToClientInvitationIssuedInfo::default_instance_ = new WSToClientInvitationIssuedInfo();
  InvitationIssued::default_instance_ = new InvitationIssued();
  ClientReqInvitationIssued::default_instance_ = new ClientReqInvitationIssued();
  WSToClientInvitationIssued::default_instance_ = new WSToClientInvitationIssued();
  ClientReqDeleteInvitation::default_instance_ = new ClientReqDeleteInvitation();
  WSToClientDeleteInvitation::default_instance_ = new WSToClientDeleteInvitation();
  WSToClientInvitationSend::default_instance_ = new WSToClientInvitationSend();
  WSToClientMarryInstance::default_instance_ = new WSToClientMarryInstance();
  ClientReqCelebration::default_instance_ = new ClientReqCelebration();
  WSToClientCelebration::default_instance_ = new WSToClientCelebration();
  GMToClientCelebration::default_instance_ = new GMToClientCelebration();
  GMToClientCeleTimes::default_instance_ = new GMToClientCeleTimes();
  WSToClientDeleteInvite::default_instance_ = new WSToClientDeleteInvite();
  WSToClientWddingOver::default_instance_ = new WSToClientWddingOver();
  MarryInstance::default_instance_ = new MarryInstance();
  ClientReqPropose::default_instance_->InitAsDefaultInstance();
  WSToClientPropose::default_instance_->InitAsDefaultInstance();
  WSToClientNoteProposed::default_instance_->InitAsDefaultInstance();
  ClientSimProposedAnswer::default_instance_->InitAsDefaultInstance();
  WSToClientProposedAnswer::default_instance_->InitAsDefaultInstance();
  WSToClientProposedResult::default_instance_->InitAsDefaultInstance();
  WSToClientMarryInfo::default_instance_->InitAsDefaultInstance();
  ClientReqOrderWedding::default_instance_->InitAsDefaultInstance();
  WSToClientOrderWedding::default_instance_->InitAsDefaultInstance();
  WSToClientInvitationIssuedInfo::default_instance_->InitAsDefaultInstance();
  InvitationIssued::default_instance_->InitAsDefaultInstance();
  ClientReqInvitationIssued::default_instance_->InitAsDefaultInstance();
  WSToClientInvitationIssued::default_instance_->InitAsDefaultInstance();
  ClientReqDeleteInvitation::default_instance_->InitAsDefaultInstance();
  WSToClientDeleteInvitation::default_instance_->InitAsDefaultInstance();
  WSToClientInvitationSend::default_instance_->InitAsDefaultInstance();
  WSToClientMarryInstance::default_instance_->InitAsDefaultInstance();
  ClientReqCelebration::default_instance_->InitAsDefaultInstance();
  WSToClientCelebration::default_instance_->InitAsDefaultInstance();
  GMToClientCelebration::default_instance_->InitAsDefaultInstance();
  GMToClientCeleTimes::default_instance_->InitAsDefaultInstance();
  WSToClientDeleteInvite::default_instance_->InitAsDefaultInstance();
  WSToClientWddingOver::default_instance_->InitAsDefaultInstance();
  MarryInstance::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Marry_2fMarryMessage_2eproto {
  StaticDescriptorInitializer_Marry_2fMarryMessage_2eproto() {
    protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  }
} static_descriptor_initializer_Marry_2fMarryMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientReqPropose::kCharIdFieldNumber;
const int ClientReqPropose::kDeclarationFieldNumber;
#endif  // !_MSC_VER

ClientReqPropose::ClientReqPropose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqPropose::InitAsDefaultInstance() {
}

ClientReqPropose::ClientReqPropose(const ClientReqPropose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqPropose::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqPropose::~ClientReqPropose() {
  SharedDtor();
}

void ClientReqPropose::SharedDtor() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (this != default_instance_) {
  }
}

void ClientReqPropose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqPropose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqPropose_descriptor_;
}

const ClientReqPropose& ClientReqPropose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

ClientReqPropose* ClientReqPropose::default_instance_ = NULL;

ClientReqPropose* ClientReqPropose::New() const {
  return new ClientReqPropose;
}

void ClientReqPropose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_declaration()) {
      if (declaration_ != &::google::protobuf::internal::kEmptyString) {
        declaration_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqPropose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_declaration;
        break;
      }

      // optional string declaration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_declaration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaration().data(), this->declaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqPropose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional string declaration = 2;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->declaration(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqPropose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional string declaration = 2;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->declaration(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqPropose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional string declaration = 2;
    if (has_declaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaration());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqPropose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqPropose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqPropose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqPropose::MergeFrom(const ClientReqPropose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_declaration()) {
      set_declaration(from.declaration());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqPropose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqPropose::CopyFrom(const ClientReqPropose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqPropose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqPropose::Swap(ClientReqPropose* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(declaration_, other->declaration_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqPropose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqPropose_descriptor_;
  metadata.reflection = ClientReqPropose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientPropose::kRetFieldNumber;
#endif  // !_MSC_VER

WSToClientPropose::WSToClientPropose()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientPropose::InitAsDefaultInstance() {
}

WSToClientPropose::WSToClientPropose(const WSToClientPropose& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientPropose::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientPropose::~WSToClientPropose() {
  SharedDtor();
}

void WSToClientPropose::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientPropose::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientPropose::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientPropose_descriptor_;
}

const WSToClientPropose& WSToClientPropose::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

WSToClientPropose* WSToClientPropose::default_instance_ = NULL;

WSToClientPropose* WSToClientPropose::New() const {
  return new WSToClientPropose;
}

void WSToClientPropose::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientPropose::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientPropose::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientPropose::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientPropose::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientPropose::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientPropose* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientPropose*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientPropose::MergeFrom(const WSToClientPropose& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientPropose::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientPropose::CopyFrom(const WSToClientPropose& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientPropose::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientPropose::Swap(WSToClientPropose* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientPropose::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientPropose_descriptor_;
  metadata.reflection = WSToClientPropose_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientNoteProposed::kCharIdFieldNumber;
const int WSToClientNoteProposed::kDeclarationFieldNumber;
const int WSToClientNoteProposed::kCharnameFieldNumber;
#endif  // !_MSC_VER

WSToClientNoteProposed::WSToClientNoteProposed()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientNoteProposed::InitAsDefaultInstance() {
}

WSToClientNoteProposed::WSToClientNoteProposed(const WSToClientNoteProposed& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientNoteProposed::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientNoteProposed::~WSToClientNoteProposed() {
  SharedDtor();
}

void WSToClientNoteProposed::SharedDtor() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void WSToClientNoteProposed::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientNoteProposed::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientNoteProposed_descriptor_;
}

const WSToClientNoteProposed& WSToClientNoteProposed::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

WSToClientNoteProposed* WSToClientNoteProposed::default_instance_ = NULL;

WSToClientNoteProposed* WSToClientNoteProposed::New() const {
  return new WSToClientNoteProposed;
}

void WSToClientNoteProposed::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_declaration()) {
      if (declaration_ != &::google::protobuf::internal::kEmptyString) {
        declaration_->clear();
      }
    }
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientNoteProposed::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_declaration;
        break;
      }

      // optional string declaration = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_declaration:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_declaration()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->declaration().data(), this->declaration().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charname;
        break;
      }

      // optional string charname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientNoteProposed::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional string declaration = 2;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->declaration(), output);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->charname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientNoteProposed::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional string declaration = 2;
  if (has_declaration()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->declaration().data(), this->declaration().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->declaration(), target);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientNoteProposed::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional string declaration = 2;
    if (has_declaration()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->declaration());
    }

    // optional string charname = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientNoteProposed::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientNoteProposed* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientNoteProposed*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientNoteProposed::MergeFrom(const WSToClientNoteProposed& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_declaration()) {
      set_declaration(from.declaration());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientNoteProposed::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientNoteProposed::CopyFrom(const WSToClientNoteProposed& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientNoteProposed::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientNoteProposed::Swap(WSToClientNoteProposed* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(declaration_, other->declaration_);
    std::swap(charname_, other->charname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientNoteProposed::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientNoteProposed_descriptor_;
  metadata.reflection = WSToClientNoteProposed_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientSimProposedAnswer::kCharIdFieldNumber;
const int ClientSimProposedAnswer::kWillingFieldNumber;
#endif  // !_MSC_VER

ClientSimProposedAnswer::ClientSimProposedAnswer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientSimProposedAnswer::InitAsDefaultInstance() {
}

ClientSimProposedAnswer::ClientSimProposedAnswer(const ClientSimProposedAnswer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientSimProposedAnswer::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  willing_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientSimProposedAnswer::~ClientSimProposedAnswer() {
  SharedDtor();
}

void ClientSimProposedAnswer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientSimProposedAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientSimProposedAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientSimProposedAnswer_descriptor_;
}

const ClientSimProposedAnswer& ClientSimProposedAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

ClientSimProposedAnswer* ClientSimProposedAnswer::default_instance_ = NULL;

ClientSimProposedAnswer* ClientSimProposedAnswer::New() const {
  return new ClientSimProposedAnswer;
}

void ClientSimProposedAnswer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    willing_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientSimProposedAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_willing;
        break;
      }

      // optional bool willing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_willing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &willing_)));
          set_has_willing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientSimProposedAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional bool willing = 2;
  if (has_willing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->willing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientSimProposedAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional bool willing = 2;
  if (has_willing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->willing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientSimProposedAnswer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional bool willing = 2;
    if (has_willing()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientSimProposedAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientSimProposedAnswer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientSimProposedAnswer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientSimProposedAnswer::MergeFrom(const ClientSimProposedAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_willing()) {
      set_willing(from.willing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientSimProposedAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientSimProposedAnswer::CopyFrom(const ClientSimProposedAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientSimProposedAnswer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientSimProposedAnswer::Swap(ClientSimProposedAnswer* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(willing_, other->willing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientSimProposedAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientSimProposedAnswer_descriptor_;
  metadata.reflection = ClientSimProposedAnswer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientProposedAnswer::kRetFieldNumber;
const int WSToClientProposedAnswer::kWillingFieldNumber;
#endif  // !_MSC_VER

WSToClientProposedAnswer::WSToClientProposedAnswer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientProposedAnswer::InitAsDefaultInstance() {
}

WSToClientProposedAnswer::WSToClientProposedAnswer(const WSToClientProposedAnswer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientProposedAnswer::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  willing_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientProposedAnswer::~WSToClientProposedAnswer() {
  SharedDtor();
}

void WSToClientProposedAnswer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientProposedAnswer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientProposedAnswer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientProposedAnswer_descriptor_;
}

const WSToClientProposedAnswer& WSToClientProposedAnswer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

WSToClientProposedAnswer* WSToClientProposedAnswer::default_instance_ = NULL;

WSToClientProposedAnswer* WSToClientProposedAnswer::New() const {
  return new WSToClientProposedAnswer;
}

void WSToClientProposedAnswer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    willing_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientProposedAnswer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_willing;
        break;
      }

      // optional bool willing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_willing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &willing_)));
          set_has_willing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientProposedAnswer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional bool willing = 2;
  if (has_willing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->willing(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientProposedAnswer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional bool willing = 2;
  if (has_willing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->willing(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientProposedAnswer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional bool willing = 2;
    if (has_willing()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientProposedAnswer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientProposedAnswer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientProposedAnswer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientProposedAnswer::MergeFrom(const WSToClientProposedAnswer& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_willing()) {
      set_willing(from.willing());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientProposedAnswer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientProposedAnswer::CopyFrom(const WSToClientProposedAnswer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientProposedAnswer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientProposedAnswer::Swap(WSToClientProposedAnswer* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(willing_, other->willing_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientProposedAnswer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientProposedAnswer_descriptor_;
  metadata.reflection = WSToClientProposedAnswer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientProposedResult::kCharIdFieldNumber;
const int WSToClientProposedResult::kWillingFieldNumber;
const int WSToClientProposedResult::kCharnameFieldNumber;
#endif  // !_MSC_VER

WSToClientProposedResult::WSToClientProposedResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientProposedResult::InitAsDefaultInstance() {
}

WSToClientProposedResult::WSToClientProposedResult(const WSToClientProposedResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientProposedResult::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  willing_ = false;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientProposedResult::~WSToClientProposedResult() {
  SharedDtor();
}

void WSToClientProposedResult::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void WSToClientProposedResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientProposedResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientProposedResult_descriptor_;
}

const WSToClientProposedResult& WSToClientProposedResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

WSToClientProposedResult* WSToClientProposedResult::default_instance_ = NULL;

WSToClientProposedResult* WSToClientProposedResult::New() const {
  return new WSToClientProposedResult;
}

void WSToClientProposedResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    willing_ = false;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientProposedResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_willing;
        break;
      }

      // optional bool willing = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_willing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &willing_)));
          set_has_willing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_charname;
        break;
      }

      // optional string charname = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientProposedResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional bool willing = 2;
  if (has_willing()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->willing(), output);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->charname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientProposedResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional bool willing = 2;
  if (has_willing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->willing(), target);
  }

  // optional string charname = 3;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->charname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientProposedResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional bool willing = 2;
    if (has_willing()) {
      total_size += 1 + 1;
    }

    // optional string charname = 3;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientProposedResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientProposedResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientProposedResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientProposedResult::MergeFrom(const WSToClientProposedResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_willing()) {
      set_willing(from.willing());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientProposedResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientProposedResult::CopyFrom(const WSToClientProposedResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientProposedResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientProposedResult::Swap(WSToClientProposedResult* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(willing_, other->willing_);
    std::swap(charname_, other->charname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientProposedResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientProposedResult_descriptor_;
  metadata.reflection = WSToClientProposedResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientMarryInfo::kStateFieldNumber;
#endif  // !_MSC_VER

WSToClientMarryInfo::WSToClientMarryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientMarryInfo::InitAsDefaultInstance() {
}

WSToClientMarryInfo::WSToClientMarryInfo(const WSToClientMarryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientMarryInfo::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientMarryInfo::~WSToClientMarryInfo() {
  SharedDtor();
}

void WSToClientMarryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientMarryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientMarryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientMarryInfo_descriptor_;
}

const WSToClientMarryInfo& WSToClientMarryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

WSToClientMarryInfo* WSToClientMarryInfo::default_instance_ = NULL;

WSToClientMarryInfo* WSToClientMarryInfo::New() const {
  return new WSToClientMarryInfo;
}

void WSToClientMarryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientMarryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientMarryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientMarryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientMarryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientMarryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientMarryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientMarryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientMarryInfo::MergeFrom(const WSToClientMarryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientMarryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientMarryInfo::CopyFrom(const WSToClientMarryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientMarryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientMarryInfo::Swap(WSToClientMarryInfo* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientMarryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientMarryInfo_descriptor_;
  metadata.reflection = WSToClientMarryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqOrderWedding::kIdFieldNumber;
const int ClientReqOrderWedding::kTimeidFieldNumber;
#endif  // !_MSC_VER

ClientReqOrderWedding::ClientReqOrderWedding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqOrderWedding::InitAsDefaultInstance() {
}

ClientReqOrderWedding::ClientReqOrderWedding(const ClientReqOrderWedding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqOrderWedding::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  timeid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqOrderWedding::~ClientReqOrderWedding() {
  SharedDtor();
}

void ClientReqOrderWedding::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqOrderWedding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqOrderWedding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqOrderWedding_descriptor_;
}

const ClientReqOrderWedding& ClientReqOrderWedding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

ClientReqOrderWedding* ClientReqOrderWedding::default_instance_ = NULL;

ClientReqOrderWedding* ClientReqOrderWedding::New() const {
  return new ClientReqOrderWedding;
}

void ClientReqOrderWedding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    timeid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqOrderWedding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeid;
        break;
      }

      // optional int32 timeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeid_)));
          set_has_timeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqOrderWedding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 timeid = 2;
  if (has_timeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timeid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqOrderWedding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 timeid = 2;
  if (has_timeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timeid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqOrderWedding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 timeid = 2;
    if (has_timeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqOrderWedding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqOrderWedding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqOrderWedding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqOrderWedding::MergeFrom(const ClientReqOrderWedding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_timeid()) {
      set_timeid(from.timeid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqOrderWedding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqOrderWedding::CopyFrom(const ClientReqOrderWedding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqOrderWedding::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqOrderWedding::Swap(ClientReqOrderWedding* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(timeid_, other->timeid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqOrderWedding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqOrderWedding_descriptor_;
  metadata.reflection = ClientReqOrderWedding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientOrderWedding::kRetFieldNumber;
const int WSToClientOrderWedding::kInvitedFieldNumber;
#endif  // !_MSC_VER

WSToClientOrderWedding::WSToClientOrderWedding()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientOrderWedding::InitAsDefaultInstance() {
  invited_ = const_cast< ::MarryMessInfo::WSToClientInvitationSend*>(&::MarryMessInfo::WSToClientInvitationSend::default_instance());
}

WSToClientOrderWedding::WSToClientOrderWedding(const WSToClientOrderWedding& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientOrderWedding::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  invited_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientOrderWedding::~WSToClientOrderWedding() {
  SharedDtor();
}

void WSToClientOrderWedding::SharedDtor() {
  if (this != default_instance_) {
    delete invited_;
  }
}

void WSToClientOrderWedding::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientOrderWedding::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientOrderWedding_descriptor_;
}

const WSToClientOrderWedding& WSToClientOrderWedding::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

WSToClientOrderWedding* WSToClientOrderWedding::default_instance_ = NULL;

WSToClientOrderWedding* WSToClientOrderWedding::New() const {
  return new WSToClientOrderWedding;
}

void WSToClientOrderWedding::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_invited()) {
      if (invited_ != NULL) invited_->::MarryMessInfo::WSToClientInvitationSend::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientOrderWedding::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_invited;
        break;
      }

      // optional .MarryMessInfo.WSToClientInvitationSend invited = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invited:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_invited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientOrderWedding::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .MarryMessInfo.WSToClientInvitationSend invited = 2;
  if (has_invited()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->invited(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientOrderWedding::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .MarryMessInfo.WSToClientInvitationSend invited = 2;
  if (has_invited()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->invited(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientOrderWedding::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .MarryMessInfo.WSToClientInvitationSend invited = 2;
    if (has_invited()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->invited());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientOrderWedding::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientOrderWedding* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientOrderWedding*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientOrderWedding::MergeFrom(const WSToClientOrderWedding& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_invited()) {
      mutable_invited()->::MarryMessInfo::WSToClientInvitationSend::MergeFrom(from.invited());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientOrderWedding::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientOrderWedding::CopyFrom(const WSToClientOrderWedding& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientOrderWedding::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_invited()) {
    if (!this->invited().IsInitialized()) return false;
  }
  return true;
}

void WSToClientOrderWedding::Swap(WSToClientOrderWedding* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(invited_, other->invited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientOrderWedding::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientOrderWedding_descriptor_;
  metadata.reflection = WSToClientOrderWedding_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientInvitationIssuedInfo::kIdFieldNumber;
const int WSToClientInvitationIssuedInfo::kTimeidFieldNumber;
const int WSToClientInvitationIssuedInfo::kNumFieldNumber;
const int WSToClientInvitationIssuedInfo::kInvitedFieldNumber;
#endif  // !_MSC_VER

WSToClientInvitationIssuedInfo::WSToClientInvitationIssuedInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientInvitationIssuedInfo::InitAsDefaultInstance() {
}

WSToClientInvitationIssuedInfo::WSToClientInvitationIssuedInfo(const WSToClientInvitationIssuedInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientInvitationIssuedInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  timeid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientInvitationIssuedInfo::~WSToClientInvitationIssuedInfo() {
  SharedDtor();
}

void WSToClientInvitationIssuedInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientInvitationIssuedInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientInvitationIssuedInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientInvitationIssuedInfo_descriptor_;
}

const WSToClientInvitationIssuedInfo& WSToClientInvitationIssuedInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

WSToClientInvitationIssuedInfo* WSToClientInvitationIssuedInfo::default_instance_ = NULL;

WSToClientInvitationIssuedInfo* WSToClientInvitationIssuedInfo::New() const {
  return new WSToClientInvitationIssuedInfo;
}

void WSToClientInvitationIssuedInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    timeid_ = 0;
    num_ = 0;
  }
  invited_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientInvitationIssuedInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeid;
        break;
      }

      // optional int32 timeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeid_)));
          set_has_timeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // optional int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_invited;
        break;
      }

      // repeated .MarryMessInfo.InvitationIssued invited = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invited:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_invited;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientInvitationIssuedInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 timeid = 2;
  if (has_timeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timeid(), output);
  }

  // optional int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // repeated .MarryMessInfo.InvitationIssued invited = 4;
  for (int i = 0; i < this->invited_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->invited(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientInvitationIssuedInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 timeid = 2;
  if (has_timeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timeid(), target);
  }

  // optional int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // repeated .MarryMessInfo.InvitationIssued invited = 4;
  for (int i = 0; i < this->invited_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->invited(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientInvitationIssuedInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 timeid = 2;
    if (has_timeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeid());
    }

    // optional int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  // repeated .MarryMessInfo.InvitationIssued invited = 4;
  total_size += 1 * this->invited_size();
  for (int i = 0; i < this->invited_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invited(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientInvitationIssuedInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientInvitationIssuedInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientInvitationIssuedInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientInvitationIssuedInfo::MergeFrom(const WSToClientInvitationIssuedInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  invited_.MergeFrom(from.invited_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_timeid()) {
      set_timeid(from.timeid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientInvitationIssuedInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientInvitationIssuedInfo::CopyFrom(const WSToClientInvitationIssuedInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientInvitationIssuedInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < invited_size(); i++) {
    if (!this->invited(i).IsInitialized()) return false;
  }
  return true;
}

void WSToClientInvitationIssuedInfo::Swap(WSToClientInvitationIssuedInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(timeid_, other->timeid_);
    std::swap(num_, other->num_);
    invited_.Swap(&other->invited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientInvitationIssuedInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientInvitationIssuedInfo_descriptor_;
  metadata.reflection = WSToClientInvitationIssuedInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InvitationIssued::kCharIdFieldNumber;
const int InvitationIssued::kPerFieldNumber;
const int InvitationIssued::kNameFieldNumber;
#endif  // !_MSC_VER

InvitationIssued::InvitationIssued()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InvitationIssued::InitAsDefaultInstance() {
}

InvitationIssued::InvitationIssued(const InvitationIssued& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InvitationIssued::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  per_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InvitationIssued::~InvitationIssued() {
  SharedDtor();
}

void InvitationIssued::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void InvitationIssued::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InvitationIssued::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InvitationIssued_descriptor_;
}

const InvitationIssued& InvitationIssued::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

InvitationIssued* InvitationIssued::default_instance_ = NULL;

InvitationIssued* InvitationIssued::New() const {
  return new InvitationIssued;
}

void InvitationIssued::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    per_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InvitationIssued::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_per;
        break;
      }

      // optional int32 per = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_per:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &per_)));
          set_has_per();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InvitationIssued::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int32 per = 2;
  if (has_per()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->per(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InvitationIssued::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int32 per = 2;
  if (has_per()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->per(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InvitationIssued::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 per = 2;
    if (has_per()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->per());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InvitationIssued::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InvitationIssued* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InvitationIssued*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InvitationIssued::MergeFrom(const InvitationIssued& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_per()) {
      set_per(from.per());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InvitationIssued::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InvitationIssued::CopyFrom(const InvitationIssued& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InvitationIssued::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void InvitationIssued::Swap(InvitationIssued* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(per_, other->per_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InvitationIssued::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InvitationIssued_descriptor_;
  metadata.reflection = InvitationIssued_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqInvitationIssued::kInvitedFieldNumber;
const int ClientReqInvitationIssued::kNameFieldNumber;
#endif  // !_MSC_VER

ClientReqInvitationIssued::ClientReqInvitationIssued()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqInvitationIssued::InitAsDefaultInstance() {
}

ClientReqInvitationIssued::ClientReqInvitationIssued(const ClientReqInvitationIssued& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqInvitationIssued::SharedCtor() {
  _cached_size_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqInvitationIssued::~ClientReqInvitationIssued() {
  SharedDtor();
}

void ClientReqInvitationIssued::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void ClientReqInvitationIssued::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqInvitationIssued::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqInvitationIssued_descriptor_;
}

const ClientReqInvitationIssued& ClientReqInvitationIssued::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

ClientReqInvitationIssued* ClientReqInvitationIssued::default_instance_ = NULL;

ClientReqInvitationIssued* ClientReqInvitationIssued::New() const {
  return new ClientReqInvitationIssued;
}

void ClientReqInvitationIssued::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
  }
  invited_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqInvitationIssued::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 invited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_invited())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_invited())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_invited;
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional string name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqInvitationIssued::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 invited = 1;
  for (int i = 0; i < this->invited_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->invited(i), output);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->name(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqInvitationIssued::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 invited = 1;
  for (int i = 0; i < this->invited_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->invited(i), target);
  }

  // optional string name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->name(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqInvitationIssued::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional string name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

  }
  // repeated int64 invited = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->invited_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->invited(i));
    }
    total_size += 1 * this->invited_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqInvitationIssued::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqInvitationIssued* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqInvitationIssued*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqInvitationIssued::MergeFrom(const ClientReqInvitationIssued& from) {
  GOOGLE_CHECK_NE(&from, this);
  invited_.MergeFrom(from.invited_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_name()) {
      set_name(from.name());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqInvitationIssued::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqInvitationIssued::CopyFrom(const ClientReqInvitationIssued& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqInvitationIssued::IsInitialized() const {

  return true;
}

void ClientReqInvitationIssued::Swap(ClientReqInvitationIssued* other) {
  if (other != this) {
    invited_.Swap(&other->invited_);
    std::swap(name_, other->name_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqInvitationIssued::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqInvitationIssued_descriptor_;
  metadata.reflection = ClientReqInvitationIssued_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientInvitationIssued::kRetFieldNumber;
const int WSToClientInvitationIssued::kInvitedFieldNumber;
#endif  // !_MSC_VER

WSToClientInvitationIssued::WSToClientInvitationIssued()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientInvitationIssued::InitAsDefaultInstance() {
}

WSToClientInvitationIssued::WSToClientInvitationIssued(const WSToClientInvitationIssued& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientInvitationIssued::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientInvitationIssued::~WSToClientInvitationIssued() {
  SharedDtor();
}

void WSToClientInvitationIssued::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientInvitationIssued::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientInvitationIssued::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientInvitationIssued_descriptor_;
}

const WSToClientInvitationIssued& WSToClientInvitationIssued::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

WSToClientInvitationIssued* WSToClientInvitationIssued::default_instance_ = NULL;

WSToClientInvitationIssued* WSToClientInvitationIssued::New() const {
  return new WSToClientInvitationIssued;
}

void WSToClientInvitationIssued::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  invited_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientInvitationIssued::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_invited;
        break;
      }

      // repeated .MarryMessInfo.InvitationIssued invited = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_invited:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_invited()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_invited;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientInvitationIssued::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .MarryMessInfo.InvitationIssued invited = 2;
  for (int i = 0; i < this->invited_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->invited(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientInvitationIssued::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .MarryMessInfo.InvitationIssued invited = 2;
  for (int i = 0; i < this->invited_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->invited(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientInvitationIssued::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .MarryMessInfo.InvitationIssued invited = 2;
  total_size += 1 * this->invited_size();
  for (int i = 0; i < this->invited_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->invited(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientInvitationIssued::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientInvitationIssued* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientInvitationIssued*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientInvitationIssued::MergeFrom(const WSToClientInvitationIssued& from) {
  GOOGLE_CHECK_NE(&from, this);
  invited_.MergeFrom(from.invited_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientInvitationIssued::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientInvitationIssued::CopyFrom(const WSToClientInvitationIssued& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientInvitationIssued::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < invited_size(); i++) {
    if (!this->invited(i).IsInitialized()) return false;
  }
  return true;
}

void WSToClientInvitationIssued::Swap(WSToClientInvitationIssued* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    invited_.Swap(&other->invited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientInvitationIssued::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientInvitationIssued_descriptor_;
  metadata.reflection = WSToClientInvitationIssued_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqDeleteInvitation::kInvitedFieldNumber;
#endif  // !_MSC_VER

ClientReqDeleteInvitation::ClientReqDeleteInvitation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqDeleteInvitation::InitAsDefaultInstance() {
}

ClientReqDeleteInvitation::ClientReqDeleteInvitation(const ClientReqDeleteInvitation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqDeleteInvitation::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqDeleteInvitation::~ClientReqDeleteInvitation() {
  SharedDtor();
}

void ClientReqDeleteInvitation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqDeleteInvitation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqDeleteInvitation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqDeleteInvitation_descriptor_;
}

const ClientReqDeleteInvitation& ClientReqDeleteInvitation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

ClientReqDeleteInvitation* ClientReqDeleteInvitation::default_instance_ = NULL;

ClientReqDeleteInvitation* ClientReqDeleteInvitation::New() const {
  return new ClientReqDeleteInvitation;
}

void ClientReqDeleteInvitation::Clear() {
  invited_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqDeleteInvitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 invited = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_invited())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_invited())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_invited;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqDeleteInvitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 invited = 1;
  for (int i = 0; i < this->invited_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->invited(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqDeleteInvitation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 invited = 1;
  for (int i = 0; i < this->invited_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->invited(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqDeleteInvitation::ByteSize() const {
  int total_size = 0;

  // repeated int64 invited = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->invited_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->invited(i));
    }
    total_size += 1 * this->invited_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqDeleteInvitation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqDeleteInvitation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqDeleteInvitation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqDeleteInvitation::MergeFrom(const ClientReqDeleteInvitation& from) {
  GOOGLE_CHECK_NE(&from, this);
  invited_.MergeFrom(from.invited_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqDeleteInvitation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqDeleteInvitation::CopyFrom(const ClientReqDeleteInvitation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqDeleteInvitation::IsInitialized() const {

  return true;
}

void ClientReqDeleteInvitation::Swap(ClientReqDeleteInvitation* other) {
  if (other != this) {
    invited_.Swap(&other->invited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqDeleteInvitation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqDeleteInvitation_descriptor_;
  metadata.reflection = ClientReqDeleteInvitation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientDeleteInvitation::kRetFieldNumber;
const int WSToClientDeleteInvitation::kInvitedFieldNumber;
#endif  // !_MSC_VER

WSToClientDeleteInvitation::WSToClientDeleteInvitation()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientDeleteInvitation::InitAsDefaultInstance() {
}

WSToClientDeleteInvitation::WSToClientDeleteInvitation(const WSToClientDeleteInvitation& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientDeleteInvitation::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientDeleteInvitation::~WSToClientDeleteInvitation() {
  SharedDtor();
}

void WSToClientDeleteInvitation::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientDeleteInvitation::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientDeleteInvitation::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientDeleteInvitation_descriptor_;
}

const WSToClientDeleteInvitation& WSToClientDeleteInvitation::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

WSToClientDeleteInvitation* WSToClientDeleteInvitation::default_instance_ = NULL;

WSToClientDeleteInvitation* WSToClientDeleteInvitation::New() const {
  return new WSToClientDeleteInvitation;
}

void WSToClientDeleteInvitation::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  invited_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientDeleteInvitation::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_invited;
        break;
      }

      // repeated int64 invited = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_invited:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 16, input, this->mutable_invited())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_invited())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_invited;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientDeleteInvitation::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated int64 invited = 2;
  for (int i = 0; i < this->invited_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      2, this->invited(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientDeleteInvitation::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated int64 invited = 2;
  for (int i = 0; i < this->invited_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(2, this->invited(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientDeleteInvitation::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated int64 invited = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->invited_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->invited(i));
    }
    total_size += 1 * this->invited_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientDeleteInvitation::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientDeleteInvitation* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientDeleteInvitation*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientDeleteInvitation::MergeFrom(const WSToClientDeleteInvitation& from) {
  GOOGLE_CHECK_NE(&from, this);
  invited_.MergeFrom(from.invited_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientDeleteInvitation::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientDeleteInvitation::CopyFrom(const WSToClientDeleteInvitation& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientDeleteInvitation::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientDeleteInvitation::Swap(WSToClientDeleteInvitation* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    invited_.Swap(&other->invited_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientDeleteInvitation::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientDeleteInvitation_descriptor_;
  metadata.reflection = WSToClientDeleteInvitation_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientInvitationSend::kMarryidFieldNumber;
const int WSToClientInvitationSend::kTimeidFieldNumber;
const int WSToClientInvitationSend::kFpreFieldNumber;
const int WSToClientInvitationSend::kWpreFieldNumber;
const int WSToClientInvitationSend::kNumFieldNumber;
const int WSToClientInvitationSend::kInstanceFieldNumber;
const int WSToClientInvitationSend::kFnameFieldNumber;
const int WSToClientInvitationSend::kWnameFieldNumber;
const int WSToClientInvitationSend::kRingIdFieldNumber;
const int WSToClientInvitationSend::kBeginTimeFieldNumber;
const int WSToClientInvitationSend::kEndTimeFieldNumber;
#endif  // !_MSC_VER

WSToClientInvitationSend::WSToClientInvitationSend()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientInvitationSend::InitAsDefaultInstance() {
}

WSToClientInvitationSend::WSToClientInvitationSend(const WSToClientInvitationSend& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientInvitationSend::SharedCtor() {
  _cached_size_ = 0;
  marryid_ = GOOGLE_LONGLONG(0);
  timeid_ = 0;
  fpre_ = 0;
  wpre_ = 0;
  num_ = GOOGLE_LONGLONG(0);
  instance_ = GOOGLE_LONGLONG(0);
  fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  wname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ringid_ = 0;
  begintime_ = GOOGLE_LONGLONG(0);
  endtime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientInvitationSend::~WSToClientInvitationSend() {
  SharedDtor();
}

void WSToClientInvitationSend::SharedDtor() {
  if (fname_ != &::google::protobuf::internal::kEmptyString) {
    delete fname_;
  }
  if (wname_ != &::google::protobuf::internal::kEmptyString) {
    delete wname_;
  }
  if (this != default_instance_) {
  }
}

void WSToClientInvitationSend::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientInvitationSend::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientInvitationSend_descriptor_;
}

const WSToClientInvitationSend& WSToClientInvitationSend::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

WSToClientInvitationSend* WSToClientInvitationSend::default_instance_ = NULL;

WSToClientInvitationSend* WSToClientInvitationSend::New() const {
  return new WSToClientInvitationSend;
}

void WSToClientInvitationSend::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marryid_ = GOOGLE_LONGLONG(0);
    timeid_ = 0;
    fpre_ = 0;
    wpre_ = 0;
    num_ = GOOGLE_LONGLONG(0);
    instance_ = GOOGLE_LONGLONG(0);
    if (has_fname()) {
      if (fname_ != &::google::protobuf::internal::kEmptyString) {
        fname_->clear();
      }
    }
    if (has_wname()) {
      if (wname_ != &::google::protobuf::internal::kEmptyString) {
        wname_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ringid_ = 0;
    begintime_ = GOOGLE_LONGLONG(0);
    endtime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientInvitationSend::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marryid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marryid_)));
          set_has_marryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_timeid;
        break;
      }

      // optional int32 timeid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_timeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &timeid_)));
          set_has_timeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fpre;
        break;
      }

      // optional int32 fpre = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fpre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fpre_)));
          set_has_fpre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_wpre;
        break;
      }

      // optional int32 wpre = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wpre:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wpre_)));
          set_has_wpre();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_num;
        break;
      }

      // optional int64 num = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_instance;
        break;
      }

      // optional int64 instance = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instance_)));
          set_has_instance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_fname;
        break;
      }

      // optional string fname = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_fname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_fname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->fname().data(), this->fname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_wname;
        break;
      }

      // optional string wname = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_wname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_wname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->wname().data(), this->wname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ringId;
        break;
      }

      // optional int32 ringId = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ringId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ringid_)));
          set_has_ringid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_beginTime;
        break;
      }

      // optional int64 beginTime = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_beginTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &begintime_)));
          set_has_begintime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_endTime;
        break;
      }

      // optional int64 endTime = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &endtime_)));
          set_has_endtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientInvitationSend::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marryid = 1;
  if (has_marryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marryid(), output);
  }

  // optional int32 timeid = 2;
  if (has_timeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->timeid(), output);
  }

  // optional int32 fpre = 3;
  if (has_fpre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->fpre(), output);
  }

  // optional int32 wpre = 4;
  if (has_wpre()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->wpre(), output);
  }

  // optional int64 num = 5;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->num(), output);
  }

  // optional int64 instance = 6;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(6, this->instance(), output);
  }

  // optional string fname = 7;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->fname(), output);
  }

  // optional string wname = 8;
  if (has_wname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wname().data(), this->wname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->wname(), output);
  }

  // optional int32 ringId = 9;
  if (has_ringid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ringid(), output);
  }

  // optional int64 beginTime = 10;
  if (has_begintime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(10, this->begintime(), output);
  }

  // optional int64 endTime = 11;
  if (has_endtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(11, this->endtime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientInvitationSend::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marryid = 1;
  if (has_marryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marryid(), target);
  }

  // optional int32 timeid = 2;
  if (has_timeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->timeid(), target);
  }

  // optional int32 fpre = 3;
  if (has_fpre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->fpre(), target);
  }

  // optional int32 wpre = 4;
  if (has_wpre()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->wpre(), target);
  }

  // optional int64 num = 5;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->num(), target);
  }

  // optional int64 instance = 6;
  if (has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(6, this->instance(), target);
  }

  // optional string fname = 7;
  if (has_fname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->fname().data(), this->fname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->fname(), target);
  }

  // optional string wname = 8;
  if (has_wname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->wname().data(), this->wname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->wname(), target);
  }

  // optional int32 ringId = 9;
  if (has_ringid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ringid(), target);
  }

  // optional int64 beginTime = 10;
  if (has_begintime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(10, this->begintime(), target);
  }

  // optional int64 endTime = 11;
  if (has_endtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(11, this->endtime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientInvitationSend::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marryid = 1;
    if (has_marryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marryid());
    }

    // optional int32 timeid = 2;
    if (has_timeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->timeid());
    }

    // optional int32 fpre = 3;
    if (has_fpre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fpre());
    }

    // optional int32 wpre = 4;
    if (has_wpre()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wpre());
    }

    // optional int64 num = 5;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->num());
    }

    // optional int64 instance = 6;
    if (has_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instance());
    }

    // optional string fname = 7;
    if (has_fname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->fname());
    }

    // optional string wname = 8;
    if (has_wname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->wname());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 ringId = 9;
    if (has_ringid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ringid());
    }

    // optional int64 beginTime = 10;
    if (has_begintime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->begintime());
    }

    // optional int64 endTime = 11;
    if (has_endtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->endtime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientInvitationSend::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientInvitationSend* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientInvitationSend*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientInvitationSend::MergeFrom(const WSToClientInvitationSend& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marryid()) {
      set_marryid(from.marryid());
    }
    if (from.has_timeid()) {
      set_timeid(from.timeid());
    }
    if (from.has_fpre()) {
      set_fpre(from.fpre());
    }
    if (from.has_wpre()) {
      set_wpre(from.wpre());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_instance()) {
      set_instance(from.instance());
    }
    if (from.has_fname()) {
      set_fname(from.fname());
    }
    if (from.has_wname()) {
      set_wname(from.wname());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ringid()) {
      set_ringid(from.ringid());
    }
    if (from.has_begintime()) {
      set_begintime(from.begintime());
    }
    if (from.has_endtime()) {
      set_endtime(from.endtime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientInvitationSend::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientInvitationSend::CopyFrom(const WSToClientInvitationSend& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientInvitationSend::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientInvitationSend::Swap(WSToClientInvitationSend* other) {
  if (other != this) {
    std::swap(marryid_, other->marryid_);
    std::swap(timeid_, other->timeid_);
    std::swap(fpre_, other->fpre_);
    std::swap(wpre_, other->wpre_);
    std::swap(num_, other->num_);
    std::swap(instance_, other->instance_);
    std::swap(fname_, other->fname_);
    std::swap(wname_, other->wname_);
    std::swap(ringid_, other->ringid_);
    std::swap(begintime_, other->begintime_);
    std::swap(endtime_, other->endtime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientInvitationSend::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientInvitationSend_descriptor_;
  metadata.reflection = WSToClientInvitationSend_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientMarryInstance::kMarryidFieldNumber;
const int WSToClientMarryInstance::kInstanceFieldNumber;
#endif  // !_MSC_VER

WSToClientMarryInstance::WSToClientMarryInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientMarryInstance::InitAsDefaultInstance() {
}

WSToClientMarryInstance::WSToClientMarryInstance(const WSToClientMarryInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientMarryInstance::SharedCtor() {
  _cached_size_ = 0;
  marryid_ = GOOGLE_LONGLONG(0);
  instance_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientMarryInstance::~WSToClientMarryInstance() {
  SharedDtor();
}

void WSToClientMarryInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientMarryInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientMarryInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientMarryInstance_descriptor_;
}

const WSToClientMarryInstance& WSToClientMarryInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

WSToClientMarryInstance* WSToClientMarryInstance::default_instance_ = NULL;

WSToClientMarryInstance* WSToClientMarryInstance::New() const {
  return new WSToClientMarryInstance;
}

void WSToClientMarryInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marryid_ = GOOGLE_LONGLONG(0);
    instance_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientMarryInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marryid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marryid_)));
          set_has_marryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instance;
        break;
      }

      // optional int64 instance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instance_)));
          set_has_instance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientMarryInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marryid = 1;
  if (has_marryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marryid(), output);
  }

  // optional int64 instance = 2;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->instance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientMarryInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marryid = 1;
  if (has_marryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marryid(), target);
  }

  // optional int64 instance = 2;
  if (has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->instance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientMarryInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marryid = 1;
    if (has_marryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marryid());
    }

    // optional int64 instance = 2;
    if (has_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientMarryInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientMarryInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientMarryInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientMarryInstance::MergeFrom(const WSToClientMarryInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marryid()) {
      set_marryid(from.marryid());
    }
    if (from.has_instance()) {
      set_instance(from.instance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientMarryInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientMarryInstance::CopyFrom(const WSToClientMarryInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientMarryInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientMarryInstance::Swap(WSToClientMarryInstance* other) {
  if (other != this) {
    std::swap(marryid_, other->marryid_);
    std::swap(instance_, other->instance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientMarryInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientMarryInstance_descriptor_;
  metadata.reflection = WSToClientMarryInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqCelebration::kTypeFieldNumber;
#endif  // !_MSC_VER

ClientReqCelebration::ClientReqCelebration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqCelebration::InitAsDefaultInstance() {
}

ClientReqCelebration::ClientReqCelebration(const ClientReqCelebration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqCelebration::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqCelebration::~ClientReqCelebration() {
  SharedDtor();
}

void ClientReqCelebration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqCelebration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqCelebration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqCelebration_descriptor_;
}

const ClientReqCelebration& ClientReqCelebration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

ClientReqCelebration* ClientReqCelebration::default_instance_ = NULL;

ClientReqCelebration* ClientReqCelebration::New() const {
  return new ClientReqCelebration;
}

void ClientReqCelebration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqCelebration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqCelebration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqCelebration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqCelebration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqCelebration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqCelebration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqCelebration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqCelebration::MergeFrom(const ClientReqCelebration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqCelebration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqCelebration::CopyFrom(const ClientReqCelebration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqCelebration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqCelebration::Swap(ClientReqCelebration* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqCelebration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqCelebration_descriptor_;
  metadata.reflection = ClientReqCelebration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientCelebration::kRetFieldNumber;
#endif  // !_MSC_VER

WSToClientCelebration::WSToClientCelebration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientCelebration::InitAsDefaultInstance() {
}

WSToClientCelebration::WSToClientCelebration(const WSToClientCelebration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientCelebration::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientCelebration::~WSToClientCelebration() {
  SharedDtor();
}

void WSToClientCelebration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientCelebration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientCelebration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientCelebration_descriptor_;
}

const WSToClientCelebration& WSToClientCelebration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

WSToClientCelebration* WSToClientCelebration::default_instance_ = NULL;

WSToClientCelebration* WSToClientCelebration::New() const {
  return new WSToClientCelebration;
}

void WSToClientCelebration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientCelebration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientCelebration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientCelebration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientCelebration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientCelebration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientCelebration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientCelebration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientCelebration::MergeFrom(const WSToClientCelebration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientCelebration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientCelebration::CopyFrom(const WSToClientCelebration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientCelebration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientCelebration::Swap(WSToClientCelebration* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientCelebration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientCelebration_descriptor_;
  metadata.reflection = WSToClientCelebration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMToClientCelebration::kTypeFieldNumber;
#endif  // !_MSC_VER

GMToClientCelebration::GMToClientCelebration()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMToClientCelebration::InitAsDefaultInstance() {
}

GMToClientCelebration::GMToClientCelebration(const GMToClientCelebration& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMToClientCelebration::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMToClientCelebration::~GMToClientCelebration() {
  SharedDtor();
}

void GMToClientCelebration::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMToClientCelebration::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMToClientCelebration::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMToClientCelebration_descriptor_;
}

const GMToClientCelebration& GMToClientCelebration::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

GMToClientCelebration* GMToClientCelebration::default_instance_ = NULL;

GMToClientCelebration* GMToClientCelebration::New() const {
  return new GMToClientCelebration;
}

void GMToClientCelebration::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMToClientCelebration::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMToClientCelebration::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMToClientCelebration::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMToClientCelebration::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMToClientCelebration::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMToClientCelebration* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMToClientCelebration*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMToClientCelebration::MergeFrom(const GMToClientCelebration& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMToClientCelebration::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMToClientCelebration::CopyFrom(const GMToClientCelebration& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMToClientCelebration::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMToClientCelebration::Swap(GMToClientCelebration* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMToClientCelebration::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMToClientCelebration_descriptor_;
  metadata.reflection = GMToClientCelebration_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMToClientCeleTimes::kStateFieldNumber;
const int GMToClientCeleTimes::kReTypeFieldNumber;
const int GMToClientCeleTimes::kCdFieldNumber;
const int GMToClientCeleTimes::kFirsFieldNumber;
const int GMToClientCeleTimes::kLightFieldNumber;
const int GMToClientCeleTimes::kWineFieldNumber;
const int GMToClientCeleTimes::kStarFieldNumber;
const int GMToClientCeleTimes::kTimeFieldNumber;
#endif  // !_MSC_VER

GMToClientCeleTimes::GMToClientCeleTimes()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMToClientCeleTimes::InitAsDefaultInstance() {
}

GMToClientCeleTimes::GMToClientCeleTimes(const GMToClientCeleTimes& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMToClientCeleTimes::SharedCtor() {
  _cached_size_ = 0;
  state_ = 0;
  retype_ = 0;
  cd_ = 0;
  firs_ = 0;
  light_ = 0;
  wine_ = 0;
  star_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMToClientCeleTimes::~GMToClientCeleTimes() {
  SharedDtor();
}

void GMToClientCeleTimes::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMToClientCeleTimes::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMToClientCeleTimes::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMToClientCeleTimes_descriptor_;
}

const GMToClientCeleTimes& GMToClientCeleTimes::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

GMToClientCeleTimes* GMToClientCeleTimes::default_instance_ = NULL;

GMToClientCeleTimes* GMToClientCeleTimes::New() const {
  return new GMToClientCeleTimes;
}

void GMToClientCeleTimes::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    state_ = 0;
    retype_ = 0;
    cd_ = 0;
    firs_ = 0;
    light_ = 0;
    wine_ = 0;
    star_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMToClientCeleTimes::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 state = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_reType;
        break;
      }

      // optional int32 reType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &retype_)));
          set_has_retype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(25)) goto parse_cd;
        break;
      }

      // optional double cd = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_cd:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &cd_)));
          set_has_cd();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_firs;
        break;
      }

      // optional int32 firs = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_firs:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &firs_)));
          set_has_firs();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_light;
        break;
      }

      // optional int32 light = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_light:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &light_)));
          set_has_light();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_wine;
        break;
      }

      // optional int32 wine = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_wine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wine_)));
          set_has_wine();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_star;
        break;
      }

      // optional int32 star = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_star:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &star_)));
          set_has_star();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(65)) goto parse_time;
        break;
      }

      // optional double time = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED64) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   double, ::google::protobuf::internal::WireFormatLite::TYPE_DOUBLE>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMToClientCeleTimes::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 state = 1;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->state(), output);
  }

  // optional int32 reType = 2;
  if (has_retype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->retype(), output);
  }

  // optional double cd = 3;
  if (has_cd()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(3, this->cd(), output);
  }

  // optional int32 firs = 4;
  if (has_firs()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->firs(), output);
  }

  // optional int32 light = 5;
  if (has_light()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->light(), output);
  }

  // optional int32 wine = 6;
  if (has_wine()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->wine(), output);
  }

  // optional int32 star = 7;
  if (has_star()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->star(), output);
  }

  // optional double time = 8;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteDouble(8, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMToClientCeleTimes::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 state = 1;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->state(), target);
  }

  // optional int32 reType = 2;
  if (has_retype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->retype(), target);
  }

  // optional double cd = 3;
  if (has_cd()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(3, this->cd(), target);
  }

  // optional int32 firs = 4;
  if (has_firs()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->firs(), target);
  }

  // optional int32 light = 5;
  if (has_light()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->light(), target);
  }

  // optional int32 wine = 6;
  if (has_wine()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->wine(), target);
  }

  // optional int32 star = 7;
  if (has_star()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->star(), target);
  }

  // optional double time = 8;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteDoubleToArray(8, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMToClientCeleTimes::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 state = 1;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 reType = 2;
    if (has_retype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->retype());
    }

    // optional double cd = 3;
    if (has_cd()) {
      total_size += 1 + 8;
    }

    // optional int32 firs = 4;
    if (has_firs()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->firs());
    }

    // optional int32 light = 5;
    if (has_light()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->light());
    }

    // optional int32 wine = 6;
    if (has_wine()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wine());
    }

    // optional int32 star = 7;
    if (has_star()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->star());
    }

    // optional double time = 8;
    if (has_time()) {
      total_size += 1 + 8;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMToClientCeleTimes::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMToClientCeleTimes* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMToClientCeleTimes*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMToClientCeleTimes::MergeFrom(const GMToClientCeleTimes& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_retype()) {
      set_retype(from.retype());
    }
    if (from.has_cd()) {
      set_cd(from.cd());
    }
    if (from.has_firs()) {
      set_firs(from.firs());
    }
    if (from.has_light()) {
      set_light(from.light());
    }
    if (from.has_wine()) {
      set_wine(from.wine());
    }
    if (from.has_star()) {
      set_star(from.star());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMToClientCeleTimes::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMToClientCeleTimes::CopyFrom(const GMToClientCeleTimes& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMToClientCeleTimes::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GMToClientCeleTimes::Swap(GMToClientCeleTimes* other) {
  if (other != this) {
    std::swap(state_, other->state_);
    std::swap(retype_, other->retype_);
    std::swap(cd_, other->cd_);
    std::swap(firs_, other->firs_);
    std::swap(light_, other->light_);
    std::swap(wine_, other->wine_);
    std::swap(star_, other->star_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMToClientCeleTimes::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMToClientCeleTimes_descriptor_;
  metadata.reflection = GMToClientCeleTimes_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientDeleteInvite::kMarryidFieldNumber;
#endif  // !_MSC_VER

WSToClientDeleteInvite::WSToClientDeleteInvite()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientDeleteInvite::InitAsDefaultInstance() {
}

WSToClientDeleteInvite::WSToClientDeleteInvite(const WSToClientDeleteInvite& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientDeleteInvite::SharedCtor() {
  _cached_size_ = 0;
  marryid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientDeleteInvite::~WSToClientDeleteInvite() {
  SharedDtor();
}

void WSToClientDeleteInvite::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientDeleteInvite::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientDeleteInvite::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientDeleteInvite_descriptor_;
}

const WSToClientDeleteInvite& WSToClientDeleteInvite::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

WSToClientDeleteInvite* WSToClientDeleteInvite::default_instance_ = NULL;

WSToClientDeleteInvite* WSToClientDeleteInvite::New() const {
  return new WSToClientDeleteInvite;
}

void WSToClientDeleteInvite::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marryid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientDeleteInvite::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marryid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marryid_)));
          set_has_marryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientDeleteInvite::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marryid = 1;
  if (has_marryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientDeleteInvite::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marryid = 1;
  if (has_marryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientDeleteInvite::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marryid = 1;
    if (has_marryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientDeleteInvite::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientDeleteInvite* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientDeleteInvite*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientDeleteInvite::MergeFrom(const WSToClientDeleteInvite& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marryid()) {
      set_marryid(from.marryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientDeleteInvite::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientDeleteInvite::CopyFrom(const WSToClientDeleteInvite& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientDeleteInvite::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientDeleteInvite::Swap(WSToClientDeleteInvite* other) {
  if (other != this) {
    std::swap(marryid_, other->marryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientDeleteInvite::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientDeleteInvite_descriptor_;
  metadata.reflection = WSToClientDeleteInvite_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientWddingOver::kMarryidFieldNumber;
#endif  // !_MSC_VER

WSToClientWddingOver::WSToClientWddingOver()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientWddingOver::InitAsDefaultInstance() {
}

WSToClientWddingOver::WSToClientWddingOver(const WSToClientWddingOver& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientWddingOver::SharedCtor() {
  _cached_size_ = 0;
  marryid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientWddingOver::~WSToClientWddingOver() {
  SharedDtor();
}

void WSToClientWddingOver::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientWddingOver::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientWddingOver::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientWddingOver_descriptor_;
}

const WSToClientWddingOver& WSToClientWddingOver::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

WSToClientWddingOver* WSToClientWddingOver::default_instance_ = NULL;

WSToClientWddingOver* WSToClientWddingOver::New() const {
  return new WSToClientWddingOver;
}

void WSToClientWddingOver::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    marryid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientWddingOver::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 marryid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &marryid_)));
          set_has_marryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientWddingOver::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 marryid = 1;
  if (has_marryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->marryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientWddingOver::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 marryid = 1;
  if (has_marryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->marryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientWddingOver::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 marryid = 1;
    if (has_marryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->marryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientWddingOver::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientWddingOver* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientWddingOver*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientWddingOver::MergeFrom(const WSToClientWddingOver& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_marryid()) {
      set_marryid(from.marryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientWddingOver::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientWddingOver::CopyFrom(const WSToClientWddingOver& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientWddingOver::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientWddingOver::Swap(WSToClientWddingOver* other) {
  if (other != this) {
    std::swap(marryid_, other->marryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientWddingOver::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientWddingOver_descriptor_;
  metadata.reflection = WSToClientWddingOver_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarryInstance::kRetfFieldNumber;
const int MarryInstance::kRetsFieldNumber;
const int MarryInstance::kFChaidFieldNumber;
const int MarryInstance::kWChaidFieldNumber;
const int MarryInstance::kRettFieldNumber;
#endif  // !_MSC_VER

MarryInstance::MarryInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarryInstance::InitAsDefaultInstance() {
}

MarryInstance::MarryInstance(const MarryInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarryInstance::SharedCtor() {
  _cached_size_ = 0;
  retf_ = GOOGLE_LONGLONG(0);
  rets_ = GOOGLE_LONGLONG(0);
  fchaid_ = GOOGLE_LONGLONG(0);
  wchaid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarryInstance::~MarryInstance() {
  SharedDtor();
}

void MarryInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MarryInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarryInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarryInstance_descriptor_;
}

const MarryInstance& MarryInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  return *default_instance_;
}

MarryInstance* MarryInstance::default_instance_ = NULL;

MarryInstance* MarryInstance::New() const {
  return new MarryInstance;
}

void MarryInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    retf_ = GOOGLE_LONGLONG(0);
    rets_ = GOOGLE_LONGLONG(0);
    fchaid_ = GOOGLE_LONGLONG(0);
    wchaid_ = GOOGLE_LONGLONG(0);
  }
  rett_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarryInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 retf = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &retf_)));
          set_has_retf();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_rets;
        break;
      }

      // optional int64 rets = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rets:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &rets_)));
          set_has_rets();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fChaid;
        break;
      }

      // optional int64 fChaid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fChaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &fchaid_)));
          set_has_fchaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_WChaid;
        break;
      }

      // optional int64 WChaid = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_WChaid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &wchaid_)));
          set_has_wchaid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rett;
        break;
      }

      // repeated int64 rett = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rett:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 40, input, this->mutable_rett())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_rett())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_rett;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarryInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 retf = 1;
  if (has_retf()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->retf(), output);
  }

  // optional int64 rets = 2;
  if (has_rets()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->rets(), output);
  }

  // optional int64 fChaid = 3;
  if (has_fchaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->fchaid(), output);
  }

  // optional int64 WChaid = 4;
  if (has_wchaid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->wchaid(), output);
  }

  // repeated int64 rett = 5;
  for (int i = 0; i < this->rett_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      5, this->rett(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarryInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 retf = 1;
  if (has_retf()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->retf(), target);
  }

  // optional int64 rets = 2;
  if (has_rets()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->rets(), target);
  }

  // optional int64 fChaid = 3;
  if (has_fchaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->fchaid(), target);
  }

  // optional int64 WChaid = 4;
  if (has_wchaid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->wchaid(), target);
  }

  // repeated int64 rett = 5;
  for (int i = 0; i < this->rett_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(5, this->rett(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarryInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 retf = 1;
    if (has_retf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->retf());
    }

    // optional int64 rets = 2;
    if (has_rets()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->rets());
    }

    // optional int64 fChaid = 3;
    if (has_fchaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->fchaid());
    }

    // optional int64 WChaid = 4;
    if (has_wchaid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->wchaid());
    }

  }
  // repeated int64 rett = 5;
  {
    int data_size = 0;
    for (int i = 0; i < this->rett_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->rett(i));
    }
    total_size += 1 * this->rett_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarryInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarryInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarryInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarryInstance::MergeFrom(const MarryInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  rett_.MergeFrom(from.rett_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_retf()) {
      set_retf(from.retf());
    }
    if (from.has_rets()) {
      set_rets(from.rets());
    }
    if (from.has_fchaid()) {
      set_fchaid(from.fchaid());
    }
    if (from.has_wchaid()) {
      set_wchaid(from.wchaid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarryInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarryInstance::CopyFrom(const MarryInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarryInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MarryInstance::Swap(MarryInstance* other) {
  if (other != this) {
    std::swap(retf_, other->retf_);
    std::swap(rets_, other->rets_);
    std::swap(fchaid_, other->fchaid_);
    std::swap(wchaid_, other->wchaid_);
    rett_.Swap(&other->rett_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarryInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarryInstance_descriptor_;
  metadata.reflection = MarryInstance_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MarryMessInfo

// @@protoc_insertion_point(global_scope)
