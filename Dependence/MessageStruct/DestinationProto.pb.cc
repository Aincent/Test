// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: DestinationProto.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "DestinationProto.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace DestinationProto {

namespace {

const ::google::protobuf::Descriptor* ReqLookForDestinationType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqLookForDestinationType_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetLookForDestinationType_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetLookForDestinationType_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetPrestigePrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetPrestigePrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* SimDestinationComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SimDestinationComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqGetHaveRewardDestination_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqGetHaveRewardDestination_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetGetHaveRewardDestination_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetGetHaveRewardDestination_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_DestinationProto_2eproto() {
  protobuf_AddDesc_DestinationProto_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "DestinationProto.proto");
  GOOGLE_CHECK(file != NULL);
  ReqLookForDestinationType_descriptor_ = file->message_type(0);
  static const int ReqLookForDestinationType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLookForDestinationType, type_),
  };
  ReqLookForDestinationType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqLookForDestinationType_descriptor_,
      ReqLookForDestinationType::default_instance_,
      ReqLookForDestinationType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLookForDestinationType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqLookForDestinationType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqLookForDestinationType));
  RetLookForDestinationType_descriptor_ = file->message_type(1);
  static const int RetLookForDestinationType_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLookForDestinationType, destinationinfo_),
  };
  RetLookForDestinationType_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetLookForDestinationType_descriptor_,
      RetLookForDestinationType::default_instance_,
      RetLookForDestinationType_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLookForDestinationType, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetLookForDestinationType, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetLookForDestinationType));
  ReqGetPrestigePrize_descriptor_ = file->message_type(2);
  static const int ReqGetPrestigePrize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetPrestigePrize, destinationid_),
  };
  ReqGetPrestigePrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetPrestigePrize_descriptor_,
      ReqGetPrestigePrize::default_instance_,
      ReqGetPrestigePrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetPrestigePrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetPrestigePrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetPrestigePrize));
  SimDestinationComplete_descriptor_ = file->message_type(3);
  static const int SimDestinationComplete_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDestinationComplete, completeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDestinationComplete, completetype_),
  };
  SimDestinationComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SimDestinationComplete_descriptor_,
      SimDestinationComplete::default_instance_,
      SimDestinationComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDestinationComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SimDestinationComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SimDestinationComplete));
  ReqGetHaveRewardDestination_descriptor_ = file->message_type(4);
  static const int ReqGetHaveRewardDestination_offsets_[1] = {
  };
  ReqGetHaveRewardDestination_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqGetHaveRewardDestination_descriptor_,
      ReqGetHaveRewardDestination::default_instance_,
      ReqGetHaveRewardDestination_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetHaveRewardDestination, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqGetHaveRewardDestination, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqGetHaveRewardDestination));
  RetGetHaveRewardDestination_descriptor_ = file->message_type(5);
  static const int RetGetHaveRewardDestination_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetHaveRewardDestination, destinationid_),
  };
  RetGetHaveRewardDestination_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetGetHaveRewardDestination_descriptor_,
      RetGetHaveRewardDestination::default_instance_,
      RetGetHaveRewardDestination_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetHaveRewardDestination, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetGetHaveRewardDestination, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetGetHaveRewardDestination));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_DestinationProto_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqLookForDestinationType_descriptor_, &ReqLookForDestinationType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetLookForDestinationType_descriptor_, &RetLookForDestinationType::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetPrestigePrize_descriptor_, &ReqGetPrestigePrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SimDestinationComplete_descriptor_, &SimDestinationComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqGetHaveRewardDestination_descriptor_, &ReqGetHaveRewardDestination::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetGetHaveRewardDestination_descriptor_, &RetGetHaveRewardDestination::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_DestinationProto_2eproto() {
  delete ReqLookForDestinationType::default_instance_;
  delete ReqLookForDestinationType_reflection_;
  delete RetLookForDestinationType::default_instance_;
  delete RetLookForDestinationType_reflection_;
  delete ReqGetPrestigePrize::default_instance_;
  delete ReqGetPrestigePrize_reflection_;
  delete SimDestinationComplete::default_instance_;
  delete SimDestinationComplete_reflection_;
  delete ReqGetHaveRewardDestination::default_instance_;
  delete ReqGetHaveRewardDestination_reflection_;
  delete RetGetHaveRewardDestination::default_instance_;
  delete RetGetHaveRewardDestination_reflection_;
}

void protobuf_AddDesc_DestinationProto_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::ServerReturn::protobuf_AddDesc_ServerReturn3Int_2eproto();
  ::ServerReturn::protobuf_AddDesc_ServerReturnInt_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\026DestinationProto.proto\022\020DestinationPro"
    "to\032\026ServerReturn3Int.proto\032\025ServerReturn"
    "Int.proto\")\n\031ReqLookForDestinationType\022\014"
    "\n\004type\030\001 \002(\005\"R\n\031RetLookForDestinationTyp"
    "e\0225\n\017DestinationInfo\030\001 \003(\0132\034.ServerRetur"
    "n.ServerThreeInt\",\n\023ReqGetPrestigePrize\022"
    "\025\n\rdestinationID\030\001 \002(\005\"B\n\026SimDestination"
    "Complete\022\022\n\ncompleteID\030\001 \002(\005\022\024\n\014complete"
    "Type\030\002 \002(\005\"\035\n\033ReqGetHaveRewardDestinatio"
    "n\"4\n\033RetGetHaveRewardDestination\022\025\n\rdest"
    "inationId\030\001 \003(\005", 415);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "DestinationProto.proto", &protobuf_RegisterTypes);
  ReqLookForDestinationType::default_instance_ = new ReqLookForDestinationType();
  RetLookForDestinationType::default_instance_ = new RetLookForDestinationType();
  ReqGetPrestigePrize::default_instance_ = new ReqGetPrestigePrize();
  SimDestinationComplete::default_instance_ = new SimDestinationComplete();
  ReqGetHaveRewardDestination::default_instance_ = new ReqGetHaveRewardDestination();
  RetGetHaveRewardDestination::default_instance_ = new RetGetHaveRewardDestination();
  ReqLookForDestinationType::default_instance_->InitAsDefaultInstance();
  RetLookForDestinationType::default_instance_->InitAsDefaultInstance();
  ReqGetPrestigePrize::default_instance_->InitAsDefaultInstance();
  SimDestinationComplete::default_instance_->InitAsDefaultInstance();
  ReqGetHaveRewardDestination::default_instance_->InitAsDefaultInstance();
  RetGetHaveRewardDestination::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_DestinationProto_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_DestinationProto_2eproto {
  StaticDescriptorInitializer_DestinationProto_2eproto() {
    protobuf_AddDesc_DestinationProto_2eproto();
  }
} static_descriptor_initializer_DestinationProto_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ReqLookForDestinationType::kTypeFieldNumber;
#endif  // !_MSC_VER

ReqLookForDestinationType::ReqLookForDestinationType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqLookForDestinationType::InitAsDefaultInstance() {
}

ReqLookForDestinationType::ReqLookForDestinationType(const ReqLookForDestinationType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqLookForDestinationType::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqLookForDestinationType::~ReqLookForDestinationType() {
  SharedDtor();
}

void ReqLookForDestinationType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqLookForDestinationType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqLookForDestinationType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqLookForDestinationType_descriptor_;
}

const ReqLookForDestinationType& ReqLookForDestinationType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DestinationProto_2eproto();
  return *default_instance_;
}

ReqLookForDestinationType* ReqLookForDestinationType::default_instance_ = NULL;

ReqLookForDestinationType* ReqLookForDestinationType::New() const {
  return new ReqLookForDestinationType;
}

void ReqLookForDestinationType::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqLookForDestinationType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqLookForDestinationType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqLookForDestinationType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqLookForDestinationType::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqLookForDestinationType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqLookForDestinationType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqLookForDestinationType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqLookForDestinationType::MergeFrom(const ReqLookForDestinationType& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqLookForDestinationType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqLookForDestinationType::CopyFrom(const ReqLookForDestinationType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqLookForDestinationType::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqLookForDestinationType::Swap(ReqLookForDestinationType* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqLookForDestinationType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqLookForDestinationType_descriptor_;
  metadata.reflection = ReqLookForDestinationType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetLookForDestinationType::kDestinationInfoFieldNumber;
#endif  // !_MSC_VER

RetLookForDestinationType::RetLookForDestinationType()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetLookForDestinationType::InitAsDefaultInstance() {
}

RetLookForDestinationType::RetLookForDestinationType(const RetLookForDestinationType& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetLookForDestinationType::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetLookForDestinationType::~RetLookForDestinationType() {
  SharedDtor();
}

void RetLookForDestinationType::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetLookForDestinationType::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetLookForDestinationType::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetLookForDestinationType_descriptor_;
}

const RetLookForDestinationType& RetLookForDestinationType::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DestinationProto_2eproto();
  return *default_instance_;
}

RetLookForDestinationType* RetLookForDestinationType::default_instance_ = NULL;

RetLookForDestinationType* RetLookForDestinationType::New() const {
  return new RetLookForDestinationType;
}

void RetLookForDestinationType::Clear() {
  destinationinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetLookForDestinationType::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .ServerReturn.ServerThreeInt DestinationInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_DestinationInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_destinationinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_DestinationInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetLookForDestinationType::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .ServerReturn.ServerThreeInt DestinationInfo = 1;
  for (int i = 0; i < this->destinationinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->destinationinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetLookForDestinationType::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .ServerReturn.ServerThreeInt DestinationInfo = 1;
  for (int i = 0; i < this->destinationinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->destinationinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetLookForDestinationType::ByteSize() const {
  int total_size = 0;

  // repeated .ServerReturn.ServerThreeInt DestinationInfo = 1;
  total_size += 1 * this->destinationinfo_size();
  for (int i = 0; i < this->destinationinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->destinationinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetLookForDestinationType::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetLookForDestinationType* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetLookForDestinationType*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetLookForDestinationType::MergeFrom(const RetLookForDestinationType& from) {
  GOOGLE_CHECK_NE(&from, this);
  destinationinfo_.MergeFrom(from.destinationinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetLookForDestinationType::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetLookForDestinationType::CopyFrom(const RetLookForDestinationType& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetLookForDestinationType::IsInitialized() const {

  for (int i = 0; i < destinationinfo_size(); i++) {
    if (!this->destinationinfo(i).IsInitialized()) return false;
  }
  return true;
}

void RetLookForDestinationType::Swap(RetLookForDestinationType* other) {
  if (other != this) {
    destinationinfo_.Swap(&other->destinationinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetLookForDestinationType::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetLookForDestinationType_descriptor_;
  metadata.reflection = RetLookForDestinationType_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqGetPrestigePrize::kDestinationIDFieldNumber;
#endif  // !_MSC_VER

ReqGetPrestigePrize::ReqGetPrestigePrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetPrestigePrize::InitAsDefaultInstance() {
}

ReqGetPrestigePrize::ReqGetPrestigePrize(const ReqGetPrestigePrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetPrestigePrize::SharedCtor() {
  _cached_size_ = 0;
  destinationid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetPrestigePrize::~ReqGetPrestigePrize() {
  SharedDtor();
}

void ReqGetPrestigePrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetPrestigePrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetPrestigePrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetPrestigePrize_descriptor_;
}

const ReqGetPrestigePrize& ReqGetPrestigePrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DestinationProto_2eproto();
  return *default_instance_;
}

ReqGetPrestigePrize* ReqGetPrestigePrize::default_instance_ = NULL;

ReqGetPrestigePrize* ReqGetPrestigePrize::New() const {
  return new ReqGetPrestigePrize;
}

void ReqGetPrestigePrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    destinationid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetPrestigePrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 destinationID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destinationid_)));
          set_has_destinationid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqGetPrestigePrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 destinationID = 1;
  if (has_destinationid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->destinationid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetPrestigePrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 destinationID = 1;
  if (has_destinationid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->destinationid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetPrestigePrize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 destinationID = 1;
    if (has_destinationid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destinationid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetPrestigePrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetPrestigePrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetPrestigePrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetPrestigePrize::MergeFrom(const ReqGetPrestigePrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destinationid()) {
      set_destinationid(from.destinationid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetPrestigePrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetPrestigePrize::CopyFrom(const ReqGetPrestigePrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetPrestigePrize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqGetPrestigePrize::Swap(ReqGetPrestigePrize* other) {
  if (other != this) {
    std::swap(destinationid_, other->destinationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetPrestigePrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetPrestigePrize_descriptor_;
  metadata.reflection = ReqGetPrestigePrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SimDestinationComplete::kCompleteIDFieldNumber;
const int SimDestinationComplete::kCompleteTypeFieldNumber;
#endif  // !_MSC_VER

SimDestinationComplete::SimDestinationComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SimDestinationComplete::InitAsDefaultInstance() {
}

SimDestinationComplete::SimDestinationComplete(const SimDestinationComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SimDestinationComplete::SharedCtor() {
  _cached_size_ = 0;
  completeid_ = 0;
  completetype_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SimDestinationComplete::~SimDestinationComplete() {
  SharedDtor();
}

void SimDestinationComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SimDestinationComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SimDestinationComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SimDestinationComplete_descriptor_;
}

const SimDestinationComplete& SimDestinationComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DestinationProto_2eproto();
  return *default_instance_;
}

SimDestinationComplete* SimDestinationComplete::default_instance_ = NULL;

SimDestinationComplete* SimDestinationComplete::New() const {
  return new SimDestinationComplete;
}

void SimDestinationComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    completeid_ = 0;
    completetype_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SimDestinationComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 completeID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &completeid_)));
          set_has_completeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_completeType;
        break;
      }

      // required int32 completeType = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_completeType:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &completetype_)));
          set_has_completetype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SimDestinationComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 completeID = 1;
  if (has_completeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->completeid(), output);
  }

  // required int32 completeType = 2;
  if (has_completetype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->completetype(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SimDestinationComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 completeID = 1;
  if (has_completeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->completeid(), target);
  }

  // required int32 completeType = 2;
  if (has_completetype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->completetype(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SimDestinationComplete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 completeID = 1;
    if (has_completeid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->completeid());
    }

    // required int32 completeType = 2;
    if (has_completetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->completetype());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SimDestinationComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SimDestinationComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SimDestinationComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SimDestinationComplete::MergeFrom(const SimDestinationComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_completeid()) {
      set_completeid(from.completeid());
    }
    if (from.has_completetype()) {
      set_completetype(from.completetype());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SimDestinationComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SimDestinationComplete::CopyFrom(const SimDestinationComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SimDestinationComplete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SimDestinationComplete::Swap(SimDestinationComplete* other) {
  if (other != this) {
    std::swap(completeid_, other->completeid_);
    std::swap(completetype_, other->completetype_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SimDestinationComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SimDestinationComplete_descriptor_;
  metadata.reflection = SimDestinationComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqGetHaveRewardDestination::ReqGetHaveRewardDestination()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqGetHaveRewardDestination::InitAsDefaultInstance() {
}

ReqGetHaveRewardDestination::ReqGetHaveRewardDestination(const ReqGetHaveRewardDestination& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqGetHaveRewardDestination::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqGetHaveRewardDestination::~ReqGetHaveRewardDestination() {
  SharedDtor();
}

void ReqGetHaveRewardDestination::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqGetHaveRewardDestination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqGetHaveRewardDestination::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqGetHaveRewardDestination_descriptor_;
}

const ReqGetHaveRewardDestination& ReqGetHaveRewardDestination::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DestinationProto_2eproto();
  return *default_instance_;
}

ReqGetHaveRewardDestination* ReqGetHaveRewardDestination::default_instance_ = NULL;

ReqGetHaveRewardDestination* ReqGetHaveRewardDestination::New() const {
  return new ReqGetHaveRewardDestination;
}

void ReqGetHaveRewardDestination::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqGetHaveRewardDestination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqGetHaveRewardDestination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqGetHaveRewardDestination::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqGetHaveRewardDestination::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqGetHaveRewardDestination::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqGetHaveRewardDestination* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqGetHaveRewardDestination*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqGetHaveRewardDestination::MergeFrom(const ReqGetHaveRewardDestination& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqGetHaveRewardDestination::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqGetHaveRewardDestination::CopyFrom(const ReqGetHaveRewardDestination& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqGetHaveRewardDestination::IsInitialized() const {

  return true;
}

void ReqGetHaveRewardDestination::Swap(ReqGetHaveRewardDestination* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqGetHaveRewardDestination::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqGetHaveRewardDestination_descriptor_;
  metadata.reflection = ReqGetHaveRewardDestination_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetGetHaveRewardDestination::kDestinationIdFieldNumber;
#endif  // !_MSC_VER

RetGetHaveRewardDestination::RetGetHaveRewardDestination()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetGetHaveRewardDestination::InitAsDefaultInstance() {
}

RetGetHaveRewardDestination::RetGetHaveRewardDestination(const RetGetHaveRewardDestination& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetGetHaveRewardDestination::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetGetHaveRewardDestination::~RetGetHaveRewardDestination() {
  SharedDtor();
}

void RetGetHaveRewardDestination::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetGetHaveRewardDestination::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetGetHaveRewardDestination::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetGetHaveRewardDestination_descriptor_;
}

const RetGetHaveRewardDestination& RetGetHaveRewardDestination::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_DestinationProto_2eproto();
  return *default_instance_;
}

RetGetHaveRewardDestination* RetGetHaveRewardDestination::default_instance_ = NULL;

RetGetHaveRewardDestination* RetGetHaveRewardDestination::New() const {
  return new RetGetHaveRewardDestination;
}

void RetGetHaveRewardDestination::Clear() {
  destinationid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetGetHaveRewardDestination::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int32 destinationId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_destinationId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 8, input, this->mutable_destinationid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_destinationid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_destinationId;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetGetHaveRewardDestination::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int32 destinationId = 1;
  for (int i = 0; i < this->destinationid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      1, this->destinationid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetGetHaveRewardDestination::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int32 destinationId = 1;
  for (int i = 0; i < this->destinationid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(1, this->destinationid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetGetHaveRewardDestination::ByteSize() const {
  int total_size = 0;

  // repeated int32 destinationId = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->destinationid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->destinationid(i));
    }
    total_size += 1 * this->destinationid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetGetHaveRewardDestination::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetGetHaveRewardDestination* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetGetHaveRewardDestination*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetGetHaveRewardDestination::MergeFrom(const RetGetHaveRewardDestination& from) {
  GOOGLE_CHECK_NE(&from, this);
  destinationid_.MergeFrom(from.destinationid_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetGetHaveRewardDestination::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetGetHaveRewardDestination::CopyFrom(const RetGetHaveRewardDestination& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetGetHaveRewardDestination::IsInitialized() const {

  return true;
}

void RetGetHaveRewardDestination::Swap(RetGetHaveRewardDestination* other) {
  if (other != this) {
    destinationid_.Swap(&other->destinationid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetGetHaveRewardDestination::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetGetHaveRewardDestination_descriptor_;
  metadata.reflection = RetGetHaveRewardDestination_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace DestinationProto

// @@protoc_insertion_point(global_scope)
