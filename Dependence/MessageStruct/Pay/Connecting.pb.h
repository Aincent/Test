// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pay/Connecting.proto

#ifndef PROTOBUF_Pay_2fConnecting_2eproto__INCLUDED
#define PROTOBUF_Pay_2fConnecting_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace ConnectingInfo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Pay_2fConnecting_2eproto();
void protobuf_AssignDesc_Pay_2fConnecting_2eproto();
void protobuf_ShutdownFile_Pay_2fConnecting_2eproto();

class FromConnectingReqAskPayInfo;
class ToConnectingReqAskPayInfo;
class SysConnectingPayInfo;

// ===================================================================

class FromConnectingReqAskPayInfo : public ::google::protobuf::Message {
 public:
  FromConnectingReqAskPayInfo();
  virtual ~FromConnectingReqAskPayInfo();

  FromConnectingReqAskPayInfo(const FromConnectingReqAskPayInfo& from);

  inline FromConnectingReqAskPayInfo& operator=(const FromConnectingReqAskPayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const FromConnectingReqAskPayInfo& default_instance();

  void Swap(FromConnectingReqAskPayInfo* other);

  // implements Message ----------------------------------------------

  FromConnectingReqAskPayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const FromConnectingReqAskPayInfo& from);
  void MergeFrom(const FromConnectingReqAskPayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required string openid = 1;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 1;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required uint32 serverid = 2;
  inline bool has_serverid() const;
  inline void clear_serverid();
  static const int kServeridFieldNumber = 2;
  inline ::google::protobuf::uint32 serverid() const;
  inline void set_serverid(::google::protobuf::uint32 value);

  // required string orderid = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 3;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // required uint32 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // required uint64 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // required string sig = 6;
  inline bool has_sig() const;
  inline void clear_sig();
  static const int kSigFieldNumber = 6;
  inline const ::std::string& sig() const;
  inline void set_sig(const ::std::string& value);
  inline void set_sig(const char* value);
  inline void set_sig(const char* value, size_t size);
  inline ::std::string* mutable_sig();
  inline ::std::string* release_sig();
  inline void set_allocated_sig(::std::string* sig);

  // @@protoc_insertion_point(class_scope:ConnectingInfo.FromConnectingReqAskPayInfo)
 private:
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_serverid();
  inline void clear_has_serverid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_sig();
  inline void clear_has_sig();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::std::string* openid_;
  ::std::string* orderid_;
  ::google::protobuf::uint32 serverid_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::uint64 timestamp_;
  ::std::string* sig_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2fConnecting_2eproto();
  friend void protobuf_AssignDesc_Pay_2fConnecting_2eproto();
  friend void protobuf_ShutdownFile_Pay_2fConnecting_2eproto();

  void InitAsDefaultInstance();
  static FromConnectingReqAskPayInfo* default_instance_;
};
// -------------------------------------------------------------------

class ToConnectingReqAskPayInfo : public ::google::protobuf::Message {
 public:
  ToConnectingReqAskPayInfo();
  virtual ~ToConnectingReqAskPayInfo();

  ToConnectingReqAskPayInfo(const ToConnectingReqAskPayInfo& from);

  inline ToConnectingReqAskPayInfo& operator=(const ToConnectingReqAskPayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToConnectingReqAskPayInfo& default_instance();

  void Swap(ToConnectingReqAskPayInfo* other);

  // implements Message ----------------------------------------------

  ToConnectingReqAskPayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToConnectingReqAskPayInfo& from);
  void MergeFrom(const ToConnectingReqAskPayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ConnectingInfo.ToConnectingReqAskPayInfo)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2fConnecting_2eproto();
  friend void protobuf_AssignDesc_Pay_2fConnecting_2eproto();
  friend void protobuf_ShutdownFile_Pay_2fConnecting_2eproto();

  void InitAsDefaultInstance();
  static ToConnectingReqAskPayInfo* default_instance_;
};
// -------------------------------------------------------------------

class SysConnectingPayInfo : public ::google::protobuf::Message {
 public:
  SysConnectingPayInfo();
  virtual ~SysConnectingPayInfo();

  SysConnectingPayInfo(const SysConnectingPayInfo& from);

  inline SysConnectingPayInfo& operator=(const SysConnectingPayInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SysConnectingPayInfo& default_instance();

  void Swap(SysConnectingPayInfo* other);

  // implements Message ----------------------------------------------

  SysConnectingPayInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SysConnectingPayInfo& from);
  void MergeFrom(const SysConnectingPayInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required string openid = 2;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 2;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // required string orderid = 3;
  inline bool has_orderid() const;
  inline void clear_orderid();
  static const int kOrderidFieldNumber = 3;
  inline const ::std::string& orderid() const;
  inline void set_orderid(const ::std::string& value);
  inline void set_orderid(const char* value);
  inline void set_orderid(const char* value, size_t size);
  inline ::std::string* mutable_orderid();
  inline ::std::string* release_orderid();
  inline void set_allocated_orderid(::std::string* orderid);

  // required uint32 money = 4;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 4;
  inline ::google::protobuf::uint32 money() const;
  inline void set_money(::google::protobuf::uint32 value);

  // required uint64 timestamp = 5;
  inline bool has_timestamp() const;
  inline void clear_timestamp();
  static const int kTimestampFieldNumber = 5;
  inline ::google::protobuf::uint64 timestamp() const;
  inline void set_timestamp(::google::protobuf::uint64 value);

  // required string sig = 6;
  inline bool has_sig() const;
  inline void clear_sig();
  static const int kSigFieldNumber = 6;
  inline const ::std::string& sig() const;
  inline void set_sig(const ::std::string& value);
  inline void set_sig(const char* value);
  inline void set_sig(const char* value, size_t size);
  inline ::std::string* mutable_sig();
  inline ::std::string* release_sig();
  inline void set_allocated_sig(::std::string* sig);

  // required int32 ret = 7;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 7;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // required int32 flag = 8;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 8;
  inline ::google::protobuf::int32 flag() const;
  inline void set_flag(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:ConnectingInfo.SysConnectingPayInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_orderid();
  inline void clear_has_orderid();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_timestamp();
  inline void clear_has_timestamp();
  inline void set_has_sig();
  inline void clear_has_sig();
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_flag();
  inline void clear_has_flag();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* openid_;
  ::std::string* orderid_;
  ::google::protobuf::uint64 timestamp_;
  ::google::protobuf::uint32 money_;
  ::google::protobuf::int32 ret_;
  ::std::string* sig_;
  ::google::protobuf::int32 flag_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Pay_2fConnecting_2eproto();
  friend void protobuf_AssignDesc_Pay_2fConnecting_2eproto();
  friend void protobuf_ShutdownFile_Pay_2fConnecting_2eproto();

  void InitAsDefaultInstance();
  static SysConnectingPayInfo* default_instance_;
};
// ===================================================================


// ===================================================================

// FromConnectingReqAskPayInfo

// required string openid = 1;
inline bool FromConnectingReqAskPayInfo::has_openid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void FromConnectingReqAskPayInfo::set_has_openid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void FromConnectingReqAskPayInfo::clear_has_openid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void FromConnectingReqAskPayInfo::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& FromConnectingReqAskPayInfo::openid() const {
  return *openid_;
}
inline void FromConnectingReqAskPayInfo::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void FromConnectingReqAskPayInfo::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void FromConnectingReqAskPayInfo::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FromConnectingReqAskPayInfo::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* FromConnectingReqAskPayInfo::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FromConnectingReqAskPayInfo::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 serverid = 2;
inline bool FromConnectingReqAskPayInfo::has_serverid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void FromConnectingReqAskPayInfo::set_has_serverid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void FromConnectingReqAskPayInfo::clear_has_serverid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void FromConnectingReqAskPayInfo::clear_serverid() {
  serverid_ = 0u;
  clear_has_serverid();
}
inline ::google::protobuf::uint32 FromConnectingReqAskPayInfo::serverid() const {
  return serverid_;
}
inline void FromConnectingReqAskPayInfo::set_serverid(::google::protobuf::uint32 value) {
  set_has_serverid();
  serverid_ = value;
}

// required string orderid = 3;
inline bool FromConnectingReqAskPayInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void FromConnectingReqAskPayInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void FromConnectingReqAskPayInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void FromConnectingReqAskPayInfo::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& FromConnectingReqAskPayInfo::orderid() const {
  return *orderid_;
}
inline void FromConnectingReqAskPayInfo::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void FromConnectingReqAskPayInfo::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void FromConnectingReqAskPayInfo::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FromConnectingReqAskPayInfo::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* FromConnectingReqAskPayInfo::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FromConnectingReqAskPayInfo::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 money = 4;
inline bool FromConnectingReqAskPayInfo::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void FromConnectingReqAskPayInfo::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void FromConnectingReqAskPayInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void FromConnectingReqAskPayInfo::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 FromConnectingReqAskPayInfo::money() const {
  return money_;
}
inline void FromConnectingReqAskPayInfo::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// required uint64 timestamp = 5;
inline bool FromConnectingReqAskPayInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void FromConnectingReqAskPayInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void FromConnectingReqAskPayInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void FromConnectingReqAskPayInfo::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 FromConnectingReqAskPayInfo::timestamp() const {
  return timestamp_;
}
inline void FromConnectingReqAskPayInfo::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required string sig = 6;
inline bool FromConnectingReqAskPayInfo::has_sig() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void FromConnectingReqAskPayInfo::set_has_sig() {
  _has_bits_[0] |= 0x00000020u;
}
inline void FromConnectingReqAskPayInfo::clear_has_sig() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void FromConnectingReqAskPayInfo::clear_sig() {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    sig_->clear();
  }
  clear_has_sig();
}
inline const ::std::string& FromConnectingReqAskPayInfo::sig() const {
  return *sig_;
}
inline void FromConnectingReqAskPayInfo::set_sig(const ::std::string& value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void FromConnectingReqAskPayInfo::set_sig(const char* value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void FromConnectingReqAskPayInfo::set_sig(const char* value, size_t size) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* FromConnectingReqAskPayInfo::mutable_sig() {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  return sig_;
}
inline ::std::string* FromConnectingReqAskPayInfo::release_sig() {
  clear_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sig_;
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void FromConnectingReqAskPayInfo::set_allocated_sig(::std::string* sig) {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (sig) {
    set_has_sig();
    sig_ = sig;
  } else {
    clear_has_sig();
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ToConnectingReqAskPayInfo

// required int32 ret = 1;
inline bool ToConnectingReqAskPayInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToConnectingReqAskPayInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToConnectingReqAskPayInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToConnectingReqAskPayInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 ToConnectingReqAskPayInfo::ret() const {
  return ret_;
}
inline void ToConnectingReqAskPayInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// SysConnectingPayInfo

// required int64 charid = 1;
inline bool SysConnectingPayInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SysConnectingPayInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SysConnectingPayInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SysConnectingPayInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 SysConnectingPayInfo::charid() const {
  return charid_;
}
inline void SysConnectingPayInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required string openid = 2;
inline bool SysConnectingPayInfo::has_openid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SysConnectingPayInfo::set_has_openid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SysConnectingPayInfo::clear_has_openid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SysConnectingPayInfo::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& SysConnectingPayInfo::openid() const {
  return *openid_;
}
inline void SysConnectingPayInfo::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void SysConnectingPayInfo::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void SysConnectingPayInfo::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SysConnectingPayInfo::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* SysConnectingPayInfo::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SysConnectingPayInfo::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required string orderid = 3;
inline bool SysConnectingPayInfo::has_orderid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SysConnectingPayInfo::set_has_orderid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SysConnectingPayInfo::clear_has_orderid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SysConnectingPayInfo::clear_orderid() {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    orderid_->clear();
  }
  clear_has_orderid();
}
inline const ::std::string& SysConnectingPayInfo::orderid() const {
  return *orderid_;
}
inline void SysConnectingPayInfo::set_orderid(const ::std::string& value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void SysConnectingPayInfo::set_orderid(const char* value) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(value);
}
inline void SysConnectingPayInfo::set_orderid(const char* value, size_t size) {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  orderid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SysConnectingPayInfo::mutable_orderid() {
  set_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    orderid_ = new ::std::string;
  }
  return orderid_;
}
inline ::std::string* SysConnectingPayInfo::release_orderid() {
  clear_has_orderid();
  if (orderid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = orderid_;
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SysConnectingPayInfo::set_allocated_orderid(::std::string* orderid) {
  if (orderid_ != &::google::protobuf::internal::kEmptyString) {
    delete orderid_;
  }
  if (orderid) {
    set_has_orderid();
    orderid_ = orderid;
  } else {
    clear_has_orderid();
    orderid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required uint32 money = 4;
inline bool SysConnectingPayInfo::has_money() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SysConnectingPayInfo::set_has_money() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SysConnectingPayInfo::clear_has_money() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SysConnectingPayInfo::clear_money() {
  money_ = 0u;
  clear_has_money();
}
inline ::google::protobuf::uint32 SysConnectingPayInfo::money() const {
  return money_;
}
inline void SysConnectingPayInfo::set_money(::google::protobuf::uint32 value) {
  set_has_money();
  money_ = value;
}

// required uint64 timestamp = 5;
inline bool SysConnectingPayInfo::has_timestamp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SysConnectingPayInfo::set_has_timestamp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SysConnectingPayInfo::clear_has_timestamp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SysConnectingPayInfo::clear_timestamp() {
  timestamp_ = GOOGLE_ULONGLONG(0);
  clear_has_timestamp();
}
inline ::google::protobuf::uint64 SysConnectingPayInfo::timestamp() const {
  return timestamp_;
}
inline void SysConnectingPayInfo::set_timestamp(::google::protobuf::uint64 value) {
  set_has_timestamp();
  timestamp_ = value;
}

// required string sig = 6;
inline bool SysConnectingPayInfo::has_sig() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SysConnectingPayInfo::set_has_sig() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SysConnectingPayInfo::clear_has_sig() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SysConnectingPayInfo::clear_sig() {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    sig_->clear();
  }
  clear_has_sig();
}
inline const ::std::string& SysConnectingPayInfo::sig() const {
  return *sig_;
}
inline void SysConnectingPayInfo::set_sig(const ::std::string& value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void SysConnectingPayInfo::set_sig(const char* value) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(value);
}
inline void SysConnectingPayInfo::set_sig(const char* value, size_t size) {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  sig_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SysConnectingPayInfo::mutable_sig() {
  set_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    sig_ = new ::std::string;
  }
  return sig_;
}
inline ::std::string* SysConnectingPayInfo::release_sig() {
  clear_has_sig();
  if (sig_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = sig_;
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SysConnectingPayInfo::set_allocated_sig(::std::string* sig) {
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (sig) {
    set_has_sig();
    sig_ = sig;
  } else {
    clear_has_sig();
    sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 ret = 7;
inline bool SysConnectingPayInfo::has_ret() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SysConnectingPayInfo::set_has_ret() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SysConnectingPayInfo::clear_has_ret() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SysConnectingPayInfo::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 SysConnectingPayInfo::ret() const {
  return ret_;
}
inline void SysConnectingPayInfo::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// required int32 flag = 8;
inline bool SysConnectingPayInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SysConnectingPayInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SysConnectingPayInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SysConnectingPayInfo::clear_flag() {
  flag_ = 0;
  clear_has_flag();
}
inline ::google::protobuf::int32 SysConnectingPayInfo::flag() const {
  return flag_;
}
inline void SysConnectingPayInfo::set_flag(::google::protobuf::int32 value) {
  set_has_flag();
  flag_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ConnectingInfo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Pay_2fConnecting_2eproto__INCLUDED
