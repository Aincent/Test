// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: MSProtoc/MS_PlayerInfo.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "MSProtoc/MS_PlayerInfo.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PlayerInfo {

namespace {

const ::google::protobuf::Descriptor* WantPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WantPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AdminWantPlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AdminWantPlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_BaseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_BaseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_BattleInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_BattleInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_DanLuInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_DanLuInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_MagicWeapon_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_MagicWeapon_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_HorseInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_HorseInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_RankingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_RankingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_OutPutLinePlayerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_OutPutLinePlayerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_ReqRoleInfoByOpenID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_ReqRoleInfoByOpenID_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_RoleInfoByOpenID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_RoleInfoByOpenID_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_RetRoleInfoByOpenID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_RetRoleInfoByOpenID_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_ReqRoleInfoByOpenIDQzoneID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_ReqRoleInfoByOpenIDQzoneID_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_ReqContainerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_ReqContainerInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* Admin_RetContainerInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  Admin_RetContainerInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto() {
  protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "MSProtoc/MS_PlayerInfo.proto");
  GOOGLE_CHECK(file != NULL);
  WantPlayerInfo_descriptor_ = file->message_type(0);
  static const int WantPlayerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantPlayerInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantPlayerInfo, charname_),
  };
  WantPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WantPlayerInfo_descriptor_,
      WantPlayerInfo::default_instance_,
      WantPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WantPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WantPlayerInfo));
  AdminWantPlayerInfo_descriptor_ = file->message_type(1);
  static const int AdminWantPlayerInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminWantPlayerInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminWantPlayerInfo, baseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminWantPlayerInfo, battleinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminWantPlayerInfo, danluinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminWantPlayerInfo, magicinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminWantPlayerInfo, horseinfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminWantPlayerInfo, fight_),
  };
  AdminWantPlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AdminWantPlayerInfo_descriptor_,
      AdminWantPlayerInfo::default_instance_,
      AdminWantPlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminWantPlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AdminWantPlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AdminWantPlayerInfo));
  Admin_BaseInfo_descriptor_ = file->message_type(2);
  static const int Admin_BaseInfo_offsets_[53] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, golden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, bindgolden_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, deadtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, horse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, charhead_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, facontribution_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, expration_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, faction_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, fajob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, mate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, countryjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, battlecontri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, armyjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, countrycontri_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, accounttype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, sinvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, acupoint_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, settings_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, havetodo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, havetodoaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, activites_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, activitesaward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, offlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, onlinereward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, onlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, levelreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, prestige_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, challegeid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, historyreward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, continueanswer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, rightanswer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, addupgolde_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, clanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, ranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, awardranking_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, totalonlinetime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, antiaddictionstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, antiaddictiononlinetime_),
  };
  Admin_BaseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_BaseInfo_descriptor_,
      Admin_BaseInfo::default_instance_,
      Admin_BaseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BaseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_BaseInfo));
  Admin_BattleInfo_descriptor_ = file->message_type(3);
  static const int Admin_BattleInfo_offsets_[27] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, mpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, force_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, forcemax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, strength_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, cleverpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, cleverair_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, physicalpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, patience_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, agility_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, pkcount_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, powermax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, phyattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, phyattackmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, phydefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, magicattack_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, magicattackmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, magicdefence_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, hitrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, avoidrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, baselucky_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, crackdownrate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, baserte_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, movespeed_),
  };
  Admin_BattleInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_BattleInfo_descriptor_,
      Admin_BattleInfo::default_instance_,
      Admin_BattleInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_BattleInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_BattleInfo));
  Admin_DanLuInfo_descriptor_ = file->message_type(4);
  static const int Admin_DanLuInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DanLuInfo, danluid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DanLuInfo, exp_),
  };
  Admin_DanLuInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_DanLuInfo_descriptor_,
      Admin_DanLuInfo::default_instance_,
      Admin_DanLuInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DanLuInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_DanLuInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_DanLuInfo));
  Admin_MagicWeapon_descriptor_ = file->message_type(5);
  static const int Admin_MagicWeapon_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_MagicWeapon, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_MagicWeapon, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_MagicWeapon, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_MagicWeapon, advancetime_),
  };
  Admin_MagicWeapon_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_MagicWeapon_descriptor_,
      Admin_MagicWeapon::default_instance_,
      Admin_MagicWeapon_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_MagicWeapon, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_MagicWeapon, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_MagicWeapon));
  Admin_HorseInfo_descriptor_ = file->message_type(6);
  static const int Admin_HorseInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_HorseInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_HorseInfo, mid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_HorseInfo, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_HorseInfo, isauto_),
  };
  Admin_HorseInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_HorseInfo_descriptor_,
      Admin_HorseInfo::default_instance_,
      Admin_HorseInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_HorseInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_HorseInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_HorseInfo));
  Admin_RankingInfo_descriptor_ = file->message_type(7);
  static const int Admin_RankingInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RankingInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RankingInfo, onlineflag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RankingInfo, rankarry_),
  };
  Admin_RankingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_RankingInfo_descriptor_,
      Admin_RankingInfo::default_instance_,
      Admin_RankingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RankingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RankingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_RankingInfo));
  Admin_OutPutLinePlayerInfo_descriptor_ = file->message_type(8);
  static const int Admin_OutPutLinePlayerInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_OutPutLinePlayerInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_OutPutLinePlayerInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_OutPutLinePlayerInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_OutPutLinePlayerInfo, accountstate_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_OutPutLinePlayerInfo, talkingstate_),
  };
  Admin_OutPutLinePlayerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_OutPutLinePlayerInfo_descriptor_,
      Admin_OutPutLinePlayerInfo::default_instance_,
      Admin_OutPutLinePlayerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_OutPutLinePlayerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_OutPutLinePlayerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_OutPutLinePlayerInfo));
  Admin_ReqRoleInfoByOpenID_descriptor_ = file->message_type(9);
  static const int Admin_ReqRoleInfoByOpenID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqRoleInfoByOpenID, openid_),
  };
  Admin_ReqRoleInfoByOpenID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_ReqRoleInfoByOpenID_descriptor_,
      Admin_ReqRoleInfoByOpenID::default_instance_,
      Admin_ReqRoleInfoByOpenID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqRoleInfoByOpenID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqRoleInfoByOpenID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_ReqRoleInfoByOpenID));
  Admin_RoleInfoByOpenID_descriptor_ = file->message_type(10);
  static const int Admin_RoleInfoByOpenID_offsets_[13] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RoleInfoByOpenID, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RoleInfoByOpenID, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RoleInfoByOpenID, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RoleInfoByOpenID, serverid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RoleInfoByOpenID, createtime_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RoleInfoByOpenID, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RoleInfoByOpenID, lastlogin_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RoleInfoByOpenID, loginlong_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RoleInfoByOpenID, group_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RoleInfoByOpenID, occupation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RoleInfoByOpenID, isvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RoleInfoByOpenID, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RoleInfoByOpenID, openid_),
  };
  Admin_RoleInfoByOpenID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_RoleInfoByOpenID_descriptor_,
      Admin_RoleInfoByOpenID::default_instance_,
      Admin_RoleInfoByOpenID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RoleInfoByOpenID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RoleInfoByOpenID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_RoleInfoByOpenID));
  Admin_RetRoleInfoByOpenID_descriptor_ = file->message_type(11);
  static const int Admin_RetRoleInfoByOpenID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetRoleInfoByOpenID, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetRoleInfoByOpenID, roleinfolist_),
  };
  Admin_RetRoleInfoByOpenID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_RetRoleInfoByOpenID_descriptor_,
      Admin_RetRoleInfoByOpenID::default_instance_,
      Admin_RetRoleInfoByOpenID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetRoleInfoByOpenID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetRoleInfoByOpenID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_RetRoleInfoByOpenID));
  Admin_ReqRoleInfoByOpenIDQzoneID_descriptor_ = file->message_type(12);
  static const int Admin_ReqRoleInfoByOpenIDQzoneID_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqRoleInfoByOpenIDQzoneID, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqRoleInfoByOpenIDQzoneID, qzoneid_),
  };
  Admin_ReqRoleInfoByOpenIDQzoneID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_ReqRoleInfoByOpenIDQzoneID_descriptor_,
      Admin_ReqRoleInfoByOpenIDQzoneID::default_instance_,
      Admin_ReqRoleInfoByOpenIDQzoneID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqRoleInfoByOpenIDQzoneID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqRoleInfoByOpenIDQzoneID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_ReqRoleInfoByOpenIDQzoneID));
  Admin_ReqContainerInfo_descriptor_ = file->message_type(13);
  static const int Admin_ReqContainerInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqContainerInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqContainerInfo, type_),
  };
  Admin_ReqContainerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_ReqContainerInfo_descriptor_,
      Admin_ReqContainerInfo::default_instance_,
      Admin_ReqContainerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqContainerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_ReqContainerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_ReqContainerInfo));
  Admin_RetContainerInfo_descriptor_ = file->message_type(14);
  static const int Admin_RetContainerInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetContainerInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetContainerInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetContainerInfo, items_),
  };
  Admin_RetContainerInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      Admin_RetContainerInfo_descriptor_,
      Admin_RetContainerInfo::default_instance_,
      Admin_RetContainerInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetContainerInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(Admin_RetContainerInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(Admin_RetContainerInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WantPlayerInfo_descriptor_, &WantPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AdminWantPlayerInfo_descriptor_, &AdminWantPlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_BaseInfo_descriptor_, &Admin_BaseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_BattleInfo_descriptor_, &Admin_BattleInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_DanLuInfo_descriptor_, &Admin_DanLuInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_MagicWeapon_descriptor_, &Admin_MagicWeapon::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_HorseInfo_descriptor_, &Admin_HorseInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_RankingInfo_descriptor_, &Admin_RankingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_OutPutLinePlayerInfo_descriptor_, &Admin_OutPutLinePlayerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_ReqRoleInfoByOpenID_descriptor_, &Admin_ReqRoleInfoByOpenID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_RoleInfoByOpenID_descriptor_, &Admin_RoleInfoByOpenID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_RetRoleInfoByOpenID_descriptor_, &Admin_RetRoleInfoByOpenID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_ReqRoleInfoByOpenIDQzoneID_descriptor_, &Admin_ReqRoleInfoByOpenIDQzoneID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_ReqContainerInfo_descriptor_, &Admin_ReqContainerInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    Admin_RetContainerInfo_descriptor_, &Admin_RetContainerInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto() {
  delete WantPlayerInfo::default_instance_;
  delete WantPlayerInfo_reflection_;
  delete AdminWantPlayerInfo::default_instance_;
  delete AdminWantPlayerInfo_reflection_;
  delete Admin_BaseInfo::default_instance_;
  delete Admin_BaseInfo_reflection_;
  delete Admin_BattleInfo::default_instance_;
  delete Admin_BattleInfo_reflection_;
  delete Admin_DanLuInfo::default_instance_;
  delete Admin_DanLuInfo_reflection_;
  delete Admin_MagicWeapon::default_instance_;
  delete Admin_MagicWeapon_reflection_;
  delete Admin_HorseInfo::default_instance_;
  delete Admin_HorseInfo_reflection_;
  delete Admin_RankingInfo::default_instance_;
  delete Admin_RankingInfo_reflection_;
  delete Admin_OutPutLinePlayerInfo::default_instance_;
  delete Admin_OutPutLinePlayerInfo_reflection_;
  delete Admin_ReqRoleInfoByOpenID::default_instance_;
  delete Admin_ReqRoleInfoByOpenID_reflection_;
  delete Admin_RoleInfoByOpenID::default_instance_;
  delete Admin_RoleInfoByOpenID_reflection_;
  delete Admin_RetRoleInfoByOpenID::default_instance_;
  delete Admin_RetRoleInfoByOpenID_reflection_;
  delete Admin_ReqRoleInfoByOpenIDQzoneID::default_instance_;
  delete Admin_ReqRoleInfoByOpenIDQzoneID_reflection_;
  delete Admin_ReqContainerInfo::default_instance_;
  delete Admin_ReqContainerInfo_reflection_;
  delete Admin_RetContainerInfo::default_instance_;
  delete Admin_RetContainerInfo_reflection_;
}

void protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::MS_MailInfo::protobuf_AddDesc_MSProtoc_2fMS_5fMail_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\034MSProtoc/MS_PlayerInfo.proto\022\nPlayerIn"
    "fo\032\026MSProtoc/MS_Mail.proto\"2\n\016WantPlayer"
    "Info\022\016\n\006charid\030\001 \001(\003\022\020\n\010charname\030\002 \001(\t\"\243"
    "\002\n\023AdminWantPlayerInfo\022\013\n\003ret\030\001 \002(\005\022,\n\010b"
    "aseInfo\030\002 \001(\0132\032.PlayerInfo.Admin_BaseInf"
    "o\0220\n\nbattleInfo\030\003 \001(\0132\034.PlayerInfo.Admin"
    "_BattleInfo\022.\n\tdanluInfo\030\004 \001(\0132\033.PlayerI"
    "nfo.Admin_DanLuInfo\0220\n\tmagicInfo\030\005 \001(\0132\035"
    ".PlayerInfo.Admin_MagicWeapon\022.\n\thorseIn"
    "fo\030\006 \001(\0132\033.PlayerInfo.Admin_HorseInfo\022\r\n"
    "\005fight\030\007 \001(\005\"\376\007\n\016Admin_BaseInfo\022\016\n\006chari"
    "d\030\001 \002(\003\022\020\n\010charname\030\002 \002(\t\022\013\n\003exp\030\003 \002(\003\022\r"
    "\n\005level\030\004 \002(\005\022\r\n\005money\030\005 \002(\005\022\016\n\006golden\030\006"
    " \002(\005\022\022\n\nbindgolden\030\007 \002(\005\022\020\n\010deadtime\030\010 \002"
    "(\003\022\013\n\003sex\030\t \002(\010\022\022\n\nprofession\030\n \002(\005\022\014\n\004x"
    "pos\030\013 \002(\005\022\014\n\004ypos\030\014 \002(\005\022\r\n\005horse\030\r \002(\005\022\r"
    "\n\005mapid\030\016 \002(\003\022\017\n\007country\030\017 \002(\005\022\020\n\010charhe"
    "ad\030\020 \002(\005\022\026\n\016facontribution\030\021 \002(\005\022\021\n\texpr"
    "ation\030\022 \002(\005\022\017\n\007faction\030\023 \002(\005\022\r\n\005fajob\030\024 "
    "\002(\005\022\014\n\004mate\030\025 \002(\003\022\022\n\ncountryjob\030\026 \002(\005\022\024\n"
    "\014battlecontri\030\027 \002(\005\022\017\n\007armyjob\030\030 \002(\005\022\025\n\r"
    "countrycontri\030\031 \001(\005\022\017\n\007titleid\030\032 \001(\005\022\023\n\013"
    "accounttype\030\033 \002(\005\022\016\n\006openid\030\034 \002(\t\022\020\n\010ser"
    "verid\030\035 \002(\005\022\020\n\010sinvalue\030\036 \002(\005\022\020\n\010acupoin"
    "t\030\037 \002(\005\022\020\n\010settings\030  \002(\005\022\020\n\010havetodo\030! "
    "\002(\003\022\025\n\rhavetodoaward\030\" \002(\005\022\021\n\tactivites\030"
    "# \002(\005\022\026\n\016activitesaward\030$ \002(\005\022\023\n\013offline"
    "Time\030% \002(\003\022\024\n\014onlineReward\030& \002(\005\022\022\n\nonli"
    "neTime\030\' \002(\003\022\023\n\013levelReward\030( \002(\005\022\020\n\010pre"
    "stige\030) \002(\005\022\022\n\nchallegeid\030* \002(\005\022\025\n\rhisto"
    "ryReward\030+ \002(\005\022\r\n\005viplv\030, \002(\005\022\026\n\016continu"
    "eanswer\030- \002(\005\022\023\n\013rightanswer\030. \002(\005\022\022\n\nad"
    "dupgolde\030/ \002(\005\022\020\n\010clanname\0300 \001(\t\022\017\n\007rank"
    "ing\0301 \001(\005\022\024\n\014awardranking\0302 \001(\005\022\027\n\017total"
    "OnlineTime\0304 \001(\003\022\032\n\022antiAddictionState\0305"
    " \001(\005\022\037\n\027antiAddictionOnLineTime\0306 \001(\003\"\201\004"
    "\n\020Admin_BattleInfo\022\n\n\002hp\030\001 \002(\005\022\r\n\005hpmax\030"
    "\002 \002(\005\022\n\n\002mp\030\003 \002(\005\022\r\n\005mpmax\030\004 \002(\005\022\r\n\005forc"
    "e\030\005 \002(\005\022\020\n\010forcemax\030\006 \002(\005\022\020\n\010strength\030\007 "
    "\002(\005\022\023\n\013cleverpower\030\010 \002(\005\022\021\n\tcleverair\030\t "
    "\001(\005\022\025\n\rphysicalpower\030\n \002(\005\022\020\n\010patience\030\013"
    " \002(\005\022\017\n\007agility\030\014 \002(\005\022\017\n\007pkcount\030\r \002(\005\022\r"
    "\n\005power\030\016 \001(\005\022\020\n\010powermax\030\017 \001(\005\022\021\n\tphyat"
    "tack\030\020 \002(\005\022\024\n\014phyattackmax\030\021 \002(\005\022\022\n\nphyd"
    "efence\030\022 \002(\005\022\023\n\013magicattack\030\023 \002(\005\022\026\n\016mag"
    "icattackmax\030\024 \002(\005\022\024\n\014magicdefence\030\025 \002(\005\022"
    "\017\n\007hitrate\030\026 \002(\005\022\021\n\tavoidrate\030\027 \002(\005\022\021\n\tb"
    "aselucky\030\030 \002(\005\022\025\n\rcrackdownrate\030\031 \002(\005\022\017\n"
    "\007baserte\030\032 \002(\005\022\021\n\tmovespeed\030\033 \002(\005\"/\n\017Adm"
    "in_DanLuInfo\022\017\n\007danluId\030\001 \001(\005\022\013\n\003exp\030\002 \001"
    "(\005\"U\n\021Admin_MagicWeapon\022\r\n\002id\030\001 \001(\005:\0010\022\013"
    "\n\003exp\030\002 \001(\005\022\017\n\007skillid\030\003 \003(\005\022\023\n\013advancet"
    "ime\030\004 \001(\003\"G\n\017Admin_HorseInfo\022\n\n\002id\030\001 \002(\005"
    "\022\013\n\003mid\030\002 \002(\005\022\013\n\003exp\030\003 \001(\005\022\016\n\006isauto\030\004 \001"
    "(\010\"F\n\021Admin_RankingInfo\022\013\n\003ret\030\001 \002(\005\022\022\n\n"
    "onlineFlag\030\002 \001(\010\022\020\n\010rankArry\030\003 \003(\005\"s\n\032Ad"
    "min_OutPutLinePlayerInfo\022\013\n\003ret\030\001 \002(\005\022\016\n"
    "\006charid\030\002 \001(\003\022\014\n\004name\030\003 \001(\t\022\024\n\014accountSt"
    "ate\030\004 \001(\010\022\024\n\014talkingState\030\005 \001(\010\"+\n\031Admin"
    "_ReqRoleInfoByOpenID\022\016\n\006openID\030\001 \002(\t\"\360\001\n"
    "\026Admin_RoleInfoByOpenID\022\016\n\006charID\030\001 \002(\003\022"
    "\020\n\010charName\030\002 \002(\t\022\n\n\002lv\030\003 \001(\005\022\020\n\010serverI"
    "D\030\004 \001(\005\022\022\n\ncreateTime\030\005 \001(\003\022\013\n\003sex\030\006 \001(\005"
    "\022\021\n\tlastlogin\030\007 \001(\003\022\021\n\tloginlong\030\010 \001(\003\022\r"
    "\n\005group\030\t \001(\005\022\022\n\noccupation\030\n \001(\005\022\017\n\007isv"
    "alid\030\013 \001(\005\022\013\n\003exp\030\014 \001(\003\022\016\n\006openid\030\r \001(\t\""
    "b\n\031Admin_RetRoleInfoByOpenID\022\013\n\003ret\030\001 \002("
    "\005\0228\n\014roleInfoList\030\002 \003(\0132\".PlayerInfo.Adm"
    "in_RoleInfoByOpenID\"C\n Admin_ReqRoleInfo"
    "ByOpenIDQzoneID\022\016\n\006openID\030\001 \002(\t\022\017\n\007qzone"
    "ID\030\002 \002(\005\"6\n\026Admin_ReqContainerInfo\022\016\n\006ch"
    "arID\030\001 \002(\003\022\014\n\004type\030\002 \002(\005\"_\n\026Admin_RetCon"
    "tainerInfo\022\013\n\003ret\030\001 \002(\005\022\014\n\004type\030\002 \002(\005\022*\n"
    "\005items\030\003 \003(\0132\033.MS_MailInfo.ClientItemInf"
    "o", 2961);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "MSProtoc/MS_PlayerInfo.proto", &protobuf_RegisterTypes);
  WantPlayerInfo::default_instance_ = new WantPlayerInfo();
  AdminWantPlayerInfo::default_instance_ = new AdminWantPlayerInfo();
  Admin_BaseInfo::default_instance_ = new Admin_BaseInfo();
  Admin_BattleInfo::default_instance_ = new Admin_BattleInfo();
  Admin_DanLuInfo::default_instance_ = new Admin_DanLuInfo();
  Admin_MagicWeapon::default_instance_ = new Admin_MagicWeapon();
  Admin_HorseInfo::default_instance_ = new Admin_HorseInfo();
  Admin_RankingInfo::default_instance_ = new Admin_RankingInfo();
  Admin_OutPutLinePlayerInfo::default_instance_ = new Admin_OutPutLinePlayerInfo();
  Admin_ReqRoleInfoByOpenID::default_instance_ = new Admin_ReqRoleInfoByOpenID();
  Admin_RoleInfoByOpenID::default_instance_ = new Admin_RoleInfoByOpenID();
  Admin_RetRoleInfoByOpenID::default_instance_ = new Admin_RetRoleInfoByOpenID();
  Admin_ReqRoleInfoByOpenIDQzoneID::default_instance_ = new Admin_ReqRoleInfoByOpenIDQzoneID();
  Admin_ReqContainerInfo::default_instance_ = new Admin_ReqContainerInfo();
  Admin_RetContainerInfo::default_instance_ = new Admin_RetContainerInfo();
  WantPlayerInfo::default_instance_->InitAsDefaultInstance();
  AdminWantPlayerInfo::default_instance_->InitAsDefaultInstance();
  Admin_BaseInfo::default_instance_->InitAsDefaultInstance();
  Admin_BattleInfo::default_instance_->InitAsDefaultInstance();
  Admin_DanLuInfo::default_instance_->InitAsDefaultInstance();
  Admin_MagicWeapon::default_instance_->InitAsDefaultInstance();
  Admin_HorseInfo::default_instance_->InitAsDefaultInstance();
  Admin_RankingInfo::default_instance_->InitAsDefaultInstance();
  Admin_OutPutLinePlayerInfo::default_instance_->InitAsDefaultInstance();
  Admin_ReqRoleInfoByOpenID::default_instance_->InitAsDefaultInstance();
  Admin_RoleInfoByOpenID::default_instance_->InitAsDefaultInstance();
  Admin_RetRoleInfoByOpenID::default_instance_->InitAsDefaultInstance();
  Admin_ReqRoleInfoByOpenIDQzoneID::default_instance_->InitAsDefaultInstance();
  Admin_ReqContainerInfo::default_instance_->InitAsDefaultInstance();
  Admin_RetContainerInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_MSProtoc_2fMS_5fPlayerInfo_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_MSProtoc_2fMS_5fPlayerInfo_2eproto {
  StaticDescriptorInitializer_MSProtoc_2fMS_5fPlayerInfo_2eproto() {
    protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  }
} static_descriptor_initializer_MSProtoc_2fMS_5fPlayerInfo_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int WantPlayerInfo::kCharidFieldNumber;
const int WantPlayerInfo::kCharnameFieldNumber;
#endif  // !_MSC_VER

WantPlayerInfo::WantPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WantPlayerInfo::InitAsDefaultInstance() {
}

WantPlayerInfo::WantPlayerInfo(const WantPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WantPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WantPlayerInfo::~WantPlayerInfo() {
  SharedDtor();
}

void WantPlayerInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void WantPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WantPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WantPlayerInfo_descriptor_;
}

const WantPlayerInfo& WantPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  return *default_instance_;
}

WantPlayerInfo* WantPlayerInfo::default_instance_ = NULL;

WantPlayerInfo* WantPlayerInfo::New() const {
  return new WantPlayerInfo;
}

void WantPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WantPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WantPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WantPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WantPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WantPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WantPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WantPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WantPlayerInfo::MergeFrom(const WantPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WantPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WantPlayerInfo::CopyFrom(const WantPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WantPlayerInfo::IsInitialized() const {

  return true;
}

void WantPlayerInfo::Swap(WantPlayerInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WantPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WantPlayerInfo_descriptor_;
  metadata.reflection = WantPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AdminWantPlayerInfo::kRetFieldNumber;
const int AdminWantPlayerInfo::kBaseInfoFieldNumber;
const int AdminWantPlayerInfo::kBattleInfoFieldNumber;
const int AdminWantPlayerInfo::kDanluInfoFieldNumber;
const int AdminWantPlayerInfo::kMagicInfoFieldNumber;
const int AdminWantPlayerInfo::kHorseInfoFieldNumber;
const int AdminWantPlayerInfo::kFightFieldNumber;
#endif  // !_MSC_VER

AdminWantPlayerInfo::AdminWantPlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AdminWantPlayerInfo::InitAsDefaultInstance() {
  baseinfo_ = const_cast< ::PlayerInfo::Admin_BaseInfo*>(&::PlayerInfo::Admin_BaseInfo::default_instance());
  battleinfo_ = const_cast< ::PlayerInfo::Admin_BattleInfo*>(&::PlayerInfo::Admin_BattleInfo::default_instance());
  danluinfo_ = const_cast< ::PlayerInfo::Admin_DanLuInfo*>(&::PlayerInfo::Admin_DanLuInfo::default_instance());
  magicinfo_ = const_cast< ::PlayerInfo::Admin_MagicWeapon*>(&::PlayerInfo::Admin_MagicWeapon::default_instance());
  horseinfo_ = const_cast< ::PlayerInfo::Admin_HorseInfo*>(&::PlayerInfo::Admin_HorseInfo::default_instance());
}

AdminWantPlayerInfo::AdminWantPlayerInfo(const AdminWantPlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AdminWantPlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  baseinfo_ = NULL;
  battleinfo_ = NULL;
  danluinfo_ = NULL;
  magicinfo_ = NULL;
  horseinfo_ = NULL;
  fight_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AdminWantPlayerInfo::~AdminWantPlayerInfo() {
  SharedDtor();
}

void AdminWantPlayerInfo::SharedDtor() {
  if (this != default_instance_) {
    delete baseinfo_;
    delete battleinfo_;
    delete danluinfo_;
    delete magicinfo_;
    delete horseinfo_;
  }
}

void AdminWantPlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AdminWantPlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AdminWantPlayerInfo_descriptor_;
}

const AdminWantPlayerInfo& AdminWantPlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  return *default_instance_;
}

AdminWantPlayerInfo* AdminWantPlayerInfo::default_instance_ = NULL;

AdminWantPlayerInfo* AdminWantPlayerInfo::New() const {
  return new AdminWantPlayerInfo;
}

void AdminWantPlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_baseinfo()) {
      if (baseinfo_ != NULL) baseinfo_->::PlayerInfo::Admin_BaseInfo::Clear();
    }
    if (has_battleinfo()) {
      if (battleinfo_ != NULL) battleinfo_->::PlayerInfo::Admin_BattleInfo::Clear();
    }
    if (has_danluinfo()) {
      if (danluinfo_ != NULL) danluinfo_->::PlayerInfo::Admin_DanLuInfo::Clear();
    }
    if (has_magicinfo()) {
      if (magicinfo_ != NULL) magicinfo_->::PlayerInfo::Admin_MagicWeapon::Clear();
    }
    if (has_horseinfo()) {
      if (horseinfo_ != NULL) horseinfo_->::PlayerInfo::Admin_HorseInfo::Clear();
    }
    fight_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AdminWantPlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_baseInfo;
        break;
      }

      // optional .PlayerInfo.Admin_BaseInfo baseInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_baseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_baseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_battleInfo;
        break;
      }

      // optional .PlayerInfo.Admin_BattleInfo battleInfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_battleInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_battleinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_danluInfo;
        break;
      }

      // optional .PlayerInfo.Admin_DanLuInfo danluInfo = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_danluInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_danluinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_magicInfo;
        break;
      }

      // optional .PlayerInfo.Admin_MagicWeapon magicInfo = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_magicInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_magicinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_horseInfo;
        break;
      }

      // optional .PlayerInfo.Admin_HorseInfo horseInfo = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_horseInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_horseinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fight;
        break;
      }

      // optional int32 fight = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fight:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fight_)));
          set_has_fight();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AdminWantPlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional .PlayerInfo.Admin_BaseInfo baseInfo = 2;
  if (has_baseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->baseinfo(), output);
  }

  // optional .PlayerInfo.Admin_BattleInfo battleInfo = 3;
  if (has_battleinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->battleinfo(), output);
  }

  // optional .PlayerInfo.Admin_DanLuInfo danluInfo = 4;
  if (has_danluinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->danluinfo(), output);
  }

  // optional .PlayerInfo.Admin_MagicWeapon magicInfo = 5;
  if (has_magicinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      5, this->magicinfo(), output);
  }

  // optional .PlayerInfo.Admin_HorseInfo horseInfo = 6;
  if (has_horseinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      6, this->horseinfo(), output);
  }

  // optional int32 fight = 7;
  if (has_fight()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fight(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AdminWantPlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional .PlayerInfo.Admin_BaseInfo baseInfo = 2;
  if (has_baseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->baseinfo(), target);
  }

  // optional .PlayerInfo.Admin_BattleInfo battleInfo = 3;
  if (has_battleinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->battleinfo(), target);
  }

  // optional .PlayerInfo.Admin_DanLuInfo danluInfo = 4;
  if (has_danluinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->danluinfo(), target);
  }

  // optional .PlayerInfo.Admin_MagicWeapon magicInfo = 5;
  if (has_magicinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        5, this->magicinfo(), target);
  }

  // optional .PlayerInfo.Admin_HorseInfo horseInfo = 6;
  if (has_horseinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        6, this->horseinfo(), target);
  }

  // optional int32 fight = 7;
  if (has_fight()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fight(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AdminWantPlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional .PlayerInfo.Admin_BaseInfo baseInfo = 2;
    if (has_baseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->baseinfo());
    }

    // optional .PlayerInfo.Admin_BattleInfo battleInfo = 3;
    if (has_battleinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->battleinfo());
    }

    // optional .PlayerInfo.Admin_DanLuInfo danluInfo = 4;
    if (has_danluinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->danluinfo());
    }

    // optional .PlayerInfo.Admin_MagicWeapon magicInfo = 5;
    if (has_magicinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->magicinfo());
    }

    // optional .PlayerInfo.Admin_HorseInfo horseInfo = 6;
    if (has_horseinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->horseinfo());
    }

    // optional int32 fight = 7;
    if (has_fight()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fight());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AdminWantPlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AdminWantPlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AdminWantPlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AdminWantPlayerInfo::MergeFrom(const AdminWantPlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_baseinfo()) {
      mutable_baseinfo()->::PlayerInfo::Admin_BaseInfo::MergeFrom(from.baseinfo());
    }
    if (from.has_battleinfo()) {
      mutable_battleinfo()->::PlayerInfo::Admin_BattleInfo::MergeFrom(from.battleinfo());
    }
    if (from.has_danluinfo()) {
      mutable_danluinfo()->::PlayerInfo::Admin_DanLuInfo::MergeFrom(from.danluinfo());
    }
    if (from.has_magicinfo()) {
      mutable_magicinfo()->::PlayerInfo::Admin_MagicWeapon::MergeFrom(from.magicinfo());
    }
    if (from.has_horseinfo()) {
      mutable_horseinfo()->::PlayerInfo::Admin_HorseInfo::MergeFrom(from.horseinfo());
    }
    if (from.has_fight()) {
      set_fight(from.fight());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AdminWantPlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AdminWantPlayerInfo::CopyFrom(const AdminWantPlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AdminWantPlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_baseinfo()) {
    if (!this->baseinfo().IsInitialized()) return false;
  }
  if (has_battleinfo()) {
    if (!this->battleinfo().IsInitialized()) return false;
  }
  if (has_horseinfo()) {
    if (!this->horseinfo().IsInitialized()) return false;
  }
  return true;
}

void AdminWantPlayerInfo::Swap(AdminWantPlayerInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(baseinfo_, other->baseinfo_);
    std::swap(battleinfo_, other->battleinfo_);
    std::swap(danluinfo_, other->danluinfo_);
    std::swap(magicinfo_, other->magicinfo_);
    std::swap(horseinfo_, other->horseinfo_);
    std::swap(fight_, other->fight_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AdminWantPlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AdminWantPlayerInfo_descriptor_;
  metadata.reflection = AdminWantPlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_BaseInfo::kCharidFieldNumber;
const int Admin_BaseInfo::kCharnameFieldNumber;
const int Admin_BaseInfo::kExpFieldNumber;
const int Admin_BaseInfo::kLevelFieldNumber;
const int Admin_BaseInfo::kMoneyFieldNumber;
const int Admin_BaseInfo::kGoldenFieldNumber;
const int Admin_BaseInfo::kBindgoldenFieldNumber;
const int Admin_BaseInfo::kDeadtimeFieldNumber;
const int Admin_BaseInfo::kSexFieldNumber;
const int Admin_BaseInfo::kProfessionFieldNumber;
const int Admin_BaseInfo::kXposFieldNumber;
const int Admin_BaseInfo::kYposFieldNumber;
const int Admin_BaseInfo::kHorseFieldNumber;
const int Admin_BaseInfo::kMapidFieldNumber;
const int Admin_BaseInfo::kCountryFieldNumber;
const int Admin_BaseInfo::kCharheadFieldNumber;
const int Admin_BaseInfo::kFacontributionFieldNumber;
const int Admin_BaseInfo::kExprationFieldNumber;
const int Admin_BaseInfo::kFactionFieldNumber;
const int Admin_BaseInfo::kFajobFieldNumber;
const int Admin_BaseInfo::kMateFieldNumber;
const int Admin_BaseInfo::kCountryjobFieldNumber;
const int Admin_BaseInfo::kBattlecontriFieldNumber;
const int Admin_BaseInfo::kArmyjobFieldNumber;
const int Admin_BaseInfo::kCountrycontriFieldNumber;
const int Admin_BaseInfo::kTitleidFieldNumber;
const int Admin_BaseInfo::kAccounttypeFieldNumber;
const int Admin_BaseInfo::kOpenidFieldNumber;
const int Admin_BaseInfo::kServeridFieldNumber;
const int Admin_BaseInfo::kSinvalueFieldNumber;
const int Admin_BaseInfo::kAcupointFieldNumber;
const int Admin_BaseInfo::kSettingsFieldNumber;
const int Admin_BaseInfo::kHavetodoFieldNumber;
const int Admin_BaseInfo::kHavetodoawardFieldNumber;
const int Admin_BaseInfo::kActivitesFieldNumber;
const int Admin_BaseInfo::kActivitesawardFieldNumber;
const int Admin_BaseInfo::kOfflineTimeFieldNumber;
const int Admin_BaseInfo::kOnlineRewardFieldNumber;
const int Admin_BaseInfo::kOnlineTimeFieldNumber;
const int Admin_BaseInfo::kLevelRewardFieldNumber;
const int Admin_BaseInfo::kPrestigeFieldNumber;
const int Admin_BaseInfo::kChallegeidFieldNumber;
const int Admin_BaseInfo::kHistoryRewardFieldNumber;
const int Admin_BaseInfo::kViplvFieldNumber;
const int Admin_BaseInfo::kContinueanswerFieldNumber;
const int Admin_BaseInfo::kRightanswerFieldNumber;
const int Admin_BaseInfo::kAddupgoldeFieldNumber;
const int Admin_BaseInfo::kClannameFieldNumber;
const int Admin_BaseInfo::kRankingFieldNumber;
const int Admin_BaseInfo::kAwardrankingFieldNumber;
const int Admin_BaseInfo::kTotalOnlineTimeFieldNumber;
const int Admin_BaseInfo::kAntiAddictionStateFieldNumber;
const int Admin_BaseInfo::kAntiAddictionOnLineTimeFieldNumber;
#endif  // !_MSC_VER

Admin_BaseInfo::Admin_BaseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_BaseInfo::InitAsDefaultInstance() {
}

Admin_BaseInfo::Admin_BaseInfo(const Admin_BaseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_BaseInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  exp_ = GOOGLE_LONGLONG(0);
  level_ = 0;
  money_ = 0;
  golden_ = 0;
  bindgolden_ = 0;
  deadtime_ = GOOGLE_LONGLONG(0);
  sex_ = false;
  profession_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  horse_ = 0;
  mapid_ = GOOGLE_LONGLONG(0);
  country_ = 0;
  charhead_ = 0;
  facontribution_ = 0;
  expration_ = 0;
  faction_ = 0;
  fajob_ = 0;
  mate_ = GOOGLE_LONGLONG(0);
  countryjob_ = 0;
  battlecontri_ = 0;
  armyjob_ = 0;
  countrycontri_ = 0;
  titleid_ = 0;
  accounttype_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  serverid_ = 0;
  sinvalue_ = 0;
  acupoint_ = 0;
  settings_ = 0;
  havetodo_ = GOOGLE_LONGLONG(0);
  havetodoaward_ = 0;
  activites_ = 0;
  activitesaward_ = 0;
  offlinetime_ = GOOGLE_LONGLONG(0);
  onlinereward_ = 0;
  onlinetime_ = GOOGLE_LONGLONG(0);
  levelreward_ = 0;
  prestige_ = 0;
  challegeid_ = 0;
  historyreward_ = 0;
  viplv_ = 0;
  continueanswer_ = 0;
  rightanswer_ = 0;
  addupgolde_ = 0;
  clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ranking_ = 0;
  awardranking_ = 0;
  totalonlinetime_ = GOOGLE_LONGLONG(0);
  antiaddictionstate_ = 0;
  antiaddictiononlinetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_BaseInfo::~Admin_BaseInfo() {
  SharedDtor();
}

void Admin_BaseInfo::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (this != default_instance_) {
  }
}

void Admin_BaseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_BaseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_BaseInfo_descriptor_;
}

const Admin_BaseInfo& Admin_BaseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  return *default_instance_;
}

Admin_BaseInfo* Admin_BaseInfo::default_instance_ = NULL;

Admin_BaseInfo* Admin_BaseInfo::New() const {
  return new Admin_BaseInfo;
}

void Admin_BaseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    exp_ = GOOGLE_LONGLONG(0);
    level_ = 0;
    money_ = 0;
    golden_ = 0;
    bindgolden_ = 0;
    deadtime_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    sex_ = false;
    profession_ = 0;
    xpos_ = 0;
    ypos_ = 0;
    horse_ = 0;
    mapid_ = GOOGLE_LONGLONG(0);
    country_ = 0;
    charhead_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    facontribution_ = 0;
    expration_ = 0;
    faction_ = 0;
    fajob_ = 0;
    mate_ = GOOGLE_LONGLONG(0);
    countryjob_ = 0;
    battlecontri_ = 0;
    armyjob_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    countrycontri_ = 0;
    titleid_ = 0;
    accounttype_ = 0;
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    serverid_ = 0;
    sinvalue_ = 0;
    acupoint_ = 0;
    settings_ = 0;
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    havetodo_ = GOOGLE_LONGLONG(0);
    havetodoaward_ = 0;
    activites_ = 0;
    activitesaward_ = 0;
    offlinetime_ = GOOGLE_LONGLONG(0);
    onlinereward_ = 0;
    onlinetime_ = GOOGLE_LONGLONG(0);
    levelreward_ = 0;
  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    prestige_ = 0;
    challegeid_ = 0;
    historyreward_ = 0;
    viplv_ = 0;
    continueanswer_ = 0;
    rightanswer_ = 0;
    addupgolde_ = 0;
    if (has_clanname()) {
      if (clanname_ != &::google::protobuf::internal::kEmptyString) {
        clanname_->clear();
      }
    }
  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    ranking_ = 0;
    awardranking_ = 0;
    totalonlinetime_ = GOOGLE_LONGLONG(0);
    antiaddictionstate_ = 0;
    antiaddictiononlinetime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_BaseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // required string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // required int64 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // required int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_money;
        break;
      }

      // required int32 money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_golden;
        break;
      }

      // required int32 golden = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_golden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &golden_)));
          set_has_golden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_bindgolden;
        break;
      }

      // required int32 bindgolden = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_bindgolden:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &bindgolden_)));
          set_has_bindgolden();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_deadtime;
        break;
      }

      // required int64 deadtime = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_deadtime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &deadtime_)));
          set_has_deadtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_sex;
        break;
      }

      // required bool sex = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_profession;
        break;
      }

      // required int32 profession = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_xpos;
        break;
      }

      // required int32 xpos = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_ypos;
        break;
      }

      // required int32 ypos = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_horse;
        break;
      }

      // required int32 horse = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horse_)));
          set_has_horse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_mapid;
        break;
      }

      // required int64 mapid = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mapid_)));
          set_has_mapid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_country;
        break;
      }

      // required int32 country = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_charhead;
        break;
      }

      // required int32 charhead = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charhead:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &charhead_)));
          set_has_charhead();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_facontribution;
        break;
      }

      // required int32 facontribution = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_facontribution:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &facontribution_)));
          set_has_facontribution();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_expration;
        break;
      }

      // required int32 expration = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_expration:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &expration_)));
          set_has_expration();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_faction;
        break;
      }

      // required int32 faction = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_faction:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &faction_)));
          set_has_faction();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fajob;
        break;
      }

      // required int32 fajob = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fajob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fajob_)));
          set_has_fajob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_mate;
        break;
      }

      // required int64 mate = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mate_)));
          set_has_mate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_countryjob;
        break;
      }

      // required int32 countryjob = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countryjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countryjob_)));
          set_has_countryjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_battlecontri;
        break;
      }

      // required int32 battlecontri = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_battlecontri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &battlecontri_)));
          set_has_battlecontri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_armyjob;
        break;
      }

      // required int32 armyjob = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_armyjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &armyjob_)));
          set_has_armyjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_countrycontri;
        break;
      }

      // optional int32 countrycontri = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countrycontri:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countrycontri_)));
          set_has_countrycontri();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_titleid;
        break;
      }

      // optional int32 titleid = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_accounttype;
        break;
      }

      // required int32 accounttype = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accounttype:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &accounttype_)));
          set_has_accounttype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(226)) goto parse_openid;
        break;
      }

      // required string openid = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_serverid;
        break;
      }

      // required int32 serverid = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_sinvalue;
        break;
      }

      // required int32 sinvalue = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sinvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sinvalue_)));
          set_has_sinvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(248)) goto parse_acupoint;
        break;
      }

      // required int32 acupoint = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_acupoint:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &acupoint_)));
          set_has_acupoint();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(256)) goto parse_settings;
        break;
      }

      // required int32 settings = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_settings:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &settings_)));
          set_has_settings();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_havetodo;
        break;
      }

      // required int64 havetodo = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_havetodo:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &havetodo_)));
          set_has_havetodo();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(272)) goto parse_havetodoaward;
        break;
      }

      // required int32 havetodoaward = 34;
      case 34: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_havetodoaward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &havetodoaward_)));
          set_has_havetodoaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(280)) goto parse_activites;
        break;
      }

      // required int32 activites = 35;
      case 35: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activites:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activites_)));
          set_has_activites();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(288)) goto parse_activitesaward;
        break;
      }

      // required int32 activitesaward = 36;
      case 36: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_activitesaward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &activitesaward_)));
          set_has_activitesaward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(296)) goto parse_offlineTime;
        break;
      }

      // required int64 offlineTime = 37;
      case 37: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_offlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &offlinetime_)));
          set_has_offlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(304)) goto parse_onlineReward;
        break;
      }

      // required int32 onlineReward = 38;
      case 38: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &onlinereward_)));
          set_has_onlinereward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(312)) goto parse_onlineTime;
        break;
      }

      // required int64 onlineTime = 39;
      case 39: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &onlinetime_)));
          set_has_onlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(320)) goto parse_levelReward;
        break;
      }

      // required int32 levelReward = 40;
      case 40: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_levelReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &levelreward_)));
          set_has_levelreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(328)) goto parse_prestige;
        break;
      }

      // required int32 prestige = 41;
      case 41: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_prestige:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &prestige_)));
          set_has_prestige();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(336)) goto parse_challegeid;
        break;
      }

      // required int32 challegeid = 42;
      case 42: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_challegeid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &challegeid_)));
          set_has_challegeid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(344)) goto parse_historyReward;
        break;
      }

      // required int32 historyReward = 43;
      case 43: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_historyReward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &historyreward_)));
          set_has_historyreward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(352)) goto parse_viplv;
        break;
      }

      // required int32 viplv = 44;
      case 44: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(360)) goto parse_continueanswer;
        break;
      }

      // required int32 continueanswer = 45;
      case 45: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_continueanswer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &continueanswer_)));
          set_has_continueanswer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(368)) goto parse_rightanswer;
        break;
      }

      // required int32 rightanswer = 46;
      case 46: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rightanswer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rightanswer_)));
          set_has_rightanswer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(376)) goto parse_addupgolde;
        break;
      }

      // required int32 addupgolde = 47;
      case 47: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_addupgolde:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &addupgolde_)));
          set_has_addupgolde();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(386)) goto parse_clanname;
        break;
      }

      // optional string clanname = 48;
      case 48: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clanname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clanname().data(), this->clanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(392)) goto parse_ranking;
        break;
      }

      // optional int32 ranking = 49;
      case 49: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ranking_)));
          set_has_ranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(400)) goto parse_awardranking;
        break;
      }

      // optional int32 awardranking = 50;
      case 50: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_awardranking:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &awardranking_)));
          set_has_awardranking();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(416)) goto parse_totalOnlineTime;
        break;
      }

      // optional int64 totalOnlineTime = 52;
      case 52: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_totalOnlineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &totalonlinetime_)));
          set_has_totalonlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(424)) goto parse_antiAddictionState;
        break;
      }

      // optional int32 antiAddictionState = 53;
      case 53: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_antiAddictionState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &antiaddictionstate_)));
          set_has_antiaddictionstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(432)) goto parse_antiAddictionOnLineTime;
        break;
      }

      // optional int64 antiAddictionOnLineTime = 54;
      case 54: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_antiAddictionOnLineTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &antiaddictiononlinetime_)));
          set_has_antiaddictiononlinetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_BaseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  // required int64 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->exp(), output);
  }

  // required int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // required int32 money = 5;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->money(), output);
  }

  // required int32 golden = 6;
  if (has_golden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->golden(), output);
  }

  // required int32 bindgolden = 7;
  if (has_bindgolden()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->bindgolden(), output);
  }

  // required int64 deadtime = 8;
  if (has_deadtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->deadtime(), output);
  }

  // required bool sex = 9;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->sex(), output);
  }

  // required int32 profession = 10;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->profession(), output);
  }

  // required int32 xpos = 11;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->xpos(), output);
  }

  // required int32 ypos = 12;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->ypos(), output);
  }

  // required int32 horse = 13;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->horse(), output);
  }

  // required int64 mapid = 14;
  if (has_mapid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(14, this->mapid(), output);
  }

  // required int32 country = 15;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->country(), output);
  }

  // required int32 charhead = 16;
  if (has_charhead()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->charhead(), output);
  }

  // required int32 facontribution = 17;
  if (has_facontribution()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->facontribution(), output);
  }

  // required int32 expration = 18;
  if (has_expration()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->expration(), output);
  }

  // required int32 faction = 19;
  if (has_faction()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->faction(), output);
  }

  // required int32 fajob = 20;
  if (has_fajob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->fajob(), output);
  }

  // required int64 mate = 21;
  if (has_mate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(21, this->mate(), output);
  }

  // required int32 countryjob = 22;
  if (has_countryjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->countryjob(), output);
  }

  // required int32 battlecontri = 23;
  if (has_battlecontri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->battlecontri(), output);
  }

  // required int32 armyjob = 24;
  if (has_armyjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->armyjob(), output);
  }

  // optional int32 countrycontri = 25;
  if (has_countrycontri()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->countrycontri(), output);
  }

  // optional int32 titleid = 26;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->titleid(), output);
  }

  // required int32 accounttype = 27;
  if (has_accounttype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->accounttype(), output);
  }

  // required string openid = 28;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      28, this->openid(), output);
  }

  // required int32 serverid = 29;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->serverid(), output);
  }

  // required int32 sinvalue = 30;
  if (has_sinvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->sinvalue(), output);
  }

  // required int32 acupoint = 31;
  if (has_acupoint()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(31, this->acupoint(), output);
  }

  // required int32 settings = 32;
  if (has_settings()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(32, this->settings(), output);
  }

  // required int64 havetodo = 33;
  if (has_havetodo()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(33, this->havetodo(), output);
  }

  // required int32 havetodoaward = 34;
  if (has_havetodoaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(34, this->havetodoaward(), output);
  }

  // required int32 activites = 35;
  if (has_activites()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(35, this->activites(), output);
  }

  // required int32 activitesaward = 36;
  if (has_activitesaward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(36, this->activitesaward(), output);
  }

  // required int64 offlineTime = 37;
  if (has_offlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(37, this->offlinetime(), output);
  }

  // required int32 onlineReward = 38;
  if (has_onlinereward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(38, this->onlinereward(), output);
  }

  // required int64 onlineTime = 39;
  if (has_onlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(39, this->onlinetime(), output);
  }

  // required int32 levelReward = 40;
  if (has_levelreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(40, this->levelreward(), output);
  }

  // required int32 prestige = 41;
  if (has_prestige()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(41, this->prestige(), output);
  }

  // required int32 challegeid = 42;
  if (has_challegeid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(42, this->challegeid(), output);
  }

  // required int32 historyReward = 43;
  if (has_historyreward()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(43, this->historyreward(), output);
  }

  // required int32 viplv = 44;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(44, this->viplv(), output);
  }

  // required int32 continueanswer = 45;
  if (has_continueanswer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(45, this->continueanswer(), output);
  }

  // required int32 rightanswer = 46;
  if (has_rightanswer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(46, this->rightanswer(), output);
  }

  // required int32 addupgolde = 47;
  if (has_addupgolde()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(47, this->addupgolde(), output);
  }

  // optional string clanname = 48;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      48, this->clanname(), output);
  }

  // optional int32 ranking = 49;
  if (has_ranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(49, this->ranking(), output);
  }

  // optional int32 awardranking = 50;
  if (has_awardranking()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(50, this->awardranking(), output);
  }

  // optional int64 totalOnlineTime = 52;
  if (has_totalonlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(52, this->totalonlinetime(), output);
  }

  // optional int32 antiAddictionState = 53;
  if (has_antiaddictionstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(53, this->antiaddictionstate(), output);
  }

  // optional int64 antiAddictionOnLineTime = 54;
  if (has_antiaddictiononlinetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(54, this->antiaddictiononlinetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_BaseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // required int64 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->exp(), target);
  }

  // required int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // required int32 money = 5;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->money(), target);
  }

  // required int32 golden = 6;
  if (has_golden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->golden(), target);
  }

  // required int32 bindgolden = 7;
  if (has_bindgolden()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->bindgolden(), target);
  }

  // required int64 deadtime = 8;
  if (has_deadtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->deadtime(), target);
  }

  // required bool sex = 9;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->sex(), target);
  }

  // required int32 profession = 10;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->profession(), target);
  }

  // required int32 xpos = 11;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->xpos(), target);
  }

  // required int32 ypos = 12;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->ypos(), target);
  }

  // required int32 horse = 13;
  if (has_horse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->horse(), target);
  }

  // required int64 mapid = 14;
  if (has_mapid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(14, this->mapid(), target);
  }

  // required int32 country = 15;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->country(), target);
  }

  // required int32 charhead = 16;
  if (has_charhead()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->charhead(), target);
  }

  // required int32 facontribution = 17;
  if (has_facontribution()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->facontribution(), target);
  }

  // required int32 expration = 18;
  if (has_expration()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->expration(), target);
  }

  // required int32 faction = 19;
  if (has_faction()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->faction(), target);
  }

  // required int32 fajob = 20;
  if (has_fajob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->fajob(), target);
  }

  // required int64 mate = 21;
  if (has_mate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(21, this->mate(), target);
  }

  // required int32 countryjob = 22;
  if (has_countryjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->countryjob(), target);
  }

  // required int32 battlecontri = 23;
  if (has_battlecontri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->battlecontri(), target);
  }

  // required int32 armyjob = 24;
  if (has_armyjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->armyjob(), target);
  }

  // optional int32 countrycontri = 25;
  if (has_countrycontri()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->countrycontri(), target);
  }

  // optional int32 titleid = 26;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->titleid(), target);
  }

  // required int32 accounttype = 27;
  if (has_accounttype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->accounttype(), target);
  }

  // required string openid = 28;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        28, this->openid(), target);
  }

  // required int32 serverid = 29;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->serverid(), target);
  }

  // required int32 sinvalue = 30;
  if (has_sinvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->sinvalue(), target);
  }

  // required int32 acupoint = 31;
  if (has_acupoint()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(31, this->acupoint(), target);
  }

  // required int32 settings = 32;
  if (has_settings()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(32, this->settings(), target);
  }

  // required int64 havetodo = 33;
  if (has_havetodo()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(33, this->havetodo(), target);
  }

  // required int32 havetodoaward = 34;
  if (has_havetodoaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(34, this->havetodoaward(), target);
  }

  // required int32 activites = 35;
  if (has_activites()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(35, this->activites(), target);
  }

  // required int32 activitesaward = 36;
  if (has_activitesaward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(36, this->activitesaward(), target);
  }

  // required int64 offlineTime = 37;
  if (has_offlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(37, this->offlinetime(), target);
  }

  // required int32 onlineReward = 38;
  if (has_onlinereward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(38, this->onlinereward(), target);
  }

  // required int64 onlineTime = 39;
  if (has_onlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(39, this->onlinetime(), target);
  }

  // required int32 levelReward = 40;
  if (has_levelreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(40, this->levelreward(), target);
  }

  // required int32 prestige = 41;
  if (has_prestige()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(41, this->prestige(), target);
  }

  // required int32 challegeid = 42;
  if (has_challegeid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(42, this->challegeid(), target);
  }

  // required int32 historyReward = 43;
  if (has_historyreward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(43, this->historyreward(), target);
  }

  // required int32 viplv = 44;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(44, this->viplv(), target);
  }

  // required int32 continueanswer = 45;
  if (has_continueanswer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(45, this->continueanswer(), target);
  }

  // required int32 rightanswer = 46;
  if (has_rightanswer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(46, this->rightanswer(), target);
  }

  // required int32 addupgolde = 47;
  if (has_addupgolde()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(47, this->addupgolde(), target);
  }

  // optional string clanname = 48;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        48, this->clanname(), target);
  }

  // optional int32 ranking = 49;
  if (has_ranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(49, this->ranking(), target);
  }

  // optional int32 awardranking = 50;
  if (has_awardranking()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(50, this->awardranking(), target);
  }

  // optional int64 totalOnlineTime = 52;
  if (has_totalonlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(52, this->totalonlinetime(), target);
  }

  // optional int32 antiAddictionState = 53;
  if (has_antiaddictionstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(53, this->antiaddictionstate(), target);
  }

  // optional int64 antiAddictionOnLineTime = 54;
  if (has_antiaddictiononlinetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(54, this->antiaddictiononlinetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_BaseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // required int64 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // required int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // required int32 money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

    // required int32 golden = 6;
    if (has_golden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->golden());
    }

    // required int32 bindgolden = 7;
    if (has_bindgolden()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->bindgolden());
    }

    // required int64 deadtime = 8;
    if (has_deadtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->deadtime());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required bool sex = 9;
    if (has_sex()) {
      total_size += 1 + 1;
    }

    // required int32 profession = 10;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // required int32 xpos = 11;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

    // required int32 ypos = 12;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

    // required int32 horse = 13;
    if (has_horse()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horse());
    }

    // required int64 mapid = 14;
    if (has_mapid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mapid());
    }

    // required int32 country = 15;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // required int32 charhead = 16;
    if (has_charhead()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->charhead());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 facontribution = 17;
    if (has_facontribution()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->facontribution());
    }

    // required int32 expration = 18;
    if (has_expration()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->expration());
    }

    // required int32 faction = 19;
    if (has_faction()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->faction());
    }

    // required int32 fajob = 20;
    if (has_fajob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fajob());
    }

    // required int64 mate = 21;
    if (has_mate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mate());
    }

    // required int32 countryjob = 22;
    if (has_countryjob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryjob());
    }

    // required int32 battlecontri = 23;
    if (has_battlecontri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->battlecontri());
    }

    // required int32 armyjob = 24;
    if (has_armyjob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->armyjob());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional int32 countrycontri = 25;
    if (has_countrycontri()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countrycontri());
    }

    // optional int32 titleid = 26;
    if (has_titleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // required int32 accounttype = 27;
    if (has_accounttype()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->accounttype());
    }

    // required string openid = 28;
    if (has_openid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required int32 serverid = 29;
    if (has_serverid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // required int32 sinvalue = 30;
    if (has_sinvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sinvalue());
    }

    // required int32 acupoint = 31;
    if (has_acupoint()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->acupoint());
    }

    // required int32 settings = 32;
    if (has_settings()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->settings());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // required int64 havetodo = 33;
    if (has_havetodo()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->havetodo());
    }

    // required int32 havetodoaward = 34;
    if (has_havetodoaward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->havetodoaward());
    }

    // required int32 activites = 35;
    if (has_activites()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activites());
    }

    // required int32 activitesaward = 36;
    if (has_activitesaward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->activitesaward());
    }

    // required int64 offlineTime = 37;
    if (has_offlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->offlinetime());
    }

    // required int32 onlineReward = 38;
    if (has_onlinereward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->onlinereward());
    }

    // required int64 onlineTime = 39;
    if (has_onlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->onlinetime());
    }

    // required int32 levelReward = 40;
    if (has_levelreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->levelreward());
    }

  }
  if (_has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    // required int32 prestige = 41;
    if (has_prestige()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->prestige());
    }

    // required int32 challegeid = 42;
    if (has_challegeid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->challegeid());
    }

    // required int32 historyReward = 43;
    if (has_historyreward()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->historyreward());
    }

    // required int32 viplv = 44;
    if (has_viplv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->viplv());
    }

    // required int32 continueanswer = 45;
    if (has_continueanswer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->continueanswer());
    }

    // required int32 rightanswer = 46;
    if (has_rightanswer()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rightanswer());
    }

    // required int32 addupgolde = 47;
    if (has_addupgolde()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->addupgolde());
    }

    // optional string clanname = 48;
    if (has_clanname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clanname());
    }

  }
  if (_has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    // optional int32 ranking = 49;
    if (has_ranking()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ranking());
    }

    // optional int32 awardranking = 50;
    if (has_awardranking()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->awardranking());
    }

    // optional int64 totalOnlineTime = 52;
    if (has_totalonlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->totalonlinetime());
    }

    // optional int32 antiAddictionState = 53;
    if (has_antiaddictionstate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->antiaddictionstate());
    }

    // optional int64 antiAddictionOnLineTime = 54;
    if (has_antiaddictiononlinetime()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->antiaddictiononlinetime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_BaseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_BaseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_BaseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_BaseInfo::MergeFrom(const Admin_BaseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_golden()) {
      set_golden(from.golden());
    }
    if (from.has_bindgolden()) {
      set_bindgolden(from.bindgolden());
    }
    if (from.has_deadtime()) {
      set_deadtime(from.deadtime());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_horse()) {
      set_horse(from.horse());
    }
    if (from.has_mapid()) {
      set_mapid(from.mapid());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_charhead()) {
      set_charhead(from.charhead());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_facontribution()) {
      set_facontribution(from.facontribution());
    }
    if (from.has_expration()) {
      set_expration(from.expration());
    }
    if (from.has_faction()) {
      set_faction(from.faction());
    }
    if (from.has_fajob()) {
      set_fajob(from.fajob());
    }
    if (from.has_mate()) {
      set_mate(from.mate());
    }
    if (from.has_countryjob()) {
      set_countryjob(from.countryjob());
    }
    if (from.has_battlecontri()) {
      set_battlecontri(from.battlecontri());
    }
    if (from.has_armyjob()) {
      set_armyjob(from.armyjob());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_countrycontri()) {
      set_countrycontri(from.countrycontri());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_accounttype()) {
      set_accounttype(from.accounttype());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_sinvalue()) {
      set_sinvalue(from.sinvalue());
    }
    if (from.has_acupoint()) {
      set_acupoint(from.acupoint());
    }
    if (from.has_settings()) {
      set_settings(from.settings());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_havetodo()) {
      set_havetodo(from.havetodo());
    }
    if (from.has_havetodoaward()) {
      set_havetodoaward(from.havetodoaward());
    }
    if (from.has_activites()) {
      set_activites(from.activites());
    }
    if (from.has_activitesaward()) {
      set_activitesaward(from.activitesaward());
    }
    if (from.has_offlinetime()) {
      set_offlinetime(from.offlinetime());
    }
    if (from.has_onlinereward()) {
      set_onlinereward(from.onlinereward());
    }
    if (from.has_onlinetime()) {
      set_onlinetime(from.onlinetime());
    }
    if (from.has_levelreward()) {
      set_levelreward(from.levelreward());
    }
  }
  if (from._has_bits_[40 / 32] & (0xffu << (40 % 32))) {
    if (from.has_prestige()) {
      set_prestige(from.prestige());
    }
    if (from.has_challegeid()) {
      set_challegeid(from.challegeid());
    }
    if (from.has_historyreward()) {
      set_historyreward(from.historyreward());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_continueanswer()) {
      set_continueanswer(from.continueanswer());
    }
    if (from.has_rightanswer()) {
      set_rightanswer(from.rightanswer());
    }
    if (from.has_addupgolde()) {
      set_addupgolde(from.addupgolde());
    }
    if (from.has_clanname()) {
      set_clanname(from.clanname());
    }
  }
  if (from._has_bits_[48 / 32] & (0xffu << (48 % 32))) {
    if (from.has_ranking()) {
      set_ranking(from.ranking());
    }
    if (from.has_awardranking()) {
      set_awardranking(from.awardranking());
    }
    if (from.has_totalonlinetime()) {
      set_totalonlinetime(from.totalonlinetime());
    }
    if (from.has_antiaddictionstate()) {
      set_antiaddictionstate(from.antiaddictionstate());
    }
    if (from.has_antiaddictiononlinetime()) {
      set_antiaddictiononlinetime(from.antiaddictiononlinetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_BaseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_BaseInfo::CopyFrom(const Admin_BaseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_BaseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0xfcffffff) != 0xfcffffff) return false;
  if ((_has_bits_[1] & 0x00007fff) != 0x00007fff) return false;

  return true;
}

void Admin_BaseInfo::Swap(Admin_BaseInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(exp_, other->exp_);
    std::swap(level_, other->level_);
    std::swap(money_, other->money_);
    std::swap(golden_, other->golden_);
    std::swap(bindgolden_, other->bindgolden_);
    std::swap(deadtime_, other->deadtime_);
    std::swap(sex_, other->sex_);
    std::swap(profession_, other->profession_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(horse_, other->horse_);
    std::swap(mapid_, other->mapid_);
    std::swap(country_, other->country_);
    std::swap(charhead_, other->charhead_);
    std::swap(facontribution_, other->facontribution_);
    std::swap(expration_, other->expration_);
    std::swap(faction_, other->faction_);
    std::swap(fajob_, other->fajob_);
    std::swap(mate_, other->mate_);
    std::swap(countryjob_, other->countryjob_);
    std::swap(battlecontri_, other->battlecontri_);
    std::swap(armyjob_, other->armyjob_);
    std::swap(countrycontri_, other->countrycontri_);
    std::swap(titleid_, other->titleid_);
    std::swap(accounttype_, other->accounttype_);
    std::swap(openid_, other->openid_);
    std::swap(serverid_, other->serverid_);
    std::swap(sinvalue_, other->sinvalue_);
    std::swap(acupoint_, other->acupoint_);
    std::swap(settings_, other->settings_);
    std::swap(havetodo_, other->havetodo_);
    std::swap(havetodoaward_, other->havetodoaward_);
    std::swap(activites_, other->activites_);
    std::swap(activitesaward_, other->activitesaward_);
    std::swap(offlinetime_, other->offlinetime_);
    std::swap(onlinereward_, other->onlinereward_);
    std::swap(onlinetime_, other->onlinetime_);
    std::swap(levelreward_, other->levelreward_);
    std::swap(prestige_, other->prestige_);
    std::swap(challegeid_, other->challegeid_);
    std::swap(historyreward_, other->historyreward_);
    std::swap(viplv_, other->viplv_);
    std::swap(continueanswer_, other->continueanswer_);
    std::swap(rightanswer_, other->rightanswer_);
    std::swap(addupgolde_, other->addupgolde_);
    std::swap(clanname_, other->clanname_);
    std::swap(ranking_, other->ranking_);
    std::swap(awardranking_, other->awardranking_);
    std::swap(totalonlinetime_, other->totalonlinetime_);
    std::swap(antiaddictionstate_, other->antiaddictionstate_);
    std::swap(antiaddictiononlinetime_, other->antiaddictiononlinetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_BaseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_BaseInfo_descriptor_;
  metadata.reflection = Admin_BaseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_BattleInfo::kHpFieldNumber;
const int Admin_BattleInfo::kHpmaxFieldNumber;
const int Admin_BattleInfo::kMpFieldNumber;
const int Admin_BattleInfo::kMpmaxFieldNumber;
const int Admin_BattleInfo::kForceFieldNumber;
const int Admin_BattleInfo::kForcemaxFieldNumber;
const int Admin_BattleInfo::kStrengthFieldNumber;
const int Admin_BattleInfo::kCleverpowerFieldNumber;
const int Admin_BattleInfo::kCleverairFieldNumber;
const int Admin_BattleInfo::kPhysicalpowerFieldNumber;
const int Admin_BattleInfo::kPatienceFieldNumber;
const int Admin_BattleInfo::kAgilityFieldNumber;
const int Admin_BattleInfo::kPkcountFieldNumber;
const int Admin_BattleInfo::kPowerFieldNumber;
const int Admin_BattleInfo::kPowermaxFieldNumber;
const int Admin_BattleInfo::kPhyattackFieldNumber;
const int Admin_BattleInfo::kPhyattackmaxFieldNumber;
const int Admin_BattleInfo::kPhydefenceFieldNumber;
const int Admin_BattleInfo::kMagicattackFieldNumber;
const int Admin_BattleInfo::kMagicattackmaxFieldNumber;
const int Admin_BattleInfo::kMagicdefenceFieldNumber;
const int Admin_BattleInfo::kHitrateFieldNumber;
const int Admin_BattleInfo::kAvoidrateFieldNumber;
const int Admin_BattleInfo::kBaseluckyFieldNumber;
const int Admin_BattleInfo::kCrackdownrateFieldNumber;
const int Admin_BattleInfo::kBaserteFieldNumber;
const int Admin_BattleInfo::kMovespeedFieldNumber;
#endif  // !_MSC_VER

Admin_BattleInfo::Admin_BattleInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_BattleInfo::InitAsDefaultInstance() {
}

Admin_BattleInfo::Admin_BattleInfo(const Admin_BattleInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_BattleInfo::SharedCtor() {
  _cached_size_ = 0;
  hp_ = 0;
  hpmax_ = 0;
  mp_ = 0;
  mpmax_ = 0;
  force_ = 0;
  forcemax_ = 0;
  strength_ = 0;
  cleverpower_ = 0;
  cleverair_ = 0;
  physicalpower_ = 0;
  patience_ = 0;
  agility_ = 0;
  pkcount_ = 0;
  power_ = 0;
  powermax_ = 0;
  phyattack_ = 0;
  phyattackmax_ = 0;
  phydefence_ = 0;
  magicattack_ = 0;
  magicattackmax_ = 0;
  magicdefence_ = 0;
  hitrate_ = 0;
  avoidrate_ = 0;
  baselucky_ = 0;
  crackdownrate_ = 0;
  baserte_ = 0;
  movespeed_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_BattleInfo::~Admin_BattleInfo() {
  SharedDtor();
}

void Admin_BattleInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_BattleInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_BattleInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_BattleInfo_descriptor_;
}

const Admin_BattleInfo& Admin_BattleInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  return *default_instance_;
}

Admin_BattleInfo* Admin_BattleInfo::default_instance_ = NULL;

Admin_BattleInfo* Admin_BattleInfo::New() const {
  return new Admin_BattleInfo;
}

void Admin_BattleInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    hp_ = 0;
    hpmax_ = 0;
    mp_ = 0;
    mpmax_ = 0;
    force_ = 0;
    forcemax_ = 0;
    strength_ = 0;
    cleverpower_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    cleverair_ = 0;
    physicalpower_ = 0;
    patience_ = 0;
    agility_ = 0;
    pkcount_ = 0;
    power_ = 0;
    powermax_ = 0;
    phyattack_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    phyattackmax_ = 0;
    phydefence_ = 0;
    magicattack_ = 0;
    magicattackmax_ = 0;
    magicdefence_ = 0;
    hitrate_ = 0;
    avoidrate_ = 0;
    baselucky_ = 0;
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    crackdownrate_ = 0;
    baserte_ = 0;
    movespeed_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_BattleInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 hp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hpmax;
        break;
      }

      // required int32 hpmax = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_mp;
        break;
      }

      // required int32 mp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mpmax;
        break;
      }

      // required int32 mpmax = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mpmax_)));
          set_has_mpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_force;
        break;
      }

      // required int32 force = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_force:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &force_)));
          set_has_force();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_forcemax;
        break;
      }

      // required int32 forcemax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_forcemax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &forcemax_)));
          set_has_forcemax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_strength;
        break;
      }

      // required int32 strength = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strength:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strength_)));
          set_has_strength();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_cleverpower;
        break;
      }

      // required int32 cleverpower = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleverpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleverpower_)));
          set_has_cleverpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_cleverair;
        break;
      }

      // optional int32 cleverair = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cleverair:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cleverair_)));
          set_has_cleverair();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_physicalpower;
        break;
      }

      // required int32 physicalpower = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_physicalpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &physicalpower_)));
          set_has_physicalpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_patience;
        break;
      }

      // required int32 patience = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_patience:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &patience_)));
          set_has_patience();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_agility;
        break;
      }

      // required int32 agility = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_agility:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &agility_)));
          set_has_agility();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_pkcount;
        break;
      }

      // required int32 pkcount = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pkcount:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &pkcount_)));
          set_has_pkcount();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(112)) goto parse_power;
        break;
      }

      // optional int32 power = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(120)) goto parse_powermax;
        break;
      }

      // optional int32 powermax = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_powermax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &powermax_)));
          set_has_powermax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_phyattack;
        break;
      }

      // required int32 phyattack = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phyattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phyattack_)));
          set_has_phyattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(136)) goto parse_phyattackmax;
        break;
      }

      // required int32 phyattackmax = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phyattackmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phyattackmax_)));
          set_has_phyattackmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_phydefence;
        break;
      }

      // required int32 phydefence = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_phydefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &phydefence_)));
          set_has_phydefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_magicattack;
        break;
      }

      // required int32 magicattack = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicattack:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicattack_)));
          set_has_magicattack();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_magicattackmax;
        break;
      }

      // required int32 magicattackmax = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicattackmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicattackmax_)));
          set_has_magicattackmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_magicdefence;
        break;
      }

      // required int32 magicdefence = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicdefence:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicdefence_)));
          set_has_magicdefence();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_hitrate;
        break;
      }

      // required int32 hitrate = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hitrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hitrate_)));
          set_has_hitrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_avoidrate;
        break;
      }

      // required int32 avoidrate = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_avoidrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &avoidrate_)));
          set_has_avoidrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_baselucky;
        break;
      }

      // required int32 baselucky = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baselucky:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baselucky_)));
          set_has_baselucky();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_crackdownrate;
        break;
      }

      // required int32 crackdownrate = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_crackdownrate:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &crackdownrate_)));
          set_has_crackdownrate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_baserte;
        break;
      }

      // required int32 baserte = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_baserte:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &baserte_)));
          set_has_baserte();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_movespeed;
        break;
      }

      // required int32 movespeed = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_BattleInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 hp = 1;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->hp(), output);
  }

  // required int32 hpmax = 2;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hpmax(), output);
  }

  // required int32 mp = 3;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->mp(), output);
  }

  // required int32 mpmax = 4;
  if (has_mpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mpmax(), output);
  }

  // required int32 force = 5;
  if (has_force()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->force(), output);
  }

  // required int32 forcemax = 6;
  if (has_forcemax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->forcemax(), output);
  }

  // required int32 strength = 7;
  if (has_strength()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->strength(), output);
  }

  // required int32 cleverpower = 8;
  if (has_cleverpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->cleverpower(), output);
  }

  // optional int32 cleverair = 9;
  if (has_cleverair()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->cleverair(), output);
  }

  // required int32 physicalpower = 10;
  if (has_physicalpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->physicalpower(), output);
  }

  // required int32 patience = 11;
  if (has_patience()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->patience(), output);
  }

  // required int32 agility = 12;
  if (has_agility()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->agility(), output);
  }

  // required int32 pkcount = 13;
  if (has_pkcount()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->pkcount(), output);
  }

  // optional int32 power = 14;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(14, this->power(), output);
  }

  // optional int32 powermax = 15;
  if (has_powermax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->powermax(), output);
  }

  // required int32 phyattack = 16;
  if (has_phyattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->phyattack(), output);
  }

  // required int32 phyattackmax = 17;
  if (has_phyattackmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->phyattackmax(), output);
  }

  // required int32 phydefence = 18;
  if (has_phydefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->phydefence(), output);
  }

  // required int32 magicattack = 19;
  if (has_magicattack()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->magicattack(), output);
  }

  // required int32 magicattackmax = 20;
  if (has_magicattackmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->magicattackmax(), output);
  }

  // required int32 magicdefence = 21;
  if (has_magicdefence()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(21, this->magicdefence(), output);
  }

  // required int32 hitrate = 22;
  if (has_hitrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->hitrate(), output);
  }

  // required int32 avoidrate = 23;
  if (has_avoidrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->avoidrate(), output);
  }

  // required int32 baselucky = 24;
  if (has_baselucky()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->baselucky(), output);
  }

  // required int32 crackdownrate = 25;
  if (has_crackdownrate()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(25, this->crackdownrate(), output);
  }

  // required int32 baserte = 26;
  if (has_baserte()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(26, this->baserte(), output);
  }

  // required int32 movespeed = 27;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(27, this->movespeed(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_BattleInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 hp = 1;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->hp(), target);
  }

  // required int32 hpmax = 2;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hpmax(), target);
  }

  // required int32 mp = 3;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->mp(), target);
  }

  // required int32 mpmax = 4;
  if (has_mpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mpmax(), target);
  }

  // required int32 force = 5;
  if (has_force()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->force(), target);
  }

  // required int32 forcemax = 6;
  if (has_forcemax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->forcemax(), target);
  }

  // required int32 strength = 7;
  if (has_strength()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->strength(), target);
  }

  // required int32 cleverpower = 8;
  if (has_cleverpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->cleverpower(), target);
  }

  // optional int32 cleverair = 9;
  if (has_cleverair()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->cleverair(), target);
  }

  // required int32 physicalpower = 10;
  if (has_physicalpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->physicalpower(), target);
  }

  // required int32 patience = 11;
  if (has_patience()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->patience(), target);
  }

  // required int32 agility = 12;
  if (has_agility()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->agility(), target);
  }

  // required int32 pkcount = 13;
  if (has_pkcount()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->pkcount(), target);
  }

  // optional int32 power = 14;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(14, this->power(), target);
  }

  // optional int32 powermax = 15;
  if (has_powermax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->powermax(), target);
  }

  // required int32 phyattack = 16;
  if (has_phyattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->phyattack(), target);
  }

  // required int32 phyattackmax = 17;
  if (has_phyattackmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->phyattackmax(), target);
  }

  // required int32 phydefence = 18;
  if (has_phydefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->phydefence(), target);
  }

  // required int32 magicattack = 19;
  if (has_magicattack()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->magicattack(), target);
  }

  // required int32 magicattackmax = 20;
  if (has_magicattackmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->magicattackmax(), target);
  }

  // required int32 magicdefence = 21;
  if (has_magicdefence()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(21, this->magicdefence(), target);
  }

  // required int32 hitrate = 22;
  if (has_hitrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->hitrate(), target);
  }

  // required int32 avoidrate = 23;
  if (has_avoidrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->avoidrate(), target);
  }

  // required int32 baselucky = 24;
  if (has_baselucky()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->baselucky(), target);
  }

  // required int32 crackdownrate = 25;
  if (has_crackdownrate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(25, this->crackdownrate(), target);
  }

  // required int32 baserte = 26;
  if (has_baserte()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(26, this->baserte(), target);
  }

  // required int32 movespeed = 27;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(27, this->movespeed(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_BattleInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 hp = 1;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 hpmax = 2;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

    // required int32 mp = 3;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // required int32 mpmax = 4;
    if (has_mpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mpmax());
    }

    // required int32 force = 5;
    if (has_force()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->force());
    }

    // required int32 forcemax = 6;
    if (has_forcemax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->forcemax());
    }

    // required int32 strength = 7;
    if (has_strength()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strength());
    }

    // required int32 cleverpower = 8;
    if (has_cleverpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleverpower());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 cleverair = 9;
    if (has_cleverair()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cleverair());
    }

    // required int32 physicalpower = 10;
    if (has_physicalpower()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->physicalpower());
    }

    // required int32 patience = 11;
    if (has_patience()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->patience());
    }

    // required int32 agility = 12;
    if (has_agility()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->agility());
    }

    // required int32 pkcount = 13;
    if (has_pkcount()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->pkcount());
    }

    // optional int32 power = 14;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 powermax = 15;
    if (has_powermax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->powermax());
    }

    // required int32 phyattack = 16;
    if (has_phyattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phyattack());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required int32 phyattackmax = 17;
    if (has_phyattackmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phyattackmax());
    }

    // required int32 phydefence = 18;
    if (has_phydefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->phydefence());
    }

    // required int32 magicattack = 19;
    if (has_magicattack()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicattack());
    }

    // required int32 magicattackmax = 20;
    if (has_magicattackmax()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicattackmax());
    }

    // required int32 magicdefence = 21;
    if (has_magicdefence()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicdefence());
    }

    // required int32 hitrate = 22;
    if (has_hitrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hitrate());
    }

    // required int32 avoidrate = 23;
    if (has_avoidrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->avoidrate());
    }

    // required int32 baselucky = 24;
    if (has_baselucky()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baselucky());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // required int32 crackdownrate = 25;
    if (has_crackdownrate()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->crackdownrate());
    }

    // required int32 baserte = 26;
    if (has_baserte()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->baserte());
    }

    // required int32 movespeed = 27;
    if (has_movespeed()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_BattleInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_BattleInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_BattleInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_BattleInfo::MergeFrom(const Admin_BattleInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_mpmax()) {
      set_mpmax(from.mpmax());
    }
    if (from.has_force()) {
      set_force(from.force());
    }
    if (from.has_forcemax()) {
      set_forcemax(from.forcemax());
    }
    if (from.has_strength()) {
      set_strength(from.strength());
    }
    if (from.has_cleverpower()) {
      set_cleverpower(from.cleverpower());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_cleverair()) {
      set_cleverair(from.cleverair());
    }
    if (from.has_physicalpower()) {
      set_physicalpower(from.physicalpower());
    }
    if (from.has_patience()) {
      set_patience(from.patience());
    }
    if (from.has_agility()) {
      set_agility(from.agility());
    }
    if (from.has_pkcount()) {
      set_pkcount(from.pkcount());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_powermax()) {
      set_powermax(from.powermax());
    }
    if (from.has_phyattack()) {
      set_phyattack(from.phyattack());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_phyattackmax()) {
      set_phyattackmax(from.phyattackmax());
    }
    if (from.has_phydefence()) {
      set_phydefence(from.phydefence());
    }
    if (from.has_magicattack()) {
      set_magicattack(from.magicattack());
    }
    if (from.has_magicattackmax()) {
      set_magicattackmax(from.magicattackmax());
    }
    if (from.has_magicdefence()) {
      set_magicdefence(from.magicdefence());
    }
    if (from.has_hitrate()) {
      set_hitrate(from.hitrate());
    }
    if (from.has_avoidrate()) {
      set_avoidrate(from.avoidrate());
    }
    if (from.has_baselucky()) {
      set_baselucky(from.baselucky());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_crackdownrate()) {
      set_crackdownrate(from.crackdownrate());
    }
    if (from.has_baserte()) {
      set_baserte(from.baserte());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_BattleInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_BattleInfo::CopyFrom(const Admin_BattleInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_BattleInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x07ff9eff) != 0x07ff9eff) return false;

  return true;
}

void Admin_BattleInfo::Swap(Admin_BattleInfo* other) {
  if (other != this) {
    std::swap(hp_, other->hp_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(mp_, other->mp_);
    std::swap(mpmax_, other->mpmax_);
    std::swap(force_, other->force_);
    std::swap(forcemax_, other->forcemax_);
    std::swap(strength_, other->strength_);
    std::swap(cleverpower_, other->cleverpower_);
    std::swap(cleverair_, other->cleverair_);
    std::swap(physicalpower_, other->physicalpower_);
    std::swap(patience_, other->patience_);
    std::swap(agility_, other->agility_);
    std::swap(pkcount_, other->pkcount_);
    std::swap(power_, other->power_);
    std::swap(powermax_, other->powermax_);
    std::swap(phyattack_, other->phyattack_);
    std::swap(phyattackmax_, other->phyattackmax_);
    std::swap(phydefence_, other->phydefence_);
    std::swap(magicattack_, other->magicattack_);
    std::swap(magicattackmax_, other->magicattackmax_);
    std::swap(magicdefence_, other->magicdefence_);
    std::swap(hitrate_, other->hitrate_);
    std::swap(avoidrate_, other->avoidrate_);
    std::swap(baselucky_, other->baselucky_);
    std::swap(crackdownrate_, other->crackdownrate_);
    std::swap(baserte_, other->baserte_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_BattleInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_BattleInfo_descriptor_;
  metadata.reflection = Admin_BattleInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_DanLuInfo::kDanluIdFieldNumber;
const int Admin_DanLuInfo::kExpFieldNumber;
#endif  // !_MSC_VER

Admin_DanLuInfo::Admin_DanLuInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_DanLuInfo::InitAsDefaultInstance() {
}

Admin_DanLuInfo::Admin_DanLuInfo(const Admin_DanLuInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_DanLuInfo::SharedCtor() {
  _cached_size_ = 0;
  danluid_ = 0;
  exp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_DanLuInfo::~Admin_DanLuInfo() {
  SharedDtor();
}

void Admin_DanLuInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_DanLuInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_DanLuInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_DanLuInfo_descriptor_;
}

const Admin_DanLuInfo& Admin_DanLuInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  return *default_instance_;
}

Admin_DanLuInfo* Admin_DanLuInfo::default_instance_ = NULL;

Admin_DanLuInfo* Admin_DanLuInfo::New() const {
  return new Admin_DanLuInfo;
}

void Admin_DanLuInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    danluid_ = 0;
    exp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_DanLuInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 danluId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &danluid_)));
          set_has_danluid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_DanLuInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 danluId = 1;
  if (has_danluid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->danluid(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_DanLuInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 danluId = 1;
  if (has_danluid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->danluid(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_DanLuInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 danluId = 1;
    if (has_danluid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->danluid());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_DanLuInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_DanLuInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_DanLuInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_DanLuInfo::MergeFrom(const Admin_DanLuInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_danluid()) {
      set_danluid(from.danluid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_DanLuInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_DanLuInfo::CopyFrom(const Admin_DanLuInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_DanLuInfo::IsInitialized() const {

  return true;
}

void Admin_DanLuInfo::Swap(Admin_DanLuInfo* other) {
  if (other != this) {
    std::swap(danluid_, other->danluid_);
    std::swap(exp_, other->exp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_DanLuInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_DanLuInfo_descriptor_;
  metadata.reflection = Admin_DanLuInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_MagicWeapon::kIdFieldNumber;
const int Admin_MagicWeapon::kExpFieldNumber;
const int Admin_MagicWeapon::kSkillidFieldNumber;
const int Admin_MagicWeapon::kAdvancetimeFieldNumber;
#endif  // !_MSC_VER

Admin_MagicWeapon::Admin_MagicWeapon()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_MagicWeapon::InitAsDefaultInstance() {
}

Admin_MagicWeapon::Admin_MagicWeapon(const Admin_MagicWeapon& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_MagicWeapon::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  exp_ = 0;
  advancetime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_MagicWeapon::~Admin_MagicWeapon() {
  SharedDtor();
}

void Admin_MagicWeapon::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_MagicWeapon::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_MagicWeapon::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_MagicWeapon_descriptor_;
}

const Admin_MagicWeapon& Admin_MagicWeapon::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  return *default_instance_;
}

Admin_MagicWeapon* Admin_MagicWeapon::default_instance_ = NULL;

Admin_MagicWeapon* Admin_MagicWeapon::New() const {
  return new Admin_MagicWeapon;
}

void Admin_MagicWeapon::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    exp_ = 0;
    advancetime_ = GOOGLE_LONGLONG(0);
  }
  skillid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_MagicWeapon::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1 [default = 0];
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_exp;
        break;
      }

      // optional int32 exp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        break;
      }

      // repeated int32 skillid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_skillid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_skillid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_skillid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_skillid;
        if (input->ExpectTag(32)) goto parse_advancetime;
        break;
      }

      // optional int64 advancetime = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_advancetime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &advancetime_)));
          set_has_advancetime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_MagicWeapon::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1 [default = 0];
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->exp(), output);
  }

  // repeated int32 skillid = 3;
  for (int i = 0; i < this->skillid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->skillid(i), output);
  }

  // optional int64 advancetime = 4;
  if (has_advancetime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(4, this->advancetime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_MagicWeapon::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1 [default = 0];
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 exp = 2;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->exp(), target);
  }

  // repeated int32 skillid = 3;
  for (int i = 0; i < this->skillid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->skillid(i), target);
  }

  // optional int64 advancetime = 4;
  if (has_advancetime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(4, this->advancetime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_MagicWeapon::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1 [default = 0];
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 exp = 2;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int64 advancetime = 4;
    if (has_advancetime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->advancetime());
    }

  }
  // repeated int32 skillid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->skillid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->skillid(i));
    }
    total_size += 1 * this->skillid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_MagicWeapon::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_MagicWeapon* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_MagicWeapon*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_MagicWeapon::MergeFrom(const Admin_MagicWeapon& from) {
  GOOGLE_CHECK_NE(&from, this);
  skillid_.MergeFrom(from.skillid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_advancetime()) {
      set_advancetime(from.advancetime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_MagicWeapon::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_MagicWeapon::CopyFrom(const Admin_MagicWeapon& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_MagicWeapon::IsInitialized() const {

  return true;
}

void Admin_MagicWeapon::Swap(Admin_MagicWeapon* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(exp_, other->exp_);
    skillid_.Swap(&other->skillid_);
    std::swap(advancetime_, other->advancetime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_MagicWeapon::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_MagicWeapon_descriptor_;
  metadata.reflection = Admin_MagicWeapon_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_HorseInfo::kIdFieldNumber;
const int Admin_HorseInfo::kMidFieldNumber;
const int Admin_HorseInfo::kExpFieldNumber;
const int Admin_HorseInfo::kIsautoFieldNumber;
#endif  // !_MSC_VER

Admin_HorseInfo::Admin_HorseInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_HorseInfo::InitAsDefaultInstance() {
}

Admin_HorseInfo::Admin_HorseInfo(const Admin_HorseInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_HorseInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  mid_ = 0;
  exp_ = 0;
  isauto_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_HorseInfo::~Admin_HorseInfo() {
  SharedDtor();
}

void Admin_HorseInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_HorseInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_HorseInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_HorseInfo_descriptor_;
}

const Admin_HorseInfo& Admin_HorseInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  return *default_instance_;
}

Admin_HorseInfo* Admin_HorseInfo::default_instance_ = NULL;

Admin_HorseInfo* Admin_HorseInfo::New() const {
  return new Admin_HorseInfo;
}

void Admin_HorseInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    mid_ = 0;
    exp_ = 0;
    isauto_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_HorseInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_mid;
        break;
      }

      // required int32 mid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mid_)));
          set_has_mid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_exp;
        break;
      }

      // optional int32 exp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_isauto;
        break;
      }

      // optional bool isauto = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isauto:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &isauto_)));
          set_has_isauto();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_HorseInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 mid = 2;
  if (has_mid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->mid(), output);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->exp(), output);
  }

  // optional bool isauto = 4;
  if (has_isauto()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->isauto(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_HorseInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 mid = 2;
  if (has_mid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->mid(), target);
  }

  // optional int32 exp = 3;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->exp(), target);
  }

  // optional bool isauto = 4;
  if (has_isauto()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->isauto(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_HorseInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 mid = 2;
    if (has_mid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mid());
    }

    // optional int32 exp = 3;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional bool isauto = 4;
    if (has_isauto()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_HorseInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_HorseInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_HorseInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_HorseInfo::MergeFrom(const Admin_HorseInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_mid()) {
      set_mid(from.mid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_isauto()) {
      set_isauto(from.isauto());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_HorseInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_HorseInfo::CopyFrom(const Admin_HorseInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_HorseInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Admin_HorseInfo::Swap(Admin_HorseInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(mid_, other->mid_);
    std::swap(exp_, other->exp_);
    std::swap(isauto_, other->isauto_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_HorseInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_HorseInfo_descriptor_;
  metadata.reflection = Admin_HorseInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_RankingInfo::kRetFieldNumber;
const int Admin_RankingInfo::kOnlineFlagFieldNumber;
const int Admin_RankingInfo::kRankArryFieldNumber;
#endif  // !_MSC_VER

Admin_RankingInfo::Admin_RankingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_RankingInfo::InitAsDefaultInstance() {
}

Admin_RankingInfo::Admin_RankingInfo(const Admin_RankingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_RankingInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  onlineflag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_RankingInfo::~Admin_RankingInfo() {
  SharedDtor();
}

void Admin_RankingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_RankingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_RankingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_RankingInfo_descriptor_;
}

const Admin_RankingInfo& Admin_RankingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  return *default_instance_;
}

Admin_RankingInfo* Admin_RankingInfo::default_instance_ = NULL;

Admin_RankingInfo* Admin_RankingInfo::New() const {
  return new Admin_RankingInfo;
}

void Admin_RankingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    onlineflag_ = false;
  }
  rankarry_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_RankingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_onlineFlag;
        break;
      }

      // optional bool onlineFlag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlineFlag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &onlineflag_)));
          set_has_onlineflag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rankArry;
        break;
      }

      // repeated int32 rankArry = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_rankArry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_rankarry())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_rankarry())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_rankArry;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_RankingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional bool onlineFlag = 2;
  if (has_onlineflag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->onlineflag(), output);
  }

  // repeated int32 rankArry = 3;
  for (int i = 0; i < this->rankarry_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->rankarry(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_RankingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional bool onlineFlag = 2;
  if (has_onlineflag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->onlineflag(), target);
  }

  // repeated int32 rankArry = 3;
  for (int i = 0; i < this->rankarry_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->rankarry(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_RankingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional bool onlineFlag = 2;
    if (has_onlineflag()) {
      total_size += 1 + 1;
    }

  }
  // repeated int32 rankArry = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->rankarry_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->rankarry(i));
    }
    total_size += 1 * this->rankarry_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_RankingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_RankingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_RankingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_RankingInfo::MergeFrom(const Admin_RankingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  rankarry_.MergeFrom(from.rankarry_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_onlineflag()) {
      set_onlineflag(from.onlineflag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_RankingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_RankingInfo::CopyFrom(const Admin_RankingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_RankingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Admin_RankingInfo::Swap(Admin_RankingInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(onlineflag_, other->onlineflag_);
    rankarry_.Swap(&other->rankarry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_RankingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_RankingInfo_descriptor_;
  metadata.reflection = Admin_RankingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_OutPutLinePlayerInfo::kRetFieldNumber;
const int Admin_OutPutLinePlayerInfo::kCharidFieldNumber;
const int Admin_OutPutLinePlayerInfo::kNameFieldNumber;
const int Admin_OutPutLinePlayerInfo::kAccountStateFieldNumber;
const int Admin_OutPutLinePlayerInfo::kTalkingStateFieldNumber;
#endif  // !_MSC_VER

Admin_OutPutLinePlayerInfo::Admin_OutPutLinePlayerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_OutPutLinePlayerInfo::InitAsDefaultInstance() {
}

Admin_OutPutLinePlayerInfo::Admin_OutPutLinePlayerInfo(const Admin_OutPutLinePlayerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_OutPutLinePlayerInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  accountstate_ = false;
  talkingstate_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_OutPutLinePlayerInfo::~Admin_OutPutLinePlayerInfo() {
  SharedDtor();
}

void Admin_OutPutLinePlayerInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void Admin_OutPutLinePlayerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_OutPutLinePlayerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_OutPutLinePlayerInfo_descriptor_;
}

const Admin_OutPutLinePlayerInfo& Admin_OutPutLinePlayerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  return *default_instance_;
}

Admin_OutPutLinePlayerInfo* Admin_OutPutLinePlayerInfo::default_instance_ = NULL;

Admin_OutPutLinePlayerInfo* Admin_OutPutLinePlayerInfo::New() const {
  return new Admin_OutPutLinePlayerInfo;
}

void Admin_OutPutLinePlayerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    charid_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    accountstate_ = false;
    talkingstate_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_OutPutLinePlayerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_charid;
        break;
      }

      // optional int64 charid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_accountState;
        break;
      }

      // optional bool accountState = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_accountState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &accountstate_)));
          set_has_accountstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_talkingState;
        break;
      }

      // optional bool talkingState = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_talkingState:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &talkingstate_)));
          set_has_talkingstate();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_OutPutLinePlayerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->charid(), output);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // optional bool accountState = 4;
  if (has_accountstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->accountstate(), output);
  }

  // optional bool talkingState = 5;
  if (has_talkingstate()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->talkingstate(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_OutPutLinePlayerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 charid = 2;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->charid(), target);
  }

  // optional string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // optional bool accountState = 4;
  if (has_accountstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->accountstate(), target);
  }

  // optional bool talkingState = 5;
  if (has_talkingstate()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->talkingstate(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_OutPutLinePlayerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 charid = 2;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional bool accountState = 4;
    if (has_accountstate()) {
      total_size += 1 + 1;
    }

    // optional bool talkingState = 5;
    if (has_talkingstate()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_OutPutLinePlayerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_OutPutLinePlayerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_OutPutLinePlayerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_OutPutLinePlayerInfo::MergeFrom(const Admin_OutPutLinePlayerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_accountstate()) {
      set_accountstate(from.accountstate());
    }
    if (from.has_talkingstate()) {
      set_talkingstate(from.talkingstate());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_OutPutLinePlayerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_OutPutLinePlayerInfo::CopyFrom(const Admin_OutPutLinePlayerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_OutPutLinePlayerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Admin_OutPutLinePlayerInfo::Swap(Admin_OutPutLinePlayerInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(charid_, other->charid_);
    std::swap(name_, other->name_);
    std::swap(accountstate_, other->accountstate_);
    std::swap(talkingstate_, other->talkingstate_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_OutPutLinePlayerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_OutPutLinePlayerInfo_descriptor_;
  metadata.reflection = Admin_OutPutLinePlayerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_ReqRoleInfoByOpenID::kOpenIDFieldNumber;
#endif  // !_MSC_VER

Admin_ReqRoleInfoByOpenID::Admin_ReqRoleInfoByOpenID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_ReqRoleInfoByOpenID::InitAsDefaultInstance() {
}

Admin_ReqRoleInfoByOpenID::Admin_ReqRoleInfoByOpenID(const Admin_ReqRoleInfoByOpenID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_ReqRoleInfoByOpenID::SharedCtor() {
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_ReqRoleInfoByOpenID::~Admin_ReqRoleInfoByOpenID() {
  SharedDtor();
}

void Admin_ReqRoleInfoByOpenID::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (this != default_instance_) {
  }
}

void Admin_ReqRoleInfoByOpenID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_ReqRoleInfoByOpenID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_ReqRoleInfoByOpenID_descriptor_;
}

const Admin_ReqRoleInfoByOpenID& Admin_ReqRoleInfoByOpenID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  return *default_instance_;
}

Admin_ReqRoleInfoByOpenID* Admin_ReqRoleInfoByOpenID::default_instance_ = NULL;

Admin_ReqRoleInfoByOpenID* Admin_ReqRoleInfoByOpenID::New() const {
  return new Admin_ReqRoleInfoByOpenID;
}

void Admin_ReqRoleInfoByOpenID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_ReqRoleInfoByOpenID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string openID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_ReqRoleInfoByOpenID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string openID = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_ReqRoleInfoByOpenID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string openID = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_ReqRoleInfoByOpenID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string openID = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_ReqRoleInfoByOpenID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_ReqRoleInfoByOpenID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_ReqRoleInfoByOpenID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_ReqRoleInfoByOpenID::MergeFrom(const Admin_ReqRoleInfoByOpenID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_ReqRoleInfoByOpenID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_ReqRoleInfoByOpenID::CopyFrom(const Admin_ReqRoleInfoByOpenID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_ReqRoleInfoByOpenID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void Admin_ReqRoleInfoByOpenID::Swap(Admin_ReqRoleInfoByOpenID* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_ReqRoleInfoByOpenID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_ReqRoleInfoByOpenID_descriptor_;
  metadata.reflection = Admin_ReqRoleInfoByOpenID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_RoleInfoByOpenID::kCharIDFieldNumber;
const int Admin_RoleInfoByOpenID::kCharNameFieldNumber;
const int Admin_RoleInfoByOpenID::kLvFieldNumber;
const int Admin_RoleInfoByOpenID::kServerIDFieldNumber;
const int Admin_RoleInfoByOpenID::kCreateTimeFieldNumber;
const int Admin_RoleInfoByOpenID::kSexFieldNumber;
const int Admin_RoleInfoByOpenID::kLastloginFieldNumber;
const int Admin_RoleInfoByOpenID::kLoginlongFieldNumber;
const int Admin_RoleInfoByOpenID::kGroupFieldNumber;
const int Admin_RoleInfoByOpenID::kOccupationFieldNumber;
const int Admin_RoleInfoByOpenID::kIsvalidFieldNumber;
const int Admin_RoleInfoByOpenID::kExpFieldNumber;
const int Admin_RoleInfoByOpenID::kOpenidFieldNumber;
#endif  // !_MSC_VER

Admin_RoleInfoByOpenID::Admin_RoleInfoByOpenID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_RoleInfoByOpenID::InitAsDefaultInstance() {
}

Admin_RoleInfoByOpenID::Admin_RoleInfoByOpenID(const Admin_RoleInfoByOpenID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_RoleInfoByOpenID::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  serverid_ = 0;
  createtime_ = GOOGLE_LONGLONG(0);
  sex_ = 0;
  lastlogin_ = GOOGLE_LONGLONG(0);
  loginlong_ = GOOGLE_LONGLONG(0);
  group_ = 0;
  occupation_ = 0;
  isvalid_ = 0;
  exp_ = GOOGLE_LONGLONG(0);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_RoleInfoByOpenID::~Admin_RoleInfoByOpenID() {
  SharedDtor();
}

void Admin_RoleInfoByOpenID::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (this != default_instance_) {
  }
}

void Admin_RoleInfoByOpenID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_RoleInfoByOpenID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_RoleInfoByOpenID_descriptor_;
}

const Admin_RoleInfoByOpenID& Admin_RoleInfoByOpenID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  return *default_instance_;
}

Admin_RoleInfoByOpenID* Admin_RoleInfoByOpenID::default_instance_ = NULL;

Admin_RoleInfoByOpenID* Admin_RoleInfoByOpenID::New() const {
  return new Admin_RoleInfoByOpenID;
}

void Admin_RoleInfoByOpenID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    lv_ = 0;
    serverid_ = 0;
    createtime_ = GOOGLE_LONGLONG(0);
    sex_ = 0;
    lastlogin_ = GOOGLE_LONGLONG(0);
    loginlong_ = GOOGLE_LONGLONG(0);
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    group_ = 0;
    occupation_ = 0;
    isvalid_ = 0;
    exp_ = GOOGLE_LONGLONG(0);
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_RoleInfoByOpenID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charName;
        break;
      }

      // required string charName = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_serverID;
        break;
      }

      // optional int32 serverID = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_serverID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &serverid_)));
          set_has_serverid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_createTime;
        break;
      }

      // optional int64 createTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_createTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &createtime_)));
          set_has_createtime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_sex;
        break;
      }

      // optional int32 sex = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_lastlogin;
        break;
      }

      // optional int64 lastlogin = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lastlogin:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &lastlogin_)));
          set_has_lastlogin();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_loginlong;
        break;
      }

      // optional int64 loginlong = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_loginlong:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &loginlong_)));
          set_has_loginlong();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_group;
        break;
      }

      // optional int32 group = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_group:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &group_)));
          set_has_group();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_occupation;
        break;
      }

      // optional int32 occupation = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_occupation:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &occupation_)));
          set_has_occupation();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_isvalid;
        break;
      }

      // optional int32 isvalid = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isvalid_)));
          set_has_isvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_exp;
        break;
      }

      // optional int64 exp = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(106)) goto parse_openid;
        break;
      }

      // optional string openid = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_RoleInfoByOpenID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required string charName = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // optional int32 serverID = 4;
  if (has_serverid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->serverid(), output);
  }

  // optional int64 createTime = 5;
  if (has_createtime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->createtime(), output);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->sex(), output);
  }

  // optional int64 lastlogin = 7;
  if (has_lastlogin()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(7, this->lastlogin(), output);
  }

  // optional int64 loginlong = 8;
  if (has_loginlong()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(8, this->loginlong(), output);
  }

  // optional int32 group = 9;
  if (has_group()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->group(), output);
  }

  // optional int32 occupation = 10;
  if (has_occupation()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->occupation(), output);
  }

  // optional int32 isvalid = 11;
  if (has_isvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->isvalid(), output);
  }

  // optional int64 exp = 12;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(12, this->exp(), output);
  }

  // optional string openid = 13;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      13, this->openid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_RoleInfoByOpenID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required string charName = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // optional int32 serverID = 4;
  if (has_serverid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->serverid(), target);
  }

  // optional int64 createTime = 5;
  if (has_createtime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->createtime(), target);
  }

  // optional int32 sex = 6;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->sex(), target);
  }

  // optional int64 lastlogin = 7;
  if (has_lastlogin()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(7, this->lastlogin(), target);
  }

  // optional int64 loginlong = 8;
  if (has_loginlong()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(8, this->loginlong(), target);
  }

  // optional int32 group = 9;
  if (has_group()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->group(), target);
  }

  // optional int32 occupation = 10;
  if (has_occupation()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->occupation(), target);
  }

  // optional int32 isvalid = 11;
  if (has_isvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->isvalid(), target);
  }

  // optional int64 exp = 12;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(12, this->exp(), target);
  }

  // optional string openid = 13;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        13, this->openid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_RoleInfoByOpenID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required string charName = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 serverID = 4;
    if (has_serverid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->serverid());
    }

    // optional int64 createTime = 5;
    if (has_createtime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->createtime());
    }

    // optional int32 sex = 6;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

    // optional int64 lastlogin = 7;
    if (has_lastlogin()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->lastlogin());
    }

    // optional int64 loginlong = 8;
    if (has_loginlong()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->loginlong());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 group = 9;
    if (has_group()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->group());
    }

    // optional int32 occupation = 10;
    if (has_occupation()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->occupation());
    }

    // optional int32 isvalid = 11;
    if (has_isvalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isvalid());
    }

    // optional int64 exp = 12;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->exp());
    }

    // optional string openid = 13;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_RoleInfoByOpenID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_RoleInfoByOpenID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_RoleInfoByOpenID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_RoleInfoByOpenID::MergeFrom(const Admin_RoleInfoByOpenID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_serverid()) {
      set_serverid(from.serverid());
    }
    if (from.has_createtime()) {
      set_createtime(from.createtime());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_lastlogin()) {
      set_lastlogin(from.lastlogin());
    }
    if (from.has_loginlong()) {
      set_loginlong(from.loginlong());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_group()) {
      set_group(from.group());
    }
    if (from.has_occupation()) {
      set_occupation(from.occupation());
    }
    if (from.has_isvalid()) {
      set_isvalid(from.isvalid());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_RoleInfoByOpenID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_RoleInfoByOpenID::CopyFrom(const Admin_RoleInfoByOpenID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_RoleInfoByOpenID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Admin_RoleInfoByOpenID::Swap(Admin_RoleInfoByOpenID* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(lv_, other->lv_);
    std::swap(serverid_, other->serverid_);
    std::swap(createtime_, other->createtime_);
    std::swap(sex_, other->sex_);
    std::swap(lastlogin_, other->lastlogin_);
    std::swap(loginlong_, other->loginlong_);
    std::swap(group_, other->group_);
    std::swap(occupation_, other->occupation_);
    std::swap(isvalid_, other->isvalid_);
    std::swap(exp_, other->exp_);
    std::swap(openid_, other->openid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_RoleInfoByOpenID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_RoleInfoByOpenID_descriptor_;
  metadata.reflection = Admin_RoleInfoByOpenID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_RetRoleInfoByOpenID::kRetFieldNumber;
const int Admin_RetRoleInfoByOpenID::kRoleInfoListFieldNumber;
#endif  // !_MSC_VER

Admin_RetRoleInfoByOpenID::Admin_RetRoleInfoByOpenID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_RetRoleInfoByOpenID::InitAsDefaultInstance() {
}

Admin_RetRoleInfoByOpenID::Admin_RetRoleInfoByOpenID(const Admin_RetRoleInfoByOpenID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_RetRoleInfoByOpenID::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_RetRoleInfoByOpenID::~Admin_RetRoleInfoByOpenID() {
  SharedDtor();
}

void Admin_RetRoleInfoByOpenID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_RetRoleInfoByOpenID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_RetRoleInfoByOpenID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_RetRoleInfoByOpenID_descriptor_;
}

const Admin_RetRoleInfoByOpenID& Admin_RetRoleInfoByOpenID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  return *default_instance_;
}

Admin_RetRoleInfoByOpenID* Admin_RetRoleInfoByOpenID::default_instance_ = NULL;

Admin_RetRoleInfoByOpenID* Admin_RetRoleInfoByOpenID::New() const {
  return new Admin_RetRoleInfoByOpenID;
}

void Admin_RetRoleInfoByOpenID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  roleinfolist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_RetRoleInfoByOpenID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleInfoList;
        break;
      }

      // repeated .PlayerInfo.Admin_RoleInfoByOpenID roleInfoList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_roleInfoList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_roleinfolist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_roleInfoList;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_RetRoleInfoByOpenID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // repeated .PlayerInfo.Admin_RoleInfoByOpenID roleInfoList = 2;
  for (int i = 0; i < this->roleinfolist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->roleinfolist(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_RetRoleInfoByOpenID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // repeated .PlayerInfo.Admin_RoleInfoByOpenID roleInfoList = 2;
  for (int i = 0; i < this->roleinfolist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->roleinfolist(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_RetRoleInfoByOpenID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  // repeated .PlayerInfo.Admin_RoleInfoByOpenID roleInfoList = 2;
  total_size += 1 * this->roleinfolist_size();
  for (int i = 0; i < this->roleinfolist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->roleinfolist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_RetRoleInfoByOpenID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_RetRoleInfoByOpenID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_RetRoleInfoByOpenID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_RetRoleInfoByOpenID::MergeFrom(const Admin_RetRoleInfoByOpenID& from) {
  GOOGLE_CHECK_NE(&from, this);
  roleinfolist_.MergeFrom(from.roleinfolist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_RetRoleInfoByOpenID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_RetRoleInfoByOpenID::CopyFrom(const Admin_RetRoleInfoByOpenID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_RetRoleInfoByOpenID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < roleinfolist_size(); i++) {
    if (!this->roleinfolist(i).IsInitialized()) return false;
  }
  return true;
}

void Admin_RetRoleInfoByOpenID::Swap(Admin_RetRoleInfoByOpenID* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    roleinfolist_.Swap(&other->roleinfolist_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_RetRoleInfoByOpenID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_RetRoleInfoByOpenID_descriptor_;
  metadata.reflection = Admin_RetRoleInfoByOpenID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_ReqRoleInfoByOpenIDQzoneID::kOpenIDFieldNumber;
const int Admin_ReqRoleInfoByOpenIDQzoneID::kQzoneIDFieldNumber;
#endif  // !_MSC_VER

Admin_ReqRoleInfoByOpenIDQzoneID::Admin_ReqRoleInfoByOpenIDQzoneID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_ReqRoleInfoByOpenIDQzoneID::InitAsDefaultInstance() {
}

Admin_ReqRoleInfoByOpenIDQzoneID::Admin_ReqRoleInfoByOpenIDQzoneID(const Admin_ReqRoleInfoByOpenIDQzoneID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_ReqRoleInfoByOpenIDQzoneID::SharedCtor() {
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  qzoneid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_ReqRoleInfoByOpenIDQzoneID::~Admin_ReqRoleInfoByOpenIDQzoneID() {
  SharedDtor();
}

void Admin_ReqRoleInfoByOpenIDQzoneID::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (this != default_instance_) {
  }
}

void Admin_ReqRoleInfoByOpenIDQzoneID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_ReqRoleInfoByOpenIDQzoneID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_ReqRoleInfoByOpenIDQzoneID_descriptor_;
}

const Admin_ReqRoleInfoByOpenIDQzoneID& Admin_ReqRoleInfoByOpenIDQzoneID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  return *default_instance_;
}

Admin_ReqRoleInfoByOpenIDQzoneID* Admin_ReqRoleInfoByOpenIDQzoneID::default_instance_ = NULL;

Admin_ReqRoleInfoByOpenIDQzoneID* Admin_ReqRoleInfoByOpenIDQzoneID::New() const {
  return new Admin_ReqRoleInfoByOpenIDQzoneID;
}

void Admin_ReqRoleInfoByOpenIDQzoneID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    qzoneid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_ReqRoleInfoByOpenIDQzoneID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string openID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_qzoneID;
        break;
      }

      // required int32 qzoneID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_qzoneID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &qzoneid_)));
          set_has_qzoneid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_ReqRoleInfoByOpenIDQzoneID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string openID = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->openid(), output);
  }

  // required int32 qzoneID = 2;
  if (has_qzoneid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->qzoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_ReqRoleInfoByOpenIDQzoneID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string openID = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  // required int32 qzoneID = 2;
  if (has_qzoneid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->qzoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_ReqRoleInfoByOpenIDQzoneID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string openID = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required int32 qzoneID = 2;
    if (has_qzoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->qzoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_ReqRoleInfoByOpenIDQzoneID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_ReqRoleInfoByOpenIDQzoneID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_ReqRoleInfoByOpenIDQzoneID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_ReqRoleInfoByOpenIDQzoneID::MergeFrom(const Admin_ReqRoleInfoByOpenIDQzoneID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_qzoneid()) {
      set_qzoneid(from.qzoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_ReqRoleInfoByOpenIDQzoneID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_ReqRoleInfoByOpenIDQzoneID::CopyFrom(const Admin_ReqRoleInfoByOpenIDQzoneID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_ReqRoleInfoByOpenIDQzoneID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Admin_ReqRoleInfoByOpenIDQzoneID::Swap(Admin_ReqRoleInfoByOpenIDQzoneID* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    std::swap(qzoneid_, other->qzoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_ReqRoleInfoByOpenIDQzoneID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_ReqRoleInfoByOpenIDQzoneID_descriptor_;
  metadata.reflection = Admin_ReqRoleInfoByOpenIDQzoneID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_ReqContainerInfo::kCharIDFieldNumber;
const int Admin_ReqContainerInfo::kTypeFieldNumber;
#endif  // !_MSC_VER

Admin_ReqContainerInfo::Admin_ReqContainerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_ReqContainerInfo::InitAsDefaultInstance() {
}

Admin_ReqContainerInfo::Admin_ReqContainerInfo(const Admin_ReqContainerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_ReqContainerInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_ReqContainerInfo::~Admin_ReqContainerInfo() {
  SharedDtor();
}

void Admin_ReqContainerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_ReqContainerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_ReqContainerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_ReqContainerInfo_descriptor_;
}

const Admin_ReqContainerInfo& Admin_ReqContainerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  return *default_instance_;
}

Admin_ReqContainerInfo* Admin_ReqContainerInfo::default_instance_ = NULL;

Admin_ReqContainerInfo* Admin_ReqContainerInfo::New() const {
  return new Admin_ReqContainerInfo;
}

void Admin_ReqContainerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_ReqContainerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_ReqContainerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charID = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_ReqContainerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charID = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_ReqContainerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charID = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_ReqContainerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_ReqContainerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_ReqContainerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_ReqContainerInfo::MergeFrom(const Admin_ReqContainerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_ReqContainerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_ReqContainerInfo::CopyFrom(const Admin_ReqContainerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_ReqContainerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void Admin_ReqContainerInfo::Swap(Admin_ReqContainerInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_ReqContainerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_ReqContainerInfo_descriptor_;
  metadata.reflection = Admin_ReqContainerInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int Admin_RetContainerInfo::kRetFieldNumber;
const int Admin_RetContainerInfo::kTypeFieldNumber;
const int Admin_RetContainerInfo::kItemsFieldNumber;
#endif  // !_MSC_VER

Admin_RetContainerInfo::Admin_RetContainerInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void Admin_RetContainerInfo::InitAsDefaultInstance() {
}

Admin_RetContainerInfo::Admin_RetContainerInfo(const Admin_RetContainerInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void Admin_RetContainerInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

Admin_RetContainerInfo::~Admin_RetContainerInfo() {
  SharedDtor();
}

void Admin_RetContainerInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void Admin_RetContainerInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* Admin_RetContainerInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return Admin_RetContainerInfo_descriptor_;
}

const Admin_RetContainerInfo& Admin_RetContainerInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_MSProtoc_2fMS_5fPlayerInfo_2eproto();
  return *default_instance_;
}

Admin_RetContainerInfo* Admin_RetContainerInfo::default_instance_ = NULL;

Admin_RetContainerInfo* Admin_RetContainerInfo::New() const {
  return new Admin_RetContainerInfo;
}

void Admin_RetContainerInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    type_ = 0;
  }
  items_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool Admin_RetContainerInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_type;
        break;
      }

      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_type:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        break;
      }

      // repeated .MS_MailInfo.ClientItemInfo items = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_items:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_items()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_items;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void Admin_RetContainerInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // repeated .MS_MailInfo.ClientItemInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->items(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* Admin_RetContainerInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // repeated .MS_MailInfo.ClientItemInfo items = 3;
  for (int i = 0; i < this->items_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->items(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int Admin_RetContainerInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .MS_MailInfo.ClientItemInfo items = 3;
  total_size += 1 * this->items_size();
  for (int i = 0; i < this->items_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->items(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void Admin_RetContainerInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const Admin_RetContainerInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const Admin_RetContainerInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void Admin_RetContainerInfo::MergeFrom(const Admin_RetContainerInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  items_.MergeFrom(from.items_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void Admin_RetContainerInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Admin_RetContainerInfo::CopyFrom(const Admin_RetContainerInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Admin_RetContainerInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  for (int i = 0; i < items_size(); i++) {
    if (!this->items(i).IsInitialized()) return false;
  }
  return true;
}

void Admin_RetContainerInfo::Swap(Admin_RetContainerInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(type_, other->type_);
    items_.Swap(&other->items_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata Admin_RetContainerInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = Admin_RetContainerInfo_descriptor_;
  metadata.reflection = Admin_RetContainerInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PlayerInfo

// @@protoc_insertion_point(global_scope)
