// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map/GS2GTAllMap.proto

#ifndef PROTOBUF_Map_2fGS2GTAllMap_2eproto__INCLUDED
#define PROTOBUF_Map_2fGS2GTAllMap_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace GameSvrToGate {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
void protobuf_AssignDesc_Map_2fGS2GTAllMap_2eproto();
void protobuf_ShutdownFile_Map_2fGS2GTAllMap_2eproto();

class GSAllMap;
class SceneInfo;
class CopyInfo;
class GSMapInfo;
class CreateMapInfo;
class CreateMapAck;
class DeleteMap;

// ===================================================================

class GSAllMap : public ::google::protobuf::Message {
 public:
  GSAllMap();
  virtual ~GSAllMap();

  GSAllMap(const GSAllMap& from);

  inline GSAllMap& operator=(const GSAllMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GSAllMap& default_instance();

  void Swap(GSAllMap* other);

  // implements Message ----------------------------------------------

  GSAllMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GSAllMap& from);
  void MergeFrom(const GSAllMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated .GameSvrToGate.GSMapInfo scene = 2;
  inline int scene_size() const;
  inline void clear_scene();
  static const int kSceneFieldNumber = 2;
  inline const ::GameSvrToGate::GSMapInfo& scene(int index) const;
  inline ::GameSvrToGate::GSMapInfo* mutable_scene(int index);
  inline ::GameSvrToGate::GSMapInfo* add_scene();
  inline const ::google::protobuf::RepeatedPtrField< ::GameSvrToGate::GSMapInfo >&
      scene() const;
  inline ::google::protobuf::RepeatedPtrField< ::GameSvrToGate::GSMapInfo >*
      mutable_scene();

  // @@protoc_insertion_point(class_scope:GameSvrToGate.GSAllMap)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::GameSvrToGate::GSMapInfo > scene_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  friend void protobuf_AssignDesc_Map_2fGS2GTAllMap_2eproto();
  friend void protobuf_ShutdownFile_Map_2fGS2GTAllMap_2eproto();

  void InitAsDefaultInstance();
  static GSAllMap* default_instance_;
};
// -------------------------------------------------------------------

class SceneInfo : public ::google::protobuf::Message {
 public:
  SceneInfo();
  virtual ~SceneInfo();

  SceneInfo(const SceneInfo& from);

  inline SceneInfo& operator=(const SceneInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SceneInfo& default_instance();

  void Swap(SceneInfo* other);

  // implements Message ----------------------------------------------

  SceneInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SceneInfo& from);
  void MergeFrom(const SceneInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 sceneID = 1;
  inline bool has_sceneid() const;
  inline void clear_sceneid();
  static const int kSceneIDFieldNumber = 1;
  inline ::google::protobuf::int64 sceneid() const;
  inline void set_sceneid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:GameSvrToGate.SceneInfo)
 private:
  inline void set_has_sceneid();
  inline void clear_has_sceneid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 sceneid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  friend void protobuf_AssignDesc_Map_2fGS2GTAllMap_2eproto();
  friend void protobuf_ShutdownFile_Map_2fGS2GTAllMap_2eproto();

  void InitAsDefaultInstance();
  static SceneInfo* default_instance_;
};
// -------------------------------------------------------------------

class CopyInfo : public ::google::protobuf::Message {
 public:
  CopyInfo();
  virtual ~CopyInfo();

  CopyInfo(const CopyInfo& from);

  inline CopyInfo& operator=(const CopyInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CopyInfo& default_instance();

  void Swap(CopyInfo* other);

  // implements Message ----------------------------------------------

  CopyInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CopyInfo& from);
  void MergeFrom(const CopyInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 mapid = 1;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 1;
  inline ::google::protobuf::int32 mapid() const;
  inline void set_mapid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameSvrToGate.CopyInfo)
 private:
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 mapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  friend void protobuf_AssignDesc_Map_2fGS2GTAllMap_2eproto();
  friend void protobuf_ShutdownFile_Map_2fGS2GTAllMap_2eproto();

  void InitAsDefaultInstance();
  static CopyInfo* default_instance_;
};
// -------------------------------------------------------------------

class GSMapInfo : public ::google::protobuf::Message {
 public:
  GSMapInfo();
  virtual ~GSMapInfo();

  GSMapInfo(const GSMapInfo& from);

  inline GSMapInfo& operator=(const GSMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GSMapInfo& default_instance();

  void Swap(GSMapInfo* other);

  // implements Message ----------------------------------------------

  GSMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GSMapInfo& from);
  void MergeFrom(const GSMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 maptype = 1;
  inline bool has_maptype() const;
  inline void clear_maptype();
  static const int kMaptypeFieldNumber = 1;
  inline ::google::protobuf::int32 maptype() const;
  inline void set_maptype(::google::protobuf::int32 value);

  // required int32 staticid = 2;
  inline bool has_staticid() const;
  inline void clear_staticid();
  static const int kStaticidFieldNumber = 2;
  inline ::google::protobuf::int32 staticid() const;
  inline void set_staticid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameSvrToGate.GSMapInfo)
 private:
  inline void set_has_maptype();
  inline void clear_has_maptype();
  inline void set_has_staticid();
  inline void clear_has_staticid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 maptype_;
  ::google::protobuf::int32 staticid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  friend void protobuf_AssignDesc_Map_2fGS2GTAllMap_2eproto();
  friend void protobuf_ShutdownFile_Map_2fGS2GTAllMap_2eproto();

  void InitAsDefaultInstance();
  static GSMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class CreateMapInfo : public ::google::protobuf::Message {
 public:
  CreateMapInfo();
  virtual ~CreateMapInfo();

  CreateMapInfo(const CreateMapInfo& from);

  inline CreateMapInfo& operator=(const CreateMapInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateMapInfo& default_instance();

  void Swap(CreateMapInfo* other);

  // implements Message ----------------------------------------------

  CreateMapInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateMapInfo& from);
  void MergeFrom(const CreateMapInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 onlyid = 1;
  inline bool has_onlyid() const;
  inline void clear_onlyid();
  static const int kOnlyidFieldNumber = 1;
  inline ::google::protobuf::int64 onlyid() const;
  inline void set_onlyid(::google::protobuf::int64 value);

  // optional int64 charid = 2;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 2;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int32 maptype = 3;
  inline bool has_maptype() const;
  inline void clear_maptype();
  static const int kMaptypeFieldNumber = 3;
  inline ::google::protobuf::int32 maptype() const;
  inline void set_maptype(::google::protobuf::int32 value);

  // optional int32 staticid = 4;
  inline bool has_staticid() const;
  inline void clear_staticid();
  static const int kStaticidFieldNumber = 4;
  inline ::google::protobuf::int32 staticid() const;
  inline void set_staticid(::google::protobuf::int32 value);

  // optional bytes content = 5;
  inline bool has_content() const;
  inline void clear_content();
  static const int kContentFieldNumber = 5;
  inline const ::std::string& content() const;
  inline void set_content(const ::std::string& value);
  inline void set_content(const char* value);
  inline void set_content(const void* value, size_t size);
  inline ::std::string* mutable_content();
  inline ::std::string* release_content();
  inline void set_allocated_content(::std::string* content);

  // @@protoc_insertion_point(class_scope:GameSvrToGate.CreateMapInfo)
 private:
  inline void set_has_onlyid();
  inline void clear_has_onlyid();
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_maptype();
  inline void clear_has_maptype();
  inline void set_has_staticid();
  inline void clear_has_staticid();
  inline void set_has_content();
  inline void clear_has_content();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 onlyid_;
  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 maptype_;
  ::google::protobuf::int32 staticid_;
  ::std::string* content_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  friend void protobuf_AssignDesc_Map_2fGS2GTAllMap_2eproto();
  friend void protobuf_ShutdownFile_Map_2fGS2GTAllMap_2eproto();

  void InitAsDefaultInstance();
  static CreateMapInfo* default_instance_;
};
// -------------------------------------------------------------------

class CreateMapAck : public ::google::protobuf::Message {
 public:
  CreateMapAck();
  virtual ~CreateMapAck();

  CreateMapAck(const CreateMapAck& from);

  inline CreateMapAck& operator=(const CreateMapAck& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CreateMapAck& default_instance();

  void Swap(CreateMapAck* other);

  // implements Message ----------------------------------------------

  CreateMapAck* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CreateMapAck& from);
  void MergeFrom(const CreateMapAck& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int64 ret() const;
  inline void set_ret(::google::protobuf::int64 value);

  // optional int32 gsid = 2;
  inline bool has_gsid() const;
  inline void clear_gsid();
  static const int kGsidFieldNumber = 2;
  inline ::google::protobuf::int32 gsid() const;
  inline void set_gsid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:GameSvrToGate.CreateMapAck)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_gsid();
  inline void clear_has_gsid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 ret_;
  ::google::protobuf::int32 gsid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  friend void protobuf_AssignDesc_Map_2fGS2GTAllMap_2eproto();
  friend void protobuf_ShutdownFile_Map_2fGS2GTAllMap_2eproto();

  void InitAsDefaultInstance();
  static CreateMapAck* default_instance_;
};
// -------------------------------------------------------------------

class DeleteMap : public ::google::protobuf::Message {
 public:
  DeleteMap();
  virtual ~DeleteMap();

  DeleteMap(const DeleteMap& from);

  inline DeleteMap& operator=(const DeleteMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const DeleteMap& default_instance();

  void Swap(DeleteMap* other);

  // implements Message ----------------------------------------------

  DeleteMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const DeleteMap& from);
  void MergeFrom(const DeleteMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // repeated int64 sceneid = 2;
  inline int sceneid_size() const;
  inline void clear_sceneid();
  static const int kSceneidFieldNumber = 2;
  inline ::google::protobuf::int64 sceneid(int index) const;
  inline void set_sceneid(int index, ::google::protobuf::int64 value);
  inline void add_sceneid(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      sceneid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_sceneid();

  // @@protoc_insertion_point(class_scope:GameSvrToGate.DeleteMap)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > sceneid_;
  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Map_2fGS2GTAllMap_2eproto();
  friend void protobuf_AssignDesc_Map_2fGS2GTAllMap_2eproto();
  friend void protobuf_ShutdownFile_Map_2fGS2GTAllMap_2eproto();

  void InitAsDefaultInstance();
  static DeleteMap* default_instance_;
};
// ===================================================================


// ===================================================================

// GSAllMap

// required int32 id = 1;
inline bool GSAllMap::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GSAllMap::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GSAllMap::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GSAllMap::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 GSAllMap::id() const {
  return id_;
}
inline void GSAllMap::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated .GameSvrToGate.GSMapInfo scene = 2;
inline int GSAllMap::scene_size() const {
  return scene_.size();
}
inline void GSAllMap::clear_scene() {
  scene_.Clear();
}
inline const ::GameSvrToGate::GSMapInfo& GSAllMap::scene(int index) const {
  return scene_.Get(index);
}
inline ::GameSvrToGate::GSMapInfo* GSAllMap::mutable_scene(int index) {
  return scene_.Mutable(index);
}
inline ::GameSvrToGate::GSMapInfo* GSAllMap::add_scene() {
  return scene_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::GameSvrToGate::GSMapInfo >&
GSAllMap::scene() const {
  return scene_;
}
inline ::google::protobuf::RepeatedPtrField< ::GameSvrToGate::GSMapInfo >*
GSAllMap::mutable_scene() {
  return &scene_;
}

// -------------------------------------------------------------------

// SceneInfo

// required int64 sceneID = 1;
inline bool SceneInfo::has_sceneid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SceneInfo::set_has_sceneid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SceneInfo::clear_has_sceneid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SceneInfo::clear_sceneid() {
  sceneid_ = GOOGLE_LONGLONG(0);
  clear_has_sceneid();
}
inline ::google::protobuf::int64 SceneInfo::sceneid() const {
  return sceneid_;
}
inline void SceneInfo::set_sceneid(::google::protobuf::int64 value) {
  set_has_sceneid();
  sceneid_ = value;
}

// -------------------------------------------------------------------

// CopyInfo

// required int32 mapid = 1;
inline bool CopyInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CopyInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CopyInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CopyInfo::clear_mapid() {
  mapid_ = 0;
  clear_has_mapid();
}
inline ::google::protobuf::int32 CopyInfo::mapid() const {
  return mapid_;
}
inline void CopyInfo::set_mapid(::google::protobuf::int32 value) {
  set_has_mapid();
  mapid_ = value;
}

// -------------------------------------------------------------------

// GSMapInfo

// required int32 maptype = 1;
inline bool GSMapInfo::has_maptype() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GSMapInfo::set_has_maptype() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GSMapInfo::clear_has_maptype() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GSMapInfo::clear_maptype() {
  maptype_ = 0;
  clear_has_maptype();
}
inline ::google::protobuf::int32 GSMapInfo::maptype() const {
  return maptype_;
}
inline void GSMapInfo::set_maptype(::google::protobuf::int32 value) {
  set_has_maptype();
  maptype_ = value;
}

// required int32 staticid = 2;
inline bool GSMapInfo::has_staticid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GSMapInfo::set_has_staticid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GSMapInfo::clear_has_staticid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GSMapInfo::clear_staticid() {
  staticid_ = 0;
  clear_has_staticid();
}
inline ::google::protobuf::int32 GSMapInfo::staticid() const {
  return staticid_;
}
inline void GSMapInfo::set_staticid(::google::protobuf::int32 value) {
  set_has_staticid();
  staticid_ = value;
}

// -------------------------------------------------------------------

// CreateMapInfo

// required int64 onlyid = 1;
inline bool CreateMapInfo::has_onlyid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateMapInfo::set_has_onlyid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateMapInfo::clear_has_onlyid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateMapInfo::clear_onlyid() {
  onlyid_ = GOOGLE_LONGLONG(0);
  clear_has_onlyid();
}
inline ::google::protobuf::int64 CreateMapInfo::onlyid() const {
  return onlyid_;
}
inline void CreateMapInfo::set_onlyid(::google::protobuf::int64 value) {
  set_has_onlyid();
  onlyid_ = value;
}

// optional int64 charid = 2;
inline bool CreateMapInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateMapInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateMapInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateMapInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 CreateMapInfo::charid() const {
  return charid_;
}
inline void CreateMapInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 maptype = 3;
inline bool CreateMapInfo::has_maptype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CreateMapInfo::set_has_maptype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CreateMapInfo::clear_has_maptype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CreateMapInfo::clear_maptype() {
  maptype_ = 0;
  clear_has_maptype();
}
inline ::google::protobuf::int32 CreateMapInfo::maptype() const {
  return maptype_;
}
inline void CreateMapInfo::set_maptype(::google::protobuf::int32 value) {
  set_has_maptype();
  maptype_ = value;
}

// optional int32 staticid = 4;
inline bool CreateMapInfo::has_staticid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CreateMapInfo::set_has_staticid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CreateMapInfo::clear_has_staticid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CreateMapInfo::clear_staticid() {
  staticid_ = 0;
  clear_has_staticid();
}
inline ::google::protobuf::int32 CreateMapInfo::staticid() const {
  return staticid_;
}
inline void CreateMapInfo::set_staticid(::google::protobuf::int32 value) {
  set_has_staticid();
  staticid_ = value;
}

// optional bytes content = 5;
inline bool CreateMapInfo::has_content() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CreateMapInfo::set_has_content() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CreateMapInfo::clear_has_content() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CreateMapInfo::clear_content() {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    content_->clear();
  }
  clear_has_content();
}
inline const ::std::string& CreateMapInfo::content() const {
  return *content_;
}
inline void CreateMapInfo::set_content(const ::std::string& value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void CreateMapInfo::set_content(const char* value) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(value);
}
inline void CreateMapInfo::set_content(const void* value, size_t size) {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  content_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CreateMapInfo::mutable_content() {
  set_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    content_ = new ::std::string;
  }
  return content_;
}
inline ::std::string* CreateMapInfo::release_content() {
  clear_has_content();
  if (content_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = content_;
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CreateMapInfo::set_allocated_content(::std::string* content) {
  if (content_ != &::google::protobuf::internal::kEmptyString) {
    delete content_;
  }
  if (content) {
    set_has_content();
    content_ = content;
  } else {
    clear_has_content();
    content_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// CreateMapAck

// required int64 ret = 1;
inline bool CreateMapAck::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CreateMapAck::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CreateMapAck::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CreateMapAck::clear_ret() {
  ret_ = GOOGLE_LONGLONG(0);
  clear_has_ret();
}
inline ::google::protobuf::int64 CreateMapAck::ret() const {
  return ret_;
}
inline void CreateMapAck::set_ret(::google::protobuf::int64 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 gsid = 2;
inline bool CreateMapAck::has_gsid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CreateMapAck::set_has_gsid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CreateMapAck::clear_has_gsid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CreateMapAck::clear_gsid() {
  gsid_ = 0;
  clear_has_gsid();
}
inline ::google::protobuf::int32 CreateMapAck::gsid() const {
  return gsid_;
}
inline void CreateMapAck::set_gsid(::google::protobuf::int32 value) {
  set_has_gsid();
  gsid_ = value;
}

// -------------------------------------------------------------------

// DeleteMap

// required int32 id = 1;
inline bool DeleteMap::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void DeleteMap::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void DeleteMap::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void DeleteMap::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 DeleteMap::id() const {
  return id_;
}
inline void DeleteMap::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// repeated int64 sceneid = 2;
inline int DeleteMap::sceneid_size() const {
  return sceneid_.size();
}
inline void DeleteMap::clear_sceneid() {
  sceneid_.Clear();
}
inline ::google::protobuf::int64 DeleteMap::sceneid(int index) const {
  return sceneid_.Get(index);
}
inline void DeleteMap::set_sceneid(int index, ::google::protobuf::int64 value) {
  sceneid_.Set(index, value);
}
inline void DeleteMap::add_sceneid(::google::protobuf::int64 value) {
  sceneid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
DeleteMap::sceneid() const {
  return sceneid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
DeleteMap::mutable_sceneid() {
  return &sceneid_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace GameSvrToGate

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Map_2fGS2GTAllMap_2eproto__INCLUDED
