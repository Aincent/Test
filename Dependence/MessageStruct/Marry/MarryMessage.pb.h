// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Marry/MarryMessage.proto

#ifndef PROTOBUF_Marry_2fMarryMessage_2eproto__INCLUDED
#define PROTOBUF_Marry_2fMarryMessage_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace MarryMessInfo {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

class ClientReqPropose;
class WSToClientPropose;
class WSToClientNoteProposed;
class ClientSimProposedAnswer;
class WSToClientProposedAnswer;
class WSToClientProposedResult;
class WSToClientMarryInfo;
class ClientReqOrderWedding;
class WSToClientOrderWedding;
class WSToClientInvitationIssuedInfo;
class InvitationIssued;
class ClientReqInvitationIssued;
class WSToClientInvitationIssued;
class ClientReqDeleteInvitation;
class WSToClientDeleteInvitation;
class WSToClientInvitationSend;
class WSToClientMarryInstance;
class ClientReqCelebration;
class WSToClientCelebration;
class GMToClientCelebration;
class GMToClientCeleTimes;
class WSToClientDeleteInvite;
class WSToClientWddingOver;
class MarryInstance;

// ===================================================================

class ClientReqPropose : public ::google::protobuf::Message {
 public:
  ClientReqPropose();
  virtual ~ClientReqPropose();

  ClientReqPropose(const ClientReqPropose& from);

  inline ClientReqPropose& operator=(const ClientReqPropose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqPropose& default_instance();

  void Swap(ClientReqPropose* other);

  // implements Message ----------------------------------------------

  ClientReqPropose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqPropose& from);
  void MergeFrom(const ClientReqPropose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional string declaration = 2;
  inline bool has_declaration() const;
  inline void clear_declaration();
  static const int kDeclarationFieldNumber = 2;
  inline const ::std::string& declaration() const;
  inline void set_declaration(const ::std::string& value);
  inline void set_declaration(const char* value);
  inline void set_declaration(const char* value, size_t size);
  inline ::std::string* mutable_declaration();
  inline ::std::string* release_declaration();
  inline void set_allocated_declaration(::std::string* declaration);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.ClientReqPropose)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_declaration();
  inline void clear_has_declaration();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* declaration_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static ClientReqPropose* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientPropose : public ::google::protobuf::Message {
 public:
  WSToClientPropose();
  virtual ~WSToClientPropose();

  WSToClientPropose(const WSToClientPropose& from);

  inline WSToClientPropose& operator=(const WSToClientPropose& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientPropose& default_instance();

  void Swap(WSToClientPropose* other);

  // implements Message ----------------------------------------------

  WSToClientPropose* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientPropose& from);
  void MergeFrom(const WSToClientPropose& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.WSToClientPropose)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static WSToClientPropose* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientNoteProposed : public ::google::protobuf::Message {
 public:
  WSToClientNoteProposed();
  virtual ~WSToClientNoteProposed();

  WSToClientNoteProposed(const WSToClientNoteProposed& from);

  inline WSToClientNoteProposed& operator=(const WSToClientNoteProposed& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientNoteProposed& default_instance();

  void Swap(WSToClientNoteProposed* other);

  // implements Message ----------------------------------------------

  WSToClientNoteProposed* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientNoteProposed& from);
  void MergeFrom(const WSToClientNoteProposed& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional string declaration = 2;
  inline bool has_declaration() const;
  inline void clear_declaration();
  static const int kDeclarationFieldNumber = 2;
  inline const ::std::string& declaration() const;
  inline void set_declaration(const ::std::string& value);
  inline void set_declaration(const char* value);
  inline void set_declaration(const char* value, size_t size);
  inline ::std::string* mutable_declaration();
  inline ::std::string* release_declaration();
  inline void set_allocated_declaration(::std::string* declaration);

  // optional string charname = 3;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 3;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.WSToClientNoteProposed)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_declaration();
  inline void clear_has_declaration();
  inline void set_has_charname();
  inline void clear_has_charname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* declaration_;
  ::std::string* charname_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static WSToClientNoteProposed* default_instance_;
};
// -------------------------------------------------------------------

class ClientSimProposedAnswer : public ::google::protobuf::Message {
 public:
  ClientSimProposedAnswer();
  virtual ~ClientSimProposedAnswer();

  ClientSimProposedAnswer(const ClientSimProposedAnswer& from);

  inline ClientSimProposedAnswer& operator=(const ClientSimProposedAnswer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientSimProposedAnswer& default_instance();

  void Swap(ClientSimProposedAnswer* other);

  // implements Message ----------------------------------------------

  ClientSimProposedAnswer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientSimProposedAnswer& from);
  void MergeFrom(const ClientSimProposedAnswer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional bool willing = 2;
  inline bool has_willing() const;
  inline void clear_willing();
  static const int kWillingFieldNumber = 2;
  inline bool willing() const;
  inline void set_willing(bool value);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.ClientSimProposedAnswer)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_willing();
  inline void clear_has_willing();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  bool willing_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static ClientSimProposedAnswer* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientProposedAnswer : public ::google::protobuf::Message {
 public:
  WSToClientProposedAnswer();
  virtual ~WSToClientProposedAnswer();

  WSToClientProposedAnswer(const WSToClientProposedAnswer& from);

  inline WSToClientProposedAnswer& operator=(const WSToClientProposedAnswer& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientProposedAnswer& default_instance();

  void Swap(WSToClientProposedAnswer* other);

  // implements Message ----------------------------------------------

  WSToClientProposedAnswer* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientProposedAnswer& from);
  void MergeFrom(const WSToClientProposedAnswer& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional bool willing = 2;
  inline bool has_willing() const;
  inline void clear_willing();
  static const int kWillingFieldNumber = 2;
  inline bool willing() const;
  inline void set_willing(bool value);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.WSToClientProposedAnswer)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_willing();
  inline void clear_has_willing();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  bool willing_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static WSToClientProposedAnswer* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientProposedResult : public ::google::protobuf::Message {
 public:
  WSToClientProposedResult();
  virtual ~WSToClientProposedResult();

  WSToClientProposedResult(const WSToClientProposedResult& from);

  inline WSToClientProposedResult& operator=(const WSToClientProposedResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientProposedResult& default_instance();

  void Swap(WSToClientProposedResult* other);

  // implements Message ----------------------------------------------

  WSToClientProposedResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientProposedResult& from);
  void MergeFrom(const WSToClientProposedResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional bool willing = 2;
  inline bool has_willing() const;
  inline void clear_willing();
  static const int kWillingFieldNumber = 2;
  inline bool willing() const;
  inline void set_willing(bool value);

  // optional string charname = 3;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 3;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.WSToClientProposedResult)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_willing();
  inline void clear_has_willing();
  inline void set_has_charname();
  inline void clear_has_charname();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* charname_;
  bool willing_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static WSToClientProposedResult* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientMarryInfo : public ::google::protobuf::Message {
 public:
  WSToClientMarryInfo();
  virtual ~WSToClientMarryInfo();

  WSToClientMarryInfo(const WSToClientMarryInfo& from);

  inline WSToClientMarryInfo& operator=(const WSToClientMarryInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientMarryInfo& default_instance();

  void Swap(WSToClientMarryInfo* other);

  // implements Message ----------------------------------------------

  WSToClientMarryInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientMarryInfo& from);
  void MergeFrom(const WSToClientMarryInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.WSToClientMarryInfo)
 private:
  inline void set_has_state();
  inline void clear_has_state();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 state_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static WSToClientMarryInfo* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqOrderWedding : public ::google::protobuf::Message {
 public:
  ClientReqOrderWedding();
  virtual ~ClientReqOrderWedding();

  ClientReqOrderWedding(const ClientReqOrderWedding& from);

  inline ClientReqOrderWedding& operator=(const ClientReqOrderWedding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqOrderWedding& default_instance();

  void Swap(ClientReqOrderWedding* other);

  // implements Message ----------------------------------------------

  ClientReqOrderWedding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqOrderWedding& from);
  void MergeFrom(const ClientReqOrderWedding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 timeid = 2;
  inline bool has_timeid() const;
  inline void clear_timeid();
  static const int kTimeidFieldNumber = 2;
  inline ::google::protobuf::int32 timeid() const;
  inline void set_timeid(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.ClientReqOrderWedding)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_timeid();
  inline void clear_has_timeid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 timeid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static ClientReqOrderWedding* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientOrderWedding : public ::google::protobuf::Message {
 public:
  WSToClientOrderWedding();
  virtual ~WSToClientOrderWedding();

  WSToClientOrderWedding(const WSToClientOrderWedding& from);

  inline WSToClientOrderWedding& operator=(const WSToClientOrderWedding& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientOrderWedding& default_instance();

  void Swap(WSToClientOrderWedding* other);

  // implements Message ----------------------------------------------

  WSToClientOrderWedding* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientOrderWedding& from);
  void MergeFrom(const WSToClientOrderWedding& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional .MarryMessInfo.WSToClientInvitationSend invited = 2;
  inline bool has_invited() const;
  inline void clear_invited();
  static const int kInvitedFieldNumber = 2;
  inline const ::MarryMessInfo::WSToClientInvitationSend& invited() const;
  inline ::MarryMessInfo::WSToClientInvitationSend* mutable_invited();
  inline ::MarryMessInfo::WSToClientInvitationSend* release_invited();
  inline void set_allocated_invited(::MarryMessInfo::WSToClientInvitationSend* invited);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.WSToClientOrderWedding)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_invited();
  inline void clear_has_invited();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::MarryMessInfo::WSToClientInvitationSend* invited_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static WSToClientOrderWedding* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientInvitationIssuedInfo : public ::google::protobuf::Message {
 public:
  WSToClientInvitationIssuedInfo();
  virtual ~WSToClientInvitationIssuedInfo();

  WSToClientInvitationIssuedInfo(const WSToClientInvitationIssuedInfo& from);

  inline WSToClientInvitationIssuedInfo& operator=(const WSToClientInvitationIssuedInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientInvitationIssuedInfo& default_instance();

  void Swap(WSToClientInvitationIssuedInfo* other);

  // implements Message ----------------------------------------------

  WSToClientInvitationIssuedInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientInvitationIssuedInfo& from);
  void MergeFrom(const WSToClientInvitationIssuedInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional int32 timeid = 2;
  inline bool has_timeid() const;
  inline void clear_timeid();
  static const int kTimeidFieldNumber = 2;
  inline ::google::protobuf::int32 timeid() const;
  inline void set_timeid(::google::protobuf::int32 value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // repeated .MarryMessInfo.InvitationIssued invited = 4;
  inline int invited_size() const;
  inline void clear_invited();
  static const int kInvitedFieldNumber = 4;
  inline const ::MarryMessInfo::InvitationIssued& invited(int index) const;
  inline ::MarryMessInfo::InvitationIssued* mutable_invited(int index);
  inline ::MarryMessInfo::InvitationIssued* add_invited();
  inline const ::google::protobuf::RepeatedPtrField< ::MarryMessInfo::InvitationIssued >&
      invited() const;
  inline ::google::protobuf::RepeatedPtrField< ::MarryMessInfo::InvitationIssued >*
      mutable_invited();

  // @@protoc_insertion_point(class_scope:MarryMessInfo.WSToClientInvitationIssuedInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_timeid();
  inline void clear_has_timeid();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::int32 timeid_;
  ::google::protobuf::RepeatedPtrField< ::MarryMessInfo::InvitationIssued > invited_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static WSToClientInvitationIssuedInfo* default_instance_;
};
// -------------------------------------------------------------------

class InvitationIssued : public ::google::protobuf::Message {
 public:
  InvitationIssued();
  virtual ~InvitationIssued();

  InvitationIssued(const InvitationIssued& from);

  inline InvitationIssued& operator=(const InvitationIssued& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const InvitationIssued& default_instance();

  void Swap(InvitationIssued* other);

  // implements Message ----------------------------------------------

  InvitationIssued* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const InvitationIssued& from);
  void MergeFrom(const InvitationIssued& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charId = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharIdFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int32 per = 2;
  inline bool has_per() const;
  inline void clear_per();
  static const int kPerFieldNumber = 2;
  inline ::google::protobuf::int32 per() const;
  inline void set_per(::google::protobuf::int32 value);

  // optional string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.InvitationIssued)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_per();
  inline void clear_has_per();
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* name_;
  ::google::protobuf::int32 per_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static InvitationIssued* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqInvitationIssued : public ::google::protobuf::Message {
 public:
  ClientReqInvitationIssued();
  virtual ~ClientReqInvitationIssued();

  ClientReqInvitationIssued(const ClientReqInvitationIssued& from);

  inline ClientReqInvitationIssued& operator=(const ClientReqInvitationIssued& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqInvitationIssued& default_instance();

  void Swap(ClientReqInvitationIssued* other);

  // implements Message ----------------------------------------------

  ClientReqInvitationIssued* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqInvitationIssued& from);
  void MergeFrom(const ClientReqInvitationIssued& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 invited = 1;
  inline int invited_size() const;
  inline void clear_invited();
  static const int kInvitedFieldNumber = 1;
  inline ::google::protobuf::int64 invited(int index) const;
  inline void set_invited(int index, ::google::protobuf::int64 value);
  inline void add_invited(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      invited() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_invited();

  // optional string name = 2;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 2;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.ClientReqInvitationIssued)
 private:
  inline void set_has_name();
  inline void clear_has_name();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > invited_;
  ::std::string* name_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static ClientReqInvitationIssued* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientInvitationIssued : public ::google::protobuf::Message {
 public:
  WSToClientInvitationIssued();
  virtual ~WSToClientInvitationIssued();

  WSToClientInvitationIssued(const WSToClientInvitationIssued& from);

  inline WSToClientInvitationIssued& operator=(const WSToClientInvitationIssued& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientInvitationIssued& default_instance();

  void Swap(WSToClientInvitationIssued* other);

  // implements Message ----------------------------------------------

  WSToClientInvitationIssued* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientInvitationIssued& from);
  void MergeFrom(const WSToClientInvitationIssued& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated .MarryMessInfo.InvitationIssued invited = 2;
  inline int invited_size() const;
  inline void clear_invited();
  static const int kInvitedFieldNumber = 2;
  inline const ::MarryMessInfo::InvitationIssued& invited(int index) const;
  inline ::MarryMessInfo::InvitationIssued* mutable_invited(int index);
  inline ::MarryMessInfo::InvitationIssued* add_invited();
  inline const ::google::protobuf::RepeatedPtrField< ::MarryMessInfo::InvitationIssued >&
      invited() const;
  inline ::google::protobuf::RepeatedPtrField< ::MarryMessInfo::InvitationIssued >*
      mutable_invited();

  // @@protoc_insertion_point(class_scope:MarryMessInfo.WSToClientInvitationIssued)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::MarryMessInfo::InvitationIssued > invited_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static WSToClientInvitationIssued* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqDeleteInvitation : public ::google::protobuf::Message {
 public:
  ClientReqDeleteInvitation();
  virtual ~ClientReqDeleteInvitation();

  ClientReqDeleteInvitation(const ClientReqDeleteInvitation& from);

  inline ClientReqDeleteInvitation& operator=(const ClientReqDeleteInvitation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqDeleteInvitation& default_instance();

  void Swap(ClientReqDeleteInvitation* other);

  // implements Message ----------------------------------------------

  ClientReqDeleteInvitation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqDeleteInvitation& from);
  void MergeFrom(const ClientReqDeleteInvitation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int64 invited = 1;
  inline int invited_size() const;
  inline void clear_invited();
  static const int kInvitedFieldNumber = 1;
  inline ::google::protobuf::int64 invited(int index) const;
  inline void set_invited(int index, ::google::protobuf::int64 value);
  inline void add_invited(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      invited() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_invited();

  // @@protoc_insertion_point(class_scope:MarryMessInfo.ClientReqDeleteInvitation)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > invited_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static ClientReqDeleteInvitation* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientDeleteInvitation : public ::google::protobuf::Message {
 public:
  WSToClientDeleteInvitation();
  virtual ~WSToClientDeleteInvitation();

  WSToClientDeleteInvitation(const WSToClientDeleteInvitation& from);

  inline WSToClientDeleteInvitation& operator=(const WSToClientDeleteInvitation& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientDeleteInvitation& default_instance();

  void Swap(WSToClientDeleteInvitation* other);

  // implements Message ----------------------------------------------

  WSToClientDeleteInvitation* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientDeleteInvitation& from);
  void MergeFrom(const WSToClientDeleteInvitation& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated int64 invited = 2;
  inline int invited_size() const;
  inline void clear_invited();
  static const int kInvitedFieldNumber = 2;
  inline ::google::protobuf::int64 invited(int index) const;
  inline void set_invited(int index, ::google::protobuf::int64 value);
  inline void add_invited(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      invited() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_invited();

  // @@protoc_insertion_point(class_scope:MarryMessInfo.WSToClientDeleteInvitation)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > invited_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static WSToClientDeleteInvitation* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientInvitationSend : public ::google::protobuf::Message {
 public:
  WSToClientInvitationSend();
  virtual ~WSToClientInvitationSend();

  WSToClientInvitationSend(const WSToClientInvitationSend& from);

  inline WSToClientInvitationSend& operator=(const WSToClientInvitationSend& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientInvitationSend& default_instance();

  void Swap(WSToClientInvitationSend* other);

  // implements Message ----------------------------------------------

  WSToClientInvitationSend* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientInvitationSend& from);
  void MergeFrom(const WSToClientInvitationSend& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marryid = 1;
  inline bool has_marryid() const;
  inline void clear_marryid();
  static const int kMarryidFieldNumber = 1;
  inline ::google::protobuf::int64 marryid() const;
  inline void set_marryid(::google::protobuf::int64 value);

  // optional int32 timeid = 2;
  inline bool has_timeid() const;
  inline void clear_timeid();
  static const int kTimeidFieldNumber = 2;
  inline ::google::protobuf::int32 timeid() const;
  inline void set_timeid(::google::protobuf::int32 value);

  // optional int32 fpre = 3;
  inline bool has_fpre() const;
  inline void clear_fpre();
  static const int kFpreFieldNumber = 3;
  inline ::google::protobuf::int32 fpre() const;
  inline void set_fpre(::google::protobuf::int32 value);

  // optional int32 wpre = 4;
  inline bool has_wpre() const;
  inline void clear_wpre();
  static const int kWpreFieldNumber = 4;
  inline ::google::protobuf::int32 wpre() const;
  inline void set_wpre(::google::protobuf::int32 value);

  // optional int64 num = 5;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 5;
  inline ::google::protobuf::int64 num() const;
  inline void set_num(::google::protobuf::int64 value);

  // optional int64 instance = 6;
  inline bool has_instance() const;
  inline void clear_instance();
  static const int kInstanceFieldNumber = 6;
  inline ::google::protobuf::int64 instance() const;
  inline void set_instance(::google::protobuf::int64 value);

  // optional string fname = 7;
  inline bool has_fname() const;
  inline void clear_fname();
  static const int kFnameFieldNumber = 7;
  inline const ::std::string& fname() const;
  inline void set_fname(const ::std::string& value);
  inline void set_fname(const char* value);
  inline void set_fname(const char* value, size_t size);
  inline ::std::string* mutable_fname();
  inline ::std::string* release_fname();
  inline void set_allocated_fname(::std::string* fname);

  // optional string wname = 8;
  inline bool has_wname() const;
  inline void clear_wname();
  static const int kWnameFieldNumber = 8;
  inline const ::std::string& wname() const;
  inline void set_wname(const ::std::string& value);
  inline void set_wname(const char* value);
  inline void set_wname(const char* value, size_t size);
  inline ::std::string* mutable_wname();
  inline ::std::string* release_wname();
  inline void set_allocated_wname(::std::string* wname);

  // optional int32 ringId = 9;
  inline bool has_ringid() const;
  inline void clear_ringid();
  static const int kRingIdFieldNumber = 9;
  inline ::google::protobuf::int32 ringid() const;
  inline void set_ringid(::google::protobuf::int32 value);

  // optional int64 beginTime = 10;
  inline bool has_begintime() const;
  inline void clear_begintime();
  static const int kBeginTimeFieldNumber = 10;
  inline ::google::protobuf::int64 begintime() const;
  inline void set_begintime(::google::protobuf::int64 value);

  // optional int64 endTime = 11;
  inline bool has_endtime() const;
  inline void clear_endtime();
  static const int kEndTimeFieldNumber = 11;
  inline ::google::protobuf::int64 endtime() const;
  inline void set_endtime(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.WSToClientInvitationSend)
 private:
  inline void set_has_marryid();
  inline void clear_has_marryid();
  inline void set_has_timeid();
  inline void clear_has_timeid();
  inline void set_has_fpre();
  inline void clear_has_fpre();
  inline void set_has_wpre();
  inline void clear_has_wpre();
  inline void set_has_num();
  inline void clear_has_num();
  inline void set_has_instance();
  inline void clear_has_instance();
  inline void set_has_fname();
  inline void clear_has_fname();
  inline void set_has_wname();
  inline void clear_has_wname();
  inline void set_has_ringid();
  inline void clear_has_ringid();
  inline void set_has_begintime();
  inline void clear_has_begintime();
  inline void set_has_endtime();
  inline void clear_has_endtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marryid_;
  ::google::protobuf::int32 timeid_;
  ::google::protobuf::int32 fpre_;
  ::google::protobuf::int64 num_;
  ::google::protobuf::int64 instance_;
  ::google::protobuf::int32 wpre_;
  ::google::protobuf::int32 ringid_;
  ::std::string* fname_;
  ::std::string* wname_;
  ::google::protobuf::int64 begintime_;
  ::google::protobuf::int64 endtime_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(11 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static WSToClientInvitationSend* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientMarryInstance : public ::google::protobuf::Message {
 public:
  WSToClientMarryInstance();
  virtual ~WSToClientMarryInstance();

  WSToClientMarryInstance(const WSToClientMarryInstance& from);

  inline WSToClientMarryInstance& operator=(const WSToClientMarryInstance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientMarryInstance& default_instance();

  void Swap(WSToClientMarryInstance* other);

  // implements Message ----------------------------------------------

  WSToClientMarryInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientMarryInstance& from);
  void MergeFrom(const WSToClientMarryInstance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marryid = 1;
  inline bool has_marryid() const;
  inline void clear_marryid();
  static const int kMarryidFieldNumber = 1;
  inline ::google::protobuf::int64 marryid() const;
  inline void set_marryid(::google::protobuf::int64 value);

  // optional int64 instance = 2;
  inline bool has_instance() const;
  inline void clear_instance();
  static const int kInstanceFieldNumber = 2;
  inline ::google::protobuf::int64 instance() const;
  inline void set_instance(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.WSToClientMarryInstance)
 private:
  inline void set_has_marryid();
  inline void clear_has_marryid();
  inline void set_has_instance();
  inline void clear_has_instance();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marryid_;
  ::google::protobuf::int64 instance_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static WSToClientMarryInstance* default_instance_;
};
// -------------------------------------------------------------------

class ClientReqCelebration : public ::google::protobuf::Message {
 public:
  ClientReqCelebration();
  virtual ~ClientReqCelebration();

  ClientReqCelebration(const ClientReqCelebration& from);

  inline ClientReqCelebration& operator=(const ClientReqCelebration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientReqCelebration& default_instance();

  void Swap(ClientReqCelebration* other);

  // implements Message ----------------------------------------------

  ClientReqCelebration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientReqCelebration& from);
  void MergeFrom(const ClientReqCelebration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.ClientReqCelebration)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static ClientReqCelebration* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientCelebration : public ::google::protobuf::Message {
 public:
  WSToClientCelebration();
  virtual ~WSToClientCelebration();

  WSToClientCelebration(const WSToClientCelebration& from);

  inline WSToClientCelebration& operator=(const WSToClientCelebration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientCelebration& default_instance();

  void Swap(WSToClientCelebration* other);

  // implements Message ----------------------------------------------

  WSToClientCelebration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientCelebration& from);
  void MergeFrom(const WSToClientCelebration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.WSToClientCelebration)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static WSToClientCelebration* default_instance_;
};
// -------------------------------------------------------------------

class GMToClientCelebration : public ::google::protobuf::Message {
 public:
  GMToClientCelebration();
  virtual ~GMToClientCelebration();

  GMToClientCelebration(const GMToClientCelebration& from);

  inline GMToClientCelebration& operator=(const GMToClientCelebration& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMToClientCelebration& default_instance();

  void Swap(GMToClientCelebration* other);

  // implements Message ----------------------------------------------

  GMToClientCelebration* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMToClientCelebration& from);
  void MergeFrom(const GMToClientCelebration& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.GMToClientCelebration)
 private:
  inline void set_has_type();
  inline void clear_has_type();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static GMToClientCelebration* default_instance_;
};
// -------------------------------------------------------------------

class GMToClientCeleTimes : public ::google::protobuf::Message {
 public:
  GMToClientCeleTimes();
  virtual ~GMToClientCeleTimes();

  GMToClientCeleTimes(const GMToClientCeleTimes& from);

  inline GMToClientCeleTimes& operator=(const GMToClientCeleTimes& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMToClientCeleTimes& default_instance();

  void Swap(GMToClientCeleTimes* other);

  // implements Message ----------------------------------------------

  GMToClientCeleTimes* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMToClientCeleTimes& from);
  void MergeFrom(const GMToClientCeleTimes& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 state = 1;
  inline bool has_state() const;
  inline void clear_state();
  static const int kStateFieldNumber = 1;
  inline ::google::protobuf::int32 state() const;
  inline void set_state(::google::protobuf::int32 value);

  // optional int32 reType = 2;
  inline bool has_retype() const;
  inline void clear_retype();
  static const int kReTypeFieldNumber = 2;
  inline ::google::protobuf::int32 retype() const;
  inline void set_retype(::google::protobuf::int32 value);

  // optional double cd = 3;
  inline bool has_cd() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 3;
  inline double cd() const;
  inline void set_cd(double value);

  // optional int32 firs = 4;
  inline bool has_firs() const;
  inline void clear_firs();
  static const int kFirsFieldNumber = 4;
  inline ::google::protobuf::int32 firs() const;
  inline void set_firs(::google::protobuf::int32 value);

  // optional int32 light = 5;
  inline bool has_light() const;
  inline void clear_light();
  static const int kLightFieldNumber = 5;
  inline ::google::protobuf::int32 light() const;
  inline void set_light(::google::protobuf::int32 value);

  // optional int32 wine = 6;
  inline bool has_wine() const;
  inline void clear_wine();
  static const int kWineFieldNumber = 6;
  inline ::google::protobuf::int32 wine() const;
  inline void set_wine(::google::protobuf::int32 value);

  // optional int32 star = 7;
  inline bool has_star() const;
  inline void clear_star();
  static const int kStarFieldNumber = 7;
  inline ::google::protobuf::int32 star() const;
  inline void set_star(::google::protobuf::int32 value);

  // optional double time = 8;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 8;
  inline double time() const;
  inline void set_time(double value);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.GMToClientCeleTimes)
 private:
  inline void set_has_state();
  inline void clear_has_state();
  inline void set_has_retype();
  inline void clear_has_retype();
  inline void set_has_cd();
  inline void clear_has_cd();
  inline void set_has_firs();
  inline void clear_has_firs();
  inline void set_has_light();
  inline void clear_has_light();
  inline void set_has_wine();
  inline void clear_has_wine();
  inline void set_has_star();
  inline void clear_has_star();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 state_;
  ::google::protobuf::int32 retype_;
  double cd_;
  ::google::protobuf::int32 firs_;
  ::google::protobuf::int32 light_;
  ::google::protobuf::int32 wine_;
  ::google::protobuf::int32 star_;
  double time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static GMToClientCeleTimes* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientDeleteInvite : public ::google::protobuf::Message {
 public:
  WSToClientDeleteInvite();
  virtual ~WSToClientDeleteInvite();

  WSToClientDeleteInvite(const WSToClientDeleteInvite& from);

  inline WSToClientDeleteInvite& operator=(const WSToClientDeleteInvite& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientDeleteInvite& default_instance();

  void Swap(WSToClientDeleteInvite* other);

  // implements Message ----------------------------------------------

  WSToClientDeleteInvite* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientDeleteInvite& from);
  void MergeFrom(const WSToClientDeleteInvite& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marryid = 1;
  inline bool has_marryid() const;
  inline void clear_marryid();
  static const int kMarryidFieldNumber = 1;
  inline ::google::protobuf::int64 marryid() const;
  inline void set_marryid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.WSToClientDeleteInvite)
 private:
  inline void set_has_marryid();
  inline void clear_has_marryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static WSToClientDeleteInvite* default_instance_;
};
// -------------------------------------------------------------------

class WSToClientWddingOver : public ::google::protobuf::Message {
 public:
  WSToClientWddingOver();
  virtual ~WSToClientWddingOver();

  WSToClientWddingOver(const WSToClientWddingOver& from);

  inline WSToClientWddingOver& operator=(const WSToClientWddingOver& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WSToClientWddingOver& default_instance();

  void Swap(WSToClientWddingOver* other);

  // implements Message ----------------------------------------------

  WSToClientWddingOver* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WSToClientWddingOver& from);
  void MergeFrom(const WSToClientWddingOver& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 marryid = 1;
  inline bool has_marryid() const;
  inline void clear_marryid();
  static const int kMarryidFieldNumber = 1;
  inline ::google::protobuf::int64 marryid() const;
  inline void set_marryid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:MarryMessInfo.WSToClientWddingOver)
 private:
  inline void set_has_marryid();
  inline void clear_has_marryid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 marryid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static WSToClientWddingOver* default_instance_;
};
// -------------------------------------------------------------------

class MarryInstance : public ::google::protobuf::Message {
 public:
  MarryInstance();
  virtual ~MarryInstance();

  MarryInstance(const MarryInstance& from);

  inline MarryInstance& operator=(const MarryInstance& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const MarryInstance& default_instance();

  void Swap(MarryInstance* other);

  // implements Message ----------------------------------------------

  MarryInstance* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const MarryInstance& from);
  void MergeFrom(const MarryInstance& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 retf = 1;
  inline bool has_retf() const;
  inline void clear_retf();
  static const int kRetfFieldNumber = 1;
  inline ::google::protobuf::int64 retf() const;
  inline void set_retf(::google::protobuf::int64 value);

  // optional int64 rets = 2;
  inline bool has_rets() const;
  inline void clear_rets();
  static const int kRetsFieldNumber = 2;
  inline ::google::protobuf::int64 rets() const;
  inline void set_rets(::google::protobuf::int64 value);

  // optional int64 fChaid = 3;
  inline bool has_fchaid() const;
  inline void clear_fchaid();
  static const int kFChaidFieldNumber = 3;
  inline ::google::protobuf::int64 fchaid() const;
  inline void set_fchaid(::google::protobuf::int64 value);

  // optional int64 WChaid = 4;
  inline bool has_wchaid() const;
  inline void clear_wchaid();
  static const int kWChaidFieldNumber = 4;
  inline ::google::protobuf::int64 wchaid() const;
  inline void set_wchaid(::google::protobuf::int64 value);

  // repeated int64 rett = 5;
  inline int rett_size() const;
  inline void clear_rett();
  static const int kRettFieldNumber = 5;
  inline ::google::protobuf::int64 rett(int index) const;
  inline void set_rett(int index, ::google::protobuf::int64 value);
  inline void add_rett(::google::protobuf::int64 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
      rett() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
      mutable_rett();

  // @@protoc_insertion_point(class_scope:MarryMessInfo.MarryInstance)
 private:
  inline void set_has_retf();
  inline void clear_has_retf();
  inline void set_has_rets();
  inline void clear_has_rets();
  inline void set_has_fchaid();
  inline void clear_has_fchaid();
  inline void set_has_wchaid();
  inline void clear_has_wchaid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 retf_;
  ::google::protobuf::int64 rets_;
  ::google::protobuf::int64 fchaid_;
  ::google::protobuf::int64 wchaid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int64 > rett_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(5 + 31) / 32];

  friend void  protobuf_AddDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_AssignDesc_Marry_2fMarryMessage_2eproto();
  friend void protobuf_ShutdownFile_Marry_2fMarryMessage_2eproto();

  void InitAsDefaultInstance();
  static MarryInstance* default_instance_;
};
// ===================================================================


// ===================================================================

// ClientReqPropose

// required int64 charId = 1;
inline bool ClientReqPropose::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqPropose::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqPropose::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqPropose::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 ClientReqPropose::charid() const {
  return charid_;
}
inline void ClientReqPropose::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional string declaration = 2;
inline bool ClientReqPropose::has_declaration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientReqPropose::set_has_declaration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientReqPropose::clear_has_declaration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientReqPropose::clear_declaration() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    declaration_->clear();
  }
  clear_has_declaration();
}
inline const ::std::string& ClientReqPropose::declaration() const {
  return *declaration_;
}
inline void ClientReqPropose::set_declaration(const ::std::string& value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void ClientReqPropose::set_declaration(const char* value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void ClientReqPropose::set_declaration(const char* value, size_t size) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientReqPropose::mutable_declaration() {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  return declaration_;
}
inline ::std::string* ClientReqPropose::release_declaration() {
  clear_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = declaration_;
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientReqPropose::set_allocated_declaration(::std::string* declaration) {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (declaration) {
    set_has_declaration();
    declaration_ = declaration;
  } else {
    clear_has_declaration();
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// WSToClientPropose

// required int32 ret = 1;
inline bool WSToClientPropose::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientPropose::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientPropose::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientPropose::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 WSToClientPropose::ret() const {
  return ret_;
}
inline void WSToClientPropose::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// WSToClientNoteProposed

// required int64 charId = 1;
inline bool WSToClientNoteProposed::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientNoteProposed::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientNoteProposed::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientNoteProposed::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 WSToClientNoteProposed::charid() const {
  return charid_;
}
inline void WSToClientNoteProposed::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional string declaration = 2;
inline bool WSToClientNoteProposed::has_declaration() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSToClientNoteProposed::set_has_declaration() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSToClientNoteProposed::clear_has_declaration() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSToClientNoteProposed::clear_declaration() {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    declaration_->clear();
  }
  clear_has_declaration();
}
inline const ::std::string& WSToClientNoteProposed::declaration() const {
  return *declaration_;
}
inline void WSToClientNoteProposed::set_declaration(const ::std::string& value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void WSToClientNoteProposed::set_declaration(const char* value) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(value);
}
inline void WSToClientNoteProposed::set_declaration(const char* value, size_t size) {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  declaration_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSToClientNoteProposed::mutable_declaration() {
  set_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    declaration_ = new ::std::string;
  }
  return declaration_;
}
inline ::std::string* WSToClientNoteProposed::release_declaration() {
  clear_has_declaration();
  if (declaration_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = declaration_;
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WSToClientNoteProposed::set_allocated_declaration(::std::string* declaration) {
  if (declaration_ != &::google::protobuf::internal::kEmptyString) {
    delete declaration_;
  }
  if (declaration) {
    set_has_declaration();
    declaration_ = declaration;
  } else {
    clear_has_declaration();
    declaration_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string charname = 3;
inline bool WSToClientNoteProposed::has_charname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WSToClientNoteProposed::set_has_charname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WSToClientNoteProposed::clear_has_charname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WSToClientNoteProposed::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& WSToClientNoteProposed::charname() const {
  return *charname_;
}
inline void WSToClientNoteProposed::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void WSToClientNoteProposed::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void WSToClientNoteProposed::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSToClientNoteProposed::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* WSToClientNoteProposed::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WSToClientNoteProposed::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ClientSimProposedAnswer

// required int64 charId = 1;
inline bool ClientSimProposedAnswer::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientSimProposedAnswer::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientSimProposedAnswer::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientSimProposedAnswer::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 ClientSimProposedAnswer::charid() const {
  return charid_;
}
inline void ClientSimProposedAnswer::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional bool willing = 2;
inline bool ClientSimProposedAnswer::has_willing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientSimProposedAnswer::set_has_willing() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientSimProposedAnswer::clear_has_willing() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientSimProposedAnswer::clear_willing() {
  willing_ = false;
  clear_has_willing();
}
inline bool ClientSimProposedAnswer::willing() const {
  return willing_;
}
inline void ClientSimProposedAnswer::set_willing(bool value) {
  set_has_willing();
  willing_ = value;
}

// -------------------------------------------------------------------

// WSToClientProposedAnswer

// required int32 ret = 1;
inline bool WSToClientProposedAnswer::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientProposedAnswer::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientProposedAnswer::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientProposedAnswer::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 WSToClientProposedAnswer::ret() const {
  return ret_;
}
inline void WSToClientProposedAnswer::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional bool willing = 2;
inline bool WSToClientProposedAnswer::has_willing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSToClientProposedAnswer::set_has_willing() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSToClientProposedAnswer::clear_has_willing() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSToClientProposedAnswer::clear_willing() {
  willing_ = false;
  clear_has_willing();
}
inline bool WSToClientProposedAnswer::willing() const {
  return willing_;
}
inline void WSToClientProposedAnswer::set_willing(bool value) {
  set_has_willing();
  willing_ = value;
}

// -------------------------------------------------------------------

// WSToClientProposedResult

// required int64 charId = 1;
inline bool WSToClientProposedResult::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientProposedResult::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientProposedResult::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientProposedResult::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 WSToClientProposedResult::charid() const {
  return charid_;
}
inline void WSToClientProposedResult::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional bool willing = 2;
inline bool WSToClientProposedResult::has_willing() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSToClientProposedResult::set_has_willing() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSToClientProposedResult::clear_has_willing() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSToClientProposedResult::clear_willing() {
  willing_ = false;
  clear_has_willing();
}
inline bool WSToClientProposedResult::willing() const {
  return willing_;
}
inline void WSToClientProposedResult::set_willing(bool value) {
  set_has_willing();
  willing_ = value;
}

// optional string charname = 3;
inline bool WSToClientProposedResult::has_charname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WSToClientProposedResult::set_has_charname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WSToClientProposedResult::clear_has_charname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WSToClientProposedResult::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& WSToClientProposedResult::charname() const {
  return *charname_;
}
inline void WSToClientProposedResult::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void WSToClientProposedResult::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void WSToClientProposedResult::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSToClientProposedResult::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* WSToClientProposedResult::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WSToClientProposedResult::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// WSToClientMarryInfo

// required int32 state = 1;
inline bool WSToClientMarryInfo::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientMarryInfo::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientMarryInfo::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientMarryInfo::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 WSToClientMarryInfo::state() const {
  return state_;
}
inline void WSToClientMarryInfo::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// -------------------------------------------------------------------

// ClientReqOrderWedding

// required int32 id = 1;
inline bool ClientReqOrderWedding::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqOrderWedding::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqOrderWedding::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqOrderWedding::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ClientReqOrderWedding::id() const {
  return id_;
}
inline void ClientReqOrderWedding::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 timeid = 2;
inline bool ClientReqOrderWedding::has_timeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientReqOrderWedding::set_has_timeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientReqOrderWedding::clear_has_timeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientReqOrderWedding::clear_timeid() {
  timeid_ = 0;
  clear_has_timeid();
}
inline ::google::protobuf::int32 ClientReqOrderWedding::timeid() const {
  return timeid_;
}
inline void ClientReqOrderWedding::set_timeid(::google::protobuf::int32 value) {
  set_has_timeid();
  timeid_ = value;
}

// -------------------------------------------------------------------

// WSToClientOrderWedding

// required int32 ret = 1;
inline bool WSToClientOrderWedding::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientOrderWedding::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientOrderWedding::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientOrderWedding::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 WSToClientOrderWedding::ret() const {
  return ret_;
}
inline void WSToClientOrderWedding::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional .MarryMessInfo.WSToClientInvitationSend invited = 2;
inline bool WSToClientOrderWedding::has_invited() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSToClientOrderWedding::set_has_invited() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSToClientOrderWedding::clear_has_invited() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSToClientOrderWedding::clear_invited() {
  if (invited_ != NULL) invited_->::MarryMessInfo::WSToClientInvitationSend::Clear();
  clear_has_invited();
}
inline const ::MarryMessInfo::WSToClientInvitationSend& WSToClientOrderWedding::invited() const {
  return invited_ != NULL ? *invited_ : *default_instance_->invited_;
}
inline ::MarryMessInfo::WSToClientInvitationSend* WSToClientOrderWedding::mutable_invited() {
  set_has_invited();
  if (invited_ == NULL) invited_ = new ::MarryMessInfo::WSToClientInvitationSend;
  return invited_;
}
inline ::MarryMessInfo::WSToClientInvitationSend* WSToClientOrderWedding::release_invited() {
  clear_has_invited();
  ::MarryMessInfo::WSToClientInvitationSend* temp = invited_;
  invited_ = NULL;
  return temp;
}
inline void WSToClientOrderWedding::set_allocated_invited(::MarryMessInfo::WSToClientInvitationSend* invited) {
  delete invited_;
  invited_ = invited;
  if (invited) {
    set_has_invited();
  } else {
    clear_has_invited();
  }
}

// -------------------------------------------------------------------

// WSToClientInvitationIssuedInfo

// required int32 id = 1;
inline bool WSToClientInvitationIssuedInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientInvitationIssuedInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientInvitationIssuedInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientInvitationIssuedInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 WSToClientInvitationIssuedInfo::id() const {
  return id_;
}
inline void WSToClientInvitationIssuedInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional int32 timeid = 2;
inline bool WSToClientInvitationIssuedInfo::has_timeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSToClientInvitationIssuedInfo::set_has_timeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSToClientInvitationIssuedInfo::clear_has_timeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSToClientInvitationIssuedInfo::clear_timeid() {
  timeid_ = 0;
  clear_has_timeid();
}
inline ::google::protobuf::int32 WSToClientInvitationIssuedInfo::timeid() const {
  return timeid_;
}
inline void WSToClientInvitationIssuedInfo::set_timeid(::google::protobuf::int32 value) {
  set_has_timeid();
  timeid_ = value;
}

// optional int32 num = 3;
inline bool WSToClientInvitationIssuedInfo::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WSToClientInvitationIssuedInfo::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WSToClientInvitationIssuedInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WSToClientInvitationIssuedInfo::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 WSToClientInvitationIssuedInfo::num() const {
  return num_;
}
inline void WSToClientInvitationIssuedInfo::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// repeated .MarryMessInfo.InvitationIssued invited = 4;
inline int WSToClientInvitationIssuedInfo::invited_size() const {
  return invited_.size();
}
inline void WSToClientInvitationIssuedInfo::clear_invited() {
  invited_.Clear();
}
inline const ::MarryMessInfo::InvitationIssued& WSToClientInvitationIssuedInfo::invited(int index) const {
  return invited_.Get(index);
}
inline ::MarryMessInfo::InvitationIssued* WSToClientInvitationIssuedInfo::mutable_invited(int index) {
  return invited_.Mutable(index);
}
inline ::MarryMessInfo::InvitationIssued* WSToClientInvitationIssuedInfo::add_invited() {
  return invited_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MarryMessInfo::InvitationIssued >&
WSToClientInvitationIssuedInfo::invited() const {
  return invited_;
}
inline ::google::protobuf::RepeatedPtrField< ::MarryMessInfo::InvitationIssued >*
WSToClientInvitationIssuedInfo::mutable_invited() {
  return &invited_;
}

// -------------------------------------------------------------------

// InvitationIssued

// required int64 charId = 1;
inline bool InvitationIssued::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void InvitationIssued::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void InvitationIssued::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void InvitationIssued::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 InvitationIssued::charid() const {
  return charid_;
}
inline void InvitationIssued::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 per = 2;
inline bool InvitationIssued::has_per() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void InvitationIssued::set_has_per() {
  _has_bits_[0] |= 0x00000002u;
}
inline void InvitationIssued::clear_has_per() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void InvitationIssued::clear_per() {
  per_ = 0;
  clear_has_per();
}
inline ::google::protobuf::int32 InvitationIssued::per() const {
  return per_;
}
inline void InvitationIssued::set_per(::google::protobuf::int32 value) {
  set_has_per();
  per_ = value;
}

// optional string name = 3;
inline bool InvitationIssued::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void InvitationIssued::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void InvitationIssued::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void InvitationIssued::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& InvitationIssued::name() const {
  return *name_;
}
inline void InvitationIssued::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void InvitationIssued::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void InvitationIssued::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* InvitationIssued::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* InvitationIssued::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void InvitationIssued::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// ClientReqInvitationIssued

// repeated int64 invited = 1;
inline int ClientReqInvitationIssued::invited_size() const {
  return invited_.size();
}
inline void ClientReqInvitationIssued::clear_invited() {
  invited_.Clear();
}
inline ::google::protobuf::int64 ClientReqInvitationIssued::invited(int index) const {
  return invited_.Get(index);
}
inline void ClientReqInvitationIssued::set_invited(int index, ::google::protobuf::int64 value) {
  invited_.Set(index, value);
}
inline void ClientReqInvitationIssued::add_invited(::google::protobuf::int64 value) {
  invited_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ClientReqInvitationIssued::invited() const {
  return invited_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ClientReqInvitationIssued::mutable_invited() {
  return &invited_;
}

// optional string name = 2;
inline bool ClientReqInvitationIssued::has_name() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientReqInvitationIssued::set_has_name() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientReqInvitationIssued::clear_has_name() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientReqInvitationIssued::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& ClientReqInvitationIssued::name() const {
  return *name_;
}
inline void ClientReqInvitationIssued::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClientReqInvitationIssued::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void ClientReqInvitationIssued::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* ClientReqInvitationIssued::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* ClientReqInvitationIssued::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void ClientReqInvitationIssued::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// WSToClientInvitationIssued

// required int32 ret = 1;
inline bool WSToClientInvitationIssued::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientInvitationIssued::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientInvitationIssued::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientInvitationIssued::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 WSToClientInvitationIssued::ret() const {
  return ret_;
}
inline void WSToClientInvitationIssued::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated .MarryMessInfo.InvitationIssued invited = 2;
inline int WSToClientInvitationIssued::invited_size() const {
  return invited_.size();
}
inline void WSToClientInvitationIssued::clear_invited() {
  invited_.Clear();
}
inline const ::MarryMessInfo::InvitationIssued& WSToClientInvitationIssued::invited(int index) const {
  return invited_.Get(index);
}
inline ::MarryMessInfo::InvitationIssued* WSToClientInvitationIssued::mutable_invited(int index) {
  return invited_.Mutable(index);
}
inline ::MarryMessInfo::InvitationIssued* WSToClientInvitationIssued::add_invited() {
  return invited_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::MarryMessInfo::InvitationIssued >&
WSToClientInvitationIssued::invited() const {
  return invited_;
}
inline ::google::protobuf::RepeatedPtrField< ::MarryMessInfo::InvitationIssued >*
WSToClientInvitationIssued::mutable_invited() {
  return &invited_;
}

// -------------------------------------------------------------------

// ClientReqDeleteInvitation

// repeated int64 invited = 1;
inline int ClientReqDeleteInvitation::invited_size() const {
  return invited_.size();
}
inline void ClientReqDeleteInvitation::clear_invited() {
  invited_.Clear();
}
inline ::google::protobuf::int64 ClientReqDeleteInvitation::invited(int index) const {
  return invited_.Get(index);
}
inline void ClientReqDeleteInvitation::set_invited(int index, ::google::protobuf::int64 value) {
  invited_.Set(index, value);
}
inline void ClientReqDeleteInvitation::add_invited(::google::protobuf::int64 value) {
  invited_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
ClientReqDeleteInvitation::invited() const {
  return invited_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
ClientReqDeleteInvitation::mutable_invited() {
  return &invited_;
}

// -------------------------------------------------------------------

// WSToClientDeleteInvitation

// required int32 ret = 1;
inline bool WSToClientDeleteInvitation::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientDeleteInvitation::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientDeleteInvitation::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientDeleteInvitation::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 WSToClientDeleteInvitation::ret() const {
  return ret_;
}
inline void WSToClientDeleteInvitation::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated int64 invited = 2;
inline int WSToClientDeleteInvitation::invited_size() const {
  return invited_.size();
}
inline void WSToClientDeleteInvitation::clear_invited() {
  invited_.Clear();
}
inline ::google::protobuf::int64 WSToClientDeleteInvitation::invited(int index) const {
  return invited_.Get(index);
}
inline void WSToClientDeleteInvitation::set_invited(int index, ::google::protobuf::int64 value) {
  invited_.Set(index, value);
}
inline void WSToClientDeleteInvitation::add_invited(::google::protobuf::int64 value) {
  invited_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
WSToClientDeleteInvitation::invited() const {
  return invited_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
WSToClientDeleteInvitation::mutable_invited() {
  return &invited_;
}

// -------------------------------------------------------------------

// WSToClientInvitationSend

// required int64 marryid = 1;
inline bool WSToClientInvitationSend::has_marryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientInvitationSend::set_has_marryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientInvitationSend::clear_has_marryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientInvitationSend::clear_marryid() {
  marryid_ = GOOGLE_LONGLONG(0);
  clear_has_marryid();
}
inline ::google::protobuf::int64 WSToClientInvitationSend::marryid() const {
  return marryid_;
}
inline void WSToClientInvitationSend::set_marryid(::google::protobuf::int64 value) {
  set_has_marryid();
  marryid_ = value;
}

// optional int32 timeid = 2;
inline bool WSToClientInvitationSend::has_timeid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSToClientInvitationSend::set_has_timeid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSToClientInvitationSend::clear_has_timeid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSToClientInvitationSend::clear_timeid() {
  timeid_ = 0;
  clear_has_timeid();
}
inline ::google::protobuf::int32 WSToClientInvitationSend::timeid() const {
  return timeid_;
}
inline void WSToClientInvitationSend::set_timeid(::google::protobuf::int32 value) {
  set_has_timeid();
  timeid_ = value;
}

// optional int32 fpre = 3;
inline bool WSToClientInvitationSend::has_fpre() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WSToClientInvitationSend::set_has_fpre() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WSToClientInvitationSend::clear_has_fpre() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WSToClientInvitationSend::clear_fpre() {
  fpre_ = 0;
  clear_has_fpre();
}
inline ::google::protobuf::int32 WSToClientInvitationSend::fpre() const {
  return fpre_;
}
inline void WSToClientInvitationSend::set_fpre(::google::protobuf::int32 value) {
  set_has_fpre();
  fpre_ = value;
}

// optional int32 wpre = 4;
inline bool WSToClientInvitationSend::has_wpre() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WSToClientInvitationSend::set_has_wpre() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WSToClientInvitationSend::clear_has_wpre() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WSToClientInvitationSend::clear_wpre() {
  wpre_ = 0;
  clear_has_wpre();
}
inline ::google::protobuf::int32 WSToClientInvitationSend::wpre() const {
  return wpre_;
}
inline void WSToClientInvitationSend::set_wpre(::google::protobuf::int32 value) {
  set_has_wpre();
  wpre_ = value;
}

// optional int64 num = 5;
inline bool WSToClientInvitationSend::has_num() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WSToClientInvitationSend::set_has_num() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WSToClientInvitationSend::clear_has_num() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WSToClientInvitationSend::clear_num() {
  num_ = GOOGLE_LONGLONG(0);
  clear_has_num();
}
inline ::google::protobuf::int64 WSToClientInvitationSend::num() const {
  return num_;
}
inline void WSToClientInvitationSend::set_num(::google::protobuf::int64 value) {
  set_has_num();
  num_ = value;
}

// optional int64 instance = 6;
inline bool WSToClientInvitationSend::has_instance() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WSToClientInvitationSend::set_has_instance() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WSToClientInvitationSend::clear_has_instance() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WSToClientInvitationSend::clear_instance() {
  instance_ = GOOGLE_LONGLONG(0);
  clear_has_instance();
}
inline ::google::protobuf::int64 WSToClientInvitationSend::instance() const {
  return instance_;
}
inline void WSToClientInvitationSend::set_instance(::google::protobuf::int64 value) {
  set_has_instance();
  instance_ = value;
}

// optional string fname = 7;
inline bool WSToClientInvitationSend::has_fname() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WSToClientInvitationSend::set_has_fname() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WSToClientInvitationSend::clear_has_fname() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WSToClientInvitationSend::clear_fname() {
  if (fname_ != &::google::protobuf::internal::kEmptyString) {
    fname_->clear();
  }
  clear_has_fname();
}
inline const ::std::string& WSToClientInvitationSend::fname() const {
  return *fname_;
}
inline void WSToClientInvitationSend::set_fname(const ::std::string& value) {
  set_has_fname();
  if (fname_ == &::google::protobuf::internal::kEmptyString) {
    fname_ = new ::std::string;
  }
  fname_->assign(value);
}
inline void WSToClientInvitationSend::set_fname(const char* value) {
  set_has_fname();
  if (fname_ == &::google::protobuf::internal::kEmptyString) {
    fname_ = new ::std::string;
  }
  fname_->assign(value);
}
inline void WSToClientInvitationSend::set_fname(const char* value, size_t size) {
  set_has_fname();
  if (fname_ == &::google::protobuf::internal::kEmptyString) {
    fname_ = new ::std::string;
  }
  fname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSToClientInvitationSend::mutable_fname() {
  set_has_fname();
  if (fname_ == &::google::protobuf::internal::kEmptyString) {
    fname_ = new ::std::string;
  }
  return fname_;
}
inline ::std::string* WSToClientInvitationSend::release_fname() {
  clear_has_fname();
  if (fname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = fname_;
    fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WSToClientInvitationSend::set_allocated_fname(::std::string* fname) {
  if (fname_ != &::google::protobuf::internal::kEmptyString) {
    delete fname_;
  }
  if (fname) {
    set_has_fname();
    fname_ = fname;
  } else {
    clear_has_fname();
    fname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string wname = 8;
inline bool WSToClientInvitationSend::has_wname() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WSToClientInvitationSend::set_has_wname() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WSToClientInvitationSend::clear_has_wname() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WSToClientInvitationSend::clear_wname() {
  if (wname_ != &::google::protobuf::internal::kEmptyString) {
    wname_->clear();
  }
  clear_has_wname();
}
inline const ::std::string& WSToClientInvitationSend::wname() const {
  return *wname_;
}
inline void WSToClientInvitationSend::set_wname(const ::std::string& value) {
  set_has_wname();
  if (wname_ == &::google::protobuf::internal::kEmptyString) {
    wname_ = new ::std::string;
  }
  wname_->assign(value);
}
inline void WSToClientInvitationSend::set_wname(const char* value) {
  set_has_wname();
  if (wname_ == &::google::protobuf::internal::kEmptyString) {
    wname_ = new ::std::string;
  }
  wname_->assign(value);
}
inline void WSToClientInvitationSend::set_wname(const char* value, size_t size) {
  set_has_wname();
  if (wname_ == &::google::protobuf::internal::kEmptyString) {
    wname_ = new ::std::string;
  }
  wname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WSToClientInvitationSend::mutable_wname() {
  set_has_wname();
  if (wname_ == &::google::protobuf::internal::kEmptyString) {
    wname_ = new ::std::string;
  }
  return wname_;
}
inline ::std::string* WSToClientInvitationSend::release_wname() {
  clear_has_wname();
  if (wname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = wname_;
    wname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WSToClientInvitationSend::set_allocated_wname(::std::string* wname) {
  if (wname_ != &::google::protobuf::internal::kEmptyString) {
    delete wname_;
  }
  if (wname) {
    set_has_wname();
    wname_ = wname;
  } else {
    clear_has_wname();
    wname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 ringId = 9;
inline bool WSToClientInvitationSend::has_ringid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WSToClientInvitationSend::set_has_ringid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WSToClientInvitationSend::clear_has_ringid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WSToClientInvitationSend::clear_ringid() {
  ringid_ = 0;
  clear_has_ringid();
}
inline ::google::protobuf::int32 WSToClientInvitationSend::ringid() const {
  return ringid_;
}
inline void WSToClientInvitationSend::set_ringid(::google::protobuf::int32 value) {
  set_has_ringid();
  ringid_ = value;
}

// optional int64 beginTime = 10;
inline bool WSToClientInvitationSend::has_begintime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WSToClientInvitationSend::set_has_begintime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WSToClientInvitationSend::clear_has_begintime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WSToClientInvitationSend::clear_begintime() {
  begintime_ = GOOGLE_LONGLONG(0);
  clear_has_begintime();
}
inline ::google::protobuf::int64 WSToClientInvitationSend::begintime() const {
  return begintime_;
}
inline void WSToClientInvitationSend::set_begintime(::google::protobuf::int64 value) {
  set_has_begintime();
  begintime_ = value;
}

// optional int64 endTime = 11;
inline bool WSToClientInvitationSend::has_endtime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WSToClientInvitationSend::set_has_endtime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WSToClientInvitationSend::clear_has_endtime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WSToClientInvitationSend::clear_endtime() {
  endtime_ = GOOGLE_LONGLONG(0);
  clear_has_endtime();
}
inline ::google::protobuf::int64 WSToClientInvitationSend::endtime() const {
  return endtime_;
}
inline void WSToClientInvitationSend::set_endtime(::google::protobuf::int64 value) {
  set_has_endtime();
  endtime_ = value;
}

// -------------------------------------------------------------------

// WSToClientMarryInstance

// required int64 marryid = 1;
inline bool WSToClientMarryInstance::has_marryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientMarryInstance::set_has_marryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientMarryInstance::clear_has_marryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientMarryInstance::clear_marryid() {
  marryid_ = GOOGLE_LONGLONG(0);
  clear_has_marryid();
}
inline ::google::protobuf::int64 WSToClientMarryInstance::marryid() const {
  return marryid_;
}
inline void WSToClientMarryInstance::set_marryid(::google::protobuf::int64 value) {
  set_has_marryid();
  marryid_ = value;
}

// optional int64 instance = 2;
inline bool WSToClientMarryInstance::has_instance() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WSToClientMarryInstance::set_has_instance() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WSToClientMarryInstance::clear_has_instance() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WSToClientMarryInstance::clear_instance() {
  instance_ = GOOGLE_LONGLONG(0);
  clear_has_instance();
}
inline ::google::protobuf::int64 WSToClientMarryInstance::instance() const {
  return instance_;
}
inline void WSToClientMarryInstance::set_instance(::google::protobuf::int64 value) {
  set_has_instance();
  instance_ = value;
}

// -------------------------------------------------------------------

// ClientReqCelebration

// required int32 type = 1;
inline bool ClientReqCelebration::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientReqCelebration::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientReqCelebration::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientReqCelebration::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ClientReqCelebration::type() const {
  return type_;
}
inline void ClientReqCelebration::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// WSToClientCelebration

// required int32 ret = 1;
inline bool WSToClientCelebration::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientCelebration::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientCelebration::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientCelebration::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 WSToClientCelebration::ret() const {
  return ret_;
}
inline void WSToClientCelebration::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// -------------------------------------------------------------------

// GMToClientCelebration

// required int32 type = 1;
inline bool GMToClientCelebration::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMToClientCelebration::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMToClientCelebration::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMToClientCelebration::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 GMToClientCelebration::type() const {
  return type_;
}
inline void GMToClientCelebration::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// -------------------------------------------------------------------

// GMToClientCeleTimes

// required int32 state = 1;
inline bool GMToClientCeleTimes::has_state() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMToClientCeleTimes::set_has_state() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMToClientCeleTimes::clear_has_state() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMToClientCeleTimes::clear_state() {
  state_ = 0;
  clear_has_state();
}
inline ::google::protobuf::int32 GMToClientCeleTimes::state() const {
  return state_;
}
inline void GMToClientCeleTimes::set_state(::google::protobuf::int32 value) {
  set_has_state();
  state_ = value;
}

// optional int32 reType = 2;
inline bool GMToClientCeleTimes::has_retype() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMToClientCeleTimes::set_has_retype() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMToClientCeleTimes::clear_has_retype() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMToClientCeleTimes::clear_retype() {
  retype_ = 0;
  clear_has_retype();
}
inline ::google::protobuf::int32 GMToClientCeleTimes::retype() const {
  return retype_;
}
inline void GMToClientCeleTimes::set_retype(::google::protobuf::int32 value) {
  set_has_retype();
  retype_ = value;
}

// optional double cd = 3;
inline bool GMToClientCeleTimes::has_cd() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMToClientCeleTimes::set_has_cd() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMToClientCeleTimes::clear_has_cd() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMToClientCeleTimes::clear_cd() {
  cd_ = 0;
  clear_has_cd();
}
inline double GMToClientCeleTimes::cd() const {
  return cd_;
}
inline void GMToClientCeleTimes::set_cd(double value) {
  set_has_cd();
  cd_ = value;
}

// optional int32 firs = 4;
inline bool GMToClientCeleTimes::has_firs() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMToClientCeleTimes::set_has_firs() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMToClientCeleTimes::clear_has_firs() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMToClientCeleTimes::clear_firs() {
  firs_ = 0;
  clear_has_firs();
}
inline ::google::protobuf::int32 GMToClientCeleTimes::firs() const {
  return firs_;
}
inline void GMToClientCeleTimes::set_firs(::google::protobuf::int32 value) {
  set_has_firs();
  firs_ = value;
}

// optional int32 light = 5;
inline bool GMToClientCeleTimes::has_light() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GMToClientCeleTimes::set_has_light() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GMToClientCeleTimes::clear_has_light() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GMToClientCeleTimes::clear_light() {
  light_ = 0;
  clear_has_light();
}
inline ::google::protobuf::int32 GMToClientCeleTimes::light() const {
  return light_;
}
inline void GMToClientCeleTimes::set_light(::google::protobuf::int32 value) {
  set_has_light();
  light_ = value;
}

// optional int32 wine = 6;
inline bool GMToClientCeleTimes::has_wine() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GMToClientCeleTimes::set_has_wine() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GMToClientCeleTimes::clear_has_wine() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GMToClientCeleTimes::clear_wine() {
  wine_ = 0;
  clear_has_wine();
}
inline ::google::protobuf::int32 GMToClientCeleTimes::wine() const {
  return wine_;
}
inline void GMToClientCeleTimes::set_wine(::google::protobuf::int32 value) {
  set_has_wine();
  wine_ = value;
}

// optional int32 star = 7;
inline bool GMToClientCeleTimes::has_star() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GMToClientCeleTimes::set_has_star() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GMToClientCeleTimes::clear_has_star() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GMToClientCeleTimes::clear_star() {
  star_ = 0;
  clear_has_star();
}
inline ::google::protobuf::int32 GMToClientCeleTimes::star() const {
  return star_;
}
inline void GMToClientCeleTimes::set_star(::google::protobuf::int32 value) {
  set_has_star();
  star_ = value;
}

// optional double time = 8;
inline bool GMToClientCeleTimes::has_time() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void GMToClientCeleTimes::set_has_time() {
  _has_bits_[0] |= 0x00000080u;
}
inline void GMToClientCeleTimes::clear_has_time() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void GMToClientCeleTimes::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline double GMToClientCeleTimes::time() const {
  return time_;
}
inline void GMToClientCeleTimes::set_time(double value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// WSToClientDeleteInvite

// required int64 marryid = 1;
inline bool WSToClientDeleteInvite::has_marryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientDeleteInvite::set_has_marryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientDeleteInvite::clear_has_marryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientDeleteInvite::clear_marryid() {
  marryid_ = GOOGLE_LONGLONG(0);
  clear_has_marryid();
}
inline ::google::protobuf::int64 WSToClientDeleteInvite::marryid() const {
  return marryid_;
}
inline void WSToClientDeleteInvite::set_marryid(::google::protobuf::int64 value) {
  set_has_marryid();
  marryid_ = value;
}

// -------------------------------------------------------------------

// WSToClientWddingOver

// required int64 marryid = 1;
inline bool WSToClientWddingOver::has_marryid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WSToClientWddingOver::set_has_marryid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WSToClientWddingOver::clear_has_marryid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WSToClientWddingOver::clear_marryid() {
  marryid_ = GOOGLE_LONGLONG(0);
  clear_has_marryid();
}
inline ::google::protobuf::int64 WSToClientWddingOver::marryid() const {
  return marryid_;
}
inline void WSToClientWddingOver::set_marryid(::google::protobuf::int64 value) {
  set_has_marryid();
  marryid_ = value;
}

// -------------------------------------------------------------------

// MarryInstance

// required int64 retf = 1;
inline bool MarryInstance::has_retf() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void MarryInstance::set_has_retf() {
  _has_bits_[0] |= 0x00000001u;
}
inline void MarryInstance::clear_has_retf() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void MarryInstance::clear_retf() {
  retf_ = GOOGLE_LONGLONG(0);
  clear_has_retf();
}
inline ::google::protobuf::int64 MarryInstance::retf() const {
  return retf_;
}
inline void MarryInstance::set_retf(::google::protobuf::int64 value) {
  set_has_retf();
  retf_ = value;
}

// optional int64 rets = 2;
inline bool MarryInstance::has_rets() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void MarryInstance::set_has_rets() {
  _has_bits_[0] |= 0x00000002u;
}
inline void MarryInstance::clear_has_rets() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void MarryInstance::clear_rets() {
  rets_ = GOOGLE_LONGLONG(0);
  clear_has_rets();
}
inline ::google::protobuf::int64 MarryInstance::rets() const {
  return rets_;
}
inline void MarryInstance::set_rets(::google::protobuf::int64 value) {
  set_has_rets();
  rets_ = value;
}

// optional int64 fChaid = 3;
inline bool MarryInstance::has_fchaid() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void MarryInstance::set_has_fchaid() {
  _has_bits_[0] |= 0x00000004u;
}
inline void MarryInstance::clear_has_fchaid() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void MarryInstance::clear_fchaid() {
  fchaid_ = GOOGLE_LONGLONG(0);
  clear_has_fchaid();
}
inline ::google::protobuf::int64 MarryInstance::fchaid() const {
  return fchaid_;
}
inline void MarryInstance::set_fchaid(::google::protobuf::int64 value) {
  set_has_fchaid();
  fchaid_ = value;
}

// optional int64 WChaid = 4;
inline bool MarryInstance::has_wchaid() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void MarryInstance::set_has_wchaid() {
  _has_bits_[0] |= 0x00000008u;
}
inline void MarryInstance::clear_has_wchaid() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void MarryInstance::clear_wchaid() {
  wchaid_ = GOOGLE_LONGLONG(0);
  clear_has_wchaid();
}
inline ::google::protobuf::int64 MarryInstance::wchaid() const {
  return wchaid_;
}
inline void MarryInstance::set_wchaid(::google::protobuf::int64 value) {
  set_has_wchaid();
  wchaid_ = value;
}

// repeated int64 rett = 5;
inline int MarryInstance::rett_size() const {
  return rett_.size();
}
inline void MarryInstance::clear_rett() {
  rett_.Clear();
}
inline ::google::protobuf::int64 MarryInstance::rett(int index) const {
  return rett_.Get(index);
}
inline void MarryInstance::set_rett(int index, ::google::protobuf::int64 value) {
  rett_.Set(index, value);
}
inline void MarryInstance::add_rett(::google::protobuf::int64 value) {
  rett_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int64 >&
MarryInstance::rett() const {
  return rett_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int64 >*
MarryInstance::mutable_rett() {
  return &rett_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace MarryMessInfo

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Marry_2fMarryMessage_2eproto__INCLUDED
