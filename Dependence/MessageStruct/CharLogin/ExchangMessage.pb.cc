// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/ExchangMessage.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "CharLogin/ExchangMessage.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace Exchang {

namespace {

const ::google::protobuf::Descriptor* ClientReqExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTAckSrcExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTAckSrcExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTAckReqExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTAckReqExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* TraderReqRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TraderReqRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTAckOtherClientReqExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTAckOtherClientReqExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTAckToApplicant_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTAckToApplicant_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqCancelExchang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqCancelExchang_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTAckCancelExchang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTAckCancelExchang_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqLock_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTAckSrcReqLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTAckSrcReqLock_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTAckReqLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTAckReqLock_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqVerifyExchang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqVerifyExchang_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTAckExchangComplete_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTAckExchangComplete_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTtoGMReqExchange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTtoGMReqExchange_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTtoGMTraderReqRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTtoGMTraderReqRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTtoGMCancelExchang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTtoGMCancelExchang_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTtoGMReqReqLock_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTtoGMReqReqLock_reflection_ = NULL;
const ::google::protobuf::Descriptor* GMToGTLockToOther_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GMToGTLockToOther_reflection_ = NULL;
const ::google::protobuf::Descriptor* GTtoGMVerifyExchang_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GTtoGMVerifyExchang_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_CharLogin_2fExchangMessage_2eproto() {
  protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "CharLogin/ExchangMessage.proto");
  GOOGLE_CHECK(file != NULL);
  ClientReqExchange_descriptor_ = file->message_type(0);
  static const int ClientReqExchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqExchange, dwtraderid_),
  };
  ClientReqExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqExchange_descriptor_,
      ClientReqExchange::default_instance_,
      ClientReqExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqExchange));
  GTAckSrcExchange_descriptor_ = file->message_type(1);
  static const int GTAckSrcExchange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckSrcExchange, dwtraderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckSrcExchange, dwerrorcode_),
  };
  GTAckSrcExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTAckSrcExchange_descriptor_,
      GTAckSrcExchange::default_instance_,
      GTAckSrcExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckSrcExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckSrcExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTAckSrcExchange));
  GTAckReqExchange_descriptor_ = file->message_type(2);
  static const int GTAckReqExchange_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckReqExchange, dwcharid_),
  };
  GTAckReqExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTAckReqExchange_descriptor_,
      GTAckReqExchange::default_instance_,
      GTAckReqExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckReqExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckReqExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTAckReqExchange));
  TraderReqRet_descriptor_ = file->message_type(3);
  static const int TraderReqRet_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraderReqRet, dwsrcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraderReqRet, status_),
  };
  TraderReqRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TraderReqRet_descriptor_,
      TraderReqRet::default_instance_,
      TraderReqRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraderReqRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TraderReqRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TraderReqRet));
  GTAckOtherClientReqExchange_descriptor_ = file->message_type(4);
  static const int GTAckOtherClientReqExchange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckOtherClientReqExchange, dwcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckOtherClientReqExchange, dwerrorcode_),
  };
  GTAckOtherClientReqExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTAckOtherClientReqExchange_descriptor_,
      GTAckOtherClientReqExchange::default_instance_,
      GTAckOtherClientReqExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckOtherClientReqExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckOtherClientReqExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTAckOtherClientReqExchange));
  GTAckToApplicant_descriptor_ = file->message_type(5);
  static const int GTAckToApplicant_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToApplicant, dwcharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToApplicant, dwerrorcode_),
  };
  GTAckToApplicant_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTAckToApplicant_descriptor_,
      GTAckToApplicant::default_instance_,
      GTAckToApplicant_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToApplicant, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckToApplicant, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTAckToApplicant));
  ClientReqCancelExchang_descriptor_ = file->message_type(6);
  static const int ClientReqCancelExchang_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCancelExchang, dwplayerid_),
  };
  ClientReqCancelExchang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqCancelExchang_descriptor_,
      ClientReqCancelExchang::default_instance_,
      ClientReqCancelExchang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCancelExchang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCancelExchang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqCancelExchang));
  GTAckCancelExchang_descriptor_ = file->message_type(7);
  static const int GTAckCancelExchang_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckCancelExchang, dwplayerid_),
  };
  GTAckCancelExchang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTAckCancelExchang_descriptor_,
      GTAckCancelExchang::default_instance_,
      GTAckCancelExchang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckCancelExchang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckCancelExchang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTAckCancelExchang));
  ClientReqLock_descriptor_ = file->message_type(8);
  static const int ClientReqLock_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqLock, dwplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqLock, dwpacketpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqLock, dwmoney_),
  };
  ClientReqLock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqLock_descriptor_,
      ClientReqLock::default_instance_,
      ClientReqLock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqLock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqLock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqLock));
  GTAckSrcReqLock_descriptor_ = file->message_type(9);
  static const int GTAckSrcReqLock_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckSrcReqLock, dwerrorcode_),
  };
  GTAckSrcReqLock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTAckSrcReqLock_descriptor_,
      GTAckSrcReqLock::default_instance_,
      GTAckSrcReqLock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckSrcReqLock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckSrcReqLock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTAckSrcReqLock));
  GTAckReqLock_descriptor_ = file->message_type(10);
  static const int GTAckReqLock_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckReqLock, dwtraderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckReqLock, proplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckReqLock, dwmoney_),
  };
  GTAckReqLock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTAckReqLock_descriptor_,
      GTAckReqLock::default_instance_,
      GTAckReqLock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckReqLock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckReqLock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTAckReqLock));
  ClientReqVerifyExchang_descriptor_ = file->message_type(11);
  static const int ClientReqVerifyExchang_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqVerifyExchang, dwplayerid_),
  };
  ClientReqVerifyExchang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqVerifyExchang_descriptor_,
      ClientReqVerifyExchang::default_instance_,
      ClientReqVerifyExchang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqVerifyExchang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqVerifyExchang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqVerifyExchang));
  GTAckExchangComplete_descriptor_ = file->message_type(12);
  static const int GTAckExchangComplete_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckExchangComplete, dwfailedplayerkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckExchangComplete, dwerrorcode_),
  };
  GTAckExchangComplete_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTAckExchangComplete_descriptor_,
      GTAckExchangComplete::default_instance_,
      GTAckExchangComplete_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckExchangComplete, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTAckExchangComplete, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTAckExchangComplete));
  GTtoGMReqExchange_descriptor_ = file->message_type(13);
  static const int GTtoGMReqExchange_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqExchange, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqExchange, dwtraderid_),
  };
  GTtoGMReqExchange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTtoGMReqExchange_descriptor_,
      GTtoGMReqExchange::default_instance_,
      GTtoGMReqExchange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqExchange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqExchange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTtoGMReqExchange));
  GTtoGMTraderReqRet_descriptor_ = file->message_type(14);
  static const int GTtoGMTraderReqRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMTraderReqRet, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMTraderReqRet, dwsrcid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMTraderReqRet, status_),
  };
  GTtoGMTraderReqRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTtoGMTraderReqRet_descriptor_,
      GTtoGMTraderReqRet::default_instance_,
      GTtoGMTraderReqRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMTraderReqRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMTraderReqRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTtoGMTraderReqRet));
  GTtoGMCancelExchang_descriptor_ = file->message_type(15);
  static const int GTtoGMCancelExchang_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMCancelExchang, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMCancelExchang, dwplayerid_),
  };
  GTtoGMCancelExchang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTtoGMCancelExchang_descriptor_,
      GTtoGMCancelExchang::default_instance_,
      GTtoGMCancelExchang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMCancelExchang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMCancelExchang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTtoGMCancelExchang));
  GTtoGMReqReqLock_descriptor_ = file->message_type(16);
  static const int GTtoGMReqReqLock_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqReqLock, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqReqLock, dwplayerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqReqLock, dwpacketpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqReqLock, dwmoney_),
  };
  GTtoGMReqReqLock_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTtoGMReqReqLock_descriptor_,
      GTtoGMReqReqLock::default_instance_,
      GTtoGMReqReqLock_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqReqLock, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMReqReqLock, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTtoGMReqReqLock));
  GMToGTLockToOther_descriptor_ = file->message_type(17);
  static const int GMToGTLockToOther_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToGTLockToOther, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToGTLockToOther, dwtraderid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToGTLockToOther, proplist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToGTLockToOther, dwmoney_),
  };
  GMToGTLockToOther_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GMToGTLockToOther_descriptor_,
      GMToGTLockToOther::default_instance_,
      GMToGTLockToOther_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToGTLockToOther, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GMToGTLockToOther, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GMToGTLockToOther));
  GTtoGMVerifyExchang_descriptor_ = file->message_type(18);
  static const int GTtoGMVerifyExchang_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMVerifyExchang, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMVerifyExchang, dwplayerid_),
  };
  GTtoGMVerifyExchang_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GTtoGMVerifyExchang_descriptor_,
      GTtoGMVerifyExchang::default_instance_,
      GTtoGMVerifyExchang_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMVerifyExchang, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GTtoGMVerifyExchang, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GTtoGMVerifyExchang));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_CharLogin_2fExchangMessage_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqExchange_descriptor_, &ClientReqExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTAckSrcExchange_descriptor_, &GTAckSrcExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTAckReqExchange_descriptor_, &GTAckReqExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TraderReqRet_descriptor_, &TraderReqRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTAckOtherClientReqExchange_descriptor_, &GTAckOtherClientReqExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTAckToApplicant_descriptor_, &GTAckToApplicant::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqCancelExchang_descriptor_, &ClientReqCancelExchang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTAckCancelExchang_descriptor_, &GTAckCancelExchang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqLock_descriptor_, &ClientReqLock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTAckSrcReqLock_descriptor_, &GTAckSrcReqLock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTAckReqLock_descriptor_, &GTAckReqLock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqVerifyExchang_descriptor_, &ClientReqVerifyExchang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTAckExchangComplete_descriptor_, &GTAckExchangComplete::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTtoGMReqExchange_descriptor_, &GTtoGMReqExchange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTtoGMTraderReqRet_descriptor_, &GTtoGMTraderReqRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTtoGMCancelExchang_descriptor_, &GTtoGMCancelExchang::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTtoGMReqReqLock_descriptor_, &GTtoGMReqReqLock::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GMToGTLockToOther_descriptor_, &GMToGTLockToOther::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GTtoGMVerifyExchang_descriptor_, &GTtoGMVerifyExchang::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_CharLogin_2fExchangMessage_2eproto() {
  delete ClientReqExchange::default_instance_;
  delete ClientReqExchange_reflection_;
  delete GTAckSrcExchange::default_instance_;
  delete GTAckSrcExchange_reflection_;
  delete GTAckReqExchange::default_instance_;
  delete GTAckReqExchange_reflection_;
  delete TraderReqRet::default_instance_;
  delete TraderReqRet_reflection_;
  delete GTAckOtherClientReqExchange::default_instance_;
  delete GTAckOtherClientReqExchange_reflection_;
  delete GTAckToApplicant::default_instance_;
  delete GTAckToApplicant_reflection_;
  delete ClientReqCancelExchang::default_instance_;
  delete ClientReqCancelExchang_reflection_;
  delete GTAckCancelExchang::default_instance_;
  delete GTAckCancelExchang_reflection_;
  delete ClientReqLock::default_instance_;
  delete ClientReqLock_reflection_;
  delete GTAckSrcReqLock::default_instance_;
  delete GTAckSrcReqLock_reflection_;
  delete GTAckReqLock::default_instance_;
  delete GTAckReqLock_reflection_;
  delete ClientReqVerifyExchang::default_instance_;
  delete ClientReqVerifyExchang_reflection_;
  delete GTAckExchangComplete::default_instance_;
  delete GTAckExchangComplete_reflection_;
  delete GTtoGMReqExchange::default_instance_;
  delete GTtoGMReqExchange_reflection_;
  delete GTtoGMTraderReqRet::default_instance_;
  delete GTtoGMTraderReqRet_reflection_;
  delete GTtoGMCancelExchang::default_instance_;
  delete GTtoGMCancelExchang_reflection_;
  delete GTtoGMReqReqLock::default_instance_;
  delete GTtoGMReqReqLock_reflection_;
  delete GMToGTLockToOther::default_instance_;
  delete GMToGTLockToOther_reflection_;
  delete GTtoGMVerifyExchang::default_instance_;
  delete GTtoGMVerifyExchang_reflection_;
}

void protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::CharLogin::protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\036CharLogin/ExchangMessage.proto\022\007Exchan"
    "g\032\034CharLogin/CharBaseInfo.proto\"\'\n\021Clien"
    "tReqExchange\022\022\n\ndwTraderID\030\001 \002(\005\";\n\020GTAc"
    "kSrcExchange\022\022\n\ndwTraderID\030\001 \002(\005\022\023\n\013dwEr"
    "rorCode\030\002 \002(\005\"$\n\020GTAckReqExchange\022\020\n\010dwC"
    "harID\030\001 \002(\003\"/\n\014TraderReqRet\022\017\n\007dwSrcID\030\001"
    " \002(\005\022\016\n\006status\030\002 \002(\005\"D\n\033GTAckOtherClient"
    "ReqExchange\022\020\n\010dwCharID\030\001 \002(\005\022\023\n\013dwError"
    "Code\030\002 \002(\005\"9\n\020GTAckToApplicant\022\020\n\010dwChar"
    "ID\030\001 \002(\005\022\023\n\013dwErrorCode\030\002 \002(\005\",\n\026ClientR"
    "eqCancelExchang\022\022\n\ndwPlayerID\030\001 \002(\005\"(\n\022G"
    "TAckCancelExchang\022\022\n\ndwPlayerID\030\001 \002(\005\"I\n"
    "\rClientReqLock\022\022\n\ndwPlayerID\030\001 \002(\005\022\023\n\013dw"
    "PacketPos\030\002 \003(\005\022\017\n\007dwMoney\030\003 \002(\005\"&\n\017GTAc"
    "kSrcReqLock\022\023\n\013dwErrorCode\030\001 \002(\005\"`\n\014GTAc"
    "kReqLock\022\022\n\ndwTraderID\030\001 \002(\005\022+\n\010propList"
    "\030\002 \003(\0132\031.CharLogin.ClientItemInfo\022\017\n\007dwM"
    "oney\030\003 \002(\005\",\n\026ClientReqVerifyExchang\022\022\n\n"
    "dwPlayerID\030\001 \002(\005\"F\n\024GTAckExchangComplete"
    "\022\031\n\021dwFailedPlayerKey\030\001 \002(\005\022\023\n\013dwErrorCo"
    "de\030\002 \002(\005\"7\n\021GTtoGMReqExchange\022\016\n\006charid\030"
    "\001 \002(\003\022\022\n\ndwTraderID\030\002 \002(\005\"E\n\022GTtoGMTrade"
    "rReqRet\022\016\n\006charid\030\001 \002(\003\022\017\n\007dwSrcID\030\002 \002(\005"
    "\022\016\n\006status\030\003 \002(\005\"9\n\023GTtoGMCancelExchang\022"
    "\016\n\006charid\030\001 \002(\003\022\022\n\ndwPlayerID\030\002 \002(\005\"\\\n\020G"
    "TtoGMReqReqLock\022\016\n\006charid\030\001 \002(\003\022\022\n\ndwPla"
    "yerID\030\002 \002(\005\022\023\n\013dwPacketPos\030\003 \003(\005\022\017\n\007dwMo"
    "ney\030\004 \002(\005\"u\n\021GMToGTLockToOther\022\016\n\006charid"
    "\030\001 \002(\003\022\022\n\ndwTraderID\030\002 \002(\005\022+\n\010propList\030\003"
    " \003(\0132\031.CharLogin.ClientItemInfo\022\017\n\007dwMon"
    "ey\030\004 \002(\005\"9\n\023GTtoGMVerifyExchang\022\016\n\006chari"
    "d\030\001 \002(\003\022\022\n\ndwPlayerID\030\002 \002(\005", 1267);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "CharLogin/ExchangMessage.proto", &protobuf_RegisterTypes);
  ClientReqExchange::default_instance_ = new ClientReqExchange();
  GTAckSrcExchange::default_instance_ = new GTAckSrcExchange();
  GTAckReqExchange::default_instance_ = new GTAckReqExchange();
  TraderReqRet::default_instance_ = new TraderReqRet();
  GTAckOtherClientReqExchange::default_instance_ = new GTAckOtherClientReqExchange();
  GTAckToApplicant::default_instance_ = new GTAckToApplicant();
  ClientReqCancelExchang::default_instance_ = new ClientReqCancelExchang();
  GTAckCancelExchang::default_instance_ = new GTAckCancelExchang();
  ClientReqLock::default_instance_ = new ClientReqLock();
  GTAckSrcReqLock::default_instance_ = new GTAckSrcReqLock();
  GTAckReqLock::default_instance_ = new GTAckReqLock();
  ClientReqVerifyExchang::default_instance_ = new ClientReqVerifyExchang();
  GTAckExchangComplete::default_instance_ = new GTAckExchangComplete();
  GTtoGMReqExchange::default_instance_ = new GTtoGMReqExchange();
  GTtoGMTraderReqRet::default_instance_ = new GTtoGMTraderReqRet();
  GTtoGMCancelExchang::default_instance_ = new GTtoGMCancelExchang();
  GTtoGMReqReqLock::default_instance_ = new GTtoGMReqReqLock();
  GMToGTLockToOther::default_instance_ = new GMToGTLockToOther();
  GTtoGMVerifyExchang::default_instance_ = new GTtoGMVerifyExchang();
  ClientReqExchange::default_instance_->InitAsDefaultInstance();
  GTAckSrcExchange::default_instance_->InitAsDefaultInstance();
  GTAckReqExchange::default_instance_->InitAsDefaultInstance();
  TraderReqRet::default_instance_->InitAsDefaultInstance();
  GTAckOtherClientReqExchange::default_instance_->InitAsDefaultInstance();
  GTAckToApplicant::default_instance_->InitAsDefaultInstance();
  ClientReqCancelExchang::default_instance_->InitAsDefaultInstance();
  GTAckCancelExchang::default_instance_->InitAsDefaultInstance();
  ClientReqLock::default_instance_->InitAsDefaultInstance();
  GTAckSrcReqLock::default_instance_->InitAsDefaultInstance();
  GTAckReqLock::default_instance_->InitAsDefaultInstance();
  ClientReqVerifyExchang::default_instance_->InitAsDefaultInstance();
  GTAckExchangComplete::default_instance_->InitAsDefaultInstance();
  GTtoGMReqExchange::default_instance_->InitAsDefaultInstance();
  GTtoGMTraderReqRet::default_instance_->InitAsDefaultInstance();
  GTtoGMCancelExchang::default_instance_->InitAsDefaultInstance();
  GTtoGMReqReqLock::default_instance_->InitAsDefaultInstance();
  GMToGTLockToOther::default_instance_->InitAsDefaultInstance();
  GTtoGMVerifyExchang::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_CharLogin_2fExchangMessage_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_CharLogin_2fExchangMessage_2eproto {
  StaticDescriptorInitializer_CharLogin_2fExchangMessage_2eproto() {
    protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  }
} static_descriptor_initializer_CharLogin_2fExchangMessage_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientReqExchange::kDwTraderIDFieldNumber;
#endif  // !_MSC_VER

ClientReqExchange::ClientReqExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqExchange::InitAsDefaultInstance() {
}

ClientReqExchange::ClientReqExchange(const ClientReqExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqExchange::SharedCtor() {
  _cached_size_ = 0;
  dwtraderid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqExchange::~ClientReqExchange() {
  SharedDtor();
}

void ClientReqExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqExchange_descriptor_;
}

const ClientReqExchange& ClientReqExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

ClientReqExchange* ClientReqExchange::default_instance_ = NULL;

ClientReqExchange* ClientReqExchange::New() const {
  return new ClientReqExchange;
}

void ClientReqExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwtraderid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwTraderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwtraderid_)));
          set_has_dwtraderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwTraderID = 1;
  if (has_dwtraderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwtraderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwTraderID = 1;
  if (has_dwtraderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwtraderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwTraderID = 1;
    if (has_dwtraderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwtraderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqExchange::MergeFrom(const ClientReqExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwtraderid()) {
      set_dwtraderid(from.dwtraderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqExchange::CopyFrom(const ClientReqExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqExchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqExchange::Swap(ClientReqExchange* other) {
  if (other != this) {
    std::swap(dwtraderid_, other->dwtraderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqExchange_descriptor_;
  metadata.reflection = ClientReqExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTAckSrcExchange::kDwTraderIDFieldNumber;
const int GTAckSrcExchange::kDwErrorCodeFieldNumber;
#endif  // !_MSC_VER

GTAckSrcExchange::GTAckSrcExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTAckSrcExchange::InitAsDefaultInstance() {
}

GTAckSrcExchange::GTAckSrcExchange(const GTAckSrcExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTAckSrcExchange::SharedCtor() {
  _cached_size_ = 0;
  dwtraderid_ = 0;
  dwerrorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTAckSrcExchange::~GTAckSrcExchange() {
  SharedDtor();
}

void GTAckSrcExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTAckSrcExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTAckSrcExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTAckSrcExchange_descriptor_;
}

const GTAckSrcExchange& GTAckSrcExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

GTAckSrcExchange* GTAckSrcExchange::default_instance_ = NULL;

GTAckSrcExchange* GTAckSrcExchange::New() const {
  return new GTAckSrcExchange;
}

void GTAckSrcExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwtraderid_ = 0;
    dwerrorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTAckSrcExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwTraderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwtraderid_)));
          set_has_dwtraderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwErrorCode;
        break;
      }

      // required int32 dwErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwerrorcode_)));
          set_has_dwerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTAckSrcExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwTraderID = 1;
  if (has_dwtraderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwtraderid(), output);
  }

  // required int32 dwErrorCode = 2;
  if (has_dwerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwerrorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTAckSrcExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwTraderID = 1;
  if (has_dwtraderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwtraderid(), target);
  }

  // required int32 dwErrorCode = 2;
  if (has_dwerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwerrorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTAckSrcExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwTraderID = 1;
    if (has_dwtraderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwtraderid());
    }

    // required int32 dwErrorCode = 2;
    if (has_dwerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwerrorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTAckSrcExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTAckSrcExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTAckSrcExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTAckSrcExchange::MergeFrom(const GTAckSrcExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwtraderid()) {
      set_dwtraderid(from.dwtraderid());
    }
    if (from.has_dwerrorcode()) {
      set_dwerrorcode(from.dwerrorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTAckSrcExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAckSrcExchange::CopyFrom(const GTAckSrcExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTAckSrcExchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GTAckSrcExchange::Swap(GTAckSrcExchange* other) {
  if (other != this) {
    std::swap(dwtraderid_, other->dwtraderid_);
    std::swap(dwerrorcode_, other->dwerrorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTAckSrcExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTAckSrcExchange_descriptor_;
  metadata.reflection = GTAckSrcExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTAckReqExchange::kDwCharIDFieldNumber;
#endif  // !_MSC_VER

GTAckReqExchange::GTAckReqExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTAckReqExchange::InitAsDefaultInstance() {
}

GTAckReqExchange::GTAckReqExchange(const GTAckReqExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTAckReqExchange::SharedCtor() {
  _cached_size_ = 0;
  dwcharid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTAckReqExchange::~GTAckReqExchange() {
  SharedDtor();
}

void GTAckReqExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTAckReqExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTAckReqExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTAckReqExchange_descriptor_;
}

const GTAckReqExchange& GTAckReqExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

GTAckReqExchange* GTAckReqExchange::default_instance_ = NULL;

GTAckReqExchange* GTAckReqExchange::New() const {
  return new GTAckReqExchange;
}

void GTAckReqExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwcharid_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTAckReqExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 dwCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &dwcharid_)));
          set_has_dwcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTAckReqExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 dwCharID = 1;
  if (has_dwcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->dwcharid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTAckReqExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 dwCharID = 1;
  if (has_dwcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->dwcharid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTAckReqExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 dwCharID = 1;
    if (has_dwcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->dwcharid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTAckReqExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTAckReqExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTAckReqExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTAckReqExchange::MergeFrom(const GTAckReqExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwcharid()) {
      set_dwcharid(from.dwcharid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTAckReqExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAckReqExchange::CopyFrom(const GTAckReqExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTAckReqExchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GTAckReqExchange::Swap(GTAckReqExchange* other) {
  if (other != this) {
    std::swap(dwcharid_, other->dwcharid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTAckReqExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTAckReqExchange_descriptor_;
  metadata.reflection = GTAckReqExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TraderReqRet::kDwSrcIDFieldNumber;
const int TraderReqRet::kStatusFieldNumber;
#endif  // !_MSC_VER

TraderReqRet::TraderReqRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TraderReqRet::InitAsDefaultInstance() {
}

TraderReqRet::TraderReqRet(const TraderReqRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TraderReqRet::SharedCtor() {
  _cached_size_ = 0;
  dwsrcid_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TraderReqRet::~TraderReqRet() {
  SharedDtor();
}

void TraderReqRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void TraderReqRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TraderReqRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TraderReqRet_descriptor_;
}

const TraderReqRet& TraderReqRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

TraderReqRet* TraderReqRet::default_instance_ = NULL;

TraderReqRet* TraderReqRet::New() const {
  return new TraderReqRet;
}

void TraderReqRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwsrcid_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TraderReqRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwSrcID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwsrcid_)));
          set_has_dwsrcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_status;
        break;
      }

      // required int32 status = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TraderReqRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwSrcID = 1;
  if (has_dwsrcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwsrcid(), output);
  }

  // required int32 status = 2;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TraderReqRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwSrcID = 1;
  if (has_dwsrcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwsrcid(), target);
  }

  // required int32 status = 2;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TraderReqRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwSrcID = 1;
    if (has_dwsrcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwsrcid());
    }

    // required int32 status = 2;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TraderReqRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TraderReqRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TraderReqRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TraderReqRet::MergeFrom(const TraderReqRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwsrcid()) {
      set_dwsrcid(from.dwsrcid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TraderReqRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TraderReqRet::CopyFrom(const TraderReqRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TraderReqRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void TraderReqRet::Swap(TraderReqRet* other) {
  if (other != this) {
    std::swap(dwsrcid_, other->dwsrcid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TraderReqRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TraderReqRet_descriptor_;
  metadata.reflection = TraderReqRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTAckOtherClientReqExchange::kDwCharIDFieldNumber;
const int GTAckOtherClientReqExchange::kDwErrorCodeFieldNumber;
#endif  // !_MSC_VER

GTAckOtherClientReqExchange::GTAckOtherClientReqExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTAckOtherClientReqExchange::InitAsDefaultInstance() {
}

GTAckOtherClientReqExchange::GTAckOtherClientReqExchange(const GTAckOtherClientReqExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTAckOtherClientReqExchange::SharedCtor() {
  _cached_size_ = 0;
  dwcharid_ = 0;
  dwerrorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTAckOtherClientReqExchange::~GTAckOtherClientReqExchange() {
  SharedDtor();
}

void GTAckOtherClientReqExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTAckOtherClientReqExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTAckOtherClientReqExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTAckOtherClientReqExchange_descriptor_;
}

const GTAckOtherClientReqExchange& GTAckOtherClientReqExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

GTAckOtherClientReqExchange* GTAckOtherClientReqExchange::default_instance_ = NULL;

GTAckOtherClientReqExchange* GTAckOtherClientReqExchange::New() const {
  return new GTAckOtherClientReqExchange;
}

void GTAckOtherClientReqExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwcharid_ = 0;
    dwerrorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTAckOtherClientReqExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwcharid_)));
          set_has_dwcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwErrorCode;
        break;
      }

      // required int32 dwErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwerrorcode_)));
          set_has_dwerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTAckOtherClientReqExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwCharID = 1;
  if (has_dwcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwcharid(), output);
  }

  // required int32 dwErrorCode = 2;
  if (has_dwerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwerrorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTAckOtherClientReqExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwCharID = 1;
  if (has_dwcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwcharid(), target);
  }

  // required int32 dwErrorCode = 2;
  if (has_dwerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwerrorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTAckOtherClientReqExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwCharID = 1;
    if (has_dwcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwcharid());
    }

    // required int32 dwErrorCode = 2;
    if (has_dwerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwerrorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTAckOtherClientReqExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTAckOtherClientReqExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTAckOtherClientReqExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTAckOtherClientReqExchange::MergeFrom(const GTAckOtherClientReqExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwcharid()) {
      set_dwcharid(from.dwcharid());
    }
    if (from.has_dwerrorcode()) {
      set_dwerrorcode(from.dwerrorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTAckOtherClientReqExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAckOtherClientReqExchange::CopyFrom(const GTAckOtherClientReqExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTAckOtherClientReqExchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GTAckOtherClientReqExchange::Swap(GTAckOtherClientReqExchange* other) {
  if (other != this) {
    std::swap(dwcharid_, other->dwcharid_);
    std::swap(dwerrorcode_, other->dwerrorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTAckOtherClientReqExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTAckOtherClientReqExchange_descriptor_;
  metadata.reflection = GTAckOtherClientReqExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTAckToApplicant::kDwCharIDFieldNumber;
const int GTAckToApplicant::kDwErrorCodeFieldNumber;
#endif  // !_MSC_VER

GTAckToApplicant::GTAckToApplicant()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTAckToApplicant::InitAsDefaultInstance() {
}

GTAckToApplicant::GTAckToApplicant(const GTAckToApplicant& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTAckToApplicant::SharedCtor() {
  _cached_size_ = 0;
  dwcharid_ = 0;
  dwerrorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTAckToApplicant::~GTAckToApplicant() {
  SharedDtor();
}

void GTAckToApplicant::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTAckToApplicant::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTAckToApplicant::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTAckToApplicant_descriptor_;
}

const GTAckToApplicant& GTAckToApplicant::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

GTAckToApplicant* GTAckToApplicant::default_instance_ = NULL;

GTAckToApplicant* GTAckToApplicant::New() const {
  return new GTAckToApplicant;
}

void GTAckToApplicant::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwcharid_ = 0;
    dwerrorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTAckToApplicant::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwCharID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwcharid_)));
          set_has_dwcharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwErrorCode;
        break;
      }

      // required int32 dwErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwerrorcode_)));
          set_has_dwerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTAckToApplicant::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwCharID = 1;
  if (has_dwcharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwcharid(), output);
  }

  // required int32 dwErrorCode = 2;
  if (has_dwerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwerrorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTAckToApplicant::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwCharID = 1;
  if (has_dwcharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwcharid(), target);
  }

  // required int32 dwErrorCode = 2;
  if (has_dwerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwerrorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTAckToApplicant::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwCharID = 1;
    if (has_dwcharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwcharid());
    }

    // required int32 dwErrorCode = 2;
    if (has_dwerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwerrorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTAckToApplicant::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTAckToApplicant* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTAckToApplicant*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTAckToApplicant::MergeFrom(const GTAckToApplicant& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwcharid()) {
      set_dwcharid(from.dwcharid());
    }
    if (from.has_dwerrorcode()) {
      set_dwerrorcode(from.dwerrorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTAckToApplicant::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAckToApplicant::CopyFrom(const GTAckToApplicant& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTAckToApplicant::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GTAckToApplicant::Swap(GTAckToApplicant* other) {
  if (other != this) {
    std::swap(dwcharid_, other->dwcharid_);
    std::swap(dwerrorcode_, other->dwerrorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTAckToApplicant::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTAckToApplicant_descriptor_;
  metadata.reflection = GTAckToApplicant_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqCancelExchang::kDwPlayerIDFieldNumber;
#endif  // !_MSC_VER

ClientReqCancelExchang::ClientReqCancelExchang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqCancelExchang::InitAsDefaultInstance() {
}

ClientReqCancelExchang::ClientReqCancelExchang(const ClientReqCancelExchang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqCancelExchang::SharedCtor() {
  _cached_size_ = 0;
  dwplayerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqCancelExchang::~ClientReqCancelExchang() {
  SharedDtor();
}

void ClientReqCancelExchang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqCancelExchang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqCancelExchang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqCancelExchang_descriptor_;
}

const ClientReqCancelExchang& ClientReqCancelExchang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

ClientReqCancelExchang* ClientReqCancelExchang::default_instance_ = NULL;

ClientReqCancelExchang* ClientReqCancelExchang::New() const {
  return new ClientReqCancelExchang;
}

void ClientReqCancelExchang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwplayerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqCancelExchang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwPlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwplayerid_)));
          set_has_dwplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqCancelExchang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwPlayerID = 1;
  if (has_dwplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqCancelExchang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwPlayerID = 1;
  if (has_dwplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqCancelExchang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwPlayerID = 1;
    if (has_dwplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqCancelExchang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqCancelExchang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqCancelExchang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqCancelExchang::MergeFrom(const ClientReqCancelExchang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwplayerid()) {
      set_dwplayerid(from.dwplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqCancelExchang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqCancelExchang::CopyFrom(const ClientReqCancelExchang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqCancelExchang::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqCancelExchang::Swap(ClientReqCancelExchang* other) {
  if (other != this) {
    std::swap(dwplayerid_, other->dwplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqCancelExchang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqCancelExchang_descriptor_;
  metadata.reflection = ClientReqCancelExchang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTAckCancelExchang::kDwPlayerIDFieldNumber;
#endif  // !_MSC_VER

GTAckCancelExchang::GTAckCancelExchang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTAckCancelExchang::InitAsDefaultInstance() {
}

GTAckCancelExchang::GTAckCancelExchang(const GTAckCancelExchang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTAckCancelExchang::SharedCtor() {
  _cached_size_ = 0;
  dwplayerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTAckCancelExchang::~GTAckCancelExchang() {
  SharedDtor();
}

void GTAckCancelExchang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTAckCancelExchang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTAckCancelExchang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTAckCancelExchang_descriptor_;
}

const GTAckCancelExchang& GTAckCancelExchang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

GTAckCancelExchang* GTAckCancelExchang::default_instance_ = NULL;

GTAckCancelExchang* GTAckCancelExchang::New() const {
  return new GTAckCancelExchang;
}

void GTAckCancelExchang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwplayerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTAckCancelExchang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwPlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwplayerid_)));
          set_has_dwplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTAckCancelExchang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwPlayerID = 1;
  if (has_dwplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTAckCancelExchang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwPlayerID = 1;
  if (has_dwplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTAckCancelExchang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwPlayerID = 1;
    if (has_dwplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTAckCancelExchang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTAckCancelExchang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTAckCancelExchang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTAckCancelExchang::MergeFrom(const GTAckCancelExchang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwplayerid()) {
      set_dwplayerid(from.dwplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTAckCancelExchang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAckCancelExchang::CopyFrom(const GTAckCancelExchang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTAckCancelExchang::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GTAckCancelExchang::Swap(GTAckCancelExchang* other) {
  if (other != this) {
    std::swap(dwplayerid_, other->dwplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTAckCancelExchang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTAckCancelExchang_descriptor_;
  metadata.reflection = GTAckCancelExchang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqLock::kDwPlayerIDFieldNumber;
const int ClientReqLock::kDwPacketPosFieldNumber;
const int ClientReqLock::kDwMoneyFieldNumber;
#endif  // !_MSC_VER

ClientReqLock::ClientReqLock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqLock::InitAsDefaultInstance() {
}

ClientReqLock::ClientReqLock(const ClientReqLock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqLock::SharedCtor() {
  _cached_size_ = 0;
  dwplayerid_ = 0;
  dwmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqLock::~ClientReqLock() {
  SharedDtor();
}

void ClientReqLock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqLock_descriptor_;
}

const ClientReqLock& ClientReqLock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

ClientReqLock* ClientReqLock::default_instance_ = NULL;

ClientReqLock* ClientReqLock::New() const {
  return new ClientReqLock;
}

void ClientReqLock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwplayerid_ = 0;
    dwmoney_ = 0;
  }
  dwpacketpos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwPlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwplayerid_)));
          set_has_dwplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwPacketPos;
        break;
      }

      // repeated int32 dwPacketPos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwPacketPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_dwpacketpos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwpacketpos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwPacketPos;
        if (input->ExpectTag(24)) goto parse_dwMoney;
        break;
      }

      // required int32 dwMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwmoney_)));
          set_has_dwmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwPlayerID = 1;
  if (has_dwplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwplayerid(), output);
  }

  // repeated int32 dwPacketPos = 2;
  for (int i = 0; i < this->dwpacketpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->dwpacketpos(i), output);
  }

  // required int32 dwMoney = 3;
  if (has_dwmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dwmoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqLock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwPlayerID = 1;
  if (has_dwplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwplayerid(), target);
  }

  // repeated int32 dwPacketPos = 2;
  for (int i = 0; i < this->dwpacketpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->dwpacketpos(i), target);
  }

  // required int32 dwMoney = 3;
  if (has_dwmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dwmoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqLock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwPlayerID = 1;
    if (has_dwplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwplayerid());
    }

    // required int32 dwMoney = 3;
    if (has_dwmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwmoney());
    }

  }
  // repeated int32 dwPacketPos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwpacketpos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwpacketpos(i));
    }
    total_size += 1 * this->dwpacketpos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqLock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqLock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqLock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqLock::MergeFrom(const ClientReqLock& from) {
  GOOGLE_CHECK_NE(&from, this);
  dwpacketpos_.MergeFrom(from.dwpacketpos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwplayerid()) {
      set_dwplayerid(from.dwplayerid());
    }
    if (from.has_dwmoney()) {
      set_dwmoney(from.dwmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqLock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqLock::CopyFrom(const ClientReqLock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqLock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  return true;
}

void ClientReqLock::Swap(ClientReqLock* other) {
  if (other != this) {
    std::swap(dwplayerid_, other->dwplayerid_);
    dwpacketpos_.Swap(&other->dwpacketpos_);
    std::swap(dwmoney_, other->dwmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqLock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqLock_descriptor_;
  metadata.reflection = ClientReqLock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTAckSrcReqLock::kDwErrorCodeFieldNumber;
#endif  // !_MSC_VER

GTAckSrcReqLock::GTAckSrcReqLock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTAckSrcReqLock::InitAsDefaultInstance() {
}

GTAckSrcReqLock::GTAckSrcReqLock(const GTAckSrcReqLock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTAckSrcReqLock::SharedCtor() {
  _cached_size_ = 0;
  dwerrorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTAckSrcReqLock::~GTAckSrcReqLock() {
  SharedDtor();
}

void GTAckSrcReqLock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTAckSrcReqLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTAckSrcReqLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTAckSrcReqLock_descriptor_;
}

const GTAckSrcReqLock& GTAckSrcReqLock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

GTAckSrcReqLock* GTAckSrcReqLock::default_instance_ = NULL;

GTAckSrcReqLock* GTAckSrcReqLock::New() const {
  return new GTAckSrcReqLock;
}

void GTAckSrcReqLock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwerrorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTAckSrcReqLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwErrorCode = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwerrorcode_)));
          set_has_dwerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTAckSrcReqLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwerrorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTAckSrcReqLock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwErrorCode = 1;
  if (has_dwerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwerrorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTAckSrcReqLock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwErrorCode = 1;
    if (has_dwerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwerrorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTAckSrcReqLock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTAckSrcReqLock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTAckSrcReqLock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTAckSrcReqLock::MergeFrom(const GTAckSrcReqLock& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwerrorcode()) {
      set_dwerrorcode(from.dwerrorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTAckSrcReqLock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAckSrcReqLock::CopyFrom(const GTAckSrcReqLock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTAckSrcReqLock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GTAckSrcReqLock::Swap(GTAckSrcReqLock* other) {
  if (other != this) {
    std::swap(dwerrorcode_, other->dwerrorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTAckSrcReqLock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTAckSrcReqLock_descriptor_;
  metadata.reflection = GTAckSrcReqLock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTAckReqLock::kDwTraderIDFieldNumber;
const int GTAckReqLock::kPropListFieldNumber;
const int GTAckReqLock::kDwMoneyFieldNumber;
#endif  // !_MSC_VER

GTAckReqLock::GTAckReqLock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTAckReqLock::InitAsDefaultInstance() {
}

GTAckReqLock::GTAckReqLock(const GTAckReqLock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTAckReqLock::SharedCtor() {
  _cached_size_ = 0;
  dwtraderid_ = 0;
  dwmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTAckReqLock::~GTAckReqLock() {
  SharedDtor();
}

void GTAckReqLock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTAckReqLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTAckReqLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTAckReqLock_descriptor_;
}

const GTAckReqLock& GTAckReqLock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

GTAckReqLock* GTAckReqLock::default_instance_ = NULL;

GTAckReqLock* GTAckReqLock::New() const {
  return new GTAckReqLock;
}

void GTAckReqLock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwtraderid_ = 0;
    dwmoney_ = 0;
  }
  proplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTAckReqLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwTraderID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwtraderid_)));
          set_has_dwtraderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_propList;
        break;
      }

      // repeated .CharLogin.ClientItemInfo propList = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_propList;
        if (input->ExpectTag(24)) goto parse_dwMoney;
        break;
      }

      // required int32 dwMoney = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwmoney_)));
          set_has_dwmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTAckReqLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwTraderID = 1;
  if (has_dwtraderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwtraderid(), output);
  }

  // repeated .CharLogin.ClientItemInfo propList = 2;
  for (int i = 0; i < this->proplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->proplist(i), output);
  }

  // required int32 dwMoney = 3;
  if (has_dwmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->dwmoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTAckReqLock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwTraderID = 1;
  if (has_dwtraderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwtraderid(), target);
  }

  // repeated .CharLogin.ClientItemInfo propList = 2;
  for (int i = 0; i < this->proplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->proplist(i), target);
  }

  // required int32 dwMoney = 3;
  if (has_dwmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->dwmoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTAckReqLock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwTraderID = 1;
    if (has_dwtraderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwtraderid());
    }

    // required int32 dwMoney = 3;
    if (has_dwmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwmoney());
    }

  }
  // repeated .CharLogin.ClientItemInfo propList = 2;
  total_size += 1 * this->proplist_size();
  for (int i = 0; i < this->proplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTAckReqLock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTAckReqLock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTAckReqLock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTAckReqLock::MergeFrom(const GTAckReqLock& from) {
  GOOGLE_CHECK_NE(&from, this);
  proplist_.MergeFrom(from.proplist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwtraderid()) {
      set_dwtraderid(from.dwtraderid());
    }
    if (from.has_dwmoney()) {
      set_dwmoney(from.dwmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTAckReqLock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAckReqLock::CopyFrom(const GTAckReqLock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTAckReqLock::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000005) != 0x00000005) return false;

  for (int i = 0; i < proplist_size(); i++) {
    if (!this->proplist(i).IsInitialized()) return false;
  }
  return true;
}

void GTAckReqLock::Swap(GTAckReqLock* other) {
  if (other != this) {
    std::swap(dwtraderid_, other->dwtraderid_);
    proplist_.Swap(&other->proplist_);
    std::swap(dwmoney_, other->dwmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTAckReqLock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTAckReqLock_descriptor_;
  metadata.reflection = GTAckReqLock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqVerifyExchang::kDwPlayerIDFieldNumber;
#endif  // !_MSC_VER

ClientReqVerifyExchang::ClientReqVerifyExchang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqVerifyExchang::InitAsDefaultInstance() {
}

ClientReqVerifyExchang::ClientReqVerifyExchang(const ClientReqVerifyExchang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqVerifyExchang::SharedCtor() {
  _cached_size_ = 0;
  dwplayerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqVerifyExchang::~ClientReqVerifyExchang() {
  SharedDtor();
}

void ClientReqVerifyExchang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqVerifyExchang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqVerifyExchang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqVerifyExchang_descriptor_;
}

const ClientReqVerifyExchang& ClientReqVerifyExchang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

ClientReqVerifyExchang* ClientReqVerifyExchang::default_instance_ = NULL;

ClientReqVerifyExchang* ClientReqVerifyExchang::New() const {
  return new ClientReqVerifyExchang;
}

void ClientReqVerifyExchang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwplayerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqVerifyExchang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwPlayerID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwplayerid_)));
          set_has_dwplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqVerifyExchang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwPlayerID = 1;
  if (has_dwplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqVerifyExchang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwPlayerID = 1;
  if (has_dwplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqVerifyExchang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwPlayerID = 1;
    if (has_dwplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqVerifyExchang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqVerifyExchang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqVerifyExchang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqVerifyExchang::MergeFrom(const ClientReqVerifyExchang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwplayerid()) {
      set_dwplayerid(from.dwplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqVerifyExchang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqVerifyExchang::CopyFrom(const ClientReqVerifyExchang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqVerifyExchang::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqVerifyExchang::Swap(ClientReqVerifyExchang* other) {
  if (other != this) {
    std::swap(dwplayerid_, other->dwplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqVerifyExchang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqVerifyExchang_descriptor_;
  metadata.reflection = ClientReqVerifyExchang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTAckExchangComplete::kDwFailedPlayerKeyFieldNumber;
const int GTAckExchangComplete::kDwErrorCodeFieldNumber;
#endif  // !_MSC_VER

GTAckExchangComplete::GTAckExchangComplete()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTAckExchangComplete::InitAsDefaultInstance() {
}

GTAckExchangComplete::GTAckExchangComplete(const GTAckExchangComplete& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTAckExchangComplete::SharedCtor() {
  _cached_size_ = 0;
  dwfailedplayerkey_ = 0;
  dwerrorcode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTAckExchangComplete::~GTAckExchangComplete() {
  SharedDtor();
}

void GTAckExchangComplete::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTAckExchangComplete::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTAckExchangComplete::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTAckExchangComplete_descriptor_;
}

const GTAckExchangComplete& GTAckExchangComplete::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

GTAckExchangComplete* GTAckExchangComplete::default_instance_ = NULL;

GTAckExchangComplete* GTAckExchangComplete::New() const {
  return new GTAckExchangComplete;
}

void GTAckExchangComplete::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    dwfailedplayerkey_ = 0;
    dwerrorcode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTAckExchangComplete::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 dwFailedPlayerKey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwfailedplayerkey_)));
          set_has_dwfailedplayerkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwErrorCode;
        break;
      }

      // required int32 dwErrorCode = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwErrorCode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwerrorcode_)));
          set_has_dwerrorcode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTAckExchangComplete::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 dwFailedPlayerKey = 1;
  if (has_dwfailedplayerkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->dwfailedplayerkey(), output);
  }

  // required int32 dwErrorCode = 2;
  if (has_dwerrorcode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwerrorcode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTAckExchangComplete::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 dwFailedPlayerKey = 1;
  if (has_dwfailedplayerkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->dwfailedplayerkey(), target);
  }

  // required int32 dwErrorCode = 2;
  if (has_dwerrorcode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwerrorcode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTAckExchangComplete::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 dwFailedPlayerKey = 1;
    if (has_dwfailedplayerkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwfailedplayerkey());
    }

    // required int32 dwErrorCode = 2;
    if (has_dwerrorcode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwerrorcode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTAckExchangComplete::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTAckExchangComplete* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTAckExchangComplete*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTAckExchangComplete::MergeFrom(const GTAckExchangComplete& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_dwfailedplayerkey()) {
      set_dwfailedplayerkey(from.dwfailedplayerkey());
    }
    if (from.has_dwerrorcode()) {
      set_dwerrorcode(from.dwerrorcode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTAckExchangComplete::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTAckExchangComplete::CopyFrom(const GTAckExchangComplete& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTAckExchangComplete::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GTAckExchangComplete::Swap(GTAckExchangComplete* other) {
  if (other != this) {
    std::swap(dwfailedplayerkey_, other->dwfailedplayerkey_);
    std::swap(dwerrorcode_, other->dwerrorcode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTAckExchangComplete::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTAckExchangComplete_descriptor_;
  metadata.reflection = GTAckExchangComplete_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTtoGMReqExchange::kCharidFieldNumber;
const int GTtoGMReqExchange::kDwTraderIDFieldNumber;
#endif  // !_MSC_VER

GTtoGMReqExchange::GTtoGMReqExchange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTtoGMReqExchange::InitAsDefaultInstance() {
}

GTtoGMReqExchange::GTtoGMReqExchange(const GTtoGMReqExchange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTtoGMReqExchange::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  dwtraderid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTtoGMReqExchange::~GTtoGMReqExchange() {
  SharedDtor();
}

void GTtoGMReqExchange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTtoGMReqExchange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTtoGMReqExchange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTtoGMReqExchange_descriptor_;
}

const GTtoGMReqExchange& GTtoGMReqExchange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

GTtoGMReqExchange* GTtoGMReqExchange::default_instance_ = NULL;

GTtoGMReqExchange* GTtoGMReqExchange::New() const {
  return new GTtoGMReqExchange;
}

void GTtoGMReqExchange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    dwtraderid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTtoGMReqExchange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwTraderID;
        break;
      }

      // required int32 dwTraderID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwTraderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwtraderid_)));
          set_has_dwtraderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTtoGMReqExchange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 dwTraderID = 2;
  if (has_dwtraderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwtraderid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTtoGMReqExchange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 dwTraderID = 2;
  if (has_dwtraderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwtraderid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTtoGMReqExchange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 dwTraderID = 2;
    if (has_dwtraderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwtraderid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTtoGMReqExchange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTtoGMReqExchange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTtoGMReqExchange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTtoGMReqExchange::MergeFrom(const GTtoGMReqExchange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dwtraderid()) {
      set_dwtraderid(from.dwtraderid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTtoGMReqExchange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTtoGMReqExchange::CopyFrom(const GTtoGMReqExchange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTtoGMReqExchange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GTtoGMReqExchange::Swap(GTtoGMReqExchange* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(dwtraderid_, other->dwtraderid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTtoGMReqExchange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTtoGMReqExchange_descriptor_;
  metadata.reflection = GTtoGMReqExchange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTtoGMTraderReqRet::kCharidFieldNumber;
const int GTtoGMTraderReqRet::kDwSrcIDFieldNumber;
const int GTtoGMTraderReqRet::kStatusFieldNumber;
#endif  // !_MSC_VER

GTtoGMTraderReqRet::GTtoGMTraderReqRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTtoGMTraderReqRet::InitAsDefaultInstance() {
}

GTtoGMTraderReqRet::GTtoGMTraderReqRet(const GTtoGMTraderReqRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTtoGMTraderReqRet::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  dwsrcid_ = 0;
  status_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTtoGMTraderReqRet::~GTtoGMTraderReqRet() {
  SharedDtor();
}

void GTtoGMTraderReqRet::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTtoGMTraderReqRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTtoGMTraderReqRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTtoGMTraderReqRet_descriptor_;
}

const GTtoGMTraderReqRet& GTtoGMTraderReqRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

GTtoGMTraderReqRet* GTtoGMTraderReqRet::default_instance_ = NULL;

GTtoGMTraderReqRet* GTtoGMTraderReqRet::New() const {
  return new GTtoGMTraderReqRet;
}

void GTtoGMTraderReqRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    dwsrcid_ = 0;
    status_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTtoGMTraderReqRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwSrcID;
        break;
      }

      // required int32 dwSrcID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwSrcID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwsrcid_)));
          set_has_dwsrcid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_status;
        break;
      }

      // required int32 status = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_status:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &status_)));
          set_has_status();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTtoGMTraderReqRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 dwSrcID = 2;
  if (has_dwsrcid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwsrcid(), output);
  }

  // required int32 status = 3;
  if (has_status()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->status(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTtoGMTraderReqRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 dwSrcID = 2;
  if (has_dwsrcid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwsrcid(), target);
  }

  // required int32 status = 3;
  if (has_status()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->status(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTtoGMTraderReqRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 dwSrcID = 2;
    if (has_dwsrcid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwsrcid());
    }

    // required int32 status = 3;
    if (has_status()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->status());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTtoGMTraderReqRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTtoGMTraderReqRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTtoGMTraderReqRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTtoGMTraderReqRet::MergeFrom(const GTtoGMTraderReqRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dwsrcid()) {
      set_dwsrcid(from.dwsrcid());
    }
    if (from.has_status()) {
      set_status(from.status());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTtoGMTraderReqRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTtoGMTraderReqRet::CopyFrom(const GTtoGMTraderReqRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTtoGMTraderReqRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void GTtoGMTraderReqRet::Swap(GTtoGMTraderReqRet* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(dwsrcid_, other->dwsrcid_);
    std::swap(status_, other->status_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTtoGMTraderReqRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTtoGMTraderReqRet_descriptor_;
  metadata.reflection = GTtoGMTraderReqRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTtoGMCancelExchang::kCharidFieldNumber;
const int GTtoGMCancelExchang::kDwPlayerIDFieldNumber;
#endif  // !_MSC_VER

GTtoGMCancelExchang::GTtoGMCancelExchang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTtoGMCancelExchang::InitAsDefaultInstance() {
}

GTtoGMCancelExchang::GTtoGMCancelExchang(const GTtoGMCancelExchang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTtoGMCancelExchang::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  dwplayerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTtoGMCancelExchang::~GTtoGMCancelExchang() {
  SharedDtor();
}

void GTtoGMCancelExchang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTtoGMCancelExchang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTtoGMCancelExchang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTtoGMCancelExchang_descriptor_;
}

const GTtoGMCancelExchang& GTtoGMCancelExchang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

GTtoGMCancelExchang* GTtoGMCancelExchang::default_instance_ = NULL;

GTtoGMCancelExchang* GTtoGMCancelExchang::New() const {
  return new GTtoGMCancelExchang;
}

void GTtoGMCancelExchang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    dwplayerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTtoGMCancelExchang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwPlayerID;
        break;
      }

      // required int32 dwPlayerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwPlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwplayerid_)));
          set_has_dwplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTtoGMCancelExchang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 dwPlayerID = 2;
  if (has_dwplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTtoGMCancelExchang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 dwPlayerID = 2;
  if (has_dwplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTtoGMCancelExchang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 dwPlayerID = 2;
    if (has_dwplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTtoGMCancelExchang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTtoGMCancelExchang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTtoGMCancelExchang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTtoGMCancelExchang::MergeFrom(const GTtoGMCancelExchang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dwplayerid()) {
      set_dwplayerid(from.dwplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTtoGMCancelExchang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTtoGMCancelExchang::CopyFrom(const GTtoGMCancelExchang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTtoGMCancelExchang::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GTtoGMCancelExchang::Swap(GTtoGMCancelExchang* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(dwplayerid_, other->dwplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTtoGMCancelExchang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTtoGMCancelExchang_descriptor_;
  metadata.reflection = GTtoGMCancelExchang_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTtoGMReqReqLock::kCharidFieldNumber;
const int GTtoGMReqReqLock::kDwPlayerIDFieldNumber;
const int GTtoGMReqReqLock::kDwPacketPosFieldNumber;
const int GTtoGMReqReqLock::kDwMoneyFieldNumber;
#endif  // !_MSC_VER

GTtoGMReqReqLock::GTtoGMReqReqLock()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTtoGMReqReqLock::InitAsDefaultInstance() {
}

GTtoGMReqReqLock::GTtoGMReqReqLock(const GTtoGMReqReqLock& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTtoGMReqReqLock::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  dwplayerid_ = 0;
  dwmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTtoGMReqReqLock::~GTtoGMReqReqLock() {
  SharedDtor();
}

void GTtoGMReqReqLock::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTtoGMReqReqLock::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTtoGMReqReqLock::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTtoGMReqReqLock_descriptor_;
}

const GTtoGMReqReqLock& GTtoGMReqReqLock::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

GTtoGMReqReqLock* GTtoGMReqReqLock::default_instance_ = NULL;

GTtoGMReqReqLock* GTtoGMReqReqLock::New() const {
  return new GTtoGMReqReqLock;
}

void GTtoGMReqReqLock::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    dwplayerid_ = 0;
    dwmoney_ = 0;
  }
  dwpacketpos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTtoGMReqReqLock::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwPlayerID;
        break;
      }

      // required int32 dwPlayerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwPlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwplayerid_)));
          set_has_dwplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dwPacketPos;
        break;
      }

      // repeated int32 dwPacketPos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwPacketPos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_dwpacketpos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_dwpacketpos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_dwPacketPos;
        if (input->ExpectTag(32)) goto parse_dwMoney;
        break;
      }

      // required int32 dwMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwmoney_)));
          set_has_dwmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTtoGMReqReqLock::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 dwPlayerID = 2;
  if (has_dwplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwplayerid(), output);
  }

  // repeated int32 dwPacketPos = 3;
  for (int i = 0; i < this->dwpacketpos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->dwpacketpos(i), output);
  }

  // required int32 dwMoney = 4;
  if (has_dwmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dwmoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTtoGMReqReqLock::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 dwPlayerID = 2;
  if (has_dwplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwplayerid(), target);
  }

  // repeated int32 dwPacketPos = 3;
  for (int i = 0; i < this->dwpacketpos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->dwpacketpos(i), target);
  }

  // required int32 dwMoney = 4;
  if (has_dwmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dwmoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTtoGMReqReqLock::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 dwPlayerID = 2;
    if (has_dwplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwplayerid());
    }

    // required int32 dwMoney = 4;
    if (has_dwmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwmoney());
    }

  }
  // repeated int32 dwPacketPos = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->dwpacketpos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->dwpacketpos(i));
    }
    total_size += 1 * this->dwpacketpos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTtoGMReqReqLock::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTtoGMReqReqLock* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTtoGMReqReqLock*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTtoGMReqReqLock::MergeFrom(const GTtoGMReqReqLock& from) {
  GOOGLE_CHECK_NE(&from, this);
  dwpacketpos_.MergeFrom(from.dwpacketpos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dwplayerid()) {
      set_dwplayerid(from.dwplayerid());
    }
    if (from.has_dwmoney()) {
      set_dwmoney(from.dwmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTtoGMReqReqLock::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTtoGMReqReqLock::CopyFrom(const GTtoGMReqReqLock& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTtoGMReqReqLock::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  return true;
}

void GTtoGMReqReqLock::Swap(GTtoGMReqReqLock* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(dwplayerid_, other->dwplayerid_);
    dwpacketpos_.Swap(&other->dwpacketpos_);
    std::swap(dwmoney_, other->dwmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTtoGMReqReqLock::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTtoGMReqReqLock_descriptor_;
  metadata.reflection = GTtoGMReqReqLock_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GMToGTLockToOther::kCharidFieldNumber;
const int GMToGTLockToOther::kDwTraderIDFieldNumber;
const int GMToGTLockToOther::kPropListFieldNumber;
const int GMToGTLockToOther::kDwMoneyFieldNumber;
#endif  // !_MSC_VER

GMToGTLockToOther::GMToGTLockToOther()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GMToGTLockToOther::InitAsDefaultInstance() {
}

GMToGTLockToOther::GMToGTLockToOther(const GMToGTLockToOther& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GMToGTLockToOther::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  dwtraderid_ = 0;
  dwmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GMToGTLockToOther::~GMToGTLockToOther() {
  SharedDtor();
}

void GMToGTLockToOther::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GMToGTLockToOther::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GMToGTLockToOther::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GMToGTLockToOther_descriptor_;
}

const GMToGTLockToOther& GMToGTLockToOther::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

GMToGTLockToOther* GMToGTLockToOther::default_instance_ = NULL;

GMToGTLockToOther* GMToGTLockToOther::New() const {
  return new GMToGTLockToOther;
}

void GMToGTLockToOther::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    dwtraderid_ = 0;
    dwmoney_ = 0;
  }
  proplist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GMToGTLockToOther::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwTraderID;
        break;
      }

      // required int32 dwTraderID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwTraderID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwtraderid_)));
          set_has_dwtraderid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_propList;
        break;
      }

      // repeated .CharLogin.ClientItemInfo propList = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propList:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_proplist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_propList;
        if (input->ExpectTag(32)) goto parse_dwMoney;
        break;
      }

      // required int32 dwMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwmoney_)));
          set_has_dwmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GMToGTLockToOther::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 dwTraderID = 2;
  if (has_dwtraderid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwtraderid(), output);
  }

  // repeated .CharLogin.ClientItemInfo propList = 3;
  for (int i = 0; i < this->proplist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->proplist(i), output);
  }

  // required int32 dwMoney = 4;
  if (has_dwmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->dwmoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GMToGTLockToOther::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 dwTraderID = 2;
  if (has_dwtraderid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwtraderid(), target);
  }

  // repeated .CharLogin.ClientItemInfo propList = 3;
  for (int i = 0; i < this->proplist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->proplist(i), target);
  }

  // required int32 dwMoney = 4;
  if (has_dwmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->dwmoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GMToGTLockToOther::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 dwTraderID = 2;
    if (has_dwtraderid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwtraderid());
    }

    // required int32 dwMoney = 4;
    if (has_dwmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwmoney());
    }

  }
  // repeated .CharLogin.ClientItemInfo propList = 3;
  total_size += 1 * this->proplist_size();
  for (int i = 0; i < this->proplist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->proplist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GMToGTLockToOther::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GMToGTLockToOther* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GMToGTLockToOther*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GMToGTLockToOther::MergeFrom(const GMToGTLockToOther& from) {
  GOOGLE_CHECK_NE(&from, this);
  proplist_.MergeFrom(from.proplist_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dwtraderid()) {
      set_dwtraderid(from.dwtraderid());
    }
    if (from.has_dwmoney()) {
      set_dwmoney(from.dwmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GMToGTLockToOther::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GMToGTLockToOther::CopyFrom(const GMToGTLockToOther& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GMToGTLockToOther::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000000b) != 0x0000000b) return false;

  for (int i = 0; i < proplist_size(); i++) {
    if (!this->proplist(i).IsInitialized()) return false;
  }
  return true;
}

void GMToGTLockToOther::Swap(GMToGTLockToOther* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(dwtraderid_, other->dwtraderid_);
    proplist_.Swap(&other->proplist_);
    std::swap(dwmoney_, other->dwmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GMToGTLockToOther::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GMToGTLockToOther_descriptor_;
  metadata.reflection = GMToGTLockToOther_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GTtoGMVerifyExchang::kCharidFieldNumber;
const int GTtoGMVerifyExchang::kDwPlayerIDFieldNumber;
#endif  // !_MSC_VER

GTtoGMVerifyExchang::GTtoGMVerifyExchang()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GTtoGMVerifyExchang::InitAsDefaultInstance() {
}

GTtoGMVerifyExchang::GTtoGMVerifyExchang(const GTtoGMVerifyExchang& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GTtoGMVerifyExchang::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  dwplayerid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GTtoGMVerifyExchang::~GTtoGMVerifyExchang() {
  SharedDtor();
}

void GTtoGMVerifyExchang::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GTtoGMVerifyExchang::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GTtoGMVerifyExchang::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GTtoGMVerifyExchang_descriptor_;
}

const GTtoGMVerifyExchang& GTtoGMVerifyExchang::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_CharLogin_2fExchangMessage_2eproto();
  return *default_instance_;
}

GTtoGMVerifyExchang* GTtoGMVerifyExchang::default_instance_ = NULL;

GTtoGMVerifyExchang* GTtoGMVerifyExchang::New() const {
  return new GTtoGMVerifyExchang;
}

void GTtoGMVerifyExchang::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    dwplayerid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GTtoGMVerifyExchang::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_dwPlayerID;
        break;
      }

      // required int32 dwPlayerID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_dwPlayerID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &dwplayerid_)));
          set_has_dwplayerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GTtoGMVerifyExchang::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 dwPlayerID = 2;
  if (has_dwplayerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->dwplayerid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GTtoGMVerifyExchang::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 dwPlayerID = 2;
  if (has_dwplayerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->dwplayerid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GTtoGMVerifyExchang::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 dwPlayerID = 2;
    if (has_dwplayerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->dwplayerid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GTtoGMVerifyExchang::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GTtoGMVerifyExchang* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GTtoGMVerifyExchang*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GTtoGMVerifyExchang::MergeFrom(const GTtoGMVerifyExchang& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_dwplayerid()) {
      set_dwplayerid(from.dwplayerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GTtoGMVerifyExchang::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GTtoGMVerifyExchang::CopyFrom(const GTtoGMVerifyExchang& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GTtoGMVerifyExchang::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GTtoGMVerifyExchang::Swap(GTtoGMVerifyExchang* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(dwplayerid_, other->dwplayerid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GTtoGMVerifyExchang::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GTtoGMVerifyExchang_descriptor_;
  metadata.reflection = GTtoGMVerifyExchang_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace Exchang

// @@protoc_insertion_point(global_scope)
