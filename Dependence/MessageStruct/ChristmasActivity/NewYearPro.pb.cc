// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: ChristmasActivity/NewYearPro.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "ChristmasActivity/NewYearPro.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace NewYearPro {

namespace {

const ::google::protobuf::Descriptor* OneLimitData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OneLimitData_reflection_ = NULL;
const ::google::protobuf::Descriptor* LimiDatatPro_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  LimiDatatPro_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_ChristmasActivity_2fNewYearPro_2eproto() {
  protobuf_AddDesc_ChristmasActivity_2fNewYearPro_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "ChristmasActivity/NewYearPro.proto");
  GOOGLE_CHECK(file != NULL);
  OneLimitData_descriptor_ = file->message_type(0);
  static const int OneLimitData_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneLimitData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneLimitData, surpluscounts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneLimitData, buycounts_),
  };
  OneLimitData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OneLimitData_descriptor_,
      OneLimitData::default_instance_,
      OneLimitData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneLimitData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OneLimitData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OneLimitData));
  LimiDatatPro_descriptor_ = file->message_type(1);
  static const int LimiDatatPro_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimiDatatPro, horsereceive_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimiDatatPro, datas_),
  };
  LimiDatatPro_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      LimiDatatPro_descriptor_,
      LimiDatatPro::default_instance_,
      LimiDatatPro_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimiDatatPro, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(LimiDatatPro, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(LimiDatatPro));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_ChristmasActivity_2fNewYearPro_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OneLimitData_descriptor_, &OneLimitData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    LimiDatatPro_descriptor_, &LimiDatatPro::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_ChristmasActivity_2fNewYearPro_2eproto() {
  delete OneLimitData::default_instance_;
  delete OneLimitData_reflection_;
  delete LimiDatatPro::default_instance_;
  delete LimiDatatPro_reflection_;
}

void protobuf_AddDesc_ChristmasActivity_2fNewYearPro_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\"ChristmasActivity/NewYearPro.proto\022\nNe"
    "wYearPro\"D\n\014OneLimitData\022\n\n\002id\030\001 \001(\005\022\025\n\r"
    "surplusCounts\030\002 \001(\005\022\021\n\tbuyCounts\030\003 \001(\005\"M"
    "\n\014LimiDatatPro\022\024\n\014horseReceive\030\001 \001(\010\022\'\n\005"
    "datas\030\002 \003(\0132\030.NewYearPro.OneLimitData", 197);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "ChristmasActivity/NewYearPro.proto", &protobuf_RegisterTypes);
  OneLimitData::default_instance_ = new OneLimitData();
  LimiDatatPro::default_instance_ = new LimiDatatPro();
  OneLimitData::default_instance_->InitAsDefaultInstance();
  LimiDatatPro::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_ChristmasActivity_2fNewYearPro_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_ChristmasActivity_2fNewYearPro_2eproto {
  StaticDescriptorInitializer_ChristmasActivity_2fNewYearPro_2eproto() {
    protobuf_AddDesc_ChristmasActivity_2fNewYearPro_2eproto();
  }
} static_descriptor_initializer_ChristmasActivity_2fNewYearPro_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int OneLimitData::kIdFieldNumber;
const int OneLimitData::kSurplusCountsFieldNumber;
const int OneLimitData::kBuyCountsFieldNumber;
#endif  // !_MSC_VER

OneLimitData::OneLimitData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OneLimitData::InitAsDefaultInstance() {
}

OneLimitData::OneLimitData(const OneLimitData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OneLimitData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  surpluscounts_ = 0;
  buycounts_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OneLimitData::~OneLimitData() {
  SharedDtor();
}

void OneLimitData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OneLimitData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OneLimitData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OneLimitData_descriptor_;
}

const OneLimitData& OneLimitData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChristmasActivity_2fNewYearPro_2eproto();
  return *default_instance_;
}

OneLimitData* OneLimitData::default_instance_ = NULL;

OneLimitData* OneLimitData::New() const {
  return new OneLimitData;
}

void OneLimitData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    surpluscounts_ = 0;
    buycounts_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OneLimitData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_surplusCounts;
        break;
      }

      // optional int32 surplusCounts = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_surplusCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surpluscounts_)));
          set_has_surpluscounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_buyCounts;
        break;
      }

      // optional int32 buyCounts = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_buyCounts:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &buycounts_)));
          set_has_buycounts();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OneLimitData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 surplusCounts = 2;
  if (has_surpluscounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->surpluscounts(), output);
  }

  // optional int32 buyCounts = 3;
  if (has_buycounts()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->buycounts(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OneLimitData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 surplusCounts = 2;
  if (has_surpluscounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->surpluscounts(), target);
  }

  // optional int32 buyCounts = 3;
  if (has_buycounts()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->buycounts(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OneLimitData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 surplusCounts = 2;
    if (has_surpluscounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surpluscounts());
    }

    // optional int32 buyCounts = 3;
    if (has_buycounts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->buycounts());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OneLimitData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OneLimitData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OneLimitData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OneLimitData::MergeFrom(const OneLimitData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_surpluscounts()) {
      set_surpluscounts(from.surpluscounts());
    }
    if (from.has_buycounts()) {
      set_buycounts(from.buycounts());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OneLimitData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OneLimitData::CopyFrom(const OneLimitData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OneLimitData::IsInitialized() const {

  return true;
}

void OneLimitData::Swap(OneLimitData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(surpluscounts_, other->surpluscounts_);
    std::swap(buycounts_, other->buycounts_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OneLimitData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OneLimitData_descriptor_;
  metadata.reflection = OneLimitData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int LimiDatatPro::kHorseReceiveFieldNumber;
const int LimiDatatPro::kDatasFieldNumber;
#endif  // !_MSC_VER

LimiDatatPro::LimiDatatPro()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void LimiDatatPro::InitAsDefaultInstance() {
}

LimiDatatPro::LimiDatatPro(const LimiDatatPro& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void LimiDatatPro::SharedCtor() {
  _cached_size_ = 0;
  horsereceive_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

LimiDatatPro::~LimiDatatPro() {
  SharedDtor();
}

void LimiDatatPro::SharedDtor() {
  if (this != default_instance_) {
  }
}

void LimiDatatPro::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* LimiDatatPro::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return LimiDatatPro_descriptor_;
}

const LimiDatatPro& LimiDatatPro::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_ChristmasActivity_2fNewYearPro_2eproto();
  return *default_instance_;
}

LimiDatatPro* LimiDatatPro::default_instance_ = NULL;

LimiDatatPro* LimiDatatPro::New() const {
  return new LimiDatatPro;
}

void LimiDatatPro::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    horsereceive_ = false;
  }
  datas_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool LimiDatatPro::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional bool horseReceive = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &horsereceive_)));
          set_has_horsereceive();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        break;
      }

      // repeated .NewYearPro.OneLimitData datas = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_datas:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_datas()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_datas;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void LimiDatatPro::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional bool horseReceive = 1;
  if (has_horsereceive()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->horsereceive(), output);
  }

  // repeated .NewYearPro.OneLimitData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->datas(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* LimiDatatPro::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional bool horseReceive = 1;
  if (has_horsereceive()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->horsereceive(), target);
  }

  // repeated .NewYearPro.OneLimitData datas = 2;
  for (int i = 0; i < this->datas_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->datas(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int LimiDatatPro::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional bool horseReceive = 1;
    if (has_horsereceive()) {
      total_size += 1 + 1;
    }

  }
  // repeated .NewYearPro.OneLimitData datas = 2;
  total_size += 1 * this->datas_size();
  for (int i = 0; i < this->datas_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->datas(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void LimiDatatPro::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const LimiDatatPro* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const LimiDatatPro*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void LimiDatatPro::MergeFrom(const LimiDatatPro& from) {
  GOOGLE_CHECK_NE(&from, this);
  datas_.MergeFrom(from.datas_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_horsereceive()) {
      set_horsereceive(from.horsereceive());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void LimiDatatPro::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void LimiDatatPro::CopyFrom(const LimiDatatPro& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool LimiDatatPro::IsInitialized() const {

  return true;
}

void LimiDatatPro::Swap(LimiDatatPro* other) {
  if (other != this) {
    std::swap(horsereceive_, other->horsereceive_);
    datas_.Swap(&other->datas_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata LimiDatatPro::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = LimiDatatPro_descriptor_;
  metadata.reflection = LimiDatatPro_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace NewYearPro

// @@protoc_insertion_point(global_scope)
