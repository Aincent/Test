// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Map/SynchPath.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Map/SynchPath.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace PlayerSynch {

namespace {

const ::google::protobuf::Descriptor* PathToAllPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathToAllPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* MonsterPathToPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MonsterPathToPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchMonsterPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchMonsterPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchBaseToGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchBaseToGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchSkill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchSkill_reflection_ = NULL;
const ::google::protobuf::Descriptor* EquipData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  EquipData_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchPlayerBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchPlayerBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* MeditationInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MeditationInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchMonsterToGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchMonsterToGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchMonsterBase_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchMonsterBase_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchCompeteMonster_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchCompeteMonster_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchBuffChar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchBuffChar_reflection_ = NULL;
const ::google::protobuf::Descriptor* PathToGate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  PathToGate_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchInfoToPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchInfoToPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharPosRet_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharPosRet_reflection_ = NULL;
const ::google::protobuf::Descriptor* CharPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CharPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqFindPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqFindPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapMonsterPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapMonsterPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleFindPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleFindPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckPathPosition_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckPathPosition_reflection_ = NULL;
const ::google::protobuf::Descriptor* MapMonsterPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MapMonsterPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* SingleMonsterPath_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SingleMonsterPath_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqInstanceMonsterPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqInstanceMonsterPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* RetInstanceMonsterPos_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RetInstanceMonsterPos_reflection_ = NULL;
const ::google::protobuf::Descriptor* InstanceMonsterPosInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  InstanceMonsterPosInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GirlWarPathToPlayer_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GirlWarPathToPlayer_reflection_ = NULL;
const ::google::protobuf::Descriptor* SynchGirlWar_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SynchGirlWar_reflection_ = NULL;
const ::google::protobuf::Descriptor* RemotePlayerEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  RemotePlayerEquip_reflection_ = NULL;
const ::google::protobuf::Descriptor* AlterPlayerEquip_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AlterPlayerEquip_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Map_2fSynchPath_2eproto() {
  protobuf_AddDesc_Map_2fSynchPath_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Map/SynchPath.proto");
  GOOGLE_CHECK(file != NULL);
  PathToAllPlayer_descriptor_ = file->message_type(0);
  static const int PathToAllPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathToAllPlayer, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathToAllPlayer, pos_),
  };
  PathToAllPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathToAllPlayer_descriptor_,
      PathToAllPlayer::default_instance_,
      PathToAllPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathToAllPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathToAllPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathToAllPlayer));
  MonsterPathToPlayer_descriptor_ = file->message_type(1);
  static const int MonsterPathToPlayer_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterPathToPlayer, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterPathToPlayer, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterPathToPlayer, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterPathToPlayer, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterPathToPlayer, targetkey_),
  };
  MonsterPathToPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MonsterPathToPlayer_descriptor_,
      MonsterPathToPlayer::default_instance_,
      MonsterPathToPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterPathToPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MonsterPathToPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MonsterPathToPlayer));
  SynchMonsterPath_descriptor_ = file->message_type(2);
  static const int SynchMonsterPath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterPath, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterPath, path_),
  };
  SynchMonsterPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchMonsterPath_descriptor_,
      SynchMonsterPath::default_instance_,
      SynchMonsterPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchMonsterPath));
  SynchBaseToGate_descriptor_ = file->message_type(3);
  static const int SynchBaseToGate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchBaseToGate, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchBaseToGate, info_),
  };
  SynchBaseToGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchBaseToGate_descriptor_,
      SynchBaseToGate::default_instance_,
      SynchBaseToGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchBaseToGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchBaseToGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchBaseToGate));
  SynchSkill_descriptor_ = file->message_type(4);
  static const int SynchSkill_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchSkill, skillid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchSkill, objectkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchSkill, posx_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchSkill, posy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchSkill, surplustime_),
  };
  SynchSkill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchSkill_descriptor_,
      SynchSkill::default_instance_,
      SynchSkill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchSkill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchSkill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchSkill));
  EquipData_descriptor_ = file->message_type(5);
  static const int EquipData_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, strenggrade_),
  };
  EquipData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      EquipData_descriptor_,
      EquipData::default_instance_,
      EquipData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(EquipData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(EquipData));
  SynchPlayerBase_descriptor_ = file->message_type(6);
  static const int SynchPlayerBase_offsets_[33] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, mpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, horse_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, fightpower_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, magicweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, costume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, clanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, clanid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, clanjob_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, clanicon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, sinvalue_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, fashionid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, skilldata_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, meditation_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, distortion_),
  };
  SynchPlayerBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchPlayerBase_descriptor_,
      SynchPlayerBase::default_instance_,
      SynchPlayerBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchPlayerBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchPlayerBase));
  MeditationInfo_descriptor_ = file->message_type(7);
  static const int MeditationInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeditationInfo, targetkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeditationInfo, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeditationInfo, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeditationInfo, targetgirlwarkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeditationInfo, selfgirlwarkey_),
  };
  MeditationInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MeditationInfo_descriptor_,
      MeditationInfo::default_instance_,
      MeditationInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeditationInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MeditationInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MeditationInfo));
  SynchMonsterToGate_descriptor_ = file->message_type(8);
  static const int SynchMonsterToGate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterToGate, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterToGate, info_),
  };
  SynchMonsterToGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchMonsterToGate_descriptor_,
      SynchMonsterToGate::default_instance_,
      SynchMonsterToGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterToGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterToGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchMonsterToGate));
  SynchMonsterBase_descriptor_ = file->message_type(9);
  static const int SynchMonsterBase_offsets_[14] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, mpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, state_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, pos_),
  };
  SynchMonsterBase_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchMonsterBase_descriptor_,
      SynchMonsterBase::default_instance_,
      SynchMonsterBase_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchMonsterBase, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchMonsterBase));
  SynchCompeteMonster_descriptor_ = file->message_type(10);
  static const int SynchCompeteMonster_offsets_[24] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, mp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, mpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, movespeed_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, buf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, titleid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, equip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, magicweapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, costume_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, clanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, viplv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, fashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, horseid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, clanjob_),
  };
  SynchCompeteMonster_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchCompeteMonster_descriptor_,
      SynchCompeteMonster::default_instance_,
      SynchCompeteMonster_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchCompeteMonster, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchCompeteMonster));
  SynchBuffChar_descriptor_ = file->message_type(11);
  static const int SynchBuffChar_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchBuffChar, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchBuffChar, onlyid_),
  };
  SynchBuffChar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchBuffChar_descriptor_,
      SynchBuffChar::default_instance_,
      SynchBuffChar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchBuffChar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchBuffChar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchBuffChar));
  PathToGate_descriptor_ = file->message_type(12);
  static const int PathToGate_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathToGate, mycharid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathToGate, path_),
  };
  PathToGate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      PathToGate_descriptor_,
      PathToGate::default_instance_,
      PathToGate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathToGate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(PathToGate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(PathToGate));
  SynchInfoToPath_descriptor_ = file->message_type(13);
  static const int SynchInfoToPath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchInfoToPath, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchInfoToPath, info_),
  };
  SynchInfoToPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchInfoToPath_descriptor_,
      SynchInfoToPath::default_instance_,
      SynchInfoToPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchInfoToPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchInfoToPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchInfoToPath));
  SynchInfo_descriptor_ = file->message_type(14);
  static const int SynchInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchInfo, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchInfo, pos_),
  };
  SynchInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchInfo_descriptor_,
      SynchInfo::default_instance_,
      SynchInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchInfo));
  CharPosRet_descriptor_ = file->message_type(15);
  static const int CharPosRet_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharPosRet, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharPosRet, isvalid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharPosRet, pos_),
  };
  CharPosRet_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharPosRet_descriptor_,
      CharPosRet::default_instance_,
      CharPosRet_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharPosRet, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharPosRet, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharPosRet));
  CharPos_descriptor_ = file->message_type(16);
  static const int CharPos_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharPos, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharPos, ypos_),
  };
  CharPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CharPos_descriptor_,
      CharPos::default_instance_,
      CharPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CharPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CharPos));
  ReqFindPath_descriptor_ = file->message_type(17);
  static const int ReqFindPath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFindPath, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFindPath, monster_),
  };
  ReqFindPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqFindPath_descriptor_,
      ReqFindPath::default_instance_,
      ReqFindPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFindPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqFindPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqFindPath));
  MapMonsterPos_descriptor_ = file->message_type(18);
  static const int MapMonsterPos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMonsterPos, monster_),
  };
  MapMonsterPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapMonsterPos_descriptor_,
      MapMonsterPos::default_instance_,
      MapMonsterPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMonsterPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMonsterPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapMonsterPos));
  SingleFindPos_descriptor_ = file->message_type(19);
  static const int SingleFindPos_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFindPos, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFindPos, pos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFindPos, distance_),
  };
  SingleFindPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleFindPos_descriptor_,
      SingleFindPos::default_instance_,
      SingleFindPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFindPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleFindPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleFindPos));
  AckPathPosition_descriptor_ = file->message_type(20);
  static const int AckPathPosition_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPathPosition, mapid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPathPosition, path_),
  };
  AckPathPosition_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckPathPosition_descriptor_,
      AckPathPosition::default_instance_,
      AckPathPosition_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPathPosition, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckPathPosition, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckPathPosition));
  MapMonsterPath_descriptor_ = file->message_type(21);
  static const int MapMonsterPath_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMonsterPath, path_),
  };
  MapMonsterPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MapMonsterPath_descriptor_,
      MapMonsterPath::default_instance_,
      MapMonsterPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMonsterPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MapMonsterPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MapMonsterPath));
  SingleMonsterPath_descriptor_ = file->message_type(22);
  static const int SingleMonsterPath_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMonsterPath, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMonsterPath, pos_),
  };
  SingleMonsterPath_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SingleMonsterPath_descriptor_,
      SingleMonsterPath::default_instance_,
      SingleMonsterPath_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMonsterPath, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SingleMonsterPath, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SingleMonsterPath));
  ReqInstanceMonsterPos_descriptor_ = file->message_type(23);
  static const int ReqInstanceMonsterPos_offsets_[1] = {
  };
  ReqInstanceMonsterPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqInstanceMonsterPos_descriptor_,
      ReqInstanceMonsterPos::default_instance_,
      ReqInstanceMonsterPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceMonsterPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqInstanceMonsterPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqInstanceMonsterPos));
  RetInstanceMonsterPos_descriptor_ = file->message_type(24);
  static const int RetInstanceMonsterPos_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceMonsterPos, posinfo_),
  };
  RetInstanceMonsterPos_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RetInstanceMonsterPos_descriptor_,
      RetInstanceMonsterPos::default_instance_,
      RetInstanceMonsterPos_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceMonsterPos, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RetInstanceMonsterPos, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RetInstanceMonsterPos));
  InstanceMonsterPosInfo_descriptor_ = file->message_type(25);
  static const int InstanceMonsterPosInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceMonsterPosInfo, monid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceMonsterPosInfo, monkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceMonsterPosInfo, monxypos_),
  };
  InstanceMonsterPosInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      InstanceMonsterPosInfo_descriptor_,
      InstanceMonsterPosInfo::default_instance_,
      InstanceMonsterPosInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceMonsterPosInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(InstanceMonsterPosInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(InstanceMonsterPosInfo));
  GirlWarPathToPlayer_descriptor_ = file->message_type(26);
  static const int GirlWarPathToPlayer_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWarPathToPlayer, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWarPathToPlayer, pos_),
  };
  GirlWarPathToPlayer_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GirlWarPathToPlayer_descriptor_,
      GirlWarPathToPlayer::default_instance_,
      GirlWarPathToPlayer_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWarPathToPlayer, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GirlWarPathToPlayer, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GirlWarPathToPlayer));
  SynchGirlWar_descriptor_ = file->message_type(27);
  static const int SynchGirlWar_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchGirlWar, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchGirlWar, key_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchGirlWar, ownerkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchGirlWar, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchGirlWar, hp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchGirlWar, hpmax_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchGirlWar, xpos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchGirlWar, ypos_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchGirlWar, targetplayerkey_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchGirlWar, targetgirlkey_),
  };
  SynchGirlWar_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SynchGirlWar_descriptor_,
      SynchGirlWar::default_instance_,
      SynchGirlWar_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchGirlWar, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SynchGirlWar, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SynchGirlWar));
  RemotePlayerEquip_descriptor_ = file->message_type(28);
  static const int RemotePlayerEquip_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemotePlayerEquip, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemotePlayerEquip, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemotePlayerEquip, strenggrade_),
  };
  RemotePlayerEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      RemotePlayerEquip_descriptor_,
      RemotePlayerEquip::default_instance_,
      RemotePlayerEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemotePlayerEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(RemotePlayerEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(RemotePlayerEquip));
  AlterPlayerEquip_descriptor_ = file->message_type(29);
  static const int AlterPlayerEquip_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterPlayerEquip, playerid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterPlayerEquip, equips_),
  };
  AlterPlayerEquip_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AlterPlayerEquip_descriptor_,
      AlterPlayerEquip::default_instance_,
      AlterPlayerEquip_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterPlayerEquip, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AlterPlayerEquip, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AlterPlayerEquip));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Map_2fSynchPath_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathToAllPlayer_descriptor_, &PathToAllPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MonsterPathToPlayer_descriptor_, &MonsterPathToPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchMonsterPath_descriptor_, &SynchMonsterPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchBaseToGate_descriptor_, &SynchBaseToGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchSkill_descriptor_, &SynchSkill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    EquipData_descriptor_, &EquipData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchPlayerBase_descriptor_, &SynchPlayerBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MeditationInfo_descriptor_, &MeditationInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchMonsterToGate_descriptor_, &SynchMonsterToGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchMonsterBase_descriptor_, &SynchMonsterBase::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchCompeteMonster_descriptor_, &SynchCompeteMonster::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchBuffChar_descriptor_, &SynchBuffChar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    PathToGate_descriptor_, &PathToGate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchInfoToPath_descriptor_, &SynchInfoToPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchInfo_descriptor_, &SynchInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharPosRet_descriptor_, &CharPosRet::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CharPos_descriptor_, &CharPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqFindPath_descriptor_, &ReqFindPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapMonsterPos_descriptor_, &MapMonsterPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleFindPos_descriptor_, &SingleFindPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckPathPosition_descriptor_, &AckPathPosition::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MapMonsterPath_descriptor_, &MapMonsterPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SingleMonsterPath_descriptor_, &SingleMonsterPath::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqInstanceMonsterPos_descriptor_, &ReqInstanceMonsterPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RetInstanceMonsterPos_descriptor_, &RetInstanceMonsterPos::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    InstanceMonsterPosInfo_descriptor_, &InstanceMonsterPosInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GirlWarPathToPlayer_descriptor_, &GirlWarPathToPlayer::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SynchGirlWar_descriptor_, &SynchGirlWar::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    RemotePlayerEquip_descriptor_, &RemotePlayerEquip::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AlterPlayerEquip_descriptor_, &AlterPlayerEquip::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Map_2fSynchPath_2eproto() {
  delete PathToAllPlayer::default_instance_;
  delete PathToAllPlayer_reflection_;
  delete MonsterPathToPlayer::default_instance_;
  delete MonsterPathToPlayer_reflection_;
  delete SynchMonsterPath::default_instance_;
  delete SynchMonsterPath_reflection_;
  delete SynchBaseToGate::default_instance_;
  delete SynchBaseToGate_reflection_;
  delete SynchSkill::default_instance_;
  delete SynchSkill_reflection_;
  delete EquipData::default_instance_;
  delete EquipData_reflection_;
  delete SynchPlayerBase::default_instance_;
  delete SynchPlayerBase_reflection_;
  delete MeditationInfo::default_instance_;
  delete MeditationInfo_reflection_;
  delete SynchMonsterToGate::default_instance_;
  delete SynchMonsterToGate_reflection_;
  delete SynchMonsterBase::default_instance_;
  delete SynchMonsterBase_reflection_;
  delete SynchCompeteMonster::default_instance_;
  delete SynchCompeteMonster_reflection_;
  delete SynchBuffChar::default_instance_;
  delete SynchBuffChar_reflection_;
  delete PathToGate::default_instance_;
  delete PathToGate_reflection_;
  delete SynchInfoToPath::default_instance_;
  delete SynchInfoToPath_reflection_;
  delete SynchInfo::default_instance_;
  delete SynchInfo_reflection_;
  delete CharPosRet::default_instance_;
  delete CharPosRet_reflection_;
  delete CharPos::default_instance_;
  delete CharPos_reflection_;
  delete ReqFindPath::default_instance_;
  delete ReqFindPath_reflection_;
  delete MapMonsterPos::default_instance_;
  delete MapMonsterPos_reflection_;
  delete SingleFindPos::default_instance_;
  delete SingleFindPos_reflection_;
  delete AckPathPosition::default_instance_;
  delete AckPathPosition_reflection_;
  delete MapMonsterPath::default_instance_;
  delete MapMonsterPath_reflection_;
  delete SingleMonsterPath::default_instance_;
  delete SingleMonsterPath_reflection_;
  delete ReqInstanceMonsterPos::default_instance_;
  delete ReqInstanceMonsterPos_reflection_;
  delete RetInstanceMonsterPos::default_instance_;
  delete RetInstanceMonsterPos_reflection_;
  delete InstanceMonsterPosInfo::default_instance_;
  delete InstanceMonsterPosInfo_reflection_;
  delete GirlWarPathToPlayer::default_instance_;
  delete GirlWarPathToPlayer_reflection_;
  delete SynchGirlWar::default_instance_;
  delete SynchGirlWar_reflection_;
  delete RemotePlayerEquip::default_instance_;
  delete RemotePlayerEquip_reflection_;
  delete AlterPlayerEquip::default_instance_;
  delete AlterPlayerEquip_reflection_;
}

void protobuf_AddDesc_Map_2fSynchPath_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\023Map/SynchPath.proto\022\013PlayerSynch\"D\n\017Pa"
    "thToAllPlayer\022\016\n\006charid\030\001 \002(\003\022!\n\003pos\030\002 \003"
    "(\0132\024.PlayerSynch.CharPos\"z\n\023MonsterPathT"
    "oPlayer\022\013\n\003key\030\001 \002(\005\022\021\n\tmovespeed\030\002 \002(\005\022"
    "\r\n\005state\030\003 \002(\005\022!\n\003pos\030\004 \003(\0132\024.PlayerSync"
    "h.CharPos\022\021\n\ttargetkey\030\005 \001(\005\"R\n\020SynchMon"
    "sterPath\022\016\n\006charid\030\001 \002(\003\022.\n\004path\030\002 \002(\0132 "
    ".PlayerSynch.MonsterPathToPlayer\"M\n\017Sync"
    "hBaseToGate\022\016\n\006charid\030\001 \002(\003\022*\n\004info\030\002 \002("
    "\0132\034.PlayerSynch.SynchPlayerBase\"a\n\nSynch"
    "Skill\022\017\n\007skillID\030\001 \001(\005\022\021\n\tobjectKey\030\002 \001("
    "\005\022\014\n\004posX\030\003 \001(\005\022\014\n\004posY\030\004 \001(\005\022\023\n\013surplus"
    "Time\030\005 \001(\005\",\n\tEquipData\022\n\n\002id\030\001 \001(\005\022\023\n\013s"
    "trenggrade\030\002 \001(\005\"\245\005\n\017SynchPlayerBase\022\016\n\006"
    "charid\030\001 \002(\003\022\013\n\003key\030\002 \002(\005\022\014\n\004name\030\003 \002(\t\022"
    "\n\n\002hp\030\004 \002(\005\022\r\n\005hpmax\030\005 \002(\005\022\n\n\002mp\030\006 \002(\005\022\r"
    "\n\005mpmax\030\007 \002(\005\022\014\n\004xpos\030\010 \002(\005\022\014\n\004ypos\030\t \002("
    "\005\022\022\n\nprofession\030\n \002(\005\022\021\n\tmovespeed\030\013 \002(\005"
    "\022\r\n\005state\030\014 \002(\005\022\017\n\007country\030\r \002(\005\022!\n\003pos\030"
    "\016 \003(\0132\024.PlayerSynch.CharPos\022\013\n\003sex\030\017 \002(\010"
    "\022\'\n\003buf\030\020 \003(\0132\032.PlayerSynch.SynchBuffCha"
    "r\022\r\n\005horse\030\021 \001(\005\022\n\n\002lv\030\022 \001(\005\022\017\n\007titleid\030"
    "\023 \002(\005\022\022\n\nfightpower\030\024 \002(\005\022%\n\005equip\030\025 \001(\013"
    "2\026.PlayerSynch.EquipData\022\023\n\013magicweapon\030"
    "\026 \001(\005\022\017\n\007costume\030\027 \002(\005\022\020\n\010clanname\030\030 \001(\t"
    "\022\016\n\006clanid\030\031 \001(\r\022\r\n\005viplv\030\032 \001(\r\022\017\n\007clanj"
    "ob\030\033 \001(\r\022\020\n\010clanicon\030\034 \001(\005\022\020\n\010sinvalue\030\035"
    " \001(\005\022\021\n\tfashionID\030\036 \001(\005\022*\n\tskillData\030\037 \001"
    "(\0132\027.PlayerSynch.SynchSkill\022/\n\nmeditatio"
    "n\030  \001(\0132\033.PlayerSynch.MeditationInfo\022\022\n\n"
    "distortion\030! \001(\005\"q\n\016MeditationInfo\022\021\n\tta"
    "rgetkey\030\001 \002(\005\022\014\n\004xpos\030\002 \001(\005\022\014\n\004ypos\030\003 \001("
    "\005\022\030\n\020targetgirlwarkey\030\004 \001(\005\022\026\n\016selfgirlw"
    "arkey\030\005 \001(\005\"Q\n\022SynchMonsterToGate\022\016\n\006cha"
    "rid\030\001 \002(\003\022+\n\004info\030\002 \002(\0132\035.PlayerSynch.Sy"
    "nchMonsterBase\"\212\002\n\020SynchMonsterBase\022\n\n\002i"
    "d\030\001 \002(\005\022\013\n\003key\030\002 \002(\005\022\n\n\002hp\030\003 \002(\005\022\n\n\002mp\030\004"
    " \002(\005\022\014\n\004xpos\030\005 \002(\005\022\014\n\004ypos\030\006 \002(\005\022\017\n\007coun"
    "try\030\007 \002(\005\022\r\n\005hpmax\030\010 \001(\005\022\r\n\005mpmax\030\t \001(\005\022"
    "\'\n\003buf\030\n \003(\0132\032.PlayerSynch.SynchBuffChar"
    "\022\014\n\004name\030\013 \001(\t\022\021\n\tmovespeed\030\014 \002(\005\022\r\n\005sta"
    "te\030\r \002(\005\022!\n\003pos\030\016 \003(\0132\024.PlayerSynch.Char"
    "Pos\"\272\003\n\023SynchCompeteMonster\022\n\n\002id\030\001 \002(\005\022"
    "\013\n\003key\030\002 \002(\005\022\014\n\004name\030\003 \002(\t\022\n\n\002hp\030\004 \002(\005\022\r"
    "\n\005hpmax\030\005 \002(\005\022\n\n\002mp\030\006 \002(\005\022\r\n\005mpmax\030\007 \002(\005"
    "\022\014\n\004xpos\030\010 \002(\005\022\014\n\004ypos\030\t \002(\005\022\022\n\nprofessi"
    "on\030\n \002(\005\022\021\n\tmovespeed\030\013 \002(\005\022\017\n\007country\030\014"
    " \002(\005\022\013\n\003sex\030\r \002(\010\022\'\n\003buf\030\016 \003(\0132\032.PlayerS"
    "ynch.SynchBuffChar\022\n\n\002lv\030\017 \001(\005\022\017\n\007titlei"
    "d\030\020 \002(\005\022%\n\005equip\030\021 \002(\0132\026.PlayerSynch.Equ"
    "ipData\022\023\n\013magicweapon\030\022 \001(\005\022\017\n\007costume\030\023"
    " \002(\005\022\020\n\010clanname\030\024 \001(\t\022\r\n\005viplv\030\025 \001(\r\022\017\n"
    "\007fashion\030\026 \001(\005\022\017\n\007horseid\030\027 \001(\005\022\017\n\007clanJ"
    "ob\030\030 \001(\005\"+\n\rSynchBuffChar\022\n\n\002id\030\001 \002(\005\022\016\n"
    "\006onlyid\030\002 \002(\r\"J\n\nPathToGate\022\020\n\010mycharid\030"
    "\001 \002(\003\022*\n\004path\030\002 \002(\0132\034.PlayerSynch.PathTo"
    "AllPlayer\"G\n\017SynchInfoToPath\022\016\n\006charid\030\001"
    " \002(\003\022$\n\004info\030\002 \002(\0132\026.PlayerSynch.SynchIn"
    "fo\"<\n\tSynchInfo\022\014\n\004type\030\001 \002(\005\022!\n\003pos\030\002 \003"
    "(\0132\024.PlayerSynch.CharPos\"N\n\nCharPosRet\022\014"
    "\n\004type\030\002 \002(\005\022\017\n\007isvalid\030\003 \002(\005\022!\n\003pos\030\004 \001"
    "(\0132\024.PlayerSynch.CharPos\"%\n\007CharPos\022\014\n\004x"
    "pos\030\001 \002(\005\022\014\n\004ypos\030\002 \002(\005\"I\n\013ReqFindPath\022\r"
    "\n\005mapid\030\001 \003(\003\022+\n\007monster\030\002 \003(\0132\032.PlayerS"
    "ynch.MapMonsterPos\"<\n\rMapMonsterPos\022+\n\007m"
    "onster\030\001 \003(\0132\032.PlayerSynch.SingleFindPos"
    "\";\n\rSingleFindPos\022\013\n\003key\030\001 \002(\005\022\013\n\003pos\030\002 "
    "\001(\004\022\020\n\010distance\030\003 \001(\005\"K\n\017AckPathPosition"
    "\022\r\n\005mapid\030\001 \003(\003\022)\n\004path\030\002 \003(\0132\033.PlayerSy"
    "nch.MapMonsterPath\">\n\016MapMonsterPath\022,\n\004"
    "path\030\001 \003(\0132\036.PlayerSynch.SingleMonsterPa"
    "th\"-\n\021SingleMonsterPath\022\013\n\003key\030\001 \002(\005\022\013\n\003"
    "pos\030\002 \003(\005\"\027\n\025ReqInstanceMonsterPos\"M\n\025Re"
    "tInstanceMonsterPos\0224\n\007posInfo\030\001 \003(\0132#.P"
    "layerSynch.InstanceMonsterPosInfo\"I\n\026Ins"
    "tanceMonsterPosInfo\022\r\n\005monID\030\001 \002(\005\022\016\n\006mo"
    "nKey\030\002 \002(\005\022\020\n\010monXYpos\030\003 \002(\005\"E\n\023GirlWarP"
    "athToPlayer\022\013\n\003key\030\001 \002(\005\022!\n\003pos\030\002 \003(\0132\024."
    "PlayerSynch.CharPos\"\254\001\n\014SynchGirlWar\022\n\n\002"
    "id\030\001 \002(\005\022\013\n\003key\030\002 \001(\005\022\020\n\010ownerkey\030\003 \001(\005\022"
    "\n\n\002lv\030\004 \001(\005\022\n\n\002hp\030\005 \001(\005\022\r\n\005hpmax\030\006 \001(\005\022\014"
    "\n\004xpos\030\007 \001(\005\022\014\n\004ypos\030\010 \001(\005\022\027\n\017targetplay"
    "erkey\030\t \001(\005\022\025\n\rtargetgirlkey\030\n \001(\005\"B\n\021Re"
    "motePlayerEquip\022\014\n\004type\030\001 \001(\005\022\n\n\002id\030\002 \001("
    "\005\022\023\n\013strengGrade\030\003 \001(\005\"T\n\020AlterPlayerEqu"
    "ip\022\020\n\010playerid\030\001 \001(\003\022.\n\006equips\030\002 \003(\0132\036.P"
    "layerSynch.RemotePlayerEquip", 3468);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Map/SynchPath.proto", &protobuf_RegisterTypes);
  PathToAllPlayer::default_instance_ = new PathToAllPlayer();
  MonsterPathToPlayer::default_instance_ = new MonsterPathToPlayer();
  SynchMonsterPath::default_instance_ = new SynchMonsterPath();
  SynchBaseToGate::default_instance_ = new SynchBaseToGate();
  SynchSkill::default_instance_ = new SynchSkill();
  EquipData::default_instance_ = new EquipData();
  SynchPlayerBase::default_instance_ = new SynchPlayerBase();
  MeditationInfo::default_instance_ = new MeditationInfo();
  SynchMonsterToGate::default_instance_ = new SynchMonsterToGate();
  SynchMonsterBase::default_instance_ = new SynchMonsterBase();
  SynchCompeteMonster::default_instance_ = new SynchCompeteMonster();
  SynchBuffChar::default_instance_ = new SynchBuffChar();
  PathToGate::default_instance_ = new PathToGate();
  SynchInfoToPath::default_instance_ = new SynchInfoToPath();
  SynchInfo::default_instance_ = new SynchInfo();
  CharPosRet::default_instance_ = new CharPosRet();
  CharPos::default_instance_ = new CharPos();
  ReqFindPath::default_instance_ = new ReqFindPath();
  MapMonsterPos::default_instance_ = new MapMonsterPos();
  SingleFindPos::default_instance_ = new SingleFindPos();
  AckPathPosition::default_instance_ = new AckPathPosition();
  MapMonsterPath::default_instance_ = new MapMonsterPath();
  SingleMonsterPath::default_instance_ = new SingleMonsterPath();
  ReqInstanceMonsterPos::default_instance_ = new ReqInstanceMonsterPos();
  RetInstanceMonsterPos::default_instance_ = new RetInstanceMonsterPos();
  InstanceMonsterPosInfo::default_instance_ = new InstanceMonsterPosInfo();
  GirlWarPathToPlayer::default_instance_ = new GirlWarPathToPlayer();
  SynchGirlWar::default_instance_ = new SynchGirlWar();
  RemotePlayerEquip::default_instance_ = new RemotePlayerEquip();
  AlterPlayerEquip::default_instance_ = new AlterPlayerEquip();
  PathToAllPlayer::default_instance_->InitAsDefaultInstance();
  MonsterPathToPlayer::default_instance_->InitAsDefaultInstance();
  SynchMonsterPath::default_instance_->InitAsDefaultInstance();
  SynchBaseToGate::default_instance_->InitAsDefaultInstance();
  SynchSkill::default_instance_->InitAsDefaultInstance();
  EquipData::default_instance_->InitAsDefaultInstance();
  SynchPlayerBase::default_instance_->InitAsDefaultInstance();
  MeditationInfo::default_instance_->InitAsDefaultInstance();
  SynchMonsterToGate::default_instance_->InitAsDefaultInstance();
  SynchMonsterBase::default_instance_->InitAsDefaultInstance();
  SynchCompeteMonster::default_instance_->InitAsDefaultInstance();
  SynchBuffChar::default_instance_->InitAsDefaultInstance();
  PathToGate::default_instance_->InitAsDefaultInstance();
  SynchInfoToPath::default_instance_->InitAsDefaultInstance();
  SynchInfo::default_instance_->InitAsDefaultInstance();
  CharPosRet::default_instance_->InitAsDefaultInstance();
  CharPos::default_instance_->InitAsDefaultInstance();
  ReqFindPath::default_instance_->InitAsDefaultInstance();
  MapMonsterPos::default_instance_->InitAsDefaultInstance();
  SingleFindPos::default_instance_->InitAsDefaultInstance();
  AckPathPosition::default_instance_->InitAsDefaultInstance();
  MapMonsterPath::default_instance_->InitAsDefaultInstance();
  SingleMonsterPath::default_instance_->InitAsDefaultInstance();
  ReqInstanceMonsterPos::default_instance_->InitAsDefaultInstance();
  RetInstanceMonsterPos::default_instance_->InitAsDefaultInstance();
  InstanceMonsterPosInfo::default_instance_->InitAsDefaultInstance();
  GirlWarPathToPlayer::default_instance_->InitAsDefaultInstance();
  SynchGirlWar::default_instance_->InitAsDefaultInstance();
  RemotePlayerEquip::default_instance_->InitAsDefaultInstance();
  AlterPlayerEquip::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Map_2fSynchPath_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Map_2fSynchPath_2eproto {
  StaticDescriptorInitializer_Map_2fSynchPath_2eproto() {
    protobuf_AddDesc_Map_2fSynchPath_2eproto();
  }
} static_descriptor_initializer_Map_2fSynchPath_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int PathToAllPlayer::kCharidFieldNumber;
const int PathToAllPlayer::kPosFieldNumber;
#endif  // !_MSC_VER

PathToAllPlayer::PathToAllPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PathToAllPlayer::InitAsDefaultInstance() {
}

PathToAllPlayer::PathToAllPlayer(const PathToAllPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PathToAllPlayer::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathToAllPlayer::~PathToAllPlayer() {
  SharedDtor();
}

void PathToAllPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void PathToAllPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathToAllPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathToAllPlayer_descriptor_;
}

const PathToAllPlayer& PathToAllPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

PathToAllPlayer* PathToAllPlayer::default_instance_ = NULL;

PathToAllPlayer* PathToAllPlayer::New() const {
  return new PathToAllPlayer;
}

void PathToAllPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
  }
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathToAllPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // repeated .PlayerSynch.CharPos pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PathToAllPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // repeated .PlayerSynch.CharPos pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PathToAllPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // repeated .PlayerSynch.CharPos pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PathToAllPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

  }
  // repeated .PlayerSynch.CharPos pos = 2;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathToAllPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathToAllPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathToAllPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathToAllPlayer::MergeFrom(const PathToAllPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathToAllPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathToAllPlayer::CopyFrom(const PathToAllPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathToAllPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pos_size(); i++) {
    if (!this->pos(i).IsInitialized()) return false;
  }
  return true;
}

void PathToAllPlayer::Swap(PathToAllPlayer* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathToAllPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathToAllPlayer_descriptor_;
  metadata.reflection = PathToAllPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MonsterPathToPlayer::kKeyFieldNumber;
const int MonsterPathToPlayer::kMovespeedFieldNumber;
const int MonsterPathToPlayer::kStateFieldNumber;
const int MonsterPathToPlayer::kPosFieldNumber;
const int MonsterPathToPlayer::kTargetkeyFieldNumber;
#endif  // !_MSC_VER

MonsterPathToPlayer::MonsterPathToPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MonsterPathToPlayer::InitAsDefaultInstance() {
}

MonsterPathToPlayer::MonsterPathToPlayer(const MonsterPathToPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MonsterPathToPlayer::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  movespeed_ = 0;
  state_ = 0;
  targetkey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MonsterPathToPlayer::~MonsterPathToPlayer() {
  SharedDtor();
}

void MonsterPathToPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MonsterPathToPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MonsterPathToPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MonsterPathToPlayer_descriptor_;
}

const MonsterPathToPlayer& MonsterPathToPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

MonsterPathToPlayer* MonsterPathToPlayer::default_instance_ = NULL;

MonsterPathToPlayer* MonsterPathToPlayer::New() const {
  return new MonsterPathToPlayer;
}

void MonsterPathToPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    movespeed_ = 0;
    state_ = 0;
    targetkey_ = 0;
  }
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MonsterPathToPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_movespeed;
        break;
      }

      // required int32 movespeed = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_state;
        break;
      }

      // required int32 state = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // repeated .PlayerSynch.CharPos pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        if (input->ExpectTag(40)) goto parse_targetkey;
        break;
      }

      // optional int32 targetkey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetkey_)));
          set_has_targetkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MonsterPathToPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // required int32 movespeed = 2;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->movespeed(), output);
  }

  // required int32 state = 3;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->state(), output);
  }

  // repeated .PlayerSynch.CharPos pos = 4;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(i), output);
  }

  // optional int32 targetkey = 5;
  if (has_targetkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->targetkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MonsterPathToPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // required int32 movespeed = 2;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->movespeed(), target);
  }

  // required int32 state = 3;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->state(), target);
  }

  // repeated .PlayerSynch.CharPos pos = 4;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(i), target);
  }

  // optional int32 targetkey = 5;
  if (has_targetkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->targetkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MonsterPathToPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // required int32 movespeed = 2;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

    // required int32 state = 3;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // optional int32 targetkey = 5;
    if (has_targetkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetkey());
    }

  }
  // repeated .PlayerSynch.CharPos pos = 4;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MonsterPathToPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MonsterPathToPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MonsterPathToPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MonsterPathToPlayer::MergeFrom(const MonsterPathToPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_targetkey()) {
      set_targetkey(from.targetkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MonsterPathToPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MonsterPathToPlayer::CopyFrom(const MonsterPathToPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MonsterPathToPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  for (int i = 0; i < pos_size(); i++) {
    if (!this->pos(i).IsInitialized()) return false;
  }
  return true;
}

void MonsterPathToPlayer::Swap(MonsterPathToPlayer* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(state_, other->state_);
    pos_.Swap(&other->pos_);
    std::swap(targetkey_, other->targetkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MonsterPathToPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MonsterPathToPlayer_descriptor_;
  metadata.reflection = MonsterPathToPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchMonsterPath::kCharidFieldNumber;
const int SynchMonsterPath::kPathFieldNumber;
#endif  // !_MSC_VER

SynchMonsterPath::SynchMonsterPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchMonsterPath::InitAsDefaultInstance() {
  path_ = const_cast< ::PlayerSynch::MonsterPathToPlayer*>(&::PlayerSynch::MonsterPathToPlayer::default_instance());
}

SynchMonsterPath::SynchMonsterPath(const SynchMonsterPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchMonsterPath::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  path_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchMonsterPath::~SynchMonsterPath() {
  SharedDtor();
}

void SynchMonsterPath::SharedDtor() {
  if (this != default_instance_) {
    delete path_;
  }
}

void SynchMonsterPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchMonsterPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchMonsterPath_descriptor_;
}

const SynchMonsterPath& SynchMonsterPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

SynchMonsterPath* SynchMonsterPath::default_instance_ = NULL;

SynchMonsterPath* SynchMonsterPath::New() const {
  return new SynchMonsterPath;
}

void SynchMonsterPath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_path()) {
      if (path_ != NULL) path_->::PlayerSynch::MonsterPathToPlayer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchMonsterPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required .PlayerSynch.MonsterPathToPlayer path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchMonsterPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required .PlayerSynch.MonsterPathToPlayer path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchMonsterPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required .PlayerSynch.MonsterPathToPlayer path = 2;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchMonsterPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required .PlayerSynch.MonsterPathToPlayer path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchMonsterPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchMonsterPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchMonsterPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchMonsterPath::MergeFrom(const SynchMonsterPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_path()) {
      mutable_path()->::PlayerSynch::MonsterPathToPlayer::MergeFrom(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchMonsterPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchMonsterPath::CopyFrom(const SynchMonsterPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchMonsterPath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_path()) {
    if (!this->path().IsInitialized()) return false;
  }
  return true;
}

void SynchMonsterPath::Swap(SynchMonsterPath* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchMonsterPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchMonsterPath_descriptor_;
  metadata.reflection = SynchMonsterPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchBaseToGate::kCharidFieldNumber;
const int SynchBaseToGate::kInfoFieldNumber;
#endif  // !_MSC_VER

SynchBaseToGate::SynchBaseToGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchBaseToGate::InitAsDefaultInstance() {
  info_ = const_cast< ::PlayerSynch::SynchPlayerBase*>(&::PlayerSynch::SynchPlayerBase::default_instance());
}

SynchBaseToGate::SynchBaseToGate(const SynchBaseToGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchBaseToGate::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchBaseToGate::~SynchBaseToGate() {
  SharedDtor();
}

void SynchBaseToGate::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SynchBaseToGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchBaseToGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchBaseToGate_descriptor_;
}

const SynchBaseToGate& SynchBaseToGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

SynchBaseToGate* SynchBaseToGate::default_instance_ = NULL;

SynchBaseToGate* SynchBaseToGate::New() const {
  return new SynchBaseToGate;
}

void SynchBaseToGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerSynch::SynchPlayerBase::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchBaseToGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // required .PlayerSynch.SynchPlayerBase info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchBaseToGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required .PlayerSynch.SynchPlayerBase info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchBaseToGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required .PlayerSynch.SynchPlayerBase info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchBaseToGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required .PlayerSynch.SynchPlayerBase info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchBaseToGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchBaseToGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchBaseToGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchBaseToGate::MergeFrom(const SynchBaseToGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_info()) {
      mutable_info()->::PlayerSynch::SynchPlayerBase::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchBaseToGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchBaseToGate::CopyFrom(const SynchBaseToGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchBaseToGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SynchBaseToGate::Swap(SynchBaseToGate* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchBaseToGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchBaseToGate_descriptor_;
  metadata.reflection = SynchBaseToGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchSkill::kSkillIDFieldNumber;
const int SynchSkill::kObjectKeyFieldNumber;
const int SynchSkill::kPosXFieldNumber;
const int SynchSkill::kPosYFieldNumber;
const int SynchSkill::kSurplusTimeFieldNumber;
#endif  // !_MSC_VER

SynchSkill::SynchSkill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchSkill::InitAsDefaultInstance() {
}

SynchSkill::SynchSkill(const SynchSkill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchSkill::SharedCtor() {
  _cached_size_ = 0;
  skillid_ = 0;
  objectkey_ = 0;
  posx_ = 0;
  posy_ = 0;
  surplustime_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchSkill::~SynchSkill() {
  SharedDtor();
}

void SynchSkill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SynchSkill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchSkill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchSkill_descriptor_;
}

const SynchSkill& SynchSkill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

SynchSkill* SynchSkill::default_instance_ = NULL;

SynchSkill* SynchSkill::New() const {
  return new SynchSkill;
}

void SynchSkill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    skillid_ = 0;
    objectkey_ = 0;
    posx_ = 0;
    posy_ = 0;
    surplustime_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchSkill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 skillID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &skillid_)));
          set_has_skillid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_objectKey;
        break;
      }

      // optional int32 objectKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_objectKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &objectkey_)));
          set_has_objectkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_posX;
        break;
      }

      // optional int32 posX = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posX:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posx_)));
          set_has_posx();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_posY;
        break;
      }

      // optional int32 posY = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_posY:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &posy_)));
          set_has_posy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_surplusTime;
        break;
      }

      // optional int32 surplusTime = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_surplusTime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &surplustime_)));
          set_has_surplustime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchSkill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 skillID = 1;
  if (has_skillid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->skillid(), output);
  }

  // optional int32 objectKey = 2;
  if (has_objectkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->objectkey(), output);
  }

  // optional int32 posX = 3;
  if (has_posx()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->posx(), output);
  }

  // optional int32 posY = 4;
  if (has_posy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->posy(), output);
  }

  // optional int32 surplusTime = 5;
  if (has_surplustime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->surplustime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchSkill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 skillID = 1;
  if (has_skillid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->skillid(), target);
  }

  // optional int32 objectKey = 2;
  if (has_objectkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->objectkey(), target);
  }

  // optional int32 posX = 3;
  if (has_posx()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->posx(), target);
  }

  // optional int32 posY = 4;
  if (has_posy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->posy(), target);
  }

  // optional int32 surplusTime = 5;
  if (has_surplustime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->surplustime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchSkill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 skillID = 1;
    if (has_skillid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->skillid());
    }

    // optional int32 objectKey = 2;
    if (has_objectkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->objectkey());
    }

    // optional int32 posX = 3;
    if (has_posx()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posx());
    }

    // optional int32 posY = 4;
    if (has_posy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->posy());
    }

    // optional int32 surplusTime = 5;
    if (has_surplustime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->surplustime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchSkill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchSkill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchSkill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchSkill::MergeFrom(const SynchSkill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_skillid()) {
      set_skillid(from.skillid());
    }
    if (from.has_objectkey()) {
      set_objectkey(from.objectkey());
    }
    if (from.has_posx()) {
      set_posx(from.posx());
    }
    if (from.has_posy()) {
      set_posy(from.posy());
    }
    if (from.has_surplustime()) {
      set_surplustime(from.surplustime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchSkill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchSkill::CopyFrom(const SynchSkill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchSkill::IsInitialized() const {

  return true;
}

void SynchSkill::Swap(SynchSkill* other) {
  if (other != this) {
    std::swap(skillid_, other->skillid_);
    std::swap(objectkey_, other->objectkey_);
    std::swap(posx_, other->posx_);
    std::swap(posy_, other->posy_);
    std::swap(surplustime_, other->surplustime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchSkill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchSkill_descriptor_;
  metadata.reflection = SynchSkill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int EquipData::kIdFieldNumber;
const int EquipData::kStrenggradeFieldNumber;
#endif  // !_MSC_VER

EquipData::EquipData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void EquipData::InitAsDefaultInstance() {
}

EquipData::EquipData(const EquipData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void EquipData::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  strenggrade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

EquipData::~EquipData() {
  SharedDtor();
}

void EquipData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void EquipData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* EquipData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return EquipData_descriptor_;
}

const EquipData& EquipData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

EquipData* EquipData::default_instance_ = NULL;

EquipData* EquipData::New() const {
  return new EquipData;
}

void EquipData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    strenggrade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool EquipData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_strenggrade;
        break;
      }

      // optional int32 strenggrade = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strenggrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strenggrade_)));
          set_has_strenggrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void EquipData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 strenggrade = 2;
  if (has_strenggrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->strenggrade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* EquipData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 strenggrade = 2;
  if (has_strenggrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->strenggrade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int EquipData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 strenggrade = 2;
    if (has_strenggrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strenggrade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void EquipData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const EquipData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const EquipData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void EquipData::MergeFrom(const EquipData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_strenggrade()) {
      set_strenggrade(from.strenggrade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void EquipData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void EquipData::CopyFrom(const EquipData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool EquipData::IsInitialized() const {

  return true;
}

void EquipData::Swap(EquipData* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(strenggrade_, other->strenggrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata EquipData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = EquipData_descriptor_;
  metadata.reflection = EquipData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchPlayerBase::kCharidFieldNumber;
const int SynchPlayerBase::kKeyFieldNumber;
const int SynchPlayerBase::kNameFieldNumber;
const int SynchPlayerBase::kHpFieldNumber;
const int SynchPlayerBase::kHpmaxFieldNumber;
const int SynchPlayerBase::kMpFieldNumber;
const int SynchPlayerBase::kMpmaxFieldNumber;
const int SynchPlayerBase::kXposFieldNumber;
const int SynchPlayerBase::kYposFieldNumber;
const int SynchPlayerBase::kProfessionFieldNumber;
const int SynchPlayerBase::kMovespeedFieldNumber;
const int SynchPlayerBase::kStateFieldNumber;
const int SynchPlayerBase::kCountryFieldNumber;
const int SynchPlayerBase::kPosFieldNumber;
const int SynchPlayerBase::kSexFieldNumber;
const int SynchPlayerBase::kBufFieldNumber;
const int SynchPlayerBase::kHorseFieldNumber;
const int SynchPlayerBase::kLvFieldNumber;
const int SynchPlayerBase::kTitleidFieldNumber;
const int SynchPlayerBase::kFightpowerFieldNumber;
const int SynchPlayerBase::kEquipFieldNumber;
const int SynchPlayerBase::kMagicweaponFieldNumber;
const int SynchPlayerBase::kCostumeFieldNumber;
const int SynchPlayerBase::kClannameFieldNumber;
const int SynchPlayerBase::kClanidFieldNumber;
const int SynchPlayerBase::kViplvFieldNumber;
const int SynchPlayerBase::kClanjobFieldNumber;
const int SynchPlayerBase::kClaniconFieldNumber;
const int SynchPlayerBase::kSinvalueFieldNumber;
const int SynchPlayerBase::kFashionIDFieldNumber;
const int SynchPlayerBase::kSkillDataFieldNumber;
const int SynchPlayerBase::kMeditationFieldNumber;
const int SynchPlayerBase::kDistortionFieldNumber;
#endif  // !_MSC_VER

SynchPlayerBase::SynchPlayerBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchPlayerBase::InitAsDefaultInstance() {
  equip_ = const_cast< ::PlayerSynch::EquipData*>(&::PlayerSynch::EquipData::default_instance());
  skilldata_ = const_cast< ::PlayerSynch::SynchSkill*>(&::PlayerSynch::SynchSkill::default_instance());
  meditation_ = const_cast< ::PlayerSynch::MeditationInfo*>(&::PlayerSynch::MeditationInfo::default_instance());
}

SynchPlayerBase::SynchPlayerBase(const SynchPlayerBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchPlayerBase::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  key_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hp_ = 0;
  hpmax_ = 0;
  mp_ = 0;
  mpmax_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  profession_ = 0;
  movespeed_ = 0;
  state_ = 0;
  country_ = 0;
  sex_ = false;
  horse_ = 0;
  lv_ = 0;
  titleid_ = 0;
  fightpower_ = 0;
  equip_ = NULL;
  magicweapon_ = 0;
  costume_ = 0;
  clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  clanid_ = 0u;
  viplv_ = 0u;
  clanjob_ = 0u;
  clanicon_ = 0;
  sinvalue_ = 0;
  fashionid_ = 0;
  skilldata_ = NULL;
  meditation_ = NULL;
  distortion_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchPlayerBase::~SynchPlayerBase() {
  SharedDtor();
}

void SynchPlayerBase::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (this != default_instance_) {
    delete equip_;
    delete skilldata_;
    delete meditation_;
  }
}

void SynchPlayerBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchPlayerBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchPlayerBase_descriptor_;
}

const SynchPlayerBase& SynchPlayerBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

SynchPlayerBase* SynchPlayerBase::default_instance_ = NULL;

SynchPlayerBase* SynchPlayerBase::New() const {
  return new SynchPlayerBase;
}

void SynchPlayerBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    key_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    hp_ = 0;
    hpmax_ = 0;
    mp_ = 0;
    mpmax_ = 0;
    xpos_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ypos_ = 0;
    profession_ = 0;
    movespeed_ = 0;
    state_ = 0;
    country_ = 0;
    sex_ = false;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    horse_ = 0;
    lv_ = 0;
    titleid_ = 0;
    fightpower_ = 0;
    if (has_equip()) {
      if (equip_ != NULL) equip_->::PlayerSynch::EquipData::Clear();
    }
    magicweapon_ = 0;
    costume_ = 0;
    if (has_clanname()) {
      if (clanname_ != &::google::protobuf::internal::kEmptyString) {
        clanname_->clear();
      }
    }
  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    clanid_ = 0u;
    viplv_ = 0u;
    clanjob_ = 0u;
    clanicon_ = 0;
    sinvalue_ = 0;
    fashionid_ = 0;
    if (has_skilldata()) {
      if (skilldata_ != NULL) skilldata_->::PlayerSynch::SynchSkill::Clear();
    }
    if (has_meditation()) {
      if (meditation_ != NULL) meditation_->::PlayerSynch::MeditationInfo::Clear();
    }
  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    distortion_ = 0;
  }
  pos_.Clear();
  buf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchPlayerBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // required int32 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // required int32 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hpmax;
        break;
      }

      // required int32 hpmax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mp;
        break;
      }

      // required int32 mp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mpmax;
        break;
      }

      // required int32 mpmax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mpmax_)));
          set_has_mpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_xpos;
        break;
      }

      // required int32 xpos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ypos;
        break;
      }

      // required int32 ypos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_profession;
        break;
      }

      // required int32 profession = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_movespeed;
        break;
      }

      // required int32 movespeed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_state;
        break;
      }

      // required int32 state = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_country;
        break;
      }

      // required int32 country = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_pos;
        break;
      }

      // repeated .PlayerSynch.CharPos pos = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_pos;
        if (input->ExpectTag(120)) goto parse_sex;
        break;
      }

      // required bool sex = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_buf;
        break;
      }

      // repeated .PlayerSynch.SynchBuffChar buf = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(130)) goto parse_buf;
        if (input->ExpectTag(136)) goto parse_horse;
        break;
      }

      // optional int32 horse = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horse:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horse_)));
          set_has_horse();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_lv;
        break;
      }

      // optional int32 lv = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_titleid;
        break;
      }

      // required int32 titleid = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(160)) goto parse_fightpower;
        break;
      }

      // required int32 fightpower = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fightpower:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fightpower_)));
          set_has_fightpower();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(170)) goto parse_equip;
        break;
      }

      // optional .PlayerSynch.EquipData equip = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_magicweapon;
        break;
      }

      // optional int32 magicweapon = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicweapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicweapon_)));
          set_has_magicweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_costume;
        break;
      }

      // required int32 costume = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costume_)));
          set_has_costume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(194)) goto parse_clanname;
        break;
      }

      // optional string clanname = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clanname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clanname().data(), this->clanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(200)) goto parse_clanid;
        break;
      }

      // optional uint32 clanid = 25;
      case 25: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clanid_)));
          set_has_clanid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(208)) goto parse_viplv;
        break;
      }

      // optional uint32 viplv = 26;
      case 26: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(216)) goto parse_clanjob;
        break;
      }

      // optional uint32 clanjob = 27;
      case 27: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanjob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &clanjob_)));
          set_has_clanjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(224)) goto parse_clanicon;
        break;
      }

      // optional int32 clanicon = 28;
      case 28: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanicon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanicon_)));
          set_has_clanicon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(232)) goto parse_sinvalue;
        break;
      }

      // optional int32 sinvalue = 29;
      case 29: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sinvalue:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sinvalue_)));
          set_has_sinvalue();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(240)) goto parse_fashionID;
        break;
      }

      // optional int32 fashionID = 30;
      case 30: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashionID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashionid_)));
          set_has_fashionid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(250)) goto parse_skillData;
        break;
      }

      // optional .PlayerSynch.SynchSkill skillData = 31;
      case 31: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_skillData:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_skilldata()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(258)) goto parse_meditation;
        break;
      }

      // optional .PlayerSynch.MeditationInfo meditation = 32;
      case 32: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_meditation:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_meditation()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(264)) goto parse_distortion;
        break;
      }

      // optional int32 distortion = 33;
      case 33: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distortion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distortion_)));
          set_has_distortion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchPlayerBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required int32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }

  // required int32 hpmax = 5;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hpmax(), output);
  }

  // required int32 mp = 6;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mp(), output);
  }

  // required int32 mpmax = 7;
  if (has_mpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mpmax(), output);
  }

  // required int32 xpos = 8;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->xpos(), output);
  }

  // required int32 ypos = 9;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ypos(), output);
  }

  // required int32 profession = 10;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->profession(), output);
  }

  // required int32 movespeed = 11;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->movespeed(), output);
  }

  // required int32 state = 12;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->state(), output);
  }

  // required int32 country = 13;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->country(), output);
  }

  // repeated .PlayerSynch.CharPos pos = 14;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->pos(i), output);
  }

  // required bool sex = 15;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(15, this->sex(), output);
  }

  // repeated .PlayerSynch.SynchBuffChar buf = 16;
  for (int i = 0; i < this->buf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      16, this->buf(i), output);
  }

  // optional int32 horse = 17;
  if (has_horse()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(17, this->horse(), output);
  }

  // optional int32 lv = 18;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->lv(), output);
  }

  // required int32 titleid = 19;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->titleid(), output);
  }

  // required int32 fightpower = 20;
  if (has_fightpower()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(20, this->fightpower(), output);
  }

  // optional .PlayerSynch.EquipData equip = 21;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      21, this->equip(), output);
  }

  // optional int32 magicweapon = 22;
  if (has_magicweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->magicweapon(), output);
  }

  // required int32 costume = 23;
  if (has_costume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->costume(), output);
  }

  // optional string clanname = 24;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      24, this->clanname(), output);
  }

  // optional uint32 clanid = 25;
  if (has_clanid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(25, this->clanid(), output);
  }

  // optional uint32 viplv = 26;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(26, this->viplv(), output);
  }

  // optional uint32 clanjob = 27;
  if (has_clanjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(27, this->clanjob(), output);
  }

  // optional int32 clanicon = 28;
  if (has_clanicon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(28, this->clanicon(), output);
  }

  // optional int32 sinvalue = 29;
  if (has_sinvalue()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(29, this->sinvalue(), output);
  }

  // optional int32 fashionID = 30;
  if (has_fashionid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(30, this->fashionid(), output);
  }

  // optional .PlayerSynch.SynchSkill skillData = 31;
  if (has_skilldata()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      31, this->skilldata(), output);
  }

  // optional .PlayerSynch.MeditationInfo meditation = 32;
  if (has_meditation()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      32, this->meditation(), output);
  }

  // optional int32 distortion = 33;
  if (has_distortion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(33, this->distortion(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchPlayerBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->key(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required int32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hp(), target);
  }

  // required int32 hpmax = 5;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hpmax(), target);
  }

  // required int32 mp = 6;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mp(), target);
  }

  // required int32 mpmax = 7;
  if (has_mpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mpmax(), target);
  }

  // required int32 xpos = 8;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->xpos(), target);
  }

  // required int32 ypos = 9;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ypos(), target);
  }

  // required int32 profession = 10;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->profession(), target);
  }

  // required int32 movespeed = 11;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->movespeed(), target);
  }

  // required int32 state = 12;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->state(), target);
  }

  // required int32 country = 13;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->country(), target);
  }

  // repeated .PlayerSynch.CharPos pos = 14;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->pos(i), target);
  }

  // required bool sex = 15;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(15, this->sex(), target);
  }

  // repeated .PlayerSynch.SynchBuffChar buf = 16;
  for (int i = 0; i < this->buf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        16, this->buf(i), target);
  }

  // optional int32 horse = 17;
  if (has_horse()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(17, this->horse(), target);
  }

  // optional int32 lv = 18;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->lv(), target);
  }

  // required int32 titleid = 19;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->titleid(), target);
  }

  // required int32 fightpower = 20;
  if (has_fightpower()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(20, this->fightpower(), target);
  }

  // optional .PlayerSynch.EquipData equip = 21;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        21, this->equip(), target);
  }

  // optional int32 magicweapon = 22;
  if (has_magicweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->magicweapon(), target);
  }

  // required int32 costume = 23;
  if (has_costume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->costume(), target);
  }

  // optional string clanname = 24;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        24, this->clanname(), target);
  }

  // optional uint32 clanid = 25;
  if (has_clanid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(25, this->clanid(), target);
  }

  // optional uint32 viplv = 26;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(26, this->viplv(), target);
  }

  // optional uint32 clanjob = 27;
  if (has_clanjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(27, this->clanjob(), target);
  }

  // optional int32 clanicon = 28;
  if (has_clanicon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(28, this->clanicon(), target);
  }

  // optional int32 sinvalue = 29;
  if (has_sinvalue()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(29, this->sinvalue(), target);
  }

  // optional int32 fashionID = 30;
  if (has_fashionid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(30, this->fashionid(), target);
  }

  // optional .PlayerSynch.SynchSkill skillData = 31;
  if (has_skilldata()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        31, this->skilldata(), target);
  }

  // optional .PlayerSynch.MeditationInfo meditation = 32;
  if (has_meditation()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        32, this->meditation(), target);
  }

  // optional int32 distortion = 33;
  if (has_distortion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(33, this->distortion(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchPlayerBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 hpmax = 5;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

    // required int32 mp = 6;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // required int32 mpmax = 7;
    if (has_mpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mpmax());
    }

    // required int32 xpos = 8;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 ypos = 9;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

    // required int32 profession = 10;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // required int32 movespeed = 11;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

    // required int32 state = 12;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

    // required int32 country = 13;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // required bool sex = 15;
    if (has_sex()) {
      total_size += 1 + 1;
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // optional int32 horse = 17;
    if (has_horse()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horse());
    }

    // optional int32 lv = 18;
    if (has_lv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // required int32 titleid = 19;
    if (has_titleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

    // required int32 fightpower = 20;
    if (has_fightpower()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fightpower());
    }

    // optional .PlayerSynch.EquipData equip = 21;
    if (has_equip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

    // optional int32 magicweapon = 22;
    if (has_magicweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicweapon());
    }

    // required int32 costume = 23;
    if (has_costume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costume());
    }

    // optional string clanname = 24;
    if (has_clanname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clanname());
    }

  }
  if (_has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    // optional uint32 clanid = 25;
    if (has_clanid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clanid());
    }

    // optional uint32 viplv = 26;
    if (has_viplv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional uint32 clanjob = 27;
    if (has_clanjob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->clanjob());
    }

    // optional int32 clanicon = 28;
    if (has_clanicon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanicon());
    }

    // optional int32 sinvalue = 29;
    if (has_sinvalue()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sinvalue());
    }

    // optional int32 fashionID = 30;
    if (has_fashionid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashionid());
    }

    // optional .PlayerSynch.SynchSkill skillData = 31;
    if (has_skilldata()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->skilldata());
    }

    // optional .PlayerSynch.MeditationInfo meditation = 32;
    if (has_meditation()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->meditation());
    }

  }
  if (_has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    // optional int32 distortion = 33;
    if (has_distortion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distortion());
    }

  }
  // repeated .PlayerSynch.CharPos pos = 14;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos(i));
  }

  // repeated .PlayerSynch.SynchBuffChar buf = 16;
  total_size += 2 * this->buf_size();
  for (int i = 0; i < this->buf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchPlayerBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchPlayerBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchPlayerBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchPlayerBase::MergeFrom(const SynchPlayerBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  buf_.MergeFrom(from.buf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_mpmax()) {
      set_mpmax(from.mpmax());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_horse()) {
      set_horse(from.horse());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
    if (from.has_fightpower()) {
      set_fightpower(from.fightpower());
    }
    if (from.has_equip()) {
      mutable_equip()->::PlayerSynch::EquipData::MergeFrom(from.equip());
    }
    if (from.has_magicweapon()) {
      set_magicweapon(from.magicweapon());
    }
    if (from.has_costume()) {
      set_costume(from.costume());
    }
    if (from.has_clanname()) {
      set_clanname(from.clanname());
    }
  }
  if (from._has_bits_[24 / 32] & (0xffu << (24 % 32))) {
    if (from.has_clanid()) {
      set_clanid(from.clanid());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_clanjob()) {
      set_clanjob(from.clanjob());
    }
    if (from.has_clanicon()) {
      set_clanicon(from.clanicon());
    }
    if (from.has_sinvalue()) {
      set_sinvalue(from.sinvalue());
    }
    if (from.has_fashionid()) {
      set_fashionid(from.fashionid());
    }
    if (from.has_skilldata()) {
      mutable_skilldata()->::PlayerSynch::SynchSkill::MergeFrom(from.skilldata());
    }
    if (from.has_meditation()) {
      mutable_meditation()->::PlayerSynch::MeditationInfo::MergeFrom(from.meditation());
    }
  }
  if (from._has_bits_[32 / 32] & (0xffu << (32 % 32))) {
    if (from.has_distortion()) {
      set_distortion(from.distortion());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchPlayerBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchPlayerBase::CopyFrom(const SynchPlayerBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchPlayerBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x004c5fff) != 0x004c5fff) return false;

  for (int i = 0; i < pos_size(); i++) {
    if (!this->pos(i).IsInitialized()) return false;
  }
  for (int i = 0; i < buf_size(); i++) {
    if (!this->buf(i).IsInitialized()) return false;
  }
  if (has_meditation()) {
    if (!this->meditation().IsInitialized()) return false;
  }
  return true;
}

void SynchPlayerBase::Swap(SynchPlayerBase* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(key_, other->key_);
    std::swap(name_, other->name_);
    std::swap(hp_, other->hp_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(mp_, other->mp_);
    std::swap(mpmax_, other->mpmax_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(profession_, other->profession_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(state_, other->state_);
    std::swap(country_, other->country_);
    pos_.Swap(&other->pos_);
    std::swap(sex_, other->sex_);
    buf_.Swap(&other->buf_);
    std::swap(horse_, other->horse_);
    std::swap(lv_, other->lv_);
    std::swap(titleid_, other->titleid_);
    std::swap(fightpower_, other->fightpower_);
    std::swap(equip_, other->equip_);
    std::swap(magicweapon_, other->magicweapon_);
    std::swap(costume_, other->costume_);
    std::swap(clanname_, other->clanname_);
    std::swap(clanid_, other->clanid_);
    std::swap(viplv_, other->viplv_);
    std::swap(clanjob_, other->clanjob_);
    std::swap(clanicon_, other->clanicon_);
    std::swap(sinvalue_, other->sinvalue_);
    std::swap(fashionid_, other->fashionid_);
    std::swap(skilldata_, other->skilldata_);
    std::swap(meditation_, other->meditation_);
    std::swap(distortion_, other->distortion_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    std::swap(_has_bits_[1], other->_has_bits_[1]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchPlayerBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchPlayerBase_descriptor_;
  metadata.reflection = SynchPlayerBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MeditationInfo::kTargetkeyFieldNumber;
const int MeditationInfo::kXposFieldNumber;
const int MeditationInfo::kYposFieldNumber;
const int MeditationInfo::kTargetgirlwarkeyFieldNumber;
const int MeditationInfo::kSelfgirlwarkeyFieldNumber;
#endif  // !_MSC_VER

MeditationInfo::MeditationInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MeditationInfo::InitAsDefaultInstance() {
}

MeditationInfo::MeditationInfo(const MeditationInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MeditationInfo::SharedCtor() {
  _cached_size_ = 0;
  targetkey_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  targetgirlwarkey_ = 0;
  selfgirlwarkey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MeditationInfo::~MeditationInfo() {
  SharedDtor();
}

void MeditationInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MeditationInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MeditationInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MeditationInfo_descriptor_;
}

const MeditationInfo& MeditationInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

MeditationInfo* MeditationInfo::default_instance_ = NULL;

MeditationInfo* MeditationInfo::New() const {
  return new MeditationInfo;
}

void MeditationInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    targetkey_ = 0;
    xpos_ = 0;
    ypos_ = 0;
    targetgirlwarkey_ = 0;
    selfgirlwarkey_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MeditationInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 targetkey = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetkey_)));
          set_has_targetkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_xpos;
        break;
      }

      // optional int32 xpos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ypos;
        break;
      }

      // optional int32 ypos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_targetgirlwarkey;
        break;
      }

      // optional int32 targetgirlwarkey = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetgirlwarkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetgirlwarkey_)));
          set_has_targetgirlwarkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_selfgirlwarkey;
        break;
      }

      // optional int32 selfgirlwarkey = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_selfgirlwarkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &selfgirlwarkey_)));
          set_has_selfgirlwarkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MeditationInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 targetkey = 1;
  if (has_targetkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->targetkey(), output);
  }

  // optional int32 xpos = 2;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->xpos(), output);
  }

  // optional int32 ypos = 3;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ypos(), output);
  }

  // optional int32 targetgirlwarkey = 4;
  if (has_targetgirlwarkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->targetgirlwarkey(), output);
  }

  // optional int32 selfgirlwarkey = 5;
  if (has_selfgirlwarkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->selfgirlwarkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MeditationInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 targetkey = 1;
  if (has_targetkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->targetkey(), target);
  }

  // optional int32 xpos = 2;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->xpos(), target);
  }

  // optional int32 ypos = 3;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ypos(), target);
  }

  // optional int32 targetgirlwarkey = 4;
  if (has_targetgirlwarkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->targetgirlwarkey(), target);
  }

  // optional int32 selfgirlwarkey = 5;
  if (has_selfgirlwarkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->selfgirlwarkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MeditationInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 targetkey = 1;
    if (has_targetkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetkey());
    }

    // optional int32 xpos = 2;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

    // optional int32 ypos = 3;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

    // optional int32 targetgirlwarkey = 4;
    if (has_targetgirlwarkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetgirlwarkey());
    }

    // optional int32 selfgirlwarkey = 5;
    if (has_selfgirlwarkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->selfgirlwarkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MeditationInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MeditationInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MeditationInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MeditationInfo::MergeFrom(const MeditationInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_targetkey()) {
      set_targetkey(from.targetkey());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_targetgirlwarkey()) {
      set_targetgirlwarkey(from.targetgirlwarkey());
    }
    if (from.has_selfgirlwarkey()) {
      set_selfgirlwarkey(from.selfgirlwarkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MeditationInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeditationInfo::CopyFrom(const MeditationInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeditationInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void MeditationInfo::Swap(MeditationInfo* other) {
  if (other != this) {
    std::swap(targetkey_, other->targetkey_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(targetgirlwarkey_, other->targetgirlwarkey_);
    std::swap(selfgirlwarkey_, other->selfgirlwarkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MeditationInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MeditationInfo_descriptor_;
  metadata.reflection = MeditationInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchMonsterToGate::kCharidFieldNumber;
const int SynchMonsterToGate::kInfoFieldNumber;
#endif  // !_MSC_VER

SynchMonsterToGate::SynchMonsterToGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchMonsterToGate::InitAsDefaultInstance() {
  info_ = const_cast< ::PlayerSynch::SynchMonsterBase*>(&::PlayerSynch::SynchMonsterBase::default_instance());
}

SynchMonsterToGate::SynchMonsterToGate(const SynchMonsterToGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchMonsterToGate::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchMonsterToGate::~SynchMonsterToGate() {
  SharedDtor();
}

void SynchMonsterToGate::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SynchMonsterToGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchMonsterToGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchMonsterToGate_descriptor_;
}

const SynchMonsterToGate& SynchMonsterToGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

SynchMonsterToGate* SynchMonsterToGate::default_instance_ = NULL;

SynchMonsterToGate* SynchMonsterToGate::New() const {
  return new SynchMonsterToGate;
}

void SynchMonsterToGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerSynch::SynchMonsterBase::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchMonsterToGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // required .PlayerSynch.SynchMonsterBase info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchMonsterToGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required .PlayerSynch.SynchMonsterBase info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchMonsterToGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required .PlayerSynch.SynchMonsterBase info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchMonsterToGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required .PlayerSynch.SynchMonsterBase info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchMonsterToGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchMonsterToGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchMonsterToGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchMonsterToGate::MergeFrom(const SynchMonsterToGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_info()) {
      mutable_info()->::PlayerSynch::SynchMonsterBase::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchMonsterToGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchMonsterToGate::CopyFrom(const SynchMonsterToGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchMonsterToGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SynchMonsterToGate::Swap(SynchMonsterToGate* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchMonsterToGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchMonsterToGate_descriptor_;
  metadata.reflection = SynchMonsterToGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchMonsterBase::kIdFieldNumber;
const int SynchMonsterBase::kKeyFieldNumber;
const int SynchMonsterBase::kHpFieldNumber;
const int SynchMonsterBase::kMpFieldNumber;
const int SynchMonsterBase::kXposFieldNumber;
const int SynchMonsterBase::kYposFieldNumber;
const int SynchMonsterBase::kCountryFieldNumber;
const int SynchMonsterBase::kHpmaxFieldNumber;
const int SynchMonsterBase::kMpmaxFieldNumber;
const int SynchMonsterBase::kBufFieldNumber;
const int SynchMonsterBase::kNameFieldNumber;
const int SynchMonsterBase::kMovespeedFieldNumber;
const int SynchMonsterBase::kStateFieldNumber;
const int SynchMonsterBase::kPosFieldNumber;
#endif  // !_MSC_VER

SynchMonsterBase::SynchMonsterBase()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchMonsterBase::InitAsDefaultInstance() {
}

SynchMonsterBase::SynchMonsterBase(const SynchMonsterBase& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchMonsterBase::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  key_ = 0;
  hp_ = 0;
  mp_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  country_ = 0;
  hpmax_ = 0;
  mpmax_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  movespeed_ = 0;
  state_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchMonsterBase::~SynchMonsterBase() {
  SharedDtor();
}

void SynchMonsterBase::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void SynchMonsterBase::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchMonsterBase::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchMonsterBase_descriptor_;
}

const SynchMonsterBase& SynchMonsterBase::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

SynchMonsterBase* SynchMonsterBase::default_instance_ = NULL;

SynchMonsterBase* SynchMonsterBase::New() const {
  return new SynchMonsterBase;
}

void SynchMonsterBase::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    key_ = 0;
    hp_ = 0;
    mp_ = 0;
    xpos_ = 0;
    ypos_ = 0;
    country_ = 0;
    hpmax_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    mpmax_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    movespeed_ = 0;
    state_ = 0;
  }
  buf_.Clear();
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchMonsterBase::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // required int32 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_hp;
        break;
      }

      // required int32 hp = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_mp;
        break;
      }

      // required int32 mp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_xpos;
        break;
      }

      // required int32 xpos = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_ypos;
        break;
      }

      // required int32 ypos = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_country;
        break;
      }

      // required int32 country = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_hpmax;
        break;
      }

      // optional int32 hpmax = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_mpmax;
        break;
      }

      // optional int32 mpmax = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mpmax_)));
          set_has_mpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_buf;
        break;
      }

      // repeated .PlayerSynch.SynchBuffChar buf = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_buf;
        if (input->ExpectTag(90)) goto parse_name;
        break;
      }

      // optional string name = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_movespeed;
        break;
      }

      // required int32 movespeed = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_state;
        break;
      }

      // required int32 state = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_state:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &state_)));
          set_has_state();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_pos;
        break;
      }

      // repeated .PlayerSynch.CharPos pos = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchMonsterBase::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key(), output);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->hp(), output);
  }

  // required int32 mp = 4;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->mp(), output);
  }

  // required int32 xpos = 5;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->xpos(), output);
  }

  // required int32 ypos = 6;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->ypos(), output);
  }

  // required int32 country = 7;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->country(), output);
  }

  // optional int32 hpmax = 8;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->hpmax(), output);
  }

  // optional int32 mpmax = 9;
  if (has_mpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->mpmax(), output);
  }

  // repeated .PlayerSynch.SynchBuffChar buf = 10;
  for (int i = 0; i < this->buf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->buf(i), output);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->name(), output);
  }

  // required int32 movespeed = 12;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->movespeed(), output);
  }

  // required int32 state = 13;
  if (has_state()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(13, this->state(), output);
  }

  // repeated .PlayerSynch.CharPos pos = 14;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchMonsterBase::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->key(), target);
  }

  // required int32 hp = 3;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->hp(), target);
  }

  // required int32 mp = 4;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->mp(), target);
  }

  // required int32 xpos = 5;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->xpos(), target);
  }

  // required int32 ypos = 6;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->ypos(), target);
  }

  // required int32 country = 7;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->country(), target);
  }

  // optional int32 hpmax = 8;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->hpmax(), target);
  }

  // optional int32 mpmax = 9;
  if (has_mpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->mpmax(), target);
  }

  // repeated .PlayerSynch.SynchBuffChar buf = 10;
  for (int i = 0; i < this->buf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->buf(i), target);
  }

  // optional string name = 11;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->name(), target);
  }

  // required int32 movespeed = 12;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->movespeed(), target);
  }

  // required int32 state = 13;
  if (has_state()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(13, this->state(), target);
  }

  // repeated .PlayerSynch.CharPos pos = 14;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchMonsterBase::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // required int32 hp = 3;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 mp = 4;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // required int32 xpos = 5;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

    // required int32 ypos = 6;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

    // required int32 country = 7;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // optional int32 hpmax = 8;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 mpmax = 9;
    if (has_mpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mpmax());
    }

    // optional string name = 11;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 movespeed = 12;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

    // required int32 state = 13;
    if (has_state()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->state());
    }

  }
  // repeated .PlayerSynch.SynchBuffChar buf = 10;
  total_size += 1 * this->buf_size();
  for (int i = 0; i < this->buf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buf(i));
  }

  // repeated .PlayerSynch.CharPos pos = 14;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchMonsterBase::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchMonsterBase* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchMonsterBase*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchMonsterBase::MergeFrom(const SynchMonsterBase& from) {
  GOOGLE_CHECK_NE(&from, this);
  buf_.MergeFrom(from.buf_);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_mpmax()) {
      set_mpmax(from.mpmax());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_state()) {
      set_state(from.state());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchMonsterBase::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchMonsterBase::CopyFrom(const SynchMonsterBase& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchMonsterBase::IsInitialized() const {
  if ((_has_bits_[0] & 0x0000187f) != 0x0000187f) return false;

  for (int i = 0; i < buf_size(); i++) {
    if (!this->buf(i).IsInitialized()) return false;
  }
  for (int i = 0; i < pos_size(); i++) {
    if (!this->pos(i).IsInitialized()) return false;
  }
  return true;
}

void SynchMonsterBase::Swap(SynchMonsterBase* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(key_, other->key_);
    std::swap(hp_, other->hp_);
    std::swap(mp_, other->mp_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(country_, other->country_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(mpmax_, other->mpmax_);
    buf_.Swap(&other->buf_);
    std::swap(name_, other->name_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(state_, other->state_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchMonsterBase::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchMonsterBase_descriptor_;
  metadata.reflection = SynchMonsterBase_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchCompeteMonster::kIdFieldNumber;
const int SynchCompeteMonster::kKeyFieldNumber;
const int SynchCompeteMonster::kNameFieldNumber;
const int SynchCompeteMonster::kHpFieldNumber;
const int SynchCompeteMonster::kHpmaxFieldNumber;
const int SynchCompeteMonster::kMpFieldNumber;
const int SynchCompeteMonster::kMpmaxFieldNumber;
const int SynchCompeteMonster::kXposFieldNumber;
const int SynchCompeteMonster::kYposFieldNumber;
const int SynchCompeteMonster::kProfessionFieldNumber;
const int SynchCompeteMonster::kMovespeedFieldNumber;
const int SynchCompeteMonster::kCountryFieldNumber;
const int SynchCompeteMonster::kSexFieldNumber;
const int SynchCompeteMonster::kBufFieldNumber;
const int SynchCompeteMonster::kLvFieldNumber;
const int SynchCompeteMonster::kTitleidFieldNumber;
const int SynchCompeteMonster::kEquipFieldNumber;
const int SynchCompeteMonster::kMagicweaponFieldNumber;
const int SynchCompeteMonster::kCostumeFieldNumber;
const int SynchCompeteMonster::kClannameFieldNumber;
const int SynchCompeteMonster::kViplvFieldNumber;
const int SynchCompeteMonster::kFashionFieldNumber;
const int SynchCompeteMonster::kHorseidFieldNumber;
const int SynchCompeteMonster::kClanJobFieldNumber;
#endif  // !_MSC_VER

SynchCompeteMonster::SynchCompeteMonster()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchCompeteMonster::InitAsDefaultInstance() {
  equip_ = const_cast< ::PlayerSynch::EquipData*>(&::PlayerSynch::EquipData::default_instance());
}

SynchCompeteMonster::SynchCompeteMonster(const SynchCompeteMonster& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchCompeteMonster::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  key_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  hp_ = 0;
  hpmax_ = 0;
  mp_ = 0;
  mpmax_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  profession_ = 0;
  movespeed_ = 0;
  country_ = 0;
  sex_ = false;
  lv_ = 0;
  titleid_ = 0;
  equip_ = NULL;
  magicweapon_ = 0;
  costume_ = 0;
  clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  viplv_ = 0u;
  fashion_ = 0;
  horseid_ = 0;
  clanjob_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchCompeteMonster::~SynchCompeteMonster() {
  SharedDtor();
}

void SynchCompeteMonster::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (this != default_instance_) {
    delete equip_;
  }
}

void SynchCompeteMonster::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchCompeteMonster::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchCompeteMonster_descriptor_;
}

const SynchCompeteMonster& SynchCompeteMonster::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

SynchCompeteMonster* SynchCompeteMonster::default_instance_ = NULL;

SynchCompeteMonster* SynchCompeteMonster::New() const {
  return new SynchCompeteMonster;
}

void SynchCompeteMonster::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    key_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    hp_ = 0;
    hpmax_ = 0;
    mp_ = 0;
    mpmax_ = 0;
    xpos_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    ypos_ = 0;
    profession_ = 0;
    movespeed_ = 0;
    country_ = 0;
    sex_ = false;
    lv_ = 0;
    titleid_ = 0;
  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (has_equip()) {
      if (equip_ != NULL) equip_->::PlayerSynch::EquipData::Clear();
    }
    magicweapon_ = 0;
    costume_ = 0;
    if (has_clanname()) {
      if (clanname_ != &::google::protobuf::internal::kEmptyString) {
        clanname_->clear();
      }
    }
    viplv_ = 0u;
    fashion_ = 0;
    horseid_ = 0;
    clanjob_ = 0;
  }
  buf_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchCompeteMonster::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // required int32 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // required string name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_hp;
        break;
      }

      // required int32 hp = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hpmax;
        break;
      }

      // required int32 hpmax = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_mp;
        break;
      }

      // required int32 mp = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mp_)));
          set_has_mp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_mpmax;
        break;
      }

      // required int32 mpmax = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &mpmax_)));
          set_has_mpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_xpos;
        break;
      }

      // required int32 xpos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_ypos;
        break;
      }

      // required int32 ypos = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_profession;
        break;
      }

      // required int32 profession = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(88)) goto parse_movespeed;
        break;
      }

      // required int32 movespeed = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_movespeed:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &movespeed_)));
          set_has_movespeed();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(96)) goto parse_country;
        break;
      }

      // required int32 country = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(104)) goto parse_sex;
        break;
      }

      // required bool sex = 13;
      case 13: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_buf;
        break;
      }

      // repeated .PlayerSynch.SynchBuffChar buf = 14;
      case 14: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_buf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_buf()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(114)) goto parse_buf;
        if (input->ExpectTag(120)) goto parse_lv;
        break;
      }

      // optional int32 lv = 15;
      case 15: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(128)) goto parse_titleid;
        break;
      }

      // required int32 titleid = 16;
      case 16: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_titleid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &titleid_)));
          set_has_titleid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(138)) goto parse_equip;
        break;
      }

      // required .PlayerSynch.EquipData equip = 17;
      case 17: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equip:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_equip()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(144)) goto parse_magicweapon;
        break;
      }

      // optional int32 magicweapon = 18;
      case 18: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_magicweapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &magicweapon_)));
          set_has_magicweapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(152)) goto parse_costume;
        break;
      }

      // required int32 costume = 19;
      case 19: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_costume:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &costume_)));
          set_has_costume();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(162)) goto parse_clanname;
        break;
      }

      // optional string clanname = 20;
      case 20: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clanname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clanname().data(), this->clanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(168)) goto parse_viplv;
        break;
      }

      // optional uint32 viplv = 21;
      case 21: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_viplv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &viplv_)));
          set_has_viplv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(176)) goto parse_fashion;
        break;
      }

      // optional int32 fashion = 22;
      case 22: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_)));
          set_has_fashion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(184)) goto parse_horseid;
        break;
      }

      // optional int32 horseid = 23;
      case 23: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_horseid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &horseid_)));
          set_has_horseid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(192)) goto parse_clanJob;
        break;
      }

      // optional int32 clanJob = 24;
      case 24: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_clanJob:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &clanjob_)));
          set_has_clanjob();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchCompeteMonster::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required int32 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key(), output);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->name(), output);
  }

  // required int32 hp = 4;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->hp(), output);
  }

  // required int32 hpmax = 5;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hpmax(), output);
  }

  // required int32 mp = 6;
  if (has_mp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->mp(), output);
  }

  // required int32 mpmax = 7;
  if (has_mpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->mpmax(), output);
  }

  // required int32 xpos = 8;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->xpos(), output);
  }

  // required int32 ypos = 9;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->ypos(), output);
  }

  // required int32 profession = 10;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->profession(), output);
  }

  // required int32 movespeed = 11;
  if (has_movespeed()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(11, this->movespeed(), output);
  }

  // required int32 country = 12;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(12, this->country(), output);
  }

  // required bool sex = 13;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(13, this->sex(), output);
  }

  // repeated .PlayerSynch.SynchBuffChar buf = 14;
  for (int i = 0; i < this->buf_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      14, this->buf(i), output);
  }

  // optional int32 lv = 15;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(15, this->lv(), output);
  }

  // required int32 titleid = 16;
  if (has_titleid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(16, this->titleid(), output);
  }

  // required .PlayerSynch.EquipData equip = 17;
  if (has_equip()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      17, this->equip(), output);
  }

  // optional int32 magicweapon = 18;
  if (has_magicweapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(18, this->magicweapon(), output);
  }

  // required int32 costume = 19;
  if (has_costume()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(19, this->costume(), output);
  }

  // optional string clanname = 20;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      20, this->clanname(), output);
  }

  // optional uint32 viplv = 21;
  if (has_viplv()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(21, this->viplv(), output);
  }

  // optional int32 fashion = 22;
  if (has_fashion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(22, this->fashion(), output);
  }

  // optional int32 horseid = 23;
  if (has_horseid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(23, this->horseid(), output);
  }

  // optional int32 clanJob = 24;
  if (has_clanjob()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(24, this->clanjob(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchCompeteMonster::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required int32 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->key(), target);
  }

  // required string name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->name(), target);
  }

  // required int32 hp = 4;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->hp(), target);
  }

  // required int32 hpmax = 5;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hpmax(), target);
  }

  // required int32 mp = 6;
  if (has_mp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->mp(), target);
  }

  // required int32 mpmax = 7;
  if (has_mpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->mpmax(), target);
  }

  // required int32 xpos = 8;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->xpos(), target);
  }

  // required int32 ypos = 9;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->ypos(), target);
  }

  // required int32 profession = 10;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->profession(), target);
  }

  // required int32 movespeed = 11;
  if (has_movespeed()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(11, this->movespeed(), target);
  }

  // required int32 country = 12;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(12, this->country(), target);
  }

  // required bool sex = 13;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(13, this->sex(), target);
  }

  // repeated .PlayerSynch.SynchBuffChar buf = 14;
  for (int i = 0; i < this->buf_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        14, this->buf(i), target);
  }

  // optional int32 lv = 15;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(15, this->lv(), target);
  }

  // required int32 titleid = 16;
  if (has_titleid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(16, this->titleid(), target);
  }

  // required .PlayerSynch.EquipData equip = 17;
  if (has_equip()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        17, this->equip(), target);
  }

  // optional int32 magicweapon = 18;
  if (has_magicweapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(18, this->magicweapon(), target);
  }

  // required int32 costume = 19;
  if (has_costume()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(19, this->costume(), target);
  }

  // optional string clanname = 20;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        20, this->clanname(), target);
  }

  // optional uint32 viplv = 21;
  if (has_viplv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(21, this->viplv(), target);
  }

  // optional int32 fashion = 22;
  if (has_fashion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(22, this->fashion(), target);
  }

  // optional int32 horseid = 23;
  if (has_horseid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(23, this->horseid(), target);
  }

  // optional int32 clanJob = 24;
  if (has_clanjob()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(24, this->clanjob(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchCompeteMonster::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required int32 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // required string name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // required int32 hp = 4;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // required int32 hpmax = 5;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

    // required int32 mp = 6;
    if (has_mp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mp());
    }

    // required int32 mpmax = 7;
    if (has_mpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->mpmax());
    }

    // required int32 xpos = 8;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required int32 ypos = 9;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

    // required int32 profession = 10;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // required int32 movespeed = 11;
    if (has_movespeed()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->movespeed());
    }

    // required int32 country = 12;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // required bool sex = 13;
    if (has_sex()) {
      total_size += 1 + 1;
    }

    // optional int32 lv = 15;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // required int32 titleid = 16;
    if (has_titleid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->titleid());
    }

  }
  if (_has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    // required .PlayerSynch.EquipData equip = 17;
    if (has_equip()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->equip());
    }

    // optional int32 magicweapon = 18;
    if (has_magicweapon()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->magicweapon());
    }

    // required int32 costume = 19;
    if (has_costume()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->costume());
    }

    // optional string clanname = 20;
    if (has_clanname()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clanname());
    }

    // optional uint32 viplv = 21;
    if (has_viplv()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->viplv());
    }

    // optional int32 fashion = 22;
    if (has_fashion()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion());
    }

    // optional int32 horseid = 23;
    if (has_horseid()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->horseid());
    }

    // optional int32 clanJob = 24;
    if (has_clanjob()) {
      total_size += 2 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->clanjob());
    }

  }
  // repeated .PlayerSynch.SynchBuffChar buf = 14;
  total_size += 1 * this->buf_size();
  for (int i = 0; i < this->buf_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->buf(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchCompeteMonster::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchCompeteMonster* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchCompeteMonster*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchCompeteMonster::MergeFrom(const SynchCompeteMonster& from) {
  GOOGLE_CHECK_NE(&from, this);
  buf_.MergeFrom(from.buf_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_mp()) {
      set_mp(from.mp());
    }
    if (from.has_mpmax()) {
      set_mpmax(from.mpmax());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_movespeed()) {
      set_movespeed(from.movespeed());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_titleid()) {
      set_titleid(from.titleid());
    }
  }
  if (from._has_bits_[16 / 32] & (0xffu << (16 % 32))) {
    if (from.has_equip()) {
      mutable_equip()->::PlayerSynch::EquipData::MergeFrom(from.equip());
    }
    if (from.has_magicweapon()) {
      set_magicweapon(from.magicweapon());
    }
    if (from.has_costume()) {
      set_costume(from.costume());
    }
    if (from.has_clanname()) {
      set_clanname(from.clanname());
    }
    if (from.has_viplv()) {
      set_viplv(from.viplv());
    }
    if (from.has_fashion()) {
      set_fashion(from.fashion());
    }
    if (from.has_horseid()) {
      set_horseid(from.horseid());
    }
    if (from.has_clanjob()) {
      set_clanjob(from.clanjob());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchCompeteMonster::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchCompeteMonster::CopyFrom(const SynchCompeteMonster& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchCompeteMonster::IsInitialized() const {
  if ((_has_bits_[0] & 0x00059fff) != 0x00059fff) return false;

  for (int i = 0; i < buf_size(); i++) {
    if (!this->buf(i).IsInitialized()) return false;
  }
  return true;
}

void SynchCompeteMonster::Swap(SynchCompeteMonster* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(key_, other->key_);
    std::swap(name_, other->name_);
    std::swap(hp_, other->hp_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(mp_, other->mp_);
    std::swap(mpmax_, other->mpmax_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(profession_, other->profession_);
    std::swap(movespeed_, other->movespeed_);
    std::swap(country_, other->country_);
    std::swap(sex_, other->sex_);
    buf_.Swap(&other->buf_);
    std::swap(lv_, other->lv_);
    std::swap(titleid_, other->titleid_);
    std::swap(equip_, other->equip_);
    std::swap(magicweapon_, other->magicweapon_);
    std::swap(costume_, other->costume_);
    std::swap(clanname_, other->clanname_);
    std::swap(viplv_, other->viplv_);
    std::swap(fashion_, other->fashion_);
    std::swap(horseid_, other->horseid_);
    std::swap(clanjob_, other->clanjob_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchCompeteMonster::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchCompeteMonster_descriptor_;
  metadata.reflection = SynchCompeteMonster_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchBuffChar::kIdFieldNumber;
const int SynchBuffChar::kOnlyidFieldNumber;
#endif  // !_MSC_VER

SynchBuffChar::SynchBuffChar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchBuffChar::InitAsDefaultInstance() {
}

SynchBuffChar::SynchBuffChar(const SynchBuffChar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchBuffChar::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  onlyid_ = 0u;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchBuffChar::~SynchBuffChar() {
  SharedDtor();
}

void SynchBuffChar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SynchBuffChar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchBuffChar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchBuffChar_descriptor_;
}

const SynchBuffChar& SynchBuffChar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

SynchBuffChar* SynchBuffChar::default_instance_ = NULL;

SynchBuffChar* SynchBuffChar::New() const {
  return new SynchBuffChar;
}

void SynchBuffChar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    onlyid_ = 0u;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchBuffChar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_onlyid;
        break;
      }

      // required uint32 onlyid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onlyid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &onlyid_)));
          set_has_onlyid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchBuffChar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // required uint32 onlyid = 2;
  if (has_onlyid()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(2, this->onlyid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchBuffChar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // required uint32 onlyid = 2;
  if (has_onlyid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(2, this->onlyid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchBuffChar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // required uint32 onlyid = 2;
    if (has_onlyid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->onlyid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchBuffChar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchBuffChar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchBuffChar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchBuffChar::MergeFrom(const SynchBuffChar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_onlyid()) {
      set_onlyid(from.onlyid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchBuffChar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchBuffChar::CopyFrom(const SynchBuffChar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchBuffChar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void SynchBuffChar::Swap(SynchBuffChar* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(onlyid_, other->onlyid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchBuffChar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchBuffChar_descriptor_;
  metadata.reflection = SynchBuffChar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int PathToGate::kMycharidFieldNumber;
const int PathToGate::kPathFieldNumber;
#endif  // !_MSC_VER

PathToGate::PathToGate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void PathToGate::InitAsDefaultInstance() {
  path_ = const_cast< ::PlayerSynch::PathToAllPlayer*>(&::PlayerSynch::PathToAllPlayer::default_instance());
}

PathToGate::PathToGate(const PathToGate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void PathToGate::SharedCtor() {
  _cached_size_ = 0;
  mycharid_ = GOOGLE_LONGLONG(0);
  path_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

PathToGate::~PathToGate() {
  SharedDtor();
}

void PathToGate::SharedDtor() {
  if (this != default_instance_) {
    delete path_;
  }
}

void PathToGate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* PathToGate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return PathToGate_descriptor_;
}

const PathToGate& PathToGate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

PathToGate* PathToGate::default_instance_ = NULL;

PathToGate* PathToGate::New() const {
  return new PathToGate;
}

void PathToGate::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    mycharid_ = GOOGLE_LONGLONG(0);
    if (has_path()) {
      if (path_ != NULL) path_->::PlayerSynch::PathToAllPlayer::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool PathToGate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 mycharid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &mycharid_)));
          set_has_mycharid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // required .PlayerSynch.PathToAllPlayer path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void PathToGate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 mycharid = 1;
  if (has_mycharid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->mycharid(), output);
  }

  // required .PlayerSynch.PathToAllPlayer path = 2;
  if (has_path()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->path(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* PathToGate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 mycharid = 1;
  if (has_mycharid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->mycharid(), target);
  }

  // required .PlayerSynch.PathToAllPlayer path = 2;
  if (has_path()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->path(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int PathToGate::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 mycharid = 1;
    if (has_mycharid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->mycharid());
    }

    // required .PlayerSynch.PathToAllPlayer path = 2;
    if (has_path()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->path());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void PathToGate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const PathToGate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const PathToGate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void PathToGate::MergeFrom(const PathToGate& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_mycharid()) {
      set_mycharid(from.mycharid());
    }
    if (from.has_path()) {
      mutable_path()->::PlayerSynch::PathToAllPlayer::MergeFrom(from.path());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void PathToGate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void PathToGate::CopyFrom(const PathToGate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool PathToGate::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_path()) {
    if (!this->path().IsInitialized()) return false;
  }
  return true;
}

void PathToGate::Swap(PathToGate* other) {
  if (other != this) {
    std::swap(mycharid_, other->mycharid_);
    std::swap(path_, other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata PathToGate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = PathToGate_descriptor_;
  metadata.reflection = PathToGate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchInfoToPath::kCharidFieldNumber;
const int SynchInfoToPath::kInfoFieldNumber;
#endif  // !_MSC_VER

SynchInfoToPath::SynchInfoToPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchInfoToPath::InitAsDefaultInstance() {
  info_ = const_cast< ::PlayerSynch::SynchInfo*>(&::PlayerSynch::SynchInfo::default_instance());
}

SynchInfoToPath::SynchInfoToPath(const SynchInfoToPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchInfoToPath::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  info_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchInfoToPath::~SynchInfoToPath() {
  SharedDtor();
}

void SynchInfoToPath::SharedDtor() {
  if (this != default_instance_) {
    delete info_;
  }
}

void SynchInfoToPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchInfoToPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchInfoToPath_descriptor_;
}

const SynchInfoToPath& SynchInfoToPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

SynchInfoToPath* SynchInfoToPath::default_instance_ = NULL;

SynchInfoToPath* SynchInfoToPath::New() const {
  return new SynchInfoToPath;
}

void SynchInfoToPath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_info()) {
      if (info_ != NULL) info_->::PlayerSynch::SynchInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchInfoToPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_info;
        break;
      }

      // required .PlayerSynch.SynchInfo info = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_info:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_info()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchInfoToPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required .PlayerSynch.SynchInfo info = 2;
  if (has_info()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->info(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchInfoToPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required .PlayerSynch.SynchInfo info = 2;
  if (has_info()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->info(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchInfoToPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required .PlayerSynch.SynchInfo info = 2;
    if (has_info()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->info());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchInfoToPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchInfoToPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchInfoToPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchInfoToPath::MergeFrom(const SynchInfoToPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_info()) {
      mutable_info()->::PlayerSynch::SynchInfo::MergeFrom(from.info());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchInfoToPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchInfoToPath::CopyFrom(const SynchInfoToPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchInfoToPath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_info()) {
    if (!this->info().IsInitialized()) return false;
  }
  return true;
}

void SynchInfoToPath::Swap(SynchInfoToPath* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(info_, other->info_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchInfoToPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchInfoToPath_descriptor_;
  metadata.reflection = SynchInfoToPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchInfo::kTypeFieldNumber;
const int SynchInfo::kPosFieldNumber;
#endif  // !_MSC_VER

SynchInfo::SynchInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchInfo::InitAsDefaultInstance() {
}

SynchInfo::SynchInfo(const SynchInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchInfo::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchInfo::~SynchInfo() {
  SharedDtor();
}

void SynchInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SynchInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchInfo_descriptor_;
}

const SynchInfo& SynchInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

SynchInfo* SynchInfo::default_instance_ = NULL;

SynchInfo* SynchInfo::New() const {
  return new SynchInfo;
}

void SynchInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // repeated .PlayerSynch.CharPos pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // repeated .PlayerSynch.CharPos pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // repeated .PlayerSynch.CharPos pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  // repeated .PlayerSynch.CharPos pos = 2;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchInfo::MergeFrom(const SynchInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchInfo::CopyFrom(const SynchInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pos_size(); i++) {
    if (!this->pos(i).IsInitialized()) return false;
  }
  return true;
}

void SynchInfo::Swap(SynchInfo* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchInfo_descriptor_;
  metadata.reflection = SynchInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharPosRet::kTypeFieldNumber;
const int CharPosRet::kIsvalidFieldNumber;
const int CharPosRet::kPosFieldNumber;
#endif  // !_MSC_VER

CharPosRet::CharPosRet()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharPosRet::InitAsDefaultInstance() {
  pos_ = const_cast< ::PlayerSynch::CharPos*>(&::PlayerSynch::CharPos::default_instance());
}

CharPosRet::CharPosRet(const CharPosRet& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharPosRet::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  isvalid_ = 0;
  pos_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharPosRet::~CharPosRet() {
  SharedDtor();
}

void CharPosRet::SharedDtor() {
  if (this != default_instance_) {
    delete pos_;
  }
}

void CharPosRet::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharPosRet::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharPosRet_descriptor_;
}

const CharPosRet& CharPosRet::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

CharPosRet* CharPosRet::default_instance_ = NULL;

CharPosRet* CharPosRet::New() const {
  return new CharPosRet;
}

void CharPosRet::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    isvalid_ = 0;
    if (has_pos()) {
      if (pos_ != NULL) pos_->::PlayerSynch::CharPos::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharPosRet::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_isvalid;
        break;
      }

      // required int32 isvalid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_isvalid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &isvalid_)));
          set_has_isvalid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pos;
        break;
      }

      // optional .PlayerSynch.CharPos pos = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharPosRet::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 2;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->type(), output);
  }

  // required int32 isvalid = 3;
  if (has_isvalid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->isvalid(), output);
  }

  // optional .PlayerSynch.CharPos pos = 4;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->pos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharPosRet::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 2;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->type(), target);
  }

  // required int32 isvalid = 3;
  if (has_isvalid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->isvalid(), target);
  }

  // optional .PlayerSynch.CharPos pos = 4;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->pos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharPosRet::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 2;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // required int32 isvalid = 3;
    if (has_isvalid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->isvalid());
    }

    // optional .PlayerSynch.CharPos pos = 4;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->pos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharPosRet::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharPosRet* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharPosRet*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharPosRet::MergeFrom(const CharPosRet& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_isvalid()) {
      set_isvalid(from.isvalid());
    }
    if (from.has_pos()) {
      mutable_pos()->::PlayerSynch::CharPos::MergeFrom(from.pos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharPosRet::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharPosRet::CopyFrom(const CharPosRet& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharPosRet::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  if (has_pos()) {
    if (!this->pos().IsInitialized()) return false;
  }
  return true;
}

void CharPosRet::Swap(CharPosRet* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(isvalid_, other->isvalid_);
    std::swap(pos_, other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharPosRet::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharPosRet_descriptor_;
  metadata.reflection = CharPosRet_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CharPos::kXposFieldNumber;
const int CharPos::kYposFieldNumber;
#endif  // !_MSC_VER

CharPos::CharPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CharPos::InitAsDefaultInstance() {
}

CharPos::CharPos(const CharPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CharPos::SharedCtor() {
  _cached_size_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CharPos::~CharPos() {
  SharedDtor();
}

void CharPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CharPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CharPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CharPos_descriptor_;
}

const CharPos& CharPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

CharPos* CharPos::default_instance_ = NULL;

CharPos* CharPos::New() const {
  return new CharPos;
}

void CharPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    xpos_ = 0;
    ypos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CharPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 xpos = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ypos;
        break;
      }

      // required int32 ypos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CharPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 xpos = 1;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->xpos(), output);
  }

  // required int32 ypos = 2;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->ypos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CharPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 xpos = 1;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->xpos(), target);
  }

  // required int32 ypos = 2;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->ypos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CharPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 xpos = 1;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

    // required int32 ypos = 2;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CharPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CharPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CharPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CharPos::MergeFrom(const CharPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CharPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CharPos::CopyFrom(const CharPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CharPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void CharPos::Swap(CharPos* other) {
  if (other != this) {
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CharPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CharPos_descriptor_;
  metadata.reflection = CharPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqFindPath::kMapidFieldNumber;
const int ReqFindPath::kMonsterFieldNumber;
#endif  // !_MSC_VER

ReqFindPath::ReqFindPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqFindPath::InitAsDefaultInstance() {
}

ReqFindPath::ReqFindPath(const ReqFindPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqFindPath::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqFindPath::~ReqFindPath() {
  SharedDtor();
}

void ReqFindPath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqFindPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqFindPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqFindPath_descriptor_;
}

const ReqFindPath& ReqFindPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

ReqFindPath* ReqFindPath::default_instance_ = NULL;

ReqFindPath* ReqFindPath::New() const {
  return new ReqFindPath;
}

void ReqFindPath::Clear() {
  mapid_.Clear();
  monster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqFindPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_mapid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_mapid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_mapid;
        if (input->ExpectTag(18)) goto parse_monster;
        break;
      }

      // repeated .PlayerSynch.MapMonsterPos monster = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_monster;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqFindPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 mapid = 1;
  for (int i = 0; i < this->mapid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->mapid(i), output);
  }

  // repeated .PlayerSynch.MapMonsterPos monster = 2;
  for (int i = 0; i < this->monster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->monster(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqFindPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 mapid = 1;
  for (int i = 0; i < this->mapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->mapid(i), target);
  }

  // repeated .PlayerSynch.MapMonsterPos monster = 2;
  for (int i = 0; i < this->monster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->monster(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqFindPath::ByteSize() const {
  int total_size = 0;

  // repeated int64 mapid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->mapid(i));
    }
    total_size += 1 * this->mapid_size() + data_size;
  }

  // repeated .PlayerSynch.MapMonsterPos monster = 2;
  total_size += 1 * this->monster_size();
  for (int i = 0; i < this->monster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqFindPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqFindPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqFindPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqFindPath::MergeFrom(const ReqFindPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapid_.MergeFrom(from.mapid_);
  monster_.MergeFrom(from.monster_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqFindPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqFindPath::CopyFrom(const ReqFindPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqFindPath::IsInitialized() const {

  for (int i = 0; i < monster_size(); i++) {
    if (!this->monster(i).IsInitialized()) return false;
  }
  return true;
}

void ReqFindPath::Swap(ReqFindPath* other) {
  if (other != this) {
    mapid_.Swap(&other->mapid_);
    monster_.Swap(&other->monster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqFindPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqFindPath_descriptor_;
  metadata.reflection = ReqFindPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapMonsterPos::kMonsterFieldNumber;
#endif  // !_MSC_VER

MapMonsterPos::MapMonsterPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapMonsterPos::InitAsDefaultInstance() {
}

MapMonsterPos::MapMonsterPos(const MapMonsterPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapMonsterPos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapMonsterPos::~MapMonsterPos() {
  SharedDtor();
}

void MapMonsterPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapMonsterPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapMonsterPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapMonsterPos_descriptor_;
}

const MapMonsterPos& MapMonsterPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

MapMonsterPos* MapMonsterPos::default_instance_ = NULL;

MapMonsterPos* MapMonsterPos::New() const {
  return new MapMonsterPos;
}

void MapMonsterPos::Clear() {
  monster_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapMonsterPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerSynch.SingleFindPos monster = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_monster:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_monster()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_monster;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapMonsterPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerSynch.SingleFindPos monster = 1;
  for (int i = 0; i < this->monster_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->monster(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapMonsterPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerSynch.SingleFindPos monster = 1;
  for (int i = 0; i < this->monster_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->monster(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapMonsterPos::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerSynch.SingleFindPos monster = 1;
  total_size += 1 * this->monster_size();
  for (int i = 0; i < this->monster_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->monster(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapMonsterPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapMonsterPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapMonsterPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapMonsterPos::MergeFrom(const MapMonsterPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  monster_.MergeFrom(from.monster_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapMonsterPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapMonsterPos::CopyFrom(const MapMonsterPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMonsterPos::IsInitialized() const {

  for (int i = 0; i < monster_size(); i++) {
    if (!this->monster(i).IsInitialized()) return false;
  }
  return true;
}

void MapMonsterPos::Swap(MapMonsterPos* other) {
  if (other != this) {
    monster_.Swap(&other->monster_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapMonsterPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapMonsterPos_descriptor_;
  metadata.reflection = MapMonsterPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleFindPos::kKeyFieldNumber;
const int SingleFindPos::kPosFieldNumber;
const int SingleFindPos::kDistanceFieldNumber;
#endif  // !_MSC_VER

SingleFindPos::SingleFindPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleFindPos::InitAsDefaultInstance() {
}

SingleFindPos::SingleFindPos(const SingleFindPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleFindPos::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  pos_ = GOOGLE_ULONGLONG(0);
  distance_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleFindPos::~SingleFindPos() {
  SharedDtor();
}

void SingleFindPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleFindPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleFindPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleFindPos_descriptor_;
}

const SingleFindPos& SingleFindPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

SingleFindPos* SingleFindPos::default_instance_ = NULL;

SingleFindPos* SingleFindPos::New() const {
  return new SingleFindPos;
}

void SingleFindPos::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
    pos_ = GOOGLE_ULONGLONG(0);
    distance_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleFindPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // optional uint64 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint64, ::google::protobuf::internal::WireFormatLite::TYPE_UINT64>(
                 input, &pos_)));
          set_has_pos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_distance;
        break;
      }

      // optional int32 distance = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_distance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &distance_)));
          set_has_distance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleFindPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // optional uint64 pos = 2;
  if (has_pos()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt64(2, this->pos(), output);
  }

  // optional int32 distance = 3;
  if (has_distance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->distance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleFindPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // optional uint64 pos = 2;
  if (has_pos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt64ToArray(2, this->pos(), target);
  }

  // optional int32 distance = 3;
  if (has_distance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->distance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleFindPos::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional uint64 pos = 2;
    if (has_pos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt64Size(
          this->pos());
    }

    // optional int32 distance = 3;
    if (has_distance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->distance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleFindPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleFindPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleFindPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleFindPos::MergeFrom(const SingleFindPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_pos()) {
      set_pos(from.pos());
    }
    if (from.has_distance()) {
      set_distance(from.distance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleFindPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleFindPos::CopyFrom(const SingleFindPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleFindPos::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SingleFindPos::Swap(SingleFindPos* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    std::swap(pos_, other->pos_);
    std::swap(distance_, other->distance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleFindPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleFindPos_descriptor_;
  metadata.reflection = SingleFindPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckPathPosition::kMapidFieldNumber;
const int AckPathPosition::kPathFieldNumber;
#endif  // !_MSC_VER

AckPathPosition::AckPathPosition()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckPathPosition::InitAsDefaultInstance() {
}

AckPathPosition::AckPathPosition(const AckPathPosition& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckPathPosition::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckPathPosition::~AckPathPosition() {
  SharedDtor();
}

void AckPathPosition::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckPathPosition::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckPathPosition::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckPathPosition_descriptor_;
}

const AckPathPosition& AckPathPosition::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

AckPathPosition* AckPathPosition::default_instance_ = NULL;

AckPathPosition* AckPathPosition::New() const {
  return new AckPathPosition;
}

void AckPathPosition::Clear() {
  mapid_.Clear();
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckPathPosition::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated int64 mapid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_mapid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 8, input, this->mutable_mapid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_mapid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(8)) goto parse_mapid;
        if (input->ExpectTag(18)) goto parse_path;
        break;
      }

      // repeated .PlayerSynch.MapMonsterPath path = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_path;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckPathPosition::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated int64 mapid = 1;
  for (int i = 0; i < this->mapid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      1, this->mapid(i), output);
  }

  // repeated .PlayerSynch.MapMonsterPath path = 2;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->path(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckPathPosition::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated int64 mapid = 1;
  for (int i = 0; i < this->mapid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(1, this->mapid(i), target);
  }

  // repeated .PlayerSynch.MapMonsterPath path = 2;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->path(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckPathPosition::ByteSize() const {
  int total_size = 0;

  // repeated int64 mapid = 1;
  {
    int data_size = 0;
    for (int i = 0; i < this->mapid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->mapid(i));
    }
    total_size += 1 * this->mapid_size() + data_size;
  }

  // repeated .PlayerSynch.MapMonsterPath path = 2;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckPathPosition::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckPathPosition* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckPathPosition*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckPathPosition::MergeFrom(const AckPathPosition& from) {
  GOOGLE_CHECK_NE(&from, this);
  mapid_.MergeFrom(from.mapid_);
  path_.MergeFrom(from.path_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckPathPosition::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckPathPosition::CopyFrom(const AckPathPosition& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckPathPosition::IsInitialized() const {

  for (int i = 0; i < path_size(); i++) {
    if (!this->path(i).IsInitialized()) return false;
  }
  return true;
}

void AckPathPosition::Swap(AckPathPosition* other) {
  if (other != this) {
    mapid_.Swap(&other->mapid_);
    path_.Swap(&other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckPathPosition::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckPathPosition_descriptor_;
  metadata.reflection = AckPathPosition_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MapMonsterPath::kPathFieldNumber;
#endif  // !_MSC_VER

MapMonsterPath::MapMonsterPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MapMonsterPath::InitAsDefaultInstance() {
}

MapMonsterPath::MapMonsterPath(const MapMonsterPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MapMonsterPath::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MapMonsterPath::~MapMonsterPath() {
  SharedDtor();
}

void MapMonsterPath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void MapMonsterPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MapMonsterPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MapMonsterPath_descriptor_;
}

const MapMonsterPath& MapMonsterPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

MapMonsterPath* MapMonsterPath::default_instance_ = NULL;

MapMonsterPath* MapMonsterPath::New() const {
  return new MapMonsterPath;
}

void MapMonsterPath::Clear() {
  path_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MapMonsterPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerSynch.SingleMonsterPath path = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_path:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_path()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_path;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MapMonsterPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerSynch.SingleMonsterPath path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->path(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MapMonsterPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerSynch.SingleMonsterPath path = 1;
  for (int i = 0; i < this->path_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->path(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MapMonsterPath::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerSynch.SingleMonsterPath path = 1;
  total_size += 1 * this->path_size();
  for (int i = 0; i < this->path_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->path(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MapMonsterPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MapMonsterPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MapMonsterPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MapMonsterPath::MergeFrom(const MapMonsterPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  path_.MergeFrom(from.path_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MapMonsterPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MapMonsterPath::CopyFrom(const MapMonsterPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MapMonsterPath::IsInitialized() const {

  for (int i = 0; i < path_size(); i++) {
    if (!this->path(i).IsInitialized()) return false;
  }
  return true;
}

void MapMonsterPath::Swap(MapMonsterPath* other) {
  if (other != this) {
    path_.Swap(&other->path_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MapMonsterPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MapMonsterPath_descriptor_;
  metadata.reflection = MapMonsterPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SingleMonsterPath::kKeyFieldNumber;
const int SingleMonsterPath::kPosFieldNumber;
#endif  // !_MSC_VER

SingleMonsterPath::SingleMonsterPath()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SingleMonsterPath::InitAsDefaultInstance() {
}

SingleMonsterPath::SingleMonsterPath(const SingleMonsterPath& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SingleMonsterPath::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SingleMonsterPath::~SingleMonsterPath() {
  SharedDtor();
}

void SingleMonsterPath::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SingleMonsterPath::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SingleMonsterPath::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SingleMonsterPath_descriptor_;
}

const SingleMonsterPath& SingleMonsterPath::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

SingleMonsterPath* SingleMonsterPath::default_instance_ = NULL;

SingleMonsterPath* SingleMonsterPath::New() const {
  return new SingleMonsterPath;
}

void SingleMonsterPath::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
  }
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SingleMonsterPath::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        break;
      }

      // repeated int32 pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_pos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 16, input, this->mutable_pos())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_pos())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SingleMonsterPath::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // repeated int32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      2, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SingleMonsterPath::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // repeated int32 pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(2, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SingleMonsterPath::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  // repeated int32 pos = 2;
  {
    int data_size = 0;
    for (int i = 0; i < this->pos_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->pos(i));
    }
    total_size += 1 * this->pos_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SingleMonsterPath::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SingleMonsterPath* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SingleMonsterPath*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SingleMonsterPath::MergeFrom(const SingleMonsterPath& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SingleMonsterPath::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SingleMonsterPath::CopyFrom(const SingleMonsterPath& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SingleMonsterPath::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SingleMonsterPath::Swap(SingleMonsterPath* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SingleMonsterPath::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SingleMonsterPath_descriptor_;
  metadata.reflection = SingleMonsterPath_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
#endif  // !_MSC_VER

ReqInstanceMonsterPos::ReqInstanceMonsterPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqInstanceMonsterPos::InitAsDefaultInstance() {
}

ReqInstanceMonsterPos::ReqInstanceMonsterPos(const ReqInstanceMonsterPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqInstanceMonsterPos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqInstanceMonsterPos::~ReqInstanceMonsterPos() {
  SharedDtor();
}

void ReqInstanceMonsterPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqInstanceMonsterPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqInstanceMonsterPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqInstanceMonsterPos_descriptor_;
}

const ReqInstanceMonsterPos& ReqInstanceMonsterPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

ReqInstanceMonsterPos* ReqInstanceMonsterPos::default_instance_ = NULL;

ReqInstanceMonsterPos* ReqInstanceMonsterPos::New() const {
  return new ReqInstanceMonsterPos;
}

void ReqInstanceMonsterPos::Clear() {
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqInstanceMonsterPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
        ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
      return true;
    }
    DO_(::google::protobuf::internal::WireFormat::SkipField(
          input, tag, mutable_unknown_fields()));
  }
  return true;
#undef DO_
}

void ReqInstanceMonsterPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqInstanceMonsterPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqInstanceMonsterPos::ByteSize() const {
  int total_size = 0;

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqInstanceMonsterPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqInstanceMonsterPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqInstanceMonsterPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqInstanceMonsterPos::MergeFrom(const ReqInstanceMonsterPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqInstanceMonsterPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqInstanceMonsterPos::CopyFrom(const ReqInstanceMonsterPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqInstanceMonsterPos::IsInitialized() const {

  return true;
}

void ReqInstanceMonsterPos::Swap(ReqInstanceMonsterPos* other) {
  if (other != this) {
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqInstanceMonsterPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqInstanceMonsterPos_descriptor_;
  metadata.reflection = ReqInstanceMonsterPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RetInstanceMonsterPos::kPosInfoFieldNumber;
#endif  // !_MSC_VER

RetInstanceMonsterPos::RetInstanceMonsterPos()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RetInstanceMonsterPos::InitAsDefaultInstance() {
}

RetInstanceMonsterPos::RetInstanceMonsterPos(const RetInstanceMonsterPos& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RetInstanceMonsterPos::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RetInstanceMonsterPos::~RetInstanceMonsterPos() {
  SharedDtor();
}

void RetInstanceMonsterPos::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RetInstanceMonsterPos::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RetInstanceMonsterPos::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RetInstanceMonsterPos_descriptor_;
}

const RetInstanceMonsterPos& RetInstanceMonsterPos::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

RetInstanceMonsterPos* RetInstanceMonsterPos::default_instance_ = NULL;

RetInstanceMonsterPos* RetInstanceMonsterPos::New() const {
  return new RetInstanceMonsterPos;
}

void RetInstanceMonsterPos::Clear() {
  posinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RetInstanceMonsterPos::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .PlayerSynch.InstanceMonsterPosInfo posInfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_posInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_posinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_posInfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RetInstanceMonsterPos::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .PlayerSynch.InstanceMonsterPosInfo posInfo = 1;
  for (int i = 0; i < this->posinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->posinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RetInstanceMonsterPos::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .PlayerSynch.InstanceMonsterPosInfo posInfo = 1;
  for (int i = 0; i < this->posinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->posinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RetInstanceMonsterPos::ByteSize() const {
  int total_size = 0;

  // repeated .PlayerSynch.InstanceMonsterPosInfo posInfo = 1;
  total_size += 1 * this->posinfo_size();
  for (int i = 0; i < this->posinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->posinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RetInstanceMonsterPos::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RetInstanceMonsterPos* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RetInstanceMonsterPos*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RetInstanceMonsterPos::MergeFrom(const RetInstanceMonsterPos& from) {
  GOOGLE_CHECK_NE(&from, this);
  posinfo_.MergeFrom(from.posinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RetInstanceMonsterPos::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RetInstanceMonsterPos::CopyFrom(const RetInstanceMonsterPos& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RetInstanceMonsterPos::IsInitialized() const {

  for (int i = 0; i < posinfo_size(); i++) {
    if (!this->posinfo(i).IsInitialized()) return false;
  }
  return true;
}

void RetInstanceMonsterPos::Swap(RetInstanceMonsterPos* other) {
  if (other != this) {
    posinfo_.Swap(&other->posinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RetInstanceMonsterPos::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RetInstanceMonsterPos_descriptor_;
  metadata.reflection = RetInstanceMonsterPos_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int InstanceMonsterPosInfo::kMonIDFieldNumber;
const int InstanceMonsterPosInfo::kMonKeyFieldNumber;
const int InstanceMonsterPosInfo::kMonXYposFieldNumber;
#endif  // !_MSC_VER

InstanceMonsterPosInfo::InstanceMonsterPosInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void InstanceMonsterPosInfo::InitAsDefaultInstance() {
}

InstanceMonsterPosInfo::InstanceMonsterPosInfo(const InstanceMonsterPosInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void InstanceMonsterPosInfo::SharedCtor() {
  _cached_size_ = 0;
  monid_ = 0;
  monkey_ = 0;
  monxypos_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

InstanceMonsterPosInfo::~InstanceMonsterPosInfo() {
  SharedDtor();
}

void InstanceMonsterPosInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void InstanceMonsterPosInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* InstanceMonsterPosInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return InstanceMonsterPosInfo_descriptor_;
}

const InstanceMonsterPosInfo& InstanceMonsterPosInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

InstanceMonsterPosInfo* InstanceMonsterPosInfo::default_instance_ = NULL;

InstanceMonsterPosInfo* InstanceMonsterPosInfo::New() const {
  return new InstanceMonsterPosInfo;
}

void InstanceMonsterPosInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    monid_ = 0;
    monkey_ = 0;
    monxypos_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool InstanceMonsterPosInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 monID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monid_)));
          set_has_monid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_monKey;
        break;
      }

      // required int32 monKey = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monKey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monkey_)));
          set_has_monkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_monXYpos;
        break;
      }

      // required int32 monXYpos = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_monXYpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &monxypos_)));
          set_has_monxypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void InstanceMonsterPosInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 monID = 1;
  if (has_monid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->monid(), output);
  }

  // required int32 monKey = 2;
  if (has_monkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->monkey(), output);
  }

  // required int32 monXYpos = 3;
  if (has_monxypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->monxypos(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* InstanceMonsterPosInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 monID = 1;
  if (has_monid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->monid(), target);
  }

  // required int32 monKey = 2;
  if (has_monkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->monkey(), target);
  }

  // required int32 monXYpos = 3;
  if (has_monxypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->monxypos(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int InstanceMonsterPosInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 monID = 1;
    if (has_monid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monid());
    }

    // required int32 monKey = 2;
    if (has_monkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monkey());
    }

    // required int32 monXYpos = 3;
    if (has_monxypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->monxypos());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void InstanceMonsterPosInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const InstanceMonsterPosInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const InstanceMonsterPosInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void InstanceMonsterPosInfo::MergeFrom(const InstanceMonsterPosInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_monid()) {
      set_monid(from.monid());
    }
    if (from.has_monkey()) {
      set_monkey(from.monkey());
    }
    if (from.has_monxypos()) {
      set_monxypos(from.monxypos());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void InstanceMonsterPosInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void InstanceMonsterPosInfo::CopyFrom(const InstanceMonsterPosInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool InstanceMonsterPosInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void InstanceMonsterPosInfo::Swap(InstanceMonsterPosInfo* other) {
  if (other != this) {
    std::swap(monid_, other->monid_);
    std::swap(monkey_, other->monkey_);
    std::swap(monxypos_, other->monxypos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata InstanceMonsterPosInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = InstanceMonsterPosInfo_descriptor_;
  metadata.reflection = InstanceMonsterPosInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GirlWarPathToPlayer::kKeyFieldNumber;
const int GirlWarPathToPlayer::kPosFieldNumber;
#endif  // !_MSC_VER

GirlWarPathToPlayer::GirlWarPathToPlayer()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GirlWarPathToPlayer::InitAsDefaultInstance() {
}

GirlWarPathToPlayer::GirlWarPathToPlayer(const GirlWarPathToPlayer& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GirlWarPathToPlayer::SharedCtor() {
  _cached_size_ = 0;
  key_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GirlWarPathToPlayer::~GirlWarPathToPlayer() {
  SharedDtor();
}

void GirlWarPathToPlayer::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GirlWarPathToPlayer::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GirlWarPathToPlayer::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GirlWarPathToPlayer_descriptor_;
}

const GirlWarPathToPlayer& GirlWarPathToPlayer::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

GirlWarPathToPlayer* GirlWarPathToPlayer::default_instance_ = NULL;

GirlWarPathToPlayer* GirlWarPathToPlayer::New() const {
  return new GirlWarPathToPlayer;
}

void GirlWarPathToPlayer::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    key_ = 0;
  }
  pos_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GirlWarPathToPlayer::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 key = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        break;
      }

      // repeated .PlayerSynch.CharPos pos = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pos:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pos()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pos;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GirlWarPathToPlayer::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 key = 1;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->key(), output);
  }

  // repeated .PlayerSynch.CharPos pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pos(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GirlWarPathToPlayer::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 key = 1;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->key(), target);
  }

  // repeated .PlayerSynch.CharPos pos = 2;
  for (int i = 0; i < this->pos_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pos(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GirlWarPathToPlayer::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 key = 1;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

  }
  // repeated .PlayerSynch.CharPos pos = 2;
  total_size += 1 * this->pos_size();
  for (int i = 0; i < this->pos_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pos(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GirlWarPathToPlayer::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GirlWarPathToPlayer* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GirlWarPathToPlayer*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GirlWarPathToPlayer::MergeFrom(const GirlWarPathToPlayer& from) {
  GOOGLE_CHECK_NE(&from, this);
  pos_.MergeFrom(from.pos_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_key()) {
      set_key(from.key());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GirlWarPathToPlayer::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GirlWarPathToPlayer::CopyFrom(const GirlWarPathToPlayer& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GirlWarPathToPlayer::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pos_size(); i++) {
    if (!this->pos(i).IsInitialized()) return false;
  }
  return true;
}

void GirlWarPathToPlayer::Swap(GirlWarPathToPlayer* other) {
  if (other != this) {
    std::swap(key_, other->key_);
    pos_.Swap(&other->pos_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GirlWarPathToPlayer::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GirlWarPathToPlayer_descriptor_;
  metadata.reflection = GirlWarPathToPlayer_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SynchGirlWar::kIdFieldNumber;
const int SynchGirlWar::kKeyFieldNumber;
const int SynchGirlWar::kOwnerkeyFieldNumber;
const int SynchGirlWar::kLvFieldNumber;
const int SynchGirlWar::kHpFieldNumber;
const int SynchGirlWar::kHpmaxFieldNumber;
const int SynchGirlWar::kXposFieldNumber;
const int SynchGirlWar::kYposFieldNumber;
const int SynchGirlWar::kTargetplayerkeyFieldNumber;
const int SynchGirlWar::kTargetgirlkeyFieldNumber;
#endif  // !_MSC_VER

SynchGirlWar::SynchGirlWar()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SynchGirlWar::InitAsDefaultInstance() {
}

SynchGirlWar::SynchGirlWar(const SynchGirlWar& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SynchGirlWar::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  key_ = 0;
  ownerkey_ = 0;
  lv_ = 0;
  hp_ = 0;
  hpmax_ = 0;
  xpos_ = 0;
  ypos_ = 0;
  targetplayerkey_ = 0;
  targetgirlkey_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SynchGirlWar::~SynchGirlWar() {
  SharedDtor();
}

void SynchGirlWar::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SynchGirlWar::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SynchGirlWar::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SynchGirlWar_descriptor_;
}

const SynchGirlWar& SynchGirlWar::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

SynchGirlWar* SynchGirlWar::default_instance_ = NULL;

SynchGirlWar* SynchGirlWar::New() const {
  return new SynchGirlWar;
}

void SynchGirlWar::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    key_ = 0;
    ownerkey_ = 0;
    lv_ = 0;
    hp_ = 0;
    hpmax_ = 0;
    xpos_ = 0;
    ypos_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    targetplayerkey_ = 0;
    targetgirlkey_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SynchGirlWar::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_key;
        break;
      }

      // optional int32 key = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_key:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &key_)));
          set_has_key();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_ownerkey;
        break;
      }

      // optional int32 ownerkey = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ownerkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ownerkey_)));
          set_has_ownerkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_lv;
        break;
      }

      // optional int32 lv = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_hp;
        break;
      }

      // optional int32 hp = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_hpmax;
        break;
      }

      // optional int32 hpmax = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hpmax:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hpmax_)));
          set_has_hpmax();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_xpos;
        break;
      }

      // optional int32 xpos = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_xpos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &xpos_)));
          set_has_xpos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_ypos;
        break;
      }

      // optional int32 ypos = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ypos:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ypos_)));
          set_has_ypos();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_targetplayerkey;
        break;
      }

      // optional int32 targetplayerkey = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetplayerkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetplayerkey_)));
          set_has_targetplayerkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(80)) goto parse_targetgirlkey;
        break;
      }

      // optional int32 targetgirlkey = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_targetgirlkey:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &targetgirlkey_)));
          set_has_targetgirlkey();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SynchGirlWar::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 key = 2;
  if (has_key()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->key(), output);
  }

  // optional int32 ownerkey = 3;
  if (has_ownerkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->ownerkey(), output);
  }

  // optional int32 lv = 4;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->lv(), output);
  }

  // optional int32 hp = 5;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->hp(), output);
  }

  // optional int32 hpmax = 6;
  if (has_hpmax()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->hpmax(), output);
  }

  // optional int32 xpos = 7;
  if (has_xpos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->xpos(), output);
  }

  // optional int32 ypos = 8;
  if (has_ypos()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->ypos(), output);
  }

  // optional int32 targetplayerkey = 9;
  if (has_targetplayerkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->targetplayerkey(), output);
  }

  // optional int32 targetgirlkey = 10;
  if (has_targetgirlkey()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(10, this->targetgirlkey(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SynchGirlWar::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 key = 2;
  if (has_key()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->key(), target);
  }

  // optional int32 ownerkey = 3;
  if (has_ownerkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->ownerkey(), target);
  }

  // optional int32 lv = 4;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->lv(), target);
  }

  // optional int32 hp = 5;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->hp(), target);
  }

  // optional int32 hpmax = 6;
  if (has_hpmax()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->hpmax(), target);
  }

  // optional int32 xpos = 7;
  if (has_xpos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->xpos(), target);
  }

  // optional int32 ypos = 8;
  if (has_ypos()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->ypos(), target);
  }

  // optional int32 targetplayerkey = 9;
  if (has_targetplayerkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->targetplayerkey(), target);
  }

  // optional int32 targetgirlkey = 10;
  if (has_targetgirlkey()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(10, this->targetgirlkey(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SynchGirlWar::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 key = 2;
    if (has_key()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->key());
    }

    // optional int32 ownerkey = 3;
    if (has_ownerkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ownerkey());
    }

    // optional int32 lv = 4;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 hp = 5;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

    // optional int32 hpmax = 6;
    if (has_hpmax()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hpmax());
    }

    // optional int32 xpos = 7;
    if (has_xpos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->xpos());
    }

    // optional int32 ypos = 8;
    if (has_ypos()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ypos());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 targetplayerkey = 9;
    if (has_targetplayerkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetplayerkey());
    }

    // optional int32 targetgirlkey = 10;
    if (has_targetgirlkey()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->targetgirlkey());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SynchGirlWar::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SynchGirlWar* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SynchGirlWar*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SynchGirlWar::MergeFrom(const SynchGirlWar& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_key()) {
      set_key(from.key());
    }
    if (from.has_ownerkey()) {
      set_ownerkey(from.ownerkey());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
    if (from.has_hpmax()) {
      set_hpmax(from.hpmax());
    }
    if (from.has_xpos()) {
      set_xpos(from.xpos());
    }
    if (from.has_ypos()) {
      set_ypos(from.ypos());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_targetplayerkey()) {
      set_targetplayerkey(from.targetplayerkey());
    }
    if (from.has_targetgirlkey()) {
      set_targetgirlkey(from.targetgirlkey());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SynchGirlWar::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SynchGirlWar::CopyFrom(const SynchGirlWar& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SynchGirlWar::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void SynchGirlWar::Swap(SynchGirlWar* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(key_, other->key_);
    std::swap(ownerkey_, other->ownerkey_);
    std::swap(lv_, other->lv_);
    std::swap(hp_, other->hp_);
    std::swap(hpmax_, other->hpmax_);
    std::swap(xpos_, other->xpos_);
    std::swap(ypos_, other->ypos_);
    std::swap(targetplayerkey_, other->targetplayerkey_);
    std::swap(targetgirlkey_, other->targetgirlkey_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SynchGirlWar::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SynchGirlWar_descriptor_;
  metadata.reflection = SynchGirlWar_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int RemotePlayerEquip::kTypeFieldNumber;
const int RemotePlayerEquip::kIdFieldNumber;
const int RemotePlayerEquip::kStrengGradeFieldNumber;
#endif  // !_MSC_VER

RemotePlayerEquip::RemotePlayerEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void RemotePlayerEquip::InitAsDefaultInstance() {
}

RemotePlayerEquip::RemotePlayerEquip(const RemotePlayerEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void RemotePlayerEquip::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  id_ = 0;
  strenggrade_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

RemotePlayerEquip::~RemotePlayerEquip() {
  SharedDtor();
}

void RemotePlayerEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void RemotePlayerEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* RemotePlayerEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return RemotePlayerEquip_descriptor_;
}

const RemotePlayerEquip& RemotePlayerEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

RemotePlayerEquip* RemotePlayerEquip::default_instance_ = NULL;

RemotePlayerEquip* RemotePlayerEquip::New() const {
  return new RemotePlayerEquip;
}

void RemotePlayerEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    id_ = 0;
    strenggrade_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool RemotePlayerEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_strengGrade;
        break;
      }

      // optional int32 strengGrade = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_strengGrade:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &strenggrade_)));
          set_has_strenggrade();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void RemotePlayerEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 strengGrade = 3;
  if (has_strenggrade()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->strenggrade(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* RemotePlayerEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 strengGrade = 3;
  if (has_strenggrade()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->strenggrade(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int RemotePlayerEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 strengGrade = 3;
    if (has_strenggrade()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->strenggrade());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void RemotePlayerEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const RemotePlayerEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const RemotePlayerEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void RemotePlayerEquip::MergeFrom(const RemotePlayerEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_strenggrade()) {
      set_strenggrade(from.strenggrade());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void RemotePlayerEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void RemotePlayerEquip::CopyFrom(const RemotePlayerEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool RemotePlayerEquip::IsInitialized() const {

  return true;
}

void RemotePlayerEquip::Swap(RemotePlayerEquip* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(id_, other->id_);
    std::swap(strenggrade_, other->strenggrade_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata RemotePlayerEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = RemotePlayerEquip_descriptor_;
  metadata.reflection = RemotePlayerEquip_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AlterPlayerEquip::kPlayeridFieldNumber;
const int AlterPlayerEquip::kEquipsFieldNumber;
#endif  // !_MSC_VER

AlterPlayerEquip::AlterPlayerEquip()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AlterPlayerEquip::InitAsDefaultInstance() {
}

AlterPlayerEquip::AlterPlayerEquip(const AlterPlayerEquip& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AlterPlayerEquip::SharedCtor() {
  _cached_size_ = 0;
  playerid_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AlterPlayerEquip::~AlterPlayerEquip() {
  SharedDtor();
}

void AlterPlayerEquip::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AlterPlayerEquip::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AlterPlayerEquip::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AlterPlayerEquip_descriptor_;
}

const AlterPlayerEquip& AlterPlayerEquip::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Map_2fSynchPath_2eproto();
  return *default_instance_;
}

AlterPlayerEquip* AlterPlayerEquip::default_instance_ = NULL;

AlterPlayerEquip* AlterPlayerEquip::New() const {
  return new AlterPlayerEquip;
}

void AlterPlayerEquip::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    playerid_ = GOOGLE_LONGLONG(0);
  }
  equips_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AlterPlayerEquip::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional int64 playerid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &playerid_)));
          set_has_playerid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equips;
        break;
      }

      // repeated .PlayerSynch.RemotePlayerEquip equips = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_equips:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_equips()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_equips;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AlterPlayerEquip::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional int64 playerid = 1;
  if (has_playerid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->playerid(), output);
  }

  // repeated .PlayerSynch.RemotePlayerEquip equips = 2;
  for (int i = 0; i < this->equips_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->equips(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AlterPlayerEquip::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional int64 playerid = 1;
  if (has_playerid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->playerid(), target);
  }

  // repeated .PlayerSynch.RemotePlayerEquip equips = 2;
  for (int i = 0; i < this->equips_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->equips(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AlterPlayerEquip::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional int64 playerid = 1;
    if (has_playerid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->playerid());
    }

  }
  // repeated .PlayerSynch.RemotePlayerEquip equips = 2;
  total_size += 1 * this->equips_size();
  for (int i = 0; i < this->equips_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->equips(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AlterPlayerEquip::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AlterPlayerEquip* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AlterPlayerEquip*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AlterPlayerEquip::MergeFrom(const AlterPlayerEquip& from) {
  GOOGLE_CHECK_NE(&from, this);
  equips_.MergeFrom(from.equips_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_playerid()) {
      set_playerid(from.playerid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AlterPlayerEquip::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AlterPlayerEquip::CopyFrom(const AlterPlayerEquip& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AlterPlayerEquip::IsInitialized() const {

  return true;
}

void AlterPlayerEquip::Swap(AlterPlayerEquip* other) {
  if (other != this) {
    std::swap(playerid_, other->playerid_);
    equips_.Swap(&other->equips_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AlterPlayerEquip::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AlterPlayerEquip_descriptor_;
  metadata.reflection = AlterPlayerEquip_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace PlayerSynch

// @@protoc_insertion_point(global_scope)
