// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Country/CountryOverlord.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Country/CountryOverlord.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CountryOverlord {

namespace {

const ::google::protobuf::Descriptor* AckReqCountryOverlordMapID_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckReqCountryOverlordMapID_reflection_ = NULL;
const ::google::protobuf::Descriptor* ReqCountryParticipationQualification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ReqCountryParticipationQualification_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckCountryParticipationQualification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckCountryParticipationQualification_reflection_ = NULL;
const ::google::protobuf::Descriptor* ParticipationQualification_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ParticipationQualification_reflection_ = NULL;
const ::google::protobuf::Descriptor* OverlordWarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  OverlordWarData_reflection_ = NULL;
const ::google::protobuf::Descriptor* WarData_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WarData_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Country_2fCountryOverlord_2eproto() {
  protobuf_AddDesc_Country_2fCountryOverlord_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Country/CountryOverlord.proto");
  GOOGLE_CHECK(file != NULL);
  AckReqCountryOverlordMapID_descriptor_ = file->message_type(0);
  static const int AckReqCountryOverlordMapID_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqCountryOverlordMapID, id_),
  };
  AckReqCountryOverlordMapID_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckReqCountryOverlordMapID_descriptor_,
      AckReqCountryOverlordMapID::default_instance_,
      AckReqCountryOverlordMapID_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqCountryOverlordMapID, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckReqCountryOverlordMapID, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckReqCountryOverlordMapID));
  ReqCountryParticipationQualification_descriptor_ = file->message_type(1);
  static const int ReqCountryParticipationQualification_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCountryParticipationQualification, country_),
  };
  ReqCountryParticipationQualification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ReqCountryParticipationQualification_descriptor_,
      ReqCountryParticipationQualification::default_instance_,
      ReqCountryParticipationQualification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCountryParticipationQualification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ReqCountryParticipationQualification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ReqCountryParticipationQualification));
  AckCountryParticipationQualification_descriptor_ = file->message_type(2);
  static const int AckCountryParticipationQualification_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCountryParticipationQualification, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCountryParticipationQualification, pqinfo_),
  };
  AckCountryParticipationQualification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckCountryParticipationQualification_descriptor_,
      AckCountryParticipationQualification::default_instance_,
      AckCountryParticipationQualification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCountryParticipationQualification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCountryParticipationQualification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckCountryParticipationQualification));
  ParticipationQualification_descriptor_ = file->message_type(3);
  static const int ParticipationQualification_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipationQualification, rank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipationQualification, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipationQualification, lv_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipationQualification, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipationQualification, job_),
  };
  ParticipationQualification_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ParticipationQualification_descriptor_,
      ParticipationQualification::default_instance_,
      ParticipationQualification_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipationQualification, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ParticipationQualification, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ParticipationQualification));
  OverlordWarData_descriptor_ = file->message_type(4);
  static const int OverlordWarData_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverlordWarData, data_),
  };
  OverlordWarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      OverlordWarData_descriptor_,
      OverlordWarData::default_instance_,
      OverlordWarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverlordWarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(OverlordWarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(OverlordWarData));
  WarData_descriptor_ = file->message_type(5);
  static const int WarData_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarData, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarData, killer_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarData, integral_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarData, clanname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarData, country_),
  };
  WarData_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WarData_descriptor_,
      WarData::default_instance_,
      WarData_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarData, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WarData, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WarData));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Country_2fCountryOverlord_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckReqCountryOverlordMapID_descriptor_, &AckReqCountryOverlordMapID::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ReqCountryParticipationQualification_descriptor_, &ReqCountryParticipationQualification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckCountryParticipationQualification_descriptor_, &AckCountryParticipationQualification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ParticipationQualification_descriptor_, &ParticipationQualification::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    OverlordWarData_descriptor_, &OverlordWarData::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WarData_descriptor_, &WarData::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Country_2fCountryOverlord_2eproto() {
  delete AckReqCountryOverlordMapID::default_instance_;
  delete AckReqCountryOverlordMapID_reflection_;
  delete ReqCountryParticipationQualification::default_instance_;
  delete ReqCountryParticipationQualification_reflection_;
  delete AckCountryParticipationQualification::default_instance_;
  delete AckCountryParticipationQualification_reflection_;
  delete ParticipationQualification::default_instance_;
  delete ParticipationQualification_reflection_;
  delete OverlordWarData::default_instance_;
  delete OverlordWarData_reflection_;
  delete WarData::default_instance_;
  delete WarData_reflection_;
}

void protobuf_AddDesc_Country_2fCountryOverlord_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\035Country/CountryOverlord.proto\022\017Country"
    "Overlord\"(\n\032AckReqCountryOverlordMapID\022\n"
    "\n\002id\030\001 \002(\003\"7\n$ReqCountryParticipationQua"
    "lification\022\017\n\007country\030\001 \002(\005\"t\n$AckCountr"
    "yParticipationQualification\022\017\n\007country\030\001"
    " \002(\005\022;\n\006pqinfo\030\002 \003(\0132+.CountryOverlord.P"
    "articipationQualification\"i\n\032Participati"
    "onQualification\022\014\n\004rank\030\001 \002(\005\022\020\n\010charnam"
    "e\030\002 \001(\t\022\n\n\002lv\030\003 \001(\005\022\022\n\ncontribute\030\004 \001(\005\022"
    "\013\n\003job\030\005 \001(\005\"9\n\017OverlordWarData\022&\n\004data\030"
    "\001 \003(\0132\030.CountryOverlord.WarData\"`\n\007WarDa"
    "ta\022\020\n\010charname\030\001 \001(\t\022\016\n\006killer\030\002 \001(\005\022\020\n\010"
    "integral\030\003 \001(\005\022\020\n\010clanname\030\004 \001(\t\022\017\n\007coun"
    "try\030\005 \001(\005", 529);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Country/CountryOverlord.proto", &protobuf_RegisterTypes);
  AckReqCountryOverlordMapID::default_instance_ = new AckReqCountryOverlordMapID();
  ReqCountryParticipationQualification::default_instance_ = new ReqCountryParticipationQualification();
  AckCountryParticipationQualification::default_instance_ = new AckCountryParticipationQualification();
  ParticipationQualification::default_instance_ = new ParticipationQualification();
  OverlordWarData::default_instance_ = new OverlordWarData();
  WarData::default_instance_ = new WarData();
  AckReqCountryOverlordMapID::default_instance_->InitAsDefaultInstance();
  ReqCountryParticipationQualification::default_instance_->InitAsDefaultInstance();
  AckCountryParticipationQualification::default_instance_->InitAsDefaultInstance();
  ParticipationQualification::default_instance_->InitAsDefaultInstance();
  OverlordWarData::default_instance_->InitAsDefaultInstance();
  WarData::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Country_2fCountryOverlord_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Country_2fCountryOverlord_2eproto {
  StaticDescriptorInitializer_Country_2fCountryOverlord_2eproto() {
    protobuf_AddDesc_Country_2fCountryOverlord_2eproto();
  }
} static_descriptor_initializer_Country_2fCountryOverlord_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AckReqCountryOverlordMapID::kIdFieldNumber;
#endif  // !_MSC_VER

AckReqCountryOverlordMapID::AckReqCountryOverlordMapID()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckReqCountryOverlordMapID::InitAsDefaultInstance() {
}

AckReqCountryOverlordMapID::AckReqCountryOverlordMapID(const AckReqCountryOverlordMapID& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckReqCountryOverlordMapID::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckReqCountryOverlordMapID::~AckReqCountryOverlordMapID() {
  SharedDtor();
}

void AckReqCountryOverlordMapID::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckReqCountryOverlordMapID::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckReqCountryOverlordMapID::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckReqCountryOverlordMapID_descriptor_;
}

const AckReqCountryOverlordMapID& AckReqCountryOverlordMapID::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryOverlord_2eproto();
  return *default_instance_;
}

AckReqCountryOverlordMapID* AckReqCountryOverlordMapID::default_instance_ = NULL;

AckReqCountryOverlordMapID* AckReqCountryOverlordMapID::New() const {
  return new AckReqCountryOverlordMapID;
}

void AckReqCountryOverlordMapID::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckReqCountryOverlordMapID::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckReqCountryOverlordMapID::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckReqCountryOverlordMapID::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckReqCountryOverlordMapID::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckReqCountryOverlordMapID::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckReqCountryOverlordMapID* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckReqCountryOverlordMapID*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckReqCountryOverlordMapID::MergeFrom(const AckReqCountryOverlordMapID& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckReqCountryOverlordMapID::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckReqCountryOverlordMapID::CopyFrom(const AckReqCountryOverlordMapID& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckReqCountryOverlordMapID::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckReqCountryOverlordMapID::Swap(AckReqCountryOverlordMapID* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckReqCountryOverlordMapID::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckReqCountryOverlordMapID_descriptor_;
  metadata.reflection = AckReqCountryOverlordMapID_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ReqCountryParticipationQualification::kCountryFieldNumber;
#endif  // !_MSC_VER

ReqCountryParticipationQualification::ReqCountryParticipationQualification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ReqCountryParticipationQualification::InitAsDefaultInstance() {
}

ReqCountryParticipationQualification::ReqCountryParticipationQualification(const ReqCountryParticipationQualification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ReqCountryParticipationQualification::SharedCtor() {
  _cached_size_ = 0;
  country_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ReqCountryParticipationQualification::~ReqCountryParticipationQualification() {
  SharedDtor();
}

void ReqCountryParticipationQualification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ReqCountryParticipationQualification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ReqCountryParticipationQualification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ReqCountryParticipationQualification_descriptor_;
}

const ReqCountryParticipationQualification& ReqCountryParticipationQualification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryOverlord_2eproto();
  return *default_instance_;
}

ReqCountryParticipationQualification* ReqCountryParticipationQualification::default_instance_ = NULL;

ReqCountryParticipationQualification* ReqCountryParticipationQualification::New() const {
  return new ReqCountryParticipationQualification;
}

void ReqCountryParticipationQualification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ReqCountryParticipationQualification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ReqCountryParticipationQualification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->country(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ReqCountryParticipationQualification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 country = 1;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->country(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ReqCountryParticipationQualification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ReqCountryParticipationQualification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ReqCountryParticipationQualification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ReqCountryParticipationQualification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ReqCountryParticipationQualification::MergeFrom(const ReqCountryParticipationQualification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ReqCountryParticipationQualification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ReqCountryParticipationQualification::CopyFrom(const ReqCountryParticipationQualification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ReqCountryParticipationQualification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ReqCountryParticipationQualification::Swap(ReqCountryParticipationQualification* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ReqCountryParticipationQualification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ReqCountryParticipationQualification_descriptor_;
  metadata.reflection = ReqCountryParticipationQualification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckCountryParticipationQualification::kCountryFieldNumber;
const int AckCountryParticipationQualification::kPqinfoFieldNumber;
#endif  // !_MSC_VER

AckCountryParticipationQualification::AckCountryParticipationQualification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckCountryParticipationQualification::InitAsDefaultInstance() {
}

AckCountryParticipationQualification::AckCountryParticipationQualification(const AckCountryParticipationQualification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckCountryParticipationQualification::SharedCtor() {
  _cached_size_ = 0;
  country_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckCountryParticipationQualification::~AckCountryParticipationQualification() {
  SharedDtor();
}

void AckCountryParticipationQualification::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckCountryParticipationQualification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckCountryParticipationQualification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckCountryParticipationQualification_descriptor_;
}

const AckCountryParticipationQualification& AckCountryParticipationQualification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryOverlord_2eproto();
  return *default_instance_;
}

AckCountryParticipationQualification* AckCountryParticipationQualification::default_instance_ = NULL;

AckCountryParticipationQualification* AckCountryParticipationQualification::New() const {
  return new AckCountryParticipationQualification;
}

void AckCountryParticipationQualification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_ = 0;
  }
  pqinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckCountryParticipationQualification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pqinfo;
        break;
      }

      // repeated .CountryOverlord.ParticipationQualification pqinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pqinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_pqinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_pqinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckCountryParticipationQualification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->country(), output);
  }

  // repeated .CountryOverlord.ParticipationQualification pqinfo = 2;
  for (int i = 0; i < this->pqinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->pqinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckCountryParticipationQualification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 country = 1;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->country(), target);
  }

  // repeated .CountryOverlord.ParticipationQualification pqinfo = 2;
  for (int i = 0; i < this->pqinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->pqinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckCountryParticipationQualification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

  }
  // repeated .CountryOverlord.ParticipationQualification pqinfo = 2;
  total_size += 1 * this->pqinfo_size();
  for (int i = 0; i < this->pqinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->pqinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckCountryParticipationQualification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckCountryParticipationQualification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckCountryParticipationQualification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckCountryParticipationQualification::MergeFrom(const AckCountryParticipationQualification& from) {
  GOOGLE_CHECK_NE(&from, this);
  pqinfo_.MergeFrom(from.pqinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckCountryParticipationQualification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCountryParticipationQualification::CopyFrom(const AckCountryParticipationQualification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCountryParticipationQualification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < pqinfo_size(); i++) {
    if (!this->pqinfo(i).IsInitialized()) return false;
  }
  return true;
}

void AckCountryParticipationQualification::Swap(AckCountryParticipationQualification* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    pqinfo_.Swap(&other->pqinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckCountryParticipationQualification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckCountryParticipationQualification_descriptor_;
  metadata.reflection = AckCountryParticipationQualification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ParticipationQualification::kRankFieldNumber;
const int ParticipationQualification::kCharnameFieldNumber;
const int ParticipationQualification::kLvFieldNumber;
const int ParticipationQualification::kContributeFieldNumber;
const int ParticipationQualification::kJobFieldNumber;
#endif  // !_MSC_VER

ParticipationQualification::ParticipationQualification()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ParticipationQualification::InitAsDefaultInstance() {
}

ParticipationQualification::ParticipationQualification(const ParticipationQualification& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ParticipationQualification::SharedCtor() {
  _cached_size_ = 0;
  rank_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  lv_ = 0;
  contribute_ = 0;
  job_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ParticipationQualification::~ParticipationQualification() {
  SharedDtor();
}

void ParticipationQualification::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void ParticipationQualification::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ParticipationQualification::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ParticipationQualification_descriptor_;
}

const ParticipationQualification& ParticipationQualification::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryOverlord_2eproto();
  return *default_instance_;
}

ParticipationQualification* ParticipationQualification::default_instance_ = NULL;

ParticipationQualification* ParticipationQualification::New() const {
  return new ParticipationQualification;
}

void ParticipationQualification::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    rank_ = 0;
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    lv_ = 0;
    contribute_ = 0;
    job_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ParticipationQualification::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 rank = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &rank_)));
          set_has_rank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_lv;
        break;
      }

      // optional int32 lv = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_lv:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &lv_)));
          set_has_lv();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_contribute;
        break;
      }

      // optional int32 contribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_job;
        break;
      }

      // optional int32 job = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ParticipationQualification::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 rank = 1;
  if (has_rank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->rank(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->lv(), output);
  }

  // optional int32 contribute = 4;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->contribute(), output);
  }

  // optional int32 job = 5;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->job(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ParticipationQualification::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 rank = 1;
  if (has_rank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->rank(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // optional int32 lv = 3;
  if (has_lv()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->lv(), target);
  }

  // optional int32 contribute = 4;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->contribute(), target);
  }

  // optional int32 job = 5;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->job(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ParticipationQualification::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 rank = 1;
    if (has_rank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->rank());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 lv = 3;
    if (has_lv()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->lv());
    }

    // optional int32 contribute = 4;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }

    // optional int32 job = 5;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ParticipationQualification::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ParticipationQualification* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ParticipationQualification*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ParticipationQualification::MergeFrom(const ParticipationQualification& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_rank()) {
      set_rank(from.rank());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_lv()) {
      set_lv(from.lv());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ParticipationQualification::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ParticipationQualification::CopyFrom(const ParticipationQualification& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ParticipationQualification::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ParticipationQualification::Swap(ParticipationQualification* other) {
  if (other != this) {
    std::swap(rank_, other->rank_);
    std::swap(charname_, other->charname_);
    std::swap(lv_, other->lv_);
    std::swap(contribute_, other->contribute_);
    std::swap(job_, other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ParticipationQualification::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ParticipationQualification_descriptor_;
  metadata.reflection = ParticipationQualification_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int OverlordWarData::kDataFieldNumber;
#endif  // !_MSC_VER

OverlordWarData::OverlordWarData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void OverlordWarData::InitAsDefaultInstance() {
}

OverlordWarData::OverlordWarData(const OverlordWarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void OverlordWarData::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

OverlordWarData::~OverlordWarData() {
  SharedDtor();
}

void OverlordWarData::SharedDtor() {
  if (this != default_instance_) {
  }
}

void OverlordWarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* OverlordWarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return OverlordWarData_descriptor_;
}

const OverlordWarData& OverlordWarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryOverlord_2eproto();
  return *default_instance_;
}

OverlordWarData* OverlordWarData::default_instance_ = NULL;

OverlordWarData* OverlordWarData::New() const {
  return new OverlordWarData;
}

void OverlordWarData::Clear() {
  data_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool OverlordWarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CountryOverlord.WarData data = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_data:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_data()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_data;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void OverlordWarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CountryOverlord.WarData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->data(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* OverlordWarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CountryOverlord.WarData data = 1;
  for (int i = 0; i < this->data_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->data(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int OverlordWarData::ByteSize() const {
  int total_size = 0;

  // repeated .CountryOverlord.WarData data = 1;
  total_size += 1 * this->data_size();
  for (int i = 0; i < this->data_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->data(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void OverlordWarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const OverlordWarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const OverlordWarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void OverlordWarData::MergeFrom(const OverlordWarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  data_.MergeFrom(from.data_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void OverlordWarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void OverlordWarData::CopyFrom(const OverlordWarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool OverlordWarData::IsInitialized() const {

  return true;
}

void OverlordWarData::Swap(OverlordWarData* other) {
  if (other != this) {
    data_.Swap(&other->data_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata OverlordWarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = OverlordWarData_descriptor_;
  metadata.reflection = OverlordWarData_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WarData::kCharnameFieldNumber;
const int WarData::kKillerFieldNumber;
const int WarData::kIntegralFieldNumber;
const int WarData::kClannameFieldNumber;
const int WarData::kCountryFieldNumber;
#endif  // !_MSC_VER

WarData::WarData()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WarData::InitAsDefaultInstance() {
}

WarData::WarData(const WarData& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WarData::SharedCtor() {
  _cached_size_ = 0;
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  killer_ = 0;
  integral_ = 0;
  clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  country_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WarData::~WarData() {
  SharedDtor();
}

void WarData::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (this != default_instance_) {
  }
}

void WarData::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WarData::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WarData_descriptor_;
}

const WarData& WarData::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryOverlord_2eproto();
  return *default_instance_;
}

WarData* WarData::default_instance_ = NULL;

WarData* WarData::New() const {
  return new WarData;
}

void WarData::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    killer_ = 0;
    integral_ = 0;
    if (has_clanname()) {
      if (clanname_ != &::google::protobuf::internal::kEmptyString) {
        clanname_->clear();
      }
    }
    country_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WarData::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // optional string charname = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_killer;
        break;
      }

      // optional int32 killer = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_killer:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &killer_)));
          set_has_killer();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_integral;
        break;
      }

      // optional int32 integral = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_integral:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &integral_)));
          set_has_integral();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_clanname;
        break;
      }

      // optional string clanname = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_clanname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_clanname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->clanname().data(), this->clanname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_country;
        break;
      }

      // optional int32 country = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WarData::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // optional string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->charname(), output);
  }

  // optional int32 killer = 2;
  if (has_killer()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->killer(), output);
  }

  // optional int32 integral = 3;
  if (has_integral()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->integral(), output);
  }

  // optional string clanname = 4;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->clanname(), output);
  }

  // optional int32 country = 5;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->country(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WarData::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // optional string charname = 1;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->charname(), target);
  }

  // optional int32 killer = 2;
  if (has_killer()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->killer(), target);
  }

  // optional int32 integral = 3;
  if (has_integral()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->integral(), target);
  }

  // optional string clanname = 4;
  if (has_clanname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->clanname().data(), this->clanname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->clanname(), target);
  }

  // optional int32 country = 5;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->country(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WarData::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // optional string charname = 1;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional int32 killer = 2;
    if (has_killer()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->killer());
    }

    // optional int32 integral = 3;
    if (has_integral()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->integral());
    }

    // optional string clanname = 4;
    if (has_clanname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->clanname());
    }

    // optional int32 country = 5;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WarData::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WarData* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WarData*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WarData::MergeFrom(const WarData& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_killer()) {
      set_killer(from.killer());
    }
    if (from.has_integral()) {
      set_integral(from.integral());
    }
    if (from.has_clanname()) {
      set_clanname(from.clanname());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WarData::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WarData::CopyFrom(const WarData& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WarData::IsInitialized() const {

  return true;
}

void WarData::Swap(WarData* other) {
  if (other != this) {
    std::swap(charname_, other->charname_);
    std::swap(killer_, other->killer_);
    std::swap(integral_, other->integral_);
    std::swap(clanname_, other->clanname_);
    std::swap(country_, other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WarData::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WarData_descriptor_;
  metadata.reflection = WarData_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CountryOverlord

// @@protoc_insertion_point(global_scope)
