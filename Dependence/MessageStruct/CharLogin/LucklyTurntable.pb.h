// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/LucklyTurntable.proto

#ifndef PROTOBUF_CharLogin_2fLucklyTurntable_2eproto__INCLUDED
#define PROTOBUF_CharLogin_2fLucklyTurntable_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace LucklyTurntable {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CharLogin_2fLucklyTurntable_2eproto();
void protobuf_AssignDesc_CharLogin_2fLucklyTurntable_2eproto();
void protobuf_ShutdownFile_CharLogin_2fLucklyTurntable_2eproto();

class AckLucklyTurntable;
class AckRefulshOrGetLucklyTurntable;
class AckGetLucklyTurntable;
class ClientRollLucklyTurntable;
class AckRollLucklyTurntable;

// ===================================================================

class AckLucklyTurntable : public ::google::protobuf::Message {
 public:
  AckLucklyTurntable();
  virtual ~AckLucklyTurntable();

  AckLucklyTurntable(const AckLucklyTurntable& from);

  inline AckLucklyTurntable& operator=(const AckLucklyTurntable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckLucklyTurntable& default_instance();

  void Swap(AckLucklyTurntable* other);

  // implements Message ----------------------------------------------

  AckLucklyTurntable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckLucklyTurntable& from);
  void MergeFrom(const AckLucklyTurntable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional double enterTm = 2;
  inline bool has_entertm() const;
  inline void clear_entertm();
  static const int kEnterTmFieldNumber = 2;
  inline double entertm() const;
  inline void set_entertm(double value);

  // repeated int32 reawIDList = 3;
  inline int reawidlist_size() const;
  inline void clear_reawidlist();
  static const int kReawIDListFieldNumber = 3;
  inline ::google::protobuf::int32 reawidlist(int index) const;
  inline void set_reawidlist(int index, ::google::protobuf::int32 value);
  inline void add_reawidlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      reawidlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_reawidlist();

  // optional int32 freeNum = 4;
  inline bool has_freenum() const;
  inline void clear_freenum();
  static const int kFreeNumFieldNumber = 4;
  inline ::google::protobuf::int32 freenum() const;
  inline void set_freenum(::google::protobuf::int32 value);

  // repeated int32 itemID = 5;
  inline int itemid_size() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 5;
  inline ::google::protobuf::int32 itemid(int index) const;
  inline void set_itemid(int index, ::google::protobuf::int32 value);
  inline void add_itemid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      itemid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_itemid();

  // repeated int32 num = 6;
  inline int num_size() const;
  inline void clear_num();
  static const int kNumFieldNumber = 6;
  inline ::google::protobuf::int32 num(int index) const;
  inline void set_num(int index, ::google::protobuf::int32 value);
  inline void add_num(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_num();

  // @@protoc_insertion_point(class_scope:LucklyTurntable.AckLucklyTurntable)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_entertm();
  inline void clear_has_entertm();
  inline void set_has_freenum();
  inline void clear_has_freenum();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  double entertm_;
  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 freenum_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > reawidlist_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > itemid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(6 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fLucklyTurntable_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fLucklyTurntable_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fLucklyTurntable_2eproto();

  void InitAsDefaultInstance();
  static AckLucklyTurntable* default_instance_;
};
// -------------------------------------------------------------------

class AckRefulshOrGetLucklyTurntable : public ::google::protobuf::Message {
 public:
  AckRefulshOrGetLucklyTurntable();
  virtual ~AckRefulshOrGetLucklyTurntable();

  AckRefulshOrGetLucklyTurntable(const AckRefulshOrGetLucklyTurntable& from);

  inline AckRefulshOrGetLucklyTurntable& operator=(const AckRefulshOrGetLucklyTurntable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckRefulshOrGetLucklyTurntable& default_instance();

  void Swap(AckRefulshOrGetLucklyTurntable* other);

  // implements Message ----------------------------------------------

  AckRefulshOrGetLucklyTurntable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckRefulshOrGetLucklyTurntable& from);
  void MergeFrom(const AckRefulshOrGetLucklyTurntable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 enterTm = 2;
  inline bool has_entertm() const;
  inline void clear_entertm();
  static const int kEnterTmFieldNumber = 2;
  inline ::google::protobuf::int32 entertm() const;
  inline void set_entertm(::google::protobuf::int32 value);

  // repeated int32 reawIDList = 3;
  inline int reawidlist_size() const;
  inline void clear_reawidlist();
  static const int kReawIDListFieldNumber = 3;
  inline ::google::protobuf::int32 reawidlist(int index) const;
  inline void set_reawidlist(int index, ::google::protobuf::int32 value);
  inline void add_reawidlist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      reawidlist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_reawidlist();

  // @@protoc_insertion_point(class_scope:LucklyTurntable.AckRefulshOrGetLucklyTurntable)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_entertm();
  inline void clear_has_entertm();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 entertm_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > reawidlist_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fLucklyTurntable_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fLucklyTurntable_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fLucklyTurntable_2eproto();

  void InitAsDefaultInstance();
  static AckRefulshOrGetLucklyTurntable* default_instance_;
};
// -------------------------------------------------------------------

class AckGetLucklyTurntable : public ::google::protobuf::Message {
 public:
  AckGetLucklyTurntable();
  virtual ~AckGetLucklyTurntable();

  AckGetLucklyTurntable(const AckGetLucklyTurntable& from);

  inline AckGetLucklyTurntable& operator=(const AckGetLucklyTurntable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGetLucklyTurntable& default_instance();

  void Swap(AckGetLucklyTurntable* other);

  // implements Message ----------------------------------------------

  AckGetLucklyTurntable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGetLucklyTurntable& from);
  void MergeFrom(const AckGetLucklyTurntable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // optional int32 notAdd = 2;
  inline bool has_notadd() const;
  inline void clear_notadd();
  static const int kNotAddFieldNumber = 2;
  inline ::google::protobuf::int32 notadd() const;
  inline void set_notadd(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LucklyTurntable.AckGetLucklyTurntable)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();
  inline void set_has_notadd();
  inline void clear_has_notadd();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 ret_;
  ::google::protobuf::int32 notadd_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fLucklyTurntable_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fLucklyTurntable_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fLucklyTurntable_2eproto();

  void InitAsDefaultInstance();
  static AckGetLucklyTurntable* default_instance_;
};
// -------------------------------------------------------------------

class ClientRollLucklyTurntable : public ::google::protobuf::Message {
 public:
  ClientRollLucklyTurntable();
  virtual ~ClientRollLucklyTurntable();

  ClientRollLucklyTurntable(const ClientRollLucklyTurntable& from);

  inline ClientRollLucklyTurntable& operator=(const ClientRollLucklyTurntable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientRollLucklyTurntable& default_instance();

  void Swap(ClientRollLucklyTurntable* other);

  // implements Message ----------------------------------------------

  ClientRollLucklyTurntable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientRollLucklyTurntable& from);
  void MergeFrom(const ClientRollLucklyTurntable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 num = 1;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 1;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:LucklyTurntable.ClientRollLucklyTurntable)
 private:
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fLucklyTurntable_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fLucklyTurntable_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fLucklyTurntable_2eproto();

  void InitAsDefaultInstance();
  static ClientRollLucklyTurntable* default_instance_;
};
// -------------------------------------------------------------------

class AckRollLucklyTurntable : public ::google::protobuf::Message {
 public:
  AckRollLucklyTurntable();
  virtual ~AckRollLucklyTurntable();

  AckRollLucklyTurntable(const AckRollLucklyTurntable& from);

  inline AckRollLucklyTurntable& operator=(const AckRollLucklyTurntable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckRollLucklyTurntable& default_instance();

  void Swap(AckRollLucklyTurntable* other);

  // implements Message ----------------------------------------------

  AckRollLucklyTurntable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckRollLucklyTurntable& from);
  void MergeFrom(const AckRollLucklyTurntable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 ret = 1;
  inline bool has_ret() const;
  inline void clear_ret();
  static const int kRetFieldNumber = 1;
  inline ::google::protobuf::int32 ret() const;
  inline void set_ret(::google::protobuf::int32 value);

  // repeated int32 itemID = 2;
  inline int itemid_size() const;
  inline void clear_itemid();
  static const int kItemIDFieldNumber = 2;
  inline ::google::protobuf::int32 itemid(int index) const;
  inline void set_itemid(int index, ::google::protobuf::int32 value);
  inline void add_itemid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      itemid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_itemid();

  // repeated int32 num = 3;
  inline int num_size() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num(int index) const;
  inline void set_num(int index, ::google::protobuf::int32 value);
  inline void add_num(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      num() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_num();

  // @@protoc_insertion_point(class_scope:LucklyTurntable.AckRollLucklyTurntable)
 private:
  inline void set_has_ret();
  inline void clear_has_ret();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > itemid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > num_;
  ::google::protobuf::int32 ret_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fLucklyTurntable_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fLucklyTurntable_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fLucklyTurntable_2eproto();

  void InitAsDefaultInstance();
  static AckRollLucklyTurntable* default_instance_;
};
// ===================================================================


// ===================================================================

// AckLucklyTurntable

// required int32 ret = 1;
inline bool AckLucklyTurntable::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckLucklyTurntable::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckLucklyTurntable::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckLucklyTurntable::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AckLucklyTurntable::ret() const {
  return ret_;
}
inline void AckLucklyTurntable::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional double enterTm = 2;
inline bool AckLucklyTurntable::has_entertm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckLucklyTurntable::set_has_entertm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckLucklyTurntable::clear_has_entertm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckLucklyTurntable::clear_entertm() {
  entertm_ = 0;
  clear_has_entertm();
}
inline double AckLucklyTurntable::entertm() const {
  return entertm_;
}
inline void AckLucklyTurntable::set_entertm(double value) {
  set_has_entertm();
  entertm_ = value;
}

// repeated int32 reawIDList = 3;
inline int AckLucklyTurntable::reawidlist_size() const {
  return reawidlist_.size();
}
inline void AckLucklyTurntable::clear_reawidlist() {
  reawidlist_.Clear();
}
inline ::google::protobuf::int32 AckLucklyTurntable::reawidlist(int index) const {
  return reawidlist_.Get(index);
}
inline void AckLucklyTurntable::set_reawidlist(int index, ::google::protobuf::int32 value) {
  reawidlist_.Set(index, value);
}
inline void AckLucklyTurntable::add_reawidlist(::google::protobuf::int32 value) {
  reawidlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckLucklyTurntable::reawidlist() const {
  return reawidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckLucklyTurntable::mutable_reawidlist() {
  return &reawidlist_;
}

// optional int32 freeNum = 4;
inline bool AckLucklyTurntable::has_freenum() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void AckLucklyTurntable::set_has_freenum() {
  _has_bits_[0] |= 0x00000008u;
}
inline void AckLucklyTurntable::clear_has_freenum() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void AckLucklyTurntable::clear_freenum() {
  freenum_ = 0;
  clear_has_freenum();
}
inline ::google::protobuf::int32 AckLucklyTurntable::freenum() const {
  return freenum_;
}
inline void AckLucklyTurntable::set_freenum(::google::protobuf::int32 value) {
  set_has_freenum();
  freenum_ = value;
}

// repeated int32 itemID = 5;
inline int AckLucklyTurntable::itemid_size() const {
  return itemid_.size();
}
inline void AckLucklyTurntable::clear_itemid() {
  itemid_.Clear();
}
inline ::google::protobuf::int32 AckLucklyTurntable::itemid(int index) const {
  return itemid_.Get(index);
}
inline void AckLucklyTurntable::set_itemid(int index, ::google::protobuf::int32 value) {
  itemid_.Set(index, value);
}
inline void AckLucklyTurntable::add_itemid(::google::protobuf::int32 value) {
  itemid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckLucklyTurntable::itemid() const {
  return itemid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckLucklyTurntable::mutable_itemid() {
  return &itemid_;
}

// repeated int32 num = 6;
inline int AckLucklyTurntable::num_size() const {
  return num_.size();
}
inline void AckLucklyTurntable::clear_num() {
  num_.Clear();
}
inline ::google::protobuf::int32 AckLucklyTurntable::num(int index) const {
  return num_.Get(index);
}
inline void AckLucklyTurntable::set_num(int index, ::google::protobuf::int32 value) {
  num_.Set(index, value);
}
inline void AckLucklyTurntable::add_num(::google::protobuf::int32 value) {
  num_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckLucklyTurntable::num() const {
  return num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckLucklyTurntable::mutable_num() {
  return &num_;
}

// -------------------------------------------------------------------

// AckRefulshOrGetLucklyTurntable

// required int32 ret = 1;
inline bool AckRefulshOrGetLucklyTurntable::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckRefulshOrGetLucklyTurntable::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckRefulshOrGetLucklyTurntable::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckRefulshOrGetLucklyTurntable::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AckRefulshOrGetLucklyTurntable::ret() const {
  return ret_;
}
inline void AckRefulshOrGetLucklyTurntable::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 enterTm = 2;
inline bool AckRefulshOrGetLucklyTurntable::has_entertm() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckRefulshOrGetLucklyTurntable::set_has_entertm() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckRefulshOrGetLucklyTurntable::clear_has_entertm() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckRefulshOrGetLucklyTurntable::clear_entertm() {
  entertm_ = 0;
  clear_has_entertm();
}
inline ::google::protobuf::int32 AckRefulshOrGetLucklyTurntable::entertm() const {
  return entertm_;
}
inline void AckRefulshOrGetLucklyTurntable::set_entertm(::google::protobuf::int32 value) {
  set_has_entertm();
  entertm_ = value;
}

// repeated int32 reawIDList = 3;
inline int AckRefulshOrGetLucklyTurntable::reawidlist_size() const {
  return reawidlist_.size();
}
inline void AckRefulshOrGetLucklyTurntable::clear_reawidlist() {
  reawidlist_.Clear();
}
inline ::google::protobuf::int32 AckRefulshOrGetLucklyTurntable::reawidlist(int index) const {
  return reawidlist_.Get(index);
}
inline void AckRefulshOrGetLucklyTurntable::set_reawidlist(int index, ::google::protobuf::int32 value) {
  reawidlist_.Set(index, value);
}
inline void AckRefulshOrGetLucklyTurntable::add_reawidlist(::google::protobuf::int32 value) {
  reawidlist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckRefulshOrGetLucklyTurntable::reawidlist() const {
  return reawidlist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckRefulshOrGetLucklyTurntable::mutable_reawidlist() {
  return &reawidlist_;
}

// -------------------------------------------------------------------

// AckGetLucklyTurntable

// required int32 ret = 1;
inline bool AckGetLucklyTurntable::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGetLucklyTurntable::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGetLucklyTurntable::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGetLucklyTurntable::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AckGetLucklyTurntable::ret() const {
  return ret_;
}
inline void AckGetLucklyTurntable::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// optional int32 notAdd = 2;
inline bool AckGetLucklyTurntable::has_notadd() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGetLucklyTurntable::set_has_notadd() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGetLucklyTurntable::clear_has_notadd() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGetLucklyTurntable::clear_notadd() {
  notadd_ = 0;
  clear_has_notadd();
}
inline ::google::protobuf::int32 AckGetLucklyTurntable::notadd() const {
  return notadd_;
}
inline void AckGetLucklyTurntable::set_notadd(::google::protobuf::int32 value) {
  set_has_notadd();
  notadd_ = value;
}

// -------------------------------------------------------------------

// ClientRollLucklyTurntable

// required int32 num = 1;
inline bool ClientRollLucklyTurntable::has_num() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientRollLucklyTurntable::set_has_num() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientRollLucklyTurntable::clear_has_num() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientRollLucklyTurntable::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ClientRollLucklyTurntable::num() const {
  return num_;
}
inline void ClientRollLucklyTurntable::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}

// -------------------------------------------------------------------

// AckRollLucklyTurntable

// required int32 ret = 1;
inline bool AckRollLucklyTurntable::has_ret() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckRollLucklyTurntable::set_has_ret() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckRollLucklyTurntable::clear_has_ret() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckRollLucklyTurntable::clear_ret() {
  ret_ = 0;
  clear_has_ret();
}
inline ::google::protobuf::int32 AckRollLucklyTurntable::ret() const {
  return ret_;
}
inline void AckRollLucklyTurntable::set_ret(::google::protobuf::int32 value) {
  set_has_ret();
  ret_ = value;
}

// repeated int32 itemID = 2;
inline int AckRollLucklyTurntable::itemid_size() const {
  return itemid_.size();
}
inline void AckRollLucklyTurntable::clear_itemid() {
  itemid_.Clear();
}
inline ::google::protobuf::int32 AckRollLucklyTurntable::itemid(int index) const {
  return itemid_.Get(index);
}
inline void AckRollLucklyTurntable::set_itemid(int index, ::google::protobuf::int32 value) {
  itemid_.Set(index, value);
}
inline void AckRollLucklyTurntable::add_itemid(::google::protobuf::int32 value) {
  itemid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckRollLucklyTurntable::itemid() const {
  return itemid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckRollLucklyTurntable::mutable_itemid() {
  return &itemid_;
}

// repeated int32 num = 3;
inline int AckRollLucklyTurntable::num_size() const {
  return num_.size();
}
inline void AckRollLucklyTurntable::clear_num() {
  num_.Clear();
}
inline ::google::protobuf::int32 AckRollLucklyTurntable::num(int index) const {
  return num_.Get(index);
}
inline void AckRollLucklyTurntable::set_num(int index, ::google::protobuf::int32 value) {
  num_.Set(index, value);
}
inline void AckRollLucklyTurntable::add_num(::google::protobuf::int32 value) {
  num_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckRollLucklyTurntable::num() const {
  return num_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckRollLucklyTurntable::mutable_num() {
  return &num_;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace LucklyTurntable

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CharLogin_2fLucklyTurntable_2eproto__INCLUDED
