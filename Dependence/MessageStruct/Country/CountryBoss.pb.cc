// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Country/CountryBoss.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Country/CountryBoss.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CountryBossPackage {

namespace {

const ::google::protobuf::Descriptor* ClientReqCountryInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqCountryInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientCountryInstance_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientCountryInstance_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryIntegral_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryIntegral_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryBossHp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryBossHp_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryBossHarmRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryBossHarmRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryHarmRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryHarmRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossHarmSettle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossHarmSettle_reflection_ = NULL;
const ::google::protobuf::Descriptor* BossHarmItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  BossHarmItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToClientInstanceBStart_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToClientInstanceBStart_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryBossReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryBossReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryBossWin_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryBossWin_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryBossEndKill_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryBossEndKill_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryBossRankHurt_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryBossRankHurt_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Country_2fCountryBoss_2eproto() {
  protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Country/CountryBoss.proto");
  GOOGLE_CHECK(file != NULL);
  ClientReqCountryInstance_descriptor_ = file->message_type(0);
  static const int ClientReqCountryInstance_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCountryInstance, type_),
  };
  ClientReqCountryInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqCountryInstance_descriptor_,
      ClientReqCountryInstance::default_instance_,
      ClientReqCountryInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCountryInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqCountryInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqCountryInstance));
  WSToClientCountryInstance_descriptor_ = file->message_type(1);
  static const int WSToClientCountryInstance_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientCountryInstance, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientCountryInstance, instance_),
  };
  WSToClientCountryInstance_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientCountryInstance_descriptor_,
      WSToClientCountryInstance::default_instance_,
      WSToClientCountryInstance_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientCountryInstance, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientCountryInstance, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientCountryInstance));
  CountryIntegral_descriptor_ = file->message_type(2);
  static const int CountryIntegral_offsets_[10] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryIntegral, sui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryIntegral, tang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryIntegral, enemy_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryIntegral, boss_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryIntegral, cor_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryIntegral, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryIntegral, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryIntegral, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryIntegral, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryIntegral, bosshp_),
  };
  CountryIntegral_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryIntegral_descriptor_,
      CountryIntegral::default_instance_,
      CountryIntegral_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryIntegral, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryIntegral, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryIntegral));
  CountryBossHp_descriptor_ = file->message_type(3);
  static const int CountryBossHp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossHp, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossHp, hp_),
  };
  CountryBossHp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryBossHp_descriptor_,
      CountryBossHp::default_instance_,
      CountryBossHp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossHp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossHp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryBossHp));
  CountryBossHarmRank_descriptor_ = file->message_type(4);
  static const int CountryBossHarmRank_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossHarmRank, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossHarmRank, harminfo_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossHarmRank, bossinfo_),
  };
  CountryBossHarmRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryBossHarmRank_descriptor_,
      CountryBossHarmRank::default_instance_,
      CountryBossHarmRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossHarmRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossHarmRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryBossHarmRank));
  CountryHarmRank_descriptor_ = file->message_type(5);
  static const int CountryHarmRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryHarmRank, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryHarmRank, charname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryHarmRank, harm_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryHarmRank, country_),
  };
  CountryHarmRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryHarmRank_descriptor_,
      CountryHarmRank::default_instance_,
      CountryHarmRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryHarmRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryHarmRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryHarmRank));
  BossRank_descriptor_ = file->message_type(6);
  static const int BossRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRank, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRank, harm_),
  };
  BossRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossRank_descriptor_,
      BossRank::default_instance_,
      BossRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossRank));
  BossHarmSettle_descriptor_ = file->message_type(7);
  static const int BossHarmSettle_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHarmSettle, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHarmSettle, total_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHarmSettle, currank_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHarmSettle, endcut_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHarmSettle, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHarmSettle, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHarmSettle, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHarmSettle, endkill_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHarmSettle, rankhurt_),
  };
  BossHarmSettle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossHarmSettle_descriptor_,
      BossHarmSettle::default_instance_,
      BossHarmSettle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHarmSettle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHarmSettle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossHarmSettle));
  BossHarmItem_descriptor_ = file->message_type(8);
  static const int BossHarmItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHarmItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHarmItem, num_),
  };
  BossHarmItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      BossHarmItem_descriptor_,
      BossHarmItem::default_instance_,
      BossHarmItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHarmItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(BossHarmItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(BossHarmItem));
  WSToClientInstanceBStart_descriptor_ = file->message_type(9);
  static const int WSToClientInstanceBStart_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInstanceBStart, type_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInstanceBStart, ontime_),
  };
  WSToClientInstanceBStart_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToClientInstanceBStart_descriptor_,
      WSToClientInstanceBStart::default_instance_,
      WSToClientInstanceBStart_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInstanceBStart, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToClientInstanceBStart, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToClientInstanceBStart));
  CountryBossReward_descriptor_ = file->message_type(10);
  static const int CountryBossReward_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossReward, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossReward, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossReward, sui_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossReward, tang_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossReward, cor_),
  };
  CountryBossReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryBossReward_descriptor_,
      CountryBossReward::default_instance_,
      CountryBossReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryBossReward));
  CountryBossWin_descriptor_ = file->message_type(11);
  static const int CountryBossWin_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossWin, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossWin, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossWin, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossWin, num_),
  };
  CountryBossWin_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryBossWin_descriptor_,
      CountryBossWin::default_instance_,
      CountryBossWin_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossWin, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossWin, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryBossWin));
  CountryBossEndKill_descriptor_ = file->message_type(12);
  static const int CountryBossEndKill_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossEndKill, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossEndKill, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossEndKill, con_),
  };
  CountryBossEndKill_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryBossEndKill_descriptor_,
      CountryBossEndKill::default_instance_,
      CountryBossEndKill_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossEndKill, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossEndKill, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryBossEndKill));
  CountryBossRankHurt_descriptor_ = file->message_type(13);
  static const int CountryBossRankHurt_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossRankHurt, exp_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossRankHurt, credit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossRankHurt, con_),
  };
  CountryBossRankHurt_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryBossRankHurt_descriptor_,
      CountryBossRankHurt::default_instance_,
      CountryBossRankHurt_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossRankHurt, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBossRankHurt, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryBossRankHurt));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Country_2fCountryBoss_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqCountryInstance_descriptor_, &ClientReqCountryInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientCountryInstance_descriptor_, &WSToClientCountryInstance::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryIntegral_descriptor_, &CountryIntegral::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryBossHp_descriptor_, &CountryBossHp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryBossHarmRank_descriptor_, &CountryBossHarmRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryHarmRank_descriptor_, &CountryHarmRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossRank_descriptor_, &BossRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossHarmSettle_descriptor_, &BossHarmSettle::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    BossHarmItem_descriptor_, &BossHarmItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToClientInstanceBStart_descriptor_, &WSToClientInstanceBStart::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryBossReward_descriptor_, &CountryBossReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryBossWin_descriptor_, &CountryBossWin::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryBossEndKill_descriptor_, &CountryBossEndKill::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryBossRankHurt_descriptor_, &CountryBossRankHurt::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Country_2fCountryBoss_2eproto() {
  delete ClientReqCountryInstance::default_instance_;
  delete ClientReqCountryInstance_reflection_;
  delete WSToClientCountryInstance::default_instance_;
  delete WSToClientCountryInstance_reflection_;
  delete CountryIntegral::default_instance_;
  delete CountryIntegral_reflection_;
  delete CountryBossHp::default_instance_;
  delete CountryBossHp_reflection_;
  delete CountryBossHarmRank::default_instance_;
  delete CountryBossHarmRank_reflection_;
  delete CountryHarmRank::default_instance_;
  delete CountryHarmRank_reflection_;
  delete BossRank::default_instance_;
  delete BossRank_reflection_;
  delete BossHarmSettle::default_instance_;
  delete BossHarmSettle_reflection_;
  delete BossHarmItem::default_instance_;
  delete BossHarmItem_reflection_;
  delete WSToClientInstanceBStart::default_instance_;
  delete WSToClientInstanceBStart_reflection_;
  delete CountryBossReward::default_instance_;
  delete CountryBossReward_reflection_;
  delete CountryBossWin::default_instance_;
  delete CountryBossWin_reflection_;
  delete CountryBossEndKill::default_instance_;
  delete CountryBossEndKill_reflection_;
  delete CountryBossRankHurt::default_instance_;
  delete CountryBossRankHurt_reflection_;
}

void protobuf_AddDesc_Country_2fCountryBoss_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\031Country/CountryBoss.proto\022\022CountryBoss"
    "Package\"(\n\030ClientReqCountryInstance\022\014\n\004t"
    "ype\030\001 \002(\005\":\n\031WSToClientCountryInstance\022\013"
    "\n\003ret\030\001 \002(\005\022\020\n\010instance\030\002 \001(\003\"\304\001\n\017Countr"
    "yIntegral\022\013\n\003Sui\030\001 \002(\005\022\014\n\004Tang\030\002 \001(\005\022\r\n\005"
    "enemy\030\003 \001(\005\022\014\n\004boss\030\004 \001(\005\022\013\n\003cor\030\005 \001(\005\022\r"
    "\n\005total\030\006 \001(\005\022\013\n\003exp\030\007 \001(\005\022\017\n\007country\030\010 "
    "\001(\005\022\014\n\004time\030\t \001(\003\0221\n\006bossHp\030\n \003(\0132!.Coun"
    "tryBossPackage.CountryBossHp\"\'\n\rCountryB"
    "ossHp\022\n\n\002id\030\001 \002(\005\022\n\n\002hp\030\002 \001(\005\"\210\001\n\023Countr"
    "yBossHarmRank\022\n\n\002id\030\001 \002(\005\0225\n\010harminfo\030\002 "
    "\003(\0132#.CountryBossPackage.CountryHarmRank"
    "\022.\n\010bossinfo\030\003 \003(\0132\034.CountryBossPackage."
    "BossRank\"R\n\017CountryHarmRank\022\016\n\006charid\030\001 "
    "\002(\003\022\020\n\010charname\030\002 \001(\t\022\014\n\004harm\030\003 \001(\002\022\017\n\007c"
    "ountry\030\004 \001(\005\")\n\010BossRank\022\017\n\007country\030\001 \002("
    "\005\022\014\n\004harm\030\002 \001(\002\"\217\002\n\016BossHarmSettle\022\n\n\002id"
    "\030\001 \002(\005\022\r\n\005total\030\002 \001(\005\022\017\n\007curRank\030\003 \001(\005\022\016"
    "\n\006endCut\030\004 \001(\010\022\017\n\007country\030\005 \001(\005\022\014\n\004name\030"
    "\006 \001(\t\022.\n\004item\030\007 \003(\0132 .CountryBossPackage"
    ".BossHarmItem\0227\n\007endKill\030\010 \001(\0132&.Country"
    "BossPackage.CountryBossEndKill\0229\n\010rankHu"
    "rt\030\t \001(\0132\'.CountryBossPackage.CountryBos"
    "sRankHurt\"\'\n\014BossHarmItem\022\n\n\002id\030\001 \002(\005\022\013\n"
    "\003num\030\002 \001(\005\"8\n\030WSToClientInstanceBStart\022\014"
    "\n\004type\030\001 \002(\005\022\016\n\006ontime\030\002 \001(\003\"Z\n\021CountryB"
    "ossReward\022\017\n\007country\030\001 \002(\005\022\014\n\004flag\030\002 \001(\010"
    "\022\013\n\003Sui\030\003 \001(\005\022\014\n\004Tang\030\004 \001(\005\022\013\n\003cor\030\005 \001(\005"
    "\"M\n\016CountryBossWin\022\017\n\007country\030\001 \002(\005\022\r\n\005m"
    "oney\030\002 \001(\005\022\016\n\006itemid\030\003 \003(\005\022\013\n\003num\030\004 \003(\005\""
    ">\n\022CountryBossEndKill\022\013\n\003exp\030\001 \002(\005\022\016\n\006cr"
    "edit\030\002 \001(\005\022\013\n\003con\030\003 \001(\005\"\?\n\023CountryBossRa"
    "nkHurt\022\013\n\003exp\030\001 \002(\005\022\016\n\006credit\030\002 \001(\005\022\013\n\003c"
    "on\030\003 \001(\005", 1328);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Country/CountryBoss.proto", &protobuf_RegisterTypes);
  ClientReqCountryInstance::default_instance_ = new ClientReqCountryInstance();
  WSToClientCountryInstance::default_instance_ = new WSToClientCountryInstance();
  CountryIntegral::default_instance_ = new CountryIntegral();
  CountryBossHp::default_instance_ = new CountryBossHp();
  CountryBossHarmRank::default_instance_ = new CountryBossHarmRank();
  CountryHarmRank::default_instance_ = new CountryHarmRank();
  BossRank::default_instance_ = new BossRank();
  BossHarmSettle::default_instance_ = new BossHarmSettle();
  BossHarmItem::default_instance_ = new BossHarmItem();
  WSToClientInstanceBStart::default_instance_ = new WSToClientInstanceBStart();
  CountryBossReward::default_instance_ = new CountryBossReward();
  CountryBossWin::default_instance_ = new CountryBossWin();
  CountryBossEndKill::default_instance_ = new CountryBossEndKill();
  CountryBossRankHurt::default_instance_ = new CountryBossRankHurt();
  ClientReqCountryInstance::default_instance_->InitAsDefaultInstance();
  WSToClientCountryInstance::default_instance_->InitAsDefaultInstance();
  CountryIntegral::default_instance_->InitAsDefaultInstance();
  CountryBossHp::default_instance_->InitAsDefaultInstance();
  CountryBossHarmRank::default_instance_->InitAsDefaultInstance();
  CountryHarmRank::default_instance_->InitAsDefaultInstance();
  BossRank::default_instance_->InitAsDefaultInstance();
  BossHarmSettle::default_instance_->InitAsDefaultInstance();
  BossHarmItem::default_instance_->InitAsDefaultInstance();
  WSToClientInstanceBStart::default_instance_->InitAsDefaultInstance();
  CountryBossReward::default_instance_->InitAsDefaultInstance();
  CountryBossWin::default_instance_->InitAsDefaultInstance();
  CountryBossEndKill::default_instance_->InitAsDefaultInstance();
  CountryBossRankHurt::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Country_2fCountryBoss_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Country_2fCountryBoss_2eproto {
  StaticDescriptorInitializer_Country_2fCountryBoss_2eproto() {
    protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  }
} static_descriptor_initializer_Country_2fCountryBoss_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientReqCountryInstance::kTypeFieldNumber;
#endif  // !_MSC_VER

ClientReqCountryInstance::ClientReqCountryInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqCountryInstance::InitAsDefaultInstance() {
}

ClientReqCountryInstance::ClientReqCountryInstance(const ClientReqCountryInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqCountryInstance::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqCountryInstance::~ClientReqCountryInstance() {
  SharedDtor();
}

void ClientReqCountryInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqCountryInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqCountryInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqCountryInstance_descriptor_;
}

const ClientReqCountryInstance& ClientReqCountryInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  return *default_instance_;
}

ClientReqCountryInstance* ClientReqCountryInstance::default_instance_ = NULL;

ClientReqCountryInstance* ClientReqCountryInstance::New() const {
  return new ClientReqCountryInstance;
}

void ClientReqCountryInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqCountryInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqCountryInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqCountryInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqCountryInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqCountryInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqCountryInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqCountryInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqCountryInstance::MergeFrom(const ClientReqCountryInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqCountryInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqCountryInstance::CopyFrom(const ClientReqCountryInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqCountryInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqCountryInstance::Swap(ClientReqCountryInstance* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqCountryInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqCountryInstance_descriptor_;
  metadata.reflection = ClientReqCountryInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientCountryInstance::kRetFieldNumber;
const int WSToClientCountryInstance::kInstanceFieldNumber;
#endif  // !_MSC_VER

WSToClientCountryInstance::WSToClientCountryInstance()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientCountryInstance::InitAsDefaultInstance() {
}

WSToClientCountryInstance::WSToClientCountryInstance(const WSToClientCountryInstance& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientCountryInstance::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  instance_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientCountryInstance::~WSToClientCountryInstance() {
  SharedDtor();
}

void WSToClientCountryInstance::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientCountryInstance::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientCountryInstance::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientCountryInstance_descriptor_;
}

const WSToClientCountryInstance& WSToClientCountryInstance::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  return *default_instance_;
}

WSToClientCountryInstance* WSToClientCountryInstance::default_instance_ = NULL;

WSToClientCountryInstance* WSToClientCountryInstance::New() const {
  return new WSToClientCountryInstance;
}

void WSToClientCountryInstance::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    instance_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientCountryInstance::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_instance;
        break;
      }

      // optional int64 instance = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_instance:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &instance_)));
          set_has_instance();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientCountryInstance::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int64 instance = 2;
  if (has_instance()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->instance(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientCountryInstance::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int64 instance = 2;
  if (has_instance()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->instance(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientCountryInstance::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int64 instance = 2;
    if (has_instance()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->instance());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientCountryInstance::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientCountryInstance* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientCountryInstance*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientCountryInstance::MergeFrom(const WSToClientCountryInstance& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_instance()) {
      set_instance(from.instance());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientCountryInstance::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientCountryInstance::CopyFrom(const WSToClientCountryInstance& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientCountryInstance::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientCountryInstance::Swap(WSToClientCountryInstance* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(instance_, other->instance_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientCountryInstance::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientCountryInstance_descriptor_;
  metadata.reflection = WSToClientCountryInstance_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryIntegral::kSuiFieldNumber;
const int CountryIntegral::kTangFieldNumber;
const int CountryIntegral::kEnemyFieldNumber;
const int CountryIntegral::kBossFieldNumber;
const int CountryIntegral::kCorFieldNumber;
const int CountryIntegral::kTotalFieldNumber;
const int CountryIntegral::kExpFieldNumber;
const int CountryIntegral::kCountryFieldNumber;
const int CountryIntegral::kTimeFieldNumber;
const int CountryIntegral::kBossHpFieldNumber;
#endif  // !_MSC_VER

CountryIntegral::CountryIntegral()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryIntegral::InitAsDefaultInstance() {
}

CountryIntegral::CountryIntegral(const CountryIntegral& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryIntegral::SharedCtor() {
  _cached_size_ = 0;
  sui_ = 0;
  tang_ = 0;
  enemy_ = 0;
  boss_ = 0;
  cor_ = 0;
  total_ = 0;
  exp_ = 0;
  country_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryIntegral::~CountryIntegral() {
  SharedDtor();
}

void CountryIntegral::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryIntegral::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryIntegral::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryIntegral_descriptor_;
}

const CountryIntegral& CountryIntegral::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  return *default_instance_;
}

CountryIntegral* CountryIntegral::default_instance_ = NULL;

CountryIntegral* CountryIntegral::New() const {
  return new CountryIntegral;
}

void CountryIntegral::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    sui_ = 0;
    tang_ = 0;
    enemy_ = 0;
    boss_ = 0;
    cor_ = 0;
    total_ = 0;
    exp_ = 0;
    country_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  bosshp_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryIntegral::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 Sui = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sui_)));
          set_has_sui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Tang;
        break;
      }

      // optional int32 Tang = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tang_)));
          set_has_tang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_enemy;
        break;
      }

      // optional int32 enemy = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_enemy:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &enemy_)));
          set_has_enemy();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_boss;
        break;
      }

      // optional int32 boss = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_boss:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &boss_)));
          set_has_boss();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cor;
        break;
      }

      // optional int32 cor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cor_)));
          set_has_cor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_total;
        break;
      }

      // optional int32 total = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_exp;
        break;
      }

      // optional int32 exp = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_exp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_country;
        break;
      }

      // optional int32 country = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_time;
        break;
      }

      // optional int64 time = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_bossHp;
        break;
      }

      // repeated .CountryBossPackage.CountryBossHp bossHp = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossHp:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bosshp()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_bossHp;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryIntegral::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 Sui = 1;
  if (has_sui()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->sui(), output);
  }

  // optional int32 Tang = 2;
  if (has_tang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->tang(), output);
  }

  // optional int32 enemy = 3;
  if (has_enemy()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->enemy(), output);
  }

  // optional int32 boss = 4;
  if (has_boss()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->boss(), output);
  }

  // optional int32 cor = 5;
  if (has_cor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cor(), output);
  }

  // optional int32 total = 6;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->total(), output);
  }

  // optional int32 exp = 7;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->exp(), output);
  }

  // optional int32 country = 8;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->country(), output);
  }

  // optional int64 time = 9;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(9, this->time(), output);
  }

  // repeated .CountryBossPackage.CountryBossHp bossHp = 10;
  for (int i = 0; i < this->bosshp_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      10, this->bosshp(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryIntegral::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 Sui = 1;
  if (has_sui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->sui(), target);
  }

  // optional int32 Tang = 2;
  if (has_tang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->tang(), target);
  }

  // optional int32 enemy = 3;
  if (has_enemy()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->enemy(), target);
  }

  // optional int32 boss = 4;
  if (has_boss()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->boss(), target);
  }

  // optional int32 cor = 5;
  if (has_cor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cor(), target);
  }

  // optional int32 total = 6;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->total(), target);
  }

  // optional int32 exp = 7;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->exp(), target);
  }

  // optional int32 country = 8;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->country(), target);
  }

  // optional int64 time = 9;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(9, this->time(), target);
  }

  // repeated .CountryBossPackage.CountryBossHp bossHp = 10;
  for (int i = 0; i < this->bosshp_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        10, this->bosshp(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryIntegral::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 Sui = 1;
    if (has_sui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sui());
    }

    // optional int32 Tang = 2;
    if (has_tang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tang());
    }

    // optional int32 enemy = 3;
    if (has_enemy()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->enemy());
    }

    // optional int32 boss = 4;
    if (has_boss()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->boss());
    }

    // optional int32 cor = 5;
    if (has_cor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cor());
    }

    // optional int32 total = 6;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 exp = 7;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 country = 8;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int64 time = 9;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  // repeated .CountryBossPackage.CountryBossHp bossHp = 10;
  total_size += 1 * this->bosshp_size();
  for (int i = 0; i < this->bosshp_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bosshp(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryIntegral::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryIntegral* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryIntegral*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryIntegral::MergeFrom(const CountryIntegral& from) {
  GOOGLE_CHECK_NE(&from, this);
  bosshp_.MergeFrom(from.bosshp_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_sui()) {
      set_sui(from.sui());
    }
    if (from.has_tang()) {
      set_tang(from.tang());
    }
    if (from.has_enemy()) {
      set_enemy(from.enemy());
    }
    if (from.has_boss()) {
      set_boss(from.boss());
    }
    if (from.has_cor()) {
      set_cor(from.cor());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryIntegral::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryIntegral::CopyFrom(const CountryIntegral& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryIntegral::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < bosshp_size(); i++) {
    if (!this->bosshp(i).IsInitialized()) return false;
  }
  return true;
}

void CountryIntegral::Swap(CountryIntegral* other) {
  if (other != this) {
    std::swap(sui_, other->sui_);
    std::swap(tang_, other->tang_);
    std::swap(enemy_, other->enemy_);
    std::swap(boss_, other->boss_);
    std::swap(cor_, other->cor_);
    std::swap(total_, other->total_);
    std::swap(exp_, other->exp_);
    std::swap(country_, other->country_);
    std::swap(time_, other->time_);
    bosshp_.Swap(&other->bosshp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryIntegral::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryIntegral_descriptor_;
  metadata.reflection = CountryIntegral_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryBossHp::kIdFieldNumber;
const int CountryBossHp::kHpFieldNumber;
#endif  // !_MSC_VER

CountryBossHp::CountryBossHp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryBossHp::InitAsDefaultInstance() {
}

CountryBossHp::CountryBossHp(const CountryBossHp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryBossHp::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  hp_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryBossHp::~CountryBossHp() {
  SharedDtor();
}

void CountryBossHp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryBossHp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryBossHp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryBossHp_descriptor_;
}

const CountryBossHp& CountryBossHp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  return *default_instance_;
}

CountryBossHp* CountryBossHp::default_instance_ = NULL;

CountryBossHp* CountryBossHp::New() const {
  return new CountryBossHp;
}

void CountryBossHp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    hp_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryBossHp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_hp;
        break;
      }

      // optional int32 hp = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_hp:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &hp_)));
          set_has_hp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryBossHp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 hp = 2;
  if (has_hp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->hp(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryBossHp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 hp = 2;
  if (has_hp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->hp(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryBossHp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 hp = 2;
    if (has_hp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->hp());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryBossHp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryBossHp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryBossHp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryBossHp::MergeFrom(const CountryBossHp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_hp()) {
      set_hp(from.hp());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryBossHp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryBossHp::CopyFrom(const CountryBossHp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryBossHp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountryBossHp::Swap(CountryBossHp* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(hp_, other->hp_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryBossHp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryBossHp_descriptor_;
  metadata.reflection = CountryBossHp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryBossHarmRank::kIdFieldNumber;
const int CountryBossHarmRank::kHarminfoFieldNumber;
const int CountryBossHarmRank::kBossinfoFieldNumber;
#endif  // !_MSC_VER

CountryBossHarmRank::CountryBossHarmRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryBossHarmRank::InitAsDefaultInstance() {
}

CountryBossHarmRank::CountryBossHarmRank(const CountryBossHarmRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryBossHarmRank::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryBossHarmRank::~CountryBossHarmRank() {
  SharedDtor();
}

void CountryBossHarmRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryBossHarmRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryBossHarmRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryBossHarmRank_descriptor_;
}

const CountryBossHarmRank& CountryBossHarmRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  return *default_instance_;
}

CountryBossHarmRank* CountryBossHarmRank::default_instance_ = NULL;

CountryBossHarmRank* CountryBossHarmRank::New() const {
  return new CountryBossHarmRank;
}

void CountryBossHarmRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
  }
  harminfo_.Clear();
  bossinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryBossHarmRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_harminfo;
        break;
      }

      // repeated .CountryBossPackage.CountryHarmRank harminfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_harminfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_harminfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_harminfo;
        if (input->ExpectTag(26)) goto parse_bossinfo;
        break;
      }

      // repeated .CountryBossPackage.BossRank bossinfo = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_bossinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_bossinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_bossinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryBossHarmRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // repeated .CountryBossPackage.CountryHarmRank harminfo = 2;
  for (int i = 0; i < this->harminfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->harminfo(i), output);
  }

  // repeated .CountryBossPackage.BossRank bossinfo = 3;
  for (int i = 0; i < this->bossinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->bossinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryBossHarmRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // repeated .CountryBossPackage.CountryHarmRank harminfo = 2;
  for (int i = 0; i < this->harminfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->harminfo(i), target);
  }

  // repeated .CountryBossPackage.BossRank bossinfo = 3;
  for (int i = 0; i < this->bossinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->bossinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryBossHarmRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

  }
  // repeated .CountryBossPackage.CountryHarmRank harminfo = 2;
  total_size += 1 * this->harminfo_size();
  for (int i = 0; i < this->harminfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->harminfo(i));
  }

  // repeated .CountryBossPackage.BossRank bossinfo = 3;
  total_size += 1 * this->bossinfo_size();
  for (int i = 0; i < this->bossinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->bossinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryBossHarmRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryBossHarmRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryBossHarmRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryBossHarmRank::MergeFrom(const CountryBossHarmRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  harminfo_.MergeFrom(from.harminfo_);
  bossinfo_.MergeFrom(from.bossinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryBossHarmRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryBossHarmRank::CopyFrom(const CountryBossHarmRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryBossHarmRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < harminfo_size(); i++) {
    if (!this->harminfo(i).IsInitialized()) return false;
  }
  for (int i = 0; i < bossinfo_size(); i++) {
    if (!this->bossinfo(i).IsInitialized()) return false;
  }
  return true;
}

void CountryBossHarmRank::Swap(CountryBossHarmRank* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    harminfo_.Swap(&other->harminfo_);
    bossinfo_.Swap(&other->bossinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryBossHarmRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryBossHarmRank_descriptor_;
  metadata.reflection = CountryBossHarmRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryHarmRank::kCharidFieldNumber;
const int CountryHarmRank::kCharnameFieldNumber;
const int CountryHarmRank::kHarmFieldNumber;
const int CountryHarmRank::kCountryFieldNumber;
#endif  // !_MSC_VER

CountryHarmRank::CountryHarmRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryHarmRank::InitAsDefaultInstance() {
}

CountryHarmRank::CountryHarmRank(const CountryHarmRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryHarmRank::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  harm_ = 0;
  country_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryHarmRank::~CountryHarmRank() {
  SharedDtor();
}

void CountryHarmRank::SharedDtor() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (this != default_instance_) {
  }
}

void CountryHarmRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryHarmRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryHarmRank_descriptor_;
}

const CountryHarmRank& CountryHarmRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  return *default_instance_;
}

CountryHarmRank* CountryHarmRank::default_instance_ = NULL;

CountryHarmRank* CountryHarmRank::New() const {
  return new CountryHarmRank;
}

void CountryHarmRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    if (has_charname()) {
      if (charname_ != &::google::protobuf::internal::kEmptyString) {
        charname_->clear();
      }
    }
    harm_ = 0;
    country_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryHarmRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_charname;
        break;
      }

      // optional string charname = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_charname:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_charname()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->charname().data(), this->charname().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(29)) goto parse_harm;
        break;
      }

      // optional float harm = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_country;
        break;
      }

      // optional int32 country = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryHarmRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->charname(), output);
  }

  // optional float harm = 3;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(3, this->harm(), output);
  }

  // optional int32 country = 4;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->country(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryHarmRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional string charname = 2;
  if (has_charname()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->charname().data(), this->charname().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->charname(), target);
  }

  // optional float harm = 3;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(3, this->harm(), target);
  }

  // optional int32 country = 4;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->country(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryHarmRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional string charname = 2;
    if (has_charname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->charname());
    }

    // optional float harm = 3;
    if (has_harm()) {
      total_size += 1 + 4;
    }

    // optional int32 country = 4;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryHarmRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryHarmRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryHarmRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryHarmRank::MergeFrom(const CountryHarmRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_charname()) {
      set_charname(from.charname());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryHarmRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryHarmRank::CopyFrom(const CountryHarmRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryHarmRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountryHarmRank::Swap(CountryHarmRank* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(charname_, other->charname_);
    std::swap(harm_, other->harm_);
    std::swap(country_, other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryHarmRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryHarmRank_descriptor_;
  metadata.reflection = CountryHarmRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossRank::kCountryFieldNumber;
const int BossRank::kHarmFieldNumber;
#endif  // !_MSC_VER

BossRank::BossRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossRank::InitAsDefaultInstance() {
}

BossRank::BossRank(const BossRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossRank::SharedCtor() {
  _cached_size_ = 0;
  country_ = 0;
  harm_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossRank::~BossRank() {
  SharedDtor();
}

void BossRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossRank_descriptor_;
}

const BossRank& BossRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  return *default_instance_;
}

BossRank* BossRank::default_instance_ = NULL;

BossRank* BossRank::New() const {
  return new BossRank;
}

void BossRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_ = 0;
    harm_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(21)) goto parse_harm;
        break;
      }

      // optional float harm = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_FIXED32) {
         parse_harm:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   float, ::google::protobuf::internal::WireFormatLite::TYPE_FLOAT>(
                 input, &harm_)));
          set_has_harm();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->country(), output);
  }

  // optional float harm = 2;
  if (has_harm()) {
    ::google::protobuf::internal::WireFormatLite::WriteFloat(2, this->harm(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 country = 1;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->country(), target);
  }

  // optional float harm = 2;
  if (has_harm()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteFloatToArray(2, this->harm(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // optional float harm = 2;
    if (has_harm()) {
      total_size += 1 + 4;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossRank::MergeFrom(const BossRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_harm()) {
      set_harm(from.harm());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossRank::CopyFrom(const BossRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BossRank::Swap(BossRank* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    std::swap(harm_, other->harm_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossRank_descriptor_;
  metadata.reflection = BossRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossHarmSettle::kIdFieldNumber;
const int BossHarmSettle::kTotalFieldNumber;
const int BossHarmSettle::kCurRankFieldNumber;
const int BossHarmSettle::kEndCutFieldNumber;
const int BossHarmSettle::kCountryFieldNumber;
const int BossHarmSettle::kNameFieldNumber;
const int BossHarmSettle::kItemFieldNumber;
const int BossHarmSettle::kEndKillFieldNumber;
const int BossHarmSettle::kRankHurtFieldNumber;
#endif  // !_MSC_VER

BossHarmSettle::BossHarmSettle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossHarmSettle::InitAsDefaultInstance() {
  endkill_ = const_cast< ::CountryBossPackage::CountryBossEndKill*>(&::CountryBossPackage::CountryBossEndKill::default_instance());
  rankhurt_ = const_cast< ::CountryBossPackage::CountryBossRankHurt*>(&::CountryBossPackage::CountryBossRankHurt::default_instance());
}

BossHarmSettle::BossHarmSettle(const BossHarmSettle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossHarmSettle::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  total_ = 0;
  currank_ = 0;
  endcut_ = false;
  country_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  endkill_ = NULL;
  rankhurt_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossHarmSettle::~BossHarmSettle() {
  SharedDtor();
}

void BossHarmSettle::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
    delete endkill_;
    delete rankhurt_;
  }
}

void BossHarmSettle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossHarmSettle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossHarmSettle_descriptor_;
}

const BossHarmSettle& BossHarmSettle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  return *default_instance_;
}

BossHarmSettle* BossHarmSettle::default_instance_ = NULL;

BossHarmSettle* BossHarmSettle::New() const {
  return new BossHarmSettle;
}

void BossHarmSettle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    total_ = 0;
    currank_ = 0;
    endcut_ = false;
    country_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    if (has_endkill()) {
      if (endkill_ != NULL) endkill_->::CountryBossPackage::CountryBossEndKill::Clear();
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_rankhurt()) {
      if (rankhurt_ != NULL) rankhurt_->::CountryBossPackage::CountryBossRankHurt::Clear();
    }
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossHarmSettle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_total;
        break;
      }

      // optional int32 total = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_total:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &total_)));
          set_has_total();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_curRank;
        break;
      }

      // optional int32 curRank = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_curRank:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &currank_)));
          set_has_currank();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_endCut;
        break;
      }

      // optional bool endCut = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_endCut:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &endcut_)));
          set_has_endcut();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_country;
        break;
      }

      // optional int32 country = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_country:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_name;
        break;
      }

      // optional string name = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_name()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->name().data(), this->name().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item;
        break;
      }

      // repeated .CountryBossPackage.BossHarmItem item = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_item;
        if (input->ExpectTag(66)) goto parse_endKill;
        break;
      }

      // optional .CountryBossPackage.CountryBossEndKill endKill = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_endKill:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_endkill()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_rankHurt;
        break;
      }

      // optional .CountryBossPackage.CountryBossRankHurt rankHurt = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_rankHurt:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_rankhurt()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossHarmSettle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 total = 2;
  if (has_total()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->total(), output);
  }

  // optional int32 curRank = 3;
  if (has_currank()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->currank(), output);
  }

  // optional bool endCut = 4;
  if (has_endcut()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->endcut(), output);
  }

  // optional int32 country = 5;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->country(), output);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->name(), output);
  }

  // repeated .CountryBossPackage.BossHarmItem item = 7;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      7, this->item(i), output);
  }

  // optional .CountryBossPackage.CountryBossEndKill endKill = 8;
  if (has_endkill()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      8, this->endkill(), output);
  }

  // optional .CountryBossPackage.CountryBossRankHurt rankHurt = 9;
  if (has_rankhurt()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      9, this->rankhurt(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossHarmSettle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 total = 2;
  if (has_total()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->total(), target);
  }

  // optional int32 curRank = 3;
  if (has_currank()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->currank(), target);
  }

  // optional bool endCut = 4;
  if (has_endcut()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->endcut(), target);
  }

  // optional int32 country = 5;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->country(), target);
  }

  // optional string name = 6;
  if (has_name()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->name().data(), this->name().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->name(), target);
  }

  // repeated .CountryBossPackage.BossHarmItem item = 7;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        7, this->item(i), target);
  }

  // optional .CountryBossPackage.CountryBossEndKill endKill = 8;
  if (has_endkill()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        8, this->endkill(), target);
  }

  // optional .CountryBossPackage.CountryBossRankHurt rankHurt = 9;
  if (has_rankhurt()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        9, this->rankhurt(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossHarmSettle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 total = 2;
    if (has_total()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->total());
    }

    // optional int32 curRank = 3;
    if (has_currank()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->currank());
    }

    // optional bool endCut = 4;
    if (has_endcut()) {
      total_size += 1 + 1;
    }

    // optional int32 country = 5;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // optional string name = 6;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->name());
    }

    // optional .CountryBossPackage.CountryBossEndKill endKill = 8;
    if (has_endkill()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->endkill());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional .CountryBossPackage.CountryBossRankHurt rankHurt = 9;
    if (has_rankhurt()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->rankhurt());
    }

  }
  // repeated .CountryBossPackage.BossHarmItem item = 7;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossHarmSettle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossHarmSettle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossHarmSettle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossHarmSettle::MergeFrom(const BossHarmSettle& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_total()) {
      set_total(from.total());
    }
    if (from.has_currank()) {
      set_currank(from.currank());
    }
    if (from.has_endcut()) {
      set_endcut(from.endcut());
    }
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_endkill()) {
      mutable_endkill()->::CountryBossPackage::CountryBossEndKill::MergeFrom(from.endkill());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_rankhurt()) {
      mutable_rankhurt()->::CountryBossPackage::CountryBossRankHurt::MergeFrom(from.rankhurt());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossHarmSettle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossHarmSettle::CopyFrom(const BossHarmSettle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossHarmSettle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  if (has_endkill()) {
    if (!this->endkill().IsInitialized()) return false;
  }
  if (has_rankhurt()) {
    if (!this->rankhurt().IsInitialized()) return false;
  }
  return true;
}

void BossHarmSettle::Swap(BossHarmSettle* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(total_, other->total_);
    std::swap(currank_, other->currank_);
    std::swap(endcut_, other->endcut_);
    std::swap(country_, other->country_);
    std::swap(name_, other->name_);
    item_.Swap(&other->item_);
    std::swap(endkill_, other->endkill_);
    std::swap(rankhurt_, other->rankhurt_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossHarmSettle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossHarmSettle_descriptor_;
  metadata.reflection = BossHarmSettle_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int BossHarmItem::kIdFieldNumber;
const int BossHarmItem::kNumFieldNumber;
#endif  // !_MSC_VER

BossHarmItem::BossHarmItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void BossHarmItem::InitAsDefaultInstance() {
}

BossHarmItem::BossHarmItem(const BossHarmItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void BossHarmItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

BossHarmItem::~BossHarmItem() {
  SharedDtor();
}

void BossHarmItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void BossHarmItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* BossHarmItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return BossHarmItem_descriptor_;
}

const BossHarmItem& BossHarmItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  return *default_instance_;
}

BossHarmItem* BossHarmItem::default_instance_ = NULL;

BossHarmItem* BossHarmItem::New() const {
  return new BossHarmItem;
}

void BossHarmItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool BossHarmItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void BossHarmItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* BossHarmItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int BossHarmItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void BossHarmItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const BossHarmItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const BossHarmItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void BossHarmItem::MergeFrom(const BossHarmItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void BossHarmItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BossHarmItem::CopyFrom(const BossHarmItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BossHarmItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void BossHarmItem::Swap(BossHarmItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata BossHarmItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = BossHarmItem_descriptor_;
  metadata.reflection = BossHarmItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToClientInstanceBStart::kTypeFieldNumber;
const int WSToClientInstanceBStart::kOntimeFieldNumber;
#endif  // !_MSC_VER

WSToClientInstanceBStart::WSToClientInstanceBStart()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToClientInstanceBStart::InitAsDefaultInstance() {
}

WSToClientInstanceBStart::WSToClientInstanceBStart(const WSToClientInstanceBStart& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToClientInstanceBStart::SharedCtor() {
  _cached_size_ = 0;
  type_ = 0;
  ontime_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToClientInstanceBStart::~WSToClientInstanceBStart() {
  SharedDtor();
}

void WSToClientInstanceBStart::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToClientInstanceBStart::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToClientInstanceBStart::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToClientInstanceBStart_descriptor_;
}

const WSToClientInstanceBStart& WSToClientInstanceBStart::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  return *default_instance_;
}

WSToClientInstanceBStart* WSToClientInstanceBStart::default_instance_ = NULL;

WSToClientInstanceBStart* WSToClientInstanceBStart::New() const {
  return new WSToClientInstanceBStart;
}

void WSToClientInstanceBStart::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    type_ = 0;
    ontime_ = GOOGLE_LONGLONG(0);
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToClientInstanceBStart::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 type = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &type_)));
          set_has_type();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_ontime;
        break;
      }

      // optional int64 ontime = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_ontime:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &ontime_)));
          set_has_ontime();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToClientInstanceBStart::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 type = 1;
  if (has_type()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->type(), output);
  }

  // optional int64 ontime = 2;
  if (has_ontime()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->ontime(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToClientInstanceBStart::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 type = 1;
  if (has_type()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->type(), target);
  }

  // optional int64 ontime = 2;
  if (has_ontime()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->ontime(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToClientInstanceBStart::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 type = 1;
    if (has_type()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->type());
    }

    // optional int64 ontime = 2;
    if (has_ontime()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->ontime());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToClientInstanceBStart::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToClientInstanceBStart* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToClientInstanceBStart*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToClientInstanceBStart::MergeFrom(const WSToClientInstanceBStart& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_type()) {
      set_type(from.type());
    }
    if (from.has_ontime()) {
      set_ontime(from.ontime());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToClientInstanceBStart::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToClientInstanceBStart::CopyFrom(const WSToClientInstanceBStart& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToClientInstanceBStart::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToClientInstanceBStart::Swap(WSToClientInstanceBStart* other) {
  if (other != this) {
    std::swap(type_, other->type_);
    std::swap(ontime_, other->ontime_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToClientInstanceBStart::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToClientInstanceBStart_descriptor_;
  metadata.reflection = WSToClientInstanceBStart_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryBossReward::kCountryFieldNumber;
const int CountryBossReward::kFlagFieldNumber;
const int CountryBossReward::kSuiFieldNumber;
const int CountryBossReward::kTangFieldNumber;
const int CountryBossReward::kCorFieldNumber;
#endif  // !_MSC_VER

CountryBossReward::CountryBossReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryBossReward::InitAsDefaultInstance() {
}

CountryBossReward::CountryBossReward(const CountryBossReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryBossReward::SharedCtor() {
  _cached_size_ = 0;
  country_ = 0;
  flag_ = false;
  sui_ = 0;
  tang_ = 0;
  cor_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryBossReward::~CountryBossReward() {
  SharedDtor();
}

void CountryBossReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryBossReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryBossReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryBossReward_descriptor_;
}

const CountryBossReward& CountryBossReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  return *default_instance_;
}

CountryBossReward* CountryBossReward::default_instance_ = NULL;

CountryBossReward* CountryBossReward::New() const {
  return new CountryBossReward;
}

void CountryBossReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_ = 0;
    flag_ = false;
    sui_ = 0;
    tang_ = 0;
    cor_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryBossReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // optional bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Sui;
        break;
      }

      // optional int32 Sui = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Sui:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sui_)));
          set_has_sui();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_Tang;
        break;
      }

      // optional int32 Tang = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Tang:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &tang_)));
          set_has_tang();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cor;
        break;
      }

      // optional int32 cor = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cor:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cor_)));
          set_has_cor();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryBossReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->country(), output);
  }

  // optional bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }

  // optional int32 Sui = 3;
  if (has_sui()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->sui(), output);
  }

  // optional int32 Tang = 4;
  if (has_tang()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->tang(), output);
  }

  // optional int32 cor = 5;
  if (has_cor()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cor(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryBossReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 country = 1;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->country(), target);
  }

  // optional bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }

  // optional int32 Sui = 3;
  if (has_sui()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->sui(), target);
  }

  // optional int32 Tang = 4;
  if (has_tang()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->tang(), target);
  }

  // optional int32 cor = 5;
  if (has_cor()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cor(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryBossReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // optional bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }

    // optional int32 Sui = 3;
    if (has_sui()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sui());
    }

    // optional int32 Tang = 4;
    if (has_tang()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->tang());
    }

    // optional int32 cor = 5;
    if (has_cor()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cor());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryBossReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryBossReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryBossReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryBossReward::MergeFrom(const CountryBossReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
    if (from.has_sui()) {
      set_sui(from.sui());
    }
    if (from.has_tang()) {
      set_tang(from.tang());
    }
    if (from.has_cor()) {
      set_cor(from.cor());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryBossReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryBossReward::CopyFrom(const CountryBossReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryBossReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountryBossReward::Swap(CountryBossReward* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    std::swap(flag_, other->flag_);
    std::swap(sui_, other->sui_);
    std::swap(tang_, other->tang_);
    std::swap(cor_, other->cor_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryBossReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryBossReward_descriptor_;
  metadata.reflection = CountryBossReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryBossWin::kCountryFieldNumber;
const int CountryBossWin::kMoneyFieldNumber;
const int CountryBossWin::kItemidFieldNumber;
const int CountryBossWin::kNumFieldNumber;
#endif  // !_MSC_VER

CountryBossWin::CountryBossWin()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryBossWin::InitAsDefaultInstance() {
}

CountryBossWin::CountryBossWin(const CountryBossWin& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryBossWin::SharedCtor() {
  _cached_size_ = 0;
  country_ = 0;
  money_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryBossWin::~CountryBossWin() {
  SharedDtor();
}

void CountryBossWin::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryBossWin::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryBossWin::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryBossWin_descriptor_;
}

const CountryBossWin& CountryBossWin::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  return *default_instance_;
}

CountryBossWin* CountryBossWin::default_instance_ = NULL;

CountryBossWin* CountryBossWin::New() const {
  return new CountryBossWin;
}

void CountryBossWin::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_ = 0;
    money_ = 0;
  }
  itemid_.Clear();
  num_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryBossWin::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional int32 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        break;
      }

      // repeated int32 itemid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 24, input, this->mutable_itemid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_itemid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_itemid;
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // repeated int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 1, 32, input, this->mutable_num())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, this->mutable_num())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryBossWin::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->country(), output);
  }

  // optional int32 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->money(), output);
  }

  // repeated int32 itemid = 3;
  for (int i = 0; i < this->itemid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      3, this->itemid(i), output);
  }

  // repeated int32 num = 4;
  for (int i = 0; i < this->num_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(
      4, this->num(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryBossWin::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 country = 1;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->country(), target);
  }

  // optional int32 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->money(), target);
  }

  // repeated int32 itemid = 3;
  for (int i = 0; i < this->itemid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(3, this->itemid(i), target);
  }

  // repeated int32 num = 4;
  for (int i = 0; i < this->num_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt32ToArray(4, this->num(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryBossWin::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // optional int32 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->money());
    }

  }
  // repeated int32 itemid = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->itemid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->itemid(i));
    }
    total_size += 1 * this->itemid_size() + data_size;
  }

  // repeated int32 num = 4;
  {
    int data_size = 0;
    for (int i = 0; i < this->num_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int32Size(this->num(i));
    }
    total_size += 1 * this->num_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryBossWin::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryBossWin* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryBossWin*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryBossWin::MergeFrom(const CountryBossWin& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemid_.MergeFrom(from.itemid_);
  num_.MergeFrom(from.num_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryBossWin::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryBossWin::CopyFrom(const CountryBossWin& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryBossWin::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountryBossWin::Swap(CountryBossWin* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    std::swap(money_, other->money_);
    itemid_.Swap(&other->itemid_);
    num_.Swap(&other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryBossWin::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryBossWin_descriptor_;
  metadata.reflection = CountryBossWin_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryBossEndKill::kExpFieldNumber;
const int CountryBossEndKill::kCreditFieldNumber;
const int CountryBossEndKill::kConFieldNumber;
#endif  // !_MSC_VER

CountryBossEndKill::CountryBossEndKill()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryBossEndKill::InitAsDefaultInstance() {
}

CountryBossEndKill::CountryBossEndKill(const CountryBossEndKill& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryBossEndKill::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  credit_ = 0;
  con_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryBossEndKill::~CountryBossEndKill() {
  SharedDtor();
}

void CountryBossEndKill::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryBossEndKill::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryBossEndKill::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryBossEndKill_descriptor_;
}

const CountryBossEndKill& CountryBossEndKill::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  return *default_instance_;
}

CountryBossEndKill* CountryBossEndKill::default_instance_ = NULL;

CountryBossEndKill* CountryBossEndKill::New() const {
  return new CountryBossEndKill;
}

void CountryBossEndKill::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0;
    credit_ = 0;
    con_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryBossEndKill::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_credit;
        break;
      }

      // optional int32 credit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_con;
        break;
      }

      // optional int32 con = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_con:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &con_)));
          set_has_con();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryBossEndKill::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }

  // optional int32 credit = 2;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->credit(), output);
  }

  // optional int32 con = 3;
  if (has_con()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->con(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryBossEndKill::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }

  // optional int32 credit = 2;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->credit(), target);
  }

  // optional int32 con = 3;
  if (has_con()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->con(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryBossEndKill::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 credit = 2;
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

    // optional int32 con = 3;
    if (has_con()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->con());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryBossEndKill::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryBossEndKill* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryBossEndKill*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryBossEndKill::MergeFrom(const CountryBossEndKill& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_con()) {
      set_con(from.con());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryBossEndKill::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryBossEndKill::CopyFrom(const CountryBossEndKill& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryBossEndKill::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountryBossEndKill::Swap(CountryBossEndKill* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(credit_, other->credit_);
    std::swap(con_, other->con_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryBossEndKill::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryBossEndKill_descriptor_;
  metadata.reflection = CountryBossEndKill_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryBossRankHurt::kExpFieldNumber;
const int CountryBossRankHurt::kCreditFieldNumber;
const int CountryBossRankHurt::kConFieldNumber;
#endif  // !_MSC_VER

CountryBossRankHurt::CountryBossRankHurt()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryBossRankHurt::InitAsDefaultInstance() {
}

CountryBossRankHurt::CountryBossRankHurt(const CountryBossRankHurt& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryBossRankHurt::SharedCtor() {
  _cached_size_ = 0;
  exp_ = 0;
  credit_ = 0;
  con_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryBossRankHurt::~CountryBossRankHurt() {
  SharedDtor();
}

void CountryBossRankHurt::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryBossRankHurt::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryBossRankHurt::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryBossRankHurt_descriptor_;
}

const CountryBossRankHurt& CountryBossRankHurt::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountryBoss_2eproto();
  return *default_instance_;
}

CountryBossRankHurt* CountryBossRankHurt::default_instance_ = NULL;

CountryBossRankHurt* CountryBossRankHurt::New() const {
  return new CountryBossRankHurt;
}

void CountryBossRankHurt::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    exp_ = 0;
    credit_ = 0;
    con_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryBossRankHurt::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 exp = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &exp_)));
          set_has_exp();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_credit;
        break;
      }

      // optional int32 credit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_credit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &credit_)));
          set_has_credit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_con;
        break;
      }

      // optional int32 con = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_con:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &con_)));
          set_has_con();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryBossRankHurt::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 exp = 1;
  if (has_exp()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->exp(), output);
  }

  // optional int32 credit = 2;
  if (has_credit()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->credit(), output);
  }

  // optional int32 con = 3;
  if (has_con()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->con(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryBossRankHurt::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 exp = 1;
  if (has_exp()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->exp(), target);
  }

  // optional int32 credit = 2;
  if (has_credit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->credit(), target);
  }

  // optional int32 con = 3;
  if (has_con()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->con(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryBossRankHurt::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 exp = 1;
    if (has_exp()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->exp());
    }

    // optional int32 credit = 2;
    if (has_credit()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->credit());
    }

    // optional int32 con = 3;
    if (has_con()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->con());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryBossRankHurt::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryBossRankHurt* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryBossRankHurt*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryBossRankHurt::MergeFrom(const CountryBossRankHurt& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_exp()) {
      set_exp(from.exp());
    }
    if (from.has_credit()) {
      set_credit(from.credit());
    }
    if (from.has_con()) {
      set_con(from.con());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryBossRankHurt::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryBossRankHurt::CopyFrom(const CountryBossRankHurt& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryBossRankHurt::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountryBossRankHurt::Swap(CountryBossRankHurt* other) {
  if (other != this) {
    std::swap(exp_, other->exp_);
    std::swap(credit_, other->credit_);
    std::swap(con_, other->con_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryBossRankHurt::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryBossRankHurt_descriptor_;
  metadata.reflection = CountryBossRankHurt_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CountryBossPackage

// @@protoc_insertion_point(global_scope)
