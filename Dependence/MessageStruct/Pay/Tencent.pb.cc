// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Pay/Tencent.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Pay/Tencent.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace TencentInfo {

namespace {

const ::google::protobuf::Descriptor* ClientReqAskPayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqAskPayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* GSToClientAskPayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSToClientAskPayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CallBackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CallBackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToTencentCallBackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToTencentCallBackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysPayInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysPayInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientToGameTencentmarket_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientToGameTencentmarket_reflection_ = NULL;
const ::google::protobuf::Descriptor* MaketCallBackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MaketCallBackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToTencentMaketCallBackInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToTencentMaketCallBackInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* SysMarketInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  SysMarketInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* MarketTaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  MarketTaskInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* TaskInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  TaskInfo_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Pay_2fTencent_2eproto() {
  protobuf_AddDesc_Pay_2fTencent_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Pay/Tencent.proto");
  GOOGLE_CHECK(file != NULL);
  ClientReqAskPayInfo_descriptor_ = file->message_type(0);
  static const int ClientReqAskPayInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqAskPayInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqAskPayInfo, num_),
  };
  ClientReqAskPayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqAskPayInfo_descriptor_,
      ClientReqAskPayInfo::default_instance_,
      ClientReqAskPayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqAskPayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqAskPayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqAskPayInfo));
  GSToClientAskPayInfo_descriptor_ = file->message_type(1);
  static const int GSToClientAskPayInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSToClientAskPayInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSToClientAskPayInfo, url_params_),
  };
  GSToClientAskPayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSToClientAskPayInfo_descriptor_,
      GSToClientAskPayInfo::default_instance_,
      GSToClientAskPayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSToClientAskPayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSToClientAskPayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSToClientAskPayInfo));
  CallBackInfo_descriptor_ = file->message_type(2);
  static const int CallBackInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackInfo, params_),
  };
  CallBackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CallBackInfo_descriptor_,
      CallBackInfo::default_instance_,
      CallBackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CallBackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CallBackInfo));
  ToTencentCallBackInfo_descriptor_ = file->message_type(3);
  static const int ToTencentCallBackInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTencentCallBackInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTencentCallBackInfo, msg_),
  };
  ToTencentCallBackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToTencentCallBackInfo_descriptor_,
      ToTencentCallBackInfo::default_instance_,
      ToTencentCallBackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTencentCallBackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTencentCallBackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToTencentCallBackInfo));
  SysPayInfo_descriptor_ = file->message_type(4);
  static const int SysPayInfo_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysPayInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysPayInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysPayInfo, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysPayInfo, realmoney_),
  };
  SysPayInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysPayInfo_descriptor_,
      SysPayInfo::default_instance_,
      SysPayInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysPayInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysPayInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysPayInfo));
  ClientToGameTencentmarket_descriptor_ = file->message_type(5);
  static const int ClientToGameTencentmarket_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToGameTencentmarket, app_user_source_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToGameTencentmarket, app_contract_id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToGameTencentmarket, app_custom_),
  };
  ClientToGameTencentmarket_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientToGameTencentmarket_descriptor_,
      ClientToGameTencentmarket::default_instance_,
      ClientToGameTencentmarket_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToGameTencentmarket, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientToGameTencentmarket, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientToGameTencentmarket));
  MaketCallBackInfo_descriptor_ = file->message_type(6);
  static const int MaketCallBackInfo_offsets_[12] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaketCallBackInfo, cmd_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaketCallBackInfo, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaketCallBackInfo, appid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaketCallBackInfo, pf_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaketCallBackInfo, ts_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaketCallBackInfo, version_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaketCallBackInfo, contractid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaketCallBackInfo, step_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaketCallBackInfo, payitem_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaketCallBackInfo, billno_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaketCallBackInfo, providetype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaketCallBackInfo, sig_),
  };
  MaketCallBackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MaketCallBackInfo_descriptor_,
      MaketCallBackInfo::default_instance_,
      MaketCallBackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaketCallBackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MaketCallBackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MaketCallBackInfo));
  ToTencentMaketCallBackInfo_descriptor_ = file->message_type(7);
  static const int ToTencentMaketCallBackInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTencentMaketCallBackInfo, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTencentMaketCallBackInfo, msg_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTencentMaketCallBackInfo, zoneid_),
  };
  ToTencentMaketCallBackInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToTencentMaketCallBackInfo_descriptor_,
      ToTencentMaketCallBackInfo::default_instance_,
      ToTencentMaketCallBackInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTencentMaketCallBackInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToTencentMaketCallBackInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToTencentMaketCallBackInfo));
  SysMarketInfo_descriptor_ = file->message_type(8);
  static const int SysMarketInfo_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMarketInfo, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMarketInfo, itemid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMarketInfo, num_),
  };
  SysMarketInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      SysMarketInfo_descriptor_,
      SysMarketInfo::default_instance_,
      SysMarketInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMarketInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(SysMarketInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(SysMarketInfo));
  MarketTaskInfo_descriptor_ = file->message_type(9);
  static const int MarketTaskInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTaskInfo, openid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTaskInfo, taskinfo_),
  };
  MarketTaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      MarketTaskInfo_descriptor_,
      MarketTaskInfo::default_instance_,
      MarketTaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(MarketTaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(MarketTaskInfo));
  TaskInfo_descriptor_ = file->message_type(10);
  static const int TaskInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, taskid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, step1_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, step2_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, step3_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, step4_),
  };
  TaskInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      TaskInfo_descriptor_,
      TaskInfo::default_instance_,
      TaskInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(TaskInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(TaskInfo));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Pay_2fTencent_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqAskPayInfo_descriptor_, &ClientReqAskPayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSToClientAskPayInfo_descriptor_, &GSToClientAskPayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CallBackInfo_descriptor_, &CallBackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToTencentCallBackInfo_descriptor_, &ToTencentCallBackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysPayInfo_descriptor_, &SysPayInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientToGameTencentmarket_descriptor_, &ClientToGameTencentmarket::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MaketCallBackInfo_descriptor_, &MaketCallBackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToTencentMaketCallBackInfo_descriptor_, &ToTencentMaketCallBackInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    SysMarketInfo_descriptor_, &SysMarketInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    MarketTaskInfo_descriptor_, &MarketTaskInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    TaskInfo_descriptor_, &TaskInfo::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Pay_2fTencent_2eproto() {
  delete ClientReqAskPayInfo::default_instance_;
  delete ClientReqAskPayInfo_reflection_;
  delete GSToClientAskPayInfo::default_instance_;
  delete GSToClientAskPayInfo_reflection_;
  delete CallBackInfo::default_instance_;
  delete CallBackInfo_reflection_;
  delete ToTencentCallBackInfo::default_instance_;
  delete ToTencentCallBackInfo_reflection_;
  delete SysPayInfo::default_instance_;
  delete SysPayInfo_reflection_;
  delete ClientToGameTencentmarket::default_instance_;
  delete ClientToGameTencentmarket_reflection_;
  delete MaketCallBackInfo::default_instance_;
  delete MaketCallBackInfo_reflection_;
  delete ToTencentMaketCallBackInfo::default_instance_;
  delete ToTencentMaketCallBackInfo_reflection_;
  delete SysMarketInfo::default_instance_;
  delete SysMarketInfo_reflection_;
  delete MarketTaskInfo::default_instance_;
  delete MarketTaskInfo_reflection_;
  delete TaskInfo::default_instance_;
  delete TaskInfo_reflection_;
}

void protobuf_AddDesc_Pay_2fTencent_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\021Pay/Tencent.proto\022\013TencentInfo\"2\n\023Clie"
    "ntReqAskPayInfo\022\016\n\006itemId\030\001 \002(\005\022\013\n\003num\030\002"
    " \002(\005\"7\n\024GSToClientAskPayInfo\022\013\n\003ret\030\001 \002("
    "\005\022\022\n\nurl_params\030\002 \002(\t\"\036\n\014CallBackInfo\022\016\n"
    "\006params\030\001 \002(\t\"1\n\025ToTencentCallBackInfo\022\013"
    "\n\003ret\030\001 \002(\t\022\013\n\003msg\030\002 \002(\t\"L\n\nSysPayInfo\022\016"
    "\n\006charId\030\001 \002(\003\022\016\n\006itemId\030\002 \002(\005\022\013\n\003num\030\003 "
    "\002(\005\022\021\n\trealMoney\030\004 \001(\005\"a\n\031ClientToGameTe"
    "ncentmarket\022\027\n\017app_user_source\030\001 \002(\t\022\027\n\017"
    "app_contract_id\030\002 \002(\t\022\022\n\napp_custom\030\003 \002("
    "\t\"\315\001\n\021MaketCallBackInfo\022\013\n\003cmd\030\001 \002(\t\022\016\n\006"
    "openid\030\002 \002(\t\022\r\n\005appid\030\003 \002(\t\022\n\n\002pf\030\004 \002(\t\022"
    "\n\n\002ts\030\005 \002(\t\022\017\n\007version\030\006 \002(\t\022\022\n\ncontract"
    "id\030\007 \002(\t\022\014\n\004step\030\010 \002(\t\022\017\n\007payitem\030\t \002(\t\022"
    "\016\n\006billno\030\n \002(\t\022\023\n\013providetype\030\013 \002(\t\022\013\n\003"
    "sig\030\014 \002(\t\"F\n\032ToTencentMaketCallBackInfo\022"
    "\013\n\003ret\030\001 \002(\t\022\013\n\003msg\030\002 \002(\t\022\016\n\006zoneid\030\003 \002("
    "\t\"<\n\rSysMarketInfo\022\016\n\006charId\030\001 \002(\003\022\016\n\006it"
    "emId\030\002 \002(\005\022\013\n\003num\030\003 \002(\005\"I\n\016MarketTaskInf"
    "o\022\016\n\006openid\030\001 \002(\t\022\'\n\010taskinfo\030\002 \003(\0132\025.Te"
    "ncentInfo.TaskInfo\"V\n\010TaskInfo\022\016\n\006taskId"
    "\030\001 \002(\t\022\r\n\005step1\030\002 \001(\010\022\r\n\005step2\030\003 \001(\010\022\r\n\005"
    "step3\030\004 \001(\010\022\r\n\005step4\030\005 \001(\010", 906);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Pay/Tencent.proto", &protobuf_RegisterTypes);
  ClientReqAskPayInfo::default_instance_ = new ClientReqAskPayInfo();
  GSToClientAskPayInfo::default_instance_ = new GSToClientAskPayInfo();
  CallBackInfo::default_instance_ = new CallBackInfo();
  ToTencentCallBackInfo::default_instance_ = new ToTencentCallBackInfo();
  SysPayInfo::default_instance_ = new SysPayInfo();
  ClientToGameTencentmarket::default_instance_ = new ClientToGameTencentmarket();
  MaketCallBackInfo::default_instance_ = new MaketCallBackInfo();
  ToTencentMaketCallBackInfo::default_instance_ = new ToTencentMaketCallBackInfo();
  SysMarketInfo::default_instance_ = new SysMarketInfo();
  MarketTaskInfo::default_instance_ = new MarketTaskInfo();
  TaskInfo::default_instance_ = new TaskInfo();
  ClientReqAskPayInfo::default_instance_->InitAsDefaultInstance();
  GSToClientAskPayInfo::default_instance_->InitAsDefaultInstance();
  CallBackInfo::default_instance_->InitAsDefaultInstance();
  ToTencentCallBackInfo::default_instance_->InitAsDefaultInstance();
  SysPayInfo::default_instance_->InitAsDefaultInstance();
  ClientToGameTencentmarket::default_instance_->InitAsDefaultInstance();
  MaketCallBackInfo::default_instance_->InitAsDefaultInstance();
  ToTencentMaketCallBackInfo::default_instance_->InitAsDefaultInstance();
  SysMarketInfo::default_instance_->InitAsDefaultInstance();
  MarketTaskInfo::default_instance_->InitAsDefaultInstance();
  TaskInfo::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Pay_2fTencent_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Pay_2fTencent_2eproto {
  StaticDescriptorInitializer_Pay_2fTencent_2eproto() {
    protobuf_AddDesc_Pay_2fTencent_2eproto();
  }
} static_descriptor_initializer_Pay_2fTencent_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int ClientReqAskPayInfo::kItemIdFieldNumber;
const int ClientReqAskPayInfo::kNumFieldNumber;
#endif  // !_MSC_VER

ClientReqAskPayInfo::ClientReqAskPayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqAskPayInfo::InitAsDefaultInstance() {
}

ClientReqAskPayInfo::ClientReqAskPayInfo(const ClientReqAskPayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqAskPayInfo::SharedCtor() {
  _cached_size_ = 0;
  itemid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqAskPayInfo::~ClientReqAskPayInfo() {
  SharedDtor();
}

void ClientReqAskPayInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqAskPayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqAskPayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqAskPayInfo_descriptor_;
}

const ClientReqAskPayInfo& ClientReqAskPayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2fTencent_2eproto();
  return *default_instance_;
}

ClientReqAskPayInfo* ClientReqAskPayInfo::default_instance_ = NULL;

ClientReqAskPayInfo* ClientReqAskPayInfo::New() const {
  return new ClientReqAskPayInfo;
}

void ClientReqAskPayInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    itemid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqAskPayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 itemId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // required int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqAskPayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->itemid(), output);
  }

  // required int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqAskPayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 itemId = 1;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->itemid(), target);
  }

  // required int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqAskPayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 itemId = 1;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqAskPayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqAskPayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqAskPayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqAskPayInfo::MergeFrom(const ClientReqAskPayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqAskPayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqAskPayInfo::CopyFrom(const ClientReqAskPayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqAskPayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ClientReqAskPayInfo::Swap(ClientReqAskPayInfo* other) {
  if (other != this) {
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqAskPayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqAskPayInfo_descriptor_;
  metadata.reflection = ClientReqAskPayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GSToClientAskPayInfo::kRetFieldNumber;
const int GSToClientAskPayInfo::kUrlParamsFieldNumber;
#endif  // !_MSC_VER

GSToClientAskPayInfo::GSToClientAskPayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSToClientAskPayInfo::InitAsDefaultInstance() {
}

GSToClientAskPayInfo::GSToClientAskPayInfo(const GSToClientAskPayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSToClientAskPayInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  url_params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSToClientAskPayInfo::~GSToClientAskPayInfo() {
  SharedDtor();
}

void GSToClientAskPayInfo::SharedDtor() {
  if (url_params_ != &::google::protobuf::internal::kEmptyString) {
    delete url_params_;
  }
  if (this != default_instance_) {
  }
}

void GSToClientAskPayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSToClientAskPayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSToClientAskPayInfo_descriptor_;
}

const GSToClientAskPayInfo& GSToClientAskPayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2fTencent_2eproto();
  return *default_instance_;
}

GSToClientAskPayInfo* GSToClientAskPayInfo::default_instance_ = NULL;

GSToClientAskPayInfo* GSToClientAskPayInfo::New() const {
  return new GSToClientAskPayInfo;
}

void GSToClientAskPayInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    if (has_url_params()) {
      if (url_params_ != &::google::protobuf::internal::kEmptyString) {
        url_params_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSToClientAskPayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_url_params;
        break;
      }

      // required string url_params = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_url_params:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_url_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->url_params().data(), this->url_params().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSToClientAskPayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // required string url_params = 2;
  if (has_url_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_params().data(), this->url_params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->url_params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSToClientAskPayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // required string url_params = 2;
  if (has_url_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->url_params().data(), this->url_params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->url_params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSToClientAskPayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // required string url_params = 2;
    if (has_url_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->url_params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSToClientAskPayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSToClientAskPayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSToClientAskPayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSToClientAskPayInfo::MergeFrom(const GSToClientAskPayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_url_params()) {
      set_url_params(from.url_params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSToClientAskPayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSToClientAskPayInfo::CopyFrom(const GSToClientAskPayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSToClientAskPayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void GSToClientAskPayInfo::Swap(GSToClientAskPayInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(url_params_, other->url_params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSToClientAskPayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSToClientAskPayInfo_descriptor_;
  metadata.reflection = GSToClientAskPayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CallBackInfo::kParamsFieldNumber;
#endif  // !_MSC_VER

CallBackInfo::CallBackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CallBackInfo::InitAsDefaultInstance() {
}

CallBackInfo::CallBackInfo(const CallBackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CallBackInfo::SharedCtor() {
  _cached_size_ = 0;
  params_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CallBackInfo::~CallBackInfo() {
  SharedDtor();
}

void CallBackInfo::SharedDtor() {
  if (params_ != &::google::protobuf::internal::kEmptyString) {
    delete params_;
  }
  if (this != default_instance_) {
  }
}

void CallBackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CallBackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CallBackInfo_descriptor_;
}

const CallBackInfo& CallBackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2fTencent_2eproto();
  return *default_instance_;
}

CallBackInfo* CallBackInfo::default_instance_ = NULL;

CallBackInfo* CallBackInfo::New() const {
  return new CallBackInfo;
}

void CallBackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_params()) {
      if (params_ != &::google::protobuf::internal::kEmptyString) {
        params_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CallBackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string params = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_params()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->params().data(), this->params().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CallBackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string params = 1;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->params(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CallBackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string params = 1;
  if (has_params()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->params().data(), this->params().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->params(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CallBackInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string params = 1;
    if (has_params()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->params());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CallBackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CallBackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CallBackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CallBackInfo::MergeFrom(const CallBackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_params()) {
      set_params(from.params());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CallBackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CallBackInfo::CopyFrom(const CallBackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CallBackInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CallBackInfo::Swap(CallBackInfo* other) {
  if (other != this) {
    std::swap(params_, other->params_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CallBackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CallBackInfo_descriptor_;
  metadata.reflection = CallBackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToTencentCallBackInfo::kRetFieldNumber;
const int ToTencentCallBackInfo::kMsgFieldNumber;
#endif  // !_MSC_VER

ToTencentCallBackInfo::ToTencentCallBackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToTencentCallBackInfo::InitAsDefaultInstance() {
}

ToTencentCallBackInfo::ToTencentCallBackInfo(const ToTencentCallBackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToTencentCallBackInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToTencentCallBackInfo::~ToTencentCallBackInfo() {
  SharedDtor();
}

void ToTencentCallBackInfo::SharedDtor() {
  if (ret_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (this != default_instance_) {
  }
}

void ToTencentCallBackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToTencentCallBackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToTencentCallBackInfo_descriptor_;
}

const ToTencentCallBackInfo& ToTencentCallBackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2fTencent_2eproto();
  return *default_instance_;
}

ToTencentCallBackInfo* ToTencentCallBackInfo::default_instance_ = NULL;

ToTencentCallBackInfo* ToTencentCallBackInfo::New() const {
  return new ToTencentCallBackInfo;
}

void ToTencentCallBackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != &::google::protobuf::internal::kEmptyString) {
        ret_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToTencentCallBackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ret().data(), this->ret().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToTencentCallBackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ret(), output);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToTencentCallBackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ret(), target);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToTencentCallBackInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret());
    }

    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToTencentCallBackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToTencentCallBackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToTencentCallBackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToTencentCallBackInfo::MergeFrom(const ToTencentCallBackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToTencentCallBackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToTencentCallBackInfo::CopyFrom(const ToTencentCallBackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToTencentCallBackInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void ToTencentCallBackInfo::Swap(ToTencentCallBackInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(msg_, other->msg_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToTencentCallBackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToTencentCallBackInfo_descriptor_;
  metadata.reflection = ToTencentCallBackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysPayInfo::kCharIdFieldNumber;
const int SysPayInfo::kItemIdFieldNumber;
const int SysPayInfo::kNumFieldNumber;
const int SysPayInfo::kRealMoneyFieldNumber;
#endif  // !_MSC_VER

SysPayInfo::SysPayInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysPayInfo::InitAsDefaultInstance() {
}

SysPayInfo::SysPayInfo(const SysPayInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysPayInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  itemid_ = 0;
  num_ = 0;
  realmoney_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysPayInfo::~SysPayInfo() {
  SharedDtor();
}

void SysPayInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysPayInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysPayInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysPayInfo_descriptor_;
}

const SysPayInfo& SysPayInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2fTencent_2eproto();
  return *default_instance_;
}

SysPayInfo* SysPayInfo::default_instance_ = NULL;

SysPayInfo* SysPayInfo::New() const {
  return new SysPayInfo;
}

void SysPayInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    itemid_ = 0;
    num_ = 0;
    realmoney_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysPayInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // required int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_realMoney;
        break;
      }

      // optional int32 realMoney = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_realMoney:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &realmoney_)));
          set_has_realmoney();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysPayInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  // optional int32 realMoney = 4;
  if (has_realmoney()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->realmoney(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysPayInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  // optional int32 realMoney = 4;
  if (has_realmoney()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->realmoney(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysPayInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int32 realMoney = 4;
    if (has_realmoney()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->realmoney());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysPayInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysPayInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysPayInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysPayInfo::MergeFrom(const SysPayInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_realmoney()) {
      set_realmoney(from.realmoney());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysPayInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysPayInfo::CopyFrom(const SysPayInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysPayInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SysPayInfo::Swap(SysPayInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(realmoney_, other->realmoney_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysPayInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysPayInfo_descriptor_;
  metadata.reflection = SysPayInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientToGameTencentmarket::kAppUserSourceFieldNumber;
const int ClientToGameTencentmarket::kAppContractIdFieldNumber;
const int ClientToGameTencentmarket::kAppCustomFieldNumber;
#endif  // !_MSC_VER

ClientToGameTencentmarket::ClientToGameTencentmarket()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientToGameTencentmarket::InitAsDefaultInstance() {
}

ClientToGameTencentmarket::ClientToGameTencentmarket(const ClientToGameTencentmarket& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientToGameTencentmarket::SharedCtor() {
  _cached_size_ = 0;
  app_user_source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_contract_id_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  app_custom_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientToGameTencentmarket::~ClientToGameTencentmarket() {
  SharedDtor();
}

void ClientToGameTencentmarket::SharedDtor() {
  if (app_user_source_ != &::google::protobuf::internal::kEmptyString) {
    delete app_user_source_;
  }
  if (app_contract_id_ != &::google::protobuf::internal::kEmptyString) {
    delete app_contract_id_;
  }
  if (app_custom_ != &::google::protobuf::internal::kEmptyString) {
    delete app_custom_;
  }
  if (this != default_instance_) {
  }
}

void ClientToGameTencentmarket::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientToGameTencentmarket::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientToGameTencentmarket_descriptor_;
}

const ClientToGameTencentmarket& ClientToGameTencentmarket::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2fTencent_2eproto();
  return *default_instance_;
}

ClientToGameTencentmarket* ClientToGameTencentmarket::default_instance_ = NULL;

ClientToGameTencentmarket* ClientToGameTencentmarket::New() const {
  return new ClientToGameTencentmarket;
}

void ClientToGameTencentmarket::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_app_user_source()) {
      if (app_user_source_ != &::google::protobuf::internal::kEmptyString) {
        app_user_source_->clear();
      }
    }
    if (has_app_contract_id()) {
      if (app_contract_id_ != &::google::protobuf::internal::kEmptyString) {
        app_contract_id_->clear();
      }
    }
    if (has_app_custom()) {
      if (app_custom_ != &::google::protobuf::internal::kEmptyString) {
        app_custom_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientToGameTencentmarket::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string app_user_source = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_user_source()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_user_source().data(), this->app_user_source().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_app_contract_id;
        break;
      }

      // required string app_contract_id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_contract_id:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_contract_id()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_contract_id().data(), this->app_contract_id().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_app_custom;
        break;
      }

      // required string app_custom = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_app_custom:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_app_custom()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->app_custom().data(), this->app_custom().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientToGameTencentmarket::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string app_user_source = 1;
  if (has_app_user_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_user_source().data(), this->app_user_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->app_user_source(), output);
  }

  // required string app_contract_id = 2;
  if (has_app_contract_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_contract_id().data(), this->app_contract_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->app_contract_id(), output);
  }

  // required string app_custom = 3;
  if (has_app_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_custom().data(), this->app_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->app_custom(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientToGameTencentmarket::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string app_user_source = 1;
  if (has_app_user_source()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_user_source().data(), this->app_user_source().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->app_user_source(), target);
  }

  // required string app_contract_id = 2;
  if (has_app_contract_id()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_contract_id().data(), this->app_contract_id().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->app_contract_id(), target);
  }

  // required string app_custom = 3;
  if (has_app_custom()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->app_custom().data(), this->app_custom().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->app_custom(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientToGameTencentmarket::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string app_user_source = 1;
    if (has_app_user_source()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_user_source());
    }

    // required string app_contract_id = 2;
    if (has_app_contract_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_contract_id());
    }

    // required string app_custom = 3;
    if (has_app_custom()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->app_custom());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientToGameTencentmarket::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientToGameTencentmarket* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientToGameTencentmarket*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientToGameTencentmarket::MergeFrom(const ClientToGameTencentmarket& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_app_user_source()) {
      set_app_user_source(from.app_user_source());
    }
    if (from.has_app_contract_id()) {
      set_app_contract_id(from.app_contract_id());
    }
    if (from.has_app_custom()) {
      set_app_custom(from.app_custom());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientToGameTencentmarket::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientToGameTencentmarket::CopyFrom(const ClientToGameTencentmarket& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientToGameTencentmarket::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ClientToGameTencentmarket::Swap(ClientToGameTencentmarket* other) {
  if (other != this) {
    std::swap(app_user_source_, other->app_user_source_);
    std::swap(app_contract_id_, other->app_contract_id_);
    std::swap(app_custom_, other->app_custom_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientToGameTencentmarket::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientToGameTencentmarket_descriptor_;
  metadata.reflection = ClientToGameTencentmarket_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MaketCallBackInfo::kCmdFieldNumber;
const int MaketCallBackInfo::kOpenidFieldNumber;
const int MaketCallBackInfo::kAppidFieldNumber;
const int MaketCallBackInfo::kPfFieldNumber;
const int MaketCallBackInfo::kTsFieldNumber;
const int MaketCallBackInfo::kVersionFieldNumber;
const int MaketCallBackInfo::kContractidFieldNumber;
const int MaketCallBackInfo::kStepFieldNumber;
const int MaketCallBackInfo::kPayitemFieldNumber;
const int MaketCallBackInfo::kBillnoFieldNumber;
const int MaketCallBackInfo::kProvidetypeFieldNumber;
const int MaketCallBackInfo::kSigFieldNumber;
#endif  // !_MSC_VER

MaketCallBackInfo::MaketCallBackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MaketCallBackInfo::InitAsDefaultInstance() {
}

MaketCallBackInfo::MaketCallBackInfo(const MaketCallBackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MaketCallBackInfo::SharedCtor() {
  _cached_size_ = 0;
  cmd_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  appid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ts_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  version_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  contractid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  step_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  payitem_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  billno_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  providetype_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  sig_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MaketCallBackInfo::~MaketCallBackInfo() {
  SharedDtor();
}

void MaketCallBackInfo::SharedDtor() {
  if (cmd_ != &::google::protobuf::internal::kEmptyString) {
    delete cmd_;
  }
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (appid_ != &::google::protobuf::internal::kEmptyString) {
    delete appid_;
  }
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    delete pf_;
  }
  if (ts_ != &::google::protobuf::internal::kEmptyString) {
    delete ts_;
  }
  if (version_ != &::google::protobuf::internal::kEmptyString) {
    delete version_;
  }
  if (contractid_ != &::google::protobuf::internal::kEmptyString) {
    delete contractid_;
  }
  if (step_ != &::google::protobuf::internal::kEmptyString) {
    delete step_;
  }
  if (payitem_ != &::google::protobuf::internal::kEmptyString) {
    delete payitem_;
  }
  if (billno_ != &::google::protobuf::internal::kEmptyString) {
    delete billno_;
  }
  if (providetype_ != &::google::protobuf::internal::kEmptyString) {
    delete providetype_;
  }
  if (sig_ != &::google::protobuf::internal::kEmptyString) {
    delete sig_;
  }
  if (this != default_instance_) {
  }
}

void MaketCallBackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MaketCallBackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MaketCallBackInfo_descriptor_;
}

const MaketCallBackInfo& MaketCallBackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2fTencent_2eproto();
  return *default_instance_;
}

MaketCallBackInfo* MaketCallBackInfo::default_instance_ = NULL;

MaketCallBackInfo* MaketCallBackInfo::New() const {
  return new MaketCallBackInfo;
}

void MaketCallBackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_cmd()) {
      if (cmd_ != &::google::protobuf::internal::kEmptyString) {
        cmd_->clear();
      }
    }
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
    if (has_appid()) {
      if (appid_ != &::google::protobuf::internal::kEmptyString) {
        appid_->clear();
      }
    }
    if (has_pf()) {
      if (pf_ != &::google::protobuf::internal::kEmptyString) {
        pf_->clear();
      }
    }
    if (has_ts()) {
      if (ts_ != &::google::protobuf::internal::kEmptyString) {
        ts_->clear();
      }
    }
    if (has_version()) {
      if (version_ != &::google::protobuf::internal::kEmptyString) {
        version_->clear();
      }
    }
    if (has_contractid()) {
      if (contractid_ != &::google::protobuf::internal::kEmptyString) {
        contractid_->clear();
      }
    }
    if (has_step()) {
      if (step_ != &::google::protobuf::internal::kEmptyString) {
        step_->clear();
      }
    }
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (has_payitem()) {
      if (payitem_ != &::google::protobuf::internal::kEmptyString) {
        payitem_->clear();
      }
    }
    if (has_billno()) {
      if (billno_ != &::google::protobuf::internal::kEmptyString) {
        billno_->clear();
      }
    }
    if (has_providetype()) {
      if (providetype_ != &::google::protobuf::internal::kEmptyString) {
        providetype_->clear();
      }
    }
    if (has_sig()) {
      if (sig_ != &::google::protobuf::internal::kEmptyString) {
        sig_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MaketCallBackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string cmd = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_cmd()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->cmd().data(), this->cmd().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_openid;
        break;
      }

      // required string openid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_openid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_appid;
        break;
      }

      // required string appid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_appid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_appid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->appid().data(), this->appid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_pf;
        break;
      }

      // required string pf = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_pf:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_pf()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->pf().data(), this->pf().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_ts;
        break;
      }

      // required string ts = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_ts:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ts()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ts().data(), this->ts().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_version;
        break;
      }

      // required string version = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_version:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_version()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->version().data(), this->version().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(58)) goto parse_contractid;
        break;
      }

      // required string contractid = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_contractid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_contractid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->contractid().data(), this->contractid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(66)) goto parse_step;
        break;
      }

      // required string step = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_step:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_step()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->step().data(), this->step().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(74)) goto parse_payitem;
        break;
      }

      // required string payitem = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_payitem:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_payitem()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->payitem().data(), this->payitem().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(82)) goto parse_billno;
        break;
      }

      // required string billno = 10;
      case 10: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_billno:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_billno()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->billno().data(), this->billno().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(90)) goto parse_providetype;
        break;
      }

      // required string providetype = 11;
      case 11: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_providetype:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_providetype()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->providetype().data(), this->providetype().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(98)) goto parse_sig;
        break;
      }

      // required string sig = 12;
      case 12: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_sig:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_sig()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->sig().data(), this->sig().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MaketCallBackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->cmd(), output);
  }

  // required string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->openid(), output);
  }

  // required string appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->appid(), output);
  }

  // required string pf = 4;
  if (has_pf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pf().data(), this->pf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      4, this->pf(), output);
  }

  // required string ts = 5;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ts().data(), this->ts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      5, this->ts(), output);
  }

  // required string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      6, this->version(), output);
  }

  // required string contractid = 7;
  if (has_contractid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contractid().data(), this->contractid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      7, this->contractid(), output);
  }

  // required string step = 8;
  if (has_step()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->step().data(), this->step().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      8, this->step(), output);
  }

  // required string payitem = 9;
  if (has_payitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payitem().data(), this->payitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      9, this->payitem(), output);
  }

  // required string billno = 10;
  if (has_billno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billno().data(), this->billno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      10, this->billno(), output);
  }

  // required string providetype = 11;
  if (has_providetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providetype().data(), this->providetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      11, this->providetype(), output);
  }

  // required string sig = 12;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      12, this->sig(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MaketCallBackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string cmd = 1;
  if (has_cmd()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->cmd().data(), this->cmd().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->cmd(), target);
  }

  // required string openid = 2;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->openid(), target);
  }

  // required string appid = 3;
  if (has_appid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->appid().data(), this->appid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->appid(), target);
  }

  // required string pf = 4;
  if (has_pf()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->pf().data(), this->pf().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        4, this->pf(), target);
  }

  // required string ts = 5;
  if (has_ts()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ts().data(), this->ts().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        5, this->ts(), target);
  }

  // required string version = 6;
  if (has_version()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->version().data(), this->version().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        6, this->version(), target);
  }

  // required string contractid = 7;
  if (has_contractid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->contractid().data(), this->contractid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        7, this->contractid(), target);
  }

  // required string step = 8;
  if (has_step()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->step().data(), this->step().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        8, this->step(), target);
  }

  // required string payitem = 9;
  if (has_payitem()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->payitem().data(), this->payitem().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        9, this->payitem(), target);
  }

  // required string billno = 10;
  if (has_billno()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->billno().data(), this->billno().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        10, this->billno(), target);
  }

  // required string providetype = 11;
  if (has_providetype()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->providetype().data(), this->providetype().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        11, this->providetype(), target);
  }

  // required string sig = 12;
  if (has_sig()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->sig().data(), this->sig().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        12, this->sig(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MaketCallBackInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string cmd = 1;
    if (has_cmd()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->cmd());
    }

    // required string openid = 2;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

    // required string appid = 3;
    if (has_appid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->appid());
    }

    // required string pf = 4;
    if (has_pf()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->pf());
    }

    // required string ts = 5;
    if (has_ts()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ts());
    }

    // required string version = 6;
    if (has_version()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->version());
    }

    // required string contractid = 7;
    if (has_contractid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->contractid());
    }

    // required string step = 8;
    if (has_step()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->step());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // required string payitem = 9;
    if (has_payitem()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->payitem());
    }

    // required string billno = 10;
    if (has_billno()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->billno());
    }

    // required string providetype = 11;
    if (has_providetype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->providetype());
    }

    // required string sig = 12;
    if (has_sig()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->sig());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MaketCallBackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MaketCallBackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MaketCallBackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MaketCallBackInfo::MergeFrom(const MaketCallBackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_cmd()) {
      set_cmd(from.cmd());
    }
    if (from.has_openid()) {
      set_openid(from.openid());
    }
    if (from.has_appid()) {
      set_appid(from.appid());
    }
    if (from.has_pf()) {
      set_pf(from.pf());
    }
    if (from.has_ts()) {
      set_ts(from.ts());
    }
    if (from.has_version()) {
      set_version(from.version());
    }
    if (from.has_contractid()) {
      set_contractid(from.contractid());
    }
    if (from.has_step()) {
      set_step(from.step());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_payitem()) {
      set_payitem(from.payitem());
    }
    if (from.has_billno()) {
      set_billno(from.billno());
    }
    if (from.has_providetype()) {
      set_providetype(from.providetype());
    }
    if (from.has_sig()) {
      set_sig(from.sig());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MaketCallBackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MaketCallBackInfo::CopyFrom(const MaketCallBackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MaketCallBackInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000fff) != 0x00000fff) return false;

  return true;
}

void MaketCallBackInfo::Swap(MaketCallBackInfo* other) {
  if (other != this) {
    std::swap(cmd_, other->cmd_);
    std::swap(openid_, other->openid_);
    std::swap(appid_, other->appid_);
    std::swap(pf_, other->pf_);
    std::swap(ts_, other->ts_);
    std::swap(version_, other->version_);
    std::swap(contractid_, other->contractid_);
    std::swap(step_, other->step_);
    std::swap(payitem_, other->payitem_);
    std::swap(billno_, other->billno_);
    std::swap(providetype_, other->providetype_);
    std::swap(sig_, other->sig_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MaketCallBackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MaketCallBackInfo_descriptor_;
  metadata.reflection = MaketCallBackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToTencentMaketCallBackInfo::kRetFieldNumber;
const int ToTencentMaketCallBackInfo::kMsgFieldNumber;
const int ToTencentMaketCallBackInfo::kZoneidFieldNumber;
#endif  // !_MSC_VER

ToTencentMaketCallBackInfo::ToTencentMaketCallBackInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToTencentMaketCallBackInfo::InitAsDefaultInstance() {
}

ToTencentMaketCallBackInfo::ToTencentMaketCallBackInfo(const ToTencentMaketCallBackInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToTencentMaketCallBackInfo::SharedCtor() {
  _cached_size_ = 0;
  ret_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  msg_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  zoneid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToTencentMaketCallBackInfo::~ToTencentMaketCallBackInfo() {
  SharedDtor();
}

void ToTencentMaketCallBackInfo::SharedDtor() {
  if (ret_ != &::google::protobuf::internal::kEmptyString) {
    delete ret_;
  }
  if (msg_ != &::google::protobuf::internal::kEmptyString) {
    delete msg_;
  }
  if (zoneid_ != &::google::protobuf::internal::kEmptyString) {
    delete zoneid_;
  }
  if (this != default_instance_) {
  }
}

void ToTencentMaketCallBackInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToTencentMaketCallBackInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToTencentMaketCallBackInfo_descriptor_;
}

const ToTencentMaketCallBackInfo& ToTencentMaketCallBackInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2fTencent_2eproto();
  return *default_instance_;
}

ToTencentMaketCallBackInfo* ToTencentMaketCallBackInfo::default_instance_ = NULL;

ToTencentMaketCallBackInfo* ToTencentMaketCallBackInfo::New() const {
  return new ToTencentMaketCallBackInfo;
}

void ToTencentMaketCallBackInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_ret()) {
      if (ret_ != &::google::protobuf::internal::kEmptyString) {
        ret_->clear();
      }
    }
    if (has_msg()) {
      if (msg_ != &::google::protobuf::internal::kEmptyString) {
        msg_->clear();
      }
    }
    if (has_zoneid()) {
      if (zoneid_ != &::google::protobuf::internal::kEmptyString) {
        zoneid_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToTencentMaketCallBackInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_ret()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->ret().data(), this->ret().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_msg;
        break;
      }

      // required string msg = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_msg:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_msg()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->msg().data(), this->msg().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_zoneid;
        break;
      }

      // required string zoneid = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_zoneid:
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_zoneid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->zoneid().data(), this->zoneid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToTencentMaketCallBackInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->ret(), output);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      2, this->msg(), output);
  }

  // required string zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoneid().data(), this->zoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      3, this->zoneid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToTencentMaketCallBackInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->ret().data(), this->ret().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->ret(), target);
  }

  // required string msg = 2;
  if (has_msg()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->msg().data(), this->msg().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        2, this->msg(), target);
  }

  // required string zoneid = 3;
  if (has_zoneid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->zoneid().data(), this->zoneid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        3, this->zoneid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToTencentMaketCallBackInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->ret());
    }

    // required string msg = 2;
    if (has_msg()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->msg());
    }

    // required string zoneid = 3;
    if (has_zoneid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->zoneid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToTencentMaketCallBackInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToTencentMaketCallBackInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToTencentMaketCallBackInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToTencentMaketCallBackInfo::MergeFrom(const ToTencentMaketCallBackInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_msg()) {
      set_msg(from.msg());
    }
    if (from.has_zoneid()) {
      set_zoneid(from.zoneid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToTencentMaketCallBackInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToTencentMaketCallBackInfo::CopyFrom(const ToTencentMaketCallBackInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToTencentMaketCallBackInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void ToTencentMaketCallBackInfo::Swap(ToTencentMaketCallBackInfo* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(msg_, other->msg_);
    std::swap(zoneid_, other->zoneid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToTencentMaketCallBackInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToTencentMaketCallBackInfo_descriptor_;
  metadata.reflection = ToTencentMaketCallBackInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int SysMarketInfo::kCharIdFieldNumber;
const int SysMarketInfo::kItemIdFieldNumber;
const int SysMarketInfo::kNumFieldNumber;
#endif  // !_MSC_VER

SysMarketInfo::SysMarketInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void SysMarketInfo::InitAsDefaultInstance() {
}

SysMarketInfo::SysMarketInfo(const SysMarketInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void SysMarketInfo::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  itemid_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

SysMarketInfo::~SysMarketInfo() {
  SharedDtor();
}

void SysMarketInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void SysMarketInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* SysMarketInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return SysMarketInfo_descriptor_;
}

const SysMarketInfo& SysMarketInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2fTencent_2eproto();
  return *default_instance_;
}

SysMarketInfo* SysMarketInfo::default_instance_ = NULL;

SysMarketInfo* SysMarketInfo::New() const {
  return new SysMarketInfo;
}

void SysMarketInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    itemid_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool SysMarketInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_itemId;
        break;
      }

      // required int32 itemId = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_itemId:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &itemid_)));
          set_has_itemid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_num;
        break;
      }

      // required int32 num = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void SysMarketInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charId = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->itemid(), output);
  }

  // required int32 num = 3;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* SysMarketInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charId = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // required int32 itemId = 2;
  if (has_itemid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->itemid(), target);
  }

  // required int32 num = 3;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int SysMarketInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charId = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // required int32 itemId = 2;
    if (has_itemid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->itemid());
    }

    // required int32 num = 3;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void SysMarketInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const SysMarketInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const SysMarketInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void SysMarketInfo::MergeFrom(const SysMarketInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_itemid()) {
      set_itemid(from.itemid());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void SysMarketInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SysMarketInfo::CopyFrom(const SysMarketInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SysMarketInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000007) != 0x00000007) return false;

  return true;
}

void SysMarketInfo::Swap(SysMarketInfo* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(itemid_, other->itemid_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata SysMarketInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = SysMarketInfo_descriptor_;
  metadata.reflection = SysMarketInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int MarketTaskInfo::kOpenidFieldNumber;
const int MarketTaskInfo::kTaskinfoFieldNumber;
#endif  // !_MSC_VER

MarketTaskInfo::MarketTaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void MarketTaskInfo::InitAsDefaultInstance() {
}

MarketTaskInfo::MarketTaskInfo(const MarketTaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void MarketTaskInfo::SharedCtor() {
  _cached_size_ = 0;
  openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

MarketTaskInfo::~MarketTaskInfo() {
  SharedDtor();
}

void MarketTaskInfo::SharedDtor() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (this != default_instance_) {
  }
}

void MarketTaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* MarketTaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return MarketTaskInfo_descriptor_;
}

const MarketTaskInfo& MarketTaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2fTencent_2eproto();
  return *default_instance_;
}

MarketTaskInfo* MarketTaskInfo::default_instance_ = NULL;

MarketTaskInfo* MarketTaskInfo::New() const {
  return new MarketTaskInfo;
}

void MarketTaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_openid()) {
      if (openid_ != &::google::protobuf::internal::kEmptyString) {
        openid_->clear();
      }
    }
  }
  taskinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool MarketTaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string openid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_openid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->openid().data(), this->openid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_taskinfo;
        break;
      }

      // repeated .TencentInfo.TaskInfo taskinfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_taskinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_taskinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_taskinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void MarketTaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->openid(), output);
  }

  // repeated .TencentInfo.TaskInfo taskinfo = 2;
  for (int i = 0; i < this->taskinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->taskinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* MarketTaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string openid = 1;
  if (has_openid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->openid().data(), this->openid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->openid(), target);
  }

  // repeated .TencentInfo.TaskInfo taskinfo = 2;
  for (int i = 0; i < this->taskinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->taskinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int MarketTaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string openid = 1;
    if (has_openid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->openid());
    }

  }
  // repeated .TencentInfo.TaskInfo taskinfo = 2;
  total_size += 1 * this->taskinfo_size();
  for (int i = 0; i < this->taskinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->taskinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void MarketTaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const MarketTaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const MarketTaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void MarketTaskInfo::MergeFrom(const MarketTaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  taskinfo_.MergeFrom(from.taskinfo_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_openid()) {
      set_openid(from.openid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void MarketTaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MarketTaskInfo::CopyFrom(const MarketTaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MarketTaskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < taskinfo_size(); i++) {
    if (!this->taskinfo(i).IsInitialized()) return false;
  }
  return true;
}

void MarketTaskInfo::Swap(MarketTaskInfo* other) {
  if (other != this) {
    std::swap(openid_, other->openid_);
    taskinfo_.Swap(&other->taskinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata MarketTaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = MarketTaskInfo_descriptor_;
  metadata.reflection = MarketTaskInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int TaskInfo::kTaskIdFieldNumber;
const int TaskInfo::kStep1FieldNumber;
const int TaskInfo::kStep2FieldNumber;
const int TaskInfo::kStep3FieldNumber;
const int TaskInfo::kStep4FieldNumber;
#endif  // !_MSC_VER

TaskInfo::TaskInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void TaskInfo::InitAsDefaultInstance() {
}

TaskInfo::TaskInfo(const TaskInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void TaskInfo::SharedCtor() {
  _cached_size_ = 0;
  taskid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  step1_ = false;
  step2_ = false;
  step3_ = false;
  step4_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

TaskInfo::~TaskInfo() {
  SharedDtor();
}

void TaskInfo::SharedDtor() {
  if (taskid_ != &::google::protobuf::internal::kEmptyString) {
    delete taskid_;
  }
  if (this != default_instance_) {
  }
}

void TaskInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* TaskInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return TaskInfo_descriptor_;
}

const TaskInfo& TaskInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Pay_2fTencent_2eproto();
  return *default_instance_;
}

TaskInfo* TaskInfo::default_instance_ = NULL;

TaskInfo* TaskInfo::New() const {
  return new TaskInfo;
}

void TaskInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_taskid()) {
      if (taskid_ != &::google::protobuf::internal::kEmptyString) {
        taskid_->clear();
      }
    }
    step1_ = false;
    step2_ = false;
    step3_ = false;
    step4_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool TaskInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required string taskId = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadString(
                input, this->mutable_taskid()));
          ::google::protobuf::internal::WireFormat::VerifyUTF8String(
            this->taskid().data(), this->taskid().length(),
            ::google::protobuf::internal::WireFormat::PARSE);
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_step1;
        break;
      }

      // optional bool step1 = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step1:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &step1_)));
          set_has_step1();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_step2;
        break;
      }

      // optional bool step2 = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step2:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &step2_)));
          set_has_step2();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_step3;
        break;
      }

      // optional bool step3 = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step3:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &step3_)));
          set_has_step3();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_step4;
        break;
      }

      // optional bool step4 = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_step4:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &step4_)));
          set_has_step4();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void TaskInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required string taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    ::google::protobuf::internal::WireFormatLite::WriteString(
      1, this->taskid(), output);
  }

  // optional bool step1 = 2;
  if (has_step1()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->step1(), output);
  }

  // optional bool step2 = 3;
  if (has_step2()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->step2(), output);
  }

  // optional bool step3 = 4;
  if (has_step3()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(4, this->step3(), output);
  }

  // optional bool step4 = 5;
  if (has_step4()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(5, this->step4(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* TaskInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required string taskId = 1;
  if (has_taskid()) {
    ::google::protobuf::internal::WireFormat::VerifyUTF8String(
      this->taskid().data(), this->taskid().length(),
      ::google::protobuf::internal::WireFormat::SERIALIZE);
    target =
      ::google::protobuf::internal::WireFormatLite::WriteStringToArray(
        1, this->taskid(), target);
  }

  // optional bool step1 = 2;
  if (has_step1()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->step1(), target);
  }

  // optional bool step2 = 3;
  if (has_step2()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->step2(), target);
  }

  // optional bool step3 = 4;
  if (has_step3()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(4, this->step3(), target);
  }

  // optional bool step4 = 5;
  if (has_step4()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(5, this->step4(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int TaskInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required string taskId = 1;
    if (has_taskid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::StringSize(
          this->taskid());
    }

    // optional bool step1 = 2;
    if (has_step1()) {
      total_size += 1 + 1;
    }

    // optional bool step2 = 3;
    if (has_step2()) {
      total_size += 1 + 1;
    }

    // optional bool step3 = 4;
    if (has_step3()) {
      total_size += 1 + 1;
    }

    // optional bool step4 = 5;
    if (has_step4()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void TaskInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const TaskInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const TaskInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void TaskInfo::MergeFrom(const TaskInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_taskid()) {
      set_taskid(from.taskid());
    }
    if (from.has_step1()) {
      set_step1(from.step1());
    }
    if (from.has_step2()) {
      set_step2(from.step2());
    }
    if (from.has_step3()) {
      set_step3(from.step3());
    }
    if (from.has_step4()) {
      set_step4(from.step4());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void TaskInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void TaskInfo::CopyFrom(const TaskInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool TaskInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void TaskInfo::Swap(TaskInfo* other) {
  if (other != this) {
    std::swap(taskid_, other->taskid_);
    std::swap(step1_, other->step1_);
    std::swap(step2_, other->step2_);
    std::swap(step3_, other->step3_);
    std::swap(step4_, other->step4_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata TaskInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = TaskInfo_descriptor_;
  metadata.reflection = TaskInfo_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace TencentInfo

// @@protoc_insertion_point(global_scope)
