// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Seabeach/Seabeach.proto

#ifndef PROTOBUF_Seabeach_2fSeabeach_2eproto__INCLUDED
#define PROTOBUF_Seabeach_2fSeabeach_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)

namespace SeabeachProto {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
void protobuf_AssignDesc_Seabeach_2fSeabeach_2eproto();
void protobuf_ShutdownFile_Seabeach_2fSeabeach_2eproto();

class AckSeabeachInfo;
class ReqJump;
class AckJump;
class JumpInfo;
class ReqGather;
class AckGather;
class GatherResult;
class GatherFail;
class AckLeaveObject;
class PlayerLeaveObject;
class IncomeChange;

// ===================================================================

class AckSeabeachInfo : public ::google::protobuf::Message {
 public:
  AckSeabeachInfo();
  virtual ~AckSeabeachInfo();

  AckSeabeachInfo(const AckSeabeachInfo& from);

  inline AckSeabeachInfo& operator=(const AckSeabeachInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckSeabeachInfo& default_instance();

  void Swap(AckSeabeachInfo* other);

  // implements Message ----------------------------------------------

  AckSeabeachInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckSeabeachInfo& from);
  void MergeFrom(const AckSeabeachInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional int64 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::int64 mapid() const;
  inline void set_mapid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:SeabeachProto.AckSeabeachInfo)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 mapid_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_AssignDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_ShutdownFile_Seabeach_2fSeabeach_2eproto();

  void InitAsDefaultInstance();
  static AckSeabeachInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqJump : public ::google::protobuf::Message {
 public:
  ReqJump();
  virtual ~ReqJump();

  ReqJump(const ReqJump& from);

  inline ReqJump& operator=(const ReqJump& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqJump& default_instance();

  void Swap(ReqJump* other);

  // implements Message ----------------------------------------------

  ReqJump* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqJump& from);
  void MergeFrom(const ReqJump& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SeabeachProto.ReqJump)
 private:
  inline void set_has_id();
  inline void clear_has_id();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_AssignDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_ShutdownFile_Seabeach_2fSeabeach_2eproto();

  void InitAsDefaultInstance();
  static ReqJump* default_instance_;
};
// -------------------------------------------------------------------

class AckJump : public ::google::protobuf::Message {
 public:
  AckJump();
  virtual ~AckJump();

  AckJump(const AckJump& from);

  inline AckJump& operator=(const AckJump& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckJump& default_instance();

  void Swap(AckJump* other);

  // implements Message ----------------------------------------------

  AckJump* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckJump& from);
  void MergeFrom(const AckJump& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SeabeachProto.AckJump)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_AssignDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_ShutdownFile_Seabeach_2fSeabeach_2eproto();

  void InitAsDefaultInstance();
  static AckJump* default_instance_;
};
// -------------------------------------------------------------------

class JumpInfo : public ::google::protobuf::Message {
 public:
  JumpInfo();
  virtual ~JumpInfo();

  JumpInfo(const JumpInfo& from);

  inline JumpInfo& operator=(const JumpInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const JumpInfo& default_instance();

  void Swap(JumpInfo* other);

  // implements Message ----------------------------------------------

  JumpInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const JumpInfo& from);
  void MergeFrom(const JumpInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // optional int32 xpos = 2;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXposFieldNumber = 2;
  inline ::google::protobuf::int32 xpos() const;
  inline void set_xpos(::google::protobuf::int32 value);

  // optional int32 ypos = 3;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYposFieldNumber = 3;
  inline ::google::protobuf::int32 ypos() const;
  inline void set_ypos(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SeabeachProto.JumpInfo)
 private:
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 xpos_;
  ::google::protobuf::int32 ypos_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_AssignDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_ShutdownFile_Seabeach_2fSeabeach_2eproto();

  void InitAsDefaultInstance();
  static JumpInfo* default_instance_;
};
// -------------------------------------------------------------------

class ReqGather : public ::google::protobuf::Message {
 public:
  ReqGather();
  virtual ~ReqGather();

  ReqGather(const ReqGather& from);

  inline ReqGather& operator=(const ReqGather& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqGather& default_instance();

  void Swap(ReqGather* other);

  // implements Message ----------------------------------------------

  ReqGather* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqGather& from);
  void MergeFrom(const ReqGather& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 objkey = 1;
  inline bool has_objkey() const;
  inline void clear_objkey();
  static const int kObjkeyFieldNumber = 1;
  inline ::google::protobuf::int32 objkey() const;
  inline void set_objkey(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SeabeachProto.ReqGather)
 private:
  inline void set_has_objkey();
  inline void clear_has_objkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 objkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_AssignDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_ShutdownFile_Seabeach_2fSeabeach_2eproto();

  void InitAsDefaultInstance();
  static ReqGather* default_instance_;
};
// -------------------------------------------------------------------

class AckGather : public ::google::protobuf::Message {
 public:
  AckGather();
  virtual ~AckGather();

  AckGather(const AckGather& from);

  inline AckGather& operator=(const AckGather& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckGather& default_instance();

  void Swap(AckGather* other);

  // implements Message ----------------------------------------------

  AckGather* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckGather& from);
  void MergeFrom(const AckGather& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // optional int32 objkey = 2;
  inline bool has_objkey() const;
  inline void clear_objkey();
  static const int kObjkeyFieldNumber = 2;
  inline ::google::protobuf::int32 objkey() const;
  inline void set_objkey(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SeabeachProto.AckGather)
 private:
  inline void set_has_code();
  inline void clear_has_code();
  inline void set_has_objkey();
  inline void clear_has_objkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 code_;
  ::google::protobuf::int32 objkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_AssignDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_ShutdownFile_Seabeach_2fSeabeach_2eproto();

  void InitAsDefaultInstance();
  static AckGather* default_instance_;
};
// -------------------------------------------------------------------

class GatherResult : public ::google::protobuf::Message {
 public:
  GatherResult();
  virtual ~GatherResult();

  GatherResult(const GatherResult& from);

  inline GatherResult& operator=(const GatherResult& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GatherResult& default_instance();

  void Swap(GatherResult* other);

  // implements Message ----------------------------------------------

  GatherResult* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GatherResult& from);
  void MergeFrom(const GatherResult& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 playerkey = 1;
  inline bool has_playerkey() const;
  inline void clear_playerkey();
  static const int kPlayerkeyFieldNumber = 1;
  inline ::google::protobuf::int32 playerkey() const;
  inline void set_playerkey(::google::protobuf::int32 value);

  // optional int32 objkey = 2;
  inline bool has_objkey() const;
  inline void clear_objkey();
  static const int kObjkeyFieldNumber = 2;
  inline ::google::protobuf::int32 objkey() const;
  inline void set_objkey(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SeabeachProto.GatherResult)
 private:
  inline void set_has_playerkey();
  inline void clear_has_playerkey();
  inline void set_has_objkey();
  inline void clear_has_objkey();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 playerkey_;
  ::google::protobuf::int32 objkey_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_AssignDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_ShutdownFile_Seabeach_2fSeabeach_2eproto();

  void InitAsDefaultInstance();
  static GatherResult* default_instance_;
};
// -------------------------------------------------------------------

class GatherFail : public ::google::protobuf::Message {
 public:
  GatherFail();
  virtual ~GatherFail();

  GatherFail(const GatherFail& from);

  inline GatherFail& operator=(const GatherFail& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GatherFail& default_instance();

  void Swap(GatherFail* other);

  // implements Message ----------------------------------------------

  GatherFail* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GatherFail& from);
  void MergeFrom(const GatherFail& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 objkey = 1;
  inline bool has_objkey() const;
  inline void clear_objkey();
  static const int kObjkeyFieldNumber = 1;
  inline ::google::protobuf::int32 objkey() const;
  inline void set_objkey(::google::protobuf::int32 value);

  // optional int32 code = 2;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 2;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SeabeachProto.GatherFail)
 private:
  inline void set_has_objkey();
  inline void clear_has_objkey();
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 objkey_;
  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_AssignDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_ShutdownFile_Seabeach_2fSeabeach_2eproto();

  void InitAsDefaultInstance();
  static GatherFail* default_instance_;
};
// -------------------------------------------------------------------

class AckLeaveObject : public ::google::protobuf::Message {
 public:
  AckLeaveObject();
  virtual ~AckLeaveObject();

  AckLeaveObject(const AckLeaveObject& from);

  inline AckLeaveObject& operator=(const AckLeaveObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckLeaveObject& default_instance();

  void Swap(AckLeaveObject* other);

  // implements Message ----------------------------------------------

  AckLeaveObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckLeaveObject& from);
  void MergeFrom(const AckLeaveObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 code = 1;
  inline bool has_code() const;
  inline void clear_code();
  static const int kCodeFieldNumber = 1;
  inline ::google::protobuf::int32 code() const;
  inline void set_code(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SeabeachProto.AckLeaveObject)
 private:
  inline void set_has_code();
  inline void clear_has_code();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 code_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_AssignDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_ShutdownFile_Seabeach_2fSeabeach_2eproto();

  void InitAsDefaultInstance();
  static AckLeaveObject* default_instance_;
};
// -------------------------------------------------------------------

class PlayerLeaveObject : public ::google::protobuf::Message {
 public:
  PlayerLeaveObject();
  virtual ~PlayerLeaveObject();

  PlayerLeaveObject(const PlayerLeaveObject& from);

  inline PlayerLeaveObject& operator=(const PlayerLeaveObject& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PlayerLeaveObject& default_instance();

  void Swap(PlayerLeaveObject* other);

  // implements Message ----------------------------------------------

  PlayerLeaveObject* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PlayerLeaveObject& from);
  void MergeFrom(const PlayerLeaveObject& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 key = 1;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 1;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SeabeachProto.PlayerLeaveObject)
 private:
  inline void set_has_key();
  inline void clear_has_key();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 key_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_AssignDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_ShutdownFile_Seabeach_2fSeabeach_2eproto();

  void InitAsDefaultInstance();
  static PlayerLeaveObject* default_instance_;
};
// -------------------------------------------------------------------

class IncomeChange : public ::google::protobuf::Message {
 public:
  IncomeChange();
  virtual ~IncomeChange();

  IncomeChange(const IncomeChange& from);

  inline IncomeChange& operator=(const IncomeChange& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const IncomeChange& default_instance();

  void Swap(IncomeChange* other);

  // implements Message ----------------------------------------------

  IncomeChange* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const IncomeChange& from);
  void MergeFrom(const IncomeChange& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 exp = 1;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 1;
  inline ::google::protobuf::int32 exp() const;
  inline void set_exp(::google::protobuf::int32 value);

  // optional int32 force = 2;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 2;
  inline ::google::protobuf::int32 force() const;
  inline void set_force(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:SeabeachProto.IncomeChange)
 private:
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_force();
  inline void clear_has_force();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 exp_;
  ::google::protobuf::int32 force_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_AssignDesc_Seabeach_2fSeabeach_2eproto();
  friend void protobuf_ShutdownFile_Seabeach_2fSeabeach_2eproto();

  void InitAsDefaultInstance();
  static IncomeChange* default_instance_;
};
// ===================================================================


// ===================================================================

// AckSeabeachInfo

// required int32 code = 1;
inline bool AckSeabeachInfo::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckSeabeachInfo::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckSeabeachInfo::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckSeabeachInfo::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 AckSeabeachInfo::code() const {
  return code_;
}
inline void AckSeabeachInfo::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional int64 mapid = 2;
inline bool AckSeabeachInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckSeabeachInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckSeabeachInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckSeabeachInfo::clear_mapid() {
  mapid_ = GOOGLE_LONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::int64 AckSeabeachInfo::mapid() const {
  return mapid_;
}
inline void AckSeabeachInfo::set_mapid(::google::protobuf::int64 value) {
  set_has_mapid();
  mapid_ = value;
}

// -------------------------------------------------------------------

// ReqJump

// required int32 id = 1;
inline bool ReqJump::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqJump::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqJump::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqJump::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ReqJump::id() const {
  return id_;
}
inline void ReqJump::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// -------------------------------------------------------------------

// AckJump

// required int32 code = 1;
inline bool AckJump::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckJump::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckJump::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckJump::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 AckJump::code() const {
  return code_;
}
inline void AckJump::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// -------------------------------------------------------------------

// JumpInfo

// required int32 key = 1;
inline bool JumpInfo::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void JumpInfo::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void JumpInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void JumpInfo::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 JumpInfo::key() const {
  return key_;
}
inline void JumpInfo::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// optional int32 xpos = 2;
inline bool JumpInfo::has_xpos() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void JumpInfo::set_has_xpos() {
  _has_bits_[0] |= 0x00000002u;
}
inline void JumpInfo::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void JumpInfo::clear_xpos() {
  xpos_ = 0;
  clear_has_xpos();
}
inline ::google::protobuf::int32 JumpInfo::xpos() const {
  return xpos_;
}
inline void JumpInfo::set_xpos(::google::protobuf::int32 value) {
  set_has_xpos();
  xpos_ = value;
}

// optional int32 ypos = 3;
inline bool JumpInfo::has_ypos() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void JumpInfo::set_has_ypos() {
  _has_bits_[0] |= 0x00000004u;
}
inline void JumpInfo::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void JumpInfo::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline ::google::protobuf::int32 JumpInfo::ypos() const {
  return ypos_;
}
inline void JumpInfo::set_ypos(::google::protobuf::int32 value) {
  set_has_ypos();
  ypos_ = value;
}

// -------------------------------------------------------------------

// ReqGather

// required int32 objkey = 1;
inline bool ReqGather::has_objkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqGather::set_has_objkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqGather::clear_has_objkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqGather::clear_objkey() {
  objkey_ = 0;
  clear_has_objkey();
}
inline ::google::protobuf::int32 ReqGather::objkey() const {
  return objkey_;
}
inline void ReqGather::set_objkey(::google::protobuf::int32 value) {
  set_has_objkey();
  objkey_ = value;
}

// -------------------------------------------------------------------

// AckGather

// required int32 code = 1;
inline bool AckGather::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckGather::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckGather::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckGather::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 AckGather::code() const {
  return code_;
}
inline void AckGather::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// optional int32 objkey = 2;
inline bool AckGather::has_objkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AckGather::set_has_objkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AckGather::clear_has_objkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AckGather::clear_objkey() {
  objkey_ = 0;
  clear_has_objkey();
}
inline ::google::protobuf::int32 AckGather::objkey() const {
  return objkey_;
}
inline void AckGather::set_objkey(::google::protobuf::int32 value) {
  set_has_objkey();
  objkey_ = value;
}

// -------------------------------------------------------------------

// GatherResult

// required int32 playerkey = 1;
inline bool GatherResult::has_playerkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GatherResult::set_has_playerkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GatherResult::clear_has_playerkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GatherResult::clear_playerkey() {
  playerkey_ = 0;
  clear_has_playerkey();
}
inline ::google::protobuf::int32 GatherResult::playerkey() const {
  return playerkey_;
}
inline void GatherResult::set_playerkey(::google::protobuf::int32 value) {
  set_has_playerkey();
  playerkey_ = value;
}

// optional int32 objkey = 2;
inline bool GatherResult::has_objkey() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GatherResult::set_has_objkey() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GatherResult::clear_has_objkey() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GatherResult::clear_objkey() {
  objkey_ = 0;
  clear_has_objkey();
}
inline ::google::protobuf::int32 GatherResult::objkey() const {
  return objkey_;
}
inline void GatherResult::set_objkey(::google::protobuf::int32 value) {
  set_has_objkey();
  objkey_ = value;
}

// -------------------------------------------------------------------

// GatherFail

// required int32 objkey = 1;
inline bool GatherFail::has_objkey() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GatherFail::set_has_objkey() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GatherFail::clear_has_objkey() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GatherFail::clear_objkey() {
  objkey_ = 0;
  clear_has_objkey();
}
inline ::google::protobuf::int32 GatherFail::objkey() const {
  return objkey_;
}
inline void GatherFail::set_objkey(::google::protobuf::int32 value) {
  set_has_objkey();
  objkey_ = value;
}

// optional int32 code = 2;
inline bool GatherFail::has_code() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GatherFail::set_has_code() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GatherFail::clear_has_code() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GatherFail::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 GatherFail::code() const {
  return code_;
}
inline void GatherFail::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// -------------------------------------------------------------------

// AckLeaveObject

// required int32 code = 1;
inline bool AckLeaveObject::has_code() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AckLeaveObject::set_has_code() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AckLeaveObject::clear_has_code() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AckLeaveObject::clear_code() {
  code_ = 0;
  clear_has_code();
}
inline ::google::protobuf::int32 AckLeaveObject::code() const {
  return code_;
}
inline void AckLeaveObject::set_code(::google::protobuf::int32 value) {
  set_has_code();
  code_ = value;
}

// -------------------------------------------------------------------

// PlayerLeaveObject

// required int32 key = 1;
inline bool PlayerLeaveObject::has_key() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void PlayerLeaveObject::set_has_key() {
  _has_bits_[0] |= 0x00000001u;
}
inline void PlayerLeaveObject::clear_has_key() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void PlayerLeaveObject::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 PlayerLeaveObject::key() const {
  return key_;
}
inline void PlayerLeaveObject::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// -------------------------------------------------------------------

// IncomeChange

// required int32 exp = 1;
inline bool IncomeChange::has_exp() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void IncomeChange::set_has_exp() {
  _has_bits_[0] |= 0x00000001u;
}
inline void IncomeChange::clear_has_exp() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void IncomeChange::clear_exp() {
  exp_ = 0;
  clear_has_exp();
}
inline ::google::protobuf::int32 IncomeChange::exp() const {
  return exp_;
}
inline void IncomeChange::set_exp(::google::protobuf::int32 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 force = 2;
inline bool IncomeChange::has_force() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void IncomeChange::set_has_force() {
  _has_bits_[0] |= 0x00000002u;
}
inline void IncomeChange::clear_has_force() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void IncomeChange::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 IncomeChange::force() const {
  return force_;
}
inline void IncomeChange::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace SeabeachProto

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_Seabeach_2fSeabeach_2eproto__INCLUDED
