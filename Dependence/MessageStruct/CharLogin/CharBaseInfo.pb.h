// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: CharLogin/CharBaseInfo.proto

#ifndef PROTOBUF_CharLogin_2fCharBaseInfo_2eproto__INCLUDED
#define PROTOBUF_CharLogin_2fCharBaseInfo_2eproto__INCLUDED

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 2005000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 2005000 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/unknown_field_set.h>
#include "CharLogin/PlayerInfo.pb.h"
// @@protoc_insertion_point(includes)

namespace CharLogin {

// Internal implementation detail -- do not call these.
void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

class POneTalentSkill;
class skillInfoPro;
class CharBaseInfo;
class CharCDTime;
class CharQuestInfo;
class CharQuestToGT;
class AckToClientAcceptable;
class AcceptableQuestToGT;
class ClientContainerInfo;
class ToGTContainerInfo;
class EquipQuickInfo;
class PackageInfo;
class StoreHouseInfo;
class ClientItemInfo;
class CharEquip;
class WBaseInfo;
class SynchToWorldInfo;
class SyncMap;
class ReqSeePlayerInfo;
class SeePlayerInfo;
class BeyondPlayerInfo;
class GMGetWSAckData;
class GMGetWSRequestData;
class ActivityStateList;
class ActivityState;

// ===================================================================

class POneTalentSkill : public ::google::protobuf::Message {
 public:
  POneTalentSkill();
  virtual ~POneTalentSkill();

  POneTalentSkill(const POneTalentSkill& from);

  inline POneTalentSkill& operator=(const POneTalentSkill& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const POneTalentSkill& default_instance();

  void Swap(POneTalentSkill* other);

  // implements Message ----------------------------------------------

  POneTalentSkill* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const POneTalentSkill& from);
  void MergeFrom(const POneTalentSkill& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 talentID = 1;
  inline bool has_talentid() const;
  inline void clear_talentid();
  static const int kTalentIDFieldNumber = 1;
  inline ::google::protobuf::int32 talentid() const;
  inline void set_talentid(::google::protobuf::int32 value);

  // repeated int32 skillList = 2;
  inline int skilllist_size() const;
  inline void clear_skilllist();
  static const int kSkillListFieldNumber = 2;
  inline ::google::protobuf::int32 skilllist(int index) const;
  inline void set_skilllist(int index, ::google::protobuf::int32 value);
  inline void add_skilllist(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      skilllist() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_skilllist();

  // @@protoc_insertion_point(class_scope:CharLogin.POneTalentSkill)
 private:
  inline void set_has_talentid();
  inline void clear_has_talentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > skilllist_;
  ::google::protobuf::int32 talentid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static POneTalentSkill* default_instance_;
};
// -------------------------------------------------------------------

class skillInfoPro : public ::google::protobuf::Message {
 public:
  skillInfoPro();
  virtual ~skillInfoPro();

  skillInfoPro(const skillInfoPro& from);

  inline skillInfoPro& operator=(const skillInfoPro& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const skillInfoPro& default_instance();

  void Swap(skillInfoPro* other);

  // implements Message ----------------------------------------------

  skillInfoPro* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const skillInfoPro& from);
  void MergeFrom(const skillInfoPro& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 currentTalentID = 1;
  inline bool has_currenttalentid() const;
  inline void clear_currenttalentid();
  static const int kCurrentTalentIDFieldNumber = 1;
  inline ::google::protobuf::int32 currenttalentid() const;
  inline void set_currenttalentid(::google::protobuf::int32 value);

  // repeated .CharLogin.POneTalentSkill talents = 2;
  inline int talents_size() const;
  inline void clear_talents();
  static const int kTalentsFieldNumber = 2;
  inline const ::CharLogin::POneTalentSkill& talents(int index) const;
  inline ::CharLogin::POneTalentSkill* mutable_talents(int index);
  inline ::CharLogin::POneTalentSkill* add_talents();
  inline const ::google::protobuf::RepeatedPtrField< ::CharLogin::POneTalentSkill >&
      talents() const;
  inline ::google::protobuf::RepeatedPtrField< ::CharLogin::POneTalentSkill >*
      mutable_talents();

  // @@protoc_insertion_point(class_scope:CharLogin.skillInfoPro)
 private:
  inline void set_has_currenttalentid();
  inline void clear_has_currenttalentid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CharLogin::POneTalentSkill > talents_;
  ::google::protobuf::int32 currenttalentid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static skillInfoPro* default_instance_;
};
// -------------------------------------------------------------------

class CharBaseInfo : public ::google::protobuf::Message {
 public:
  CharBaseInfo();
  virtual ~CharBaseInfo();

  CharBaseInfo(const CharBaseInfo& from);

  inline CharBaseInfo& operator=(const CharBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharBaseInfo& default_instance();

  void Swap(CharBaseInfo* other);

  // implements Message ----------------------------------------------

  CharBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharBaseInfo& from);
  void MergeFrom(const CharBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required int32 key = 2;
  inline bool has_key() const;
  inline void clear_key();
  static const int kKeyFieldNumber = 2;
  inline ::google::protobuf::int32 key() const;
  inline void set_key(::google::protobuf::int32 value);

  // required string name = 3;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 3;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // required int32 level = 4;
  inline bool has_level() const;
  inline void clear_level();
  static const int kLevelFieldNumber = 4;
  inline ::google::protobuf::int32 level() const;
  inline void set_level(::google::protobuf::int32 value);

  // required int32 hp = 5;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 5;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required int32 hpmax = 6;
  inline bool has_hpmax() const;
  inline void clear_hpmax();
  static const int kHpmaxFieldNumber = 6;
  inline ::google::protobuf::int32 hpmax() const;
  inline void set_hpmax(::google::protobuf::int32 value);

  // required int32 mp = 7;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 7;
  inline ::google::protobuf::int32 mp() const;
  inline void set_mp(::google::protobuf::int32 value);

  // required int32 mpmax = 8;
  inline bool has_mpmax() const;
  inline void clear_mpmax();
  static const int kMpmaxFieldNumber = 8;
  inline ::google::protobuf::int32 mpmax() const;
  inline void set_mpmax(::google::protobuf::int32 value);

  // required int64 mapid = 9;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 9;
  inline ::google::protobuf::int64 mapid() const;
  inline void set_mapid(::google::protobuf::int64 value);

  // required int32 xpos = 10;
  inline bool has_xpos() const;
  inline void clear_xpos();
  static const int kXposFieldNumber = 10;
  inline ::google::protobuf::int32 xpos() const;
  inline void set_xpos(::google::protobuf::int32 value);

  // required int32 ypos = 11;
  inline bool has_ypos() const;
  inline void clear_ypos();
  static const int kYposFieldNumber = 11;
  inline ::google::protobuf::int32 ypos() const;
  inline void set_ypos(::google::protobuf::int32 value);

  // required int64 exp = 12;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 12;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // required int32 country = 13;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 13;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // required int32 faction = 14;
  inline bool has_faction() const;
  inline void clear_faction();
  static const int kFactionFieldNumber = 14;
  inline ::google::protobuf::int32 faction() const;
  inline void set_faction(::google::protobuf::int32 value);

  // required int32 sex = 15;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 15;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // required int32 profession = 16;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 16;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // required int32 force = 17;
  inline bool has_force() const;
  inline void clear_force();
  static const int kForceFieldNumber = 17;
  inline ::google::protobuf::int32 force() const;
  inline void set_force(::google::protobuf::int32 value);

  // required int32 forcemax = 18;
  inline bool has_forcemax() const;
  inline void clear_forcemax();
  static const int kForcemaxFieldNumber = 18;
  inline ::google::protobuf::int32 forcemax() const;
  inline void set_forcemax(::google::protobuf::int32 value);

  // required int32 movespeed = 19;
  inline bool has_movespeed() const;
  inline void clear_movespeed();
  static const int kMovespeedFieldNumber = 19;
  inline ::google::protobuf::int32 movespeed() const;
  inline void set_movespeed(::google::protobuf::int32 value);

  // optional .CharLogin.EquipQuickInfo nowequip = 20;
  inline bool has_nowequip() const;
  inline void clear_nowequip();
  static const int kNowequipFieldNumber = 20;
  inline const ::CharLogin::EquipQuickInfo& nowequip() const;
  inline ::CharLogin::EquipQuickInfo* mutable_nowequip();
  inline ::CharLogin::EquipQuickInfo* release_nowequip();
  inline void set_allocated_nowequip(::CharLogin::EquipQuickInfo* nowequip);

  // optional .CharLogin.skillInfoPro skillinfo = 21;
  inline bool has_skillinfo() const;
  inline void clear_skillinfo();
  static const int kSkillinfoFieldNumber = 21;
  inline const ::CharLogin::skillInfoPro& skillinfo() const;
  inline ::CharLogin::skillInfoPro* mutable_skillinfo();
  inline ::CharLogin::skillInfoPro* release_skillinfo();
  inline void set_allocated_skillinfo(::CharLogin::skillInfoPro* skillinfo);

  // repeated .CharLogin.CharCDTime cd = 22;
  inline int cd_size() const;
  inline void clear_cd();
  static const int kCdFieldNumber = 22;
  inline const ::CharLogin::CharCDTime& cd(int index) const;
  inline ::CharLogin::CharCDTime* mutable_cd(int index);
  inline ::CharLogin::CharCDTime* add_cd();
  inline const ::google::protobuf::RepeatedPtrField< ::CharLogin::CharCDTime >&
      cd() const;
  inline ::google::protobuf::RepeatedPtrField< ::CharLogin::CharCDTime >*
      mutable_cd();

  // optional .PlayerInfo.MonitorInfo mt = 23;
  inline bool has_mt() const;
  inline void clear_mt();
  static const int kMtFieldNumber = 23;
  inline const ::PlayerInfo::MonitorInfo& mt() const;
  inline ::PlayerInfo::MonitorInfo* mutable_mt();
  inline ::PlayerInfo::MonitorInfo* release_mt();
  inline void set_allocated_mt(::PlayerInfo::MonitorInfo* mt);

  // optional uint32 horse = 24;
  inline bool has_horse() const;
  inline void clear_horse();
  static const int kHorseFieldNumber = 24;
  inline ::google::protobuf::uint32 horse() const;
  inline void set_horse(::google::protobuf::uint32 value);

  // optional int32 sinvalue = 25;
  inline bool has_sinvalue() const;
  inline void clear_sinvalue();
  static const int kSinvalueFieldNumber = 25;
  inline ::google::protobuf::int32 sinvalue() const;
  inline void set_sinvalue(::google::protobuf::int32 value);

  // optional int32 acupoint = 26;
  inline bool has_acupoint() const;
  inline void clear_acupoint();
  static const int kAcupointFieldNumber = 26;
  inline ::google::protobuf::int32 acupoint() const;
  inline void set_acupoint(::google::protobuf::int32 value);

  // optional .PlayerInfo.SettingInfo settings = 27;
  inline bool has_settings() const;
  inline void clear_settings();
  static const int kSettingsFieldNumber = 27;
  inline const ::PlayerInfo::SettingInfo& settings() const;
  inline ::PlayerInfo::SettingInfo* mutable_settings();
  inline ::PlayerInfo::SettingInfo* release_settings();
  inline void set_allocated_settings(::PlayerInfo::SettingInfo* settings);

  // optional double loginTime = 28;
  inline bool has_logintime() const;
  inline void clear_logintime();
  static const int kLoginTimeFieldNumber = 28;
  inline double logintime() const;
  inline void set_logintime(double value);

  // optional int32 fightPower = 29;
  inline bool has_fightpower() const;
  inline void clear_fightpower();
  static const int kFightPowerFieldNumber = 29;
  inline ::google::protobuf::int32 fightpower() const;
  inline void set_fightpower(::google::protobuf::int32 value);

  // optional int32 titleId = 30;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleIdFieldNumber = 30;
  inline ::google::protobuf::int32 titleid() const;
  inline void set_titleid(::google::protobuf::int32 value);

  // optional int32 viplv = 31;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kViplvFieldNumber = 31;
  inline ::google::protobuf::int32 viplv() const;
  inline void set_viplv(::google::protobuf::int32 value);

  // optional int32 addupgold = 32;
  inline bool has_addupgold() const;
  inline void clear_addupgold();
  static const int kAddupgoldFieldNumber = 32;
  inline ::google::protobuf::int32 addupgold() const;
  inline void set_addupgold(::google::protobuf::int32 value);

  // optional int64 isininstance = 33;
  inline bool has_isininstance() const;
  inline void clear_isininstance();
  static const int kIsininstanceFieldNumber = 33;
  inline ::google::protobuf::int64 isininstance() const;
  inline void set_isininstance(::google::protobuf::int64 value);

  // optional int32 job = 34;
  inline bool has_job() const;
  inline void clear_job();
  static const int kJobFieldNumber = 34;
  inline ::google::protobuf::int32 job() const;
  inline void set_job(::google::protobuf::int32 value);

  // optional string clanname = 35;
  inline bool has_clanname() const;
  inline void clear_clanname();
  static const int kClannameFieldNumber = 35;
  inline const ::std::string& clanname() const;
  inline void set_clanname(const ::std::string& value);
  inline void set_clanname(const char* value);
  inline void set_clanname(const char* value, size_t size);
  inline ::std::string* mutable_clanname();
  inline ::std::string* release_clanname();
  inline void set_allocated_clanname(::std::string* clanname);

  // optional int32 AntiAddictionState = 36;
  inline bool has_antiaddictionstate() const;
  inline void clear_antiaddictionstate();
  static const int kAntiAddictionStateFieldNumber = 36;
  inline ::google::protobuf::int32 antiaddictionstate() const;
  inline void set_antiaddictionstate(::google::protobuf::int32 value);

  // optional int32 AntiAddictionOnLineTime = 37;
  inline bool has_antiaddictiononlinetime() const;
  inline void clear_antiaddictiononlinetime();
  static const int kAntiAddictionOnLineTimeFieldNumber = 37;
  inline ::google::protobuf::int32 antiaddictiononlinetime() const;
  inline void set_antiaddictiononlinetime(::google::protobuf::int32 value);

  // optional int32 pkType = 38;
  inline bool has_pktype() const;
  inline void clear_pktype();
  static const int kPkTypeFieldNumber = 38;
  inline ::google::protobuf::int32 pktype() const;
  inline void set_pktype(::google::protobuf::int32 value);

  // optional double totalOnlineTime = 39;
  inline bool has_totalonlinetime() const;
  inline void clear_totalonlinetime();
  static const int kTotalOnlineTimeFieldNumber = 39;
  inline double totalonlinetime() const;
  inline void set_totalonlinetime(double value);

  // optional int32 clanicon = 40;
  inline bool has_clanicon() const;
  inline void clear_clanicon();
  static const int kClaniconFieldNumber = 40;
  inline ::google::protobuf::int32 clanicon() const;
  inline void set_clanicon(::google::protobuf::int32 value);

  // optional int32 money = 41;
  inline bool has_money() const;
  inline void clear_money();
  static const int kMoneyFieldNumber = 41;
  inline ::google::protobuf::int32 money() const;
  inline void set_money(::google::protobuf::int32 value);

  // optional int32 gold = 42;
  inline bool has_gold() const;
  inline void clear_gold();
  static const int kGoldFieldNumber = 42;
  inline ::google::protobuf::int32 gold() const;
  inline void set_gold(::google::protobuf::int32 value);

  // optional int32 bgold = 43;
  inline bool has_bgold() const;
  inline void clear_bgold();
  static const int kBgoldFieldNumber = 43;
  inline ::google::protobuf::int32 bgold() const;
  inline void set_bgold(::google::protobuf::int32 value);

  // optional int32 fashionID = 44;
  inline bool has_fashionid() const;
  inline void clear_fashionid();
  static const int kFashionIDFieldNumber = 44;
  inline ::google::protobuf::int32 fashionid() const;
  inline void set_fashionid(::google::protobuf::int32 value);

  // optional int32 rechargeState = 45;
  inline bool has_rechargestate() const;
  inline void clear_rechargestate();
  static const int kRechargeStateFieldNumber = 45;
  inline ::google::protobuf::int32 rechargestate() const;
  inline void set_rechargestate(::google::protobuf::int32 value);

  // optional int64 coupleID = 46;
  inline bool has_coupleid() const;
  inline void clear_coupleid();
  static const int kCoupleIDFieldNumber = 46;
  inline ::google::protobuf::int64 coupleid() const;
  inline void set_coupleid(::google::protobuf::int64 value);

  // optional int32 countryjob = 47;
  inline bool has_countryjob() const;
  inline void clear_countryjob();
  static const int kCountryjobFieldNumber = 47;
  inline ::google::protobuf::int32 countryjob() const;
  inline void set_countryjob(::google::protobuf::int32 value);

  // optional int32 contrycontribute = 48;
  inline bool has_contrycontribute() const;
  inline void clear_contrycontribute();
  static const int kContrycontributeFieldNumber = 48;
  inline ::google::protobuf::int32 contrycontribute() const;
  inline void set_contrycontribute(::google::protobuf::int32 value);

  // optional int32 envelopeCount = 49;
  inline bool has_envelopecount() const;
  inline void clear_envelopecount();
  static const int kEnvelopeCountFieldNumber = 49;
  inline ::google::protobuf::int32 envelopecount() const;
  inline void set_envelopecount(::google::protobuf::int32 value);

  // optional int32 credit = 50;
  inline bool has_credit() const;
  inline void clear_credit();
  static const int kCreditFieldNumber = 50;
  inline ::google::protobuf::int32 credit() const;
  inline void set_credit(::google::protobuf::int32 value);

  // optional int32 is_yellow_vip = 51;
  inline bool has_is_yellow_vip() const;
  inline void clear_is_yellow_vip();
  static const int kIsYellowVipFieldNumber = 51;
  inline ::google::protobuf::int32 is_yellow_vip() const;
  inline void set_is_yellow_vip(::google::protobuf::int32 value);

  // optional int32 is_yellow_year_vip = 52;
  inline bool has_is_yellow_year_vip() const;
  inline void clear_is_yellow_year_vip();
  static const int kIsYellowYearVipFieldNumber = 52;
  inline ::google::protobuf::int32 is_yellow_year_vip() const;
  inline void set_is_yellow_year_vip(::google::protobuf::int32 value);

  // optional int32 yellow_vip_level = 53;
  inline bool has_yellow_vip_level() const;
  inline void clear_yellow_vip_level();
  static const int kYellowVipLevelFieldNumber = 53;
  inline ::google::protobuf::int32 yellow_vip_level() const;
  inline void set_yellow_vip_level(::google::protobuf::int32 value);

  // optional int32 is_yellow_high_vip = 54;
  inline bool has_is_yellow_high_vip() const;
  inline void clear_is_yellow_high_vip();
  static const int kIsYellowHighVipFieldNumber = 54;
  inline ::google::protobuf::int32 is_yellow_high_vip() const;
  inline void set_is_yellow_high_vip(::google::protobuf::int32 value);

  // optional int32 vipCardLv = 55;
  inline bool has_vipcardlv() const;
  inline void clear_vipcardlv();
  static const int kVipCardLvFieldNumber = 55;
  inline ::google::protobuf::int32 vipcardlv() const;
  inline void set_vipcardlv(::google::protobuf::int32 value);

  // optional int64 vipCardTime = 56;
  inline bool has_vipcardtime() const;
  inline void clear_vipcardtime();
  static const int kVipCardTimeFieldNumber = 56;
  inline ::google::protobuf::int64 vipcardtime() const;
  inline void set_vipcardtime(::google::protobuf::int64 value);

  // optional string coupleName = 57;
  inline bool has_couplename() const;
  inline void clear_couplename();
  static const int kCoupleNameFieldNumber = 57;
  inline const ::std::string& couplename() const;
  inline void set_couplename(const ::std::string& value);
  inline void set_couplename(const char* value);
  inline void set_couplename(const char* value, size_t size);
  inline ::std::string* mutable_couplename();
  inline ::std::string* release_couplename();
  inline void set_allocated_couplename(::std::string* couplename);

  // optional int32 guide = 58;
  inline bool has_guide() const;
  inline void clear_guide();
  static const int kGuideFieldNumber = 58;
  inline ::google::protobuf::int32 guide() const;
  inline void set_guide(::google::protobuf::int32 value);

  // optional int64 challengemoney = 59;
  inline bool has_challengemoney() const;
  inline void clear_challengemoney();
  static const int kChallengemoneyFieldNumber = 59;
  inline ::google::protobuf::int64 challengemoney() const;
  inline void set_challengemoney(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CharLogin.CharBaseInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_key();
  inline void clear_has_key();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_level();
  inline void clear_has_level();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_hpmax();
  inline void clear_has_hpmax();
  inline void set_has_mp();
  inline void clear_has_mp();
  inline void set_has_mpmax();
  inline void clear_has_mpmax();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_xpos();
  inline void clear_has_xpos();
  inline void set_has_ypos();
  inline void clear_has_ypos();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_faction();
  inline void clear_has_faction();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_force();
  inline void clear_has_force();
  inline void set_has_forcemax();
  inline void clear_has_forcemax();
  inline void set_has_movespeed();
  inline void clear_has_movespeed();
  inline void set_has_nowequip();
  inline void clear_has_nowequip();
  inline void set_has_skillinfo();
  inline void clear_has_skillinfo();
  inline void set_has_mt();
  inline void clear_has_mt();
  inline void set_has_horse();
  inline void clear_has_horse();
  inline void set_has_sinvalue();
  inline void clear_has_sinvalue();
  inline void set_has_acupoint();
  inline void clear_has_acupoint();
  inline void set_has_settings();
  inline void clear_has_settings();
  inline void set_has_logintime();
  inline void clear_has_logintime();
  inline void set_has_fightpower();
  inline void clear_has_fightpower();
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_viplv();
  inline void clear_has_viplv();
  inline void set_has_addupgold();
  inline void clear_has_addupgold();
  inline void set_has_isininstance();
  inline void clear_has_isininstance();
  inline void set_has_job();
  inline void clear_has_job();
  inline void set_has_clanname();
  inline void clear_has_clanname();
  inline void set_has_antiaddictionstate();
  inline void clear_has_antiaddictionstate();
  inline void set_has_antiaddictiononlinetime();
  inline void clear_has_antiaddictiononlinetime();
  inline void set_has_pktype();
  inline void clear_has_pktype();
  inline void set_has_totalonlinetime();
  inline void clear_has_totalonlinetime();
  inline void set_has_clanicon();
  inline void clear_has_clanicon();
  inline void set_has_money();
  inline void clear_has_money();
  inline void set_has_gold();
  inline void clear_has_gold();
  inline void set_has_bgold();
  inline void clear_has_bgold();
  inline void set_has_fashionid();
  inline void clear_has_fashionid();
  inline void set_has_rechargestate();
  inline void clear_has_rechargestate();
  inline void set_has_coupleid();
  inline void clear_has_coupleid();
  inline void set_has_countryjob();
  inline void clear_has_countryjob();
  inline void set_has_contrycontribute();
  inline void clear_has_contrycontribute();
  inline void set_has_envelopecount();
  inline void clear_has_envelopecount();
  inline void set_has_credit();
  inline void clear_has_credit();
  inline void set_has_is_yellow_vip();
  inline void clear_has_is_yellow_vip();
  inline void set_has_is_yellow_year_vip();
  inline void clear_has_is_yellow_year_vip();
  inline void set_has_yellow_vip_level();
  inline void clear_has_yellow_vip_level();
  inline void set_has_is_yellow_high_vip();
  inline void clear_has_is_yellow_high_vip();
  inline void set_has_vipcardlv();
  inline void clear_has_vipcardlv();
  inline void set_has_vipcardtime();
  inline void clear_has_vipcardtime();
  inline void set_has_couplename();
  inline void clear_has_couplename();
  inline void set_has_guide();
  inline void clear_has_guide();
  inline void set_has_challengemoney();
  inline void clear_has_challengemoney();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* name_;
  ::google::protobuf::int32 key_;
  ::google::protobuf::int32 level_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 hpmax_;
  ::google::protobuf::int32 mp_;
  ::google::protobuf::int32 mpmax_;
  ::google::protobuf::int64 mapid_;
  ::google::protobuf::int32 xpos_;
  ::google::protobuf::int32 ypos_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 country_;
  ::google::protobuf::int32 faction_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 force_;
  ::google::protobuf::int32 forcemax_;
  ::CharLogin::EquipQuickInfo* nowequip_;
  ::CharLogin::skillInfoPro* skillinfo_;
  ::google::protobuf::int32 movespeed_;
  ::google::protobuf::uint32 horse_;
  ::google::protobuf::RepeatedPtrField< ::CharLogin::CharCDTime > cd_;
  ::PlayerInfo::MonitorInfo* mt_;
  ::google::protobuf::int32 sinvalue_;
  ::google::protobuf::int32 acupoint_;
  ::PlayerInfo::SettingInfo* settings_;
  double logintime_;
  ::google::protobuf::int32 fightpower_;
  ::google::protobuf::int32 titleid_;
  ::google::protobuf::int32 viplv_;
  ::google::protobuf::int32 addupgold_;
  ::google::protobuf::int64 isininstance_;
  ::google::protobuf::int32 job_;
  ::google::protobuf::int32 antiaddictionstate_;
  ::std::string* clanname_;
  ::google::protobuf::int32 antiaddictiononlinetime_;
  ::google::protobuf::int32 pktype_;
  double totalonlinetime_;
  ::google::protobuf::int32 clanicon_;
  ::google::protobuf::int32 money_;
  ::google::protobuf::int32 gold_;
  ::google::protobuf::int32 bgold_;
  ::google::protobuf::int32 fashionid_;
  ::google::protobuf::int32 rechargestate_;
  ::google::protobuf::int64 coupleid_;
  ::google::protobuf::int32 countryjob_;
  ::google::protobuf::int32 contrycontribute_;
  ::google::protobuf::int32 envelopecount_;
  ::google::protobuf::int32 credit_;
  ::google::protobuf::int32 is_yellow_vip_;
  ::google::protobuf::int32 is_yellow_year_vip_;
  ::google::protobuf::int32 yellow_vip_level_;
  ::google::protobuf::int32 is_yellow_high_vip_;
  ::google::protobuf::int64 vipcardtime_;
  ::google::protobuf::int32 vipcardlv_;
  ::google::protobuf::int32 guide_;
  ::std::string* couplename_;
  ::google::protobuf::int64 challengemoney_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(59 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static CharBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class CharCDTime : public ::google::protobuf::Message {
 public:
  CharCDTime();
  virtual ~CharCDTime();

  CharCDTime(const CharCDTime& from);

  inline CharCDTime& operator=(const CharCDTime& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharCDTime& default_instance();

  void Swap(CharCDTime* other);

  // implements Message ----------------------------------------------

  CharCDTime* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharCDTime& from);
  void MergeFrom(const CharCDTime& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // required int32 time = 2;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 2;
  inline ::google::protobuf::int32 time() const;
  inline void set_time(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CharLogin.CharCDTime)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_time();
  inline void clear_has_time();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 time_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static CharCDTime* default_instance_;
};
// -------------------------------------------------------------------

class CharQuestInfo : public ::google::protobuf::Message {
 public:
  CharQuestInfo();
  virtual ~CharQuestInfo();

  CharQuestInfo(const CharQuestInfo& from);

  inline CharQuestInfo& operator=(const CharQuestInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharQuestInfo& default_instance();

  void Swap(CharQuestInfo* other);

  // implements Message ----------------------------------------------

  CharQuestInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharQuestInfo& from);
  void MergeFrom(const CharQuestInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .PlayerInfo.ActiveQuest active = 1;
  inline int active_size() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 1;
  inline const ::PlayerInfo::ActiveQuest& active(int index) const;
  inline ::PlayerInfo::ActiveQuest* mutable_active(int index);
  inline ::PlayerInfo::ActiveQuest* add_active();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ActiveQuest >&
      active() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ActiveQuest >*
      mutable_active();

  // repeated .PlayerInfo.DailyQuest daily = 2;
  inline int daily_size() const;
  inline void clear_daily();
  static const int kDailyFieldNumber = 2;
  inline const ::PlayerInfo::DailyQuest& daily(int index) const;
  inline ::PlayerInfo::DailyQuest* mutable_daily(int index);
  inline ::PlayerInfo::DailyQuest* add_daily();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo::DailyQuest >&
      daily() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo::DailyQuest >*
      mutable_daily();

  // repeated .PlayerInfo.ClanQuest clan = 3;
  inline int clan_size() const;
  inline void clear_clan();
  static const int kClanFieldNumber = 3;
  inline const ::PlayerInfo::ClanQuest& clan(int index) const;
  inline ::PlayerInfo::ClanQuest* mutable_clan(int index);
  inline ::PlayerInfo::ClanQuest* add_clan();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ClanQuest >&
      clan() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ClanQuest >*
      mutable_clan();

  // @@protoc_insertion_point(class_scope:CharLogin.CharQuestInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ActiveQuest > active_;
  ::google::protobuf::RepeatedPtrField< ::PlayerInfo::DailyQuest > daily_;
  ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ClanQuest > clan_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static CharQuestInfo* default_instance_;
};
// -------------------------------------------------------------------

class CharQuestToGT : public ::google::protobuf::Message {
 public:
  CharQuestToGT();
  virtual ~CharQuestToGT();

  CharQuestToGT(const CharQuestToGT& from);

  inline CharQuestToGT& operator=(const CharQuestToGT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharQuestToGT& default_instance();

  void Swap(CharQuestToGT* other);

  // implements Message ----------------------------------------------

  CharQuestToGT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharQuestToGT& from);
  void MergeFrom(const CharQuestToGT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional .CharLogin.CharQuestInfo active = 2;
  inline bool has_active() const;
  inline void clear_active();
  static const int kActiveFieldNumber = 2;
  inline const ::CharLogin::CharQuestInfo& active() const;
  inline ::CharLogin::CharQuestInfo* mutable_active();
  inline ::CharLogin::CharQuestInfo* release_active();
  inline void set_allocated_active(::CharLogin::CharQuestInfo* active);

  // @@protoc_insertion_point(class_scope:CharLogin.CharQuestToGT)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_active();
  inline void clear_has_active();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::CharLogin::CharQuestInfo* active_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static CharQuestToGT* default_instance_;
};
// -------------------------------------------------------------------

class AckToClientAcceptable : public ::google::protobuf::Message {
 public:
  AckToClientAcceptable();
  virtual ~AckToClientAcceptable();

  AckToClientAcceptable(const AckToClientAcceptable& from);

  inline AckToClientAcceptable& operator=(const AckToClientAcceptable& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AckToClientAcceptable& default_instance();

  void Swap(AckToClientAcceptable* other);

  // implements Message ----------------------------------------------

  AckToClientAcceptable* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AckToClientAcceptable& from);
  void MergeFrom(const AckToClientAcceptable& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated int32 questid = 1;
  inline int questid_size() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 1;
  inline ::google::protobuf::int32 questid(int index) const;
  inline void set_questid(int index, ::google::protobuf::int32 value);
  inline void add_questid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      questid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_questid();

  // @@protoc_insertion_point(class_scope:CharLogin.AckToClientAcceptable)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > questid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static AckToClientAcceptable* default_instance_;
};
// -------------------------------------------------------------------

class AcceptableQuestToGT : public ::google::protobuf::Message {
 public:
  AcceptableQuestToGT();
  virtual ~AcceptableQuestToGT();

  AcceptableQuestToGT(const AcceptableQuestToGT& from);

  inline AcceptableQuestToGT& operator=(const AcceptableQuestToGT& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const AcceptableQuestToGT& default_instance();

  void Swap(AcceptableQuestToGT* other);

  // implements Message ----------------------------------------------

  AcceptableQuestToGT* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const AcceptableQuestToGT& from);
  void MergeFrom(const AcceptableQuestToGT& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int64 id() const;
  inline void set_id(::google::protobuf::int64 value);

  // optional .CharLogin.AckToClientAcceptable questid = 2;
  inline bool has_questid() const;
  inline void clear_questid();
  static const int kQuestidFieldNumber = 2;
  inline const ::CharLogin::AckToClientAcceptable& questid() const;
  inline ::CharLogin::AckToClientAcceptable* mutable_questid();
  inline ::CharLogin::AckToClientAcceptable* release_questid();
  inline void set_allocated_questid(::CharLogin::AckToClientAcceptable* questid);

  // @@protoc_insertion_point(class_scope:CharLogin.AcceptableQuestToGT)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_questid();
  inline void clear_has_questid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 id_;
  ::CharLogin::AckToClientAcceptable* questid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static AcceptableQuestToGT* default_instance_;
};
// -------------------------------------------------------------------

class ClientContainerInfo : public ::google::protobuf::Message {
 public:
  ClientContainerInfo();
  virtual ~ClientContainerInfo();

  ClientContainerInfo(const ClientContainerInfo& from);

  inline ClientContainerInfo& operator=(const ClientContainerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientContainerInfo& default_instance();

  void Swap(ClientContainerInfo* other);

  // implements Message ----------------------------------------------

  ClientContainerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientContainerInfo& from);
  void MergeFrom(const ClientContainerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional .CharLogin.PackageInfo pack = 2;
  inline bool has_pack() const;
  inline void clear_pack();
  static const int kPackFieldNumber = 2;
  inline const ::CharLogin::PackageInfo& pack() const;
  inline ::CharLogin::PackageInfo* mutable_pack();
  inline ::CharLogin::PackageInfo* release_pack();
  inline void set_allocated_pack(::CharLogin::PackageInfo* pack);

  // optional .CharLogin.StoreHouseInfo storehouse = 3;
  inline bool has_storehouse() const;
  inline void clear_storehouse();
  static const int kStorehouseFieldNumber = 3;
  inline const ::CharLogin::StoreHouseInfo& storehouse() const;
  inline ::CharLogin::StoreHouseInfo* mutable_storehouse();
  inline ::CharLogin::StoreHouseInfo* release_storehouse();
  inline void set_allocated_storehouse(::CharLogin::StoreHouseInfo* storehouse);

  // optional int32 pno = 4;
  inline bool has_pno() const;
  inline void clear_pno();
  static const int kPnoFieldNumber = 4;
  inline ::google::protobuf::int32 pno() const;
  inline void set_pno(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CharLogin.ClientContainerInfo)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_pack();
  inline void clear_has_pack();
  inline void set_has_storehouse();
  inline void clear_has_storehouse();
  inline void set_has_pno();
  inline void clear_has_pno();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CharLogin::PackageInfo* pack_;
  ::google::protobuf::int32 type_;
  ::google::protobuf::int32 pno_;
  ::CharLogin::StoreHouseInfo* storehouse_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static ClientContainerInfo* default_instance_;
};
// -------------------------------------------------------------------

class ToGTContainerInfo : public ::google::protobuf::Message {
 public:
  ToGTContainerInfo();
  virtual ~ToGTContainerInfo();

  ToGTContainerInfo(const ToGTContainerInfo& from);

  inline ToGTContainerInfo& operator=(const ToGTContainerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ToGTContainerInfo& default_instance();

  void Swap(ToGTContainerInfo* other);

  // implements Message ----------------------------------------------

  ToGTContainerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ToGTContainerInfo& from);
  void MergeFrom(const ToGTContainerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required .CharLogin.ClientContainerInfo info = 2;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 2;
  inline const ::CharLogin::ClientContainerInfo& info() const;
  inline ::CharLogin::ClientContainerInfo* mutable_info();
  inline ::CharLogin::ClientContainerInfo* release_info();
  inline void set_allocated_info(::CharLogin::ClientContainerInfo* info);

  // @@protoc_insertion_point(class_scope:CharLogin.ToGTContainerInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::CharLogin::ClientContainerInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static ToGTContainerInfo* default_instance_;
};
// -------------------------------------------------------------------

class EquipQuickInfo : public ::google::protobuf::Message {
 public:
  EquipQuickInfo();
  virtual ~EquipQuickInfo();

  EquipQuickInfo(const EquipQuickInfo& from);

  inline EquipQuickInfo& operator=(const EquipQuickInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const EquipQuickInfo& default_instance();

  void Swap(EquipQuickInfo* other);

  // implements Message ----------------------------------------------

  EquipQuickInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const EquipQuickInfo& from);
  void MergeFrom(const EquipQuickInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CharLogin.ClientItemInfo equip = 1;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 1;
  inline const ::CharLogin::ClientItemInfo& equip(int index) const;
  inline ::CharLogin::ClientItemInfo* mutable_equip(int index);
  inline ::CharLogin::ClientItemInfo* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::CharLogin::ClientItemInfo >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::CharLogin::ClientItemInfo >*
      mutable_equip();

  // repeated .PlayerInfo.QuickContainer quick = 2;
  inline int quick_size() const;
  inline void clear_quick();
  static const int kQuickFieldNumber = 2;
  inline const ::PlayerInfo::QuickContainer& quick(int index) const;
  inline ::PlayerInfo::QuickContainer* mutable_quick(int index);
  inline ::PlayerInfo::QuickContainer* add_quick();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo::QuickContainer >&
      quick() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo::QuickContainer >*
      mutable_quick();

  // @@protoc_insertion_point(class_scope:CharLogin.EquipQuickInfo)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CharLogin::ClientItemInfo > equip_;
  ::google::protobuf::RepeatedPtrField< ::PlayerInfo::QuickContainer > quick_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static EquipQuickInfo* default_instance_;
};
// -------------------------------------------------------------------

class PackageInfo : public ::google::protobuf::Message {
 public:
  PackageInfo();
  virtual ~PackageInfo();

  PackageInfo(const PackageInfo& from);

  inline PackageInfo& operator=(const PackageInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const PackageInfo& default_instance();

  void Swap(PackageInfo* other);

  // implements Message ----------------------------------------------

  PackageInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const PackageInfo& from);
  void MergeFrom(const PackageInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CharLogin.ClientItemInfo pack = 1;
  inline int pack_size() const;
  inline void clear_pack();
  static const int kPackFieldNumber = 1;
  inline const ::CharLogin::ClientItemInfo& pack(int index) const;
  inline ::CharLogin::ClientItemInfo* mutable_pack(int index);
  inline ::CharLogin::ClientItemInfo* add_pack();
  inline const ::google::protobuf::RepeatedPtrField< ::CharLogin::ClientItemInfo >&
      pack() const;
  inline ::google::protobuf::RepeatedPtrField< ::CharLogin::ClientItemInfo >*
      mutable_pack();

  // optional int32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional double dtime = 3;
  inline bool has_dtime() const;
  inline void clear_dtime();
  static const int kDtimeFieldNumber = 3;
  inline double dtime() const;
  inline void set_dtime(double value);

  // @@protoc_insertion_point(class_scope:CharLogin.PackageInfo)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_dtime();
  inline void clear_has_dtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CharLogin::ClientItemInfo > pack_;
  double dtime_;
  ::google::protobuf::int32 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static PackageInfo* default_instance_;
};
// -------------------------------------------------------------------

class StoreHouseInfo : public ::google::protobuf::Message {
 public:
  StoreHouseInfo();
  virtual ~StoreHouseInfo();

  StoreHouseInfo(const StoreHouseInfo& from);

  inline StoreHouseInfo& operator=(const StoreHouseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const StoreHouseInfo& default_instance();

  void Swap(StoreHouseInfo* other);

  // implements Message ----------------------------------------------

  StoreHouseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const StoreHouseInfo& from);
  void MergeFrom(const StoreHouseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CharLogin.ClientItemInfo storehouse = 1;
  inline int storehouse_size() const;
  inline void clear_storehouse();
  static const int kStorehouseFieldNumber = 1;
  inline const ::CharLogin::ClientItemInfo& storehouse(int index) const;
  inline ::CharLogin::ClientItemInfo* mutable_storehouse(int index);
  inline ::CharLogin::ClientItemInfo* add_storehouse();
  inline const ::google::protobuf::RepeatedPtrField< ::CharLogin::ClientItemInfo >&
      storehouse() const;
  inline ::google::protobuf::RepeatedPtrField< ::CharLogin::ClientItemInfo >*
      mutable_storehouse();

  // optional int32 size = 2;
  inline bool has_size() const;
  inline void clear_size();
  static const int kSizeFieldNumber = 2;
  inline ::google::protobuf::int32 size() const;
  inline void set_size(::google::protobuf::int32 value);

  // optional double dtime = 3;
  inline bool has_dtime() const;
  inline void clear_dtime();
  static const int kDtimeFieldNumber = 3;
  inline double dtime() const;
  inline void set_dtime(double value);

  // @@protoc_insertion_point(class_scope:CharLogin.StoreHouseInfo)
 private:
  inline void set_has_size();
  inline void clear_has_size();
  inline void set_has_dtime();
  inline void clear_has_dtime();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CharLogin::ClientItemInfo > storehouse_;
  double dtime_;
  ::google::protobuf::int32 size_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static StoreHouseInfo* default_instance_;
};
// -------------------------------------------------------------------

class ClientItemInfo : public ::google::protobuf::Message {
 public:
  ClientItemInfo();
  virtual ~ClientItemInfo();

  ClientItemInfo(const ClientItemInfo& from);

  inline ClientItemInfo& operator=(const ClientItemInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ClientItemInfo& default_instance();

  void Swap(ClientItemInfo* other);

  // implements Message ----------------------------------------------

  ClientItemInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ClientItemInfo& from);
  void MergeFrom(const ClientItemInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 id = 1;
  inline bool has_id() const;
  inline void clear_id();
  static const int kIdFieldNumber = 1;
  inline ::google::protobuf::int32 id() const;
  inline void set_id(::google::protobuf::int32 value);

  // optional uint32 flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline ::google::protobuf::uint32 flag() const;
  inline void set_flag(::google::protobuf::uint32 value);

  // repeated uint32 newattr = 3;
  inline int newattr_size() const;
  inline void clear_newattr();
  static const int kNewattrFieldNumber = 3;
  inline ::google::protobuf::uint32 newattr(int index) const;
  inline void set_newattr(int index, ::google::protobuf::uint32 value);
  inline void add_newattr(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      newattr() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_newattr();

  // repeated int32 stoneid = 4;
  inline int stoneid_size() const;
  inline void clear_stoneid();
  static const int kStoneidFieldNumber = 4;
  inline ::google::protobuf::int32 stoneid(int index) const;
  inline void set_stoneid(int index, ::google::protobuf::int32 value);
  inline void add_stoneid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      stoneid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_stoneid();

  // optional uint32 time = 5;
  inline bool has_time() const;
  inline void clear_time();
  static const int kTimeFieldNumber = 5;
  inline ::google::protobuf::uint32 time() const;
  inline void set_time(::google::protobuf::uint32 value);

  // optional uint32 num = 6;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 6;
  inline ::google::protobuf::uint32 num() const;
  inline void set_num(::google::protobuf::uint32 value);

  // repeated int32 inlayPos = 7;
  inline int inlaypos_size() const;
  inline void clear_inlaypos();
  static const int kInlayPosFieldNumber = 7;
  inline ::google::protobuf::int32 inlaypos(int index) const;
  inline void set_inlaypos(int index, ::google::protobuf::int32 value);
  inline void add_inlaypos(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      inlaypos() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_inlaypos();

  // repeated uint32 refineAttrLv = 8;
  inline int refineattrlv_size() const;
  inline void clear_refineattrlv();
  static const int kRefineAttrLvFieldNumber = 8;
  inline ::google::protobuf::uint32 refineattrlv(int index) const;
  inline void set_refineattrlv(int index, ::google::protobuf::uint32 value);
  inline void add_refineattrlv(::google::protobuf::uint32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
      refineattrlv() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
      mutable_refineattrlv();

  // @@protoc_insertion_point(class_scope:CharLogin.ClientItemInfo)
 private:
  inline void set_has_id();
  inline void clear_has_id();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_time();
  inline void clear_has_time();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 id_;
  ::google::protobuf::uint32 flag_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > newattr_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > stoneid_;
  ::google::protobuf::uint32 time_;
  ::google::protobuf::uint32 num_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > inlaypos_;
  ::google::protobuf::RepeatedField< ::google::protobuf::uint32 > refineattrlv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(8 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static ClientItemInfo* default_instance_;
};
// -------------------------------------------------------------------

class CharEquip : public ::google::protobuf::Message {
 public:
  CharEquip();
  virtual ~CharEquip();

  CharEquip(const CharEquip& from);

  inline CharEquip& operator=(const CharEquip& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const CharEquip& default_instance();

  void Swap(CharEquip* other);

  // implements Message ----------------------------------------------

  CharEquip* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const CharEquip& from);
  void MergeFrom(const CharEquip& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int32 idweapon = 1;
  inline bool has_idweapon() const;
  inline void clear_idweapon();
  static const int kIdweaponFieldNumber = 1;
  inline ::google::protobuf::int32 idweapon() const;
  inline void set_idweapon(::google::protobuf::int32 value);

  // required int32 idcloth = 2;
  inline bool has_idcloth() const;
  inline void clear_idcloth();
  static const int kIdclothFieldNumber = 2;
  inline ::google::protobuf::int32 idcloth() const;
  inline void set_idcloth(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CharLogin.CharEquip)
 private:
  inline void set_has_idweapon();
  inline void clear_has_idweapon();
  inline void set_has_idcloth();
  inline void clear_has_idcloth();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 idweapon_;
  ::google::protobuf::int32 idcloth_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static CharEquip* default_instance_;
};
// -------------------------------------------------------------------

class WBaseInfo : public ::google::protobuf::Message {
 public:
  WBaseInfo();
  virtual ~WBaseInfo();

  WBaseInfo(const WBaseInfo& from);

  inline WBaseInfo& operator=(const WBaseInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const WBaseInfo& default_instance();

  void Swap(WBaseInfo* other);

  // implements Message ----------------------------------------------

  WBaseInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const WBaseInfo& from);
  void MergeFrom(const WBaseInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int64 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::int64 mapid() const;
  inline void set_mapid(::google::protobuf::int64 value);

  // optional int64 localtype = 3;
  inline bool has_localtype() const;
  inline void clear_localtype();
  static const int kLocaltypeFieldNumber = 3;
  inline ::google::protobuf::int64 localtype() const;
  inline void set_localtype(::google::protobuf::int64 value);

  // optional string name = 4;
  inline bool has_name() const;
  inline void clear_name();
  static const int kNameFieldNumber = 4;
  inline const ::std::string& name() const;
  inline void set_name(const ::std::string& value);
  inline void set_name(const char* value);
  inline void set_name(const char* value, size_t size);
  inline ::std::string* mutable_name();
  inline ::std::string* release_name();
  inline void set_allocated_name(::std::string* name);

  // optional int32 lv = 5;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 5;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 profession = 6;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 6;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int32 hatred = 7;
  inline bool has_hatred() const;
  inline void clear_hatred();
  static const int kHatredFieldNumber = 7;
  inline ::google::protobuf::int32 hatred() const;
  inline void set_hatred(::google::protobuf::int32 value);

  // optional int32 settings = 8;
  inline bool has_settings() const;
  inline void clear_settings();
  static const int kSettingsFieldNumber = 8;
  inline ::google::protobuf::int32 settings() const;
  inline void set_settings(::google::protobuf::int32 value);

  // optional int32 country = 10;
  inline bool has_country() const;
  inline void clear_country();
  static const int kCountryFieldNumber = 10;
  inline ::google::protobuf::int32 country() const;
  inline void set_country(::google::protobuf::int32 value);

  // optional int64 nextTalkTime = 12;
  inline bool has_nexttalktime() const;
  inline void clear_nexttalktime();
  static const int kNextTalkTimeFieldNumber = 12;
  inline ::google::protobuf::int64 nexttalktime() const;
  inline void set_nexttalktime(::google::protobuf::int64 value);

  // optional int32 score = 13;
  inline bool has_score() const;
  inline void clear_score();
  static const int kScoreFieldNumber = 13;
  inline ::google::protobuf::int32 score() const;
  inline void set_score(::google::protobuf::int32 value);

  // optional int64 offlinetime = 14;
  inline bool has_offlinetime() const;
  inline void clear_offlinetime();
  static const int kOfflinetimeFieldNumber = 14;
  inline ::google::protobuf::int64 offlinetime() const;
  inline void set_offlinetime(::google::protobuf::int64 value);

  // optional int64 teamid = 15;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 15;
  inline ::google::protobuf::int64 teamid() const;
  inline void set_teamid(::google::protobuf::int64 value);

  // optional int32 fightPower = 16;
  inline bool has_fightpower() const;
  inline void clear_fightpower();
  static const int kFightPowerFieldNumber = 16;
  inline ::google::protobuf::int32 fightpower() const;
  inline void set_fightpower(::google::protobuf::int32 value);

  // optional bool sex = 17;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 17;
  inline bool sex() const;
  inline void set_sex(bool value);

  // optional int32 countryjob = 19;
  inline bool has_countryjob() const;
  inline void clear_countryjob();
  static const int kCountryjobFieldNumber = 19;
  inline ::google::protobuf::int32 countryjob() const;
  inline void set_countryjob(::google::protobuf::int32 value);

  // optional int32 contribute = 20;
  inline bool has_contribute() const;
  inline void clear_contribute();
  static const int kContributeFieldNumber = 20;
  inline ::google::protobuf::int32 contribute() const;
  inline void set_contribute(::google::protobuf::int32 value);

  // optional int32 fitchPrize = 21;
  inline bool has_fitchprize() const;
  inline void clear_fitchprize();
  static const int kFitchPrizeFieldNumber = 21;
  inline ::google::protobuf::int32 fitchprize() const;
  inline void set_fitchprize(::google::protobuf::int32 value);

  // optional int32 vipLevel = 22;
  inline bool has_viplevel() const;
  inline void clear_viplevel();
  static const int kVipLevelFieldNumber = 22;
  inline ::google::protobuf::int32 viplevel() const;
  inline void set_viplevel(::google::protobuf::int32 value);

  // optional int32 magicWeapon = 23;
  inline bool has_magicweapon() const;
  inline void clear_magicweapon();
  static const int kMagicWeaponFieldNumber = 23;
  inline ::google::protobuf::int32 magicweapon() const;
  inline void set_magicweapon(::google::protobuf::int32 value);

  // optional int32 horseid = 24;
  inline bool has_horseid() const;
  inline void clear_horseid();
  static const int kHorseidFieldNumber = 24;
  inline ::google::protobuf::int32 horseid() const;
  inline void set_horseid(::google::protobuf::int32 value);

  // optional string openid = 25;
  inline bool has_openid() const;
  inline void clear_openid();
  static const int kOpenidFieldNumber = 25;
  inline const ::std::string& openid() const;
  inline void set_openid(const ::std::string& value);
  inline void set_openid(const char* value);
  inline void set_openid(const char* value, size_t size);
  inline ::std::string* mutable_openid();
  inline ::std::string* release_openid();
  inline void set_allocated_openid(::std::string* openid);

  // optional string openkey = 26;
  inline bool has_openkey() const;
  inline void clear_openkey();
  static const int kOpenkeyFieldNumber = 26;
  inline const ::std::string& openkey() const;
  inline void set_openkey(const ::std::string& value);
  inline void set_openkey(const char* value);
  inline void set_openkey(const char* value, size_t size);
  inline ::std::string* mutable_openkey();
  inline ::std::string* release_openkey();
  inline void set_allocated_openkey(::std::string* openkey);

  // optional string pf = 27;
  inline bool has_pf() const;
  inline void clear_pf();
  static const int kPfFieldNumber = 27;
  inline const ::std::string& pf() const;
  inline void set_pf(const ::std::string& value);
  inline void set_pf(const char* value);
  inline void set_pf(const char* value, size_t size);
  inline ::std::string* mutable_pf();
  inline ::std::string* release_pf();
  inline void set_allocated_pf(::std::string* pf);

  // optional string pfkey = 28;
  inline bool has_pfkey() const;
  inline void clear_pfkey();
  static const int kPfkeyFieldNumber = 28;
  inline const ::std::string& pfkey() const;
  inline void set_pfkey(const ::std::string& value);
  inline void set_pfkey(const char* value);
  inline void set_pfkey(const char* value, size_t size);
  inline ::std::string* mutable_pfkey();
  inline ::std::string* release_pfkey();
  inline void set_allocated_pfkey(::std::string* pfkey);

  // optional int32 addupGolden = 29;
  inline bool has_addupgolden() const;
  inline void clear_addupgolden();
  static const int kAddupGoldenFieldNumber = 29;
  inline ::google::protobuf::int32 addupgolden() const;
  inline void set_addupgolden(::google::protobuf::int32 value);

  // optional int32 challengeArenaNum = 30;
  inline bool has_challengearenanum() const;
  inline void clear_challengearenanum();
  static const int kChallengeArenaNumFieldNumber = 30;
  inline ::google::protobuf::int32 challengearenanum() const;
  inline void set_challengearenanum(::google::protobuf::int32 value);

  // optional int32 golden = 31;
  inline bool has_golden() const;
  inline void clear_golden();
  static const int kGoldenFieldNumber = 31;
  inline ::google::protobuf::int32 golden() const;
  inline void set_golden(::google::protobuf::int32 value);

  // optional int32 accountType = 32;
  inline bool has_accounttype() const;
  inline void clear_accounttype();
  static const int kAccountTypeFieldNumber = 32;
  inline ::google::protobuf::int32 accounttype() const;
  inline void set_accounttype(::google::protobuf::int32 value);

  // optional string source = 33;
  inline bool has_source() const;
  inline void clear_source();
  static const int kSourceFieldNumber = 33;
  inline const ::std::string& source() const;
  inline void set_source(const ::std::string& value);
  inline void set_source(const char* value);
  inline void set_source(const char* value, size_t size);
  inline ::std::string* mutable_source();
  inline ::std::string* release_source();
  inline void set_allocated_source(::std::string* source);

  // @@protoc_insertion_point(class_scope:CharLogin.WBaseInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_mapid();
  inline void clear_has_mapid();
  inline void set_has_localtype();
  inline void clear_has_localtype();
  inline void set_has_name();
  inline void clear_has_name();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_hatred();
  inline void clear_has_hatred();
  inline void set_has_settings();
  inline void clear_has_settings();
  inline void set_has_country();
  inline void clear_has_country();
  inline void set_has_nexttalktime();
  inline void clear_has_nexttalktime();
  inline void set_has_score();
  inline void clear_has_score();
  inline void set_has_offlinetime();
  inline void clear_has_offlinetime();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_fightpower();
  inline void clear_has_fightpower();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_countryjob();
  inline void clear_has_countryjob();
  inline void set_has_contribute();
  inline void clear_has_contribute();
  inline void set_has_fitchprize();
  inline void clear_has_fitchprize();
  inline void set_has_viplevel();
  inline void clear_has_viplevel();
  inline void set_has_magicweapon();
  inline void clear_has_magicweapon();
  inline void set_has_horseid();
  inline void clear_has_horseid();
  inline void set_has_openid();
  inline void clear_has_openid();
  inline void set_has_openkey();
  inline void clear_has_openkey();
  inline void set_has_pf();
  inline void clear_has_pf();
  inline void set_has_pfkey();
  inline void clear_has_pfkey();
  inline void set_has_addupgolden();
  inline void clear_has_addupgolden();
  inline void set_has_challengearenanum();
  inline void clear_has_challengearenanum();
  inline void set_has_golden();
  inline void clear_has_golden();
  inline void set_has_accounttype();
  inline void clear_has_accounttype();
  inline void set_has_source();
  inline void clear_has_source();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int64 mapid_;
  ::google::protobuf::int64 localtype_;
  ::std::string* name_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 hatred_;
  ::google::protobuf::int32 settings_;
  ::google::protobuf::int64 nexttalktime_;
  ::google::protobuf::int32 country_;
  ::google::protobuf::int32 score_;
  ::google::protobuf::int64 offlinetime_;
  ::google::protobuf::int64 teamid_;
  ::google::protobuf::int32 fightpower_;
  bool sex_;
  ::google::protobuf::int32 countryjob_;
  ::google::protobuf::int32 contribute_;
  ::google::protobuf::int32 fitchprize_;
  ::google::protobuf::int32 viplevel_;
  ::google::protobuf::int32 magicweapon_;
  ::google::protobuf::int32 horseid_;
  ::std::string* openid_;
  ::std::string* openkey_;
  ::std::string* pf_;
  ::std::string* pfkey_;
  ::google::protobuf::int32 addupgolden_;
  ::google::protobuf::int32 challengearenanum_;
  ::google::protobuf::int32 golden_;
  ::google::protobuf::int32 accounttype_;
  ::std::string* source_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(30 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static WBaseInfo* default_instance_;
};
// -------------------------------------------------------------------

class SynchToWorldInfo : public ::google::protobuf::Message {
 public:
  SynchToWorldInfo();
  virtual ~SynchToWorldInfo();

  SynchToWorldInfo(const SynchToWorldInfo& from);

  inline SynchToWorldInfo& operator=(const SynchToWorldInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SynchToWorldInfo& default_instance();

  void Swap(SynchToWorldInfo* other);

  // implements Message ----------------------------------------------

  SynchToWorldInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SynchToWorldInfo& from);
  void MergeFrom(const SynchToWorldInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int32 fight = 2;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 2;
  inline ::google::protobuf::int32 fight() const;
  inline void set_fight(::google::protobuf::int32 value);

  // optional int32 isYesterdayReward = 3;
  inline bool has_isyesterdayreward() const;
  inline void clear_isyesterdayreward();
  static const int kIsYesterdayRewardFieldNumber = 3;
  inline ::google::protobuf::int32 isyesterdayreward() const;
  inline void set_isyesterdayreward(::google::protobuf::int32 value);

  // optional int32 m_VipLevel = 4;
  inline bool has_m_viplevel() const;
  inline void clear_m_viplevel();
  static const int kMVipLevelFieldNumber = 4;
  inline ::google::protobuf::int32 m_viplevel() const;
  inline void set_m_viplevel(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CharLogin.SynchToWorldInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_isyesterdayreward();
  inline void clear_has_isyesterdayreward();
  inline void set_has_m_viplevel();
  inline void clear_has_m_viplevel();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int32 fight_;
  ::google::protobuf::int32 isyesterdayreward_;
  ::google::protobuf::int32 m_viplevel_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(4 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static SynchToWorldInfo* default_instance_;
};
// -------------------------------------------------------------------

class SyncMap : public ::google::protobuf::Message {
 public:
  SyncMap();
  virtual ~SyncMap();

  SyncMap(const SyncMap& from);

  inline SyncMap& operator=(const SyncMap& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SyncMap& default_instance();

  void Swap(SyncMap* other);

  // implements Message ----------------------------------------------

  SyncMap* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SyncMap& from);
  void MergeFrom(const SyncMap& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional int64 mapid = 2;
  inline bool has_mapid() const;
  inline void clear_mapid();
  static const int kMapidFieldNumber = 2;
  inline ::google::protobuf::int64 mapid() const;
  inline void set_mapid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CharLogin.SyncMap)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_mapid();
  inline void clear_has_mapid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::google::protobuf::int64 mapid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(2 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static SyncMap* default_instance_;
};
// -------------------------------------------------------------------

class ReqSeePlayerInfo : public ::google::protobuf::Message {
 public:
  ReqSeePlayerInfo();
  virtual ~ReqSeePlayerInfo();

  ReqSeePlayerInfo(const ReqSeePlayerInfo& from);

  inline ReqSeePlayerInfo& operator=(const ReqSeePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ReqSeePlayerInfo& default_instance();

  void Swap(ReqSeePlayerInfo* other);

  // implements Message ----------------------------------------------

  ReqSeePlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ReqSeePlayerInfo& from);
  void MergeFrom(const ReqSeePlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // @@protoc_insertion_point(class_scope:CharLogin.ReqSeePlayerInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static ReqSeePlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class SeePlayerInfo : public ::google::protobuf::Message {
 public:
  SeePlayerInfo();
  virtual ~SeePlayerInfo();

  SeePlayerInfo(const SeePlayerInfo& from);

  inline SeePlayerInfo& operator=(const SeePlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const SeePlayerInfo& default_instance();

  void Swap(SeePlayerInfo* other);

  // implements Message ----------------------------------------------

  SeePlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const SeePlayerInfo& from);
  void MergeFrom(const SeePlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // required string charname = 2;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 2;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // required int32 profession = 3;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 3;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // required int32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // required int32 hp = 5;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 5;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // required int32 hpmax = 6;
  inline bool has_hpmax() const;
  inline void clear_hpmax();
  static const int kHpmaxFieldNumber = 6;
  inline ::google::protobuf::int32 hpmax() const;
  inline void set_hpmax(::google::protobuf::int32 value);

  // required int32 mp = 7;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 7;
  inline ::google::protobuf::int32 mp() const;
  inline void set_mp(::google::protobuf::int32 value);

  // required int32 mpmax = 8;
  inline bool has_mpmax() const;
  inline void clear_mpmax();
  static const int kMpmaxFieldNumber = 8;
  inline ::google::protobuf::int32 mpmax() const;
  inline void set_mpmax(::google::protobuf::int32 value);

  // required int32 strength = 9;
  inline bool has_strength() const;
  inline void clear_strength();
  static const int kStrengthFieldNumber = 9;
  inline ::google::protobuf::int32 strength() const;
  inline void set_strength(::google::protobuf::int32 value);

  // required int32 cleverpower = 10;
  inline bool has_cleverpower() const;
  inline void clear_cleverpower();
  static const int kCleverpowerFieldNumber = 10;
  inline ::google::protobuf::int32 cleverpower() const;
  inline void set_cleverpower(::google::protobuf::int32 value);

  // optional int32 cleverair = 11;
  inline bool has_cleverair() const;
  inline void clear_cleverair();
  static const int kCleverairFieldNumber = 11;
  inline ::google::protobuf::int32 cleverair() const;
  inline void set_cleverair(::google::protobuf::int32 value);

  // required int32 physicalpower = 12;
  inline bool has_physicalpower() const;
  inline void clear_physicalpower();
  static const int kPhysicalpowerFieldNumber = 12;
  inline ::google::protobuf::int32 physicalpower() const;
  inline void set_physicalpower(::google::protobuf::int32 value);

  // required int32 patience = 13;
  inline bool has_patience() const;
  inline void clear_patience();
  static const int kPatienceFieldNumber = 13;
  inline ::google::protobuf::int32 patience() const;
  inline void set_patience(::google::protobuf::int32 value);

  // required int32 agility = 14;
  inline bool has_agility() const;
  inline void clear_agility();
  static const int kAgilityFieldNumber = 14;
  inline ::google::protobuf::int32 agility() const;
  inline void set_agility(::google::protobuf::int32 value);

  // optional int32 power = 15;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 15;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // required int32 phyattack = 16;
  inline bool has_phyattack() const;
  inline void clear_phyattack();
  static const int kPhyattackFieldNumber = 16;
  inline ::google::protobuf::int32 phyattack() const;
  inline void set_phyattack(::google::protobuf::int32 value);

  // required int32 phyattackmax = 17;
  inline bool has_phyattackmax() const;
  inline void clear_phyattackmax();
  static const int kPhyattackmaxFieldNumber = 17;
  inline ::google::protobuf::int32 phyattackmax() const;
  inline void set_phyattackmax(::google::protobuf::int32 value);

  // required int32 phydefence = 18;
  inline bool has_phydefence() const;
  inline void clear_phydefence();
  static const int kPhydefenceFieldNumber = 18;
  inline ::google::protobuf::int32 phydefence() const;
  inline void set_phydefence(::google::protobuf::int32 value);

  // required int32 magicattack = 19;
  inline bool has_magicattack() const;
  inline void clear_magicattack();
  static const int kMagicattackFieldNumber = 19;
  inline ::google::protobuf::int32 magicattack() const;
  inline void set_magicattack(::google::protobuf::int32 value);

  // required int32 magicattackmax = 20;
  inline bool has_magicattackmax() const;
  inline void clear_magicattackmax();
  static const int kMagicattackmaxFieldNumber = 20;
  inline ::google::protobuf::int32 magicattackmax() const;
  inline void set_magicattackmax(::google::protobuf::int32 value);

  // required int32 magicdefence = 21;
  inline bool has_magicdefence() const;
  inline void clear_magicdefence();
  static const int kMagicdefenceFieldNumber = 21;
  inline ::google::protobuf::int32 magicdefence() const;
  inline void set_magicdefence(::google::protobuf::int32 value);

  // required int32 hitrate = 22;
  inline bool has_hitrate() const;
  inline void clear_hitrate();
  static const int kHitrateFieldNumber = 22;
  inline ::google::protobuf::int32 hitrate() const;
  inline void set_hitrate(::google::protobuf::int32 value);

  // required int32 avoidrate = 23;
  inline bool has_avoidrate() const;
  inline void clear_avoidrate();
  static const int kAvoidrateFieldNumber = 23;
  inline ::google::protobuf::int32 avoidrate() const;
  inline void set_avoidrate(::google::protobuf::int32 value);

  // required int32 baselucky = 24;
  inline bool has_baselucky() const;
  inline void clear_baselucky();
  static const int kBaseluckyFieldNumber = 24;
  inline ::google::protobuf::int32 baselucky() const;
  inline void set_baselucky(::google::protobuf::int32 value);

  // required int32 crackdownrate = 25;
  inline bool has_crackdownrate() const;
  inline void clear_crackdownrate();
  static const int kCrackdownrateFieldNumber = 25;
  inline ::google::protobuf::int32 crackdownrate() const;
  inline void set_crackdownrate(::google::protobuf::int32 value);

  // required int32 baserte = 26;
  inline bool has_baserte() const;
  inline void clear_baserte();
  static const int kBaserteFieldNumber = 26;
  inline ::google::protobuf::int32 baserte() const;
  inline void set_baserte(::google::protobuf::int32 value);

  // repeated .PlayerInfo.ItemInfo equip = 27;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 27;
  inline const ::PlayerInfo::ItemInfo& equip(int index) const;
  inline ::PlayerInfo::ItemInfo* mutable_equip(int index);
  inline ::PlayerInfo::ItemInfo* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ItemInfo >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ItemInfo >*
      mutable_equip();

  // required int32 fight = 28;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 28;
  inline ::google::protobuf::int32 fight() const;
  inline void set_fight(::google::protobuf::int32 value);

  // required int32 powermax = 29;
  inline bool has_powermax() const;
  inline void clear_powermax();
  static const int kPowermaxFieldNumber = 29;
  inline ::google::protobuf::int32 powermax() const;
  inline void set_powermax(::google::protobuf::int32 value);

  // required int64 exp = 30;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 30;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // required int32 lv = 31;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 31;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // required int32 magicequipid = 32;
  inline bool has_magicequipid() const;
  inline void clear_magicequipid();
  static const int kMagicequipidFieldNumber = 32;
  inline ::google::protobuf::int32 magicequipid() const;
  inline void set_magicequipid(::google::protobuf::int32 value);

  // required string guildname = 33;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 33;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // required int32 guildjob = 34;
  inline bool has_guildjob() const;
  inline void clear_guildjob();
  static const int kGuildjobFieldNumber = 34;
  inline ::google::protobuf::int32 guildjob() const;
  inline void set_guildjob(::google::protobuf::int32 value);

  // required int32 titleid = 35;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleidFieldNumber = 35;
  inline ::google::protobuf::int32 titleid() const;
  inline void set_titleid(::google::protobuf::int32 value);

  // required int32 pkcount = 36;
  inline bool has_pkcount() const;
  inline void clear_pkcount();
  static const int kPkcountFieldNumber = 36;
  inline ::google::protobuf::int32 pkcount() const;
  inline void set_pkcount(::google::protobuf::int32 value);

  // required int32 viplv = 37;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kViplvFieldNumber = 37;
  inline ::google::protobuf::int32 viplv() const;
  inline void set_viplv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CharLogin.SeePlayerInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_hpmax();
  inline void clear_has_hpmax();
  inline void set_has_mp();
  inline void clear_has_mp();
  inline void set_has_mpmax();
  inline void clear_has_mpmax();
  inline void set_has_strength();
  inline void clear_has_strength();
  inline void set_has_cleverpower();
  inline void clear_has_cleverpower();
  inline void set_has_cleverair();
  inline void clear_has_cleverair();
  inline void set_has_physicalpower();
  inline void clear_has_physicalpower();
  inline void set_has_patience();
  inline void clear_has_patience();
  inline void set_has_agility();
  inline void clear_has_agility();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_phyattack();
  inline void clear_has_phyattack();
  inline void set_has_phyattackmax();
  inline void clear_has_phyattackmax();
  inline void set_has_phydefence();
  inline void clear_has_phydefence();
  inline void set_has_magicattack();
  inline void clear_has_magicattack();
  inline void set_has_magicattackmax();
  inline void clear_has_magicattackmax();
  inline void set_has_magicdefence();
  inline void clear_has_magicdefence();
  inline void set_has_hitrate();
  inline void clear_has_hitrate();
  inline void set_has_avoidrate();
  inline void clear_has_avoidrate();
  inline void set_has_baselucky();
  inline void clear_has_baselucky();
  inline void set_has_crackdownrate();
  inline void clear_has_crackdownrate();
  inline void set_has_baserte();
  inline void clear_has_baserte();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_powermax();
  inline void clear_has_powermax();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_magicequipid();
  inline void clear_has_magicequipid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_guildjob();
  inline void clear_has_guildjob();
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_pkcount();
  inline void clear_has_pkcount();
  inline void set_has_viplv();
  inline void clear_has_viplv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* charname_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 hpmax_;
  ::google::protobuf::int32 mp_;
  ::google::protobuf::int32 mpmax_;
  ::google::protobuf::int32 strength_;
  ::google::protobuf::int32 cleverpower_;
  ::google::protobuf::int32 cleverair_;
  ::google::protobuf::int32 physicalpower_;
  ::google::protobuf::int32 patience_;
  ::google::protobuf::int32 agility_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 phyattack_;
  ::google::protobuf::int32 phyattackmax_;
  ::google::protobuf::int32 phydefence_;
  ::google::protobuf::int32 magicattack_;
  ::google::protobuf::int32 magicattackmax_;
  ::google::protobuf::int32 magicdefence_;
  ::google::protobuf::int32 hitrate_;
  ::google::protobuf::int32 avoidrate_;
  ::google::protobuf::int32 baselucky_;
  ::google::protobuf::int32 crackdownrate_;
  ::google::protobuf::int32 baserte_;
  ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ItemInfo > equip_;
  ::google::protobuf::int32 fight_;
  ::google::protobuf::int32 powermax_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 magicequipid_;
  ::std::string* guildname_;
  ::google::protobuf::int32 guildjob_;
  ::google::protobuf::int32 titleid_;
  ::google::protobuf::int32 pkcount_;
  ::google::protobuf::int32 viplv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(37 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static SeePlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class BeyondPlayerInfo : public ::google::protobuf::Message {
 public:
  BeyondPlayerInfo();
  virtual ~BeyondPlayerInfo();

  BeyondPlayerInfo(const BeyondPlayerInfo& from);

  inline BeyondPlayerInfo& operator=(const BeyondPlayerInfo& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const BeyondPlayerInfo& default_instance();

  void Swap(BeyondPlayerInfo* other);

  // implements Message ----------------------------------------------

  BeyondPlayerInfo* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const BeyondPlayerInfo& from);
  void MergeFrom(const BeyondPlayerInfo& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // required int64 charid = 1;
  inline bool has_charid() const;
  inline void clear_charid();
  static const int kCharidFieldNumber = 1;
  inline ::google::protobuf::int64 charid() const;
  inline void set_charid(::google::protobuf::int64 value);

  // optional string charname = 2;
  inline bool has_charname() const;
  inline void clear_charname();
  static const int kCharnameFieldNumber = 2;
  inline const ::std::string& charname() const;
  inline void set_charname(const ::std::string& value);
  inline void set_charname(const char* value);
  inline void set_charname(const char* value, size_t size);
  inline ::std::string* mutable_charname();
  inline ::std::string* release_charname();
  inline void set_allocated_charname(::std::string* charname);

  // optional int32 profession = 3;
  inline bool has_profession() const;
  inline void clear_profession();
  static const int kProfessionFieldNumber = 3;
  inline ::google::protobuf::int32 profession() const;
  inline void set_profession(::google::protobuf::int32 value);

  // optional int32 sex = 4;
  inline bool has_sex() const;
  inline void clear_sex();
  static const int kSexFieldNumber = 4;
  inline ::google::protobuf::int32 sex() const;
  inline void set_sex(::google::protobuf::int32 value);

  // optional int32 hp = 5;
  inline bool has_hp() const;
  inline void clear_hp();
  static const int kHpFieldNumber = 5;
  inline ::google::protobuf::int32 hp() const;
  inline void set_hp(::google::protobuf::int32 value);

  // optional int32 hpmax = 6;
  inline bool has_hpmax() const;
  inline void clear_hpmax();
  static const int kHpmaxFieldNumber = 6;
  inline ::google::protobuf::int32 hpmax() const;
  inline void set_hpmax(::google::protobuf::int32 value);

  // optional int32 mp = 7;
  inline bool has_mp() const;
  inline void clear_mp();
  static const int kMpFieldNumber = 7;
  inline ::google::protobuf::int32 mp() const;
  inline void set_mp(::google::protobuf::int32 value);

  // optional int32 mpmax = 8;
  inline bool has_mpmax() const;
  inline void clear_mpmax();
  static const int kMpmaxFieldNumber = 8;
  inline ::google::protobuf::int32 mpmax() const;
  inline void set_mpmax(::google::protobuf::int32 value);

  // optional int32 strength = 9;
  inline bool has_strength() const;
  inline void clear_strength();
  static const int kStrengthFieldNumber = 9;
  inline ::google::protobuf::int32 strength() const;
  inline void set_strength(::google::protobuf::int32 value);

  // optional int32 cleverpower = 10;
  inline bool has_cleverpower() const;
  inline void clear_cleverpower();
  static const int kCleverpowerFieldNumber = 10;
  inline ::google::protobuf::int32 cleverpower() const;
  inline void set_cleverpower(::google::protobuf::int32 value);

  // optional int32 cleverair = 11;
  inline bool has_cleverair() const;
  inline void clear_cleverair();
  static const int kCleverairFieldNumber = 11;
  inline ::google::protobuf::int32 cleverair() const;
  inline void set_cleverair(::google::protobuf::int32 value);

  // optional int32 physicalpower = 12;
  inline bool has_physicalpower() const;
  inline void clear_physicalpower();
  static const int kPhysicalpowerFieldNumber = 12;
  inline ::google::protobuf::int32 physicalpower() const;
  inline void set_physicalpower(::google::protobuf::int32 value);

  // optional int32 patience = 13;
  inline bool has_patience() const;
  inline void clear_patience();
  static const int kPatienceFieldNumber = 13;
  inline ::google::protobuf::int32 patience() const;
  inline void set_patience(::google::protobuf::int32 value);

  // optional int32 agility = 14;
  inline bool has_agility() const;
  inline void clear_agility();
  static const int kAgilityFieldNumber = 14;
  inline ::google::protobuf::int32 agility() const;
  inline void set_agility(::google::protobuf::int32 value);

  // optional int32 power = 15;
  inline bool has_power() const;
  inline void clear_power();
  static const int kPowerFieldNumber = 15;
  inline ::google::protobuf::int32 power() const;
  inline void set_power(::google::protobuf::int32 value);

  // optional int32 phyattack = 16;
  inline bool has_phyattack() const;
  inline void clear_phyattack();
  static const int kPhyattackFieldNumber = 16;
  inline ::google::protobuf::int32 phyattack() const;
  inline void set_phyattack(::google::protobuf::int32 value);

  // optional int32 phyattackmax = 17;
  inline bool has_phyattackmax() const;
  inline void clear_phyattackmax();
  static const int kPhyattackmaxFieldNumber = 17;
  inline ::google::protobuf::int32 phyattackmax() const;
  inline void set_phyattackmax(::google::protobuf::int32 value);

  // optional int32 phydefence = 18;
  inline bool has_phydefence() const;
  inline void clear_phydefence();
  static const int kPhydefenceFieldNumber = 18;
  inline ::google::protobuf::int32 phydefence() const;
  inline void set_phydefence(::google::protobuf::int32 value);

  // optional int32 magicattack = 19;
  inline bool has_magicattack() const;
  inline void clear_magicattack();
  static const int kMagicattackFieldNumber = 19;
  inline ::google::protobuf::int32 magicattack() const;
  inline void set_magicattack(::google::protobuf::int32 value);

  // optional int32 magicattackmax = 20;
  inline bool has_magicattackmax() const;
  inline void clear_magicattackmax();
  static const int kMagicattackmaxFieldNumber = 20;
  inline ::google::protobuf::int32 magicattackmax() const;
  inline void set_magicattackmax(::google::protobuf::int32 value);

  // optional int32 magicdefence = 21;
  inline bool has_magicdefence() const;
  inline void clear_magicdefence();
  static const int kMagicdefenceFieldNumber = 21;
  inline ::google::protobuf::int32 magicdefence() const;
  inline void set_magicdefence(::google::protobuf::int32 value);

  // optional int32 hitrate = 22;
  inline bool has_hitrate() const;
  inline void clear_hitrate();
  static const int kHitrateFieldNumber = 22;
  inline ::google::protobuf::int32 hitrate() const;
  inline void set_hitrate(::google::protobuf::int32 value);

  // optional int32 avoidrate = 23;
  inline bool has_avoidrate() const;
  inline void clear_avoidrate();
  static const int kAvoidrateFieldNumber = 23;
  inline ::google::protobuf::int32 avoidrate() const;
  inline void set_avoidrate(::google::protobuf::int32 value);

  // optional int32 baselucky = 24;
  inline bool has_baselucky() const;
  inline void clear_baselucky();
  static const int kBaseluckyFieldNumber = 24;
  inline ::google::protobuf::int32 baselucky() const;
  inline void set_baselucky(::google::protobuf::int32 value);

  // optional int32 crackdownrate = 25;
  inline bool has_crackdownrate() const;
  inline void clear_crackdownrate();
  static const int kCrackdownrateFieldNumber = 25;
  inline ::google::protobuf::int32 crackdownrate() const;
  inline void set_crackdownrate(::google::protobuf::int32 value);

  // optional int32 baserte = 26;
  inline bool has_baserte() const;
  inline void clear_baserte();
  static const int kBaserteFieldNumber = 26;
  inline ::google::protobuf::int32 baserte() const;
  inline void set_baserte(::google::protobuf::int32 value);

  // repeated .PlayerInfo.ItemInfo equip = 27;
  inline int equip_size() const;
  inline void clear_equip();
  static const int kEquipFieldNumber = 27;
  inline const ::PlayerInfo::ItemInfo& equip(int index) const;
  inline ::PlayerInfo::ItemInfo* mutable_equip(int index);
  inline ::PlayerInfo::ItemInfo* add_equip();
  inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ItemInfo >&
      equip() const;
  inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ItemInfo >*
      mutable_equip();

  // optional int32 fight = 28;
  inline bool has_fight() const;
  inline void clear_fight();
  static const int kFightFieldNumber = 28;
  inline ::google::protobuf::int32 fight() const;
  inline void set_fight(::google::protobuf::int32 value);

  // optional int32 powermax = 29;
  inline bool has_powermax() const;
  inline void clear_powermax();
  static const int kPowermaxFieldNumber = 29;
  inline ::google::protobuf::int32 powermax() const;
  inline void set_powermax(::google::protobuf::int32 value);

  // optional int64 exp = 30;
  inline bool has_exp() const;
  inline void clear_exp();
  static const int kExpFieldNumber = 30;
  inline ::google::protobuf::int64 exp() const;
  inline void set_exp(::google::protobuf::int64 value);

  // optional int32 lv = 31;
  inline bool has_lv() const;
  inline void clear_lv();
  static const int kLvFieldNumber = 31;
  inline ::google::protobuf::int32 lv() const;
  inline void set_lv(::google::protobuf::int32 value);

  // optional int32 magicequipid = 32;
  inline bool has_magicequipid() const;
  inline void clear_magicequipid();
  static const int kMagicequipidFieldNumber = 32;
  inline ::google::protobuf::int32 magicequipid() const;
  inline void set_magicequipid(::google::protobuf::int32 value);

  // optional string guildname = 33;
  inline bool has_guildname() const;
  inline void clear_guildname();
  static const int kGuildnameFieldNumber = 33;
  inline const ::std::string& guildname() const;
  inline void set_guildname(const ::std::string& value);
  inline void set_guildname(const char* value);
  inline void set_guildname(const char* value, size_t size);
  inline ::std::string* mutable_guildname();
  inline ::std::string* release_guildname();
  inline void set_allocated_guildname(::std::string* guildname);

  // optional int32 guildjob = 34;
  inline bool has_guildjob() const;
  inline void clear_guildjob();
  static const int kGuildjobFieldNumber = 34;
  inline ::google::protobuf::int32 guildjob() const;
  inline void set_guildjob(::google::protobuf::int32 value);

  // optional int32 titleid = 35;
  inline bool has_titleid() const;
  inline void clear_titleid();
  static const int kTitleidFieldNumber = 35;
  inline ::google::protobuf::int32 titleid() const;
  inline void set_titleid(::google::protobuf::int32 value);

  // optional int32 pkcount = 36;
  inline bool has_pkcount() const;
  inline void clear_pkcount();
  static const int kPkcountFieldNumber = 36;
  inline ::google::protobuf::int32 pkcount() const;
  inline void set_pkcount(::google::protobuf::int32 value);

  // optional int32 viplv = 37;
  inline bool has_viplv() const;
  inline void clear_viplv();
  static const int kViplvFieldNumber = 37;
  inline ::google::protobuf::int32 viplv() const;
  inline void set_viplv(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CharLogin.BeyondPlayerInfo)
 private:
  inline void set_has_charid();
  inline void clear_has_charid();
  inline void set_has_charname();
  inline void clear_has_charname();
  inline void set_has_profession();
  inline void clear_has_profession();
  inline void set_has_sex();
  inline void clear_has_sex();
  inline void set_has_hp();
  inline void clear_has_hp();
  inline void set_has_hpmax();
  inline void clear_has_hpmax();
  inline void set_has_mp();
  inline void clear_has_mp();
  inline void set_has_mpmax();
  inline void clear_has_mpmax();
  inline void set_has_strength();
  inline void clear_has_strength();
  inline void set_has_cleverpower();
  inline void clear_has_cleverpower();
  inline void set_has_cleverair();
  inline void clear_has_cleverair();
  inline void set_has_physicalpower();
  inline void clear_has_physicalpower();
  inline void set_has_patience();
  inline void clear_has_patience();
  inline void set_has_agility();
  inline void clear_has_agility();
  inline void set_has_power();
  inline void clear_has_power();
  inline void set_has_phyattack();
  inline void clear_has_phyattack();
  inline void set_has_phyattackmax();
  inline void clear_has_phyattackmax();
  inline void set_has_phydefence();
  inline void clear_has_phydefence();
  inline void set_has_magicattack();
  inline void clear_has_magicattack();
  inline void set_has_magicattackmax();
  inline void clear_has_magicattackmax();
  inline void set_has_magicdefence();
  inline void clear_has_magicdefence();
  inline void set_has_hitrate();
  inline void clear_has_hitrate();
  inline void set_has_avoidrate();
  inline void clear_has_avoidrate();
  inline void set_has_baselucky();
  inline void clear_has_baselucky();
  inline void set_has_crackdownrate();
  inline void clear_has_crackdownrate();
  inline void set_has_baserte();
  inline void clear_has_baserte();
  inline void set_has_fight();
  inline void clear_has_fight();
  inline void set_has_powermax();
  inline void clear_has_powermax();
  inline void set_has_exp();
  inline void clear_has_exp();
  inline void set_has_lv();
  inline void clear_has_lv();
  inline void set_has_magicequipid();
  inline void clear_has_magicequipid();
  inline void set_has_guildname();
  inline void clear_has_guildname();
  inline void set_has_guildjob();
  inline void clear_has_guildjob();
  inline void set_has_titleid();
  inline void clear_has_titleid();
  inline void set_has_pkcount();
  inline void clear_has_pkcount();
  inline void set_has_viplv();
  inline void clear_has_viplv();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int64 charid_;
  ::std::string* charname_;
  ::google::protobuf::int32 profession_;
  ::google::protobuf::int32 sex_;
  ::google::protobuf::int32 hp_;
  ::google::protobuf::int32 hpmax_;
  ::google::protobuf::int32 mp_;
  ::google::protobuf::int32 mpmax_;
  ::google::protobuf::int32 strength_;
  ::google::protobuf::int32 cleverpower_;
  ::google::protobuf::int32 cleverair_;
  ::google::protobuf::int32 physicalpower_;
  ::google::protobuf::int32 patience_;
  ::google::protobuf::int32 agility_;
  ::google::protobuf::int32 power_;
  ::google::protobuf::int32 phyattack_;
  ::google::protobuf::int32 phyattackmax_;
  ::google::protobuf::int32 phydefence_;
  ::google::protobuf::int32 magicattack_;
  ::google::protobuf::int32 magicattackmax_;
  ::google::protobuf::int32 magicdefence_;
  ::google::protobuf::int32 hitrate_;
  ::google::protobuf::int32 avoidrate_;
  ::google::protobuf::int32 baselucky_;
  ::google::protobuf::int32 crackdownrate_;
  ::google::protobuf::int32 baserte_;
  ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ItemInfo > equip_;
  ::google::protobuf::int32 fight_;
  ::google::protobuf::int32 powermax_;
  ::google::protobuf::int64 exp_;
  ::google::protobuf::int32 lv_;
  ::google::protobuf::int32 magicequipid_;
  ::std::string* guildname_;
  ::google::protobuf::int32 guildjob_;
  ::google::protobuf::int32 titleid_;
  ::google::protobuf::int32 pkcount_;
  ::google::protobuf::int32 viplv_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(37 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static BeyondPlayerInfo* default_instance_;
};
// -------------------------------------------------------------------

class GMGetWSAckData : public ::google::protobuf::Message {
 public:
  GMGetWSAckData();
  virtual ~GMGetWSAckData();

  GMGetWSAckData(const GMGetWSAckData& from);

  inline GMGetWSAckData& operator=(const GMGetWSAckData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMGetWSAckData& default_instance();

  void Swap(GMGetWSAckData* other);

  // implements Message ----------------------------------------------

  GMGetWSAckData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMGetWSAckData& from);
  void MergeFrom(const GMGetWSAckData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 clanID = 1;
  inline bool has_clanid() const;
  inline void clear_clanid();
  static const int kClanIDFieldNumber = 1;
  inline ::google::protobuf::int32 clanid() const;
  inline void set_clanid(::google::protobuf::int32 value);

  // optional int32 clanLevel = 2;
  inline bool has_clanlevel() const;
  inline void clear_clanlevel();
  static const int kClanLevelFieldNumber = 2;
  inline ::google::protobuf::int32 clanlevel() const;
  inline void set_clanlevel(::google::protobuf::int32 value);

  // optional string clanName = 3;
  inline bool has_clanname() const;
  inline void clear_clanname();
  static const int kClanNameFieldNumber = 3;
  inline const ::std::string& clanname() const;
  inline void set_clanname(const ::std::string& value);
  inline void set_clanname(const char* value);
  inline void set_clanname(const char* value, size_t size);
  inline ::std::string* mutable_clanname();
  inline ::std::string* release_clanname();
  inline void set_allocated_clanname(::std::string* clanname);

  // optional int32 fajob = 4;
  inline bool has_fajob() const;
  inline void clear_fajob();
  static const int kFajobFieldNumber = 4;
  inline ::google::protobuf::int32 fajob() const;
  inline void set_fajob(::google::protobuf::int32 value);

  // optional int32 clanicon = 5;
  inline bool has_clanicon() const;
  inline void clear_clanicon();
  static const int kClaniconFieldNumber = 5;
  inline ::google::protobuf::int32 clanicon() const;
  inline void set_clanicon(::google::protobuf::int32 value);

  // optional int32 facontribution = 6;
  inline bool has_facontribution() const;
  inline void clear_facontribution();
  static const int kFacontributionFieldNumber = 6;
  inline ::google::protobuf::int32 facontribution() const;
  inline void set_facontribution(::google::protobuf::int32 value);

  // optional int64 teamid = 7;
  inline bool has_teamid() const;
  inline void clear_teamid();
  static const int kTeamidFieldNumber = 7;
  inline ::google::protobuf::int64 teamid() const;
  inline void set_teamid(::google::protobuf::int64 value);

  // repeated int32 title = 8;
  inline int title_size() const;
  inline void clear_title();
  static const int kTitleFieldNumber = 8;
  inline ::google::protobuf::int32 title(int index) const;
  inline void set_title(int index, ::google::protobuf::int32 value);
  inline void add_title(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      title() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_title();

  // optional int64 marryotherid = 9;
  inline bool has_marryotherid() const;
  inline void clear_marryotherid();
  static const int kMarryotheridFieldNumber = 9;
  inline ::google::protobuf::int64 marryotherid() const;
  inline void set_marryotherid(::google::protobuf::int64 value);

  // optional bytes marryothername = 10;
  inline bool has_marryothername() const;
  inline void clear_marryothername();
  static const int kMarryothernameFieldNumber = 10;
  inline const ::std::string& marryothername() const;
  inline void set_marryothername(const ::std::string& value);
  inline void set_marryothername(const char* value);
  inline void set_marryothername(const void* value, size_t size);
  inline ::std::string* mutable_marryothername();
  inline ::std::string* release_marryothername();
  inline void set_allocated_marryothername(::std::string* marryothername);

  // optional int64 marryTime = 11;
  inline bool has_marrytime() const;
  inline void clear_marrytime();
  static const int kMarryTimeFieldNumber = 11;
  inline ::google::protobuf::int64 marrytime() const;
  inline void set_marrytime(::google::protobuf::int64 value);

  // optional int32 reqClanNum = 12;
  inline bool has_reqclannum() const;
  inline void clear_reqclannum();
  static const int kReqClanNumFieldNumber = 12;
  inline ::google::protobuf::int32 reqclannum() const;
  inline void set_reqclannum(::google::protobuf::int32 value);

  // optional int32 envelopeCnt = 13;
  inline bool has_envelopecnt() const;
  inline void clear_envelopecnt();
  static const int kEnvelopeCntFieldNumber = 13;
  inline ::google::protobuf::int32 envelopecnt() const;
  inline void set_envelopecnt(::google::protobuf::int32 value);

  // optional int32 canGetDistReward = 14;
  inline bool has_cangetdistreward() const;
  inline void clear_cangetdistreward();
  static const int kCanGetDistRewardFieldNumber = 14;
  inline ::google::protobuf::int32 cangetdistreward() const;
  inline void set_cangetdistreward(::google::protobuf::int32 value);

  // optional int32 canGetDrawEnveReward = 15;
  inline bool has_cangetdrawenvereward() const;
  inline void clear_cangetdrawenvereward();
  static const int kCanGetDrawEnveRewardFieldNumber = 15;
  inline ::google::protobuf::int32 cangetdrawenvereward() const;
  inline void set_cangetdrawenvereward(::google::protobuf::int32 value);

  // optional bool isAnswerBegin = 16;
  inline bool has_isanswerbegin() const;
  inline void clear_isanswerbegin();
  static const int kIsAnswerBeginFieldNumber = 16;
  inline bool isanswerbegin() const;
  inline void set_isanswerbegin(bool value);

  // optional bool isProtectKingDouble = 17;
  inline bool has_isprotectkingdouble() const;
  inline void clear_isprotectkingdouble();
  static const int kIsProtectKingDoubleFieldNumber = 17;
  inline bool isprotectkingdouble() const;
  inline void set_isprotectkingdouble(bool value);

  // optional bool isPvpFightWarBegin = 18;
  inline bool has_ispvpfightwarbegin() const;
  inline void clear_ispvpfightwarbegin();
  static const int kIsPvpFightWarBeginFieldNumber = 18;
  inline bool ispvpfightwarbegin() const;
  inline void set_ispvpfightwarbegin(bool value);

  // optional bool isEscortDoubleBegin = 19;
  inline bool has_isescortdoublebegin() const;
  inline void clear_isescortdoublebegin();
  static const int kIsEscortDoubleBeginFieldNumber = 19;
  inline bool isescortdoublebegin() const;
  inline void set_isescortdoublebegin(bool value);

  // optional bool isClanWarBegin = 20;
  inline bool has_isclanwarbegin() const;
  inline void clear_isclanwarbegin();
  static const int kIsClanWarBeginFieldNumber = 20;
  inline bool isclanwarbegin() const;
  inline void set_isclanwarbegin(bool value);

  // repeated int32 worldBossOpenID = 21;
  inline int worldbossopenid_size() const;
  inline void clear_worldbossopenid();
  static const int kWorldBossOpenIDFieldNumber = 21;
  inline ::google::protobuf::int32 worldbossopenid(int index) const;
  inline void set_worldbossopenid(int index, ::google::protobuf::int32 value);
  inline void add_worldbossopenid(::google::protobuf::int32 value);
  inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
      worldbossopenid() const;
  inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
      mutable_worldbossopenid();

  // optional .CharLogin.ActivityStateList list = 22;
  inline bool has_list() const;
  inline void clear_list();
  static const int kListFieldNumber = 22;
  inline const ::CharLogin::ActivityStateList& list() const;
  inline ::CharLogin::ActivityStateList* mutable_list();
  inline ::CharLogin::ActivityStateList* release_list();
  inline void set_allocated_list(::CharLogin::ActivityStateList* list);

  // @@protoc_insertion_point(class_scope:CharLogin.GMGetWSAckData)
 private:
  inline void set_has_clanid();
  inline void clear_has_clanid();
  inline void set_has_clanlevel();
  inline void clear_has_clanlevel();
  inline void set_has_clanname();
  inline void clear_has_clanname();
  inline void set_has_fajob();
  inline void clear_has_fajob();
  inline void set_has_clanicon();
  inline void clear_has_clanicon();
  inline void set_has_facontribution();
  inline void clear_has_facontribution();
  inline void set_has_teamid();
  inline void clear_has_teamid();
  inline void set_has_marryotherid();
  inline void clear_has_marryotherid();
  inline void set_has_marryothername();
  inline void clear_has_marryothername();
  inline void set_has_marrytime();
  inline void clear_has_marrytime();
  inline void set_has_reqclannum();
  inline void clear_has_reqclannum();
  inline void set_has_envelopecnt();
  inline void clear_has_envelopecnt();
  inline void set_has_cangetdistreward();
  inline void clear_has_cangetdistreward();
  inline void set_has_cangetdrawenvereward();
  inline void clear_has_cangetdrawenvereward();
  inline void set_has_isanswerbegin();
  inline void clear_has_isanswerbegin();
  inline void set_has_isprotectkingdouble();
  inline void clear_has_isprotectkingdouble();
  inline void set_has_ispvpfightwarbegin();
  inline void clear_has_ispvpfightwarbegin();
  inline void set_has_isescortdoublebegin();
  inline void clear_has_isescortdoublebegin();
  inline void set_has_isclanwarbegin();
  inline void clear_has_isclanwarbegin();
  inline void set_has_list();
  inline void clear_has_list();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 clanid_;
  ::google::protobuf::int32 clanlevel_;
  ::std::string* clanname_;
  ::google::protobuf::int32 fajob_;
  ::google::protobuf::int32 clanicon_;
  ::google::protobuf::int64 teamid_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > title_;
  ::google::protobuf::int64 marryotherid_;
  ::google::protobuf::int32 facontribution_;
  ::google::protobuf::int32 reqclannum_;
  ::std::string* marryothername_;
  ::google::protobuf::int64 marrytime_;
  ::google::protobuf::int32 envelopecnt_;
  ::google::protobuf::int32 cangetdistreward_;
  ::google::protobuf::int32 cangetdrawenvereward_;
  bool isanswerbegin_;
  bool isprotectkingdouble_;
  bool ispvpfightwarbegin_;
  bool isescortdoublebegin_;
  ::google::protobuf::RepeatedField< ::google::protobuf::int32 > worldbossopenid_;
  ::CharLogin::ActivityStateList* list_;
  bool isclanwarbegin_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(22 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static GMGetWSAckData* default_instance_;
};
// -------------------------------------------------------------------

class GMGetWSRequestData : public ::google::protobuf::Message {
 public:
  GMGetWSRequestData();
  virtual ~GMGetWSRequestData();

  GMGetWSRequestData(const GMGetWSRequestData& from);

  inline GMGetWSRequestData& operator=(const GMGetWSRequestData& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const GMGetWSRequestData& default_instance();

  void Swap(GMGetWSRequestData* other);

  // implements Message ----------------------------------------------

  GMGetWSRequestData* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const GMGetWSRequestData& from);
  void MergeFrom(const GMGetWSRequestData& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional .CharLogin.WBaseInfo info = 1;
  inline bool has_info() const;
  inline void clear_info();
  static const int kInfoFieldNumber = 1;
  inline const ::CharLogin::WBaseInfo& info() const;
  inline ::CharLogin::WBaseInfo* mutable_info();
  inline ::CharLogin::WBaseInfo* release_info();
  inline void set_allocated_info(::CharLogin::WBaseInfo* info);

  // @@protoc_insertion_point(class_scope:CharLogin.GMGetWSRequestData)
 private:
  inline void set_has_info();
  inline void clear_has_info();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::CharLogin::WBaseInfo* info_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static GMGetWSRequestData* default_instance_;
};
// -------------------------------------------------------------------

class ActivityStateList : public ::google::protobuf::Message {
 public:
  ActivityStateList();
  virtual ~ActivityStateList();

  ActivityStateList(const ActivityStateList& from);

  inline ActivityStateList& operator=(const ActivityStateList& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityStateList& default_instance();

  void Swap(ActivityStateList* other);

  // implements Message ----------------------------------------------

  ActivityStateList* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityStateList& from);
  void MergeFrom(const ActivityStateList& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // repeated .CharLogin.ActivityState states = 1;
  inline int states_size() const;
  inline void clear_states();
  static const int kStatesFieldNumber = 1;
  inline const ::CharLogin::ActivityState& states(int index) const;
  inline ::CharLogin::ActivityState* mutable_states(int index);
  inline ::CharLogin::ActivityState* add_states();
  inline const ::google::protobuf::RepeatedPtrField< ::CharLogin::ActivityState >&
      states() const;
  inline ::google::protobuf::RepeatedPtrField< ::CharLogin::ActivityState >*
      mutable_states();

  // @@protoc_insertion_point(class_scope:CharLogin.ActivityStateList)
 private:

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::RepeatedPtrField< ::CharLogin::ActivityState > states_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(1 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static ActivityStateList* default_instance_;
};
// -------------------------------------------------------------------

class ActivityState : public ::google::protobuf::Message {
 public:
  ActivityState();
  virtual ~ActivityState();

  ActivityState(const ActivityState& from);

  inline ActivityState& operator=(const ActivityState& from) {
    CopyFrom(from);
    return *this;
  }

  inline const ::google::protobuf::UnknownFieldSet& unknown_fields() const {
    return _unknown_fields_;
  }

  inline ::google::protobuf::UnknownFieldSet* mutable_unknown_fields() {
    return &_unknown_fields_;
  }

  static const ::google::protobuf::Descriptor* descriptor();
  static const ActivityState& default_instance();

  void Swap(ActivityState* other);

  // implements Message ----------------------------------------------

  ActivityState* New() const;
  void CopyFrom(const ::google::protobuf::Message& from);
  void MergeFrom(const ::google::protobuf::Message& from);
  void CopyFrom(const ActivityState& from);
  void MergeFrom(const ActivityState& from);
  void Clear();
  bool IsInitialized() const;

  int ByteSize() const;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input);
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const;
  ::google::protobuf::uint8* SerializeWithCachedSizesToArray(::google::protobuf::uint8* output) const;
  int GetCachedSize() const { return _cached_size_; }
  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const;
  public:

  ::google::protobuf::Metadata GetMetadata() const;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // optional int32 type = 1;
  inline bool has_type() const;
  inline void clear_type();
  static const int kTypeFieldNumber = 1;
  inline ::google::protobuf::int32 type() const;
  inline void set_type(::google::protobuf::int32 value);

  // optional bool flag = 2;
  inline bool has_flag() const;
  inline void clear_flag();
  static const int kFlagFieldNumber = 2;
  inline bool flag() const;
  inline void set_flag(bool value);

  // optional int32 num = 3;
  inline bool has_num() const;
  inline void clear_num();
  static const int kNumFieldNumber = 3;
  inline ::google::protobuf::int32 num() const;
  inline void set_num(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:CharLogin.ActivityState)
 private:
  inline void set_has_type();
  inline void clear_has_type();
  inline void set_has_flag();
  inline void clear_has_flag();
  inline void set_has_num();
  inline void clear_has_num();

  ::google::protobuf::UnknownFieldSet _unknown_fields_;

  ::google::protobuf::int32 type_;
  bool flag_;
  ::google::protobuf::int32 num_;

  mutable int _cached_size_;
  ::google::protobuf::uint32 _has_bits_[(3 + 31) / 32];

  friend void  protobuf_AddDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_AssignDesc_CharLogin_2fCharBaseInfo_2eproto();
  friend void protobuf_ShutdownFile_CharLogin_2fCharBaseInfo_2eproto();

  void InitAsDefaultInstance();
  static ActivityState* default_instance_;
};
// ===================================================================


// ===================================================================

// POneTalentSkill

// optional int32 talentID = 1;
inline bool POneTalentSkill::has_talentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void POneTalentSkill::set_has_talentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void POneTalentSkill::clear_has_talentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void POneTalentSkill::clear_talentid() {
  talentid_ = 0;
  clear_has_talentid();
}
inline ::google::protobuf::int32 POneTalentSkill::talentid() const {
  return talentid_;
}
inline void POneTalentSkill::set_talentid(::google::protobuf::int32 value) {
  set_has_talentid();
  talentid_ = value;
}

// repeated int32 skillList = 2;
inline int POneTalentSkill::skilllist_size() const {
  return skilllist_.size();
}
inline void POneTalentSkill::clear_skilllist() {
  skilllist_.Clear();
}
inline ::google::protobuf::int32 POneTalentSkill::skilllist(int index) const {
  return skilllist_.Get(index);
}
inline void POneTalentSkill::set_skilllist(int index, ::google::protobuf::int32 value) {
  skilllist_.Set(index, value);
}
inline void POneTalentSkill::add_skilllist(::google::protobuf::int32 value) {
  skilllist_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
POneTalentSkill::skilllist() const {
  return skilllist_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
POneTalentSkill::mutable_skilllist() {
  return &skilllist_;
}

// -------------------------------------------------------------------

// skillInfoPro

// optional int32 currentTalentID = 1;
inline bool skillInfoPro::has_currenttalentid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void skillInfoPro::set_has_currenttalentid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void skillInfoPro::clear_has_currenttalentid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void skillInfoPro::clear_currenttalentid() {
  currenttalentid_ = 0;
  clear_has_currenttalentid();
}
inline ::google::protobuf::int32 skillInfoPro::currenttalentid() const {
  return currenttalentid_;
}
inline void skillInfoPro::set_currenttalentid(::google::protobuf::int32 value) {
  set_has_currenttalentid();
  currenttalentid_ = value;
}

// repeated .CharLogin.POneTalentSkill talents = 2;
inline int skillInfoPro::talents_size() const {
  return talents_.size();
}
inline void skillInfoPro::clear_talents() {
  talents_.Clear();
}
inline const ::CharLogin::POneTalentSkill& skillInfoPro::talents(int index) const {
  return talents_.Get(index);
}
inline ::CharLogin::POneTalentSkill* skillInfoPro::mutable_talents(int index) {
  return talents_.Mutable(index);
}
inline ::CharLogin::POneTalentSkill* skillInfoPro::add_talents() {
  return talents_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CharLogin::POneTalentSkill >&
skillInfoPro::talents() const {
  return talents_;
}
inline ::google::protobuf::RepeatedPtrField< ::CharLogin::POneTalentSkill >*
skillInfoPro::mutable_talents() {
  return &talents_;
}

// -------------------------------------------------------------------

// CharBaseInfo

// required int64 charid = 1;
inline bool CharBaseInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharBaseInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharBaseInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharBaseInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 CharBaseInfo::charid() const {
  return charid_;
}
inline void CharBaseInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required int32 key = 2;
inline bool CharBaseInfo::has_key() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharBaseInfo::set_has_key() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharBaseInfo::clear_has_key() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharBaseInfo::clear_key() {
  key_ = 0;
  clear_has_key();
}
inline ::google::protobuf::int32 CharBaseInfo::key() const {
  return key_;
}
inline void CharBaseInfo::set_key(::google::protobuf::int32 value) {
  set_has_key();
  key_ = value;
}

// required string name = 3;
inline bool CharBaseInfo::has_name() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void CharBaseInfo::set_has_name() {
  _has_bits_[0] |= 0x00000004u;
}
inline void CharBaseInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void CharBaseInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& CharBaseInfo::name() const {
  return *name_;
}
inline void CharBaseInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CharBaseInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void CharBaseInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharBaseInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* CharBaseInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharBaseInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 level = 4;
inline bool CharBaseInfo::has_level() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void CharBaseInfo::set_has_level() {
  _has_bits_[0] |= 0x00000008u;
}
inline void CharBaseInfo::clear_has_level() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void CharBaseInfo::clear_level() {
  level_ = 0;
  clear_has_level();
}
inline ::google::protobuf::int32 CharBaseInfo::level() const {
  return level_;
}
inline void CharBaseInfo::set_level(::google::protobuf::int32 value) {
  set_has_level();
  level_ = value;
}

// required int32 hp = 5;
inline bool CharBaseInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void CharBaseInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void CharBaseInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void CharBaseInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 CharBaseInfo::hp() const {
  return hp_;
}
inline void CharBaseInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// required int32 hpmax = 6;
inline bool CharBaseInfo::has_hpmax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void CharBaseInfo::set_has_hpmax() {
  _has_bits_[0] |= 0x00000020u;
}
inline void CharBaseInfo::clear_has_hpmax() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void CharBaseInfo::clear_hpmax() {
  hpmax_ = 0;
  clear_has_hpmax();
}
inline ::google::protobuf::int32 CharBaseInfo::hpmax() const {
  return hpmax_;
}
inline void CharBaseInfo::set_hpmax(::google::protobuf::int32 value) {
  set_has_hpmax();
  hpmax_ = value;
}

// required int32 mp = 7;
inline bool CharBaseInfo::has_mp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void CharBaseInfo::set_has_mp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void CharBaseInfo::clear_has_mp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void CharBaseInfo::clear_mp() {
  mp_ = 0;
  clear_has_mp();
}
inline ::google::protobuf::int32 CharBaseInfo::mp() const {
  return mp_;
}
inline void CharBaseInfo::set_mp(::google::protobuf::int32 value) {
  set_has_mp();
  mp_ = value;
}

// required int32 mpmax = 8;
inline bool CharBaseInfo::has_mpmax() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void CharBaseInfo::set_has_mpmax() {
  _has_bits_[0] |= 0x00000080u;
}
inline void CharBaseInfo::clear_has_mpmax() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void CharBaseInfo::clear_mpmax() {
  mpmax_ = 0;
  clear_has_mpmax();
}
inline ::google::protobuf::int32 CharBaseInfo::mpmax() const {
  return mpmax_;
}
inline void CharBaseInfo::set_mpmax(::google::protobuf::int32 value) {
  set_has_mpmax();
  mpmax_ = value;
}

// required int64 mapid = 9;
inline bool CharBaseInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void CharBaseInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void CharBaseInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void CharBaseInfo::clear_mapid() {
  mapid_ = GOOGLE_LONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::int64 CharBaseInfo::mapid() const {
  return mapid_;
}
inline void CharBaseInfo::set_mapid(::google::protobuf::int64 value) {
  set_has_mapid();
  mapid_ = value;
}

// required int32 xpos = 10;
inline bool CharBaseInfo::has_xpos() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void CharBaseInfo::set_has_xpos() {
  _has_bits_[0] |= 0x00000200u;
}
inline void CharBaseInfo::clear_has_xpos() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void CharBaseInfo::clear_xpos() {
  xpos_ = 0;
  clear_has_xpos();
}
inline ::google::protobuf::int32 CharBaseInfo::xpos() const {
  return xpos_;
}
inline void CharBaseInfo::set_xpos(::google::protobuf::int32 value) {
  set_has_xpos();
  xpos_ = value;
}

// required int32 ypos = 11;
inline bool CharBaseInfo::has_ypos() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void CharBaseInfo::set_has_ypos() {
  _has_bits_[0] |= 0x00000400u;
}
inline void CharBaseInfo::clear_has_ypos() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void CharBaseInfo::clear_ypos() {
  ypos_ = 0;
  clear_has_ypos();
}
inline ::google::protobuf::int32 CharBaseInfo::ypos() const {
  return ypos_;
}
inline void CharBaseInfo::set_ypos(::google::protobuf::int32 value) {
  set_has_ypos();
  ypos_ = value;
}

// required int64 exp = 12;
inline bool CharBaseInfo::has_exp() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void CharBaseInfo::set_has_exp() {
  _has_bits_[0] |= 0x00000800u;
}
inline void CharBaseInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void CharBaseInfo::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 CharBaseInfo::exp() const {
  return exp_;
}
inline void CharBaseInfo::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// required int32 country = 13;
inline bool CharBaseInfo::has_country() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void CharBaseInfo::set_has_country() {
  _has_bits_[0] |= 0x00001000u;
}
inline void CharBaseInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void CharBaseInfo::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 CharBaseInfo::country() const {
  return country_;
}
inline void CharBaseInfo::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// required int32 faction = 14;
inline bool CharBaseInfo::has_faction() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void CharBaseInfo::set_has_faction() {
  _has_bits_[0] |= 0x00002000u;
}
inline void CharBaseInfo::clear_has_faction() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void CharBaseInfo::clear_faction() {
  faction_ = 0;
  clear_has_faction();
}
inline ::google::protobuf::int32 CharBaseInfo::faction() const {
  return faction_;
}
inline void CharBaseInfo::set_faction(::google::protobuf::int32 value) {
  set_has_faction();
  faction_ = value;
}

// required int32 sex = 15;
inline bool CharBaseInfo::has_sex() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void CharBaseInfo::set_has_sex() {
  _has_bits_[0] |= 0x00004000u;
}
inline void CharBaseInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void CharBaseInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 CharBaseInfo::sex() const {
  return sex_;
}
inline void CharBaseInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// required int32 profession = 16;
inline bool CharBaseInfo::has_profession() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void CharBaseInfo::set_has_profession() {
  _has_bits_[0] |= 0x00008000u;
}
inline void CharBaseInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void CharBaseInfo::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 CharBaseInfo::profession() const {
  return profession_;
}
inline void CharBaseInfo::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// required int32 force = 17;
inline bool CharBaseInfo::has_force() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void CharBaseInfo::set_has_force() {
  _has_bits_[0] |= 0x00010000u;
}
inline void CharBaseInfo::clear_has_force() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void CharBaseInfo::clear_force() {
  force_ = 0;
  clear_has_force();
}
inline ::google::protobuf::int32 CharBaseInfo::force() const {
  return force_;
}
inline void CharBaseInfo::set_force(::google::protobuf::int32 value) {
  set_has_force();
  force_ = value;
}

// required int32 forcemax = 18;
inline bool CharBaseInfo::has_forcemax() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void CharBaseInfo::set_has_forcemax() {
  _has_bits_[0] |= 0x00020000u;
}
inline void CharBaseInfo::clear_has_forcemax() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void CharBaseInfo::clear_forcemax() {
  forcemax_ = 0;
  clear_has_forcemax();
}
inline ::google::protobuf::int32 CharBaseInfo::forcemax() const {
  return forcemax_;
}
inline void CharBaseInfo::set_forcemax(::google::protobuf::int32 value) {
  set_has_forcemax();
  forcemax_ = value;
}

// required int32 movespeed = 19;
inline bool CharBaseInfo::has_movespeed() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void CharBaseInfo::set_has_movespeed() {
  _has_bits_[0] |= 0x00040000u;
}
inline void CharBaseInfo::clear_has_movespeed() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void CharBaseInfo::clear_movespeed() {
  movespeed_ = 0;
  clear_has_movespeed();
}
inline ::google::protobuf::int32 CharBaseInfo::movespeed() const {
  return movespeed_;
}
inline void CharBaseInfo::set_movespeed(::google::protobuf::int32 value) {
  set_has_movespeed();
  movespeed_ = value;
}

// optional .CharLogin.EquipQuickInfo nowequip = 20;
inline bool CharBaseInfo::has_nowequip() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void CharBaseInfo::set_has_nowequip() {
  _has_bits_[0] |= 0x00080000u;
}
inline void CharBaseInfo::clear_has_nowequip() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void CharBaseInfo::clear_nowequip() {
  if (nowequip_ != NULL) nowequip_->::CharLogin::EquipQuickInfo::Clear();
  clear_has_nowequip();
}
inline const ::CharLogin::EquipQuickInfo& CharBaseInfo::nowequip() const {
  return nowequip_ != NULL ? *nowequip_ : *default_instance_->nowequip_;
}
inline ::CharLogin::EquipQuickInfo* CharBaseInfo::mutable_nowequip() {
  set_has_nowequip();
  if (nowequip_ == NULL) nowequip_ = new ::CharLogin::EquipQuickInfo;
  return nowequip_;
}
inline ::CharLogin::EquipQuickInfo* CharBaseInfo::release_nowequip() {
  clear_has_nowequip();
  ::CharLogin::EquipQuickInfo* temp = nowequip_;
  nowequip_ = NULL;
  return temp;
}
inline void CharBaseInfo::set_allocated_nowequip(::CharLogin::EquipQuickInfo* nowequip) {
  delete nowequip_;
  nowequip_ = nowequip;
  if (nowequip) {
    set_has_nowequip();
  } else {
    clear_has_nowequip();
  }
}

// optional .CharLogin.skillInfoPro skillinfo = 21;
inline bool CharBaseInfo::has_skillinfo() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void CharBaseInfo::set_has_skillinfo() {
  _has_bits_[0] |= 0x00100000u;
}
inline void CharBaseInfo::clear_has_skillinfo() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void CharBaseInfo::clear_skillinfo() {
  if (skillinfo_ != NULL) skillinfo_->::CharLogin::skillInfoPro::Clear();
  clear_has_skillinfo();
}
inline const ::CharLogin::skillInfoPro& CharBaseInfo::skillinfo() const {
  return skillinfo_ != NULL ? *skillinfo_ : *default_instance_->skillinfo_;
}
inline ::CharLogin::skillInfoPro* CharBaseInfo::mutable_skillinfo() {
  set_has_skillinfo();
  if (skillinfo_ == NULL) skillinfo_ = new ::CharLogin::skillInfoPro;
  return skillinfo_;
}
inline ::CharLogin::skillInfoPro* CharBaseInfo::release_skillinfo() {
  clear_has_skillinfo();
  ::CharLogin::skillInfoPro* temp = skillinfo_;
  skillinfo_ = NULL;
  return temp;
}
inline void CharBaseInfo::set_allocated_skillinfo(::CharLogin::skillInfoPro* skillinfo) {
  delete skillinfo_;
  skillinfo_ = skillinfo;
  if (skillinfo) {
    set_has_skillinfo();
  } else {
    clear_has_skillinfo();
  }
}

// repeated .CharLogin.CharCDTime cd = 22;
inline int CharBaseInfo::cd_size() const {
  return cd_.size();
}
inline void CharBaseInfo::clear_cd() {
  cd_.Clear();
}
inline const ::CharLogin::CharCDTime& CharBaseInfo::cd(int index) const {
  return cd_.Get(index);
}
inline ::CharLogin::CharCDTime* CharBaseInfo::mutable_cd(int index) {
  return cd_.Mutable(index);
}
inline ::CharLogin::CharCDTime* CharBaseInfo::add_cd() {
  return cd_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CharLogin::CharCDTime >&
CharBaseInfo::cd() const {
  return cd_;
}
inline ::google::protobuf::RepeatedPtrField< ::CharLogin::CharCDTime >*
CharBaseInfo::mutable_cd() {
  return &cd_;
}

// optional .PlayerInfo.MonitorInfo mt = 23;
inline bool CharBaseInfo::has_mt() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void CharBaseInfo::set_has_mt() {
  _has_bits_[0] |= 0x00400000u;
}
inline void CharBaseInfo::clear_has_mt() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void CharBaseInfo::clear_mt() {
  if (mt_ != NULL) mt_->::PlayerInfo::MonitorInfo::Clear();
  clear_has_mt();
}
inline const ::PlayerInfo::MonitorInfo& CharBaseInfo::mt() const {
  return mt_ != NULL ? *mt_ : *default_instance_->mt_;
}
inline ::PlayerInfo::MonitorInfo* CharBaseInfo::mutable_mt() {
  set_has_mt();
  if (mt_ == NULL) mt_ = new ::PlayerInfo::MonitorInfo;
  return mt_;
}
inline ::PlayerInfo::MonitorInfo* CharBaseInfo::release_mt() {
  clear_has_mt();
  ::PlayerInfo::MonitorInfo* temp = mt_;
  mt_ = NULL;
  return temp;
}
inline void CharBaseInfo::set_allocated_mt(::PlayerInfo::MonitorInfo* mt) {
  delete mt_;
  mt_ = mt;
  if (mt) {
    set_has_mt();
  } else {
    clear_has_mt();
  }
}

// optional uint32 horse = 24;
inline bool CharBaseInfo::has_horse() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void CharBaseInfo::set_has_horse() {
  _has_bits_[0] |= 0x00800000u;
}
inline void CharBaseInfo::clear_has_horse() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void CharBaseInfo::clear_horse() {
  horse_ = 0u;
  clear_has_horse();
}
inline ::google::protobuf::uint32 CharBaseInfo::horse() const {
  return horse_;
}
inline void CharBaseInfo::set_horse(::google::protobuf::uint32 value) {
  set_has_horse();
  horse_ = value;
}

// optional int32 sinvalue = 25;
inline bool CharBaseInfo::has_sinvalue() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void CharBaseInfo::set_has_sinvalue() {
  _has_bits_[0] |= 0x01000000u;
}
inline void CharBaseInfo::clear_has_sinvalue() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void CharBaseInfo::clear_sinvalue() {
  sinvalue_ = 0;
  clear_has_sinvalue();
}
inline ::google::protobuf::int32 CharBaseInfo::sinvalue() const {
  return sinvalue_;
}
inline void CharBaseInfo::set_sinvalue(::google::protobuf::int32 value) {
  set_has_sinvalue();
  sinvalue_ = value;
}

// optional int32 acupoint = 26;
inline bool CharBaseInfo::has_acupoint() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void CharBaseInfo::set_has_acupoint() {
  _has_bits_[0] |= 0x02000000u;
}
inline void CharBaseInfo::clear_has_acupoint() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void CharBaseInfo::clear_acupoint() {
  acupoint_ = 0;
  clear_has_acupoint();
}
inline ::google::protobuf::int32 CharBaseInfo::acupoint() const {
  return acupoint_;
}
inline void CharBaseInfo::set_acupoint(::google::protobuf::int32 value) {
  set_has_acupoint();
  acupoint_ = value;
}

// optional .PlayerInfo.SettingInfo settings = 27;
inline bool CharBaseInfo::has_settings() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void CharBaseInfo::set_has_settings() {
  _has_bits_[0] |= 0x04000000u;
}
inline void CharBaseInfo::clear_has_settings() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void CharBaseInfo::clear_settings() {
  if (settings_ != NULL) settings_->::PlayerInfo::SettingInfo::Clear();
  clear_has_settings();
}
inline const ::PlayerInfo::SettingInfo& CharBaseInfo::settings() const {
  return settings_ != NULL ? *settings_ : *default_instance_->settings_;
}
inline ::PlayerInfo::SettingInfo* CharBaseInfo::mutable_settings() {
  set_has_settings();
  if (settings_ == NULL) settings_ = new ::PlayerInfo::SettingInfo;
  return settings_;
}
inline ::PlayerInfo::SettingInfo* CharBaseInfo::release_settings() {
  clear_has_settings();
  ::PlayerInfo::SettingInfo* temp = settings_;
  settings_ = NULL;
  return temp;
}
inline void CharBaseInfo::set_allocated_settings(::PlayerInfo::SettingInfo* settings) {
  delete settings_;
  settings_ = settings;
  if (settings) {
    set_has_settings();
  } else {
    clear_has_settings();
  }
}

// optional double loginTime = 28;
inline bool CharBaseInfo::has_logintime() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void CharBaseInfo::set_has_logintime() {
  _has_bits_[0] |= 0x08000000u;
}
inline void CharBaseInfo::clear_has_logintime() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void CharBaseInfo::clear_logintime() {
  logintime_ = 0;
  clear_has_logintime();
}
inline double CharBaseInfo::logintime() const {
  return logintime_;
}
inline void CharBaseInfo::set_logintime(double value) {
  set_has_logintime();
  logintime_ = value;
}

// optional int32 fightPower = 29;
inline bool CharBaseInfo::has_fightpower() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void CharBaseInfo::set_has_fightpower() {
  _has_bits_[0] |= 0x10000000u;
}
inline void CharBaseInfo::clear_has_fightpower() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void CharBaseInfo::clear_fightpower() {
  fightpower_ = 0;
  clear_has_fightpower();
}
inline ::google::protobuf::int32 CharBaseInfo::fightpower() const {
  return fightpower_;
}
inline void CharBaseInfo::set_fightpower(::google::protobuf::int32 value) {
  set_has_fightpower();
  fightpower_ = value;
}

// optional int32 titleId = 30;
inline bool CharBaseInfo::has_titleid() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void CharBaseInfo::set_has_titleid() {
  _has_bits_[0] |= 0x20000000u;
}
inline void CharBaseInfo::clear_has_titleid() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void CharBaseInfo::clear_titleid() {
  titleid_ = 0;
  clear_has_titleid();
}
inline ::google::protobuf::int32 CharBaseInfo::titleid() const {
  return titleid_;
}
inline void CharBaseInfo::set_titleid(::google::protobuf::int32 value) {
  set_has_titleid();
  titleid_ = value;
}

// optional int32 viplv = 31;
inline bool CharBaseInfo::has_viplv() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void CharBaseInfo::set_has_viplv() {
  _has_bits_[0] |= 0x40000000u;
}
inline void CharBaseInfo::clear_has_viplv() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void CharBaseInfo::clear_viplv() {
  viplv_ = 0;
  clear_has_viplv();
}
inline ::google::protobuf::int32 CharBaseInfo::viplv() const {
  return viplv_;
}
inline void CharBaseInfo::set_viplv(::google::protobuf::int32 value) {
  set_has_viplv();
  viplv_ = value;
}

// optional int32 addupgold = 32;
inline bool CharBaseInfo::has_addupgold() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void CharBaseInfo::set_has_addupgold() {
  _has_bits_[0] |= 0x80000000u;
}
inline void CharBaseInfo::clear_has_addupgold() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void CharBaseInfo::clear_addupgold() {
  addupgold_ = 0;
  clear_has_addupgold();
}
inline ::google::protobuf::int32 CharBaseInfo::addupgold() const {
  return addupgold_;
}
inline void CharBaseInfo::set_addupgold(::google::protobuf::int32 value) {
  set_has_addupgold();
  addupgold_ = value;
}

// optional int64 isininstance = 33;
inline bool CharBaseInfo::has_isininstance() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void CharBaseInfo::set_has_isininstance() {
  _has_bits_[1] |= 0x00000001u;
}
inline void CharBaseInfo::clear_has_isininstance() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void CharBaseInfo::clear_isininstance() {
  isininstance_ = GOOGLE_LONGLONG(0);
  clear_has_isininstance();
}
inline ::google::protobuf::int64 CharBaseInfo::isininstance() const {
  return isininstance_;
}
inline void CharBaseInfo::set_isininstance(::google::protobuf::int64 value) {
  set_has_isininstance();
  isininstance_ = value;
}

// optional int32 job = 34;
inline bool CharBaseInfo::has_job() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void CharBaseInfo::set_has_job() {
  _has_bits_[1] |= 0x00000002u;
}
inline void CharBaseInfo::clear_has_job() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void CharBaseInfo::clear_job() {
  job_ = 0;
  clear_has_job();
}
inline ::google::protobuf::int32 CharBaseInfo::job() const {
  return job_;
}
inline void CharBaseInfo::set_job(::google::protobuf::int32 value) {
  set_has_job();
  job_ = value;
}

// optional string clanname = 35;
inline bool CharBaseInfo::has_clanname() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void CharBaseInfo::set_has_clanname() {
  _has_bits_[1] |= 0x00000004u;
}
inline void CharBaseInfo::clear_has_clanname() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void CharBaseInfo::clear_clanname() {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    clanname_->clear();
  }
  clear_has_clanname();
}
inline const ::std::string& CharBaseInfo::clanname() const {
  return *clanname_;
}
inline void CharBaseInfo::set_clanname(const ::std::string& value) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(value);
}
inline void CharBaseInfo::set_clanname(const char* value) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(value);
}
inline void CharBaseInfo::set_clanname(const char* value, size_t size) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharBaseInfo::mutable_clanname() {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  return clanname_;
}
inline ::std::string* CharBaseInfo::release_clanname() {
  clear_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clanname_;
    clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharBaseInfo::set_allocated_clanname(::std::string* clanname) {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (clanname) {
    set_has_clanname();
    clanname_ = clanname;
  } else {
    clear_has_clanname();
    clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 AntiAddictionState = 36;
inline bool CharBaseInfo::has_antiaddictionstate() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void CharBaseInfo::set_has_antiaddictionstate() {
  _has_bits_[1] |= 0x00000008u;
}
inline void CharBaseInfo::clear_has_antiaddictionstate() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void CharBaseInfo::clear_antiaddictionstate() {
  antiaddictionstate_ = 0;
  clear_has_antiaddictionstate();
}
inline ::google::protobuf::int32 CharBaseInfo::antiaddictionstate() const {
  return antiaddictionstate_;
}
inline void CharBaseInfo::set_antiaddictionstate(::google::protobuf::int32 value) {
  set_has_antiaddictionstate();
  antiaddictionstate_ = value;
}

// optional int32 AntiAddictionOnLineTime = 37;
inline bool CharBaseInfo::has_antiaddictiononlinetime() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void CharBaseInfo::set_has_antiaddictiononlinetime() {
  _has_bits_[1] |= 0x00000010u;
}
inline void CharBaseInfo::clear_has_antiaddictiononlinetime() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void CharBaseInfo::clear_antiaddictiononlinetime() {
  antiaddictiononlinetime_ = 0;
  clear_has_antiaddictiononlinetime();
}
inline ::google::protobuf::int32 CharBaseInfo::antiaddictiononlinetime() const {
  return antiaddictiononlinetime_;
}
inline void CharBaseInfo::set_antiaddictiononlinetime(::google::protobuf::int32 value) {
  set_has_antiaddictiononlinetime();
  antiaddictiononlinetime_ = value;
}

// optional int32 pkType = 38;
inline bool CharBaseInfo::has_pktype() const {
  return (_has_bits_[1] & 0x00000020u) != 0;
}
inline void CharBaseInfo::set_has_pktype() {
  _has_bits_[1] |= 0x00000020u;
}
inline void CharBaseInfo::clear_has_pktype() {
  _has_bits_[1] &= ~0x00000020u;
}
inline void CharBaseInfo::clear_pktype() {
  pktype_ = 0;
  clear_has_pktype();
}
inline ::google::protobuf::int32 CharBaseInfo::pktype() const {
  return pktype_;
}
inline void CharBaseInfo::set_pktype(::google::protobuf::int32 value) {
  set_has_pktype();
  pktype_ = value;
}

// optional double totalOnlineTime = 39;
inline bool CharBaseInfo::has_totalonlinetime() const {
  return (_has_bits_[1] & 0x00000040u) != 0;
}
inline void CharBaseInfo::set_has_totalonlinetime() {
  _has_bits_[1] |= 0x00000040u;
}
inline void CharBaseInfo::clear_has_totalonlinetime() {
  _has_bits_[1] &= ~0x00000040u;
}
inline void CharBaseInfo::clear_totalonlinetime() {
  totalonlinetime_ = 0;
  clear_has_totalonlinetime();
}
inline double CharBaseInfo::totalonlinetime() const {
  return totalonlinetime_;
}
inline void CharBaseInfo::set_totalonlinetime(double value) {
  set_has_totalonlinetime();
  totalonlinetime_ = value;
}

// optional int32 clanicon = 40;
inline bool CharBaseInfo::has_clanicon() const {
  return (_has_bits_[1] & 0x00000080u) != 0;
}
inline void CharBaseInfo::set_has_clanicon() {
  _has_bits_[1] |= 0x00000080u;
}
inline void CharBaseInfo::clear_has_clanicon() {
  _has_bits_[1] &= ~0x00000080u;
}
inline void CharBaseInfo::clear_clanicon() {
  clanicon_ = 0;
  clear_has_clanicon();
}
inline ::google::protobuf::int32 CharBaseInfo::clanicon() const {
  return clanicon_;
}
inline void CharBaseInfo::set_clanicon(::google::protobuf::int32 value) {
  set_has_clanicon();
  clanicon_ = value;
}

// optional int32 money = 41;
inline bool CharBaseInfo::has_money() const {
  return (_has_bits_[1] & 0x00000100u) != 0;
}
inline void CharBaseInfo::set_has_money() {
  _has_bits_[1] |= 0x00000100u;
}
inline void CharBaseInfo::clear_has_money() {
  _has_bits_[1] &= ~0x00000100u;
}
inline void CharBaseInfo::clear_money() {
  money_ = 0;
  clear_has_money();
}
inline ::google::protobuf::int32 CharBaseInfo::money() const {
  return money_;
}
inline void CharBaseInfo::set_money(::google::protobuf::int32 value) {
  set_has_money();
  money_ = value;
}

// optional int32 gold = 42;
inline bool CharBaseInfo::has_gold() const {
  return (_has_bits_[1] & 0x00000200u) != 0;
}
inline void CharBaseInfo::set_has_gold() {
  _has_bits_[1] |= 0x00000200u;
}
inline void CharBaseInfo::clear_has_gold() {
  _has_bits_[1] &= ~0x00000200u;
}
inline void CharBaseInfo::clear_gold() {
  gold_ = 0;
  clear_has_gold();
}
inline ::google::protobuf::int32 CharBaseInfo::gold() const {
  return gold_;
}
inline void CharBaseInfo::set_gold(::google::protobuf::int32 value) {
  set_has_gold();
  gold_ = value;
}

// optional int32 bgold = 43;
inline bool CharBaseInfo::has_bgold() const {
  return (_has_bits_[1] & 0x00000400u) != 0;
}
inline void CharBaseInfo::set_has_bgold() {
  _has_bits_[1] |= 0x00000400u;
}
inline void CharBaseInfo::clear_has_bgold() {
  _has_bits_[1] &= ~0x00000400u;
}
inline void CharBaseInfo::clear_bgold() {
  bgold_ = 0;
  clear_has_bgold();
}
inline ::google::protobuf::int32 CharBaseInfo::bgold() const {
  return bgold_;
}
inline void CharBaseInfo::set_bgold(::google::protobuf::int32 value) {
  set_has_bgold();
  bgold_ = value;
}

// optional int32 fashionID = 44;
inline bool CharBaseInfo::has_fashionid() const {
  return (_has_bits_[1] & 0x00000800u) != 0;
}
inline void CharBaseInfo::set_has_fashionid() {
  _has_bits_[1] |= 0x00000800u;
}
inline void CharBaseInfo::clear_has_fashionid() {
  _has_bits_[1] &= ~0x00000800u;
}
inline void CharBaseInfo::clear_fashionid() {
  fashionid_ = 0;
  clear_has_fashionid();
}
inline ::google::protobuf::int32 CharBaseInfo::fashionid() const {
  return fashionid_;
}
inline void CharBaseInfo::set_fashionid(::google::protobuf::int32 value) {
  set_has_fashionid();
  fashionid_ = value;
}

// optional int32 rechargeState = 45;
inline bool CharBaseInfo::has_rechargestate() const {
  return (_has_bits_[1] & 0x00001000u) != 0;
}
inline void CharBaseInfo::set_has_rechargestate() {
  _has_bits_[1] |= 0x00001000u;
}
inline void CharBaseInfo::clear_has_rechargestate() {
  _has_bits_[1] &= ~0x00001000u;
}
inline void CharBaseInfo::clear_rechargestate() {
  rechargestate_ = 0;
  clear_has_rechargestate();
}
inline ::google::protobuf::int32 CharBaseInfo::rechargestate() const {
  return rechargestate_;
}
inline void CharBaseInfo::set_rechargestate(::google::protobuf::int32 value) {
  set_has_rechargestate();
  rechargestate_ = value;
}

// optional int64 coupleID = 46;
inline bool CharBaseInfo::has_coupleid() const {
  return (_has_bits_[1] & 0x00002000u) != 0;
}
inline void CharBaseInfo::set_has_coupleid() {
  _has_bits_[1] |= 0x00002000u;
}
inline void CharBaseInfo::clear_has_coupleid() {
  _has_bits_[1] &= ~0x00002000u;
}
inline void CharBaseInfo::clear_coupleid() {
  coupleid_ = GOOGLE_LONGLONG(0);
  clear_has_coupleid();
}
inline ::google::protobuf::int64 CharBaseInfo::coupleid() const {
  return coupleid_;
}
inline void CharBaseInfo::set_coupleid(::google::protobuf::int64 value) {
  set_has_coupleid();
  coupleid_ = value;
}

// optional int32 countryjob = 47;
inline bool CharBaseInfo::has_countryjob() const {
  return (_has_bits_[1] & 0x00004000u) != 0;
}
inline void CharBaseInfo::set_has_countryjob() {
  _has_bits_[1] |= 0x00004000u;
}
inline void CharBaseInfo::clear_has_countryjob() {
  _has_bits_[1] &= ~0x00004000u;
}
inline void CharBaseInfo::clear_countryjob() {
  countryjob_ = 0;
  clear_has_countryjob();
}
inline ::google::protobuf::int32 CharBaseInfo::countryjob() const {
  return countryjob_;
}
inline void CharBaseInfo::set_countryjob(::google::protobuf::int32 value) {
  set_has_countryjob();
  countryjob_ = value;
}

// optional int32 contrycontribute = 48;
inline bool CharBaseInfo::has_contrycontribute() const {
  return (_has_bits_[1] & 0x00008000u) != 0;
}
inline void CharBaseInfo::set_has_contrycontribute() {
  _has_bits_[1] |= 0x00008000u;
}
inline void CharBaseInfo::clear_has_contrycontribute() {
  _has_bits_[1] &= ~0x00008000u;
}
inline void CharBaseInfo::clear_contrycontribute() {
  contrycontribute_ = 0;
  clear_has_contrycontribute();
}
inline ::google::protobuf::int32 CharBaseInfo::contrycontribute() const {
  return contrycontribute_;
}
inline void CharBaseInfo::set_contrycontribute(::google::protobuf::int32 value) {
  set_has_contrycontribute();
  contrycontribute_ = value;
}

// optional int32 envelopeCount = 49;
inline bool CharBaseInfo::has_envelopecount() const {
  return (_has_bits_[1] & 0x00010000u) != 0;
}
inline void CharBaseInfo::set_has_envelopecount() {
  _has_bits_[1] |= 0x00010000u;
}
inline void CharBaseInfo::clear_has_envelopecount() {
  _has_bits_[1] &= ~0x00010000u;
}
inline void CharBaseInfo::clear_envelopecount() {
  envelopecount_ = 0;
  clear_has_envelopecount();
}
inline ::google::protobuf::int32 CharBaseInfo::envelopecount() const {
  return envelopecount_;
}
inline void CharBaseInfo::set_envelopecount(::google::protobuf::int32 value) {
  set_has_envelopecount();
  envelopecount_ = value;
}

// optional int32 credit = 50;
inline bool CharBaseInfo::has_credit() const {
  return (_has_bits_[1] & 0x00020000u) != 0;
}
inline void CharBaseInfo::set_has_credit() {
  _has_bits_[1] |= 0x00020000u;
}
inline void CharBaseInfo::clear_has_credit() {
  _has_bits_[1] &= ~0x00020000u;
}
inline void CharBaseInfo::clear_credit() {
  credit_ = 0;
  clear_has_credit();
}
inline ::google::protobuf::int32 CharBaseInfo::credit() const {
  return credit_;
}
inline void CharBaseInfo::set_credit(::google::protobuf::int32 value) {
  set_has_credit();
  credit_ = value;
}

// optional int32 is_yellow_vip = 51;
inline bool CharBaseInfo::has_is_yellow_vip() const {
  return (_has_bits_[1] & 0x00040000u) != 0;
}
inline void CharBaseInfo::set_has_is_yellow_vip() {
  _has_bits_[1] |= 0x00040000u;
}
inline void CharBaseInfo::clear_has_is_yellow_vip() {
  _has_bits_[1] &= ~0x00040000u;
}
inline void CharBaseInfo::clear_is_yellow_vip() {
  is_yellow_vip_ = 0;
  clear_has_is_yellow_vip();
}
inline ::google::protobuf::int32 CharBaseInfo::is_yellow_vip() const {
  return is_yellow_vip_;
}
inline void CharBaseInfo::set_is_yellow_vip(::google::protobuf::int32 value) {
  set_has_is_yellow_vip();
  is_yellow_vip_ = value;
}

// optional int32 is_yellow_year_vip = 52;
inline bool CharBaseInfo::has_is_yellow_year_vip() const {
  return (_has_bits_[1] & 0x00080000u) != 0;
}
inline void CharBaseInfo::set_has_is_yellow_year_vip() {
  _has_bits_[1] |= 0x00080000u;
}
inline void CharBaseInfo::clear_has_is_yellow_year_vip() {
  _has_bits_[1] &= ~0x00080000u;
}
inline void CharBaseInfo::clear_is_yellow_year_vip() {
  is_yellow_year_vip_ = 0;
  clear_has_is_yellow_year_vip();
}
inline ::google::protobuf::int32 CharBaseInfo::is_yellow_year_vip() const {
  return is_yellow_year_vip_;
}
inline void CharBaseInfo::set_is_yellow_year_vip(::google::protobuf::int32 value) {
  set_has_is_yellow_year_vip();
  is_yellow_year_vip_ = value;
}

// optional int32 yellow_vip_level = 53;
inline bool CharBaseInfo::has_yellow_vip_level() const {
  return (_has_bits_[1] & 0x00100000u) != 0;
}
inline void CharBaseInfo::set_has_yellow_vip_level() {
  _has_bits_[1] |= 0x00100000u;
}
inline void CharBaseInfo::clear_has_yellow_vip_level() {
  _has_bits_[1] &= ~0x00100000u;
}
inline void CharBaseInfo::clear_yellow_vip_level() {
  yellow_vip_level_ = 0;
  clear_has_yellow_vip_level();
}
inline ::google::protobuf::int32 CharBaseInfo::yellow_vip_level() const {
  return yellow_vip_level_;
}
inline void CharBaseInfo::set_yellow_vip_level(::google::protobuf::int32 value) {
  set_has_yellow_vip_level();
  yellow_vip_level_ = value;
}

// optional int32 is_yellow_high_vip = 54;
inline bool CharBaseInfo::has_is_yellow_high_vip() const {
  return (_has_bits_[1] & 0x00200000u) != 0;
}
inline void CharBaseInfo::set_has_is_yellow_high_vip() {
  _has_bits_[1] |= 0x00200000u;
}
inline void CharBaseInfo::clear_has_is_yellow_high_vip() {
  _has_bits_[1] &= ~0x00200000u;
}
inline void CharBaseInfo::clear_is_yellow_high_vip() {
  is_yellow_high_vip_ = 0;
  clear_has_is_yellow_high_vip();
}
inline ::google::protobuf::int32 CharBaseInfo::is_yellow_high_vip() const {
  return is_yellow_high_vip_;
}
inline void CharBaseInfo::set_is_yellow_high_vip(::google::protobuf::int32 value) {
  set_has_is_yellow_high_vip();
  is_yellow_high_vip_ = value;
}

// optional int32 vipCardLv = 55;
inline bool CharBaseInfo::has_vipcardlv() const {
  return (_has_bits_[1] & 0x00400000u) != 0;
}
inline void CharBaseInfo::set_has_vipcardlv() {
  _has_bits_[1] |= 0x00400000u;
}
inline void CharBaseInfo::clear_has_vipcardlv() {
  _has_bits_[1] &= ~0x00400000u;
}
inline void CharBaseInfo::clear_vipcardlv() {
  vipcardlv_ = 0;
  clear_has_vipcardlv();
}
inline ::google::protobuf::int32 CharBaseInfo::vipcardlv() const {
  return vipcardlv_;
}
inline void CharBaseInfo::set_vipcardlv(::google::protobuf::int32 value) {
  set_has_vipcardlv();
  vipcardlv_ = value;
}

// optional int64 vipCardTime = 56;
inline bool CharBaseInfo::has_vipcardtime() const {
  return (_has_bits_[1] & 0x00800000u) != 0;
}
inline void CharBaseInfo::set_has_vipcardtime() {
  _has_bits_[1] |= 0x00800000u;
}
inline void CharBaseInfo::clear_has_vipcardtime() {
  _has_bits_[1] &= ~0x00800000u;
}
inline void CharBaseInfo::clear_vipcardtime() {
  vipcardtime_ = GOOGLE_LONGLONG(0);
  clear_has_vipcardtime();
}
inline ::google::protobuf::int64 CharBaseInfo::vipcardtime() const {
  return vipcardtime_;
}
inline void CharBaseInfo::set_vipcardtime(::google::protobuf::int64 value) {
  set_has_vipcardtime();
  vipcardtime_ = value;
}

// optional string coupleName = 57;
inline bool CharBaseInfo::has_couplename() const {
  return (_has_bits_[1] & 0x01000000u) != 0;
}
inline void CharBaseInfo::set_has_couplename() {
  _has_bits_[1] |= 0x01000000u;
}
inline void CharBaseInfo::clear_has_couplename() {
  _has_bits_[1] &= ~0x01000000u;
}
inline void CharBaseInfo::clear_couplename() {
  if (couplename_ != &::google::protobuf::internal::kEmptyString) {
    couplename_->clear();
  }
  clear_has_couplename();
}
inline const ::std::string& CharBaseInfo::couplename() const {
  return *couplename_;
}
inline void CharBaseInfo::set_couplename(const ::std::string& value) {
  set_has_couplename();
  if (couplename_ == &::google::protobuf::internal::kEmptyString) {
    couplename_ = new ::std::string;
  }
  couplename_->assign(value);
}
inline void CharBaseInfo::set_couplename(const char* value) {
  set_has_couplename();
  if (couplename_ == &::google::protobuf::internal::kEmptyString) {
    couplename_ = new ::std::string;
  }
  couplename_->assign(value);
}
inline void CharBaseInfo::set_couplename(const char* value, size_t size) {
  set_has_couplename();
  if (couplename_ == &::google::protobuf::internal::kEmptyString) {
    couplename_ = new ::std::string;
  }
  couplename_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* CharBaseInfo::mutable_couplename() {
  set_has_couplename();
  if (couplename_ == &::google::protobuf::internal::kEmptyString) {
    couplename_ = new ::std::string;
  }
  return couplename_;
}
inline ::std::string* CharBaseInfo::release_couplename() {
  clear_has_couplename();
  if (couplename_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = couplename_;
    couplename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void CharBaseInfo::set_allocated_couplename(::std::string* couplename) {
  if (couplename_ != &::google::protobuf::internal::kEmptyString) {
    delete couplename_;
  }
  if (couplename) {
    set_has_couplename();
    couplename_ = couplename;
  } else {
    clear_has_couplename();
    couplename_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 guide = 58;
inline bool CharBaseInfo::has_guide() const {
  return (_has_bits_[1] & 0x02000000u) != 0;
}
inline void CharBaseInfo::set_has_guide() {
  _has_bits_[1] |= 0x02000000u;
}
inline void CharBaseInfo::clear_has_guide() {
  _has_bits_[1] &= ~0x02000000u;
}
inline void CharBaseInfo::clear_guide() {
  guide_ = 0;
  clear_has_guide();
}
inline ::google::protobuf::int32 CharBaseInfo::guide() const {
  return guide_;
}
inline void CharBaseInfo::set_guide(::google::protobuf::int32 value) {
  set_has_guide();
  guide_ = value;
}

// optional int64 challengemoney = 59;
inline bool CharBaseInfo::has_challengemoney() const {
  return (_has_bits_[1] & 0x04000000u) != 0;
}
inline void CharBaseInfo::set_has_challengemoney() {
  _has_bits_[1] |= 0x04000000u;
}
inline void CharBaseInfo::clear_has_challengemoney() {
  _has_bits_[1] &= ~0x04000000u;
}
inline void CharBaseInfo::clear_challengemoney() {
  challengemoney_ = GOOGLE_LONGLONG(0);
  clear_has_challengemoney();
}
inline ::google::protobuf::int64 CharBaseInfo::challengemoney() const {
  return challengemoney_;
}
inline void CharBaseInfo::set_challengemoney(::google::protobuf::int64 value) {
  set_has_challengemoney();
  challengemoney_ = value;
}

// -------------------------------------------------------------------

// CharCDTime

// required int32 type = 1;
inline bool CharCDTime::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharCDTime::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharCDTime::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharCDTime::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 CharCDTime::type() const {
  return type_;
}
inline void CharCDTime::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// required int32 time = 2;
inline bool CharCDTime::has_time() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharCDTime::set_has_time() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharCDTime::clear_has_time() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharCDTime::clear_time() {
  time_ = 0;
  clear_has_time();
}
inline ::google::protobuf::int32 CharCDTime::time() const {
  return time_;
}
inline void CharCDTime::set_time(::google::protobuf::int32 value) {
  set_has_time();
  time_ = value;
}

// -------------------------------------------------------------------

// CharQuestInfo

// repeated .PlayerInfo.ActiveQuest active = 1;
inline int CharQuestInfo::active_size() const {
  return active_.size();
}
inline void CharQuestInfo::clear_active() {
  active_.Clear();
}
inline const ::PlayerInfo::ActiveQuest& CharQuestInfo::active(int index) const {
  return active_.Get(index);
}
inline ::PlayerInfo::ActiveQuest* CharQuestInfo::mutable_active(int index) {
  return active_.Mutable(index);
}
inline ::PlayerInfo::ActiveQuest* CharQuestInfo::add_active() {
  return active_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ActiveQuest >&
CharQuestInfo::active() const {
  return active_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ActiveQuest >*
CharQuestInfo::mutable_active() {
  return &active_;
}

// repeated .PlayerInfo.DailyQuest daily = 2;
inline int CharQuestInfo::daily_size() const {
  return daily_.size();
}
inline void CharQuestInfo::clear_daily() {
  daily_.Clear();
}
inline const ::PlayerInfo::DailyQuest& CharQuestInfo::daily(int index) const {
  return daily_.Get(index);
}
inline ::PlayerInfo::DailyQuest* CharQuestInfo::mutable_daily(int index) {
  return daily_.Mutable(index);
}
inline ::PlayerInfo::DailyQuest* CharQuestInfo::add_daily() {
  return daily_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo::DailyQuest >&
CharQuestInfo::daily() const {
  return daily_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo::DailyQuest >*
CharQuestInfo::mutable_daily() {
  return &daily_;
}

// repeated .PlayerInfo.ClanQuest clan = 3;
inline int CharQuestInfo::clan_size() const {
  return clan_.size();
}
inline void CharQuestInfo::clear_clan() {
  clan_.Clear();
}
inline const ::PlayerInfo::ClanQuest& CharQuestInfo::clan(int index) const {
  return clan_.Get(index);
}
inline ::PlayerInfo::ClanQuest* CharQuestInfo::mutable_clan(int index) {
  return clan_.Mutable(index);
}
inline ::PlayerInfo::ClanQuest* CharQuestInfo::add_clan() {
  return clan_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ClanQuest >&
CharQuestInfo::clan() const {
  return clan_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ClanQuest >*
CharQuestInfo::mutable_clan() {
  return &clan_;
}

// -------------------------------------------------------------------

// CharQuestToGT

// required int64 charid = 1;
inline bool CharQuestToGT::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharQuestToGT::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharQuestToGT::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharQuestToGT::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 CharQuestToGT::charid() const {
  return charid_;
}
inline void CharQuestToGT::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional .CharLogin.CharQuestInfo active = 2;
inline bool CharQuestToGT::has_active() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharQuestToGT::set_has_active() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharQuestToGT::clear_has_active() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharQuestToGT::clear_active() {
  if (active_ != NULL) active_->::CharLogin::CharQuestInfo::Clear();
  clear_has_active();
}
inline const ::CharLogin::CharQuestInfo& CharQuestToGT::active() const {
  return active_ != NULL ? *active_ : *default_instance_->active_;
}
inline ::CharLogin::CharQuestInfo* CharQuestToGT::mutable_active() {
  set_has_active();
  if (active_ == NULL) active_ = new ::CharLogin::CharQuestInfo;
  return active_;
}
inline ::CharLogin::CharQuestInfo* CharQuestToGT::release_active() {
  clear_has_active();
  ::CharLogin::CharQuestInfo* temp = active_;
  active_ = NULL;
  return temp;
}
inline void CharQuestToGT::set_allocated_active(::CharLogin::CharQuestInfo* active) {
  delete active_;
  active_ = active;
  if (active) {
    set_has_active();
  } else {
    clear_has_active();
  }
}

// -------------------------------------------------------------------

// AckToClientAcceptable

// repeated int32 questid = 1;
inline int AckToClientAcceptable::questid_size() const {
  return questid_.size();
}
inline void AckToClientAcceptable::clear_questid() {
  questid_.Clear();
}
inline ::google::protobuf::int32 AckToClientAcceptable::questid(int index) const {
  return questid_.Get(index);
}
inline void AckToClientAcceptable::set_questid(int index, ::google::protobuf::int32 value) {
  questid_.Set(index, value);
}
inline void AckToClientAcceptable::add_questid(::google::protobuf::int32 value) {
  questid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
AckToClientAcceptable::questid() const {
  return questid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
AckToClientAcceptable::mutable_questid() {
  return &questid_;
}

// -------------------------------------------------------------------

// AcceptableQuestToGT

// required int64 id = 1;
inline bool AcceptableQuestToGT::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void AcceptableQuestToGT::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void AcceptableQuestToGT::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void AcceptableQuestToGT::clear_id() {
  id_ = GOOGLE_LONGLONG(0);
  clear_has_id();
}
inline ::google::protobuf::int64 AcceptableQuestToGT::id() const {
  return id_;
}
inline void AcceptableQuestToGT::set_id(::google::protobuf::int64 value) {
  set_has_id();
  id_ = value;
}

// optional .CharLogin.AckToClientAcceptable questid = 2;
inline bool AcceptableQuestToGT::has_questid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void AcceptableQuestToGT::set_has_questid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void AcceptableQuestToGT::clear_has_questid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void AcceptableQuestToGT::clear_questid() {
  if (questid_ != NULL) questid_->::CharLogin::AckToClientAcceptable::Clear();
  clear_has_questid();
}
inline const ::CharLogin::AckToClientAcceptable& AcceptableQuestToGT::questid() const {
  return questid_ != NULL ? *questid_ : *default_instance_->questid_;
}
inline ::CharLogin::AckToClientAcceptable* AcceptableQuestToGT::mutable_questid() {
  set_has_questid();
  if (questid_ == NULL) questid_ = new ::CharLogin::AckToClientAcceptable;
  return questid_;
}
inline ::CharLogin::AckToClientAcceptable* AcceptableQuestToGT::release_questid() {
  clear_has_questid();
  ::CharLogin::AckToClientAcceptable* temp = questid_;
  questid_ = NULL;
  return temp;
}
inline void AcceptableQuestToGT::set_allocated_questid(::CharLogin::AckToClientAcceptable* questid) {
  delete questid_;
  questid_ = questid;
  if (questid) {
    set_has_questid();
  } else {
    clear_has_questid();
  }
}

// -------------------------------------------------------------------

// ClientContainerInfo

// required int32 type = 1;
inline bool ClientContainerInfo::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientContainerInfo::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientContainerInfo::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientContainerInfo::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ClientContainerInfo::type() const {
  return type_;
}
inline void ClientContainerInfo::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional .CharLogin.PackageInfo pack = 2;
inline bool ClientContainerInfo::has_pack() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientContainerInfo::set_has_pack() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientContainerInfo::clear_has_pack() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientContainerInfo::clear_pack() {
  if (pack_ != NULL) pack_->::CharLogin::PackageInfo::Clear();
  clear_has_pack();
}
inline const ::CharLogin::PackageInfo& ClientContainerInfo::pack() const {
  return pack_ != NULL ? *pack_ : *default_instance_->pack_;
}
inline ::CharLogin::PackageInfo* ClientContainerInfo::mutable_pack() {
  set_has_pack();
  if (pack_ == NULL) pack_ = new ::CharLogin::PackageInfo;
  return pack_;
}
inline ::CharLogin::PackageInfo* ClientContainerInfo::release_pack() {
  clear_has_pack();
  ::CharLogin::PackageInfo* temp = pack_;
  pack_ = NULL;
  return temp;
}
inline void ClientContainerInfo::set_allocated_pack(::CharLogin::PackageInfo* pack) {
  delete pack_;
  pack_ = pack;
  if (pack) {
    set_has_pack();
  } else {
    clear_has_pack();
  }
}

// optional .CharLogin.StoreHouseInfo storehouse = 3;
inline bool ClientContainerInfo::has_storehouse() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ClientContainerInfo::set_has_storehouse() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ClientContainerInfo::clear_has_storehouse() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ClientContainerInfo::clear_storehouse() {
  if (storehouse_ != NULL) storehouse_->::CharLogin::StoreHouseInfo::Clear();
  clear_has_storehouse();
}
inline const ::CharLogin::StoreHouseInfo& ClientContainerInfo::storehouse() const {
  return storehouse_ != NULL ? *storehouse_ : *default_instance_->storehouse_;
}
inline ::CharLogin::StoreHouseInfo* ClientContainerInfo::mutable_storehouse() {
  set_has_storehouse();
  if (storehouse_ == NULL) storehouse_ = new ::CharLogin::StoreHouseInfo;
  return storehouse_;
}
inline ::CharLogin::StoreHouseInfo* ClientContainerInfo::release_storehouse() {
  clear_has_storehouse();
  ::CharLogin::StoreHouseInfo* temp = storehouse_;
  storehouse_ = NULL;
  return temp;
}
inline void ClientContainerInfo::set_allocated_storehouse(::CharLogin::StoreHouseInfo* storehouse) {
  delete storehouse_;
  storehouse_ = storehouse;
  if (storehouse) {
    set_has_storehouse();
  } else {
    clear_has_storehouse();
  }
}

// optional int32 pno = 4;
inline bool ClientContainerInfo::has_pno() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void ClientContainerInfo::set_has_pno() {
  _has_bits_[0] |= 0x00000008u;
}
inline void ClientContainerInfo::clear_has_pno() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void ClientContainerInfo::clear_pno() {
  pno_ = 0;
  clear_has_pno();
}
inline ::google::protobuf::int32 ClientContainerInfo::pno() const {
  return pno_;
}
inline void ClientContainerInfo::set_pno(::google::protobuf::int32 value) {
  set_has_pno();
  pno_ = value;
}

// -------------------------------------------------------------------

// ToGTContainerInfo

// required int64 charid = 1;
inline bool ToGTContainerInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ToGTContainerInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ToGTContainerInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ToGTContainerInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 ToGTContainerInfo::charid() const {
  return charid_;
}
inline void ToGTContainerInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required .CharLogin.ClientContainerInfo info = 2;
inline bool ToGTContainerInfo::has_info() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ToGTContainerInfo::set_has_info() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ToGTContainerInfo::clear_has_info() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ToGTContainerInfo::clear_info() {
  if (info_ != NULL) info_->::CharLogin::ClientContainerInfo::Clear();
  clear_has_info();
}
inline const ::CharLogin::ClientContainerInfo& ToGTContainerInfo::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::CharLogin::ClientContainerInfo* ToGTContainerInfo::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::CharLogin::ClientContainerInfo;
  return info_;
}
inline ::CharLogin::ClientContainerInfo* ToGTContainerInfo::release_info() {
  clear_has_info();
  ::CharLogin::ClientContainerInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void ToGTContainerInfo::set_allocated_info(::CharLogin::ClientContainerInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// EquipQuickInfo

// repeated .CharLogin.ClientItemInfo equip = 1;
inline int EquipQuickInfo::equip_size() const {
  return equip_.size();
}
inline void EquipQuickInfo::clear_equip() {
  equip_.Clear();
}
inline const ::CharLogin::ClientItemInfo& EquipQuickInfo::equip(int index) const {
  return equip_.Get(index);
}
inline ::CharLogin::ClientItemInfo* EquipQuickInfo::mutable_equip(int index) {
  return equip_.Mutable(index);
}
inline ::CharLogin::ClientItemInfo* EquipQuickInfo::add_equip() {
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CharLogin::ClientItemInfo >&
EquipQuickInfo::equip() const {
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::CharLogin::ClientItemInfo >*
EquipQuickInfo::mutable_equip() {
  return &equip_;
}

// repeated .PlayerInfo.QuickContainer quick = 2;
inline int EquipQuickInfo::quick_size() const {
  return quick_.size();
}
inline void EquipQuickInfo::clear_quick() {
  quick_.Clear();
}
inline const ::PlayerInfo::QuickContainer& EquipQuickInfo::quick(int index) const {
  return quick_.Get(index);
}
inline ::PlayerInfo::QuickContainer* EquipQuickInfo::mutable_quick(int index) {
  return quick_.Mutable(index);
}
inline ::PlayerInfo::QuickContainer* EquipQuickInfo::add_quick() {
  return quick_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo::QuickContainer >&
EquipQuickInfo::quick() const {
  return quick_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo::QuickContainer >*
EquipQuickInfo::mutable_quick() {
  return &quick_;
}

// -------------------------------------------------------------------

// PackageInfo

// repeated .CharLogin.ClientItemInfo pack = 1;
inline int PackageInfo::pack_size() const {
  return pack_.size();
}
inline void PackageInfo::clear_pack() {
  pack_.Clear();
}
inline const ::CharLogin::ClientItemInfo& PackageInfo::pack(int index) const {
  return pack_.Get(index);
}
inline ::CharLogin::ClientItemInfo* PackageInfo::mutable_pack(int index) {
  return pack_.Mutable(index);
}
inline ::CharLogin::ClientItemInfo* PackageInfo::add_pack() {
  return pack_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CharLogin::ClientItemInfo >&
PackageInfo::pack() const {
  return pack_;
}
inline ::google::protobuf::RepeatedPtrField< ::CharLogin::ClientItemInfo >*
PackageInfo::mutable_pack() {
  return &pack_;
}

// optional int32 size = 2;
inline bool PackageInfo::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void PackageInfo::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void PackageInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void PackageInfo::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 PackageInfo::size() const {
  return size_;
}
inline void PackageInfo::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// optional double dtime = 3;
inline bool PackageInfo::has_dtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void PackageInfo::set_has_dtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void PackageInfo::clear_has_dtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void PackageInfo::clear_dtime() {
  dtime_ = 0;
  clear_has_dtime();
}
inline double PackageInfo::dtime() const {
  return dtime_;
}
inline void PackageInfo::set_dtime(double value) {
  set_has_dtime();
  dtime_ = value;
}

// -------------------------------------------------------------------

// StoreHouseInfo

// repeated .CharLogin.ClientItemInfo storehouse = 1;
inline int StoreHouseInfo::storehouse_size() const {
  return storehouse_.size();
}
inline void StoreHouseInfo::clear_storehouse() {
  storehouse_.Clear();
}
inline const ::CharLogin::ClientItemInfo& StoreHouseInfo::storehouse(int index) const {
  return storehouse_.Get(index);
}
inline ::CharLogin::ClientItemInfo* StoreHouseInfo::mutable_storehouse(int index) {
  return storehouse_.Mutable(index);
}
inline ::CharLogin::ClientItemInfo* StoreHouseInfo::add_storehouse() {
  return storehouse_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CharLogin::ClientItemInfo >&
StoreHouseInfo::storehouse() const {
  return storehouse_;
}
inline ::google::protobuf::RepeatedPtrField< ::CharLogin::ClientItemInfo >*
StoreHouseInfo::mutable_storehouse() {
  return &storehouse_;
}

// optional int32 size = 2;
inline bool StoreHouseInfo::has_size() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void StoreHouseInfo::set_has_size() {
  _has_bits_[0] |= 0x00000002u;
}
inline void StoreHouseInfo::clear_has_size() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void StoreHouseInfo::clear_size() {
  size_ = 0;
  clear_has_size();
}
inline ::google::protobuf::int32 StoreHouseInfo::size() const {
  return size_;
}
inline void StoreHouseInfo::set_size(::google::protobuf::int32 value) {
  set_has_size();
  size_ = value;
}

// optional double dtime = 3;
inline bool StoreHouseInfo::has_dtime() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void StoreHouseInfo::set_has_dtime() {
  _has_bits_[0] |= 0x00000004u;
}
inline void StoreHouseInfo::clear_has_dtime() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void StoreHouseInfo::clear_dtime() {
  dtime_ = 0;
  clear_has_dtime();
}
inline double StoreHouseInfo::dtime() const {
  return dtime_;
}
inline void StoreHouseInfo::set_dtime(double value) {
  set_has_dtime();
  dtime_ = value;
}

// -------------------------------------------------------------------

// ClientItemInfo

// required int32 id = 1;
inline bool ClientItemInfo::has_id() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ClientItemInfo::set_has_id() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ClientItemInfo::clear_has_id() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ClientItemInfo::clear_id() {
  id_ = 0;
  clear_has_id();
}
inline ::google::protobuf::int32 ClientItemInfo::id() const {
  return id_;
}
inline void ClientItemInfo::set_id(::google::protobuf::int32 value) {
  set_has_id();
  id_ = value;
}

// optional uint32 flag = 2;
inline bool ClientItemInfo::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ClientItemInfo::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ClientItemInfo::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ClientItemInfo::clear_flag() {
  flag_ = 0u;
  clear_has_flag();
}
inline ::google::protobuf::uint32 ClientItemInfo::flag() const {
  return flag_;
}
inline void ClientItemInfo::set_flag(::google::protobuf::uint32 value) {
  set_has_flag();
  flag_ = value;
}

// repeated uint32 newattr = 3;
inline int ClientItemInfo::newattr_size() const {
  return newattr_.size();
}
inline void ClientItemInfo::clear_newattr() {
  newattr_.Clear();
}
inline ::google::protobuf::uint32 ClientItemInfo::newattr(int index) const {
  return newattr_.Get(index);
}
inline void ClientItemInfo::set_newattr(int index, ::google::protobuf::uint32 value) {
  newattr_.Set(index, value);
}
inline void ClientItemInfo::add_newattr(::google::protobuf::uint32 value) {
  newattr_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ClientItemInfo::newattr() const {
  return newattr_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ClientItemInfo::mutable_newattr() {
  return &newattr_;
}

// repeated int32 stoneid = 4;
inline int ClientItemInfo::stoneid_size() const {
  return stoneid_.size();
}
inline void ClientItemInfo::clear_stoneid() {
  stoneid_.Clear();
}
inline ::google::protobuf::int32 ClientItemInfo::stoneid(int index) const {
  return stoneid_.Get(index);
}
inline void ClientItemInfo::set_stoneid(int index, ::google::protobuf::int32 value) {
  stoneid_.Set(index, value);
}
inline void ClientItemInfo::add_stoneid(::google::protobuf::int32 value) {
  stoneid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClientItemInfo::stoneid() const {
  return stoneid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClientItemInfo::mutable_stoneid() {
  return &stoneid_;
}

// optional uint32 time = 5;
inline bool ClientItemInfo::has_time() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void ClientItemInfo::set_has_time() {
  _has_bits_[0] |= 0x00000010u;
}
inline void ClientItemInfo::clear_has_time() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void ClientItemInfo::clear_time() {
  time_ = 0u;
  clear_has_time();
}
inline ::google::protobuf::uint32 ClientItemInfo::time() const {
  return time_;
}
inline void ClientItemInfo::set_time(::google::protobuf::uint32 value) {
  set_has_time();
  time_ = value;
}

// optional uint32 num = 6;
inline bool ClientItemInfo::has_num() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void ClientItemInfo::set_has_num() {
  _has_bits_[0] |= 0x00000020u;
}
inline void ClientItemInfo::clear_has_num() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void ClientItemInfo::clear_num() {
  num_ = 0u;
  clear_has_num();
}
inline ::google::protobuf::uint32 ClientItemInfo::num() const {
  return num_;
}
inline void ClientItemInfo::set_num(::google::protobuf::uint32 value) {
  set_has_num();
  num_ = value;
}

// repeated int32 inlayPos = 7;
inline int ClientItemInfo::inlaypos_size() const {
  return inlaypos_.size();
}
inline void ClientItemInfo::clear_inlaypos() {
  inlaypos_.Clear();
}
inline ::google::protobuf::int32 ClientItemInfo::inlaypos(int index) const {
  return inlaypos_.Get(index);
}
inline void ClientItemInfo::set_inlaypos(int index, ::google::protobuf::int32 value) {
  inlaypos_.Set(index, value);
}
inline void ClientItemInfo::add_inlaypos(::google::protobuf::int32 value) {
  inlaypos_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
ClientItemInfo::inlaypos() const {
  return inlaypos_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
ClientItemInfo::mutable_inlaypos() {
  return &inlaypos_;
}

// repeated uint32 refineAttrLv = 8;
inline int ClientItemInfo::refineattrlv_size() const {
  return refineattrlv_.size();
}
inline void ClientItemInfo::clear_refineattrlv() {
  refineattrlv_.Clear();
}
inline ::google::protobuf::uint32 ClientItemInfo::refineattrlv(int index) const {
  return refineattrlv_.Get(index);
}
inline void ClientItemInfo::set_refineattrlv(int index, ::google::protobuf::uint32 value) {
  refineattrlv_.Set(index, value);
}
inline void ClientItemInfo::add_refineattrlv(::google::protobuf::uint32 value) {
  refineattrlv_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >&
ClientItemInfo::refineattrlv() const {
  return refineattrlv_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::uint32 >*
ClientItemInfo::mutable_refineattrlv() {
  return &refineattrlv_;
}

// -------------------------------------------------------------------

// CharEquip

// required int32 idweapon = 1;
inline bool CharEquip::has_idweapon() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void CharEquip::set_has_idweapon() {
  _has_bits_[0] |= 0x00000001u;
}
inline void CharEquip::clear_has_idweapon() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void CharEquip::clear_idweapon() {
  idweapon_ = 0;
  clear_has_idweapon();
}
inline ::google::protobuf::int32 CharEquip::idweapon() const {
  return idweapon_;
}
inline void CharEquip::set_idweapon(::google::protobuf::int32 value) {
  set_has_idweapon();
  idweapon_ = value;
}

// required int32 idcloth = 2;
inline bool CharEquip::has_idcloth() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void CharEquip::set_has_idcloth() {
  _has_bits_[0] |= 0x00000002u;
}
inline void CharEquip::clear_has_idcloth() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void CharEquip::clear_idcloth() {
  idcloth_ = 0;
  clear_has_idcloth();
}
inline ::google::protobuf::int32 CharEquip::idcloth() const {
  return idcloth_;
}
inline void CharEquip::set_idcloth(::google::protobuf::int32 value) {
  set_has_idcloth();
  idcloth_ = value;
}

// -------------------------------------------------------------------

// WBaseInfo

// required int64 charid = 1;
inline bool WBaseInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void WBaseInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void WBaseInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void WBaseInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 WBaseInfo::charid() const {
  return charid_;
}
inline void WBaseInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int64 mapid = 2;
inline bool WBaseInfo::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void WBaseInfo::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void WBaseInfo::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void WBaseInfo::clear_mapid() {
  mapid_ = GOOGLE_LONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::int64 WBaseInfo::mapid() const {
  return mapid_;
}
inline void WBaseInfo::set_mapid(::google::protobuf::int64 value) {
  set_has_mapid();
  mapid_ = value;
}

// optional int64 localtype = 3;
inline bool WBaseInfo::has_localtype() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void WBaseInfo::set_has_localtype() {
  _has_bits_[0] |= 0x00000004u;
}
inline void WBaseInfo::clear_has_localtype() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void WBaseInfo::clear_localtype() {
  localtype_ = GOOGLE_LONGLONG(0);
  clear_has_localtype();
}
inline ::google::protobuf::int64 WBaseInfo::localtype() const {
  return localtype_;
}
inline void WBaseInfo::set_localtype(::google::protobuf::int64 value) {
  set_has_localtype();
  localtype_ = value;
}

// optional string name = 4;
inline bool WBaseInfo::has_name() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void WBaseInfo::set_has_name() {
  _has_bits_[0] |= 0x00000008u;
}
inline void WBaseInfo::clear_has_name() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void WBaseInfo::clear_name() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    name_->clear();
  }
  clear_has_name();
}
inline const ::std::string& WBaseInfo::name() const {
  return *name_;
}
inline void WBaseInfo::set_name(const ::std::string& value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WBaseInfo::set_name(const char* value) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(value);
}
inline void WBaseInfo::set_name(const char* value, size_t size) {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  name_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WBaseInfo::mutable_name() {
  set_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    name_ = new ::std::string;
  }
  return name_;
}
inline ::std::string* WBaseInfo::release_name() {
  clear_has_name();
  if (name_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = name_;
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WBaseInfo::set_allocated_name(::std::string* name) {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (name) {
    set_has_name();
    name_ = name;
  } else {
    clear_has_name();
    name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 lv = 5;
inline bool WBaseInfo::has_lv() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void WBaseInfo::set_has_lv() {
  _has_bits_[0] |= 0x00000010u;
}
inline void WBaseInfo::clear_has_lv() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void WBaseInfo::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 WBaseInfo::lv() const {
  return lv_;
}
inline void WBaseInfo::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 profession = 6;
inline bool WBaseInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void WBaseInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000020u;
}
inline void WBaseInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void WBaseInfo::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 WBaseInfo::profession() const {
  return profession_;
}
inline void WBaseInfo::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional int32 hatred = 7;
inline bool WBaseInfo::has_hatred() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void WBaseInfo::set_has_hatred() {
  _has_bits_[0] |= 0x00000040u;
}
inline void WBaseInfo::clear_has_hatred() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void WBaseInfo::clear_hatred() {
  hatred_ = 0;
  clear_has_hatred();
}
inline ::google::protobuf::int32 WBaseInfo::hatred() const {
  return hatred_;
}
inline void WBaseInfo::set_hatred(::google::protobuf::int32 value) {
  set_has_hatred();
  hatred_ = value;
}

// optional int32 settings = 8;
inline bool WBaseInfo::has_settings() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void WBaseInfo::set_has_settings() {
  _has_bits_[0] |= 0x00000080u;
}
inline void WBaseInfo::clear_has_settings() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void WBaseInfo::clear_settings() {
  settings_ = 0;
  clear_has_settings();
}
inline ::google::protobuf::int32 WBaseInfo::settings() const {
  return settings_;
}
inline void WBaseInfo::set_settings(::google::protobuf::int32 value) {
  set_has_settings();
  settings_ = value;
}

// optional int32 country = 10;
inline bool WBaseInfo::has_country() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void WBaseInfo::set_has_country() {
  _has_bits_[0] |= 0x00000100u;
}
inline void WBaseInfo::clear_has_country() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void WBaseInfo::clear_country() {
  country_ = 0;
  clear_has_country();
}
inline ::google::protobuf::int32 WBaseInfo::country() const {
  return country_;
}
inline void WBaseInfo::set_country(::google::protobuf::int32 value) {
  set_has_country();
  country_ = value;
}

// optional int64 nextTalkTime = 12;
inline bool WBaseInfo::has_nexttalktime() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void WBaseInfo::set_has_nexttalktime() {
  _has_bits_[0] |= 0x00000200u;
}
inline void WBaseInfo::clear_has_nexttalktime() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void WBaseInfo::clear_nexttalktime() {
  nexttalktime_ = GOOGLE_LONGLONG(0);
  clear_has_nexttalktime();
}
inline ::google::protobuf::int64 WBaseInfo::nexttalktime() const {
  return nexttalktime_;
}
inline void WBaseInfo::set_nexttalktime(::google::protobuf::int64 value) {
  set_has_nexttalktime();
  nexttalktime_ = value;
}

// optional int32 score = 13;
inline bool WBaseInfo::has_score() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void WBaseInfo::set_has_score() {
  _has_bits_[0] |= 0x00000400u;
}
inline void WBaseInfo::clear_has_score() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void WBaseInfo::clear_score() {
  score_ = 0;
  clear_has_score();
}
inline ::google::protobuf::int32 WBaseInfo::score() const {
  return score_;
}
inline void WBaseInfo::set_score(::google::protobuf::int32 value) {
  set_has_score();
  score_ = value;
}

// optional int64 offlinetime = 14;
inline bool WBaseInfo::has_offlinetime() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void WBaseInfo::set_has_offlinetime() {
  _has_bits_[0] |= 0x00000800u;
}
inline void WBaseInfo::clear_has_offlinetime() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void WBaseInfo::clear_offlinetime() {
  offlinetime_ = GOOGLE_LONGLONG(0);
  clear_has_offlinetime();
}
inline ::google::protobuf::int64 WBaseInfo::offlinetime() const {
  return offlinetime_;
}
inline void WBaseInfo::set_offlinetime(::google::protobuf::int64 value) {
  set_has_offlinetime();
  offlinetime_ = value;
}

// optional int64 teamid = 15;
inline bool WBaseInfo::has_teamid() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void WBaseInfo::set_has_teamid() {
  _has_bits_[0] |= 0x00001000u;
}
inline void WBaseInfo::clear_has_teamid() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void WBaseInfo::clear_teamid() {
  teamid_ = GOOGLE_LONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::int64 WBaseInfo::teamid() const {
  return teamid_;
}
inline void WBaseInfo::set_teamid(::google::protobuf::int64 value) {
  set_has_teamid();
  teamid_ = value;
}

// optional int32 fightPower = 16;
inline bool WBaseInfo::has_fightpower() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void WBaseInfo::set_has_fightpower() {
  _has_bits_[0] |= 0x00002000u;
}
inline void WBaseInfo::clear_has_fightpower() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void WBaseInfo::clear_fightpower() {
  fightpower_ = 0;
  clear_has_fightpower();
}
inline ::google::protobuf::int32 WBaseInfo::fightpower() const {
  return fightpower_;
}
inline void WBaseInfo::set_fightpower(::google::protobuf::int32 value) {
  set_has_fightpower();
  fightpower_ = value;
}

// optional bool sex = 17;
inline bool WBaseInfo::has_sex() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void WBaseInfo::set_has_sex() {
  _has_bits_[0] |= 0x00004000u;
}
inline void WBaseInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void WBaseInfo::clear_sex() {
  sex_ = false;
  clear_has_sex();
}
inline bool WBaseInfo::sex() const {
  return sex_;
}
inline void WBaseInfo::set_sex(bool value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 countryjob = 19;
inline bool WBaseInfo::has_countryjob() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void WBaseInfo::set_has_countryjob() {
  _has_bits_[0] |= 0x00008000u;
}
inline void WBaseInfo::clear_has_countryjob() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void WBaseInfo::clear_countryjob() {
  countryjob_ = 0;
  clear_has_countryjob();
}
inline ::google::protobuf::int32 WBaseInfo::countryjob() const {
  return countryjob_;
}
inline void WBaseInfo::set_countryjob(::google::protobuf::int32 value) {
  set_has_countryjob();
  countryjob_ = value;
}

// optional int32 contribute = 20;
inline bool WBaseInfo::has_contribute() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void WBaseInfo::set_has_contribute() {
  _has_bits_[0] |= 0x00010000u;
}
inline void WBaseInfo::clear_has_contribute() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void WBaseInfo::clear_contribute() {
  contribute_ = 0;
  clear_has_contribute();
}
inline ::google::protobuf::int32 WBaseInfo::contribute() const {
  return contribute_;
}
inline void WBaseInfo::set_contribute(::google::protobuf::int32 value) {
  set_has_contribute();
  contribute_ = value;
}

// optional int32 fitchPrize = 21;
inline bool WBaseInfo::has_fitchprize() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void WBaseInfo::set_has_fitchprize() {
  _has_bits_[0] |= 0x00020000u;
}
inline void WBaseInfo::clear_has_fitchprize() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void WBaseInfo::clear_fitchprize() {
  fitchprize_ = 0;
  clear_has_fitchprize();
}
inline ::google::protobuf::int32 WBaseInfo::fitchprize() const {
  return fitchprize_;
}
inline void WBaseInfo::set_fitchprize(::google::protobuf::int32 value) {
  set_has_fitchprize();
  fitchprize_ = value;
}

// optional int32 vipLevel = 22;
inline bool WBaseInfo::has_viplevel() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void WBaseInfo::set_has_viplevel() {
  _has_bits_[0] |= 0x00040000u;
}
inline void WBaseInfo::clear_has_viplevel() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void WBaseInfo::clear_viplevel() {
  viplevel_ = 0;
  clear_has_viplevel();
}
inline ::google::protobuf::int32 WBaseInfo::viplevel() const {
  return viplevel_;
}
inline void WBaseInfo::set_viplevel(::google::protobuf::int32 value) {
  set_has_viplevel();
  viplevel_ = value;
}

// optional int32 magicWeapon = 23;
inline bool WBaseInfo::has_magicweapon() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void WBaseInfo::set_has_magicweapon() {
  _has_bits_[0] |= 0x00080000u;
}
inline void WBaseInfo::clear_has_magicweapon() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void WBaseInfo::clear_magicweapon() {
  magicweapon_ = 0;
  clear_has_magicweapon();
}
inline ::google::protobuf::int32 WBaseInfo::magicweapon() const {
  return magicweapon_;
}
inline void WBaseInfo::set_magicweapon(::google::protobuf::int32 value) {
  set_has_magicweapon();
  magicweapon_ = value;
}

// optional int32 horseid = 24;
inline bool WBaseInfo::has_horseid() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void WBaseInfo::set_has_horseid() {
  _has_bits_[0] |= 0x00100000u;
}
inline void WBaseInfo::clear_has_horseid() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void WBaseInfo::clear_horseid() {
  horseid_ = 0;
  clear_has_horseid();
}
inline ::google::protobuf::int32 WBaseInfo::horseid() const {
  return horseid_;
}
inline void WBaseInfo::set_horseid(::google::protobuf::int32 value) {
  set_has_horseid();
  horseid_ = value;
}

// optional string openid = 25;
inline bool WBaseInfo::has_openid() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void WBaseInfo::set_has_openid() {
  _has_bits_[0] |= 0x00200000u;
}
inline void WBaseInfo::clear_has_openid() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void WBaseInfo::clear_openid() {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    openid_->clear();
  }
  clear_has_openid();
}
inline const ::std::string& WBaseInfo::openid() const {
  return *openid_;
}
inline void WBaseInfo::set_openid(const ::std::string& value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void WBaseInfo::set_openid(const char* value) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(value);
}
inline void WBaseInfo::set_openid(const char* value, size_t size) {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  openid_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WBaseInfo::mutable_openid() {
  set_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    openid_ = new ::std::string;
  }
  return openid_;
}
inline ::std::string* WBaseInfo::release_openid() {
  clear_has_openid();
  if (openid_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openid_;
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WBaseInfo::set_allocated_openid(::std::string* openid) {
  if (openid_ != &::google::protobuf::internal::kEmptyString) {
    delete openid_;
  }
  if (openid) {
    set_has_openid();
    openid_ = openid;
  } else {
    clear_has_openid();
    openid_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string openkey = 26;
inline bool WBaseInfo::has_openkey() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void WBaseInfo::set_has_openkey() {
  _has_bits_[0] |= 0x00400000u;
}
inline void WBaseInfo::clear_has_openkey() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void WBaseInfo::clear_openkey() {
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    openkey_->clear();
  }
  clear_has_openkey();
}
inline const ::std::string& WBaseInfo::openkey() const {
  return *openkey_;
}
inline void WBaseInfo::set_openkey(const ::std::string& value) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(value);
}
inline void WBaseInfo::set_openkey(const char* value) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(value);
}
inline void WBaseInfo::set_openkey(const char* value, size_t size) {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  openkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WBaseInfo::mutable_openkey() {
  set_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    openkey_ = new ::std::string;
  }
  return openkey_;
}
inline ::std::string* WBaseInfo::release_openkey() {
  clear_has_openkey();
  if (openkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = openkey_;
    openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WBaseInfo::set_allocated_openkey(::std::string* openkey) {
  if (openkey_ != &::google::protobuf::internal::kEmptyString) {
    delete openkey_;
  }
  if (openkey) {
    set_has_openkey();
    openkey_ = openkey;
  } else {
    clear_has_openkey();
    openkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pf = 27;
inline bool WBaseInfo::has_pf() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void WBaseInfo::set_has_pf() {
  _has_bits_[0] |= 0x00800000u;
}
inline void WBaseInfo::clear_has_pf() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void WBaseInfo::clear_pf() {
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    pf_->clear();
  }
  clear_has_pf();
}
inline const ::std::string& WBaseInfo::pf() const {
  return *pf_;
}
inline void WBaseInfo::set_pf(const ::std::string& value) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(value);
}
inline void WBaseInfo::set_pf(const char* value) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(value);
}
inline void WBaseInfo::set_pf(const char* value, size_t size) {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  pf_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WBaseInfo::mutable_pf() {
  set_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    pf_ = new ::std::string;
  }
  return pf_;
}
inline ::std::string* WBaseInfo::release_pf() {
  clear_has_pf();
  if (pf_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pf_;
    pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WBaseInfo::set_allocated_pf(::std::string* pf) {
  if (pf_ != &::google::protobuf::internal::kEmptyString) {
    delete pf_;
  }
  if (pf) {
    set_has_pf();
    pf_ = pf;
  } else {
    clear_has_pf();
    pf_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional string pfkey = 28;
inline bool WBaseInfo::has_pfkey() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void WBaseInfo::set_has_pfkey() {
  _has_bits_[0] |= 0x01000000u;
}
inline void WBaseInfo::clear_has_pfkey() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void WBaseInfo::clear_pfkey() {
  if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
    pfkey_->clear();
  }
  clear_has_pfkey();
}
inline const ::std::string& WBaseInfo::pfkey() const {
  return *pfkey_;
}
inline void WBaseInfo::set_pfkey(const ::std::string& value) {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  pfkey_->assign(value);
}
inline void WBaseInfo::set_pfkey(const char* value) {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  pfkey_->assign(value);
}
inline void WBaseInfo::set_pfkey(const char* value, size_t size) {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  pfkey_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WBaseInfo::mutable_pfkey() {
  set_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    pfkey_ = new ::std::string;
  }
  return pfkey_;
}
inline ::std::string* WBaseInfo::release_pfkey() {
  clear_has_pfkey();
  if (pfkey_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = pfkey_;
    pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WBaseInfo::set_allocated_pfkey(::std::string* pfkey) {
  if (pfkey_ != &::google::protobuf::internal::kEmptyString) {
    delete pfkey_;
  }
  if (pfkey) {
    set_has_pfkey();
    pfkey_ = pfkey;
  } else {
    clear_has_pfkey();
    pfkey_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 addupGolden = 29;
inline bool WBaseInfo::has_addupgolden() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void WBaseInfo::set_has_addupgolden() {
  _has_bits_[0] |= 0x02000000u;
}
inline void WBaseInfo::clear_has_addupgolden() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void WBaseInfo::clear_addupgolden() {
  addupgolden_ = 0;
  clear_has_addupgolden();
}
inline ::google::protobuf::int32 WBaseInfo::addupgolden() const {
  return addupgolden_;
}
inline void WBaseInfo::set_addupgolden(::google::protobuf::int32 value) {
  set_has_addupgolden();
  addupgolden_ = value;
}

// optional int32 challengeArenaNum = 30;
inline bool WBaseInfo::has_challengearenanum() const {
  return (_has_bits_[0] & 0x04000000u) != 0;
}
inline void WBaseInfo::set_has_challengearenanum() {
  _has_bits_[0] |= 0x04000000u;
}
inline void WBaseInfo::clear_has_challengearenanum() {
  _has_bits_[0] &= ~0x04000000u;
}
inline void WBaseInfo::clear_challengearenanum() {
  challengearenanum_ = 0;
  clear_has_challengearenanum();
}
inline ::google::protobuf::int32 WBaseInfo::challengearenanum() const {
  return challengearenanum_;
}
inline void WBaseInfo::set_challengearenanum(::google::protobuf::int32 value) {
  set_has_challengearenanum();
  challengearenanum_ = value;
}

// optional int32 golden = 31;
inline bool WBaseInfo::has_golden() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void WBaseInfo::set_has_golden() {
  _has_bits_[0] |= 0x08000000u;
}
inline void WBaseInfo::clear_has_golden() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void WBaseInfo::clear_golden() {
  golden_ = 0;
  clear_has_golden();
}
inline ::google::protobuf::int32 WBaseInfo::golden() const {
  return golden_;
}
inline void WBaseInfo::set_golden(::google::protobuf::int32 value) {
  set_has_golden();
  golden_ = value;
}

// optional int32 accountType = 32;
inline bool WBaseInfo::has_accounttype() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void WBaseInfo::set_has_accounttype() {
  _has_bits_[0] |= 0x10000000u;
}
inline void WBaseInfo::clear_has_accounttype() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void WBaseInfo::clear_accounttype() {
  accounttype_ = 0;
  clear_has_accounttype();
}
inline ::google::protobuf::int32 WBaseInfo::accounttype() const {
  return accounttype_;
}
inline void WBaseInfo::set_accounttype(::google::protobuf::int32 value) {
  set_has_accounttype();
  accounttype_ = value;
}

// optional string source = 33;
inline bool WBaseInfo::has_source() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void WBaseInfo::set_has_source() {
  _has_bits_[0] |= 0x20000000u;
}
inline void WBaseInfo::clear_has_source() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void WBaseInfo::clear_source() {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    source_->clear();
  }
  clear_has_source();
}
inline const ::std::string& WBaseInfo::source() const {
  return *source_;
}
inline void WBaseInfo::set_source(const ::std::string& value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void WBaseInfo::set_source(const char* value) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(value);
}
inline void WBaseInfo::set_source(const char* value, size_t size) {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  source_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* WBaseInfo::mutable_source() {
  set_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    source_ = new ::std::string;
  }
  return source_;
}
inline ::std::string* WBaseInfo::release_source() {
  clear_has_source();
  if (source_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = source_;
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void WBaseInfo::set_allocated_source(::std::string* source) {
  if (source_ != &::google::protobuf::internal::kEmptyString) {
    delete source_;
  }
  if (source) {
    set_has_source();
    source_ = source;
  } else {
    clear_has_source();
    source_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// -------------------------------------------------------------------

// SynchToWorldInfo

// required int64 charid = 1;
inline bool SynchToWorldInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SynchToWorldInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SynchToWorldInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SynchToWorldInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 SynchToWorldInfo::charid() const {
  return charid_;
}
inline void SynchToWorldInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int32 fight = 2;
inline bool SynchToWorldInfo::has_fight() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SynchToWorldInfo::set_has_fight() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SynchToWorldInfo::clear_has_fight() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SynchToWorldInfo::clear_fight() {
  fight_ = 0;
  clear_has_fight();
}
inline ::google::protobuf::int32 SynchToWorldInfo::fight() const {
  return fight_;
}
inline void SynchToWorldInfo::set_fight(::google::protobuf::int32 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 isYesterdayReward = 3;
inline bool SynchToWorldInfo::has_isyesterdayreward() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SynchToWorldInfo::set_has_isyesterdayreward() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SynchToWorldInfo::clear_has_isyesterdayreward() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SynchToWorldInfo::clear_isyesterdayreward() {
  isyesterdayreward_ = 0;
  clear_has_isyesterdayreward();
}
inline ::google::protobuf::int32 SynchToWorldInfo::isyesterdayreward() const {
  return isyesterdayreward_;
}
inline void SynchToWorldInfo::set_isyesterdayreward(::google::protobuf::int32 value) {
  set_has_isyesterdayreward();
  isyesterdayreward_ = value;
}

// optional int32 m_VipLevel = 4;
inline bool SynchToWorldInfo::has_m_viplevel() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SynchToWorldInfo::set_has_m_viplevel() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SynchToWorldInfo::clear_has_m_viplevel() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SynchToWorldInfo::clear_m_viplevel() {
  m_viplevel_ = 0;
  clear_has_m_viplevel();
}
inline ::google::protobuf::int32 SynchToWorldInfo::m_viplevel() const {
  return m_viplevel_;
}
inline void SynchToWorldInfo::set_m_viplevel(::google::protobuf::int32 value) {
  set_has_m_viplevel();
  m_viplevel_ = value;
}

// -------------------------------------------------------------------

// SyncMap

// required int64 charid = 1;
inline bool SyncMap::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SyncMap::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SyncMap::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SyncMap::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 SyncMap::charid() const {
  return charid_;
}
inline void SyncMap::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional int64 mapid = 2;
inline bool SyncMap::has_mapid() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SyncMap::set_has_mapid() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SyncMap::clear_has_mapid() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SyncMap::clear_mapid() {
  mapid_ = GOOGLE_LONGLONG(0);
  clear_has_mapid();
}
inline ::google::protobuf::int64 SyncMap::mapid() const {
  return mapid_;
}
inline void SyncMap::set_mapid(::google::protobuf::int64 value) {
  set_has_mapid();
  mapid_ = value;
}

// -------------------------------------------------------------------

// ReqSeePlayerInfo

// required int64 charid = 1;
inline bool ReqSeePlayerInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ReqSeePlayerInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ReqSeePlayerInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ReqSeePlayerInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 ReqSeePlayerInfo::charid() const {
  return charid_;
}
inline void ReqSeePlayerInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// -------------------------------------------------------------------

// SeePlayerInfo

// required int64 charid = 1;
inline bool SeePlayerInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void SeePlayerInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void SeePlayerInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void SeePlayerInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 SeePlayerInfo::charid() const {
  return charid_;
}
inline void SeePlayerInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// required string charname = 2;
inline bool SeePlayerInfo::has_charname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void SeePlayerInfo::set_has_charname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void SeePlayerInfo::clear_has_charname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void SeePlayerInfo::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& SeePlayerInfo::charname() const {
  return *charname_;
}
inline void SeePlayerInfo::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void SeePlayerInfo::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void SeePlayerInfo::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeePlayerInfo::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* SeePlayerInfo::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SeePlayerInfo::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 profession = 3;
inline bool SeePlayerInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void SeePlayerInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000004u;
}
inline void SeePlayerInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void SeePlayerInfo::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 SeePlayerInfo::profession() const {
  return profession_;
}
inline void SeePlayerInfo::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// required int32 sex = 4;
inline bool SeePlayerInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void SeePlayerInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void SeePlayerInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void SeePlayerInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 SeePlayerInfo::sex() const {
  return sex_;
}
inline void SeePlayerInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// required int32 hp = 5;
inline bool SeePlayerInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void SeePlayerInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void SeePlayerInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void SeePlayerInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 SeePlayerInfo::hp() const {
  return hp_;
}
inline void SeePlayerInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// required int32 hpmax = 6;
inline bool SeePlayerInfo::has_hpmax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void SeePlayerInfo::set_has_hpmax() {
  _has_bits_[0] |= 0x00000020u;
}
inline void SeePlayerInfo::clear_has_hpmax() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void SeePlayerInfo::clear_hpmax() {
  hpmax_ = 0;
  clear_has_hpmax();
}
inline ::google::protobuf::int32 SeePlayerInfo::hpmax() const {
  return hpmax_;
}
inline void SeePlayerInfo::set_hpmax(::google::protobuf::int32 value) {
  set_has_hpmax();
  hpmax_ = value;
}

// required int32 mp = 7;
inline bool SeePlayerInfo::has_mp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void SeePlayerInfo::set_has_mp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void SeePlayerInfo::clear_has_mp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void SeePlayerInfo::clear_mp() {
  mp_ = 0;
  clear_has_mp();
}
inline ::google::protobuf::int32 SeePlayerInfo::mp() const {
  return mp_;
}
inline void SeePlayerInfo::set_mp(::google::protobuf::int32 value) {
  set_has_mp();
  mp_ = value;
}

// required int32 mpmax = 8;
inline bool SeePlayerInfo::has_mpmax() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void SeePlayerInfo::set_has_mpmax() {
  _has_bits_[0] |= 0x00000080u;
}
inline void SeePlayerInfo::clear_has_mpmax() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void SeePlayerInfo::clear_mpmax() {
  mpmax_ = 0;
  clear_has_mpmax();
}
inline ::google::protobuf::int32 SeePlayerInfo::mpmax() const {
  return mpmax_;
}
inline void SeePlayerInfo::set_mpmax(::google::protobuf::int32 value) {
  set_has_mpmax();
  mpmax_ = value;
}

// required int32 strength = 9;
inline bool SeePlayerInfo::has_strength() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void SeePlayerInfo::set_has_strength() {
  _has_bits_[0] |= 0x00000100u;
}
inline void SeePlayerInfo::clear_has_strength() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void SeePlayerInfo::clear_strength() {
  strength_ = 0;
  clear_has_strength();
}
inline ::google::protobuf::int32 SeePlayerInfo::strength() const {
  return strength_;
}
inline void SeePlayerInfo::set_strength(::google::protobuf::int32 value) {
  set_has_strength();
  strength_ = value;
}

// required int32 cleverpower = 10;
inline bool SeePlayerInfo::has_cleverpower() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void SeePlayerInfo::set_has_cleverpower() {
  _has_bits_[0] |= 0x00000200u;
}
inline void SeePlayerInfo::clear_has_cleverpower() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void SeePlayerInfo::clear_cleverpower() {
  cleverpower_ = 0;
  clear_has_cleverpower();
}
inline ::google::protobuf::int32 SeePlayerInfo::cleverpower() const {
  return cleverpower_;
}
inline void SeePlayerInfo::set_cleverpower(::google::protobuf::int32 value) {
  set_has_cleverpower();
  cleverpower_ = value;
}

// optional int32 cleverair = 11;
inline bool SeePlayerInfo::has_cleverair() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void SeePlayerInfo::set_has_cleverair() {
  _has_bits_[0] |= 0x00000400u;
}
inline void SeePlayerInfo::clear_has_cleverair() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void SeePlayerInfo::clear_cleverair() {
  cleverair_ = 0;
  clear_has_cleverair();
}
inline ::google::protobuf::int32 SeePlayerInfo::cleverair() const {
  return cleverair_;
}
inline void SeePlayerInfo::set_cleverair(::google::protobuf::int32 value) {
  set_has_cleverair();
  cleverair_ = value;
}

// required int32 physicalpower = 12;
inline bool SeePlayerInfo::has_physicalpower() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void SeePlayerInfo::set_has_physicalpower() {
  _has_bits_[0] |= 0x00000800u;
}
inline void SeePlayerInfo::clear_has_physicalpower() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void SeePlayerInfo::clear_physicalpower() {
  physicalpower_ = 0;
  clear_has_physicalpower();
}
inline ::google::protobuf::int32 SeePlayerInfo::physicalpower() const {
  return physicalpower_;
}
inline void SeePlayerInfo::set_physicalpower(::google::protobuf::int32 value) {
  set_has_physicalpower();
  physicalpower_ = value;
}

// required int32 patience = 13;
inline bool SeePlayerInfo::has_patience() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void SeePlayerInfo::set_has_patience() {
  _has_bits_[0] |= 0x00001000u;
}
inline void SeePlayerInfo::clear_has_patience() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void SeePlayerInfo::clear_patience() {
  patience_ = 0;
  clear_has_patience();
}
inline ::google::protobuf::int32 SeePlayerInfo::patience() const {
  return patience_;
}
inline void SeePlayerInfo::set_patience(::google::protobuf::int32 value) {
  set_has_patience();
  patience_ = value;
}

// required int32 agility = 14;
inline bool SeePlayerInfo::has_agility() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void SeePlayerInfo::set_has_agility() {
  _has_bits_[0] |= 0x00002000u;
}
inline void SeePlayerInfo::clear_has_agility() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void SeePlayerInfo::clear_agility() {
  agility_ = 0;
  clear_has_agility();
}
inline ::google::protobuf::int32 SeePlayerInfo::agility() const {
  return agility_;
}
inline void SeePlayerInfo::set_agility(::google::protobuf::int32 value) {
  set_has_agility();
  agility_ = value;
}

// optional int32 power = 15;
inline bool SeePlayerInfo::has_power() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void SeePlayerInfo::set_has_power() {
  _has_bits_[0] |= 0x00004000u;
}
inline void SeePlayerInfo::clear_has_power() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void SeePlayerInfo::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 SeePlayerInfo::power() const {
  return power_;
}
inline void SeePlayerInfo::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// required int32 phyattack = 16;
inline bool SeePlayerInfo::has_phyattack() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void SeePlayerInfo::set_has_phyattack() {
  _has_bits_[0] |= 0x00008000u;
}
inline void SeePlayerInfo::clear_has_phyattack() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void SeePlayerInfo::clear_phyattack() {
  phyattack_ = 0;
  clear_has_phyattack();
}
inline ::google::protobuf::int32 SeePlayerInfo::phyattack() const {
  return phyattack_;
}
inline void SeePlayerInfo::set_phyattack(::google::protobuf::int32 value) {
  set_has_phyattack();
  phyattack_ = value;
}

// required int32 phyattackmax = 17;
inline bool SeePlayerInfo::has_phyattackmax() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void SeePlayerInfo::set_has_phyattackmax() {
  _has_bits_[0] |= 0x00010000u;
}
inline void SeePlayerInfo::clear_has_phyattackmax() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void SeePlayerInfo::clear_phyattackmax() {
  phyattackmax_ = 0;
  clear_has_phyattackmax();
}
inline ::google::protobuf::int32 SeePlayerInfo::phyattackmax() const {
  return phyattackmax_;
}
inline void SeePlayerInfo::set_phyattackmax(::google::protobuf::int32 value) {
  set_has_phyattackmax();
  phyattackmax_ = value;
}

// required int32 phydefence = 18;
inline bool SeePlayerInfo::has_phydefence() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void SeePlayerInfo::set_has_phydefence() {
  _has_bits_[0] |= 0x00020000u;
}
inline void SeePlayerInfo::clear_has_phydefence() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void SeePlayerInfo::clear_phydefence() {
  phydefence_ = 0;
  clear_has_phydefence();
}
inline ::google::protobuf::int32 SeePlayerInfo::phydefence() const {
  return phydefence_;
}
inline void SeePlayerInfo::set_phydefence(::google::protobuf::int32 value) {
  set_has_phydefence();
  phydefence_ = value;
}

// required int32 magicattack = 19;
inline bool SeePlayerInfo::has_magicattack() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void SeePlayerInfo::set_has_magicattack() {
  _has_bits_[0] |= 0x00040000u;
}
inline void SeePlayerInfo::clear_has_magicattack() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void SeePlayerInfo::clear_magicattack() {
  magicattack_ = 0;
  clear_has_magicattack();
}
inline ::google::protobuf::int32 SeePlayerInfo::magicattack() const {
  return magicattack_;
}
inline void SeePlayerInfo::set_magicattack(::google::protobuf::int32 value) {
  set_has_magicattack();
  magicattack_ = value;
}

// required int32 magicattackmax = 20;
inline bool SeePlayerInfo::has_magicattackmax() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void SeePlayerInfo::set_has_magicattackmax() {
  _has_bits_[0] |= 0x00080000u;
}
inline void SeePlayerInfo::clear_has_magicattackmax() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void SeePlayerInfo::clear_magicattackmax() {
  magicattackmax_ = 0;
  clear_has_magicattackmax();
}
inline ::google::protobuf::int32 SeePlayerInfo::magicattackmax() const {
  return magicattackmax_;
}
inline void SeePlayerInfo::set_magicattackmax(::google::protobuf::int32 value) {
  set_has_magicattackmax();
  magicattackmax_ = value;
}

// required int32 magicdefence = 21;
inline bool SeePlayerInfo::has_magicdefence() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void SeePlayerInfo::set_has_magicdefence() {
  _has_bits_[0] |= 0x00100000u;
}
inline void SeePlayerInfo::clear_has_magicdefence() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void SeePlayerInfo::clear_magicdefence() {
  magicdefence_ = 0;
  clear_has_magicdefence();
}
inline ::google::protobuf::int32 SeePlayerInfo::magicdefence() const {
  return magicdefence_;
}
inline void SeePlayerInfo::set_magicdefence(::google::protobuf::int32 value) {
  set_has_magicdefence();
  magicdefence_ = value;
}

// required int32 hitrate = 22;
inline bool SeePlayerInfo::has_hitrate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void SeePlayerInfo::set_has_hitrate() {
  _has_bits_[0] |= 0x00200000u;
}
inline void SeePlayerInfo::clear_has_hitrate() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void SeePlayerInfo::clear_hitrate() {
  hitrate_ = 0;
  clear_has_hitrate();
}
inline ::google::protobuf::int32 SeePlayerInfo::hitrate() const {
  return hitrate_;
}
inline void SeePlayerInfo::set_hitrate(::google::protobuf::int32 value) {
  set_has_hitrate();
  hitrate_ = value;
}

// required int32 avoidrate = 23;
inline bool SeePlayerInfo::has_avoidrate() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void SeePlayerInfo::set_has_avoidrate() {
  _has_bits_[0] |= 0x00400000u;
}
inline void SeePlayerInfo::clear_has_avoidrate() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void SeePlayerInfo::clear_avoidrate() {
  avoidrate_ = 0;
  clear_has_avoidrate();
}
inline ::google::protobuf::int32 SeePlayerInfo::avoidrate() const {
  return avoidrate_;
}
inline void SeePlayerInfo::set_avoidrate(::google::protobuf::int32 value) {
  set_has_avoidrate();
  avoidrate_ = value;
}

// required int32 baselucky = 24;
inline bool SeePlayerInfo::has_baselucky() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void SeePlayerInfo::set_has_baselucky() {
  _has_bits_[0] |= 0x00800000u;
}
inline void SeePlayerInfo::clear_has_baselucky() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void SeePlayerInfo::clear_baselucky() {
  baselucky_ = 0;
  clear_has_baselucky();
}
inline ::google::protobuf::int32 SeePlayerInfo::baselucky() const {
  return baselucky_;
}
inline void SeePlayerInfo::set_baselucky(::google::protobuf::int32 value) {
  set_has_baselucky();
  baselucky_ = value;
}

// required int32 crackdownrate = 25;
inline bool SeePlayerInfo::has_crackdownrate() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void SeePlayerInfo::set_has_crackdownrate() {
  _has_bits_[0] |= 0x01000000u;
}
inline void SeePlayerInfo::clear_has_crackdownrate() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void SeePlayerInfo::clear_crackdownrate() {
  crackdownrate_ = 0;
  clear_has_crackdownrate();
}
inline ::google::protobuf::int32 SeePlayerInfo::crackdownrate() const {
  return crackdownrate_;
}
inline void SeePlayerInfo::set_crackdownrate(::google::protobuf::int32 value) {
  set_has_crackdownrate();
  crackdownrate_ = value;
}

// required int32 baserte = 26;
inline bool SeePlayerInfo::has_baserte() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void SeePlayerInfo::set_has_baserte() {
  _has_bits_[0] |= 0x02000000u;
}
inline void SeePlayerInfo::clear_has_baserte() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void SeePlayerInfo::clear_baserte() {
  baserte_ = 0;
  clear_has_baserte();
}
inline ::google::protobuf::int32 SeePlayerInfo::baserte() const {
  return baserte_;
}
inline void SeePlayerInfo::set_baserte(::google::protobuf::int32 value) {
  set_has_baserte();
  baserte_ = value;
}

// repeated .PlayerInfo.ItemInfo equip = 27;
inline int SeePlayerInfo::equip_size() const {
  return equip_.size();
}
inline void SeePlayerInfo::clear_equip() {
  equip_.Clear();
}
inline const ::PlayerInfo::ItemInfo& SeePlayerInfo::equip(int index) const {
  return equip_.Get(index);
}
inline ::PlayerInfo::ItemInfo* SeePlayerInfo::mutable_equip(int index) {
  return equip_.Mutable(index);
}
inline ::PlayerInfo::ItemInfo* SeePlayerInfo::add_equip() {
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ItemInfo >&
SeePlayerInfo::equip() const {
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ItemInfo >*
SeePlayerInfo::mutable_equip() {
  return &equip_;
}

// required int32 fight = 28;
inline bool SeePlayerInfo::has_fight() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void SeePlayerInfo::set_has_fight() {
  _has_bits_[0] |= 0x08000000u;
}
inline void SeePlayerInfo::clear_has_fight() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void SeePlayerInfo::clear_fight() {
  fight_ = 0;
  clear_has_fight();
}
inline ::google::protobuf::int32 SeePlayerInfo::fight() const {
  return fight_;
}
inline void SeePlayerInfo::set_fight(::google::protobuf::int32 value) {
  set_has_fight();
  fight_ = value;
}

// required int32 powermax = 29;
inline bool SeePlayerInfo::has_powermax() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void SeePlayerInfo::set_has_powermax() {
  _has_bits_[0] |= 0x10000000u;
}
inline void SeePlayerInfo::clear_has_powermax() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void SeePlayerInfo::clear_powermax() {
  powermax_ = 0;
  clear_has_powermax();
}
inline ::google::protobuf::int32 SeePlayerInfo::powermax() const {
  return powermax_;
}
inline void SeePlayerInfo::set_powermax(::google::protobuf::int32 value) {
  set_has_powermax();
  powermax_ = value;
}

// required int64 exp = 30;
inline bool SeePlayerInfo::has_exp() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void SeePlayerInfo::set_has_exp() {
  _has_bits_[0] |= 0x20000000u;
}
inline void SeePlayerInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void SeePlayerInfo::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 SeePlayerInfo::exp() const {
  return exp_;
}
inline void SeePlayerInfo::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// required int32 lv = 31;
inline bool SeePlayerInfo::has_lv() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void SeePlayerInfo::set_has_lv() {
  _has_bits_[0] |= 0x40000000u;
}
inline void SeePlayerInfo::clear_has_lv() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void SeePlayerInfo::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 SeePlayerInfo::lv() const {
  return lv_;
}
inline void SeePlayerInfo::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// required int32 magicequipid = 32;
inline bool SeePlayerInfo::has_magicequipid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void SeePlayerInfo::set_has_magicequipid() {
  _has_bits_[0] |= 0x80000000u;
}
inline void SeePlayerInfo::clear_has_magicequipid() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void SeePlayerInfo::clear_magicequipid() {
  magicequipid_ = 0;
  clear_has_magicequipid();
}
inline ::google::protobuf::int32 SeePlayerInfo::magicequipid() const {
  return magicequipid_;
}
inline void SeePlayerInfo::set_magicequipid(::google::protobuf::int32 value) {
  set_has_magicequipid();
  magicequipid_ = value;
}

// required string guildname = 33;
inline bool SeePlayerInfo::has_guildname() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void SeePlayerInfo::set_has_guildname() {
  _has_bits_[1] |= 0x00000001u;
}
inline void SeePlayerInfo::clear_has_guildname() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void SeePlayerInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& SeePlayerInfo::guildname() const {
  return *guildname_;
}
inline void SeePlayerInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void SeePlayerInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void SeePlayerInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* SeePlayerInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* SeePlayerInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void SeePlayerInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// required int32 guildjob = 34;
inline bool SeePlayerInfo::has_guildjob() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void SeePlayerInfo::set_has_guildjob() {
  _has_bits_[1] |= 0x00000002u;
}
inline void SeePlayerInfo::clear_has_guildjob() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void SeePlayerInfo::clear_guildjob() {
  guildjob_ = 0;
  clear_has_guildjob();
}
inline ::google::protobuf::int32 SeePlayerInfo::guildjob() const {
  return guildjob_;
}
inline void SeePlayerInfo::set_guildjob(::google::protobuf::int32 value) {
  set_has_guildjob();
  guildjob_ = value;
}

// required int32 titleid = 35;
inline bool SeePlayerInfo::has_titleid() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void SeePlayerInfo::set_has_titleid() {
  _has_bits_[1] |= 0x00000004u;
}
inline void SeePlayerInfo::clear_has_titleid() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void SeePlayerInfo::clear_titleid() {
  titleid_ = 0;
  clear_has_titleid();
}
inline ::google::protobuf::int32 SeePlayerInfo::titleid() const {
  return titleid_;
}
inline void SeePlayerInfo::set_titleid(::google::protobuf::int32 value) {
  set_has_titleid();
  titleid_ = value;
}

// required int32 pkcount = 36;
inline bool SeePlayerInfo::has_pkcount() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void SeePlayerInfo::set_has_pkcount() {
  _has_bits_[1] |= 0x00000008u;
}
inline void SeePlayerInfo::clear_has_pkcount() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void SeePlayerInfo::clear_pkcount() {
  pkcount_ = 0;
  clear_has_pkcount();
}
inline ::google::protobuf::int32 SeePlayerInfo::pkcount() const {
  return pkcount_;
}
inline void SeePlayerInfo::set_pkcount(::google::protobuf::int32 value) {
  set_has_pkcount();
  pkcount_ = value;
}

// required int32 viplv = 37;
inline bool SeePlayerInfo::has_viplv() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void SeePlayerInfo::set_has_viplv() {
  _has_bits_[1] |= 0x00000010u;
}
inline void SeePlayerInfo::clear_has_viplv() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void SeePlayerInfo::clear_viplv() {
  viplv_ = 0;
  clear_has_viplv();
}
inline ::google::protobuf::int32 SeePlayerInfo::viplv() const {
  return viplv_;
}
inline void SeePlayerInfo::set_viplv(::google::protobuf::int32 value) {
  set_has_viplv();
  viplv_ = value;
}

// -------------------------------------------------------------------

// BeyondPlayerInfo

// required int64 charid = 1;
inline bool BeyondPlayerInfo::has_charid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void BeyondPlayerInfo::set_has_charid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void BeyondPlayerInfo::clear_has_charid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void BeyondPlayerInfo::clear_charid() {
  charid_ = GOOGLE_LONGLONG(0);
  clear_has_charid();
}
inline ::google::protobuf::int64 BeyondPlayerInfo::charid() const {
  return charid_;
}
inline void BeyondPlayerInfo::set_charid(::google::protobuf::int64 value) {
  set_has_charid();
  charid_ = value;
}

// optional string charname = 2;
inline bool BeyondPlayerInfo::has_charname() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void BeyondPlayerInfo::set_has_charname() {
  _has_bits_[0] |= 0x00000002u;
}
inline void BeyondPlayerInfo::clear_has_charname() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void BeyondPlayerInfo::clear_charname() {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    charname_->clear();
  }
  clear_has_charname();
}
inline const ::std::string& BeyondPlayerInfo::charname() const {
  return *charname_;
}
inline void BeyondPlayerInfo::set_charname(const ::std::string& value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void BeyondPlayerInfo::set_charname(const char* value) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(value);
}
inline void BeyondPlayerInfo::set_charname(const char* value, size_t size) {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  charname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BeyondPlayerInfo::mutable_charname() {
  set_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    charname_ = new ::std::string;
  }
  return charname_;
}
inline ::std::string* BeyondPlayerInfo::release_charname() {
  clear_has_charname();
  if (charname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = charname_;
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BeyondPlayerInfo::set_allocated_charname(::std::string* charname) {
  if (charname_ != &::google::protobuf::internal::kEmptyString) {
    delete charname_;
  }
  if (charname) {
    set_has_charname();
    charname_ = charname;
  } else {
    clear_has_charname();
    charname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 profession = 3;
inline bool BeyondPlayerInfo::has_profession() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void BeyondPlayerInfo::set_has_profession() {
  _has_bits_[0] |= 0x00000004u;
}
inline void BeyondPlayerInfo::clear_has_profession() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void BeyondPlayerInfo::clear_profession() {
  profession_ = 0;
  clear_has_profession();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::profession() const {
  return profession_;
}
inline void BeyondPlayerInfo::set_profession(::google::protobuf::int32 value) {
  set_has_profession();
  profession_ = value;
}

// optional int32 sex = 4;
inline bool BeyondPlayerInfo::has_sex() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void BeyondPlayerInfo::set_has_sex() {
  _has_bits_[0] |= 0x00000008u;
}
inline void BeyondPlayerInfo::clear_has_sex() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void BeyondPlayerInfo::clear_sex() {
  sex_ = 0;
  clear_has_sex();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::sex() const {
  return sex_;
}
inline void BeyondPlayerInfo::set_sex(::google::protobuf::int32 value) {
  set_has_sex();
  sex_ = value;
}

// optional int32 hp = 5;
inline bool BeyondPlayerInfo::has_hp() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void BeyondPlayerInfo::set_has_hp() {
  _has_bits_[0] |= 0x00000010u;
}
inline void BeyondPlayerInfo::clear_has_hp() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void BeyondPlayerInfo::clear_hp() {
  hp_ = 0;
  clear_has_hp();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::hp() const {
  return hp_;
}
inline void BeyondPlayerInfo::set_hp(::google::protobuf::int32 value) {
  set_has_hp();
  hp_ = value;
}

// optional int32 hpmax = 6;
inline bool BeyondPlayerInfo::has_hpmax() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void BeyondPlayerInfo::set_has_hpmax() {
  _has_bits_[0] |= 0x00000020u;
}
inline void BeyondPlayerInfo::clear_has_hpmax() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void BeyondPlayerInfo::clear_hpmax() {
  hpmax_ = 0;
  clear_has_hpmax();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::hpmax() const {
  return hpmax_;
}
inline void BeyondPlayerInfo::set_hpmax(::google::protobuf::int32 value) {
  set_has_hpmax();
  hpmax_ = value;
}

// optional int32 mp = 7;
inline bool BeyondPlayerInfo::has_mp() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void BeyondPlayerInfo::set_has_mp() {
  _has_bits_[0] |= 0x00000040u;
}
inline void BeyondPlayerInfo::clear_has_mp() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void BeyondPlayerInfo::clear_mp() {
  mp_ = 0;
  clear_has_mp();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::mp() const {
  return mp_;
}
inline void BeyondPlayerInfo::set_mp(::google::protobuf::int32 value) {
  set_has_mp();
  mp_ = value;
}

// optional int32 mpmax = 8;
inline bool BeyondPlayerInfo::has_mpmax() const {
  return (_has_bits_[0] & 0x00000080u) != 0;
}
inline void BeyondPlayerInfo::set_has_mpmax() {
  _has_bits_[0] |= 0x00000080u;
}
inline void BeyondPlayerInfo::clear_has_mpmax() {
  _has_bits_[0] &= ~0x00000080u;
}
inline void BeyondPlayerInfo::clear_mpmax() {
  mpmax_ = 0;
  clear_has_mpmax();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::mpmax() const {
  return mpmax_;
}
inline void BeyondPlayerInfo::set_mpmax(::google::protobuf::int32 value) {
  set_has_mpmax();
  mpmax_ = value;
}

// optional int32 strength = 9;
inline bool BeyondPlayerInfo::has_strength() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void BeyondPlayerInfo::set_has_strength() {
  _has_bits_[0] |= 0x00000100u;
}
inline void BeyondPlayerInfo::clear_has_strength() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void BeyondPlayerInfo::clear_strength() {
  strength_ = 0;
  clear_has_strength();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::strength() const {
  return strength_;
}
inline void BeyondPlayerInfo::set_strength(::google::protobuf::int32 value) {
  set_has_strength();
  strength_ = value;
}

// optional int32 cleverpower = 10;
inline bool BeyondPlayerInfo::has_cleverpower() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void BeyondPlayerInfo::set_has_cleverpower() {
  _has_bits_[0] |= 0x00000200u;
}
inline void BeyondPlayerInfo::clear_has_cleverpower() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void BeyondPlayerInfo::clear_cleverpower() {
  cleverpower_ = 0;
  clear_has_cleverpower();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::cleverpower() const {
  return cleverpower_;
}
inline void BeyondPlayerInfo::set_cleverpower(::google::protobuf::int32 value) {
  set_has_cleverpower();
  cleverpower_ = value;
}

// optional int32 cleverair = 11;
inline bool BeyondPlayerInfo::has_cleverair() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void BeyondPlayerInfo::set_has_cleverair() {
  _has_bits_[0] |= 0x00000400u;
}
inline void BeyondPlayerInfo::clear_has_cleverair() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void BeyondPlayerInfo::clear_cleverair() {
  cleverair_ = 0;
  clear_has_cleverair();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::cleverair() const {
  return cleverair_;
}
inline void BeyondPlayerInfo::set_cleverair(::google::protobuf::int32 value) {
  set_has_cleverair();
  cleverair_ = value;
}

// optional int32 physicalpower = 12;
inline bool BeyondPlayerInfo::has_physicalpower() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void BeyondPlayerInfo::set_has_physicalpower() {
  _has_bits_[0] |= 0x00000800u;
}
inline void BeyondPlayerInfo::clear_has_physicalpower() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void BeyondPlayerInfo::clear_physicalpower() {
  physicalpower_ = 0;
  clear_has_physicalpower();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::physicalpower() const {
  return physicalpower_;
}
inline void BeyondPlayerInfo::set_physicalpower(::google::protobuf::int32 value) {
  set_has_physicalpower();
  physicalpower_ = value;
}

// optional int32 patience = 13;
inline bool BeyondPlayerInfo::has_patience() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void BeyondPlayerInfo::set_has_patience() {
  _has_bits_[0] |= 0x00001000u;
}
inline void BeyondPlayerInfo::clear_has_patience() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void BeyondPlayerInfo::clear_patience() {
  patience_ = 0;
  clear_has_patience();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::patience() const {
  return patience_;
}
inline void BeyondPlayerInfo::set_patience(::google::protobuf::int32 value) {
  set_has_patience();
  patience_ = value;
}

// optional int32 agility = 14;
inline bool BeyondPlayerInfo::has_agility() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void BeyondPlayerInfo::set_has_agility() {
  _has_bits_[0] |= 0x00002000u;
}
inline void BeyondPlayerInfo::clear_has_agility() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void BeyondPlayerInfo::clear_agility() {
  agility_ = 0;
  clear_has_agility();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::agility() const {
  return agility_;
}
inline void BeyondPlayerInfo::set_agility(::google::protobuf::int32 value) {
  set_has_agility();
  agility_ = value;
}

// optional int32 power = 15;
inline bool BeyondPlayerInfo::has_power() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void BeyondPlayerInfo::set_has_power() {
  _has_bits_[0] |= 0x00004000u;
}
inline void BeyondPlayerInfo::clear_has_power() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void BeyondPlayerInfo::clear_power() {
  power_ = 0;
  clear_has_power();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::power() const {
  return power_;
}
inline void BeyondPlayerInfo::set_power(::google::protobuf::int32 value) {
  set_has_power();
  power_ = value;
}

// optional int32 phyattack = 16;
inline bool BeyondPlayerInfo::has_phyattack() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void BeyondPlayerInfo::set_has_phyattack() {
  _has_bits_[0] |= 0x00008000u;
}
inline void BeyondPlayerInfo::clear_has_phyattack() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void BeyondPlayerInfo::clear_phyattack() {
  phyattack_ = 0;
  clear_has_phyattack();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::phyattack() const {
  return phyattack_;
}
inline void BeyondPlayerInfo::set_phyattack(::google::protobuf::int32 value) {
  set_has_phyattack();
  phyattack_ = value;
}

// optional int32 phyattackmax = 17;
inline bool BeyondPlayerInfo::has_phyattackmax() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void BeyondPlayerInfo::set_has_phyattackmax() {
  _has_bits_[0] |= 0x00010000u;
}
inline void BeyondPlayerInfo::clear_has_phyattackmax() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void BeyondPlayerInfo::clear_phyattackmax() {
  phyattackmax_ = 0;
  clear_has_phyattackmax();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::phyattackmax() const {
  return phyattackmax_;
}
inline void BeyondPlayerInfo::set_phyattackmax(::google::protobuf::int32 value) {
  set_has_phyattackmax();
  phyattackmax_ = value;
}

// optional int32 phydefence = 18;
inline bool BeyondPlayerInfo::has_phydefence() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void BeyondPlayerInfo::set_has_phydefence() {
  _has_bits_[0] |= 0x00020000u;
}
inline void BeyondPlayerInfo::clear_has_phydefence() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void BeyondPlayerInfo::clear_phydefence() {
  phydefence_ = 0;
  clear_has_phydefence();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::phydefence() const {
  return phydefence_;
}
inline void BeyondPlayerInfo::set_phydefence(::google::protobuf::int32 value) {
  set_has_phydefence();
  phydefence_ = value;
}

// optional int32 magicattack = 19;
inline bool BeyondPlayerInfo::has_magicattack() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void BeyondPlayerInfo::set_has_magicattack() {
  _has_bits_[0] |= 0x00040000u;
}
inline void BeyondPlayerInfo::clear_has_magicattack() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void BeyondPlayerInfo::clear_magicattack() {
  magicattack_ = 0;
  clear_has_magicattack();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::magicattack() const {
  return magicattack_;
}
inline void BeyondPlayerInfo::set_magicattack(::google::protobuf::int32 value) {
  set_has_magicattack();
  magicattack_ = value;
}

// optional int32 magicattackmax = 20;
inline bool BeyondPlayerInfo::has_magicattackmax() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void BeyondPlayerInfo::set_has_magicattackmax() {
  _has_bits_[0] |= 0x00080000u;
}
inline void BeyondPlayerInfo::clear_has_magicattackmax() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void BeyondPlayerInfo::clear_magicattackmax() {
  magicattackmax_ = 0;
  clear_has_magicattackmax();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::magicattackmax() const {
  return magicattackmax_;
}
inline void BeyondPlayerInfo::set_magicattackmax(::google::protobuf::int32 value) {
  set_has_magicattackmax();
  magicattackmax_ = value;
}

// optional int32 magicdefence = 21;
inline bool BeyondPlayerInfo::has_magicdefence() const {
  return (_has_bits_[0] & 0x00100000u) != 0;
}
inline void BeyondPlayerInfo::set_has_magicdefence() {
  _has_bits_[0] |= 0x00100000u;
}
inline void BeyondPlayerInfo::clear_has_magicdefence() {
  _has_bits_[0] &= ~0x00100000u;
}
inline void BeyondPlayerInfo::clear_magicdefence() {
  magicdefence_ = 0;
  clear_has_magicdefence();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::magicdefence() const {
  return magicdefence_;
}
inline void BeyondPlayerInfo::set_magicdefence(::google::protobuf::int32 value) {
  set_has_magicdefence();
  magicdefence_ = value;
}

// optional int32 hitrate = 22;
inline bool BeyondPlayerInfo::has_hitrate() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void BeyondPlayerInfo::set_has_hitrate() {
  _has_bits_[0] |= 0x00200000u;
}
inline void BeyondPlayerInfo::clear_has_hitrate() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void BeyondPlayerInfo::clear_hitrate() {
  hitrate_ = 0;
  clear_has_hitrate();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::hitrate() const {
  return hitrate_;
}
inline void BeyondPlayerInfo::set_hitrate(::google::protobuf::int32 value) {
  set_has_hitrate();
  hitrate_ = value;
}

// optional int32 avoidrate = 23;
inline bool BeyondPlayerInfo::has_avoidrate() const {
  return (_has_bits_[0] & 0x00400000u) != 0;
}
inline void BeyondPlayerInfo::set_has_avoidrate() {
  _has_bits_[0] |= 0x00400000u;
}
inline void BeyondPlayerInfo::clear_has_avoidrate() {
  _has_bits_[0] &= ~0x00400000u;
}
inline void BeyondPlayerInfo::clear_avoidrate() {
  avoidrate_ = 0;
  clear_has_avoidrate();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::avoidrate() const {
  return avoidrate_;
}
inline void BeyondPlayerInfo::set_avoidrate(::google::protobuf::int32 value) {
  set_has_avoidrate();
  avoidrate_ = value;
}

// optional int32 baselucky = 24;
inline bool BeyondPlayerInfo::has_baselucky() const {
  return (_has_bits_[0] & 0x00800000u) != 0;
}
inline void BeyondPlayerInfo::set_has_baselucky() {
  _has_bits_[0] |= 0x00800000u;
}
inline void BeyondPlayerInfo::clear_has_baselucky() {
  _has_bits_[0] &= ~0x00800000u;
}
inline void BeyondPlayerInfo::clear_baselucky() {
  baselucky_ = 0;
  clear_has_baselucky();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::baselucky() const {
  return baselucky_;
}
inline void BeyondPlayerInfo::set_baselucky(::google::protobuf::int32 value) {
  set_has_baselucky();
  baselucky_ = value;
}

// optional int32 crackdownrate = 25;
inline bool BeyondPlayerInfo::has_crackdownrate() const {
  return (_has_bits_[0] & 0x01000000u) != 0;
}
inline void BeyondPlayerInfo::set_has_crackdownrate() {
  _has_bits_[0] |= 0x01000000u;
}
inline void BeyondPlayerInfo::clear_has_crackdownrate() {
  _has_bits_[0] &= ~0x01000000u;
}
inline void BeyondPlayerInfo::clear_crackdownrate() {
  crackdownrate_ = 0;
  clear_has_crackdownrate();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::crackdownrate() const {
  return crackdownrate_;
}
inline void BeyondPlayerInfo::set_crackdownrate(::google::protobuf::int32 value) {
  set_has_crackdownrate();
  crackdownrate_ = value;
}

// optional int32 baserte = 26;
inline bool BeyondPlayerInfo::has_baserte() const {
  return (_has_bits_[0] & 0x02000000u) != 0;
}
inline void BeyondPlayerInfo::set_has_baserte() {
  _has_bits_[0] |= 0x02000000u;
}
inline void BeyondPlayerInfo::clear_has_baserte() {
  _has_bits_[0] &= ~0x02000000u;
}
inline void BeyondPlayerInfo::clear_baserte() {
  baserte_ = 0;
  clear_has_baserte();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::baserte() const {
  return baserte_;
}
inline void BeyondPlayerInfo::set_baserte(::google::protobuf::int32 value) {
  set_has_baserte();
  baserte_ = value;
}

// repeated .PlayerInfo.ItemInfo equip = 27;
inline int BeyondPlayerInfo::equip_size() const {
  return equip_.size();
}
inline void BeyondPlayerInfo::clear_equip() {
  equip_.Clear();
}
inline const ::PlayerInfo::ItemInfo& BeyondPlayerInfo::equip(int index) const {
  return equip_.Get(index);
}
inline ::PlayerInfo::ItemInfo* BeyondPlayerInfo::mutable_equip(int index) {
  return equip_.Mutable(index);
}
inline ::PlayerInfo::ItemInfo* BeyondPlayerInfo::add_equip() {
  return equip_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ItemInfo >&
BeyondPlayerInfo::equip() const {
  return equip_;
}
inline ::google::protobuf::RepeatedPtrField< ::PlayerInfo::ItemInfo >*
BeyondPlayerInfo::mutable_equip() {
  return &equip_;
}

// optional int32 fight = 28;
inline bool BeyondPlayerInfo::has_fight() const {
  return (_has_bits_[0] & 0x08000000u) != 0;
}
inline void BeyondPlayerInfo::set_has_fight() {
  _has_bits_[0] |= 0x08000000u;
}
inline void BeyondPlayerInfo::clear_has_fight() {
  _has_bits_[0] &= ~0x08000000u;
}
inline void BeyondPlayerInfo::clear_fight() {
  fight_ = 0;
  clear_has_fight();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::fight() const {
  return fight_;
}
inline void BeyondPlayerInfo::set_fight(::google::protobuf::int32 value) {
  set_has_fight();
  fight_ = value;
}

// optional int32 powermax = 29;
inline bool BeyondPlayerInfo::has_powermax() const {
  return (_has_bits_[0] & 0x10000000u) != 0;
}
inline void BeyondPlayerInfo::set_has_powermax() {
  _has_bits_[0] |= 0x10000000u;
}
inline void BeyondPlayerInfo::clear_has_powermax() {
  _has_bits_[0] &= ~0x10000000u;
}
inline void BeyondPlayerInfo::clear_powermax() {
  powermax_ = 0;
  clear_has_powermax();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::powermax() const {
  return powermax_;
}
inline void BeyondPlayerInfo::set_powermax(::google::protobuf::int32 value) {
  set_has_powermax();
  powermax_ = value;
}

// optional int64 exp = 30;
inline bool BeyondPlayerInfo::has_exp() const {
  return (_has_bits_[0] & 0x20000000u) != 0;
}
inline void BeyondPlayerInfo::set_has_exp() {
  _has_bits_[0] |= 0x20000000u;
}
inline void BeyondPlayerInfo::clear_has_exp() {
  _has_bits_[0] &= ~0x20000000u;
}
inline void BeyondPlayerInfo::clear_exp() {
  exp_ = GOOGLE_LONGLONG(0);
  clear_has_exp();
}
inline ::google::protobuf::int64 BeyondPlayerInfo::exp() const {
  return exp_;
}
inline void BeyondPlayerInfo::set_exp(::google::protobuf::int64 value) {
  set_has_exp();
  exp_ = value;
}

// optional int32 lv = 31;
inline bool BeyondPlayerInfo::has_lv() const {
  return (_has_bits_[0] & 0x40000000u) != 0;
}
inline void BeyondPlayerInfo::set_has_lv() {
  _has_bits_[0] |= 0x40000000u;
}
inline void BeyondPlayerInfo::clear_has_lv() {
  _has_bits_[0] &= ~0x40000000u;
}
inline void BeyondPlayerInfo::clear_lv() {
  lv_ = 0;
  clear_has_lv();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::lv() const {
  return lv_;
}
inline void BeyondPlayerInfo::set_lv(::google::protobuf::int32 value) {
  set_has_lv();
  lv_ = value;
}

// optional int32 magicequipid = 32;
inline bool BeyondPlayerInfo::has_magicequipid() const {
  return (_has_bits_[0] & 0x80000000u) != 0;
}
inline void BeyondPlayerInfo::set_has_magicequipid() {
  _has_bits_[0] |= 0x80000000u;
}
inline void BeyondPlayerInfo::clear_has_magicequipid() {
  _has_bits_[0] &= ~0x80000000u;
}
inline void BeyondPlayerInfo::clear_magicequipid() {
  magicequipid_ = 0;
  clear_has_magicequipid();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::magicequipid() const {
  return magicequipid_;
}
inline void BeyondPlayerInfo::set_magicequipid(::google::protobuf::int32 value) {
  set_has_magicequipid();
  magicequipid_ = value;
}

// optional string guildname = 33;
inline bool BeyondPlayerInfo::has_guildname() const {
  return (_has_bits_[1] & 0x00000001u) != 0;
}
inline void BeyondPlayerInfo::set_has_guildname() {
  _has_bits_[1] |= 0x00000001u;
}
inline void BeyondPlayerInfo::clear_has_guildname() {
  _has_bits_[1] &= ~0x00000001u;
}
inline void BeyondPlayerInfo::clear_guildname() {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    guildname_->clear();
  }
  clear_has_guildname();
}
inline const ::std::string& BeyondPlayerInfo::guildname() const {
  return *guildname_;
}
inline void BeyondPlayerInfo::set_guildname(const ::std::string& value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void BeyondPlayerInfo::set_guildname(const char* value) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(value);
}
inline void BeyondPlayerInfo::set_guildname(const char* value, size_t size) {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  guildname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* BeyondPlayerInfo::mutable_guildname() {
  set_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    guildname_ = new ::std::string;
  }
  return guildname_;
}
inline ::std::string* BeyondPlayerInfo::release_guildname() {
  clear_has_guildname();
  if (guildname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = guildname_;
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void BeyondPlayerInfo::set_allocated_guildname(::std::string* guildname) {
  if (guildname_ != &::google::protobuf::internal::kEmptyString) {
    delete guildname_;
  }
  if (guildname) {
    set_has_guildname();
    guildname_ = guildname;
  } else {
    clear_has_guildname();
    guildname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 guildjob = 34;
inline bool BeyondPlayerInfo::has_guildjob() const {
  return (_has_bits_[1] & 0x00000002u) != 0;
}
inline void BeyondPlayerInfo::set_has_guildjob() {
  _has_bits_[1] |= 0x00000002u;
}
inline void BeyondPlayerInfo::clear_has_guildjob() {
  _has_bits_[1] &= ~0x00000002u;
}
inline void BeyondPlayerInfo::clear_guildjob() {
  guildjob_ = 0;
  clear_has_guildjob();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::guildjob() const {
  return guildjob_;
}
inline void BeyondPlayerInfo::set_guildjob(::google::protobuf::int32 value) {
  set_has_guildjob();
  guildjob_ = value;
}

// optional int32 titleid = 35;
inline bool BeyondPlayerInfo::has_titleid() const {
  return (_has_bits_[1] & 0x00000004u) != 0;
}
inline void BeyondPlayerInfo::set_has_titleid() {
  _has_bits_[1] |= 0x00000004u;
}
inline void BeyondPlayerInfo::clear_has_titleid() {
  _has_bits_[1] &= ~0x00000004u;
}
inline void BeyondPlayerInfo::clear_titleid() {
  titleid_ = 0;
  clear_has_titleid();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::titleid() const {
  return titleid_;
}
inline void BeyondPlayerInfo::set_titleid(::google::protobuf::int32 value) {
  set_has_titleid();
  titleid_ = value;
}

// optional int32 pkcount = 36;
inline bool BeyondPlayerInfo::has_pkcount() const {
  return (_has_bits_[1] & 0x00000008u) != 0;
}
inline void BeyondPlayerInfo::set_has_pkcount() {
  _has_bits_[1] |= 0x00000008u;
}
inline void BeyondPlayerInfo::clear_has_pkcount() {
  _has_bits_[1] &= ~0x00000008u;
}
inline void BeyondPlayerInfo::clear_pkcount() {
  pkcount_ = 0;
  clear_has_pkcount();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::pkcount() const {
  return pkcount_;
}
inline void BeyondPlayerInfo::set_pkcount(::google::protobuf::int32 value) {
  set_has_pkcount();
  pkcount_ = value;
}

// optional int32 viplv = 37;
inline bool BeyondPlayerInfo::has_viplv() const {
  return (_has_bits_[1] & 0x00000010u) != 0;
}
inline void BeyondPlayerInfo::set_has_viplv() {
  _has_bits_[1] |= 0x00000010u;
}
inline void BeyondPlayerInfo::clear_has_viplv() {
  _has_bits_[1] &= ~0x00000010u;
}
inline void BeyondPlayerInfo::clear_viplv() {
  viplv_ = 0;
  clear_has_viplv();
}
inline ::google::protobuf::int32 BeyondPlayerInfo::viplv() const {
  return viplv_;
}
inline void BeyondPlayerInfo::set_viplv(::google::protobuf::int32 value) {
  set_has_viplv();
  viplv_ = value;
}

// -------------------------------------------------------------------

// GMGetWSAckData

// optional int32 clanID = 1;
inline bool GMGetWSAckData::has_clanid() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMGetWSAckData::set_has_clanid() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMGetWSAckData::clear_has_clanid() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMGetWSAckData::clear_clanid() {
  clanid_ = 0;
  clear_has_clanid();
}
inline ::google::protobuf::int32 GMGetWSAckData::clanid() const {
  return clanid_;
}
inline void GMGetWSAckData::set_clanid(::google::protobuf::int32 value) {
  set_has_clanid();
  clanid_ = value;
}

// optional int32 clanLevel = 2;
inline bool GMGetWSAckData::has_clanlevel() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void GMGetWSAckData::set_has_clanlevel() {
  _has_bits_[0] |= 0x00000002u;
}
inline void GMGetWSAckData::clear_has_clanlevel() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void GMGetWSAckData::clear_clanlevel() {
  clanlevel_ = 0;
  clear_has_clanlevel();
}
inline ::google::protobuf::int32 GMGetWSAckData::clanlevel() const {
  return clanlevel_;
}
inline void GMGetWSAckData::set_clanlevel(::google::protobuf::int32 value) {
  set_has_clanlevel();
  clanlevel_ = value;
}

// optional string clanName = 3;
inline bool GMGetWSAckData::has_clanname() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void GMGetWSAckData::set_has_clanname() {
  _has_bits_[0] |= 0x00000004u;
}
inline void GMGetWSAckData::clear_has_clanname() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void GMGetWSAckData::clear_clanname() {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    clanname_->clear();
  }
  clear_has_clanname();
}
inline const ::std::string& GMGetWSAckData::clanname() const {
  return *clanname_;
}
inline void GMGetWSAckData::set_clanname(const ::std::string& value) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(value);
}
inline void GMGetWSAckData::set_clanname(const char* value) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(value);
}
inline void GMGetWSAckData::set_clanname(const char* value, size_t size) {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  clanname_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMGetWSAckData::mutable_clanname() {
  set_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    clanname_ = new ::std::string;
  }
  return clanname_;
}
inline ::std::string* GMGetWSAckData::release_clanname() {
  clear_has_clanname();
  if (clanname_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = clanname_;
    clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMGetWSAckData::set_allocated_clanname(::std::string* clanname) {
  if (clanname_ != &::google::protobuf::internal::kEmptyString) {
    delete clanname_;
  }
  if (clanname) {
    set_has_clanname();
    clanname_ = clanname;
  } else {
    clear_has_clanname();
    clanname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int32 fajob = 4;
inline bool GMGetWSAckData::has_fajob() const {
  return (_has_bits_[0] & 0x00000008u) != 0;
}
inline void GMGetWSAckData::set_has_fajob() {
  _has_bits_[0] |= 0x00000008u;
}
inline void GMGetWSAckData::clear_has_fajob() {
  _has_bits_[0] &= ~0x00000008u;
}
inline void GMGetWSAckData::clear_fajob() {
  fajob_ = 0;
  clear_has_fajob();
}
inline ::google::protobuf::int32 GMGetWSAckData::fajob() const {
  return fajob_;
}
inline void GMGetWSAckData::set_fajob(::google::protobuf::int32 value) {
  set_has_fajob();
  fajob_ = value;
}

// optional int32 clanicon = 5;
inline bool GMGetWSAckData::has_clanicon() const {
  return (_has_bits_[0] & 0x00000010u) != 0;
}
inline void GMGetWSAckData::set_has_clanicon() {
  _has_bits_[0] |= 0x00000010u;
}
inline void GMGetWSAckData::clear_has_clanicon() {
  _has_bits_[0] &= ~0x00000010u;
}
inline void GMGetWSAckData::clear_clanicon() {
  clanicon_ = 0;
  clear_has_clanicon();
}
inline ::google::protobuf::int32 GMGetWSAckData::clanicon() const {
  return clanicon_;
}
inline void GMGetWSAckData::set_clanicon(::google::protobuf::int32 value) {
  set_has_clanicon();
  clanicon_ = value;
}

// optional int32 facontribution = 6;
inline bool GMGetWSAckData::has_facontribution() const {
  return (_has_bits_[0] & 0x00000020u) != 0;
}
inline void GMGetWSAckData::set_has_facontribution() {
  _has_bits_[0] |= 0x00000020u;
}
inline void GMGetWSAckData::clear_has_facontribution() {
  _has_bits_[0] &= ~0x00000020u;
}
inline void GMGetWSAckData::clear_facontribution() {
  facontribution_ = 0;
  clear_has_facontribution();
}
inline ::google::protobuf::int32 GMGetWSAckData::facontribution() const {
  return facontribution_;
}
inline void GMGetWSAckData::set_facontribution(::google::protobuf::int32 value) {
  set_has_facontribution();
  facontribution_ = value;
}

// optional int64 teamid = 7;
inline bool GMGetWSAckData::has_teamid() const {
  return (_has_bits_[0] & 0x00000040u) != 0;
}
inline void GMGetWSAckData::set_has_teamid() {
  _has_bits_[0] |= 0x00000040u;
}
inline void GMGetWSAckData::clear_has_teamid() {
  _has_bits_[0] &= ~0x00000040u;
}
inline void GMGetWSAckData::clear_teamid() {
  teamid_ = GOOGLE_LONGLONG(0);
  clear_has_teamid();
}
inline ::google::protobuf::int64 GMGetWSAckData::teamid() const {
  return teamid_;
}
inline void GMGetWSAckData::set_teamid(::google::protobuf::int64 value) {
  set_has_teamid();
  teamid_ = value;
}

// repeated int32 title = 8;
inline int GMGetWSAckData::title_size() const {
  return title_.size();
}
inline void GMGetWSAckData::clear_title() {
  title_.Clear();
}
inline ::google::protobuf::int32 GMGetWSAckData::title(int index) const {
  return title_.Get(index);
}
inline void GMGetWSAckData::set_title(int index, ::google::protobuf::int32 value) {
  title_.Set(index, value);
}
inline void GMGetWSAckData::add_title(::google::protobuf::int32 value) {
  title_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GMGetWSAckData::title() const {
  return title_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GMGetWSAckData::mutable_title() {
  return &title_;
}

// optional int64 marryotherid = 9;
inline bool GMGetWSAckData::has_marryotherid() const {
  return (_has_bits_[0] & 0x00000100u) != 0;
}
inline void GMGetWSAckData::set_has_marryotherid() {
  _has_bits_[0] |= 0x00000100u;
}
inline void GMGetWSAckData::clear_has_marryotherid() {
  _has_bits_[0] &= ~0x00000100u;
}
inline void GMGetWSAckData::clear_marryotherid() {
  marryotherid_ = GOOGLE_LONGLONG(0);
  clear_has_marryotherid();
}
inline ::google::protobuf::int64 GMGetWSAckData::marryotherid() const {
  return marryotherid_;
}
inline void GMGetWSAckData::set_marryotherid(::google::protobuf::int64 value) {
  set_has_marryotherid();
  marryotherid_ = value;
}

// optional bytes marryothername = 10;
inline bool GMGetWSAckData::has_marryothername() const {
  return (_has_bits_[0] & 0x00000200u) != 0;
}
inline void GMGetWSAckData::set_has_marryothername() {
  _has_bits_[0] |= 0x00000200u;
}
inline void GMGetWSAckData::clear_has_marryothername() {
  _has_bits_[0] &= ~0x00000200u;
}
inline void GMGetWSAckData::clear_marryothername() {
  if (marryothername_ != &::google::protobuf::internal::kEmptyString) {
    marryothername_->clear();
  }
  clear_has_marryothername();
}
inline const ::std::string& GMGetWSAckData::marryothername() const {
  return *marryothername_;
}
inline void GMGetWSAckData::set_marryothername(const ::std::string& value) {
  set_has_marryothername();
  if (marryothername_ == &::google::protobuf::internal::kEmptyString) {
    marryothername_ = new ::std::string;
  }
  marryothername_->assign(value);
}
inline void GMGetWSAckData::set_marryothername(const char* value) {
  set_has_marryothername();
  if (marryothername_ == &::google::protobuf::internal::kEmptyString) {
    marryothername_ = new ::std::string;
  }
  marryothername_->assign(value);
}
inline void GMGetWSAckData::set_marryothername(const void* value, size_t size) {
  set_has_marryothername();
  if (marryothername_ == &::google::protobuf::internal::kEmptyString) {
    marryothername_ = new ::std::string;
  }
  marryothername_->assign(reinterpret_cast<const char*>(value), size);
}
inline ::std::string* GMGetWSAckData::mutable_marryothername() {
  set_has_marryothername();
  if (marryothername_ == &::google::protobuf::internal::kEmptyString) {
    marryothername_ = new ::std::string;
  }
  return marryothername_;
}
inline ::std::string* GMGetWSAckData::release_marryothername() {
  clear_has_marryothername();
  if (marryothername_ == &::google::protobuf::internal::kEmptyString) {
    return NULL;
  } else {
    ::std::string* temp = marryothername_;
    marryothername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
    return temp;
  }
}
inline void GMGetWSAckData::set_allocated_marryothername(::std::string* marryothername) {
  if (marryothername_ != &::google::protobuf::internal::kEmptyString) {
    delete marryothername_;
  }
  if (marryothername) {
    set_has_marryothername();
    marryothername_ = marryothername;
  } else {
    clear_has_marryothername();
    marryothername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  }
}

// optional int64 marryTime = 11;
inline bool GMGetWSAckData::has_marrytime() const {
  return (_has_bits_[0] & 0x00000400u) != 0;
}
inline void GMGetWSAckData::set_has_marrytime() {
  _has_bits_[0] |= 0x00000400u;
}
inline void GMGetWSAckData::clear_has_marrytime() {
  _has_bits_[0] &= ~0x00000400u;
}
inline void GMGetWSAckData::clear_marrytime() {
  marrytime_ = GOOGLE_LONGLONG(0);
  clear_has_marrytime();
}
inline ::google::protobuf::int64 GMGetWSAckData::marrytime() const {
  return marrytime_;
}
inline void GMGetWSAckData::set_marrytime(::google::protobuf::int64 value) {
  set_has_marrytime();
  marrytime_ = value;
}

// optional int32 reqClanNum = 12;
inline bool GMGetWSAckData::has_reqclannum() const {
  return (_has_bits_[0] & 0x00000800u) != 0;
}
inline void GMGetWSAckData::set_has_reqclannum() {
  _has_bits_[0] |= 0x00000800u;
}
inline void GMGetWSAckData::clear_has_reqclannum() {
  _has_bits_[0] &= ~0x00000800u;
}
inline void GMGetWSAckData::clear_reqclannum() {
  reqclannum_ = 0;
  clear_has_reqclannum();
}
inline ::google::protobuf::int32 GMGetWSAckData::reqclannum() const {
  return reqclannum_;
}
inline void GMGetWSAckData::set_reqclannum(::google::protobuf::int32 value) {
  set_has_reqclannum();
  reqclannum_ = value;
}

// optional int32 envelopeCnt = 13;
inline bool GMGetWSAckData::has_envelopecnt() const {
  return (_has_bits_[0] & 0x00001000u) != 0;
}
inline void GMGetWSAckData::set_has_envelopecnt() {
  _has_bits_[0] |= 0x00001000u;
}
inline void GMGetWSAckData::clear_has_envelopecnt() {
  _has_bits_[0] &= ~0x00001000u;
}
inline void GMGetWSAckData::clear_envelopecnt() {
  envelopecnt_ = 0;
  clear_has_envelopecnt();
}
inline ::google::protobuf::int32 GMGetWSAckData::envelopecnt() const {
  return envelopecnt_;
}
inline void GMGetWSAckData::set_envelopecnt(::google::protobuf::int32 value) {
  set_has_envelopecnt();
  envelopecnt_ = value;
}

// optional int32 canGetDistReward = 14;
inline bool GMGetWSAckData::has_cangetdistreward() const {
  return (_has_bits_[0] & 0x00002000u) != 0;
}
inline void GMGetWSAckData::set_has_cangetdistreward() {
  _has_bits_[0] |= 0x00002000u;
}
inline void GMGetWSAckData::clear_has_cangetdistreward() {
  _has_bits_[0] &= ~0x00002000u;
}
inline void GMGetWSAckData::clear_cangetdistreward() {
  cangetdistreward_ = 0;
  clear_has_cangetdistreward();
}
inline ::google::protobuf::int32 GMGetWSAckData::cangetdistreward() const {
  return cangetdistreward_;
}
inline void GMGetWSAckData::set_cangetdistreward(::google::protobuf::int32 value) {
  set_has_cangetdistreward();
  cangetdistreward_ = value;
}

// optional int32 canGetDrawEnveReward = 15;
inline bool GMGetWSAckData::has_cangetdrawenvereward() const {
  return (_has_bits_[0] & 0x00004000u) != 0;
}
inline void GMGetWSAckData::set_has_cangetdrawenvereward() {
  _has_bits_[0] |= 0x00004000u;
}
inline void GMGetWSAckData::clear_has_cangetdrawenvereward() {
  _has_bits_[0] &= ~0x00004000u;
}
inline void GMGetWSAckData::clear_cangetdrawenvereward() {
  cangetdrawenvereward_ = 0;
  clear_has_cangetdrawenvereward();
}
inline ::google::protobuf::int32 GMGetWSAckData::cangetdrawenvereward() const {
  return cangetdrawenvereward_;
}
inline void GMGetWSAckData::set_cangetdrawenvereward(::google::protobuf::int32 value) {
  set_has_cangetdrawenvereward();
  cangetdrawenvereward_ = value;
}

// optional bool isAnswerBegin = 16;
inline bool GMGetWSAckData::has_isanswerbegin() const {
  return (_has_bits_[0] & 0x00008000u) != 0;
}
inline void GMGetWSAckData::set_has_isanswerbegin() {
  _has_bits_[0] |= 0x00008000u;
}
inline void GMGetWSAckData::clear_has_isanswerbegin() {
  _has_bits_[0] &= ~0x00008000u;
}
inline void GMGetWSAckData::clear_isanswerbegin() {
  isanswerbegin_ = false;
  clear_has_isanswerbegin();
}
inline bool GMGetWSAckData::isanswerbegin() const {
  return isanswerbegin_;
}
inline void GMGetWSAckData::set_isanswerbegin(bool value) {
  set_has_isanswerbegin();
  isanswerbegin_ = value;
}

// optional bool isProtectKingDouble = 17;
inline bool GMGetWSAckData::has_isprotectkingdouble() const {
  return (_has_bits_[0] & 0x00010000u) != 0;
}
inline void GMGetWSAckData::set_has_isprotectkingdouble() {
  _has_bits_[0] |= 0x00010000u;
}
inline void GMGetWSAckData::clear_has_isprotectkingdouble() {
  _has_bits_[0] &= ~0x00010000u;
}
inline void GMGetWSAckData::clear_isprotectkingdouble() {
  isprotectkingdouble_ = false;
  clear_has_isprotectkingdouble();
}
inline bool GMGetWSAckData::isprotectkingdouble() const {
  return isprotectkingdouble_;
}
inline void GMGetWSAckData::set_isprotectkingdouble(bool value) {
  set_has_isprotectkingdouble();
  isprotectkingdouble_ = value;
}

// optional bool isPvpFightWarBegin = 18;
inline bool GMGetWSAckData::has_ispvpfightwarbegin() const {
  return (_has_bits_[0] & 0x00020000u) != 0;
}
inline void GMGetWSAckData::set_has_ispvpfightwarbegin() {
  _has_bits_[0] |= 0x00020000u;
}
inline void GMGetWSAckData::clear_has_ispvpfightwarbegin() {
  _has_bits_[0] &= ~0x00020000u;
}
inline void GMGetWSAckData::clear_ispvpfightwarbegin() {
  ispvpfightwarbegin_ = false;
  clear_has_ispvpfightwarbegin();
}
inline bool GMGetWSAckData::ispvpfightwarbegin() const {
  return ispvpfightwarbegin_;
}
inline void GMGetWSAckData::set_ispvpfightwarbegin(bool value) {
  set_has_ispvpfightwarbegin();
  ispvpfightwarbegin_ = value;
}

// optional bool isEscortDoubleBegin = 19;
inline bool GMGetWSAckData::has_isescortdoublebegin() const {
  return (_has_bits_[0] & 0x00040000u) != 0;
}
inline void GMGetWSAckData::set_has_isescortdoublebegin() {
  _has_bits_[0] |= 0x00040000u;
}
inline void GMGetWSAckData::clear_has_isescortdoublebegin() {
  _has_bits_[0] &= ~0x00040000u;
}
inline void GMGetWSAckData::clear_isescortdoublebegin() {
  isescortdoublebegin_ = false;
  clear_has_isescortdoublebegin();
}
inline bool GMGetWSAckData::isescortdoublebegin() const {
  return isescortdoublebegin_;
}
inline void GMGetWSAckData::set_isescortdoublebegin(bool value) {
  set_has_isescortdoublebegin();
  isescortdoublebegin_ = value;
}

// optional bool isClanWarBegin = 20;
inline bool GMGetWSAckData::has_isclanwarbegin() const {
  return (_has_bits_[0] & 0x00080000u) != 0;
}
inline void GMGetWSAckData::set_has_isclanwarbegin() {
  _has_bits_[0] |= 0x00080000u;
}
inline void GMGetWSAckData::clear_has_isclanwarbegin() {
  _has_bits_[0] &= ~0x00080000u;
}
inline void GMGetWSAckData::clear_isclanwarbegin() {
  isclanwarbegin_ = false;
  clear_has_isclanwarbegin();
}
inline bool GMGetWSAckData::isclanwarbegin() const {
  return isclanwarbegin_;
}
inline void GMGetWSAckData::set_isclanwarbegin(bool value) {
  set_has_isclanwarbegin();
  isclanwarbegin_ = value;
}

// repeated int32 worldBossOpenID = 21;
inline int GMGetWSAckData::worldbossopenid_size() const {
  return worldbossopenid_.size();
}
inline void GMGetWSAckData::clear_worldbossopenid() {
  worldbossopenid_.Clear();
}
inline ::google::protobuf::int32 GMGetWSAckData::worldbossopenid(int index) const {
  return worldbossopenid_.Get(index);
}
inline void GMGetWSAckData::set_worldbossopenid(int index, ::google::protobuf::int32 value) {
  worldbossopenid_.Set(index, value);
}
inline void GMGetWSAckData::add_worldbossopenid(::google::protobuf::int32 value) {
  worldbossopenid_.Add(value);
}
inline const ::google::protobuf::RepeatedField< ::google::protobuf::int32 >&
GMGetWSAckData::worldbossopenid() const {
  return worldbossopenid_;
}
inline ::google::protobuf::RepeatedField< ::google::protobuf::int32 >*
GMGetWSAckData::mutable_worldbossopenid() {
  return &worldbossopenid_;
}

// optional .CharLogin.ActivityStateList list = 22;
inline bool GMGetWSAckData::has_list() const {
  return (_has_bits_[0] & 0x00200000u) != 0;
}
inline void GMGetWSAckData::set_has_list() {
  _has_bits_[0] |= 0x00200000u;
}
inline void GMGetWSAckData::clear_has_list() {
  _has_bits_[0] &= ~0x00200000u;
}
inline void GMGetWSAckData::clear_list() {
  if (list_ != NULL) list_->::CharLogin::ActivityStateList::Clear();
  clear_has_list();
}
inline const ::CharLogin::ActivityStateList& GMGetWSAckData::list() const {
  return list_ != NULL ? *list_ : *default_instance_->list_;
}
inline ::CharLogin::ActivityStateList* GMGetWSAckData::mutable_list() {
  set_has_list();
  if (list_ == NULL) list_ = new ::CharLogin::ActivityStateList;
  return list_;
}
inline ::CharLogin::ActivityStateList* GMGetWSAckData::release_list() {
  clear_has_list();
  ::CharLogin::ActivityStateList* temp = list_;
  list_ = NULL;
  return temp;
}
inline void GMGetWSAckData::set_allocated_list(::CharLogin::ActivityStateList* list) {
  delete list_;
  list_ = list;
  if (list) {
    set_has_list();
  } else {
    clear_has_list();
  }
}

// -------------------------------------------------------------------

// GMGetWSRequestData

// optional .CharLogin.WBaseInfo info = 1;
inline bool GMGetWSRequestData::has_info() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void GMGetWSRequestData::set_has_info() {
  _has_bits_[0] |= 0x00000001u;
}
inline void GMGetWSRequestData::clear_has_info() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void GMGetWSRequestData::clear_info() {
  if (info_ != NULL) info_->::CharLogin::WBaseInfo::Clear();
  clear_has_info();
}
inline const ::CharLogin::WBaseInfo& GMGetWSRequestData::info() const {
  return info_ != NULL ? *info_ : *default_instance_->info_;
}
inline ::CharLogin::WBaseInfo* GMGetWSRequestData::mutable_info() {
  set_has_info();
  if (info_ == NULL) info_ = new ::CharLogin::WBaseInfo;
  return info_;
}
inline ::CharLogin::WBaseInfo* GMGetWSRequestData::release_info() {
  clear_has_info();
  ::CharLogin::WBaseInfo* temp = info_;
  info_ = NULL;
  return temp;
}
inline void GMGetWSRequestData::set_allocated_info(::CharLogin::WBaseInfo* info) {
  delete info_;
  info_ = info;
  if (info) {
    set_has_info();
  } else {
    clear_has_info();
  }
}

// -------------------------------------------------------------------

// ActivityStateList

// repeated .CharLogin.ActivityState states = 1;
inline int ActivityStateList::states_size() const {
  return states_.size();
}
inline void ActivityStateList::clear_states() {
  states_.Clear();
}
inline const ::CharLogin::ActivityState& ActivityStateList::states(int index) const {
  return states_.Get(index);
}
inline ::CharLogin::ActivityState* ActivityStateList::mutable_states(int index) {
  return states_.Mutable(index);
}
inline ::CharLogin::ActivityState* ActivityStateList::add_states() {
  return states_.Add();
}
inline const ::google::protobuf::RepeatedPtrField< ::CharLogin::ActivityState >&
ActivityStateList::states() const {
  return states_;
}
inline ::google::protobuf::RepeatedPtrField< ::CharLogin::ActivityState >*
ActivityStateList::mutable_states() {
  return &states_;
}

// -------------------------------------------------------------------

// ActivityState

// optional int32 type = 1;
inline bool ActivityState::has_type() const {
  return (_has_bits_[0] & 0x00000001u) != 0;
}
inline void ActivityState::set_has_type() {
  _has_bits_[0] |= 0x00000001u;
}
inline void ActivityState::clear_has_type() {
  _has_bits_[0] &= ~0x00000001u;
}
inline void ActivityState::clear_type() {
  type_ = 0;
  clear_has_type();
}
inline ::google::protobuf::int32 ActivityState::type() const {
  return type_;
}
inline void ActivityState::set_type(::google::protobuf::int32 value) {
  set_has_type();
  type_ = value;
}

// optional bool flag = 2;
inline bool ActivityState::has_flag() const {
  return (_has_bits_[0] & 0x00000002u) != 0;
}
inline void ActivityState::set_has_flag() {
  _has_bits_[0] |= 0x00000002u;
}
inline void ActivityState::clear_has_flag() {
  _has_bits_[0] &= ~0x00000002u;
}
inline void ActivityState::clear_flag() {
  flag_ = false;
  clear_has_flag();
}
inline bool ActivityState::flag() const {
  return flag_;
}
inline void ActivityState::set_flag(bool value) {
  set_has_flag();
  flag_ = value;
}

// optional int32 num = 3;
inline bool ActivityState::has_num() const {
  return (_has_bits_[0] & 0x00000004u) != 0;
}
inline void ActivityState::set_has_num() {
  _has_bits_[0] |= 0x00000004u;
}
inline void ActivityState::clear_has_num() {
  _has_bits_[0] &= ~0x00000004u;
}
inline void ActivityState::clear_num() {
  num_ = 0;
  clear_has_num();
}
inline ::google::protobuf::int32 ActivityState::num() const {
  return num_;
}
inline void ActivityState::set_num(::google::protobuf::int32 value) {
  set_has_num();
  num_ = value;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CharLogin

#ifndef SWIG
namespace google {
namespace protobuf {


}  // namespace google
}  // namespace protobuf
#endif  // SWIG

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_CharLogin_2fCharBaseInfo_2eproto__INCLUDED
