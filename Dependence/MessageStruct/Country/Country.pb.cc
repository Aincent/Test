// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Country/Country.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Country/Country.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace CountryPackage {

namespace {

const ::google::protobuf::Descriptor* CountryBaseNums_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryBaseNums_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckCountryBaseNums_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckCountryBaseNums_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqJionCountry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqJionCountry_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClientReqJionCountry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientReqJionCountry_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClientCountryStore_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientCountryStore_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqMemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqMemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClientReqMemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientReqMemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryMemInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryMemInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryItemList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryItemList_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClientReqLiveUpCountry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientReqLiveUpCountry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqChangeCountry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqChangeCountry_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClientChangeCountry_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientChangeCountry_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqContribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqContribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClientReqContribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientReqContribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqModifyNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqModifyNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClientModifyNotice_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientModifyNotice_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqLastWeekJobRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqLastWeekJobRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClientReqLastWeekJobRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientReqLastWeekJobRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* JobRankMember_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  JobRankMember_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClientReqJobPrize_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientReqJobPrize_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqKingRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqKingRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClientReqKingRank_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientReqKingRank_reflection_ = NULL;
const ::google::protobuf::Descriptor* KingRankMem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  KingRankMem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClientReqShopInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientReqShopInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqBuyShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqBuyShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClientReqBuyShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientReqBuyShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* GSReqWSContribute_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  GSReqWSContribute_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSNoticeGSCountryLiveUp_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSNoticeGSCountryLiveUp_reflection_ = NULL;
const ::google::protobuf::Descriptor* WStoGsCountryInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WStoGsCountryInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* CountryGrade_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  CountryGrade_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBShopInfoList_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBShopInfoList_reflection_ = NULL;
const ::google::protobuf::Descriptor* DBShopItem_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  DBShopItem_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeekUpdate_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeekUpdate_reflection_ = NULL;
const ::google::protobuf::Descriptor* WeekJobs_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WeekJobs_reflection_ = NULL;
const ::google::protobuf::Descriptor* WStoGSAttrChange_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WStoGSAttrChange_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToGMCountryBattle_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToGMCountryBattle_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Country_2fCountry_2eproto() {
  protobuf_AddDesc_Country_2fCountry_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Country/Country.proto");
  GOOGLE_CHECK(file != NULL);
  CountryBaseNums_descriptor_ = file->message_type(0);
  static const int CountryBaseNums_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBaseNums, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBaseNums, nums_),
  };
  CountryBaseNums_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryBaseNums_descriptor_,
      CountryBaseNums::default_instance_,
      CountryBaseNums_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBaseNums, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryBaseNums, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryBaseNums));
  AckCountryBaseNums_descriptor_ = file->message_type(1);
  static const int AckCountryBaseNums_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCountryBaseNums, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCountryBaseNums, recommendctry_),
  };
  AckCountryBaseNums_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckCountryBaseNums_descriptor_,
      AckCountryBaseNums::default_instance_,
      AckCountryBaseNums_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCountryBaseNums, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckCountryBaseNums, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckCountryBaseNums));
  ClientReqJionCountry_descriptor_ = file->message_type(2);
  static const int ClientReqJionCountry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqJionCountry, countryid_),
  };
  ClientReqJionCountry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqJionCountry_descriptor_,
      ClientReqJionCountry::default_instance_,
      ClientReqJionCountry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqJionCountry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqJionCountry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqJionCountry));
  AckClientReqJionCountry_descriptor_ = file->message_type(3);
  static const int AckClientReqJionCountry_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqJionCountry, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqJionCountry, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqJionCountry, getawarderr_),
  };
  AckClientReqJionCountry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientReqJionCountry_descriptor_,
      AckClientReqJionCountry::default_instance_,
      AckClientReqJionCountry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqJionCountry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqJionCountry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientReqJionCountry));
  CountryInfo_descriptor_ = file->message_type(4);
  static const int CountryInfo_offsets_[7] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, leadername_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, counsellorname_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, notice_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, count_),
  };
  CountryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryInfo_descriptor_,
      CountryInfo::default_instance_,
      CountryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryInfo));
  AckClientCountryStore_descriptor_ = file->message_type(5);
  static const int AckClientCountryStore_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientCountryStore, prop_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientCountryStore, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientCountryStore, contribute_),
  };
  AckClientCountryStore_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientCountryStore_descriptor_,
      AckClientCountryStore::default_instance_,
      AckClientCountryStore_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientCountryStore, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientCountryStore, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientCountryStore));
  ClientReqMemList_descriptor_ = file->message_type(6);
  static const int ClientReqMemList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMemList, page_),
  };
  ClientReqMemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqMemList_descriptor_,
      ClientReqMemList::default_instance_,
      ClientReqMemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqMemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqMemList));
  AckClientReqMemList_descriptor_ = file->message_type(7);
  static const int AckClientReqMemList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqMemList, mems_),
  };
  AckClientReqMemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientReqMemList_descriptor_,
      AckClientReqMemList::default_instance_,
      AckClientReqMemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqMemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqMemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientReqMemList));
  CountryMemInfo_descriptor_ = file->message_type(8);
  static const int CountryMemInfo_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryMemInfo, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryMemInfo, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryMemInfo, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryMemInfo, profession_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryMemInfo, contribute_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryMemInfo, power_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryMemInfo, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryMemInfo, vip_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryMemInfo, online_),
  };
  CountryMemInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryMemInfo_descriptor_,
      CountryMemInfo::default_instance_,
      CountryMemInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryMemInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryMemInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryMemInfo));
  CountryItem_descriptor_ = file->message_type(9);
  static const int CountryItem_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryItem, index_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryItem, propid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryItem, count_),
  };
  CountryItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryItem_descriptor_,
      CountryItem::default_instance_,
      CountryItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryItem));
  CountryItemList_descriptor_ = file->message_type(10);
  static const int CountryItemList_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryItemList, propinfo_),
  };
  CountryItemList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryItemList_descriptor_,
      CountryItemList::default_instance_,
      CountryItemList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryItemList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryItemList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryItemList));
  AckClientReqLiveUpCountry_descriptor_ = file->message_type(11);
  static const int AckClientReqLiveUpCountry_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqLiveUpCountry, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqLiveUpCountry, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqLiveUpCountry, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqLiveUpCountry, item_),
  };
  AckClientReqLiveUpCountry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientReqLiveUpCountry_descriptor_,
      AckClientReqLiveUpCountry::default_instance_,
      AckClientReqLiveUpCountry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqLiveUpCountry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqLiveUpCountry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientReqLiveUpCountry));
  ClientReqChangeCountry_descriptor_ = file->message_type(12);
  static const int ClientReqChangeCountry_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqChangeCountry, destid_),
  };
  ClientReqChangeCountry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqChangeCountry_descriptor_,
      ClientReqChangeCountry::default_instance_,
      ClientReqChangeCountry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqChangeCountry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqChangeCountry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqChangeCountry));
  AckClientChangeCountry_descriptor_ = file->message_type(13);
  static const int AckClientChangeCountry_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientChangeCountry, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientChangeCountry, newcountryinfo_),
  };
  AckClientChangeCountry_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientChangeCountry_descriptor_,
      AckClientChangeCountry::default_instance_,
      AckClientChangeCountry_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientChangeCountry, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientChangeCountry, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientChangeCountry));
  ClientReqContribute_descriptor_ = file->message_type(14);
  static const int ClientReqContribute_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqContribute, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqContribute, num_),
  };
  ClientReqContribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqContribute_descriptor_,
      ClientReqContribute::default_instance_,
      ClientReqContribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqContribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqContribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqContribute));
  AckClientReqContribute_descriptor_ = file->message_type(15);
  static const int AckClientReqContribute_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqContribute, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqContribute, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqContribute, item_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqContribute, contribute_),
  };
  AckClientReqContribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientReqContribute_descriptor_,
      AckClientReqContribute::default_instance_,
      AckClientReqContribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqContribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqContribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientReqContribute));
  ClientReqModifyNotice_descriptor_ = file->message_type(16);
  static const int ClientReqModifyNotice_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqModifyNotice, noticemessage_),
  };
  ClientReqModifyNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqModifyNotice_descriptor_,
      ClientReqModifyNotice::default_instance_,
      ClientReqModifyNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqModifyNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqModifyNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqModifyNotice));
  AckClientModifyNotice_descriptor_ = file->message_type(17);
  static const int AckClientModifyNotice_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientModifyNotice, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientModifyNotice, noticemesage_),
  };
  AckClientModifyNotice_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientModifyNotice_descriptor_,
      AckClientModifyNotice::default_instance_,
      AckClientModifyNotice_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientModifyNotice, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientModifyNotice, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientModifyNotice));
  ClientReqLastWeekJobRank_descriptor_ = file->message_type(18);
  static const int ClientReqLastWeekJobRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqLastWeekJobRank, countryid_),
  };
  ClientReqLastWeekJobRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqLastWeekJobRank_descriptor_,
      ClientReqLastWeekJobRank::default_instance_,
      ClientReqLastWeekJobRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqLastWeekJobRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqLastWeekJobRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqLastWeekJobRank));
  AckClientReqLastWeekJobRank_descriptor_ = file->message_type(19);
  static const int AckClientReqLastWeekJobRank_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqLastWeekJobRank, countryid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqLastWeekJobRank, limit_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqLastWeekJobRank, fetch_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqLastWeekJobRank, members_),
  };
  AckClientReqLastWeekJobRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientReqLastWeekJobRank_descriptor_,
      AckClientReqLastWeekJobRank::default_instance_,
      AckClientReqLastWeekJobRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqLastWeekJobRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqLastWeekJobRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientReqLastWeekJobRank));
  JobRankMember_descriptor_ = file->message_type(20);
  static const int JobRankMember_offsets_[9] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRankMember, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRankMember, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRankMember, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRankMember, weapon_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRankMember, cloth_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRankMember, shenbing_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRankMember, fashion_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRankMember, sex_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRankMember, profession_),
  };
  JobRankMember_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      JobRankMember_descriptor_,
      JobRankMember::default_instance_,
      JobRankMember_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRankMember, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(JobRankMember, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(JobRankMember));
  AckClientReqJobPrize_descriptor_ = file->message_type(21);
  static const int AckClientReqJobPrize_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqJobPrize, seccess_),
  };
  AckClientReqJobPrize_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientReqJobPrize_descriptor_,
      AckClientReqJobPrize::default_instance_,
      AckClientReqJobPrize_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqJobPrize, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqJobPrize, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientReqJobPrize));
  ClientReqKingRank_descriptor_ = file->message_type(22);
  static const int ClientReqKingRank_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqKingRank, flag_),
  };
  ClientReqKingRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqKingRank_descriptor_,
      ClientReqKingRank::default_instance_,
      ClientReqKingRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqKingRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqKingRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqKingRank));
  AckClientReqKingRank_descriptor_ = file->message_type(23);
  static const int AckClientReqKingRank_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqKingRank, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqKingRank, mems_),
  };
  AckClientReqKingRank_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientReqKingRank_descriptor_,
      AckClientReqKingRank::default_instance_,
      AckClientReqKingRank_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqKingRank, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqKingRank, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientReqKingRank));
  KingRankMem_descriptor_ = file->message_type(24);
  static const int KingRankMem_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingRankMem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingRankMem, job_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingRankMem, name_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingRankMem, level_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingRankMem, contribute_),
  };
  KingRankMem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      KingRankMem_descriptor_,
      KingRankMem::default_instance_,
      KingRankMem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingRankMem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(KingRankMem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(KingRankMem));
  AckClientReqShopInfo_descriptor_ = file->message_type(25);
  static const int AckClientReqShopInfo_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqShopInfo, itemlist_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqShopInfo, contribute_),
  };
  AckClientReqShopInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientReqShopInfo_descriptor_,
      AckClientReqShopInfo::default_instance_,
      AckClientReqShopInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqShopInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqShopInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientReqShopInfo));
  CountryShopItem_descriptor_ = file->message_type(26);
  static const int CountryShopItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryShopItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryShopItem, count_),
  };
  CountryShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryShopItem_descriptor_,
      CountryShopItem::default_instance_,
      CountryShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryShopItem));
  ClientReqBuyShopItem_descriptor_ = file->message_type(27);
  static const int ClientReqBuyShopItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBuyShopItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBuyShopItem, count_),
  };
  ClientReqBuyShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqBuyShopItem_descriptor_,
      ClientReqBuyShopItem::default_instance_,
      ClientReqBuyShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBuyShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqBuyShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqBuyShopItem));
  AckClientReqBuyShopItem_descriptor_ = file->message_type(28);
  static const int AckClientReqBuyShopItem_offsets_[4] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqBuyShopItem, success_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqBuyShopItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqBuyShopItem, count_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqBuyShopItem, contribute_),
  };
  AckClientReqBuyShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientReqBuyShopItem_descriptor_,
      AckClientReqBuyShopItem::default_instance_,
      AckClientReqBuyShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqBuyShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientReqBuyShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientReqBuyShopItem));
  GSReqWSContribute_descriptor_ = file->message_type(29);
  static const int GSReqWSContribute_offsets_[6] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSReqWSContribute, char__),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSReqWSContribute, contry_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSReqWSContribute, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSReqWSContribute, num_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSReqWSContribute, money_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSReqWSContribute, contribute_),
  };
  GSReqWSContribute_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      GSReqWSContribute_descriptor_,
      GSReqWSContribute::default_instance_,
      GSReqWSContribute_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSReqWSContribute, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(GSReqWSContribute, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(GSReqWSContribute));
  WSNoticeGSCountryLiveUp_descriptor_ = file->message_type(30);
  static const int WSNoticeGSCountryLiveUp_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSNoticeGSCountryLiveUp, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSNoticeGSCountryLiveUp, level_),
  };
  WSNoticeGSCountryLiveUp_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSNoticeGSCountryLiveUp_descriptor_,
      WSNoticeGSCountryLiveUp::default_instance_,
      WSNoticeGSCountryLiveUp_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSNoticeGSCountryLiveUp, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSNoticeGSCountryLiveUp, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSNoticeGSCountryLiveUp));
  WStoGsCountryInfo_descriptor_ = file->message_type(31);
  static const int WStoGsCountryInfo_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WStoGsCountryInfo, country_),
  };
  WStoGsCountryInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WStoGsCountryInfo_descriptor_,
      WStoGsCountryInfo::default_instance_,
      WStoGsCountryInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WStoGsCountryInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WStoGsCountryInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WStoGsCountryInfo));
  CountryGrade_descriptor_ = file->message_type(32);
  static const int CountryGrade_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryGrade, country_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryGrade, level_),
  };
  CountryGrade_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      CountryGrade_descriptor_,
      CountryGrade::default_instance_,
      CountryGrade_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryGrade, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(CountryGrade, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(CountryGrade));
  DBShopInfoList_descriptor_ = file->message_type(33);
  static const int DBShopInfoList_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopInfoList, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopInfoList, item_),
  };
  DBShopInfoList_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBShopInfoList_descriptor_,
      DBShopInfoList::default_instance_,
      DBShopInfoList_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopInfoList, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopInfoList, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBShopInfoList));
  DBShopItem_descriptor_ = file->message_type(34);
  static const int DBShopItem_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopItem, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopItem, nums_),
  };
  DBShopItem_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      DBShopItem_descriptor_,
      DBShopItem::default_instance_,
      DBShopItem_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopItem, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(DBShopItem, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(DBShopItem));
  WeekUpdate_descriptor_ = file->message_type(35);
  static const int WeekUpdate_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekUpdate, list_),
  };
  WeekUpdate_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeekUpdate_descriptor_,
      WeekUpdate::default_instance_,
      WeekUpdate_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekUpdate, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekUpdate, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeekUpdate));
  WeekJobs_descriptor_ = file->message_type(36);
  static const int WeekJobs_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekJobs, id_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekJobs, job_),
  };
  WeekJobs_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WeekJobs_descriptor_,
      WeekJobs::default_instance_,
      WeekJobs_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekJobs, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WeekJobs, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WeekJobs));
  WStoGSAttrChange_descriptor_ = file->message_type(37);
  static const int WStoGSAttrChange_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WStoGSAttrChange, charid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WStoGSAttrChange, attrid_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WStoGSAttrChange, value_),
  };
  WStoGSAttrChange_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WStoGSAttrChange_descriptor_,
      WStoGSAttrChange::default_instance_,
      WStoGSAttrChange_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WStoGSAttrChange, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WStoGSAttrChange, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WStoGSAttrChange));
  WSToGMCountryBattle_descriptor_ = file->message_type(38);
  static const int WSToGMCountryBattle_offsets_[3] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMCountryBattle, wartype_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMCountryBattle, flag_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMCountryBattle, charid_),
  };
  WSToGMCountryBattle_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToGMCountryBattle_descriptor_,
      WSToGMCountryBattle::default_instance_,
      WSToGMCountryBattle_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMCountryBattle, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMCountryBattle, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToGMCountryBattle));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Country_2fCountry_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryBaseNums_descriptor_, &CountryBaseNums::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckCountryBaseNums_descriptor_, &AckCountryBaseNums::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqJionCountry_descriptor_, &ClientReqJionCountry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientReqJionCountry_descriptor_, &AckClientReqJionCountry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryInfo_descriptor_, &CountryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientCountryStore_descriptor_, &AckClientCountryStore::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqMemList_descriptor_, &ClientReqMemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientReqMemList_descriptor_, &AckClientReqMemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryMemInfo_descriptor_, &CountryMemInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryItem_descriptor_, &CountryItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryItemList_descriptor_, &CountryItemList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientReqLiveUpCountry_descriptor_, &AckClientReqLiveUpCountry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqChangeCountry_descriptor_, &ClientReqChangeCountry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientChangeCountry_descriptor_, &AckClientChangeCountry::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqContribute_descriptor_, &ClientReqContribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientReqContribute_descriptor_, &AckClientReqContribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqModifyNotice_descriptor_, &ClientReqModifyNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientModifyNotice_descriptor_, &AckClientModifyNotice::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqLastWeekJobRank_descriptor_, &ClientReqLastWeekJobRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientReqLastWeekJobRank_descriptor_, &AckClientReqLastWeekJobRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    JobRankMember_descriptor_, &JobRankMember::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientReqJobPrize_descriptor_, &AckClientReqJobPrize::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqKingRank_descriptor_, &ClientReqKingRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientReqKingRank_descriptor_, &AckClientReqKingRank::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    KingRankMem_descriptor_, &KingRankMem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientReqShopInfo_descriptor_, &AckClientReqShopInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryShopItem_descriptor_, &CountryShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqBuyShopItem_descriptor_, &ClientReqBuyShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientReqBuyShopItem_descriptor_, &AckClientReqBuyShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    GSReqWSContribute_descriptor_, &GSReqWSContribute::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSNoticeGSCountryLiveUp_descriptor_, &WSNoticeGSCountryLiveUp::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WStoGsCountryInfo_descriptor_, &WStoGsCountryInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    CountryGrade_descriptor_, &CountryGrade::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBShopInfoList_descriptor_, &DBShopInfoList::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    DBShopItem_descriptor_, &DBShopItem::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeekUpdate_descriptor_, &WeekUpdate::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WeekJobs_descriptor_, &WeekJobs::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WStoGSAttrChange_descriptor_, &WStoGSAttrChange::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToGMCountryBattle_descriptor_, &WSToGMCountryBattle::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Country_2fCountry_2eproto() {
  delete CountryBaseNums::default_instance_;
  delete CountryBaseNums_reflection_;
  delete AckCountryBaseNums::default_instance_;
  delete AckCountryBaseNums_reflection_;
  delete ClientReqJionCountry::default_instance_;
  delete ClientReqJionCountry_reflection_;
  delete AckClientReqJionCountry::default_instance_;
  delete AckClientReqJionCountry_reflection_;
  delete CountryInfo::default_instance_;
  delete CountryInfo_reflection_;
  delete AckClientCountryStore::default_instance_;
  delete AckClientCountryStore_reflection_;
  delete ClientReqMemList::default_instance_;
  delete ClientReqMemList_reflection_;
  delete AckClientReqMemList::default_instance_;
  delete AckClientReqMemList_reflection_;
  delete CountryMemInfo::default_instance_;
  delete CountryMemInfo_reflection_;
  delete CountryItem::default_instance_;
  delete CountryItem_reflection_;
  delete CountryItemList::default_instance_;
  delete CountryItemList_reflection_;
  delete AckClientReqLiveUpCountry::default_instance_;
  delete AckClientReqLiveUpCountry_reflection_;
  delete ClientReqChangeCountry::default_instance_;
  delete ClientReqChangeCountry_reflection_;
  delete AckClientChangeCountry::default_instance_;
  delete AckClientChangeCountry_reflection_;
  delete ClientReqContribute::default_instance_;
  delete ClientReqContribute_reflection_;
  delete AckClientReqContribute::default_instance_;
  delete AckClientReqContribute_reflection_;
  delete ClientReqModifyNotice::default_instance_;
  delete ClientReqModifyNotice_reflection_;
  delete AckClientModifyNotice::default_instance_;
  delete AckClientModifyNotice_reflection_;
  delete ClientReqLastWeekJobRank::default_instance_;
  delete ClientReqLastWeekJobRank_reflection_;
  delete AckClientReqLastWeekJobRank::default_instance_;
  delete AckClientReqLastWeekJobRank_reflection_;
  delete JobRankMember::default_instance_;
  delete JobRankMember_reflection_;
  delete AckClientReqJobPrize::default_instance_;
  delete AckClientReqJobPrize_reflection_;
  delete ClientReqKingRank::default_instance_;
  delete ClientReqKingRank_reflection_;
  delete AckClientReqKingRank::default_instance_;
  delete AckClientReqKingRank_reflection_;
  delete KingRankMem::default_instance_;
  delete KingRankMem_reflection_;
  delete AckClientReqShopInfo::default_instance_;
  delete AckClientReqShopInfo_reflection_;
  delete CountryShopItem::default_instance_;
  delete CountryShopItem_reflection_;
  delete ClientReqBuyShopItem::default_instance_;
  delete ClientReqBuyShopItem_reflection_;
  delete AckClientReqBuyShopItem::default_instance_;
  delete AckClientReqBuyShopItem_reflection_;
  delete GSReqWSContribute::default_instance_;
  delete GSReqWSContribute_reflection_;
  delete WSNoticeGSCountryLiveUp::default_instance_;
  delete WSNoticeGSCountryLiveUp_reflection_;
  delete WStoGsCountryInfo::default_instance_;
  delete WStoGsCountryInfo_reflection_;
  delete CountryGrade::default_instance_;
  delete CountryGrade_reflection_;
  delete DBShopInfoList::default_instance_;
  delete DBShopInfoList_reflection_;
  delete DBShopItem::default_instance_;
  delete DBShopItem_reflection_;
  delete WeekUpdate::default_instance_;
  delete WeekUpdate_reflection_;
  delete WeekJobs::default_instance_;
  delete WeekJobs_reflection_;
  delete WStoGSAttrChange::default_instance_;
  delete WStoGSAttrChange_reflection_;
  delete WSToGMCountryBattle::default_instance_;
  delete WSToGMCountryBattle_reflection_;
}

void protobuf_AddDesc_Country_2fCountry_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\025Country/Country.proto\022\016CountryPackage\""
    "2\n\017CountryBaseNums\022\021\n\tcountryID\030\001 \002(\005\022\014\n"
    "\004nums\030\002 \001(\005\"Z\n\022AckCountryBaseNums\022-\n\004ite"
    "m\030\001 \003(\0132\037.CountryPackage.CountryBaseNums"
    "\022\025\n\rrecommendCtry\030\002 \001(\005\")\n\024ClientReqJion"
    "Country\022\021\n\tcountryID\030\001 \002(\005\"R\n\027AckClientR"
    "eqJionCountry\022\017\n\007success\030\001 \002(\005\022\021\n\tcountr"
    "yID\030\002 \001(\005\022\023\n\013getAwardErr\030\003 \001(\005\"\211\001\n\013Count"
    "ryInfo\022\021\n\tCountryID\030\001 \002(\005\022\r\n\005Level\030\002 \001(\005"
    "\022\r\n\005Money\030\003 \001(\003\022\022\n\nleaderName\030\004 \001(\014\022\026\n\016C"
    "ounsellorName\030\005 \001(\014\022\016\n\006notice\030\006 \001(\014\022\r\n\005c"
    "ount\030\007 \001(\005\"e\n\025AckClientCountryStore\022)\n\004p"
    "rop\030\001 \003(\0132\033.CountryPackage.CountryItem\022\r"
    "\n\005money\030\002 \001(\003\022\022\n\ncontribute\030\003 \001(\005\" \n\020Cli"
    "entReqMemList\022\014\n\004page\030\001 \002(\005\"C\n\023AckClient"
    "ReqMemList\022,\n\004mems\030\001 \003(\0132\036.CountryPackag"
    "e.CountryMemInfo\"\232\001\n\016CountryMemInfo\022\n\n\002i"
    "d\030\001 \002(\003\022\014\n\004name\030\002 \001(\014\022\r\n\005level\030\003 \001(\005\022\022\n\n"
    "profession\030\004 \001(\005\022\022\n\ncontribute\030\005 \001(\005\022\r\n\005"
    "power\030\006 \001(\005\022\013\n\003job\030\007 \001(\005\022\013\n\003vip\030\010 \001(\005\022\016\n"
    "\006onLine\030\t \001(\010\";\n\013CountryItem\022\r\n\005index\030\001 "
    "\002(\005\022\016\n\006propID\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\"@\n\017Co"
    "untryItemList\022-\n\010propinfo\030\001 \003(\0132\033.Countr"
    "yPackage.CountryItem\"u\n\031AckClientReqLive"
    "UpCountry\022\017\n\007success\030\001 \002(\005\022\r\n\005level\030\002 \001("
    "\005\022\r\n\005money\030\003 \001(\003\022)\n\004item\030\004 \003(\0132\033.Country"
    "Package.CountryItem\"(\n\026ClientReqChangeCo"
    "untry\022\016\n\006destID\030\001 \002(\005\"^\n\026AckClientChange"
    "Country\022\017\n\007success\030\001 \002(\005\0223\n\016newCountryIn"
    "fo\030\002 \001(\0132\033.CountryPackage.CountryInfo\".\n"
    "\023ClientReqContribute\022\n\n\002id\030\001 \002(\005\022\013\n\003num\030"
    "\002 \001(\005\"w\n\026AckClientReqContribute\022\017\n\007succe"
    "ss\030\001 \002(\005\022\r\n\005money\030\002 \001(\003\022)\n\004item\030\003 \003(\0132\033."
    "CountryPackage.CountryItem\022\022\n\ncontribute"
    "\030\004 \001(\005\".\n\025ClientReqModifyNotice\022\025\n\rnotic"
    "eMessage\030\001 \002(\014\">\n\025AckClientModifyNotice\022"
    "\017\n\007success\030\001 \002(\005\022\024\n\014noticeMesage\030\002 \001(\014\"-"
    "\n\030ClientReqLastWeekJobRank\022\021\n\tcountryID\030"
    "\001 \002(\005\"~\n\033AckClientReqLastWeekJobRank\022\021\n\t"
    "countryID\030\001 \002(\005\022\r\n\005limit\030\002 \001(\010\022\r\n\005fetch\030"
    "\003 \001(\010\022.\n\007members\030\004 \003(\0132\035.CountryPackage."
    "JobRankMember\"\231\001\n\rJobRankMember\022\n\n\002id\030\001 "
    "\002(\003\022\013\n\003job\030\002 \001(\005\022\014\n\004name\030\003 \001(\014\022\016\n\006weapon"
    "\030\004 \001(\005\022\r\n\005cloth\030\005 \001(\005\022\020\n\010shenbing\030\006 \001(\005\022"
    "\017\n\007fashion\030\007 \001(\005\022\013\n\003sex\030\010 \001(\005\022\022\n\nprofess"
    "ion\030\t \001(\005\"\'\n\024AckClientReqJobPrize\022\017\n\007sec"
    "cess\030\001 \002(\005\"!\n\021ClientReqKingRank\022\014\n\004flag\030"
    "\001 \002(\005\"O\n\024AckClientReqKingRank\022\014\n\004flag\030\001 "
    "\002(\005\022)\n\004mems\030\002 \003(\0132\033.CountryPackage.KingR"
    "ankMem\"W\n\013KingRankMem\022\n\n\002id\030\001 \002(\003\022\013\n\003job"
    "\030\002 \001(\005\022\014\n\004name\030\003 \001(\014\022\r\n\005level\030\004 \001(\005\022\022\n\nc"
    "ontribute\030\005 \001(\005\"]\n\024AckClientReqShopInfo\022"
    "1\n\010itemlist\030\001 \003(\0132\037.CountryPackage.Count"
    "ryShopItem\022\022\n\ncontribute\030\002 \001(\005\",\n\017Countr"
    "yShopItem\022\n\n\002id\030\001 \002(\005\022\r\n\005count\030\002 \001(\005\"1\n\024"
    "ClientReqBuyShopItem\022\n\n\002id\030\001 \002(\005\022\r\n\005coun"
    "t\030\002 \001(\005\"Y\n\027AckClientReqBuyShopItem\022\017\n\007su"
    "ccess\030\001 \002(\005\022\n\n\002id\030\002 \001(\005\022\r\n\005count\030\003 \001(\005\022\022"
    "\n\ncontribute\030\004 \001(\005\"m\n\021GSReqWSContribute\022"
    "\014\n\004char\030\001 \002(\003\022\016\n\006contry\030\002 \001(\005\022\n\n\002id\030\003 \001("
    "\005\022\013\n\003num\030\004 \001(\005\022\r\n\005money\030\005 \001(\003\022\022\n\ncontrib"
    "ute\030\006 \001(\005\"9\n\027WSNoticeGSCountryLiveUp\022\017\n\007"
    "country\030\001 \002(\005\022\r\n\005level\030\002 \001(\005\"B\n\021WStoGsCo"
    "untryInfo\022-\n\007country\030\001 \003(\0132\034.CountryPack"
    "age.CountryGrade\".\n\014CountryGrade\022\017\n\007coun"
    "try\030\001 \002(\005\022\r\n\005level\030\002 \001(\005\"H\n\016DBShopInfoLi"
    "st\022\014\n\004time\030\001 \002(\003\022(\n\004item\030\002 \003(\0132\032.Country"
    "Package.DBShopItem\"&\n\nDBShopItem\022\n\n\002id\030\001"
    " \002(\005\022\014\n\004nums\030\002 \001(\005\"4\n\nWeekUpdate\022&\n\004list"
    "\030\001 \003(\0132\030.CountryPackage.WeekJobs\"#\n\010Week"
    "Jobs\022\n\n\002id\030\001 \002(\003\022\013\n\003job\030\002 \001(\005\"A\n\020WStoGSA"
    "ttrChange\022\016\n\006charid\030\001 \002(\003\022\016\n\006attrid\030\002 \001("
    "\005\022\r\n\005value\030\003 \001(\005\"D\n\023WSToGMCountryBattle\022"
    "\017\n\007warType\030\001 \002(\005\022\014\n\004flag\030\002 \002(\010\022\016\n\006charID"
    "\030\003 \003(\003", 2966);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Country/Country.proto", &protobuf_RegisterTypes);
  CountryBaseNums::default_instance_ = new CountryBaseNums();
  AckCountryBaseNums::default_instance_ = new AckCountryBaseNums();
  ClientReqJionCountry::default_instance_ = new ClientReqJionCountry();
  AckClientReqJionCountry::default_instance_ = new AckClientReqJionCountry();
  CountryInfo::default_instance_ = new CountryInfo();
  AckClientCountryStore::default_instance_ = new AckClientCountryStore();
  ClientReqMemList::default_instance_ = new ClientReqMemList();
  AckClientReqMemList::default_instance_ = new AckClientReqMemList();
  CountryMemInfo::default_instance_ = new CountryMemInfo();
  CountryItem::default_instance_ = new CountryItem();
  CountryItemList::default_instance_ = new CountryItemList();
  AckClientReqLiveUpCountry::default_instance_ = new AckClientReqLiveUpCountry();
  ClientReqChangeCountry::default_instance_ = new ClientReqChangeCountry();
  AckClientChangeCountry::default_instance_ = new AckClientChangeCountry();
  ClientReqContribute::default_instance_ = new ClientReqContribute();
  AckClientReqContribute::default_instance_ = new AckClientReqContribute();
  ClientReqModifyNotice::default_instance_ = new ClientReqModifyNotice();
  AckClientModifyNotice::default_instance_ = new AckClientModifyNotice();
  ClientReqLastWeekJobRank::default_instance_ = new ClientReqLastWeekJobRank();
  AckClientReqLastWeekJobRank::default_instance_ = new AckClientReqLastWeekJobRank();
  JobRankMember::default_instance_ = new JobRankMember();
  AckClientReqJobPrize::default_instance_ = new AckClientReqJobPrize();
  ClientReqKingRank::default_instance_ = new ClientReqKingRank();
  AckClientReqKingRank::default_instance_ = new AckClientReqKingRank();
  KingRankMem::default_instance_ = new KingRankMem();
  AckClientReqShopInfo::default_instance_ = new AckClientReqShopInfo();
  CountryShopItem::default_instance_ = new CountryShopItem();
  ClientReqBuyShopItem::default_instance_ = new ClientReqBuyShopItem();
  AckClientReqBuyShopItem::default_instance_ = new AckClientReqBuyShopItem();
  GSReqWSContribute::default_instance_ = new GSReqWSContribute();
  WSNoticeGSCountryLiveUp::default_instance_ = new WSNoticeGSCountryLiveUp();
  WStoGsCountryInfo::default_instance_ = new WStoGsCountryInfo();
  CountryGrade::default_instance_ = new CountryGrade();
  DBShopInfoList::default_instance_ = new DBShopInfoList();
  DBShopItem::default_instance_ = new DBShopItem();
  WeekUpdate::default_instance_ = new WeekUpdate();
  WeekJobs::default_instance_ = new WeekJobs();
  WStoGSAttrChange::default_instance_ = new WStoGSAttrChange();
  WSToGMCountryBattle::default_instance_ = new WSToGMCountryBattle();
  CountryBaseNums::default_instance_->InitAsDefaultInstance();
  AckCountryBaseNums::default_instance_->InitAsDefaultInstance();
  ClientReqJionCountry::default_instance_->InitAsDefaultInstance();
  AckClientReqJionCountry::default_instance_->InitAsDefaultInstance();
  CountryInfo::default_instance_->InitAsDefaultInstance();
  AckClientCountryStore::default_instance_->InitAsDefaultInstance();
  ClientReqMemList::default_instance_->InitAsDefaultInstance();
  AckClientReqMemList::default_instance_->InitAsDefaultInstance();
  CountryMemInfo::default_instance_->InitAsDefaultInstance();
  CountryItem::default_instance_->InitAsDefaultInstance();
  CountryItemList::default_instance_->InitAsDefaultInstance();
  AckClientReqLiveUpCountry::default_instance_->InitAsDefaultInstance();
  ClientReqChangeCountry::default_instance_->InitAsDefaultInstance();
  AckClientChangeCountry::default_instance_->InitAsDefaultInstance();
  ClientReqContribute::default_instance_->InitAsDefaultInstance();
  AckClientReqContribute::default_instance_->InitAsDefaultInstance();
  ClientReqModifyNotice::default_instance_->InitAsDefaultInstance();
  AckClientModifyNotice::default_instance_->InitAsDefaultInstance();
  ClientReqLastWeekJobRank::default_instance_->InitAsDefaultInstance();
  AckClientReqLastWeekJobRank::default_instance_->InitAsDefaultInstance();
  JobRankMember::default_instance_->InitAsDefaultInstance();
  AckClientReqJobPrize::default_instance_->InitAsDefaultInstance();
  ClientReqKingRank::default_instance_->InitAsDefaultInstance();
  AckClientReqKingRank::default_instance_->InitAsDefaultInstance();
  KingRankMem::default_instance_->InitAsDefaultInstance();
  AckClientReqShopInfo::default_instance_->InitAsDefaultInstance();
  CountryShopItem::default_instance_->InitAsDefaultInstance();
  ClientReqBuyShopItem::default_instance_->InitAsDefaultInstance();
  AckClientReqBuyShopItem::default_instance_->InitAsDefaultInstance();
  GSReqWSContribute::default_instance_->InitAsDefaultInstance();
  WSNoticeGSCountryLiveUp::default_instance_->InitAsDefaultInstance();
  WStoGsCountryInfo::default_instance_->InitAsDefaultInstance();
  CountryGrade::default_instance_->InitAsDefaultInstance();
  DBShopInfoList::default_instance_->InitAsDefaultInstance();
  DBShopItem::default_instance_->InitAsDefaultInstance();
  WeekUpdate::default_instance_->InitAsDefaultInstance();
  WeekJobs::default_instance_->InitAsDefaultInstance();
  WStoGSAttrChange::default_instance_->InitAsDefaultInstance();
  WSToGMCountryBattle::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Country_2fCountry_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Country_2fCountry_2eproto {
  StaticDescriptorInitializer_Country_2fCountry_2eproto() {
    protobuf_AddDesc_Country_2fCountry_2eproto();
  }
} static_descriptor_initializer_Country_2fCountry_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int CountryBaseNums::kCountryIDFieldNumber;
const int CountryBaseNums::kNumsFieldNumber;
#endif  // !_MSC_VER

CountryBaseNums::CountryBaseNums()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryBaseNums::InitAsDefaultInstance() {
}

CountryBaseNums::CountryBaseNums(const CountryBaseNums& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryBaseNums::SharedCtor() {
  _cached_size_ = 0;
  countryid_ = 0;
  nums_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryBaseNums::~CountryBaseNums() {
  SharedDtor();
}

void CountryBaseNums::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryBaseNums::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryBaseNums::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryBaseNums_descriptor_;
}

const CountryBaseNums& CountryBaseNums::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

CountryBaseNums* CountryBaseNums::default_instance_ = NULL;

CountryBaseNums* CountryBaseNums::New() const {
  return new CountryBaseNums;
}

void CountryBaseNums::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    countryid_ = 0;
    nums_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryBaseNums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 countryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nums;
        break;
      }

      // optional int32 nums = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nums_)));
          set_has_nums();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryBaseNums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 countryID = 1;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->countryid(), output);
  }

  // optional int32 nums = 2;
  if (has_nums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nums(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryBaseNums::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 countryID = 1;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->countryid(), target);
  }

  // optional int32 nums = 2;
  if (has_nums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nums(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryBaseNums::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 countryID = 1;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }

    // optional int32 nums = 2;
    if (has_nums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nums());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryBaseNums::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryBaseNums* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryBaseNums*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryBaseNums::MergeFrom(const CountryBaseNums& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_nums()) {
      set_nums(from.nums());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryBaseNums::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryBaseNums::CopyFrom(const CountryBaseNums& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryBaseNums::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountryBaseNums::Swap(CountryBaseNums* other) {
  if (other != this) {
    std::swap(countryid_, other->countryid_);
    std::swap(nums_, other->nums_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryBaseNums::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryBaseNums_descriptor_;
  metadata.reflection = CountryBaseNums_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckCountryBaseNums::kItemFieldNumber;
const int AckCountryBaseNums::kRecommendCtryFieldNumber;
#endif  // !_MSC_VER

AckCountryBaseNums::AckCountryBaseNums()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckCountryBaseNums::InitAsDefaultInstance() {
}

AckCountryBaseNums::AckCountryBaseNums(const AckCountryBaseNums& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckCountryBaseNums::SharedCtor() {
  _cached_size_ = 0;
  recommendctry_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckCountryBaseNums::~AckCountryBaseNums() {
  SharedDtor();
}

void AckCountryBaseNums::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckCountryBaseNums::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckCountryBaseNums::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckCountryBaseNums_descriptor_;
}

const AckCountryBaseNums& AckCountryBaseNums::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

AckCountryBaseNums* AckCountryBaseNums::default_instance_ = NULL;

AckCountryBaseNums* AckCountryBaseNums::New() const {
  return new AckCountryBaseNums;
}

void AckCountryBaseNums::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    recommendctry_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckCountryBaseNums::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CountryPackage.CountryBaseNums item = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_item;
        if (input->ExpectTag(16)) goto parse_recommendCtry;
        break;
      }

      // optional int32 recommendCtry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_recommendCtry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &recommendctry_)));
          set_has_recommendctry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckCountryBaseNums::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CountryPackage.CountryBaseNums item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->item(i), output);
  }

  // optional int32 recommendCtry = 2;
  if (has_recommendctry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->recommendctry(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckCountryBaseNums::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CountryPackage.CountryBaseNums item = 1;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->item(i), target);
  }

  // optional int32 recommendCtry = 2;
  if (has_recommendctry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->recommendctry(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckCountryBaseNums::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 recommendCtry = 2;
    if (has_recommendctry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->recommendctry());
    }

  }
  // repeated .CountryPackage.CountryBaseNums item = 1;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckCountryBaseNums::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckCountryBaseNums* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckCountryBaseNums*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckCountryBaseNums::MergeFrom(const AckCountryBaseNums& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_recommendctry()) {
      set_recommendctry(from.recommendctry());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckCountryBaseNums::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckCountryBaseNums::CopyFrom(const AckCountryBaseNums& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckCountryBaseNums::IsInitialized() const {

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void AckCountryBaseNums::Swap(AckCountryBaseNums* other) {
  if (other != this) {
    item_.Swap(&other->item_);
    std::swap(recommendctry_, other->recommendctry_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckCountryBaseNums::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckCountryBaseNums_descriptor_;
  metadata.reflection = AckCountryBaseNums_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqJionCountry::kCountryIDFieldNumber;
#endif  // !_MSC_VER

ClientReqJionCountry::ClientReqJionCountry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqJionCountry::InitAsDefaultInstance() {
}

ClientReqJionCountry::ClientReqJionCountry(const ClientReqJionCountry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqJionCountry::SharedCtor() {
  _cached_size_ = 0;
  countryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqJionCountry::~ClientReqJionCountry() {
  SharedDtor();
}

void ClientReqJionCountry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqJionCountry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqJionCountry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqJionCountry_descriptor_;
}

const ClientReqJionCountry& ClientReqJionCountry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

ClientReqJionCountry* ClientReqJionCountry::default_instance_ = NULL;

ClientReqJionCountry* ClientReqJionCountry::New() const {
  return new ClientReqJionCountry;
}

void ClientReqJionCountry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    countryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqJionCountry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 countryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqJionCountry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 countryID = 1;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->countryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqJionCountry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 countryID = 1;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->countryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqJionCountry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 countryID = 1;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqJionCountry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqJionCountry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqJionCountry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqJionCountry::MergeFrom(const ClientReqJionCountry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqJionCountry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqJionCountry::CopyFrom(const ClientReqJionCountry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqJionCountry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqJionCountry::Swap(ClientReqJionCountry* other) {
  if (other != this) {
    std::swap(countryid_, other->countryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqJionCountry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqJionCountry_descriptor_;
  metadata.reflection = ClientReqJionCountry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClientReqJionCountry::kSuccessFieldNumber;
const int AckClientReqJionCountry::kCountryIDFieldNumber;
const int AckClientReqJionCountry::kGetAwardErrFieldNumber;
#endif  // !_MSC_VER

AckClientReqJionCountry::AckClientReqJionCountry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientReqJionCountry::InitAsDefaultInstance() {
}

AckClientReqJionCountry::AckClientReqJionCountry(const AckClientReqJionCountry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientReqJionCountry::SharedCtor() {
  _cached_size_ = 0;
  success_ = 0;
  countryid_ = 0;
  getawarderr_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientReqJionCountry::~AckClientReqJionCountry() {
  SharedDtor();
}

void AckClientReqJionCountry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckClientReqJionCountry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientReqJionCountry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientReqJionCountry_descriptor_;
}

const AckClientReqJionCountry& AckClientReqJionCountry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

AckClientReqJionCountry* AckClientReqJionCountry::default_instance_ = NULL;

AckClientReqJionCountry* AckClientReqJionCountry::New() const {
  return new AckClientReqJionCountry;
}

void AckClientReqJionCountry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = 0;
    countryid_ = 0;
    getawarderr_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientReqJionCountry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_countryID;
        break;
      }

      // optional int32 countryID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_countryID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_getAwardErr;
        break;
      }

      // optional int32 getAwardErr = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_getAwardErr:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &getawarderr_)));
          set_has_getawarderr();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientReqJionCountry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->success(), output);
  }

  // optional int32 countryID = 2;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->countryid(), output);
  }

  // optional int32 getAwardErr = 3;
  if (has_getawarderr()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->getawarderr(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientReqJionCountry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->success(), target);
  }

  // optional int32 countryID = 2;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->countryid(), target);
  }

  // optional int32 getAwardErr = 3;
  if (has_getawarderr()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->getawarderr(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientReqJionCountry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }

    // optional int32 countryID = 2;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }

    // optional int32 getAwardErr = 3;
    if (has_getawarderr()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->getawarderr());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientReqJionCountry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientReqJionCountry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientReqJionCountry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientReqJionCountry::MergeFrom(const AckClientReqJionCountry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_getawarderr()) {
      set_getawarderr(from.getawarderr());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientReqJionCountry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientReqJionCountry::CopyFrom(const AckClientReqJionCountry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientReqJionCountry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckClientReqJionCountry::Swap(AckClientReqJionCountry* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(countryid_, other->countryid_);
    std::swap(getawarderr_, other->getawarderr_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientReqJionCountry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientReqJionCountry_descriptor_;
  metadata.reflection = AckClientReqJionCountry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryInfo::kCountryIDFieldNumber;
const int CountryInfo::kLevelFieldNumber;
const int CountryInfo::kMoneyFieldNumber;
const int CountryInfo::kLeaderNameFieldNumber;
const int CountryInfo::kCounsellorNameFieldNumber;
const int CountryInfo::kNoticeFieldNumber;
const int CountryInfo::kCountFieldNumber;
#endif  // !_MSC_VER

CountryInfo::CountryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryInfo::InitAsDefaultInstance() {
}

CountryInfo::CountryInfo(const CountryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryInfo::SharedCtor() {
  _cached_size_ = 0;
  countryid_ = 0;
  level_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  leadername_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  counsellorname_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  notice_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryInfo::~CountryInfo() {
  SharedDtor();
}

void CountryInfo::SharedDtor() {
  if (leadername_ != &::google::protobuf::internal::kEmptyString) {
    delete leadername_;
  }
  if (counsellorname_ != &::google::protobuf::internal::kEmptyString) {
    delete counsellorname_;
  }
  if (notice_ != &::google::protobuf::internal::kEmptyString) {
    delete notice_;
  }
  if (this != default_instance_) {
  }
}

void CountryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryInfo_descriptor_;
}

const CountryInfo& CountryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

CountryInfo* CountryInfo::default_instance_ = NULL;

CountryInfo* CountryInfo::New() const {
  return new CountryInfo;
}

void CountryInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    countryid_ = 0;
    level_ = 0;
    money_ = GOOGLE_LONGLONG(0);
    if (has_leadername()) {
      if (leadername_ != &::google::protobuf::internal::kEmptyString) {
        leadername_->clear();
      }
    }
    if (has_counsellorname()) {
      if (counsellorname_ != &::google::protobuf::internal::kEmptyString) {
        counsellorname_->clear();
      }
    }
    if (has_notice()) {
      if (notice_ != &::google::protobuf::internal::kEmptyString) {
        notice_->clear();
      }
    }
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 CountryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_Level;
        break;
      }

      // optional int32 Level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_Money;
        break;
      }

      // optional int64 Money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_Money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_leaderName;
        break;
      }

      // optional bytes leaderName = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_leaderName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_leadername()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(42)) goto parse_CounsellorName;
        break;
      }

      // optional bytes CounsellorName = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_CounsellorName:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_counsellorname()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(50)) goto parse_notice;
        break;
      }

      // optional bytes notice = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_notice:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_notice()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_count;
        break;
      }

      // optional int32 count = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 CountryID = 1;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->countryid(), output);
  }

  // optional int32 Level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int64 Money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  // optional bytes leaderName = 4;
  if (has_leadername()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      4, this->leadername(), output);
  }

  // optional bytes CounsellorName = 5;
  if (has_counsellorname()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      5, this->counsellorname(), output);
  }

  // optional bytes notice = 6;
  if (has_notice()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      6, this->notice(), output);
  }

  // optional int32 count = 7;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 CountryID = 1;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->countryid(), target);
  }

  // optional int32 Level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int64 Money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }

  // optional bytes leaderName = 4;
  if (has_leadername()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        4, this->leadername(), target);
  }

  // optional bytes CounsellorName = 5;
  if (has_counsellorname()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        5, this->counsellorname(), target);
  }

  // optional bytes notice = 6;
  if (has_notice()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        6, this->notice(), target);
  }

  // optional int32 count = 7;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 CountryID = 1;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }

    // optional int32 Level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int64 Money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional bytes leaderName = 4;
    if (has_leadername()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->leadername());
    }

    // optional bytes CounsellorName = 5;
    if (has_counsellorname()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->counsellorname());
    }

    // optional bytes notice = 6;
    if (has_notice()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->notice());
    }

    // optional int32 count = 7;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryInfo::MergeFrom(const CountryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_leadername()) {
      set_leadername(from.leadername());
    }
    if (from.has_counsellorname()) {
      set_counsellorname(from.counsellorname());
    }
    if (from.has_notice()) {
      set_notice(from.notice());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryInfo::CopyFrom(const CountryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountryInfo::Swap(CountryInfo* other) {
  if (other != this) {
    std::swap(countryid_, other->countryid_);
    std::swap(level_, other->level_);
    std::swap(money_, other->money_);
    std::swap(leadername_, other->leadername_);
    std::swap(counsellorname_, other->counsellorname_);
    std::swap(notice_, other->notice_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryInfo_descriptor_;
  metadata.reflection = CountryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClientCountryStore::kPropFieldNumber;
const int AckClientCountryStore::kMoneyFieldNumber;
const int AckClientCountryStore::kContributeFieldNumber;
#endif  // !_MSC_VER

AckClientCountryStore::AckClientCountryStore()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientCountryStore::InitAsDefaultInstance() {
}

AckClientCountryStore::AckClientCountryStore(const AckClientCountryStore& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientCountryStore::SharedCtor() {
  _cached_size_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  contribute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientCountryStore::~AckClientCountryStore() {
  SharedDtor();
}

void AckClientCountryStore::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckClientCountryStore::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientCountryStore::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientCountryStore_descriptor_;
}

const AckClientCountryStore& AckClientCountryStore::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

AckClientCountryStore* AckClientCountryStore::default_instance_ = NULL;

AckClientCountryStore* AckClientCountryStore::New() const {
  return new AckClientCountryStore;
}

void AckClientCountryStore::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    money_ = GOOGLE_LONGLONG(0);
    contribute_ = 0;
  }
  prop_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientCountryStore::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CountryPackage.CountryItem prop = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_prop:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_prop()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_prop;
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional int64 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_contribute;
        break;
      }

      // optional int32 contribute = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientCountryStore::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CountryPackage.CountryItem prop = 1;
  for (int i = 0; i < this->prop_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->prop(i), output);
  }

  // optional int64 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->money(), output);
  }

  // optional int32 contribute = 3;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->contribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientCountryStore::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CountryPackage.CountryItem prop = 1;
  for (int i = 0; i < this->prop_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->prop(i), target);
  }

  // optional int64 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->money(), target);
  }

  // optional int32 contribute = 3;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->contribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientCountryStore::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int64 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int32 contribute = 3;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }

  }
  // repeated .CountryPackage.CountryItem prop = 1;
  total_size += 1 * this->prop_size();
  for (int i = 0; i < this->prop_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->prop(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientCountryStore::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientCountryStore* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientCountryStore*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientCountryStore::MergeFrom(const AckClientCountryStore& from) {
  GOOGLE_CHECK_NE(&from, this);
  prop_.MergeFrom(from.prop_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientCountryStore::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientCountryStore::CopyFrom(const AckClientCountryStore& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientCountryStore::IsInitialized() const {

  for (int i = 0; i < prop_size(); i++) {
    if (!this->prop(i).IsInitialized()) return false;
  }
  return true;
}

void AckClientCountryStore::Swap(AckClientCountryStore* other) {
  if (other != this) {
    prop_.Swap(&other->prop_);
    std::swap(money_, other->money_);
    std::swap(contribute_, other->contribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientCountryStore::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientCountryStore_descriptor_;
  metadata.reflection = AckClientCountryStore_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqMemList::kPageFieldNumber;
#endif  // !_MSC_VER

ClientReqMemList::ClientReqMemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqMemList::InitAsDefaultInstance() {
}

ClientReqMemList::ClientReqMemList(const ClientReqMemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqMemList::SharedCtor() {
  _cached_size_ = 0;
  page_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqMemList::~ClientReqMemList() {
  SharedDtor();
}

void ClientReqMemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqMemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqMemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqMemList_descriptor_;
}

const ClientReqMemList& ClientReqMemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

ClientReqMemList* ClientReqMemList::default_instance_ = NULL;

ClientReqMemList* ClientReqMemList::New() const {
  return new ClientReqMemList;
}

void ClientReqMemList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    page_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqMemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 page = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &page_)));
          set_has_page();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqMemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 page = 1;
  if (has_page()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->page(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqMemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 page = 1;
  if (has_page()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->page(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqMemList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 page = 1;
    if (has_page()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->page());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqMemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqMemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqMemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqMemList::MergeFrom(const ClientReqMemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_page()) {
      set_page(from.page());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqMemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqMemList::CopyFrom(const ClientReqMemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqMemList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqMemList::Swap(ClientReqMemList* other) {
  if (other != this) {
    std::swap(page_, other->page_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqMemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqMemList_descriptor_;
  metadata.reflection = ClientReqMemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClientReqMemList::kMemsFieldNumber;
#endif  // !_MSC_VER

AckClientReqMemList::AckClientReqMemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientReqMemList::InitAsDefaultInstance() {
}

AckClientReqMemList::AckClientReqMemList(const AckClientReqMemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientReqMemList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientReqMemList::~AckClientReqMemList() {
  SharedDtor();
}

void AckClientReqMemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckClientReqMemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientReqMemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientReqMemList_descriptor_;
}

const AckClientReqMemList& AckClientReqMemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

AckClientReqMemList* AckClientReqMemList::default_instance_ = NULL;

AckClientReqMemList* AckClientReqMemList::New() const {
  return new AckClientReqMemList;
}

void AckClientReqMemList::Clear() {
  mems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientReqMemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CountryPackage.CountryMemInfo mems = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_mems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientReqMemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CountryPackage.CountryMemInfo mems = 1;
  for (int i = 0; i < this->mems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->mems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientReqMemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CountryPackage.CountryMemInfo mems = 1;
  for (int i = 0; i < this->mems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->mems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientReqMemList::ByteSize() const {
  int total_size = 0;

  // repeated .CountryPackage.CountryMemInfo mems = 1;
  total_size += 1 * this->mems_size();
  for (int i = 0; i < this->mems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientReqMemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientReqMemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientReqMemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientReqMemList::MergeFrom(const AckClientReqMemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  mems_.MergeFrom(from.mems_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientReqMemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientReqMemList::CopyFrom(const AckClientReqMemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientReqMemList::IsInitialized() const {

  for (int i = 0; i < mems_size(); i++) {
    if (!this->mems(i).IsInitialized()) return false;
  }
  return true;
}

void AckClientReqMemList::Swap(AckClientReqMemList* other) {
  if (other != this) {
    mems_.Swap(&other->mems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientReqMemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientReqMemList_descriptor_;
  metadata.reflection = AckClientReqMemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryMemInfo::kIdFieldNumber;
const int CountryMemInfo::kNameFieldNumber;
const int CountryMemInfo::kLevelFieldNumber;
const int CountryMemInfo::kProfessionFieldNumber;
const int CountryMemInfo::kContributeFieldNumber;
const int CountryMemInfo::kPowerFieldNumber;
const int CountryMemInfo::kJobFieldNumber;
const int CountryMemInfo::kVipFieldNumber;
const int CountryMemInfo::kOnLineFieldNumber;
#endif  // !_MSC_VER

CountryMemInfo::CountryMemInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryMemInfo::InitAsDefaultInstance() {
}

CountryMemInfo::CountryMemInfo(const CountryMemInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryMemInfo::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  profession_ = 0;
  contribute_ = 0;
  power_ = 0;
  job_ = 0;
  vip_ = 0;
  online_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryMemInfo::~CountryMemInfo() {
  SharedDtor();
}

void CountryMemInfo::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void CountryMemInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryMemInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryMemInfo_descriptor_;
}

const CountryMemInfo& CountryMemInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

CountryMemInfo* CountryMemInfo::default_instance_ = NULL;

CountryMemInfo* CountryMemInfo::New() const {
  return new CountryMemInfo;
}

void CountryMemInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    profession_ = 0;
    contribute_ = 0;
    power_ = 0;
    job_ = 0;
    vip_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    online_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryMemInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_name;
        break;
      }

      // optional bytes name = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_level;
        break;
      }

      // optional int32 level = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_profession;
        break;
      }

      // optional int32 profession = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_contribute;
        break;
      }

      // optional int32 contribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_power;
        break;
      }

      // optional int32 power = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_power:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &power_)));
          set_has_power();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_job;
        break;
      }

      // optional int32 job = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_vip;
        break;
      }

      // optional int32 vip = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_vip:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &vip_)));
          set_has_vip();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_onLine;
        break;
      }

      // optional bool onLine = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_onLine:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &online_)));
          set_has_online();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryMemInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional bytes name = 2;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->name(), output);
  }

  // optional int32 level = 3;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->level(), output);
  }

  // optional int32 profession = 4;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->profession(), output);
  }

  // optional int32 contribute = 5;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->contribute(), output);
  }

  // optional int32 power = 6;
  if (has_power()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->power(), output);
  }

  // optional int32 job = 7;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->job(), output);
  }

  // optional int32 vip = 8;
  if (has_vip()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->vip(), output);
  }

  // optional bool onLine = 9;
  if (has_online()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(9, this->online(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryMemInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional bytes name = 2;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->name(), target);
  }

  // optional int32 level = 3;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->level(), target);
  }

  // optional int32 profession = 4;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->profession(), target);
  }

  // optional int32 contribute = 5;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->contribute(), target);
  }

  // optional int32 power = 6;
  if (has_power()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->power(), target);
  }

  // optional int32 job = 7;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->job(), target);
  }

  // optional int32 vip = 8;
  if (has_vip()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->vip(), target);
  }

  // optional bool onLine = 9;
  if (has_online()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(9, this->online(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryMemInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional bytes name = 2;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 level = 3;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 profession = 4;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

    // optional int32 contribute = 5;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }

    // optional int32 power = 6;
    if (has_power()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->power());
    }

    // optional int32 job = 7;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // optional int32 vip = 8;
    if (has_vip()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->vip());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional bool onLine = 9;
    if (has_online()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryMemInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryMemInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryMemInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryMemInfo::MergeFrom(const CountryMemInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_profession()) {
      set_profession(from.profession());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
    if (from.has_power()) {
      set_power(from.power());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_vip()) {
      set_vip(from.vip());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_online()) {
      set_online(from.online());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryMemInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryMemInfo::CopyFrom(const CountryMemInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryMemInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountryMemInfo::Swap(CountryMemInfo* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(profession_, other->profession_);
    std::swap(contribute_, other->contribute_);
    std::swap(power_, other->power_);
    std::swap(job_, other->job_);
    std::swap(vip_, other->vip_);
    std::swap(online_, other->online_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryMemInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryMemInfo_descriptor_;
  metadata.reflection = CountryMemInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryItem::kIndexFieldNumber;
const int CountryItem::kPropIDFieldNumber;
const int CountryItem::kCountFieldNumber;
#endif  // !_MSC_VER

CountryItem::CountryItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryItem::InitAsDefaultInstance() {
}

CountryItem::CountryItem(const CountryItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryItem::SharedCtor() {
  _cached_size_ = 0;
  index_ = 0;
  propid_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryItem::~CountryItem() {
  SharedDtor();
}

void CountryItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryItem_descriptor_;
}

const CountryItem& CountryItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

CountryItem* CountryItem::default_instance_ = NULL;

CountryItem* CountryItem::New() const {
  return new CountryItem;
}

void CountryItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    index_ = 0;
    propid_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 index = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &index_)));
          set_has_index();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_propID;
        break;
      }

      // optional int32 propID = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_propID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &propid_)));
          set_has_propid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 index = 1;
  if (has_index()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->index(), output);
  }

  // optional int32 propID = 2;
  if (has_propid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->propid(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 index = 1;
  if (has_index()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->index(), target);
  }

  // optional int32 propID = 2;
  if (has_propid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->propid(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 index = 1;
    if (has_index()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->index());
    }

    // optional int32 propID = 2;
    if (has_propid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->propid());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryItem::MergeFrom(const CountryItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_index()) {
      set_index(from.index());
    }
    if (from.has_propid()) {
      set_propid(from.propid());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryItem::CopyFrom(const CountryItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountryItem::Swap(CountryItem* other) {
  if (other != this) {
    std::swap(index_, other->index_);
    std::swap(propid_, other->propid_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryItem_descriptor_;
  metadata.reflection = CountryItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryItemList::kPropinfoFieldNumber;
#endif  // !_MSC_VER

CountryItemList::CountryItemList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryItemList::InitAsDefaultInstance() {
}

CountryItemList::CountryItemList(const CountryItemList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryItemList::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryItemList::~CountryItemList() {
  SharedDtor();
}

void CountryItemList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryItemList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryItemList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryItemList_descriptor_;
}

const CountryItemList& CountryItemList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

CountryItemList* CountryItemList::default_instance_ = NULL;

CountryItemList* CountryItemList::New() const {
  return new CountryItemList;
}

void CountryItemList::Clear() {
  propinfo_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryItemList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CountryPackage.CountryItem propinfo = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_propinfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_propinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_propinfo;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryItemList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CountryPackage.CountryItem propinfo = 1;
  for (int i = 0; i < this->propinfo_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->propinfo(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryItemList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CountryPackage.CountryItem propinfo = 1;
  for (int i = 0; i < this->propinfo_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->propinfo(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryItemList::ByteSize() const {
  int total_size = 0;

  // repeated .CountryPackage.CountryItem propinfo = 1;
  total_size += 1 * this->propinfo_size();
  for (int i = 0; i < this->propinfo_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->propinfo(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryItemList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryItemList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryItemList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryItemList::MergeFrom(const CountryItemList& from) {
  GOOGLE_CHECK_NE(&from, this);
  propinfo_.MergeFrom(from.propinfo_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryItemList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryItemList::CopyFrom(const CountryItemList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryItemList::IsInitialized() const {

  for (int i = 0; i < propinfo_size(); i++) {
    if (!this->propinfo(i).IsInitialized()) return false;
  }
  return true;
}

void CountryItemList::Swap(CountryItemList* other) {
  if (other != this) {
    propinfo_.Swap(&other->propinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryItemList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryItemList_descriptor_;
  metadata.reflection = CountryItemList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClientReqLiveUpCountry::kSuccessFieldNumber;
const int AckClientReqLiveUpCountry::kLevelFieldNumber;
const int AckClientReqLiveUpCountry::kMoneyFieldNumber;
const int AckClientReqLiveUpCountry::kItemFieldNumber;
#endif  // !_MSC_VER

AckClientReqLiveUpCountry::AckClientReqLiveUpCountry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientReqLiveUpCountry::InitAsDefaultInstance() {
}

AckClientReqLiveUpCountry::AckClientReqLiveUpCountry(const AckClientReqLiveUpCountry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientReqLiveUpCountry::SharedCtor() {
  _cached_size_ = 0;
  success_ = 0;
  level_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientReqLiveUpCountry::~AckClientReqLiveUpCountry() {
  SharedDtor();
}

void AckClientReqLiveUpCountry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckClientReqLiveUpCountry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientReqLiveUpCountry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientReqLiveUpCountry_descriptor_;
}

const AckClientReqLiveUpCountry& AckClientReqLiveUpCountry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

AckClientReqLiveUpCountry* AckClientReqLiveUpCountry::default_instance_ = NULL;

AckClientReqLiveUpCountry* AckClientReqLiveUpCountry::New() const {
  return new AckClientReqLiveUpCountry;
}

void AckClientReqLiveUpCountry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = 0;
    level_ = 0;
    money_ = GOOGLE_LONGLONG(0);
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientReqLiveUpCountry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_money;
        break;
      }

      // optional int64 money = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item;
        break;
      }

      // repeated .CountryPackage.CountryItem item = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientReqLiveUpCountry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->success(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  // optional int64 money = 3;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(3, this->money(), output);
  }

  // repeated .CountryPackage.CountryItem item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientReqLiveUpCountry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->success(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  // optional int64 money = 3;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(3, this->money(), target);
  }

  // repeated .CountryPackage.CountryItem item = 4;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientReqLiveUpCountry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int64 money = 3;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

  }
  // repeated .CountryPackage.CountryItem item = 4;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientReqLiveUpCountry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientReqLiveUpCountry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientReqLiveUpCountry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientReqLiveUpCountry::MergeFrom(const AckClientReqLiveUpCountry& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientReqLiveUpCountry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientReqLiveUpCountry::CopyFrom(const AckClientReqLiveUpCountry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientReqLiveUpCountry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void AckClientReqLiveUpCountry::Swap(AckClientReqLiveUpCountry* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(level_, other->level_);
    std::swap(money_, other->money_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientReqLiveUpCountry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientReqLiveUpCountry_descriptor_;
  metadata.reflection = AckClientReqLiveUpCountry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqChangeCountry::kDestIDFieldNumber;
#endif  // !_MSC_VER

ClientReqChangeCountry::ClientReqChangeCountry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqChangeCountry::InitAsDefaultInstance() {
}

ClientReqChangeCountry::ClientReqChangeCountry(const ClientReqChangeCountry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqChangeCountry::SharedCtor() {
  _cached_size_ = 0;
  destid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqChangeCountry::~ClientReqChangeCountry() {
  SharedDtor();
}

void ClientReqChangeCountry::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqChangeCountry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqChangeCountry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqChangeCountry_descriptor_;
}

const ClientReqChangeCountry& ClientReqChangeCountry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

ClientReqChangeCountry* ClientReqChangeCountry::default_instance_ = NULL;

ClientReqChangeCountry* ClientReqChangeCountry::New() const {
  return new ClientReqChangeCountry;
}

void ClientReqChangeCountry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    destid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqChangeCountry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 destID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &destid_)));
          set_has_destid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqChangeCountry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 destID = 1;
  if (has_destid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->destid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqChangeCountry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 destID = 1;
  if (has_destid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->destid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqChangeCountry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 destID = 1;
    if (has_destid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->destid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqChangeCountry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqChangeCountry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqChangeCountry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqChangeCountry::MergeFrom(const ClientReqChangeCountry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_destid()) {
      set_destid(from.destid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqChangeCountry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqChangeCountry::CopyFrom(const ClientReqChangeCountry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqChangeCountry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqChangeCountry::Swap(ClientReqChangeCountry* other) {
  if (other != this) {
    std::swap(destid_, other->destid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqChangeCountry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqChangeCountry_descriptor_;
  metadata.reflection = ClientReqChangeCountry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClientChangeCountry::kSuccessFieldNumber;
const int AckClientChangeCountry::kNewCountryInfoFieldNumber;
#endif  // !_MSC_VER

AckClientChangeCountry::AckClientChangeCountry()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientChangeCountry::InitAsDefaultInstance() {
  newcountryinfo_ = const_cast< ::CountryPackage::CountryInfo*>(&::CountryPackage::CountryInfo::default_instance());
}

AckClientChangeCountry::AckClientChangeCountry(const AckClientChangeCountry& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientChangeCountry::SharedCtor() {
  _cached_size_ = 0;
  success_ = 0;
  newcountryinfo_ = NULL;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientChangeCountry::~AckClientChangeCountry() {
  SharedDtor();
}

void AckClientChangeCountry::SharedDtor() {
  if (this != default_instance_) {
    delete newcountryinfo_;
  }
}

void AckClientChangeCountry::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientChangeCountry::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientChangeCountry_descriptor_;
}

const AckClientChangeCountry& AckClientChangeCountry::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

AckClientChangeCountry* AckClientChangeCountry::default_instance_ = NULL;

AckClientChangeCountry* AckClientChangeCountry::New() const {
  return new AckClientChangeCountry;
}

void AckClientChangeCountry::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = 0;
    if (has_newcountryinfo()) {
      if (newcountryinfo_ != NULL) newcountryinfo_->::CountryPackage::CountryInfo::Clear();
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientChangeCountry::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_newCountryInfo;
        break;
      }

      // optional .CountryPackage.CountryInfo newCountryInfo = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_newCountryInfo:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
               input, mutable_newcountryinfo()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientChangeCountry::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->success(), output);
  }

  // optional .CountryPackage.CountryInfo newCountryInfo = 2;
  if (has_newcountryinfo()) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->newcountryinfo(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientChangeCountry::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->success(), target);
  }

  // optional .CountryPackage.CountryInfo newCountryInfo = 2;
  if (has_newcountryinfo()) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->newcountryinfo(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientChangeCountry::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }

    // optional .CountryPackage.CountryInfo newCountryInfo = 2;
    if (has_newcountryinfo()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
          this->newcountryinfo());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientChangeCountry::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientChangeCountry* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientChangeCountry*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientChangeCountry::MergeFrom(const AckClientChangeCountry& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_newcountryinfo()) {
      mutable_newcountryinfo()->::CountryPackage::CountryInfo::MergeFrom(from.newcountryinfo());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientChangeCountry::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientChangeCountry::CopyFrom(const AckClientChangeCountry& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientChangeCountry::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  if (has_newcountryinfo()) {
    if (!this->newcountryinfo().IsInitialized()) return false;
  }
  return true;
}

void AckClientChangeCountry::Swap(AckClientChangeCountry* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(newcountryinfo_, other->newcountryinfo_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientChangeCountry::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientChangeCountry_descriptor_;
  metadata.reflection = AckClientChangeCountry_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqContribute::kIdFieldNumber;
const int ClientReqContribute::kNumFieldNumber;
#endif  // !_MSC_VER

ClientReqContribute::ClientReqContribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqContribute::InitAsDefaultInstance() {
}

ClientReqContribute::ClientReqContribute(const ClientReqContribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqContribute::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  num_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqContribute::~ClientReqContribute() {
  SharedDtor();
}

void ClientReqContribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqContribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqContribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqContribute_descriptor_;
}

const ClientReqContribute& ClientReqContribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

ClientReqContribute* ClientReqContribute::default_instance_ = NULL;

ClientReqContribute* ClientReqContribute::New() const {
  return new ClientReqContribute;
}

void ClientReqContribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    num_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqContribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_num;
        break;
      }

      // optional int32 num = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqContribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 num = 2;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->num(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqContribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 num = 2;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->num(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqContribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 2;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqContribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqContribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqContribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqContribute::MergeFrom(const ClientReqContribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqContribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqContribute::CopyFrom(const ClientReqContribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqContribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqContribute::Swap(ClientReqContribute* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqContribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqContribute_descriptor_;
  metadata.reflection = ClientReqContribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClientReqContribute::kSuccessFieldNumber;
const int AckClientReqContribute::kMoneyFieldNumber;
const int AckClientReqContribute::kItemFieldNumber;
const int AckClientReqContribute::kContributeFieldNumber;
#endif  // !_MSC_VER

AckClientReqContribute::AckClientReqContribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientReqContribute::InitAsDefaultInstance() {
}

AckClientReqContribute::AckClientReqContribute(const AckClientReqContribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientReqContribute::SharedCtor() {
  _cached_size_ = 0;
  success_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  contribute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientReqContribute::~AckClientReqContribute() {
  SharedDtor();
}

void AckClientReqContribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckClientReqContribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientReqContribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientReqContribute_descriptor_;
}

const AckClientReqContribute& AckClientReqContribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

AckClientReqContribute* AckClientReqContribute::default_instance_ = NULL;

AckClientReqContribute* AckClientReqContribute::New() const {
  return new AckClientReqContribute;
}

void AckClientReqContribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = 0;
    money_ = GOOGLE_LONGLONG(0);
    contribute_ = 0;
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientReqContribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_money;
        break;
      }

      // optional int64 money = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        break;
      }

      // repeated .CountryPackage.CountryItem item = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_item;
        if (input->ExpectTag(32)) goto parse_contribute;
        break;
      }

      // optional int32 contribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientReqContribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->success(), output);
  }

  // optional int64 money = 2;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(2, this->money(), output);
  }

  // repeated .CountryPackage.CountryItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      3, this->item(i), output);
  }

  // optional int32 contribute = 4;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->contribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientReqContribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->success(), target);
  }

  // optional int64 money = 2;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(2, this->money(), target);
  }

  // repeated .CountryPackage.CountryItem item = 3;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        3, this->item(i), target);
  }

  // optional int32 contribute = 4;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->contribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientReqContribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }

    // optional int64 money = 2;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int32 contribute = 4;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }

  }
  // repeated .CountryPackage.CountryItem item = 3;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientReqContribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientReqContribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientReqContribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientReqContribute::MergeFrom(const AckClientReqContribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientReqContribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientReqContribute::CopyFrom(const AckClientReqContribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientReqContribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void AckClientReqContribute::Swap(AckClientReqContribute* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(money_, other->money_);
    item_.Swap(&other->item_);
    std::swap(contribute_, other->contribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientReqContribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientReqContribute_descriptor_;
  metadata.reflection = AckClientReqContribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqModifyNotice::kNoticeMessageFieldNumber;
#endif  // !_MSC_VER

ClientReqModifyNotice::ClientReqModifyNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqModifyNotice::InitAsDefaultInstance() {
}

ClientReqModifyNotice::ClientReqModifyNotice(const ClientReqModifyNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqModifyNotice::SharedCtor() {
  _cached_size_ = 0;
  noticemessage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqModifyNotice::~ClientReqModifyNotice() {
  SharedDtor();
}

void ClientReqModifyNotice::SharedDtor() {
  if (noticemessage_ != &::google::protobuf::internal::kEmptyString) {
    delete noticemessage_;
  }
  if (this != default_instance_) {
  }
}

void ClientReqModifyNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqModifyNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqModifyNotice_descriptor_;
}

const ClientReqModifyNotice& ClientReqModifyNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

ClientReqModifyNotice* ClientReqModifyNotice::default_instance_ = NULL;

ClientReqModifyNotice* ClientReqModifyNotice::New() const {
  return new ClientReqModifyNotice;
}

void ClientReqModifyNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (has_noticemessage()) {
      if (noticemessage_ != &::google::protobuf::internal::kEmptyString) {
        noticemessage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqModifyNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bytes noticeMessage = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_noticemessage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqModifyNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bytes noticeMessage = 1;
  if (has_noticemessage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      1, this->noticemessage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqModifyNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bytes noticeMessage = 1;
  if (has_noticemessage()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        1, this->noticemessage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqModifyNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bytes noticeMessage = 1;
    if (has_noticemessage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->noticemessage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqModifyNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqModifyNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqModifyNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqModifyNotice::MergeFrom(const ClientReqModifyNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_noticemessage()) {
      set_noticemessage(from.noticemessage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqModifyNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqModifyNotice::CopyFrom(const ClientReqModifyNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqModifyNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqModifyNotice::Swap(ClientReqModifyNotice* other) {
  if (other != this) {
    std::swap(noticemessage_, other->noticemessage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqModifyNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqModifyNotice_descriptor_;
  metadata.reflection = ClientReqModifyNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClientModifyNotice::kSuccessFieldNumber;
const int AckClientModifyNotice::kNoticeMesageFieldNumber;
#endif  // !_MSC_VER

AckClientModifyNotice::AckClientModifyNotice()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientModifyNotice::InitAsDefaultInstance() {
}

AckClientModifyNotice::AckClientModifyNotice(const AckClientModifyNotice& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientModifyNotice::SharedCtor() {
  _cached_size_ = 0;
  success_ = 0;
  noticemesage_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientModifyNotice::~AckClientModifyNotice() {
  SharedDtor();
}

void AckClientModifyNotice::SharedDtor() {
  if (noticemesage_ != &::google::protobuf::internal::kEmptyString) {
    delete noticemesage_;
  }
  if (this != default_instance_) {
  }
}

void AckClientModifyNotice::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientModifyNotice::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientModifyNotice_descriptor_;
}

const AckClientModifyNotice& AckClientModifyNotice::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

AckClientModifyNotice* AckClientModifyNotice::default_instance_ = NULL;

AckClientModifyNotice* AckClientModifyNotice::New() const {
  return new AckClientModifyNotice;
}

void AckClientModifyNotice::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = 0;
    if (has_noticemesage()) {
      if (noticemesage_ != &::google::protobuf::internal::kEmptyString) {
        noticemesage_->clear();
      }
    }
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientModifyNotice::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_noticeMesage;
        break;
      }

      // optional bytes noticeMesage = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_noticeMesage:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_noticemesage()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientModifyNotice::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->success(), output);
  }

  // optional bytes noticeMesage = 2;
  if (has_noticemesage()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      2, this->noticemesage(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientModifyNotice::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->success(), target);
  }

  // optional bytes noticeMesage = 2;
  if (has_noticemesage()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        2, this->noticemesage(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientModifyNotice::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }

    // optional bytes noticeMesage = 2;
    if (has_noticemesage()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->noticemesage());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientModifyNotice::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientModifyNotice* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientModifyNotice*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientModifyNotice::MergeFrom(const AckClientModifyNotice& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_noticemesage()) {
      set_noticemesage(from.noticemesage());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientModifyNotice::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientModifyNotice::CopyFrom(const AckClientModifyNotice& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientModifyNotice::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckClientModifyNotice::Swap(AckClientModifyNotice* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(noticemesage_, other->noticemesage_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientModifyNotice::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientModifyNotice_descriptor_;
  metadata.reflection = AckClientModifyNotice_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqLastWeekJobRank::kCountryIDFieldNumber;
#endif  // !_MSC_VER

ClientReqLastWeekJobRank::ClientReqLastWeekJobRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqLastWeekJobRank::InitAsDefaultInstance() {
}

ClientReqLastWeekJobRank::ClientReqLastWeekJobRank(const ClientReqLastWeekJobRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqLastWeekJobRank::SharedCtor() {
  _cached_size_ = 0;
  countryid_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqLastWeekJobRank::~ClientReqLastWeekJobRank() {
  SharedDtor();
}

void ClientReqLastWeekJobRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqLastWeekJobRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqLastWeekJobRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqLastWeekJobRank_descriptor_;
}

const ClientReqLastWeekJobRank& ClientReqLastWeekJobRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

ClientReqLastWeekJobRank* ClientReqLastWeekJobRank::default_instance_ = NULL;

ClientReqLastWeekJobRank* ClientReqLastWeekJobRank::New() const {
  return new ClientReqLastWeekJobRank;
}

void ClientReqLastWeekJobRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    countryid_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqLastWeekJobRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 countryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqLastWeekJobRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 countryID = 1;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->countryid(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqLastWeekJobRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 countryID = 1;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->countryid(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqLastWeekJobRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 countryID = 1;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqLastWeekJobRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqLastWeekJobRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqLastWeekJobRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqLastWeekJobRank::MergeFrom(const ClientReqLastWeekJobRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqLastWeekJobRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqLastWeekJobRank::CopyFrom(const ClientReqLastWeekJobRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqLastWeekJobRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqLastWeekJobRank::Swap(ClientReqLastWeekJobRank* other) {
  if (other != this) {
    std::swap(countryid_, other->countryid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqLastWeekJobRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqLastWeekJobRank_descriptor_;
  metadata.reflection = ClientReqLastWeekJobRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClientReqLastWeekJobRank::kCountryIDFieldNumber;
const int AckClientReqLastWeekJobRank::kLimitFieldNumber;
const int AckClientReqLastWeekJobRank::kFetchFieldNumber;
const int AckClientReqLastWeekJobRank::kMembersFieldNumber;
#endif  // !_MSC_VER

AckClientReqLastWeekJobRank::AckClientReqLastWeekJobRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientReqLastWeekJobRank::InitAsDefaultInstance() {
}

AckClientReqLastWeekJobRank::AckClientReqLastWeekJobRank(const AckClientReqLastWeekJobRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientReqLastWeekJobRank::SharedCtor() {
  _cached_size_ = 0;
  countryid_ = 0;
  limit_ = false;
  fetch_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientReqLastWeekJobRank::~AckClientReqLastWeekJobRank() {
  SharedDtor();
}

void AckClientReqLastWeekJobRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckClientReqLastWeekJobRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientReqLastWeekJobRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientReqLastWeekJobRank_descriptor_;
}

const AckClientReqLastWeekJobRank& AckClientReqLastWeekJobRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

AckClientReqLastWeekJobRank* AckClientReqLastWeekJobRank::default_instance_ = NULL;

AckClientReqLastWeekJobRank* AckClientReqLastWeekJobRank::New() const {
  return new AckClientReqLastWeekJobRank;
}

void AckClientReqLastWeekJobRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    countryid_ = 0;
    limit_ = false;
    fetch_ = false;
  }
  members_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientReqLastWeekJobRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 countryID = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &countryid_)));
          set_has_countryid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_limit;
        break;
      }

      // optional bool limit = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_limit:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &limit_)));
          set_has_limit();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_fetch;
        break;
      }

      // optional bool fetch = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fetch:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &fetch_)));
          set_has_fetch();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_members;
        break;
      }

      // repeated .CountryPackage.JobRankMember members = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_members:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_members()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(34)) goto parse_members;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientReqLastWeekJobRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 countryID = 1;
  if (has_countryid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->countryid(), output);
  }

  // optional bool limit = 2;
  if (has_limit()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->limit(), output);
  }

  // optional bool fetch = 3;
  if (has_fetch()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(3, this->fetch(), output);
  }

  // repeated .CountryPackage.JobRankMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      4, this->members(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientReqLastWeekJobRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 countryID = 1;
  if (has_countryid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->countryid(), target);
  }

  // optional bool limit = 2;
  if (has_limit()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->limit(), target);
  }

  // optional bool fetch = 3;
  if (has_fetch()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(3, this->fetch(), target);
  }

  // repeated .CountryPackage.JobRankMember members = 4;
  for (int i = 0; i < this->members_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        4, this->members(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientReqLastWeekJobRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 countryID = 1;
    if (has_countryid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->countryid());
    }

    // optional bool limit = 2;
    if (has_limit()) {
      total_size += 1 + 1;
    }

    // optional bool fetch = 3;
    if (has_fetch()) {
      total_size += 1 + 1;
    }

  }
  // repeated .CountryPackage.JobRankMember members = 4;
  total_size += 1 * this->members_size();
  for (int i = 0; i < this->members_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->members(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientReqLastWeekJobRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientReqLastWeekJobRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientReqLastWeekJobRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientReqLastWeekJobRank::MergeFrom(const AckClientReqLastWeekJobRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  members_.MergeFrom(from.members_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_countryid()) {
      set_countryid(from.countryid());
    }
    if (from.has_limit()) {
      set_limit(from.limit());
    }
    if (from.has_fetch()) {
      set_fetch(from.fetch());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientReqLastWeekJobRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientReqLastWeekJobRank::CopyFrom(const AckClientReqLastWeekJobRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientReqLastWeekJobRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < members_size(); i++) {
    if (!this->members(i).IsInitialized()) return false;
  }
  return true;
}

void AckClientReqLastWeekJobRank::Swap(AckClientReqLastWeekJobRank* other) {
  if (other != this) {
    std::swap(countryid_, other->countryid_);
    std::swap(limit_, other->limit_);
    std::swap(fetch_, other->fetch_);
    members_.Swap(&other->members_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientReqLastWeekJobRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientReqLastWeekJobRank_descriptor_;
  metadata.reflection = AckClientReqLastWeekJobRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int JobRankMember::kIdFieldNumber;
const int JobRankMember::kJobFieldNumber;
const int JobRankMember::kNameFieldNumber;
const int JobRankMember::kWeaponFieldNumber;
const int JobRankMember::kClothFieldNumber;
const int JobRankMember::kShenbingFieldNumber;
const int JobRankMember::kFashionFieldNumber;
const int JobRankMember::kSexFieldNumber;
const int JobRankMember::kProfessionFieldNumber;
#endif  // !_MSC_VER

JobRankMember::JobRankMember()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void JobRankMember::InitAsDefaultInstance() {
}

JobRankMember::JobRankMember(const JobRankMember& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void JobRankMember::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  job_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  weapon_ = 0;
  cloth_ = 0;
  shenbing_ = 0;
  fashion_ = 0;
  sex_ = 0;
  profession_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

JobRankMember::~JobRankMember() {
  SharedDtor();
}

void JobRankMember::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void JobRankMember::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* JobRankMember::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return JobRankMember_descriptor_;
}

const JobRankMember& JobRankMember::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

JobRankMember* JobRankMember::default_instance_ = NULL;

JobRankMember* JobRankMember::New() const {
  return new JobRankMember;
}

void JobRankMember::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    job_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    weapon_ = 0;
    cloth_ = 0;
    shenbing_ = 0;
    fashion_ = 0;
    sex_ = 0;
  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    profession_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool JobRankMember::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job;
        break;
      }

      // optional int32 job = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_weapon;
        break;
      }

      // optional int32 weapon = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_weapon:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &weapon_)));
          set_has_weapon();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_cloth;
        break;
      }

      // optional int32 cloth = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_cloth:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &cloth_)));
          set_has_cloth();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_shenbing;
        break;
      }

      // optional int32 shenbing = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_shenbing:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &shenbing_)));
          set_has_shenbing();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(56)) goto parse_fashion;
        break;
      }

      // optional int32 fashion = 7;
      case 7: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_fashion:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &fashion_)));
          set_has_fashion();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(64)) goto parse_sex;
        break;
      }

      // optional int32 sex = 8;
      case 8: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_sex:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &sex_)));
          set_has_sex();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(72)) goto parse_profession;
        break;
      }

      // optional int32 profession = 9;
      case 9: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_profession:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &profession_)));
          set_has_profession();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void JobRankMember::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 job = 2;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->job(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 weapon = 4;
  if (has_weapon()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->weapon(), output);
  }

  // optional int32 cloth = 5;
  if (has_cloth()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->cloth(), output);
  }

  // optional int32 shenbing = 6;
  if (has_shenbing()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->shenbing(), output);
  }

  // optional int32 fashion = 7;
  if (has_fashion()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(7, this->fashion(), output);
  }

  // optional int32 sex = 8;
  if (has_sex()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(8, this->sex(), output);
  }

  // optional int32 profession = 9;
  if (has_profession()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(9, this->profession(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* JobRankMember::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 job = 2;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->job(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 weapon = 4;
  if (has_weapon()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->weapon(), target);
  }

  // optional int32 cloth = 5;
  if (has_cloth()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->cloth(), target);
  }

  // optional int32 shenbing = 6;
  if (has_shenbing()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->shenbing(), target);
  }

  // optional int32 fashion = 7;
  if (has_fashion()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(7, this->fashion(), target);
  }

  // optional int32 sex = 8;
  if (has_sex()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(8, this->sex(), target);
  }

  // optional int32 profession = 9;
  if (has_profession()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(9, this->profession(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int JobRankMember::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 job = 2;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 weapon = 4;
    if (has_weapon()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->weapon());
    }

    // optional int32 cloth = 5;
    if (has_cloth()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->cloth());
    }

    // optional int32 shenbing = 6;
    if (has_shenbing()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->shenbing());
    }

    // optional int32 fashion = 7;
    if (has_fashion()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->fashion());
    }

    // optional int32 sex = 8;
    if (has_sex()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->sex());
    }

  }
  if (_has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    // optional int32 profession = 9;
    if (has_profession()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->profession());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void JobRankMember::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const JobRankMember* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const JobRankMember*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void JobRankMember::MergeFrom(const JobRankMember& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_weapon()) {
      set_weapon(from.weapon());
    }
    if (from.has_cloth()) {
      set_cloth(from.cloth());
    }
    if (from.has_shenbing()) {
      set_shenbing(from.shenbing());
    }
    if (from.has_fashion()) {
      set_fashion(from.fashion());
    }
    if (from.has_sex()) {
      set_sex(from.sex());
    }
  }
  if (from._has_bits_[8 / 32] & (0xffu << (8 % 32))) {
    if (from.has_profession()) {
      set_profession(from.profession());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void JobRankMember::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void JobRankMember::CopyFrom(const JobRankMember& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool JobRankMember::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void JobRankMember::Swap(JobRankMember* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(job_, other->job_);
    std::swap(name_, other->name_);
    std::swap(weapon_, other->weapon_);
    std::swap(cloth_, other->cloth_);
    std::swap(shenbing_, other->shenbing_);
    std::swap(fashion_, other->fashion_);
    std::swap(sex_, other->sex_);
    std::swap(profession_, other->profession_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata JobRankMember::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = JobRankMember_descriptor_;
  metadata.reflection = JobRankMember_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClientReqJobPrize::kSeccessFieldNumber;
#endif  // !_MSC_VER

AckClientReqJobPrize::AckClientReqJobPrize()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientReqJobPrize::InitAsDefaultInstance() {
}

AckClientReqJobPrize::AckClientReqJobPrize(const AckClientReqJobPrize& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientReqJobPrize::SharedCtor() {
  _cached_size_ = 0;
  seccess_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientReqJobPrize::~AckClientReqJobPrize() {
  SharedDtor();
}

void AckClientReqJobPrize::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckClientReqJobPrize::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientReqJobPrize::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientReqJobPrize_descriptor_;
}

const AckClientReqJobPrize& AckClientReqJobPrize::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

AckClientReqJobPrize* AckClientReqJobPrize::default_instance_ = NULL;

AckClientReqJobPrize* AckClientReqJobPrize::New() const {
  return new AckClientReqJobPrize;
}

void AckClientReqJobPrize::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    seccess_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientReqJobPrize::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 seccess = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &seccess_)));
          set_has_seccess();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientReqJobPrize::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 seccess = 1;
  if (has_seccess()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->seccess(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientReqJobPrize::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 seccess = 1;
  if (has_seccess()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->seccess(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientReqJobPrize::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 seccess = 1;
    if (has_seccess()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->seccess());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientReqJobPrize::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientReqJobPrize* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientReqJobPrize*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientReqJobPrize::MergeFrom(const AckClientReqJobPrize& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_seccess()) {
      set_seccess(from.seccess());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientReqJobPrize::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientReqJobPrize::CopyFrom(const AckClientReqJobPrize& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientReqJobPrize::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckClientReqJobPrize::Swap(AckClientReqJobPrize* other) {
  if (other != this) {
    std::swap(seccess_, other->seccess_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientReqJobPrize::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientReqJobPrize_descriptor_;
  metadata.reflection = AckClientReqJobPrize_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqKingRank::kFlagFieldNumber;
#endif  // !_MSC_VER

ClientReqKingRank::ClientReqKingRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqKingRank::InitAsDefaultInstance() {
}

ClientReqKingRank::ClientReqKingRank(const ClientReqKingRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqKingRank::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqKingRank::~ClientReqKingRank() {
  SharedDtor();
}

void ClientReqKingRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqKingRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqKingRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqKingRank_descriptor_;
}

const ClientReqKingRank& ClientReqKingRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

ClientReqKingRank* ClientReqKingRank::default_instance_ = NULL;

ClientReqKingRank* ClientReqKingRank::New() const {
  return new ClientReqKingRank;
}

void ClientReqKingRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqKingRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqKingRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqKingRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqKingRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqKingRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqKingRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqKingRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqKingRank::MergeFrom(const ClientReqKingRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqKingRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqKingRank::CopyFrom(const ClientReqKingRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqKingRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqKingRank::Swap(ClientReqKingRank* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqKingRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqKingRank_descriptor_;
  metadata.reflection = ClientReqKingRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClientReqKingRank::kFlagFieldNumber;
const int AckClientReqKingRank::kMemsFieldNumber;
#endif  // !_MSC_VER

AckClientReqKingRank::AckClientReqKingRank()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientReqKingRank::InitAsDefaultInstance() {
}

AckClientReqKingRank::AckClientReqKingRank(const AckClientReqKingRank& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientReqKingRank::SharedCtor() {
  _cached_size_ = 0;
  flag_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientReqKingRank::~AckClientReqKingRank() {
  SharedDtor();
}

void AckClientReqKingRank::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckClientReqKingRank::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientReqKingRank::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientReqKingRank_descriptor_;
}

const AckClientReqKingRank& AckClientReqKingRank::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

AckClientReqKingRank* AckClientReqKingRank::default_instance_ = NULL;

AckClientReqKingRank* AckClientReqKingRank::New() const {
  return new AckClientReqKingRank;
}

void AckClientReqKingRank::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = 0;
  }
  mems_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientReqKingRank::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mems;
        break;
      }

      // repeated .CountryPackage.KingRankMem mems = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_mems:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_mems()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_mems;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientReqKingRank::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->flag(), output);
  }

  // repeated .CountryPackage.KingRankMem mems = 2;
  for (int i = 0; i < this->mems_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->mems(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientReqKingRank::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->flag(), target);
  }

  // repeated .CountryPackage.KingRankMem mems = 2;
  for (int i = 0; i < this->mems_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->mems(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientReqKingRank::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 flag = 1;
    if (has_flag()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->flag());
    }

  }
  // repeated .CountryPackage.KingRankMem mems = 2;
  total_size += 1 * this->mems_size();
  for (int i = 0; i < this->mems_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->mems(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientReqKingRank::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientReqKingRank* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientReqKingRank*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientReqKingRank::MergeFrom(const AckClientReqKingRank& from) {
  GOOGLE_CHECK_NE(&from, this);
  mems_.MergeFrom(from.mems_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientReqKingRank::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientReqKingRank::CopyFrom(const AckClientReqKingRank& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientReqKingRank::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < mems_size(); i++) {
    if (!this->mems(i).IsInitialized()) return false;
  }
  return true;
}

void AckClientReqKingRank::Swap(AckClientReqKingRank* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    mems_.Swap(&other->mems_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientReqKingRank::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientReqKingRank_descriptor_;
  metadata.reflection = AckClientReqKingRank_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int KingRankMem::kIdFieldNumber;
const int KingRankMem::kJobFieldNumber;
const int KingRankMem::kNameFieldNumber;
const int KingRankMem::kLevelFieldNumber;
const int KingRankMem::kContributeFieldNumber;
#endif  // !_MSC_VER

KingRankMem::KingRankMem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void KingRankMem::InitAsDefaultInstance() {
}

KingRankMem::KingRankMem(const KingRankMem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void KingRankMem::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  job_ = 0;
  name_ = const_cast< ::std::string*>(&::google::protobuf::internal::kEmptyString);
  level_ = 0;
  contribute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

KingRankMem::~KingRankMem() {
  SharedDtor();
}

void KingRankMem::SharedDtor() {
  if (name_ != &::google::protobuf::internal::kEmptyString) {
    delete name_;
  }
  if (this != default_instance_) {
  }
}

void KingRankMem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* KingRankMem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return KingRankMem_descriptor_;
}

const KingRankMem& KingRankMem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

KingRankMem* KingRankMem::default_instance_ = NULL;

KingRankMem* KingRankMem::New() const {
  return new KingRankMem;
}

void KingRankMem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    job_ = 0;
    if (has_name()) {
      if (name_ != &::google::protobuf::internal::kEmptyString) {
        name_->clear();
      }
    }
    level_ = 0;
    contribute_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool KingRankMem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job;
        break;
      }

      // optional int32 job = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(26)) goto parse_name;
        break;
      }

      // optional bytes name = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_name:
          DO_(::google::protobuf::internal::WireFormatLite::ReadBytes(
                input, this->mutable_name()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_level;
        break;
      }

      // optional int32 level = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_contribute;
        break;
      }

      // optional int32 contribute = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void KingRankMem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 job = 2;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->job(), output);
  }

  // optional bytes name = 3;
  if (has_name()) {
    ::google::protobuf::internal::WireFormatLite::WriteBytes(
      3, this->name(), output);
  }

  // optional int32 level = 4;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->level(), output);
  }

  // optional int32 contribute = 5;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->contribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* KingRankMem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 job = 2;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->job(), target);
  }

  // optional bytes name = 3;
  if (has_name()) {
    target =
      ::google::protobuf::internal::WireFormatLite::WriteBytesToArray(
        3, this->name(), target);
  }

  // optional int32 level = 4;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->level(), target);
  }

  // optional int32 contribute = 5;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->contribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int KingRankMem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 job = 2;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

    // optional bytes name = 3;
    if (has_name()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::BytesSize(
          this->name());
    }

    // optional int32 level = 4;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

    // optional int32 contribute = 5;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void KingRankMem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const KingRankMem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const KingRankMem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void KingRankMem::MergeFrom(const KingRankMem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
    if (from.has_name()) {
      set_name(from.name());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void KingRankMem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void KingRankMem::CopyFrom(const KingRankMem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool KingRankMem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void KingRankMem::Swap(KingRankMem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(job_, other->job_);
    std::swap(name_, other->name_);
    std::swap(level_, other->level_);
    std::swap(contribute_, other->contribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata KingRankMem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = KingRankMem_descriptor_;
  metadata.reflection = KingRankMem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClientReqShopInfo::kItemlistFieldNumber;
const int AckClientReqShopInfo::kContributeFieldNumber;
#endif  // !_MSC_VER

AckClientReqShopInfo::AckClientReqShopInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientReqShopInfo::InitAsDefaultInstance() {
}

AckClientReqShopInfo::AckClientReqShopInfo(const AckClientReqShopInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientReqShopInfo::SharedCtor() {
  _cached_size_ = 0;
  contribute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientReqShopInfo::~AckClientReqShopInfo() {
  SharedDtor();
}

void AckClientReqShopInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckClientReqShopInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientReqShopInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientReqShopInfo_descriptor_;
}

const AckClientReqShopInfo& AckClientReqShopInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

AckClientReqShopInfo* AckClientReqShopInfo::default_instance_ = NULL;

AckClientReqShopInfo* AckClientReqShopInfo::New() const {
  return new AckClientReqShopInfo;
}

void AckClientReqShopInfo::Clear() {
  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    contribute_ = 0;
  }
  itemlist_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientReqShopInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CountryPackage.CountryShopItem itemlist = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_itemlist:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_itemlist()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_itemlist;
        if (input->ExpectTag(16)) goto parse_contribute;
        break;
      }

      // optional int32 contribute = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientReqShopInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CountryPackage.CountryShopItem itemlist = 1;
  for (int i = 0; i < this->itemlist_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->itemlist(i), output);
  }

  // optional int32 contribute = 2;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->contribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientReqShopInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CountryPackage.CountryShopItem itemlist = 1;
  for (int i = 0; i < this->itemlist_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->itemlist(i), target);
  }

  // optional int32 contribute = 2;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->contribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientReqShopInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    // optional int32 contribute = 2;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }

  }
  // repeated .CountryPackage.CountryShopItem itemlist = 1;
  total_size += 1 * this->itemlist_size();
  for (int i = 0; i < this->itemlist_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->itemlist(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientReqShopInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientReqShopInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientReqShopInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientReqShopInfo::MergeFrom(const AckClientReqShopInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  itemlist_.MergeFrom(from.itemlist_);
  if (from._has_bits_[1 / 32] & (0xffu << (1 % 32))) {
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientReqShopInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientReqShopInfo::CopyFrom(const AckClientReqShopInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientReqShopInfo::IsInitialized() const {

  for (int i = 0; i < itemlist_size(); i++) {
    if (!this->itemlist(i).IsInitialized()) return false;
  }
  return true;
}

void AckClientReqShopInfo::Swap(AckClientReqShopInfo* other) {
  if (other != this) {
    itemlist_.Swap(&other->itemlist_);
    std::swap(contribute_, other->contribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientReqShopInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientReqShopInfo_descriptor_;
  metadata.reflection = AckClientReqShopInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryShopItem::kIdFieldNumber;
const int CountryShopItem::kCountFieldNumber;
#endif  // !_MSC_VER

CountryShopItem::CountryShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryShopItem::InitAsDefaultInstance() {
}

CountryShopItem::CountryShopItem(const CountryShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryShopItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryShopItem::~CountryShopItem() {
  SharedDtor();
}

void CountryShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryShopItem_descriptor_;
}

const CountryShopItem& CountryShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

CountryShopItem* CountryShopItem::default_instance_ = NULL;

CountryShopItem* CountryShopItem::New() const {
  return new CountryShopItem;
}

void CountryShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryShopItem::MergeFrom(const CountryShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryShopItem::CopyFrom(const CountryShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryShopItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountryShopItem::Swap(CountryShopItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryShopItem_descriptor_;
  metadata.reflection = CountryShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqBuyShopItem::kIdFieldNumber;
const int ClientReqBuyShopItem::kCountFieldNumber;
#endif  // !_MSC_VER

ClientReqBuyShopItem::ClientReqBuyShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqBuyShopItem::InitAsDefaultInstance() {
}

ClientReqBuyShopItem::ClientReqBuyShopItem(const ClientReqBuyShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqBuyShopItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  count_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqBuyShopItem::~ClientReqBuyShopItem() {
  SharedDtor();
}

void ClientReqBuyShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqBuyShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqBuyShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqBuyShopItem_descriptor_;
}

const ClientReqBuyShopItem& ClientReqBuyShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

ClientReqBuyShopItem* ClientReqBuyShopItem::default_instance_ = NULL;

ClientReqBuyShopItem* ClientReqBuyShopItem::New() const {
  return new ClientReqBuyShopItem;
}

void ClientReqBuyShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    count_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqBuyShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_count;
        break;
      }

      // optional int32 count = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqBuyShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 count = 2;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->count(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqBuyShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 count = 2;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->count(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqBuyShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 count = 2;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqBuyShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqBuyShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqBuyShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqBuyShopItem::MergeFrom(const ClientReqBuyShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqBuyShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqBuyShopItem::CopyFrom(const ClientReqBuyShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqBuyShopItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqBuyShopItem::Swap(ClientReqBuyShopItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqBuyShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqBuyShopItem_descriptor_;
  metadata.reflection = ClientReqBuyShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClientReqBuyShopItem::kSuccessFieldNumber;
const int AckClientReqBuyShopItem::kIdFieldNumber;
const int AckClientReqBuyShopItem::kCountFieldNumber;
const int AckClientReqBuyShopItem::kContributeFieldNumber;
#endif  // !_MSC_VER

AckClientReqBuyShopItem::AckClientReqBuyShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientReqBuyShopItem::InitAsDefaultInstance() {
}

AckClientReqBuyShopItem::AckClientReqBuyShopItem(const AckClientReqBuyShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientReqBuyShopItem::SharedCtor() {
  _cached_size_ = 0;
  success_ = 0;
  id_ = 0;
  count_ = 0;
  contribute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientReqBuyShopItem::~AckClientReqBuyShopItem() {
  SharedDtor();
}

void AckClientReqBuyShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckClientReqBuyShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientReqBuyShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientReqBuyShopItem_descriptor_;
}

const AckClientReqBuyShopItem& AckClientReqBuyShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

AckClientReqBuyShopItem* AckClientReqBuyShopItem::default_instance_ = NULL;

AckClientReqBuyShopItem* AckClientReqBuyShopItem::New() const {
  return new AckClientReqBuyShopItem;
}

void AckClientReqBuyShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    success_ = 0;
    id_ = 0;
    count_ = 0;
    contribute_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientReqBuyShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 success = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &success_)));
          set_has_success();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_id;
        break;
      }

      // optional int32 id = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_count;
        break;
      }

      // optional int32 count = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_count:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &count_)));
          set_has_count();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_contribute;
        break;
      }

      // optional int32 contribute = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientReqBuyShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 success = 1;
  if (has_success()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->success(), output);
  }

  // optional int32 id = 2;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->id(), output);
  }

  // optional int32 count = 3;
  if (has_count()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->count(), output);
  }

  // optional int32 contribute = 4;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->contribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientReqBuyShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 success = 1;
  if (has_success()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->success(), target);
  }

  // optional int32 id = 2;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->id(), target);
  }

  // optional int32 count = 3;
  if (has_count()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->count(), target);
  }

  // optional int32 contribute = 4;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->contribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientReqBuyShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 success = 1;
    if (has_success()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->success());
    }

    // optional int32 id = 2;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 count = 3;
    if (has_count()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->count());
    }

    // optional int32 contribute = 4;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientReqBuyShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientReqBuyShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientReqBuyShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientReqBuyShopItem::MergeFrom(const AckClientReqBuyShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_success()) {
      set_success(from.success());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_count()) {
      set_count(from.count());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientReqBuyShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientReqBuyShopItem::CopyFrom(const AckClientReqBuyShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientReqBuyShopItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckClientReqBuyShopItem::Swap(AckClientReqBuyShopItem* other) {
  if (other != this) {
    std::swap(success_, other->success_);
    std::swap(id_, other->id_);
    std::swap(count_, other->count_);
    std::swap(contribute_, other->contribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientReqBuyShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientReqBuyShopItem_descriptor_;
  metadata.reflection = AckClientReqBuyShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int GSReqWSContribute::kCharFieldNumber;
const int GSReqWSContribute::kContryFieldNumber;
const int GSReqWSContribute::kIdFieldNumber;
const int GSReqWSContribute::kNumFieldNumber;
const int GSReqWSContribute::kMoneyFieldNumber;
const int GSReqWSContribute::kContributeFieldNumber;
#endif  // !_MSC_VER

GSReqWSContribute::GSReqWSContribute()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void GSReqWSContribute::InitAsDefaultInstance() {
}

GSReqWSContribute::GSReqWSContribute(const GSReqWSContribute& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void GSReqWSContribute::SharedCtor() {
  _cached_size_ = 0;
  char__ = GOOGLE_LONGLONG(0);
  contry_ = 0;
  id_ = 0;
  num_ = 0;
  money_ = GOOGLE_LONGLONG(0);
  contribute_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

GSReqWSContribute::~GSReqWSContribute() {
  SharedDtor();
}

void GSReqWSContribute::SharedDtor() {
  if (this != default_instance_) {
  }
}

void GSReqWSContribute::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* GSReqWSContribute::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return GSReqWSContribute_descriptor_;
}

const GSReqWSContribute& GSReqWSContribute::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

GSReqWSContribute* GSReqWSContribute::default_instance_ = NULL;

GSReqWSContribute* GSReqWSContribute::New() const {
  return new GSReqWSContribute;
}

void GSReqWSContribute::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    char__ = GOOGLE_LONGLONG(0);
    contry_ = 0;
    id_ = 0;
    num_ = 0;
    money_ = GOOGLE_LONGLONG(0);
    contribute_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool GSReqWSContribute::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 char = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &char__)));
          set_has_char_();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_contry;
        break;
      }

      // optional int32 contry = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contry:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contry_)));
          set_has_contry();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_id;
        break;
      }

      // optional int32 id = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_id:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_num;
        break;
      }

      // optional int32 num = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_num:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &num_)));
          set_has_num();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_money;
        break;
      }

      // optional int64 money = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_money:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &money_)));
          set_has_money();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(48)) goto parse_contribute;
        break;
      }

      // optional int32 contribute = 6;
      case 6: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_contribute:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &contribute_)));
          set_has_contribute();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void GSReqWSContribute::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 char = 1;
  if (has_char_()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->char_(), output);
  }

  // optional int32 contry = 2;
  if (has_contry()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->contry(), output);
  }

  // optional int32 id = 3;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->id(), output);
  }

  // optional int32 num = 4;
  if (has_num()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(4, this->num(), output);
  }

  // optional int64 money = 5;
  if (has_money()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(5, this->money(), output);
  }

  // optional int32 contribute = 6;
  if (has_contribute()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(6, this->contribute(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* GSReqWSContribute::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 char = 1;
  if (has_char_()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->char_(), target);
  }

  // optional int32 contry = 2;
  if (has_contry()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->contry(), target);
  }

  // optional int32 id = 3;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->id(), target);
  }

  // optional int32 num = 4;
  if (has_num()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(4, this->num(), target);
  }

  // optional int64 money = 5;
  if (has_money()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(5, this->money(), target);
  }

  // optional int32 contribute = 6;
  if (has_contribute()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(6, this->contribute(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int GSReqWSContribute::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 char = 1;
    if (has_char_()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->char_());
    }

    // optional int32 contry = 2;
    if (has_contry()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contry());
    }

    // optional int32 id = 3;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 num = 4;
    if (has_num()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->num());
    }

    // optional int64 money = 5;
    if (has_money()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->money());
    }

    // optional int32 contribute = 6;
    if (has_contribute()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->contribute());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void GSReqWSContribute::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const GSReqWSContribute* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const GSReqWSContribute*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void GSReqWSContribute::MergeFrom(const GSReqWSContribute& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_char_()) {
      set_char_(from.char_());
    }
    if (from.has_contry()) {
      set_contry(from.contry());
    }
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_num()) {
      set_num(from.num());
    }
    if (from.has_money()) {
      set_money(from.money());
    }
    if (from.has_contribute()) {
      set_contribute(from.contribute());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void GSReqWSContribute::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GSReqWSContribute::CopyFrom(const GSReqWSContribute& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GSReqWSContribute::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void GSReqWSContribute::Swap(GSReqWSContribute* other) {
  if (other != this) {
    std::swap(char__, other->char__);
    std::swap(contry_, other->contry_);
    std::swap(id_, other->id_);
    std::swap(num_, other->num_);
    std::swap(money_, other->money_);
    std::swap(contribute_, other->contribute_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata GSReqWSContribute::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = GSReqWSContribute_descriptor_;
  metadata.reflection = GSReqWSContribute_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSNoticeGSCountryLiveUp::kCountryFieldNumber;
const int WSNoticeGSCountryLiveUp::kLevelFieldNumber;
#endif  // !_MSC_VER

WSNoticeGSCountryLiveUp::WSNoticeGSCountryLiveUp()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSNoticeGSCountryLiveUp::InitAsDefaultInstance() {
}

WSNoticeGSCountryLiveUp::WSNoticeGSCountryLiveUp(const WSNoticeGSCountryLiveUp& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSNoticeGSCountryLiveUp::SharedCtor() {
  _cached_size_ = 0;
  country_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSNoticeGSCountryLiveUp::~WSNoticeGSCountryLiveUp() {
  SharedDtor();
}

void WSNoticeGSCountryLiveUp::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSNoticeGSCountryLiveUp::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSNoticeGSCountryLiveUp::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSNoticeGSCountryLiveUp_descriptor_;
}

const WSNoticeGSCountryLiveUp& WSNoticeGSCountryLiveUp::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

WSNoticeGSCountryLiveUp* WSNoticeGSCountryLiveUp::default_instance_ = NULL;

WSNoticeGSCountryLiveUp* WSNoticeGSCountryLiveUp::New() const {
  return new WSNoticeGSCountryLiveUp;
}

void WSNoticeGSCountryLiveUp::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSNoticeGSCountryLiveUp::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSNoticeGSCountryLiveUp::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->country(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSNoticeGSCountryLiveUp::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 country = 1;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->country(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSNoticeGSCountryLiveUp::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSNoticeGSCountryLiveUp::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSNoticeGSCountryLiveUp* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSNoticeGSCountryLiveUp*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSNoticeGSCountryLiveUp::MergeFrom(const WSNoticeGSCountryLiveUp& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSNoticeGSCountryLiveUp::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSNoticeGSCountryLiveUp::CopyFrom(const WSNoticeGSCountryLiveUp& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSNoticeGSCountryLiveUp::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSNoticeGSCountryLiveUp::Swap(WSNoticeGSCountryLiveUp* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSNoticeGSCountryLiveUp::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSNoticeGSCountryLiveUp_descriptor_;
  metadata.reflection = WSNoticeGSCountryLiveUp_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WStoGsCountryInfo::kCountryFieldNumber;
#endif  // !_MSC_VER

WStoGsCountryInfo::WStoGsCountryInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WStoGsCountryInfo::InitAsDefaultInstance() {
}

WStoGsCountryInfo::WStoGsCountryInfo(const WStoGsCountryInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WStoGsCountryInfo::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WStoGsCountryInfo::~WStoGsCountryInfo() {
  SharedDtor();
}

void WStoGsCountryInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WStoGsCountryInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WStoGsCountryInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WStoGsCountryInfo_descriptor_;
}

const WStoGsCountryInfo& WStoGsCountryInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

WStoGsCountryInfo* WStoGsCountryInfo::default_instance_ = NULL;

WStoGsCountryInfo* WStoGsCountryInfo::New() const {
  return new WStoGsCountryInfo;
}

void WStoGsCountryInfo::Clear() {
  country_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WStoGsCountryInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CountryPackage.CountryGrade country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_country:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_country()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_country;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WStoGsCountryInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CountryPackage.CountryGrade country = 1;
  for (int i = 0; i < this->country_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->country(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WStoGsCountryInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CountryPackage.CountryGrade country = 1;
  for (int i = 0; i < this->country_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->country(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WStoGsCountryInfo::ByteSize() const {
  int total_size = 0;

  // repeated .CountryPackage.CountryGrade country = 1;
  total_size += 1 * this->country_size();
  for (int i = 0; i < this->country_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->country(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WStoGsCountryInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WStoGsCountryInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WStoGsCountryInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WStoGsCountryInfo::MergeFrom(const WStoGsCountryInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  country_.MergeFrom(from.country_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WStoGsCountryInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WStoGsCountryInfo::CopyFrom(const WStoGsCountryInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WStoGsCountryInfo::IsInitialized() const {

  for (int i = 0; i < country_size(); i++) {
    if (!this->country(i).IsInitialized()) return false;
  }
  return true;
}

void WStoGsCountryInfo::Swap(WStoGsCountryInfo* other) {
  if (other != this) {
    country_.Swap(&other->country_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WStoGsCountryInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WStoGsCountryInfo_descriptor_;
  metadata.reflection = WStoGsCountryInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int CountryGrade::kCountryFieldNumber;
const int CountryGrade::kLevelFieldNumber;
#endif  // !_MSC_VER

CountryGrade::CountryGrade()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void CountryGrade::InitAsDefaultInstance() {
}

CountryGrade::CountryGrade(const CountryGrade& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void CountryGrade::SharedCtor() {
  _cached_size_ = 0;
  country_ = 0;
  level_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

CountryGrade::~CountryGrade() {
  SharedDtor();
}

void CountryGrade::SharedDtor() {
  if (this != default_instance_) {
  }
}

void CountryGrade::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* CountryGrade::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return CountryGrade_descriptor_;
}

const CountryGrade& CountryGrade::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

CountryGrade* CountryGrade::default_instance_ = NULL;

CountryGrade* CountryGrade::New() const {
  return new CountryGrade;
}

void CountryGrade::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    country_ = 0;
    level_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool CountryGrade::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 country = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &country_)));
          set_has_country();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_level;
        break;
      }

      // optional int32 level = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_level:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &level_)));
          set_has_level();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void CountryGrade::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 country = 1;
  if (has_country()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->country(), output);
  }

  // optional int32 level = 2;
  if (has_level()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->level(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* CountryGrade::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 country = 1;
  if (has_country()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->country(), target);
  }

  // optional int32 level = 2;
  if (has_level()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->level(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int CountryGrade::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 country = 1;
    if (has_country()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->country());
    }

    // optional int32 level = 2;
    if (has_level()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->level());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void CountryGrade::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const CountryGrade* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const CountryGrade*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void CountryGrade::MergeFrom(const CountryGrade& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_country()) {
      set_country(from.country());
    }
    if (from.has_level()) {
      set_level(from.level());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void CountryGrade::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CountryGrade::CopyFrom(const CountryGrade& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CountryGrade::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void CountryGrade::Swap(CountryGrade* other) {
  if (other != this) {
    std::swap(country_, other->country_);
    std::swap(level_, other->level_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata CountryGrade::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = CountryGrade_descriptor_;
  metadata.reflection = CountryGrade_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBShopInfoList::kTimeFieldNumber;
const int DBShopInfoList::kItemFieldNumber;
#endif  // !_MSC_VER

DBShopInfoList::DBShopInfoList()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBShopInfoList::InitAsDefaultInstance() {
}

DBShopInfoList::DBShopInfoList(const DBShopInfoList& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBShopInfoList::SharedCtor() {
  _cached_size_ = 0;
  time_ = GOOGLE_LONGLONG(0);
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBShopInfoList::~DBShopInfoList() {
  SharedDtor();
}

void DBShopInfoList::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBShopInfoList::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBShopInfoList::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBShopInfoList_descriptor_;
}

const DBShopInfoList& DBShopInfoList::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

DBShopInfoList* DBShopInfoList::default_instance_ = NULL;

DBShopInfoList* DBShopInfoList::New() const {
  return new DBShopInfoList;
}

void DBShopInfoList::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    time_ = GOOGLE_LONGLONG(0);
  }
  item_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBShopInfoList::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 time = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        break;
      }

      // repeated .CountryPackage.DBShopItem item = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_item:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_item()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(18)) goto parse_item;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBShopInfoList::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 time = 1;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->time(), output);
  }

  // repeated .CountryPackage.DBShopItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      2, this->item(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBShopInfoList::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 time = 1;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->time(), target);
  }

  // repeated .CountryPackage.DBShopItem item = 2;
  for (int i = 0; i < this->item_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        2, this->item(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBShopInfoList::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 time = 1;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->time());
    }

  }
  // repeated .CountryPackage.DBShopItem item = 2;
  total_size += 1 * this->item_size();
  for (int i = 0; i < this->item_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->item(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBShopInfoList::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBShopInfoList* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBShopInfoList*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBShopInfoList::MergeFrom(const DBShopInfoList& from) {
  GOOGLE_CHECK_NE(&from, this);
  item_.MergeFrom(from.item_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBShopInfoList::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBShopInfoList::CopyFrom(const DBShopInfoList& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBShopInfoList::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  for (int i = 0; i < item_size(); i++) {
    if (!this->item(i).IsInitialized()) return false;
  }
  return true;
}

void DBShopInfoList::Swap(DBShopInfoList* other) {
  if (other != this) {
    std::swap(time_, other->time_);
    item_.Swap(&other->item_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBShopInfoList::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBShopInfoList_descriptor_;
  metadata.reflection = DBShopInfoList_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int DBShopItem::kIdFieldNumber;
const int DBShopItem::kNumsFieldNumber;
#endif  // !_MSC_VER

DBShopItem::DBShopItem()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void DBShopItem::InitAsDefaultInstance() {
}

DBShopItem::DBShopItem(const DBShopItem& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void DBShopItem::SharedCtor() {
  _cached_size_ = 0;
  id_ = 0;
  nums_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

DBShopItem::~DBShopItem() {
  SharedDtor();
}

void DBShopItem::SharedDtor() {
  if (this != default_instance_) {
  }
}

void DBShopItem::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* DBShopItem::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return DBShopItem_descriptor_;
}

const DBShopItem& DBShopItem::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

DBShopItem* DBShopItem::default_instance_ = NULL;

DBShopItem* DBShopItem::New() const {
  return new DBShopItem;
}

void DBShopItem::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = 0;
    nums_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool DBShopItem::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_nums;
        break;
      }

      // optional int32 nums = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_nums:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &nums_)));
          set_has_nums();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void DBShopItem::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->id(), output);
  }

  // optional int32 nums = 2;
  if (has_nums()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->nums(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* DBShopItem::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->id(), target);
  }

  // optional int32 nums = 2;
  if (has_nums()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->nums(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int DBShopItem::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->id());
    }

    // optional int32 nums = 2;
    if (has_nums()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->nums());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void DBShopItem::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const DBShopItem* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const DBShopItem*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void DBShopItem::MergeFrom(const DBShopItem& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_nums()) {
      set_nums(from.nums());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void DBShopItem::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void DBShopItem::CopyFrom(const DBShopItem& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool DBShopItem::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void DBShopItem::Swap(DBShopItem* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(nums_, other->nums_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata DBShopItem::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = DBShopItem_descriptor_;
  metadata.reflection = DBShopItem_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeekUpdate::kListFieldNumber;
#endif  // !_MSC_VER

WeekUpdate::WeekUpdate()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeekUpdate::InitAsDefaultInstance() {
}

WeekUpdate::WeekUpdate(const WeekUpdate& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeekUpdate::SharedCtor() {
  _cached_size_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeekUpdate::~WeekUpdate() {
  SharedDtor();
}

void WeekUpdate::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeekUpdate::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeekUpdate::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeekUpdate_descriptor_;
}

const WeekUpdate& WeekUpdate::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

WeekUpdate* WeekUpdate::default_instance_ = NULL;

WeekUpdate* WeekUpdate::New() const {
  return new WeekUpdate;
}

void WeekUpdate::Clear() {
  list_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeekUpdate::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // repeated .CountryPackage.WeekJobs list = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_LENGTH_DELIMITED) {
         parse_list:
          DO_(::google::protobuf::internal::WireFormatLite::ReadMessageNoVirtual(
                input, add_list()));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(10)) goto parse_list;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeekUpdate::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // repeated .CountryPackage.WeekJobs list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteMessageMaybeToArray(
      1, this->list(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeekUpdate::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // repeated .CountryPackage.WeekJobs list = 1;
  for (int i = 0; i < this->list_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteMessageNoVirtualToArray(
        1, this->list(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeekUpdate::ByteSize() const {
  int total_size = 0;

  // repeated .CountryPackage.WeekJobs list = 1;
  total_size += 1 * this->list_size();
  for (int i = 0; i < this->list_size(); i++) {
    total_size +=
      ::google::protobuf::internal::WireFormatLite::MessageSizeNoVirtual(
        this->list(i));
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeekUpdate::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeekUpdate* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeekUpdate*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeekUpdate::MergeFrom(const WeekUpdate& from) {
  GOOGLE_CHECK_NE(&from, this);
  list_.MergeFrom(from.list_);
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeekUpdate::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeekUpdate::CopyFrom(const WeekUpdate& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeekUpdate::IsInitialized() const {

  for (int i = 0; i < list_size(); i++) {
    if (!this->list(i).IsInitialized()) return false;
  }
  return true;
}

void WeekUpdate::Swap(WeekUpdate* other) {
  if (other != this) {
    list_.Swap(&other->list_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeekUpdate::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeekUpdate_descriptor_;
  metadata.reflection = WeekUpdate_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WeekJobs::kIdFieldNumber;
const int WeekJobs::kJobFieldNumber;
#endif  // !_MSC_VER

WeekJobs::WeekJobs()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WeekJobs::InitAsDefaultInstance() {
}

WeekJobs::WeekJobs(const WeekJobs& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WeekJobs::SharedCtor() {
  _cached_size_ = 0;
  id_ = GOOGLE_LONGLONG(0);
  job_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WeekJobs::~WeekJobs() {
  SharedDtor();
}

void WeekJobs::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WeekJobs::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WeekJobs::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WeekJobs_descriptor_;
}

const WeekJobs& WeekJobs::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

WeekJobs* WeekJobs::default_instance_ = NULL;

WeekJobs* WeekJobs::New() const {
  return new WeekJobs;
}

void WeekJobs::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    id_ = GOOGLE_LONGLONG(0);
    job_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WeekJobs::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 id = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &id_)));
          set_has_id();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_job;
        break;
      }

      // optional int32 job = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_job:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &job_)));
          set_has_job();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WeekJobs::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 id = 1;
  if (has_id()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->id(), output);
  }

  // optional int32 job = 2;
  if (has_job()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->job(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WeekJobs::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 id = 1;
  if (has_id()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->id(), target);
  }

  // optional int32 job = 2;
  if (has_job()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->job(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WeekJobs::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 id = 1;
    if (has_id()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->id());
    }

    // optional int32 job = 2;
    if (has_job()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->job());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WeekJobs::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WeekJobs* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WeekJobs*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WeekJobs::MergeFrom(const WeekJobs& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_id()) {
      set_id(from.id());
    }
    if (from.has_job()) {
      set_job(from.job());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WeekJobs::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WeekJobs::CopyFrom(const WeekJobs& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WeekJobs::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WeekJobs::Swap(WeekJobs* other) {
  if (other != this) {
    std::swap(id_, other->id_);
    std::swap(job_, other->job_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WeekJobs::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WeekJobs_descriptor_;
  metadata.reflection = WeekJobs_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WStoGSAttrChange::kCharidFieldNumber;
const int WStoGSAttrChange::kAttridFieldNumber;
const int WStoGSAttrChange::kValueFieldNumber;
#endif  // !_MSC_VER

WStoGSAttrChange::WStoGSAttrChange()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WStoGSAttrChange::InitAsDefaultInstance() {
}

WStoGSAttrChange::WStoGSAttrChange(const WStoGSAttrChange& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WStoGSAttrChange::SharedCtor() {
  _cached_size_ = 0;
  charid_ = GOOGLE_LONGLONG(0);
  attrid_ = 0;
  value_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WStoGSAttrChange::~WStoGSAttrChange() {
  SharedDtor();
}

void WStoGSAttrChange::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WStoGSAttrChange::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WStoGSAttrChange::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WStoGSAttrChange_descriptor_;
}

const WStoGSAttrChange& WStoGSAttrChange::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

WStoGSAttrChange* WStoGSAttrChange::default_instance_ = NULL;

WStoGSAttrChange* WStoGSAttrChange::New() const {
  return new WStoGSAttrChange;
}

void WStoGSAttrChange::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    charid_ = GOOGLE_LONGLONG(0);
    attrid_ = 0;
    value_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WStoGSAttrChange::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int64 charid = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, &charid_)));
          set_has_charid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_attrid;
        break;
      }

      // optional int32 attrid = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_attrid:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &attrid_)));
          set_has_attrid();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_value;
        break;
      }

      // optional int32 value = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_value:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &value_)));
          set_has_value();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WStoGSAttrChange::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int64 charid = 1;
  if (has_charid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(1, this->charid(), output);
  }

  // optional int32 attrid = 2;
  if (has_attrid()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->attrid(), output);
  }

  // optional int32 value = 3;
  if (has_value()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->value(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WStoGSAttrChange::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int64 charid = 1;
  if (has_charid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt64ToArray(1, this->charid(), target);
  }

  // optional int32 attrid = 2;
  if (has_attrid()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->attrid(), target);
  }

  // optional int32 value = 3;
  if (has_value()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->value(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WStoGSAttrChange::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int64 charid = 1;
    if (has_charid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int64Size(
          this->charid());
    }

    // optional int32 attrid = 2;
    if (has_attrid()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->attrid());
    }

    // optional int32 value = 3;
    if (has_value()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->value());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WStoGSAttrChange::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WStoGSAttrChange* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WStoGSAttrChange*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WStoGSAttrChange::MergeFrom(const WStoGSAttrChange& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_charid()) {
      set_charid(from.charid());
    }
    if (from.has_attrid()) {
      set_attrid(from.attrid());
    }
    if (from.has_value()) {
      set_value(from.value());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WStoGSAttrChange::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WStoGSAttrChange::CopyFrom(const WStoGSAttrChange& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WStoGSAttrChange::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WStoGSAttrChange::Swap(WStoGSAttrChange* other) {
  if (other != this) {
    std::swap(charid_, other->charid_);
    std::swap(attrid_, other->attrid_);
    std::swap(value_, other->value_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WStoGSAttrChange::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WStoGSAttrChange_descriptor_;
  metadata.reflection = WStoGSAttrChange_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToGMCountryBattle::kWarTypeFieldNumber;
const int WSToGMCountryBattle::kFlagFieldNumber;
const int WSToGMCountryBattle::kCharIDFieldNumber;
#endif  // !_MSC_VER

WSToGMCountryBattle::WSToGMCountryBattle()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToGMCountryBattle::InitAsDefaultInstance() {
}

WSToGMCountryBattle::WSToGMCountryBattle(const WSToGMCountryBattle& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToGMCountryBattle::SharedCtor() {
  _cached_size_ = 0;
  wartype_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToGMCountryBattle::~WSToGMCountryBattle() {
  SharedDtor();
}

void WSToGMCountryBattle::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToGMCountryBattle::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToGMCountryBattle::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToGMCountryBattle_descriptor_;
}

const WSToGMCountryBattle& WSToGMCountryBattle::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Country_2fCountry_2eproto();
  return *default_instance_;
}

WSToGMCountryBattle* WSToGMCountryBattle::default_instance_ = NULL;

WSToGMCountryBattle* WSToGMCountryBattle::New() const {
  return new WSToGMCountryBattle;
}

void WSToGMCountryBattle::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    wartype_ = 0;
    flag_ = false;
  }
  charid_.Clear();
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToGMCountryBattle::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 warType = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &wartype_)));
          set_has_wartype();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_flag;
        break;
      }

      // required bool flag = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_flag:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        break;
      }

      // repeated int64 charID = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_charID:
          DO_((::google::protobuf::internal::WireFormatLite::ReadRepeatedPrimitive<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 1, 24, input, this->mutable_charid())));
        } else if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag)
                   == ::google::protobuf::internal::WireFormatLite::
                      WIRETYPE_LENGTH_DELIMITED) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPackedPrimitiveNoInline<
                   ::google::protobuf::int64, ::google::protobuf::internal::WireFormatLite::TYPE_INT64>(
                 input, this->mutable_charid())));
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_charID;
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToGMCountryBattle::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 warType = 1;
  if (has_wartype()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->wartype(), output);
  }

  // required bool flag = 2;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(2, this->flag(), output);
  }

  // repeated int64 charID = 3;
  for (int i = 0; i < this->charid_size(); i++) {
    ::google::protobuf::internal::WireFormatLite::WriteInt64(
      3, this->charid(i), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToGMCountryBattle::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 warType = 1;
  if (has_wartype()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->wartype(), target);
  }

  // required bool flag = 2;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(2, this->flag(), target);
  }

  // repeated int64 charID = 3;
  for (int i = 0; i < this->charid_size(); i++) {
    target = ::google::protobuf::internal::WireFormatLite::
      WriteInt64ToArray(3, this->charid(i), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToGMCountryBattle::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 warType = 1;
    if (has_wartype()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->wartype());
    }

    // required bool flag = 2;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  // repeated int64 charID = 3;
  {
    int data_size = 0;
    for (int i = 0; i < this->charid_size(); i++) {
      data_size += ::google::protobuf::internal::WireFormatLite::
        Int64Size(this->charid(i));
    }
    total_size += 1 * this->charid_size() + data_size;
  }

  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToGMCountryBattle::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToGMCountryBattle* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToGMCountryBattle*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToGMCountryBattle::MergeFrom(const WSToGMCountryBattle& from) {
  GOOGLE_CHECK_NE(&from, this);
  charid_.MergeFrom(from.charid_);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_wartype()) {
      set_wartype(from.wartype());
    }
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToGMCountryBattle::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToGMCountryBattle::CopyFrom(const WSToGMCountryBattle& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToGMCountryBattle::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000003) != 0x00000003) return false;

  return true;
}

void WSToGMCountryBattle::Swap(WSToGMCountryBattle* other) {
  if (other != this) {
    std::swap(wartype_, other->wartype_);
    std::swap(flag_, other->flag_);
    charid_.Swap(&other->charid_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToGMCountryBattle::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToGMCountryBattle_descriptor_;
  metadata.reflection = WSToGMCountryBattle_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace CountryPackage

// @@protoc_insertion_point(global_scope)
