// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Activity/ProtectKing.proto

#define INTERNAL_SUPPRESS_PROTOBUF_FIELD_DEPRECATION
#include "Activity/ProtectKing.pb.h"

#include <algorithm>

#include <google/protobuf/stubs/common.h>
#include <google/protobuf/stubs/once.h>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/wire_format_lite_inl.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)

namespace ActivityKing {

namespace {

const ::google::protobuf::Descriptor* AckClientKingInfo_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientKingInfo_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClientRelush_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientRelush_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckClientFinish_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckClientFinish_reflection_ = NULL;
const ::google::protobuf::Descriptor* ClientReqGetReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ClientReqGetReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* AckGetReward_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  AckGetReward_reflection_ = NULL;
const ::google::protobuf::Descriptor* ToClientProtectResult_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  ToClientProtectResult_reflection_ = NULL;
const ::google::protobuf::Descriptor* WSToGMDoubleProtectKing_descriptor_ = NULL;
const ::google::protobuf::internal::GeneratedMessageReflection*
  WSToGMDoubleProtectKing_reflection_ = NULL;

}  // namespace


void protobuf_AssignDesc_Activity_2fProtectKing_2eproto() {
  protobuf_AddDesc_Activity_2fProtectKing_2eproto();
  const ::google::protobuf::FileDescriptor* file =
    ::google::protobuf::DescriptorPool::generated_pool()->FindFileByName(
      "Activity/ProtectKing.proto");
  GOOGLE_CHECK(file != NULL);
  AckClientKingInfo_descriptor_ = file->message_type(0);
  static const int AckClientKingInfo_offsets_[5] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientKingInfo, node_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientKingInfo, relush_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientKingInfo, time_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientKingInfo, reward_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientKingInfo, maxnode_),
  };
  AckClientKingInfo_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientKingInfo_descriptor_,
      AckClientKingInfo::default_instance_,
      AckClientKingInfo_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientKingInfo, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientKingInfo, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientKingInfo));
  AckClientRelush_descriptor_ = file->message_type(1);
  static const int AckClientRelush_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientRelush, ret_),
  };
  AckClientRelush_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientRelush_descriptor_,
      AckClientRelush::default_instance_,
      AckClientRelush_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientRelush, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientRelush, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientRelush));
  AckClientFinish_descriptor_ = file->message_type(2);
  static const int AckClientFinish_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientFinish, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientFinish, time_),
  };
  AckClientFinish_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckClientFinish_descriptor_,
      AckClientFinish::default_instance_,
      AckClientFinish_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientFinish, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckClientFinish, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckClientFinish));
  ClientReqGetReward_descriptor_ = file->message_type(3);
  static const int ClientReqGetReward_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqGetReward, node_),
  };
  ClientReqGetReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ClientReqGetReward_descriptor_,
      ClientReqGetReward::default_instance_,
      ClientReqGetReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqGetReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ClientReqGetReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ClientReqGetReward));
  AckGetReward_descriptor_ = file->message_type(4);
  static const int AckGetReward_offsets_[2] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetReward, ret_),
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetReward, node_),
  };
  AckGetReward_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      AckGetReward_descriptor_,
      AckGetReward::default_instance_,
      AckGetReward_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetReward, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(AckGetReward, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(AckGetReward));
  ToClientProtectResult_descriptor_ = file->message_type(5);
  static const int ToClientProtectResult_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientProtectResult, ret_),
  };
  ToClientProtectResult_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      ToClientProtectResult_descriptor_,
      ToClientProtectResult::default_instance_,
      ToClientProtectResult_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientProtectResult, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(ToClientProtectResult, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(ToClientProtectResult));
  WSToGMDoubleProtectKing_descriptor_ = file->message_type(6);
  static const int WSToGMDoubleProtectKing_offsets_[1] = {
    GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMDoubleProtectKing, flag_),
  };
  WSToGMDoubleProtectKing_reflection_ =
    new ::google::protobuf::internal::GeneratedMessageReflection(
      WSToGMDoubleProtectKing_descriptor_,
      WSToGMDoubleProtectKing::default_instance_,
      WSToGMDoubleProtectKing_offsets_,
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMDoubleProtectKing, _has_bits_[0]),
      GOOGLE_PROTOBUF_GENERATED_MESSAGE_FIELD_OFFSET(WSToGMDoubleProtectKing, _unknown_fields_),
      -1,
      ::google::protobuf::DescriptorPool::generated_pool(),
      ::google::protobuf::MessageFactory::generated_factory(),
      sizeof(WSToGMDoubleProtectKing));
}

namespace {

GOOGLE_PROTOBUF_DECLARE_ONCE(protobuf_AssignDescriptors_once_);
inline void protobuf_AssignDescriptorsOnce() {
  ::google::protobuf::GoogleOnceInit(&protobuf_AssignDescriptors_once_,
                 &protobuf_AssignDesc_Activity_2fProtectKing_2eproto);
}

void protobuf_RegisterTypes(const ::std::string&) {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientKingInfo_descriptor_, &AckClientKingInfo::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientRelush_descriptor_, &AckClientRelush::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckClientFinish_descriptor_, &AckClientFinish::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ClientReqGetReward_descriptor_, &ClientReqGetReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    AckGetReward_descriptor_, &AckGetReward::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    ToClientProtectResult_descriptor_, &ToClientProtectResult::default_instance());
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedMessage(
    WSToGMDoubleProtectKing_descriptor_, &WSToGMDoubleProtectKing::default_instance());
}

}  // namespace

void protobuf_ShutdownFile_Activity_2fProtectKing_2eproto() {
  delete AckClientKingInfo::default_instance_;
  delete AckClientKingInfo_reflection_;
  delete AckClientRelush::default_instance_;
  delete AckClientRelush_reflection_;
  delete AckClientFinish::default_instance_;
  delete AckClientFinish_reflection_;
  delete ClientReqGetReward::default_instance_;
  delete ClientReqGetReward_reflection_;
  delete AckGetReward::default_instance_;
  delete AckGetReward_reflection_;
  delete ToClientProtectResult::default_instance_;
  delete ToClientProtectResult_reflection_;
  delete WSToGMDoubleProtectKing::default_instance_;
  delete WSToGMDoubleProtectKing_reflection_;
}

void protobuf_AddDesc_Activity_2fProtectKing_2eproto() {
  static bool already_here = false;
  if (already_here) return;
  already_here = true;
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  ::google::protobuf::DescriptorPool::InternalAddGeneratedFile(
    "\n\032Activity/ProtectKing.proto\022\014ActivityKi"
    "ng\"`\n\021AckClientKingInfo\022\014\n\004node\030\001 \002(\005\022\016\n"
    "\006relush\030\002 \001(\005\022\014\n\004time\030\003 \001(\005\022\016\n\006reward\030\004 "
    "\001(\r\022\017\n\007maxnode\030\005 \001(\005\"\036\n\017AckClientRelush\022"
    "\013\n\003ret\030\001 \002(\005\",\n\017AckClientFinish\022\013\n\003ret\030\001"
    " \002(\005\022\014\n\004time\030\002 \001(\005\"\"\n\022ClientReqGetReward"
    "\022\014\n\004node\030\001 \002(\005\")\n\014AckGetReward\022\013\n\003ret\030\001 "
    "\002(\005\022\014\n\004node\030\002 \001(\005\"$\n\025ToClientProtectResu"
    "lt\022\013\n\003ret\030\001 \002(\010\"\'\n\027WSToGMDoubleProtectKi"
    "ng\022\014\n\004flag\030\001 \002(\010", 376);
  ::google::protobuf::MessageFactory::InternalRegisterGeneratedFile(
    "Activity/ProtectKing.proto", &protobuf_RegisterTypes);
  AckClientKingInfo::default_instance_ = new AckClientKingInfo();
  AckClientRelush::default_instance_ = new AckClientRelush();
  AckClientFinish::default_instance_ = new AckClientFinish();
  ClientReqGetReward::default_instance_ = new ClientReqGetReward();
  AckGetReward::default_instance_ = new AckGetReward();
  ToClientProtectResult::default_instance_ = new ToClientProtectResult();
  WSToGMDoubleProtectKing::default_instance_ = new WSToGMDoubleProtectKing();
  AckClientKingInfo::default_instance_->InitAsDefaultInstance();
  AckClientRelush::default_instance_->InitAsDefaultInstance();
  AckClientFinish::default_instance_->InitAsDefaultInstance();
  ClientReqGetReward::default_instance_->InitAsDefaultInstance();
  AckGetReward::default_instance_->InitAsDefaultInstance();
  ToClientProtectResult::default_instance_->InitAsDefaultInstance();
  WSToGMDoubleProtectKing::default_instance_->InitAsDefaultInstance();
  ::google::protobuf::internal::OnShutdown(&protobuf_ShutdownFile_Activity_2fProtectKing_2eproto);
}

// Force AddDescriptors() to be called at static initialization time.
struct StaticDescriptorInitializer_Activity_2fProtectKing_2eproto {
  StaticDescriptorInitializer_Activity_2fProtectKing_2eproto() {
    protobuf_AddDesc_Activity_2fProtectKing_2eproto();
  }
} static_descriptor_initializer_Activity_2fProtectKing_2eproto_;

// ===================================================================

#ifndef _MSC_VER
const int AckClientKingInfo::kNodeFieldNumber;
const int AckClientKingInfo::kRelushFieldNumber;
const int AckClientKingInfo::kTimeFieldNumber;
const int AckClientKingInfo::kRewardFieldNumber;
const int AckClientKingInfo::kMaxnodeFieldNumber;
#endif  // !_MSC_VER

AckClientKingInfo::AckClientKingInfo()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientKingInfo::InitAsDefaultInstance() {
}

AckClientKingInfo::AckClientKingInfo(const AckClientKingInfo& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientKingInfo::SharedCtor() {
  _cached_size_ = 0;
  node_ = 0;
  relush_ = 0;
  time_ = 0;
  reward_ = 0u;
  maxnode_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientKingInfo::~AckClientKingInfo() {
  SharedDtor();
}

void AckClientKingInfo::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckClientKingInfo::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientKingInfo::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientKingInfo_descriptor_;
}

const AckClientKingInfo& AckClientKingInfo::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fProtectKing_2eproto();
  return *default_instance_;
}

AckClientKingInfo* AckClientKingInfo::default_instance_ = NULL;

AckClientKingInfo* AckClientKingInfo::New() const {
  return new AckClientKingInfo;
}

void AckClientKingInfo::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_ = 0;
    relush_ = 0;
    time_ = 0;
    reward_ = 0u;
    maxnode_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientKingInfo::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_)));
          set_has_node();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_relush;
        break;
      }

      // optional int32 relush = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_relush:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &relush_)));
          set_has_relush();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(24)) goto parse_time;
        break;
      }

      // optional int32 time = 3;
      case 3: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(32)) goto parse_reward;
        break;
      }

      // optional uint32 reward = 4;
      case 4: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_reward:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::uint32, ::google::protobuf::internal::WireFormatLite::TYPE_UINT32>(
                 input, &reward_)));
          set_has_reward();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(40)) goto parse_maxnode;
        break;
      }

      // optional int32 maxnode = 5;
      case 5: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_maxnode:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &maxnode_)));
          set_has_maxnode();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientKingInfo::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node(), output);
  }

  // optional int32 relush = 2;
  if (has_relush()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->relush(), output);
  }

  // optional int32 time = 3;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(3, this->time(), output);
  }

  // optional uint32 reward = 4;
  if (has_reward()) {
    ::google::protobuf::internal::WireFormatLite::WriteUInt32(4, this->reward(), output);
  }

  // optional int32 maxnode = 5;
  if (has_maxnode()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(5, this->maxnode(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientKingInfo::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 node = 1;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node(), target);
  }

  // optional int32 relush = 2;
  if (has_relush()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->relush(), target);
  }

  // optional int32 time = 3;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(3, this->time(), target);
  }

  // optional uint32 reward = 4;
  if (has_reward()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteUInt32ToArray(4, this->reward(), target);
  }

  // optional int32 maxnode = 5;
  if (has_maxnode()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(5, this->maxnode(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientKingInfo::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node());
    }

    // optional int32 relush = 2;
    if (has_relush()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->relush());
    }

    // optional int32 time = 3;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

    // optional uint32 reward = 4;
    if (has_reward()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::UInt32Size(
          this->reward());
    }

    // optional int32 maxnode = 5;
    if (has_maxnode()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->maxnode());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientKingInfo::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientKingInfo* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientKingInfo*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientKingInfo::MergeFrom(const AckClientKingInfo& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      set_node(from.node());
    }
    if (from.has_relush()) {
      set_relush(from.relush());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
    if (from.has_reward()) {
      set_reward(from.reward());
    }
    if (from.has_maxnode()) {
      set_maxnode(from.maxnode());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientKingInfo::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientKingInfo::CopyFrom(const AckClientKingInfo& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientKingInfo::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckClientKingInfo::Swap(AckClientKingInfo* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(relush_, other->relush_);
    std::swap(time_, other->time_);
    std::swap(reward_, other->reward_);
    std::swap(maxnode_, other->maxnode_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientKingInfo::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientKingInfo_descriptor_;
  metadata.reflection = AckClientKingInfo_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClientRelush::kRetFieldNumber;
#endif  // !_MSC_VER

AckClientRelush::AckClientRelush()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientRelush::InitAsDefaultInstance() {
}

AckClientRelush::AckClientRelush(const AckClientRelush& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientRelush::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientRelush::~AckClientRelush() {
  SharedDtor();
}

void AckClientRelush::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckClientRelush::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientRelush::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientRelush_descriptor_;
}

const AckClientRelush& AckClientRelush::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fProtectKing_2eproto();
  return *default_instance_;
}

AckClientRelush* AckClientRelush::default_instance_ = NULL;

AckClientRelush* AckClientRelush::New() const {
  return new AckClientRelush;
}

void AckClientRelush::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientRelush::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientRelush::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientRelush::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientRelush::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientRelush::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientRelush* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientRelush*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientRelush::MergeFrom(const AckClientRelush& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientRelush::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientRelush::CopyFrom(const AckClientRelush& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientRelush::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckClientRelush::Swap(AckClientRelush* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientRelush::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientRelush_descriptor_;
  metadata.reflection = AckClientRelush_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckClientFinish::kRetFieldNumber;
const int AckClientFinish::kTimeFieldNumber;
#endif  // !_MSC_VER

AckClientFinish::AckClientFinish()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckClientFinish::InitAsDefaultInstance() {
}

AckClientFinish::AckClientFinish(const AckClientFinish& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckClientFinish::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  time_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckClientFinish::~AckClientFinish() {
  SharedDtor();
}

void AckClientFinish::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckClientFinish::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckClientFinish::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckClientFinish_descriptor_;
}

const AckClientFinish& AckClientFinish::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fProtectKing_2eproto();
  return *default_instance_;
}

AckClientFinish* AckClientFinish::default_instance_ = NULL;

AckClientFinish* AckClientFinish::New() const {
  return new AckClientFinish;
}

void AckClientFinish::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    time_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckClientFinish::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_time;
        break;
      }

      // optional int32 time = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_time:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &time_)));
          set_has_time();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckClientFinish::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 time = 2;
  if (has_time()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->time(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckClientFinish::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 time = 2;
  if (has_time()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->time(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckClientFinish::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 time = 2;
    if (has_time()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->time());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckClientFinish::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckClientFinish* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckClientFinish*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckClientFinish::MergeFrom(const AckClientFinish& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_time()) {
      set_time(from.time());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckClientFinish::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckClientFinish::CopyFrom(const AckClientFinish& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckClientFinish::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckClientFinish::Swap(AckClientFinish* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(time_, other->time_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckClientFinish::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckClientFinish_descriptor_;
  metadata.reflection = AckClientFinish_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ClientReqGetReward::kNodeFieldNumber;
#endif  // !_MSC_VER

ClientReqGetReward::ClientReqGetReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ClientReqGetReward::InitAsDefaultInstance() {
}

ClientReqGetReward::ClientReqGetReward(const ClientReqGetReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ClientReqGetReward::SharedCtor() {
  _cached_size_ = 0;
  node_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ClientReqGetReward::~ClientReqGetReward() {
  SharedDtor();
}

void ClientReqGetReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ClientReqGetReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ClientReqGetReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ClientReqGetReward_descriptor_;
}

const ClientReqGetReward& ClientReqGetReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fProtectKing_2eproto();
  return *default_instance_;
}

ClientReqGetReward* ClientReqGetReward::default_instance_ = NULL;

ClientReqGetReward* ClientReqGetReward::New() const {
  return new ClientReqGetReward;
}

void ClientReqGetReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    node_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ClientReqGetReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 node = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_)));
          set_has_node();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ClientReqGetReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 node = 1;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->node(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ClientReqGetReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 node = 1;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->node(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ClientReqGetReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 node = 1;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ClientReqGetReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ClientReqGetReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ClientReqGetReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ClientReqGetReward::MergeFrom(const ClientReqGetReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_node()) {
      set_node(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ClientReqGetReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ClientReqGetReward::CopyFrom(const ClientReqGetReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ClientReqGetReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ClientReqGetReward::Swap(ClientReqGetReward* other) {
  if (other != this) {
    std::swap(node_, other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ClientReqGetReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ClientReqGetReward_descriptor_;
  metadata.reflection = ClientReqGetReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int AckGetReward::kRetFieldNumber;
const int AckGetReward::kNodeFieldNumber;
#endif  // !_MSC_VER

AckGetReward::AckGetReward()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void AckGetReward::InitAsDefaultInstance() {
}

AckGetReward::AckGetReward(const AckGetReward& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void AckGetReward::SharedCtor() {
  _cached_size_ = 0;
  ret_ = 0;
  node_ = 0;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

AckGetReward::~AckGetReward() {
  SharedDtor();
}

void AckGetReward::SharedDtor() {
  if (this != default_instance_) {
  }
}

void AckGetReward::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* AckGetReward::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return AckGetReward_descriptor_;
}

const AckGetReward& AckGetReward::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fProtectKing_2eproto();
  return *default_instance_;
}

AckGetReward* AckGetReward::default_instance_ = NULL;

AckGetReward* AckGetReward::New() const {
  return new AckGetReward;
}

void AckGetReward::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = 0;
    node_ = 0;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool AckGetReward::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required int32 ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectTag(16)) goto parse_node;
        break;
      }

      // optional int32 node = 2;
      case 2: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
         parse_node:
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   ::google::protobuf::int32, ::google::protobuf::internal::WireFormatLite::TYPE_INT32>(
                 input, &node_)));
          set_has_node();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void AckGetReward::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required int32 ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(1, this->ret(), output);
  }

  // optional int32 node = 2;
  if (has_node()) {
    ::google::protobuf::internal::WireFormatLite::WriteInt32(2, this->node(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* AckGetReward::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required int32 ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(1, this->ret(), target);
  }

  // optional int32 node = 2;
  if (has_node()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteInt32ToArray(2, this->node(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int AckGetReward::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required int32 ret = 1;
    if (has_ret()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->ret());
    }

    // optional int32 node = 2;
    if (has_node()) {
      total_size += 1 +
        ::google::protobuf::internal::WireFormatLite::Int32Size(
          this->node());
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void AckGetReward::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const AckGetReward* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const AckGetReward*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void AckGetReward::MergeFrom(const AckGetReward& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
    if (from.has_node()) {
      set_node(from.node());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void AckGetReward::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void AckGetReward::CopyFrom(const AckGetReward& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool AckGetReward::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void AckGetReward::Swap(AckGetReward* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(node_, other->node_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata AckGetReward::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = AckGetReward_descriptor_;
  metadata.reflection = AckGetReward_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int ToClientProtectResult::kRetFieldNumber;
#endif  // !_MSC_VER

ToClientProtectResult::ToClientProtectResult()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void ToClientProtectResult::InitAsDefaultInstance() {
}

ToClientProtectResult::ToClientProtectResult(const ToClientProtectResult& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void ToClientProtectResult::SharedCtor() {
  _cached_size_ = 0;
  ret_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

ToClientProtectResult::~ToClientProtectResult() {
  SharedDtor();
}

void ToClientProtectResult::SharedDtor() {
  if (this != default_instance_) {
  }
}

void ToClientProtectResult::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* ToClientProtectResult::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return ToClientProtectResult_descriptor_;
}

const ToClientProtectResult& ToClientProtectResult::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fProtectKing_2eproto();
  return *default_instance_;
}

ToClientProtectResult* ToClientProtectResult::default_instance_ = NULL;

ToClientProtectResult* ToClientProtectResult::New() const {
  return new ToClientProtectResult;
}

void ToClientProtectResult::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    ret_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool ToClientProtectResult::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool ret = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &ret_)));
          set_has_ret();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void ToClientProtectResult::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool ret = 1;
  if (has_ret()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->ret(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* ToClientProtectResult::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool ret = 1;
  if (has_ret()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->ret(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int ToClientProtectResult::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool ret = 1;
    if (has_ret()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void ToClientProtectResult::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const ToClientProtectResult* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const ToClientProtectResult*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void ToClientProtectResult::MergeFrom(const ToClientProtectResult& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_ret()) {
      set_ret(from.ret());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void ToClientProtectResult::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void ToClientProtectResult::CopyFrom(const ToClientProtectResult& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool ToClientProtectResult::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void ToClientProtectResult::Swap(ToClientProtectResult* other) {
  if (other != this) {
    std::swap(ret_, other->ret_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata ToClientProtectResult::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = ToClientProtectResult_descriptor_;
  metadata.reflection = ToClientProtectResult_reflection_;
  return metadata;
}


// ===================================================================

#ifndef _MSC_VER
const int WSToGMDoubleProtectKing::kFlagFieldNumber;
#endif  // !_MSC_VER

WSToGMDoubleProtectKing::WSToGMDoubleProtectKing()
  : ::google::protobuf::Message() {
  SharedCtor();
}

void WSToGMDoubleProtectKing::InitAsDefaultInstance() {
}

WSToGMDoubleProtectKing::WSToGMDoubleProtectKing(const WSToGMDoubleProtectKing& from)
  : ::google::protobuf::Message() {
  SharedCtor();
  MergeFrom(from);
}

void WSToGMDoubleProtectKing::SharedCtor() {
  _cached_size_ = 0;
  flag_ = false;
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
}

WSToGMDoubleProtectKing::~WSToGMDoubleProtectKing() {
  SharedDtor();
}

void WSToGMDoubleProtectKing::SharedDtor() {
  if (this != default_instance_) {
  }
}

void WSToGMDoubleProtectKing::SetCachedSize(int size) const {
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
}
const ::google::protobuf::Descriptor* WSToGMDoubleProtectKing::descriptor() {
  protobuf_AssignDescriptorsOnce();
  return WSToGMDoubleProtectKing_descriptor_;
}

const WSToGMDoubleProtectKing& WSToGMDoubleProtectKing::default_instance() {
  if (default_instance_ == NULL) protobuf_AddDesc_Activity_2fProtectKing_2eproto();
  return *default_instance_;
}

WSToGMDoubleProtectKing* WSToGMDoubleProtectKing::default_instance_ = NULL;

WSToGMDoubleProtectKing* WSToGMDoubleProtectKing::New() const {
  return new WSToGMDoubleProtectKing;
}

void WSToGMDoubleProtectKing::Clear() {
  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    flag_ = false;
  }
  ::memset(_has_bits_, 0, sizeof(_has_bits_));
  mutable_unknown_fields()->Clear();
}

bool WSToGMDoubleProtectKing::MergePartialFromCodedStream(
    ::google::protobuf::io::CodedInputStream* input) {
#define DO_(EXPRESSION) if (!(EXPRESSION)) return false
  ::google::protobuf::uint32 tag;
  while ((tag = input->ReadTag()) != 0) {
    switch (::google::protobuf::internal::WireFormatLite::GetTagFieldNumber(tag)) {
      // required bool flag = 1;
      case 1: {
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_VARINT) {
          DO_((::google::protobuf::internal::WireFormatLite::ReadPrimitive<
                   bool, ::google::protobuf::internal::WireFormatLite::TYPE_BOOL>(
                 input, &flag_)));
          set_has_flag();
        } else {
          goto handle_uninterpreted;
        }
        if (input->ExpectAtEnd()) return true;
        break;
      }

      default: {
      handle_uninterpreted:
        if (::google::protobuf::internal::WireFormatLite::GetTagWireType(tag) ==
            ::google::protobuf::internal::WireFormatLite::WIRETYPE_END_GROUP) {
          return true;
        }
        DO_(::google::protobuf::internal::WireFormat::SkipField(
              input, tag, mutable_unknown_fields()));
        break;
      }
    }
  }
  return true;
#undef DO_
}

void WSToGMDoubleProtectKing::SerializeWithCachedSizes(
    ::google::protobuf::io::CodedOutputStream* output) const {
  // required bool flag = 1;
  if (has_flag()) {
    ::google::protobuf::internal::WireFormatLite::WriteBool(1, this->flag(), output);
  }

  if (!unknown_fields().empty()) {
    ::google::protobuf::internal::WireFormat::SerializeUnknownFields(
        unknown_fields(), output);
  }
}

::google::protobuf::uint8* WSToGMDoubleProtectKing::SerializeWithCachedSizesToArray(
    ::google::protobuf::uint8* target) const {
  // required bool flag = 1;
  if (has_flag()) {
    target = ::google::protobuf::internal::WireFormatLite::WriteBoolToArray(1, this->flag(), target);
  }

  if (!unknown_fields().empty()) {
    target = ::google::protobuf::internal::WireFormat::SerializeUnknownFieldsToArray(
        unknown_fields(), target);
  }
  return target;
}

int WSToGMDoubleProtectKing::ByteSize() const {
  int total_size = 0;

  if (_has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    // required bool flag = 1;
    if (has_flag()) {
      total_size += 1 + 1;
    }

  }
  if (!unknown_fields().empty()) {
    total_size +=
      ::google::protobuf::internal::WireFormat::ComputeUnknownFieldsSize(
        unknown_fields());
  }
  GOOGLE_SAFE_CONCURRENT_WRITES_BEGIN();
  _cached_size_ = total_size;
  GOOGLE_SAFE_CONCURRENT_WRITES_END();
  return total_size;
}

void WSToGMDoubleProtectKing::MergeFrom(const ::google::protobuf::Message& from) {
  GOOGLE_CHECK_NE(&from, this);
  const WSToGMDoubleProtectKing* source =
    ::google::protobuf::internal::dynamic_cast_if_available<const WSToGMDoubleProtectKing*>(
      &from);
  if (source == NULL) {
    ::google::protobuf::internal::ReflectionOps::Merge(from, this);
  } else {
    MergeFrom(*source);
  }
}

void WSToGMDoubleProtectKing::MergeFrom(const WSToGMDoubleProtectKing& from) {
  GOOGLE_CHECK_NE(&from, this);
  if (from._has_bits_[0 / 32] & (0xffu << (0 % 32))) {
    if (from.has_flag()) {
      set_flag(from.flag());
    }
  }
  mutable_unknown_fields()->MergeFrom(from.unknown_fields());
}

void WSToGMDoubleProtectKing::CopyFrom(const ::google::protobuf::Message& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void WSToGMDoubleProtectKing::CopyFrom(const WSToGMDoubleProtectKing& from) {
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool WSToGMDoubleProtectKing::IsInitialized() const {
  if ((_has_bits_[0] & 0x00000001) != 0x00000001) return false;

  return true;
}

void WSToGMDoubleProtectKing::Swap(WSToGMDoubleProtectKing* other) {
  if (other != this) {
    std::swap(flag_, other->flag_);
    std::swap(_has_bits_[0], other->_has_bits_[0]);
    _unknown_fields_.Swap(&other->_unknown_fields_);
    std::swap(_cached_size_, other->_cached_size_);
  }
}

::google::protobuf::Metadata WSToGMDoubleProtectKing::GetMetadata() const {
  protobuf_AssignDescriptorsOnce();
  ::google::protobuf::Metadata metadata;
  metadata.descriptor = WSToGMDoubleProtectKing_descriptor_;
  metadata.reflection = WSToGMDoubleProtectKing_reflection_;
  return metadata;
}


// @@protoc_insertion_point(namespace_scope)

}  // namespace ActivityKing

// @@protoc_insertion_point(global_scope)
